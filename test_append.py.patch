# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/series/methods/test_append.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/series/methods/test_append.py
@@ -7,7 +7,23 @@
 
 
 class TestSeriesAppend:
+    """ """
     def test_append(self, datetime_series, string_series, object_series):
+        """
+
+        Parameters
+        ----------
+        datetime_series :
+            
+        string_series :
+            
+        object_series :
+            
+
+        Returns
+        -------
+
+        """
         appended_series = string_series.append(object_series)
         for idx, value in appended_series.items():
             if idx in string_series.index:
@@ -22,12 +38,24 @@
             datetime_series.append(datetime_series, verify_integrity=True)
 
     def test_append_many(self, datetime_series):
+        """
+
+        Parameters
+        ----------
+        datetime_series :
+            
+
+        Returns
+        -------
+
+        """
         pieces = [datetime_series[:5], datetime_series[5:10], datetime_series[10:]]
 
         result = pieces[0].append(pieces[1:])
         tm.assert_series_equal(result, datetime_series)
 
     def test_append_duplicates(self):
+        """ """
         # GH 13677
         s1 = pd.Series([1, 2, 3])
         s2 = pd.Series([4, 5, 6])
@@ -51,6 +79,7 @@
             pd.concat([s1, s2], verify_integrity=True)
 
     def test_append_tuples(self):
+        """ """
         # GH 28410
         s = pd.Series([1, 2, 3])
         list_input = [s, s]
@@ -62,6 +91,7 @@
         tm.assert_series_equal(expected, result)
 
     def test_append_dataframe_raises(self):
+        """ """
         # GH 31413
         df = pd.DataFrame({"A": [1, 2], "B": [3, 4]})
 
@@ -73,7 +103,9 @@
 
 
 class TestSeriesAppendWithDatetimeIndex:
+    """ """
     def test_append(self):
+        """ """
         rng = date_range("5/8/2012 1:45", periods=10, freq="5T")
         ts = Series(np.random.randn(len(rng)), rng)
         df = DataFrame(np.random.randn(len(rng), 4), index=rng)
@@ -100,6 +132,7 @@
         assert rng1.append(rng2).name is None
 
     def test_append_tz(self):
+        """ """
         # see gh-2938
         rng = date_range("5/8/2012 1:45", periods=10, freq="5T", tz="US/Eastern")
         rng2 = date_range("5/8/2012 2:35", periods=10, freq="5T", tz="US/Eastern")
@@ -118,6 +151,7 @@
         tm.assert_index_equal(appended, rng3)
 
     def test_append_tz_explicit_pytz(self):
+        """ """
         # see gh-2938
         from pytz import timezone as timezone
 
@@ -144,6 +178,7 @@
         tm.assert_index_equal(appended, rng3)
 
     def test_append_tz_dateutil(self):
+        """ """
         # see gh-2938
         rng = date_range(
             "5/8/2012 1:45", periods=10, freq="5T", tz="dateutil/US/Eastern"
@@ -168,6 +203,7 @@
         tm.assert_index_equal(appended, rng3)
 
     def test_series_append_aware(self):
+        """ """
         rng1 = date_range("1/1/2011 01:00", periods=1, freq="H", tz="US/Eastern")
         rng2 = date_range("1/1/2011 02:00", periods=1, freq="H", tz="US/Eastern")
         ser1 = Series([1], index=rng1)
@@ -212,6 +248,7 @@
         tm.assert_series_equal(ts_result, exp)
 
     def test_series_append_aware_naive(self):
+        """ """
         rng1 = date_range("1/1/2011 01:00", periods=1, freq="H")
         rng2 = date_range("1/1/2011 02:00", periods=1, freq="H", tz="US/Eastern")
         ser1 = Series(np.random.randn(len(rng1)), index=rng1)
@@ -232,6 +269,7 @@
         assert ts_result.index.equals(expected)
 
     def test_series_append_dst(self):
+        """ """
         rng1 = date_range("1/1/2016 01:00", periods=3, freq="H", tz="US/Eastern")
         rng2 = date_range("8/1/2016 01:00", periods=3, freq="H", tz="US/Eastern")
         ser1 = Series([1, 2, 3], index=rng1)
