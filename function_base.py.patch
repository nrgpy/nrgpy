# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/function_base.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/function_base.py
@@ -17,20 +17,42 @@
 
 def _linspace_dispatcher(start, stop, num=None, endpoint=None, retstep=None,
                          dtype=None, axis=None):
+    """
+
+    Parameters
+    ----------
+    start :
+        
+    stop :
+        
+    num :
+         (Default value = None)
+    endpoint :
+         (Default value = None)
+    retstep :
+         (Default value = None)
+    dtype :
+         (Default value = None)
+    axis :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (start, stop)
 
 
 @array_function_dispatch(_linspace_dispatcher)
 def linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None,
              axis=0):
-    """
-    Return evenly spaced numbers over a specified interval.
-
+    """Return evenly spaced numbers over a specified interval.
+    
     Returns `num` evenly spaced samples, calculated over the
     interval [`start`, `stop`].
-
+    
     The endpoint of the interval can optionally be excluded.
-
+    
     .. versionchanged:: 1.16.0
         Non-scalar `start` and `stop` are now supported.
 
@@ -50,18 +72,15 @@
         Default is True.
     retstep : bool, optional
         If True, return (`samples`, `step`), where `step` is the spacing
-        between samples.
+        between samples. (Default value = False)
     dtype : dtype, optional
         The type of the output array.  If `dtype` is not given, infer the data
         type from the other input arguments.
-
-        .. versionadded:: 1.9.0
-
+        .. versionadded:: 1.9.0 (Default value = None)
     axis : int, optional
         The axis in the result to store the samples.  Relevant only if start
         or stop are array-like.  By default (0), the samples will be along a
         new axis inserted at the beginning. Use -1 to get an axis at the end.
-
         .. versionadded:: 1.16.0
 
     Returns
@@ -72,9 +91,7 @@
         (depending on whether `endpoint` is True or False).
     step : float, optional
         Only returned if `retstep` is True
-
         Size of spacing between samples.
-
 
     See Also
     --------
@@ -84,18 +101,17 @@
                 scale (a geometric progression).
     logspace : Similar to `geomspace`, but with the end points specified as
                logarithms.
-
     Examples
     --------
+    
+    Graphical illustration:
     >>> np.linspace(2.0, 3.0, num=5)
     array([2.  , 2.25, 2.5 , 2.75, 3.  ])
     >>> np.linspace(2.0, 3.0, num=5, endpoint=False)
     array([2. ,  2.2,  2.4,  2.6,  2.8])
     >>> np.linspace(2.0, 3.0, num=5, retstep=True)
     (array([2.  ,  2.25,  2.5 ,  2.75,  3.  ]), 0.25)
-
-    Graphical illustration:
-
+    
     >>> import matplotlib.pyplot as plt
     >>> N = 8
     >>> y = np.zeros(N)
@@ -108,7 +124,6 @@
     >>> plt.ylim([-0.5, 1])
     (-0.5, 1)
     >>> plt.show()
-
     """
     num = operator.index(num)
     if num < 0:
@@ -167,19 +182,41 @@
 
 def _logspace_dispatcher(start, stop, num=None, endpoint=None, base=None,
                          dtype=None, axis=None):
+    """
+
+    Parameters
+    ----------
+    start :
+        
+    stop :
+        
+    num :
+         (Default value = None)
+    endpoint :
+         (Default value = None)
+    base :
+         (Default value = None)
+    dtype :
+         (Default value = None)
+    axis :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (start, stop)
 
 
 @array_function_dispatch(_logspace_dispatcher)
 def logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None,
              axis=0):
-    """
-    Return numbers spaced evenly on a log scale.
-
+    """Return numbers spaced evenly on a log scale.
+    
     In linear space, the sequence starts at ``base ** start``
     (`base` to the power of `start`) and ends with ``base ** stop``
     (see `endpoint` below).
-
+    
     .. versionchanged:: 1.16.0
         Non-scalar `start` and `stop` are now supported.
 
@@ -203,14 +240,12 @@
         Default is 10.0.
     dtype : dtype
         The type of the output array.  If `dtype` is not given, infer the data
-        type from the other input arguments.
+        type from the other input arguments. (Default value = None)
     axis : int, optional
         The axis in the result to store the samples.  Relevant only if start
         or stop are array-like.  By default (0), the samples will be along a
         new axis inserted at the beginning. Use -1 to get an axis at the end.
-
         .. versionadded:: 1.16.0
-
 
     Returns
     -------
@@ -225,27 +260,26 @@
     linspace : Similar to logspace, but with the samples uniformly distributed
                in linear space, instead of log space.
     geomspace : Similar to logspace, but with endpoints specified directly.
-
     Notes
     -----
     Logspace is equivalent to the code
-
+    
+    Examples
+    --------
+    
+    Graphical illustration:
     >>> y = np.linspace(start, stop, num=num, endpoint=endpoint)
     ... # doctest: +SKIP
     >>> power(base, y).astype(dtype)
     ... # doctest: +SKIP
-
-    Examples
-    --------
+    
     >>> np.logspace(2.0, 3.0, num=4)
     array([ 100.        ,  215.443469  ,  464.15888336, 1000.        ])
     >>> np.logspace(2.0, 3.0, num=4, endpoint=False)
     array([100.        ,  177.827941  ,  316.22776602,  562.34132519])
     >>> np.logspace(2.0, 3.0, num=4, base=2.0)
     array([4.        ,  5.0396842 ,  6.34960421,  8.        ])
-
-    Graphical illustration:
-
+    
     >>> import matplotlib.pyplot as plt
     >>> N = 10
     >>> x1 = np.logspace(0.1, 1, N, endpoint=True)
@@ -258,7 +292,6 @@
     >>> plt.ylim([-0.5, 1])
     (-0.5, 1)
     >>> plt.show()
-
     """
     y = linspace(start, stop, num=num, endpoint=endpoint, axis=axis)
     if dtype is None:
@@ -268,17 +301,37 @@
 
 def _geomspace_dispatcher(start, stop, num=None, endpoint=None, dtype=None,
                           axis=None):
+    """
+
+    Parameters
+    ----------
+    start :
+        
+    stop :
+        
+    num :
+         (Default value = None)
+    endpoint :
+         (Default value = None)
+    dtype :
+         (Default value = None)
+    axis :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (start, stop)
 
 
 @array_function_dispatch(_geomspace_dispatcher)
 def geomspace(start, stop, num=50, endpoint=True, dtype=None, axis=0):
-    """
-    Return numbers spaced evenly on a log scale (a geometric progression).
-
+    """Return numbers spaced evenly on a log scale (a geometric progression).
+    
     This is similar to `logspace`, but with endpoints specified directly.
     Each output sample is a constant multiple of the previous.
-
+    
     .. versionchanged:: 1.16.0
         Non-scalar `start` and `stop` are now supported.
 
@@ -298,12 +351,11 @@
         Default is True.
     dtype : dtype
         The type of the output array.  If `dtype` is not given, infer the data
-        type from the other input arguments.
+        type from the other input arguments. (Default value = None)
     axis : int, optional
         The axis in the result to store the samples.  Relevant only if start
         or stop are array-like.  By default (0), the samples will be along a
         new axis inserted at the beginning. Use -1 to get an axis at the end.
-
         .. versionadded:: 1.16.0
 
     Returns
@@ -319,15 +371,21 @@
                progression.
     arange : Similar to linspace, with the step size specified instead of the
              number of samples.
-
     Notes
     -----
     If the inputs or dtype are complex, the output will follow a logarithmic
     spiral in the complex plane.  (There are an infinite number of spirals
     passing through two points; the output will follow the shortest such path.)
-
     Examples
     --------
+    
+    Note that the above may not produce exact integers:
+    
+    
+    Negative, decreasing, and complex inputs are allowed:
+    
+    
+    Graphical illustration of ``endpoint`` parameter:
     >>> np.geomspace(1, 1000, num=4)
     array([    1.,    10.,   100.,  1000.])
     >>> np.geomspace(1, 1000, num=3, endpoint=False)
@@ -336,16 +394,12 @@
     array([   1.        ,    5.62341325,   31.6227766 ,  177.827941  ])
     >>> np.geomspace(1, 256, num=9)
     array([   1.,    2.,    4.,    8.,   16.,   32.,   64.,  128.,  256.])
-
-    Note that the above may not produce exact integers:
-
+    
     >>> np.geomspace(1, 256, num=9, dtype=int)
     array([  1,   2,   4,   7,  16,  32,  63, 127, 256])
     >>> np.around(np.geomspace(1, 256, num=9)).astype(int)
     array([  1,   2,   4,   8,  16,  32,  64, 128, 256])
-
-    Negative, decreasing, and complex inputs are allowed:
-
+    
     >>> np.geomspace(1000, 1, num=4)
     array([1000.,  100.,   10.,    1.])
     >>> np.geomspace(-1000, -1, num=4)
@@ -356,9 +410,7 @@
     array([-1.00000000e+00+1.22464680e-16j, -7.07106781e-01+7.07106781e-01j,
             6.12323400e-17+1.00000000e+00j,  7.07106781e-01+7.07106781e-01j,
             1.00000000e+00+0.00000000e+00j])
-
-    Graphical illustration of ``endpoint`` parameter:
-
+    
     >>> import matplotlib.pyplot as plt
     >>> N = 10
     >>> y = np.zeros(N)
@@ -370,7 +422,6 @@
     [0.5, 2000, 0, 3]
     >>> plt.grid(True, color='0.7', linestyle='-', which='both', axis='both')
     >>> plt.show()
-
     """
     start = asanyarray(start)
     stop = asanyarray(stop)
@@ -417,11 +468,19 @@
 
 
 def _needs_add_docstring(obj):
-    """
-    Returns true if the only way to set the docstring of `obj` from python is
+    """Returns true if the only way to set the docstring of `obj` from python is
     via add_docstring.
-
+    
     This function errs on the side of being overly conservative.
+
+    Parameters
+    ----------
+    obj :
+        
+
+    Returns
+    -------
+
     """
     Py_TPFLAGS_HEAPTYPE = 1 << 9
 
@@ -435,6 +494,21 @@
 
 
 def _add_docstring(obj, doc, warn_on_python):
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+    doc :
+        
+    warn_on_python :
+        
+
+    Returns
+    -------
+
+    """
     if warn_on_python and not _needs_add_docstring(obj):
         warnings.warn(
             "add_newdoc was used on a pure-python object {}. "
@@ -449,9 +523,8 @@
 
 
 def add_newdoc(place, obj, doc, warn_on_python=True):
-    """
-    Add documentation to an existing object, typically one defined in C
-
+    """Add documentation to an existing object, typically one defined in C
+    
     The purpose is to allow easier editing of the docstrings without requiring
     a re-compile. This exists primarily for internal use within numpy itself.
 
@@ -464,34 +537,35 @@
         function name
     doc : {str, Tuple[str, str], List[Tuple[str, str]]}
         If a string, the documentation to apply to `obj`
-
         If a tuple, then the first element is interpreted as an attribute of
         `obj` and the second as the docstring to apply - ``(method, docstring)``
-
         If a list, then each element of the list should be a tuple of length
         two - ``[(method1, docstring1), (method2, docstring2), ...]``
     warn_on_python : bool
         If True, the default, emit `UserWarning` if this is used to attach
         documentation to a pure-python object.
 
+    Returns
+    -------
+
     Notes
     -----
     This routine never raises an error if the docstring can't be written, but
     will raise an error if the object being documented does not exist.
-
+    
     This routine cannot modify read-only docstrings, as appear
     in new-style classes or built-in functions. Because this
     routine never raises an error the caller must check manually
     that the docstrings were changed.
-
+    
     Since this function grabs the ``char *`` from a c-level str object and puts
     it into the ``tp_doc`` slot of the type of `obj`, it violates a number of
     C-API best-practices, by:
-
+    
     - modifying a `PyTypeObject` after calling `PyType_Ready`
     - calling `Py_INCREF` on the str and losing the reference, so the str
       will never be released
-
+    
     If possible it should be avoided.
     """
     new = getattr(__import__(place, globals(), {}, [obj]), obj)
