# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/generic/test_generic.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/generic/test_generic.py
@@ -17,19 +17,35 @@
 
 
 class Generic:
+    """ """
     @property
     def _ndim(self):
+        """ """
         return self._typ._AXIS_LEN
 
     def _axes(self):
-        """ return the axes for my object typ """
+        """ """
         return self._typ._AXIS_ORDERS
 
     def _construct(self, shape, value=None, dtype=None, **kwargs):
-        """
-        construct an object for the given shape
+        """construct an object for the given shape
         if value is specified use that if its a scalar
         if value is an array, repeat it as needed
+
+        Parameters
+        ----------
+        shape :
+            
+        value :
+             (Default value = None)
+        dtype :
+             (Default value = None)
+        **kwargs :
+            
+
+        Returns
+        -------
+
         """
         if isinstance(shape, int):
             shape = tuple([shape] * self._ndim)
@@ -57,9 +73,23 @@
         return self._typ(arr, dtype=dtype, **kwargs)
 
     def _compare(self, result, expected):
+        """
+
+        Parameters
+        ----------
+        result :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         self._comparator(result, expected)
 
     def test_rename(self):
+        """ """
 
         # single axis
         idx = list("ABCD")
@@ -84,6 +114,7 @@
         # multiple axes at once
 
     def test_get_numeric_data(self):
+        """ """
 
         n = 4
         kwargs = {
@@ -110,6 +141,7 @@
         # non-inclusion
 
     def test_nonzero(self):
+        """ """
 
         # GH 4633
         # look at the boolean/nonzero behavior for objects
@@ -160,6 +192,7 @@
             not obj1
 
     def test_downcast(self):
+        """ """
         # test close downcasting
 
         o = self._construct(shape=4, value=9, dtype=np.int64)
@@ -173,10 +206,22 @@
         self._compare(result, o)
 
     def test_constructor_compound_dtypes(self):
+        """ """
         # see gh-5191
         # Compound dtypes should raise NotImplementedError.
 
         def f(dtype):
+            """
+
+            Parameters
+            ----------
+            dtype :
+                
+
+            Returns
+            -------
+
+            """
             return self._construct(shape=3, value=1, dtype=dtype)
 
         msg = (
@@ -193,6 +238,19 @@
         f("M8[ns]")
 
     def check_metadata(self, x, y=None):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+        y :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         for m in x._metadata:
             v = getattr(x, m, None)
             if y is None:
@@ -201,6 +259,7 @@
                 assert v == getattr(y, m, None)
 
     def test_metadata_propagation(self):
+        """ """
         # check that the metadata matches up on the resulting ops
 
         o = self._construct(shape=3)
@@ -252,6 +311,17 @@
             self.check_metadata(v1 | v2)
 
     def test_head_tail(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         # GH5370
 
         o = self._construct(shape=len(index))
@@ -277,6 +347,7 @@
         self._compare(o.tail(-3), o.tail(len(index) - 3))
 
     def test_sample(self):
+        """ """
         # Fixes issue: 2419
 
         o = self._construct(shape=10)
@@ -405,6 +476,7 @@
         self._compare(o.sample(n=1, axis=0, weights=weights_with_None), o.iloc[5:6])
 
     def test_sample_upsampling_without_replacement(self):
+        """ """
         # GH27451
 
         df = pd.DataFrame({"A": list("abc")})
@@ -416,6 +488,7 @@
             df.sample(frac=2, replace=False)
 
     def test_sample_is_copy(self):
+        """ """
         # GH-27357, GH-30784: ensure the result of sample is an actual copy and
         # doesn't track the parent dataframe / doesn't give SettingWithCopy warnings
         df = pd.DataFrame(np.random.randn(10, 3), columns=["a", "b", "c"])
@@ -425,6 +498,7 @@
             df2["d"] = 1
 
     def test_size_compat(self):
+        """ """
         # GH8846
         # size property should be defined
 
@@ -433,6 +507,7 @@
         assert o.size == 10 ** len(o.axes)
 
     def test_split_compat(self):
+        """ """
         # xref GH8846
         o = self._construct(shape=10)
         assert len(np.array_split(o, 5)) == 5
@@ -440,6 +515,7 @@
 
     # See gh-12301
     def test_stat_unexpected_keyword(self):
+        """ """
         obj = self._construct(5)
         starwars = "Star Wars"
         errmsg = "unexpected keyword"
@@ -455,6 +531,17 @@
 
     @pytest.mark.parametrize("func", ["sum", "cumsum", "any", "var"])
     def test_api_compat(self, func):
+        """
+
+        Parameters
+        ----------
+        func :
+            
+
+        Returns
+        -------
+
+        """
 
         # GH 12021
         # compat for __name__, __qualname__
@@ -465,6 +552,7 @@
         assert f.__qualname__.endswith(func)
 
     def test_stat_non_defaults_args(self):
+        """ """
         obj = self._construct(5)
         out = np.array([0])
         errmsg = "the 'out' parameter is not supported"
@@ -479,6 +567,7 @@
             obj.any(out=out)  # logical_function
 
     def test_truncate_out_of_bounds(self):
+        """ """
         # GH11382
 
         # small
@@ -501,6 +590,19 @@
     )
     @pytest.mark.parametrize("shape", [0, 1, 2])
     def test_copy_and_deepcopy(self, shape, func):
+        """
+
+        Parameters
+        ----------
+        shape :
+            
+        func :
+            
+
+        Returns
+        -------
+
+        """
         # GH 15444
         obj = self._construct(shape)
         obj_copy = func(obj)
@@ -521,6 +623,23 @@
         ],
     )
     def test_pct_change(self, periods, fill_method, limit, exp):
+        """
+
+        Parameters
+        ----------
+        periods :
+            
+        fill_method :
+            
+        limit :
+            
+        exp :
+            
+
+        Returns
+        -------
+
+        """
         vals = [np.nan, np.nan, 1, 2, 4, 10, np.nan, np.nan]
         obj = self._typ(vals)
         func = getattr(obj, "pct_change")
@@ -532,9 +651,21 @@
 
 
 class TestNDFrame:
+    """ """
     # tests that don't fit elsewhere
 
     def test_sample(sel):
+        """
+
+        Parameters
+        ----------
+        sel :
+            
+
+        Returns
+        -------
+
+        """
         # Fixes issue: 2419
         # additional specific object based tests
 
@@ -662,6 +793,19 @@
         ],
     )
     def test_sample_random_state(self, func_str, arg):
+        """
+
+        Parameters
+        ----------
+        func_str :
+            
+        arg :
+            
+
+        Returns
+        -------
+
+        """
         # GH32503
         df = pd.DataFrame({"col1": range(10, 20), "col2": range(20, 30)})
         result = df.sample(n=3, random_state=eval(func_str)(arg))
@@ -669,6 +813,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_squeeze(self):
+        """ """
         # noop
         for s in [tm.makeFloatSeries(), tm.makeStringSeries(), tm.makeObjectSeries()]:
             tm.assert_series_equal(s.squeeze(), s)
@@ -704,6 +849,7 @@
         tm.assert_frame_equal(df.squeeze(axis=0), df)
 
     def test_numpy_squeeze(self):
+        """ """
         s = tm.makeFloatSeries()
         tm.assert_series_equal(np.squeeze(s), s)
 
@@ -711,6 +857,7 @@
         tm.assert_series_equal(np.squeeze(df), df["A"])
 
     def test_transpose(self):
+        """ """
         for s in [tm.makeFloatSeries(), tm.makeStringSeries(), tm.makeObjectSeries()]:
             # calls implementation in pandas/core/base.py
             tm.assert_series_equal(s.transpose(), s)
@@ -718,6 +865,7 @@
             tm.assert_frame_equal(df.transpose().transpose(), df)
 
     def test_numpy_transpose(self):
+        """ """
         msg = "the 'axes' parameter is not supported"
 
         s = tm.makeFloatSeries()
@@ -733,6 +881,7 @@
             np.transpose(df, axes=1)
 
     def test_take(self):
+        """ """
         indices = [1, 5, -2, 6, 3, -1]
         for s in [tm.makeFloatSeries(), tm.makeStringSeries(), tm.makeObjectSeries()]:
             out = s.take(indices)
@@ -750,6 +899,7 @@
             tm.assert_frame_equal(out, expected)
 
     def test_take_invalid_kwargs(self):
+        """ """
         indices = [-3, 2, 0, 1]
         s = tm.makeFloatSeries()
         df = tm.makeTimeDataFrame()
@@ -769,6 +919,17 @@
 
     @pytest.mark.parametrize("is_copy", [True, False])
     def test_depr_take_kwarg_is_copy(self, is_copy):
+        """
+
+        Parameters
+        ----------
+        is_copy :
+            
+
+        Returns
+        -------
+
+        """
         # GH 27357
         df = DataFrame({"A": [1, 2, 3]})
         msg = (
@@ -785,6 +946,7 @@
             s.take([0, 1], is_copy=is_copy)
 
     def test_equals(self):
+        """ """
         # Add object dtype column with nans
         index = np.random.random(10)
         df1 = DataFrame(np.random.random(10), index=index, columns=["floats"])
@@ -838,6 +1000,7 @@
         assert df3.equals(df2)
 
     def test_pipe(self):
+        """ """
         df = DataFrame({"A": [1, 2, 3]})
         f = lambda x, y: x ** y
         result = df.pipe(f, 2)
@@ -848,6 +1011,7 @@
         tm.assert_series_equal(result, expected.A)
 
     def test_pipe_tuple(self):
+        """ """
         df = DataFrame({"A": [1, 2, 3]})
         f = lambda x, y: y
         result = df.pipe((f, "y"), 0)
@@ -857,6 +1021,7 @@
         tm.assert_series_equal(result, df.A)
 
     def test_pipe_tuple_error(self):
+        """ """
         df = DataFrame({"A": [1, 2, 3]})
         f = lambda x, y: y
         with pytest.raises(ValueError):
@@ -867,6 +1032,17 @@
 
     @pytest.mark.parametrize("box", [pd.Series, pd.DataFrame])
     def test_axis_classmethods(self, box):
+        """
+
+        Parameters
+        ----------
+        box :
+            
+
+        Returns
+        -------
+
+        """
         obj = box(dtype=object)
         values = box._AXIS_TO_AXIS_NUMBER.keys()
         for v in values:
@@ -876,6 +1052,17 @@
 
     @pytest.mark.parametrize("box", [pd.Series, pd.DataFrame])
     def test_axis_names_deprecated(self, box):
+        """
+
+        Parameters
+        ----------
+        box :
+            
+
+        Returns
+        -------
+
+        """
         # GH33637
         obj = box(dtype=object)
         with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):
@@ -883,6 +1070,17 @@
 
     @pytest.mark.parametrize("box", [pd.Series, pd.DataFrame])
     def test_axis_numbers_deprecated(self, box):
+        """
+
+        Parameters
+        ----------
+        box :
+            
+
+        Returns
+        -------
+
+        """
         # GH33637
         obj = box(dtype=object)
         with tm.assert_produces_warning(FutureWarning, check_stacklevel=False):
