# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/reshape/merge/test_merge_asof.py
@@ -11,7 +11,23 @@
 
 
 class TestAsOfMerge:
+    """ """
     def read_data(self, datapath, name, dedupe=False):
+        """
+
+        Parameters
+        ----------
+        datapath :
+            
+        name :
+            
+        dedupe :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         path = datapath("reshape", "merge", "data", name)
         x = read_csv(path)
         if dedupe:
@@ -23,6 +39,17 @@
 
     @pytest.fixture(autouse=True)
     def setup_method(self, datapath):
+        """
+
+        Parameters
+        ----------
+        datapath :
+            
+
+        Returns
+        -------
+
+        """
 
         self.trades = self.read_data(datapath, "trades.csv")
         self.quotes = self.read_data(datapath, "quotes.csv", dedupe=True)
@@ -34,7 +61,7 @@
         )
 
     def test_examples1(self):
-        """ doc-string examples """
+        """doc-string examples"""
         left = pd.DataFrame({"a": [1, 5, 10], "left_val": ["a", "b", "c"]})
         right = pd.DataFrame({"a": [1, 2, 3, 6, 7], "right_val": [1, 2, 3, 6, 7]})
 
@@ -46,7 +73,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_examples2(self):
-        """ doc-string examples """
+        """doc-string examples"""
         trades = pd.DataFrame(
             {
                 "time": pd.to_datetime(
@@ -132,7 +159,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_examples3(self):
-        """ doc-string examples """
+        """doc-string examples"""
         # GH14887
 
         left = pd.DataFrame({"a": [1, 5, 10], "left_val": ["a", "b", "c"]})
@@ -146,7 +173,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_examples4(self):
-        """ doc-string examples """
+        """doc-string examples"""
         # GH14887
 
         left = pd.DataFrame({"a": [1, 5, 10], "left_val": ["a", "b", "c"]})
@@ -160,6 +187,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_basic(self):
+        """ """
 
         expected = self.asof
         trades = self.trades
@@ -169,6 +197,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_basic_categorical(self):
+        """ """
 
         expected = self.asof
         trades = self.trades.copy()
@@ -181,6 +210,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_basic_left_index(self):
+        """ """
 
         # GH14253
         expected = self.asof
@@ -197,6 +227,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_basic_right_index(self):
+        """ """
 
         expected = self.asof
         trades = self.trades
@@ -208,6 +239,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_basic_left_index_right_index(self):
+        """ """
 
         expected = self.asof.set_index("time")
         trades = self.trades.set_index("time")
@@ -219,6 +251,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_multi_index(self):
+        """ """
 
         # MultiIndex is prohibited
         trades = self.trades.set_index(["time", "price"])
@@ -232,6 +265,7 @@
             merge_asof(trades, quotes, left_index=True, right_index=True)
 
     def test_on_and_index(self):
+        """ """
 
         # "on" parameter and index together is prohibited
         trades = self.trades.set_index("time")
@@ -249,6 +283,7 @@
             )
 
     def test_basic_left_by_right_by(self):
+        """ """
 
         # GH14253
         expected = self.asof
@@ -261,6 +296,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_missing_right_by(self):
+        """ """
 
         expected = self.asof
         trades = self.trades
@@ -272,6 +308,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_multiby(self):
+        """ """
         # GH13936
         trades = pd.DataFrame(
             {
@@ -337,6 +374,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_multiby_heterogeneous_types(self):
+        """ """
         # GH13936
         trades = pd.DataFrame(
             {
@@ -402,6 +440,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_multiby_indexed(self):
+        """ """
         # GH15676
         left = pd.DataFrame(
             [
@@ -450,6 +489,17 @@
             )
 
     def test_basic2(self, datapath):
+        """
+
+        Parameters
+        ----------
+        datapath :
+            
+
+        Returns
+        -------
+
+        """
 
         expected = self.read_data(datapath, "asof2.csv")
         trades = self.read_data(datapath, "trades2.csv")
@@ -459,6 +509,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_basic_no_by(self):
+        """ """
         f = (
             lambda x: x[x.ticker == "MSFT"]
             .drop("ticker", axis=1)
@@ -474,6 +525,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_valid_join_keys(self):
+        """ """
 
         trades = self.trades
         quotes = self.quotes
@@ -488,6 +540,17 @@
             merge_asof(trades, quotes, by="ticker")
 
     def test_with_duplicates(self, datapath):
+        """
+
+        Parameters
+        ----------
+        datapath :
+            
+
+        Returns
+        -------
+
+        """
 
         q = (
             pd.concat([self.quotes, self.quotes])
@@ -499,6 +562,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_with_duplicates_no_on(self):
+        """ """
 
         df1 = pd.DataFrame({"key": [1, 1, 3], "left_val": [1, 2, 3]})
         df2 = pd.DataFrame({"key": [1, 2, 2], "right_val": [1, 2, 3]})
@@ -509,6 +573,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_valid_allow_exact_matches(self):
+        """ """
 
         trades = self.trades
         quotes = self.quotes
@@ -519,6 +584,7 @@
             )
 
     def test_valid_tolerance(self):
+        """ """
 
         trades = self.trades
         quotes = self.quotes
@@ -565,6 +631,7 @@
             )
 
     def test_non_sorted(self):
+        """ """
 
         trades = self.trades.sort_values("time", ascending=False)
         quotes = self.quotes.sort_values("time", ascending=False)
@@ -594,6 +661,17 @@
         ids=["pd.Timedelta", "datetime.timedelta"],
     )
     def test_tolerance(self, tolerance):
+        """
+
+        Parameters
+        ----------
+        tolerance :
+            
+
+        Returns
+        -------
+
+        """
 
         trades = self.trades
         quotes = self.quotes
@@ -603,6 +681,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_tolerance_forward(self):
+        """ """
         # GH14887
 
         left = pd.DataFrame({"a": [1, 5, 10], "left_val": ["a", "b", "c"]})
@@ -616,6 +695,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_tolerance_nearest(self):
+        """ """
         # GH14887
 
         left = pd.DataFrame({"a": [1, 5, 10], "left_val": ["a", "b", "c"]})
@@ -629,6 +709,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_tolerance_tz(self):
+        """ """
         # GH 14844
         left = pd.DataFrame(
             {
@@ -669,6 +750,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_tolerance_float(self):
+        """ """
         # GH22981
         left = pd.DataFrame({"a": [1.1, 3.5, 10.9], "left_val": ["a", "b", "c"]})
         right = pd.DataFrame(
@@ -687,6 +769,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_index_tolerance(self):
+        """ """
         # GH 15135
         expected = self.tolerance.set_index("time")
         trades = self.trades.set_index("time")
@@ -703,6 +786,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_allow_exact_matches(self):
+        """ """
 
         result = merge_asof(
             self.trades, self.quotes, on="time", by="ticker", allow_exact_matches=False
@@ -711,6 +795,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_allow_exact_matches_forward(self):
+        """ """
         # GH14887
 
         left = pd.DataFrame({"a": [1, 5, 10], "left_val": ["a", "b", "c"]})
@@ -726,6 +811,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_allow_exact_matches_nearest(self):
+        """ """
         # GH14887
 
         left = pd.DataFrame({"a": [1, 5, 10], "left_val": ["a", "b", "c"]})
@@ -741,6 +827,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_allow_exact_matches_and_tolerance(self):
+        """ """
 
         result = merge_asof(
             self.trades,
@@ -754,6 +841,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_allow_exact_matches_and_tolerance2(self):
+        """ """
         # GH 13695
         df1 = pd.DataFrame(
             {"time": pd.to_datetime(["2016-07-15 13:30:00.030"]), "username": ["bob"]}
@@ -804,6 +892,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_allow_exact_matches_and_tolerance3(self):
+        """ """
         # GH 13709
         df1 = pd.DataFrame(
             {
@@ -841,6 +930,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_allow_exact_matches_and_tolerance_forward(self):
+        """ """
         # GH14887
 
         left = pd.DataFrame({"a": [1, 5, 10], "left_val": ["a", "b", "c"]})
@@ -861,6 +951,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_allow_exact_matches_and_tolerance_nearest(self):
+        """ """
         # GH14887
 
         left = pd.DataFrame({"a": [1, 5, 10], "left_val": ["a", "b", "c"]})
@@ -881,6 +972,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_forward_by(self):
+        """ """
         # GH14887
 
         left = pd.DataFrame(
@@ -911,6 +1003,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_nearest_by(self):
+        """ """
         # GH14887
 
         left = pd.DataFrame(
@@ -941,6 +1034,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_by_int(self):
+        """ """
         # we specialize by type, so test that this is correct
         df1 = pd.DataFrame(
             {
@@ -1002,6 +1096,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_on_float(self):
+        """ """
         # mimics how to determine the minimum-price variation
         df1 = pd.DataFrame(
             {
@@ -1032,6 +1127,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_on_specialized_type(self, any_real_dtype):
+        """
+
+        Parameters
+        ----------
+        any_real_dtype :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-13936
         dtype = np.dtype(any_real_dtype).type
 
@@ -1063,6 +1169,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_on_specialized_type_by_int(self, any_real_dtype):
+        """
+
+        Parameters
+        ----------
+        any_real_dtype :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-13936
         dtype = np.dtype(any_real_dtype).type
 
@@ -1099,6 +1216,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_on_float_by_int(self):
+        """ """
         # type specialize both "by" and "on" parameters
         df1 = pd.DataFrame(
             {
@@ -1156,6 +1274,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_merge_datatype_error_raises(self):
+        """ """
         msg = r"incompatible merge keys \[0\] .*, must be the same type"
 
         left = pd.DataFrame({"left_val": [1, 5, 10], "a": ["a", "b", "c"]})
@@ -1165,6 +1284,7 @@
             merge_asof(left, right, on="a")
 
     def test_merge_datatype_categorical_error_raises(self):
+        """ """
         msg = (
             r"incompatible merge keys \[0\] .* both sides category, "
             "but not equal ones"
@@ -1184,6 +1304,7 @@
             merge_asof(left, right, on="a")
 
     def test_merge_groupby_multiple_column_with_categorical_column(self):
+        """ """
         # GH 16454
         df = pd.DataFrame({"x": [0], "y": [0], "z": pd.Categorical([0])})
         result = merge_asof(df, df, on="x", by=["y", "z"])
@@ -1195,6 +1316,19 @@
     )
     @pytest.mark.parametrize("side", ["left", "right"])
     def test_merge_on_nans(self, func, side):
+        """
+
+        Parameters
+        ----------
+        func :
+            
+        side :
+            
+
+        Returns
+        -------
+
+        """
         # GH 23189
         msg = f"Merge keys contain null values on {side} side"
         nulls = func([1.0, 5.0, np.nan])
@@ -1209,6 +1343,7 @@
                 merge_asof(df, df_null, on="a")
 
     def test_merge_by_col_tz_aware(self):
+        """ """
         # GH 21184
         left = pd.DataFrame(
             {
@@ -1232,6 +1367,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_by_mixed_tz_aware(self):
+        """ """
         # GH 26649
         left = pd.DataFrame(
             {
@@ -1258,6 +1394,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_timedelta_tolerance_nearest(self):
+        """ """
         # GH 27642
 
         left = pd.DataFrame(
@@ -1294,6 +1431,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_int_type_tolerance(self, any_int_dtype):
+        """
+
+        Parameters
+        ----------
+        any_int_dtype :
+            
+
+        Returns
+        -------
+
+        """
         # GH #28870
 
         left = pd.DataFrame({"a": [0, 10, 20], "left_val": [1, 2, 3]})
@@ -1310,6 +1458,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_merge_index_column_tz(self):
+        """ """
         # GH 29864
         index = pd.date_range("2019-10-01", freq="30min", periods=5, tz="UTC")
         left = pd.DataFrame([0.9, 0.8, 0.7, 0.6], columns=["xyz"], index=index[1:])
@@ -1341,6 +1490,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_left_index_right_index_tolerance(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/35558
         dr1 = pd.date_range(
             start="1/1/2020", end="1/20/2020", freq="2D"
