# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/displaypub.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/displaypub.py
@@ -31,9 +31,16 @@
 
 class DisplayPublisher(Configurable):
     """A traited class that publishes display data to frontends.
-
+    
     Instances of this class are created by the main IPython object and should
     be accessed there.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, shell=None, *args, **kwargs):
@@ -45,10 +52,15 @@
 
         Parameters
         ----------
-        data : dict
-            The formata data dictionary.
-        metadata : dict
-            Any metadata for the data.
+        data :
+            
+        metadata :
+             (Default value = None)
+
+        Returns
+        -------
+
+        
         """
 
         if not isinstance(data, dict):
@@ -60,12 +72,12 @@
     # use * to indicate transient, update are keyword-only
     def publish(self, data, metadata=None, source=None, *, transient=None, update=False, **kwargs) -> None:
         """Publish data and metadata to all frontends.
-
+        
         See the ``display_data`` message in the messaging documentation for
         more details about this message type.
-
+        
         The following MIME types are currently implemented:
-
+        
         * text/plain
         * text/html
         * text/markdown
@@ -78,29 +90,25 @@
 
         Parameters
         ----------
-        data : dict
-            A dictionary having keys that are valid MIME types (like
-            'text/plain' or 'image/svg+xml') and values that are the data for
-            that MIME type. The data itself must be a JSON'able data
-            structure. Minimally all data should have the 'text/plain' data,
-            which can be displayed by all frontends. If more than the plain
-            text is given, it is up to the frontend to decide which
-            representation to use.
-        metadata : dict
-            A dictionary for metadata related to the data. This can contain
-            arbitrary key, value pairs that frontends can use to interpret
-            the data.  Metadata specific to each mime-type can be specified
-            in the metadata dict with the same mime-type keys as
-            the data itself.
-        source : str, deprecated
-            Unused.
-        transient: dict, keyword-only
-            A dictionary for transient data.
-            Data in this dictionary should not be persisted as part of saving this output.
-            Examples include 'display_id'.
-        update: bool, keyword-only, default: False
-            If True, only update existing outputs with the same display_id,
-            rather than creating a new output.
+        data :
+            
+        metadata :
+             (Default value = None)
+        source :
+             (Default value = None)
+        * :
+            
+        transient :
+             (Default value = None)
+        update :
+             (Default value = False)
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        
         """
 
         handlers = {}
@@ -116,7 +124,17 @@
             print(data['text/plain'])
 
     def clear_output(self, wait=False):
-        """Clear the output of the cell receiving output."""
+        """Clear the output of the cell receiving output.
+
+        Parameters
+        ----------
+        wait :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         print('\033[2K\r', end='')
         sys.stdout.flush()
         print('\033[2K\r', end='')
@@ -128,10 +146,42 @@
     outputs = List()
 
     def publish(self, data, metadata=None, source=None, *, transient=None, update=False):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        metadata :
+             (Default value = None)
+        source :
+             (Default value = None)
+        * :
+            
+        transient :
+             (Default value = None)
+        update :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         self.outputs.append({'data':data, 'metadata':metadata,
                              'transient':transient, 'update':update})
 
     def clear_output(self, wait=False):
+        """
+
+        Parameters
+        ----------
+        wait :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         super(CapturingDisplayPublisher, self).clear_output(wait)
 
         # empty the list, *do not* reassign a new list
