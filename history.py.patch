# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/magics/history.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/magics/history.py
@@ -35,6 +35,7 @@
 
 @magics_class
 class HistoryMagics(Magics):
+    """ """
 
     @magic_arguments()
     @argument(
@@ -98,10 +99,10 @@
     @line_magic
     def history(self, parameter_s = ''):
         """Print input history (_i<n> variables), with most recent last.
-
+        
         By default, input history is printed without line numbers so it can be
         directly pasted into an editor. Use -n to show them.
-
+        
         By default, all input history from the current session is displayed.
         Ranges of history can be indicated using the syntax:
         
@@ -118,18 +119,25 @@
             sessions ago.
         
         Multiple ranges can be entered, separated by spaces
-
+        
         The same syntax is used by %macro, %save, %edit, %rerun
+
+        Parameters
+        ----------
+        parameter_s :
+             (Default value = '')
+
+        Returns
+        -------
 
         Examples
         --------
         ::
-
+        
           In [6]: %history -n 4-6
           4:a = 12
           5:print a**2
           6:%history -n 4-6
-
         """
 
         args = parse_argstring(self.history, parameter_s)
@@ -138,7 +146,19 @@
         history_manager = self.shell.history_manager
 
         def _format_lineno(session, line):
-            """Helper function to format line numbers properly."""
+            """Helper function to format line numbers properly.
+
+            Parameters
+            ----------
+            session :
+                
+            line :
+                
+
+            Returns
+            -------
+
+            """
             if session in (0, history_manager.session_number):
                 return str(line)
             return "%s/%s" % (session, line)
@@ -220,39 +240,46 @@
 
     @line_magic
     def recall(self, arg):
-        r"""Repeat a command, or get command to input line for editing.
-
+        """r"""Repeat a command, or get command to input line for editing.
+        
         %recall and %rep are equivalent.
-
+        
         - %recall (no arguments):
-
+        
         Place a string version of last computation result (stored in the
         special '_' variable) to the next input prompt. Allows you to create
         elaborate command lines without using copy-paste::
-
+        
              In[1]: l = ["hei", "vaan"]
              In[2]: "".join(l)
             Out[2]: heivaan
              In[3]: %recall
              In[4]: heivaan_ <== cursor blinking
-
+        
         %recall 45
-
+        
         Place history line 45 on the next input prompt. Use %hist to find
         out the number.
-
+        
         %recall 1-4
-
+        
         Combine the specified lines into one cell, and place it on the next
         input prompt. See %history for the slice syntax.
-
+        
         %recall foo+bar
-
+        
         If foo+bar can be evaluated in the user namespace, the result is
         placed at the next input prompt. Otherwise, the history is searched
         for lines which contain that substring, and the most recent one is
         placed at the next input prompt.
-        """
+
+        Parameters
+        ----------
+        arg :
+            
+
+        Returns
+        -------
         if not arg:                 # Last output
             self.shell.set_next_input(str(self.shell.user_ns["_"]))
             return
@@ -279,16 +306,25 @@
     @line_magic
     def rerun(self, parameter_s=''):
         """Re-run previous input
-
+        
         By default, you can specify ranges of input history to be repeated
         (as with %history). With no arguments, it will repeat the last line.
-
+        
         Options:
-
+        
           -l <n> : Repeat the last n lines of input, not including the
           current command.
-
+        
           -g foo : Repeat the most recent line which contains foo
+
+        Parameters
+        ----------
+        parameter_s :
+             (Default value = '')
+
+        Returns
+        -------
+
         """
         opts, args = self.parse_options(parameter_s, 'l:g:', mode='string')
         if "l" in opts:         # Last n lines
