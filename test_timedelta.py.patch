# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/timedeltas/test_timedelta.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/timedeltas/test_timedelta.py
@@ -22,13 +22,16 @@
 
 
 class TestTimedeltaIndex(DatetimeLike):
+    """ """
     _holder = TimedeltaIndex
 
     @pytest.fixture
     def index(self):
+        """ """
         return tm.makeTimedeltaIndex(10)
 
     def create_index(self) -> TimedeltaIndex:
+        """ """
         index = pd.to_timedelta(range(5), unit="d")._with_freq("infer")
         assert index.freq == "D"
         ret = index + pd.offsets.Hour(1)
@@ -36,17 +39,21 @@
         return ret
 
     def test_numeric_compat(self):
+        """ """
         # Dummy method to override super's version; this test is now done
         # in test_arithmetic.py
         pass
 
     def test_shift(self):
+        """ """
         pass  # this is handled in test_arithmetic.py
 
     def test_pickle_compat_construction(self):
+        """ """
         pass
 
     def test_pickle_after_set_freq(self):
+        """ """
         tdi = timedelta_range("1 day", periods=4, freq="s")
         tdi = tdi._with_freq(None)
 
@@ -54,6 +61,7 @@
         tm.assert_index_equal(res, tdi)
 
     def test_isin(self):
+        """ """
 
         index = tm.makeTimedeltaIndex(4)
         result = index.isin(index)
@@ -67,6 +75,7 @@
         )
 
     def test_factorize(self):
+        """ """
         idx1 = TimedeltaIndex(["1 day", "1 day", "2 day", "2 day", "3 day", "3 day"])
 
         exp_arr = np.array([0, 0, 1, 1, 2, 2], dtype=np.intp)
@@ -88,6 +97,7 @@
         tm.assert_index_equal(idx, idx3)
 
     def test_sort_values(self):
+        """ """
 
         idx = TimedeltaIndex(["4d", "1d", "2d"])
 
@@ -108,11 +118,13 @@
         tm.assert_numpy_array_equal(dexer, np.array([0, 2, 1]), check_dtype=False)
 
     def test_argmin_argmax(self):
+        """ """
         idx = TimedeltaIndex(["1 day 00:00:05", "1 day 00:00:01", "1 day 00:00:02"])
         assert idx.argmin() == 1
         assert idx.argmax() == 0
 
     def test_misc_coverage(self):
+        """ """
 
         rng = timedelta_range("1 day", periods=5)
         result = rng.groupby(rng.days)
@@ -125,6 +137,7 @@
         assert not idx.equals(list(non_td))
 
     def test_map(self):
+        """ """
         # test_map_dictlike generally tests
 
         rng = timedelta_range("1 day", periods=10)
@@ -135,6 +148,7 @@
         tm.assert_index_equal(result, exp)
 
     def test_pass_TimedeltaIndex_to_index(self):
+        """ """
 
         rng = timedelta_range("1 days", "10 days")
         idx = Index(rng, dtype=object)
@@ -144,6 +158,7 @@
         tm.assert_numpy_array_equal(idx.values, expected.values)
 
     def test_append_numpy_bug_1681(self):
+        """ """
 
         td = timedelta_range("1 days", "10 days", freq="2D")
         a = DataFrame()
@@ -154,6 +169,7 @@
         assert (result["B"] == td).all()
 
     def test_fields(self):
+        """ """
         rng = timedelta_range("1 days, 10:11:12.100123456", periods=2, freq="s")
         tm.assert_index_equal(rng.days, Index([1, 1], dtype="int64"))
         tm.assert_index_equal(
@@ -187,6 +203,7 @@
         assert rng.days.name == "name"
 
     def test_freq_conversion(self):
+        """ """
 
         # doc example
 
