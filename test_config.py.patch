# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/config/test_config.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/config/test_config.py
@@ -9,8 +9,10 @@
 
 
 class TestConfig:
+    """ """
     @classmethod
     def setup_class(cls):
+        """ """
         from copy import deepcopy
 
         cls.cf = cf
@@ -19,6 +21,17 @@
         cls.ro = deepcopy(getattr(cls.cf, "_registered_options"))
 
     def setup_method(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         setattr(self.cf, "_global_config", {})
         setattr(self.cf, "options", self.cf.DictWrapper(self.cf._global_config))
         setattr(self.cf, "_deprecated_options", {})
@@ -31,11 +44,23 @@
         self.cf.register_option("chained_assignment", "raise")
 
     def teardown_method(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         setattr(self.cf, "_global_config", self.gc)
         setattr(self.cf, "_deprecated_options", self.do)
         setattr(self.cf, "_registered_options", self.ro)
 
     def test_api(self):
+        """ """
 
         # the pandas object exposes the user API
         assert hasattr(pd, "get_option")
@@ -44,6 +69,7 @@
         assert hasattr(pd, "describe_option")
 
     def test_is_one_of_factory(self):
+        """ """
         v = self.cf.is_one_of_factory([None, 12])
 
         v(12)
@@ -53,6 +79,7 @@
             v(1.1)
 
     def test_register_option(self):
+        """ """
         self.cf.register_option("a", 1, "doc")
 
         # can't register an already registered option
@@ -86,6 +113,7 @@
         self.cf.register_option("k.b.c.d2", 1, "doc")
 
     def test_describe_option(self):
+        """ """
         self.cf.register_option("a", 1, "doc")
         self.cf.register_option("b", 1, "doc2")
         self.cf.deprecate_option("b")
@@ -125,6 +153,7 @@
         assert "bar" in self.cf.describe_option("l", _print_desc=False)
 
     def test_case_insensitive(self):
+        """ """
         self.cf.register_option("KanBAN", 1, "doc")
 
         assert "doc" in self.cf.describe_option("kanbaN", _print_desc=False)
@@ -141,6 +170,7 @@
         assert self.cf._is_deprecated("kAnBaN")
 
     def test_get_option(self):
+        """ """
         self.cf.register_option("a", 1, "doc")
         self.cf.register_option("b.c", "hullo", "doc2")
         self.cf.register_option("b.b", None, "doc2")
@@ -156,6 +186,7 @@
             self.cf.get_option("no_such_option")
 
     def test_set_option(self):
+        """ """
         self.cf.register_option("a", 1, "doc")
         self.cf.register_option("b.c", "hullo", "doc2")
         self.cf.register_option("b.b", None, "doc2")
@@ -177,21 +208,25 @@
             self.cf.set_option("no.such.key", None)
 
     def test_set_option_empty_args(self):
+        """ """
         msg = "Must provide an even number of non-keyword arguments"
         with pytest.raises(ValueError, match=msg):
             self.cf.set_option()
 
     def test_set_option_uneven_args(self):
+        """ """
         msg = "Must provide an even number of non-keyword arguments"
         with pytest.raises(ValueError, match=msg):
             self.cf.set_option("a.b", 2, "b.c")
 
     def test_set_option_invalid_single_argument_type(self):
+        """ """
         msg = "Must provide an even number of non-keyword arguments"
         with pytest.raises(ValueError, match=msg):
             self.cf.set_option(2)
 
     def test_set_option_multiple(self):
+        """ """
         self.cf.register_option("a", 1, "doc")
         self.cf.register_option("b.c", "hullo", "doc2")
         self.cf.register_option("b.b", None, "doc2")
@@ -207,6 +242,7 @@
         assert self.cf.get_option("b.b") == 10.0
 
     def test_validation(self):
+        """ """
         self.cf.register_option("a", 1, "doc", validator=self.cf.is_int)
         self.cf.register_option("d", 1, "doc", validator=self.cf.is_nonnegative_int)
         self.cf.register_option("b.c", "hullo", "doc2", validator=self.cf.is_text)
@@ -248,6 +284,7 @@
             self.cf.set_option("b", "%.1f")
 
     def test_reset_option(self):
+        """ """
         self.cf.register_option("a", 1, "doc", validator=self.cf.is_int)
         self.cf.register_option("b.c", "hullo", "doc2", validator=self.cf.is_str)
         assert self.cf.get_option("a") == 1
@@ -266,6 +303,7 @@
         assert self.cf.get_option("b.c") == "hullo"
 
     def test_reset_option_all(self):
+        """ """
         self.cf.register_option("a", 1, "doc", validator=self.cf.is_int)
         self.cf.register_option("b.c", "hullo", "doc2", validator=self.cf.is_str)
         assert self.cf.get_option("a") == 1
@@ -281,6 +319,7 @@
         assert self.cf.get_option("b.c") == "hullo"
 
     def test_deprecate_option(self):
+        """ """
         # we can deprecate non-existent options
         self.cf.deprecate_option("foo")
 
@@ -346,6 +385,7 @@
             assert "eprecated" in str(w[-1])  # we get the custom message
 
     def test_config_prefix(self):
+        """ """
         with self.cf.config_prefix("base"):
             self.cf.register_option("a", 1, "doc1")
             self.cf.register_option("b", 2, "doc2")
@@ -370,10 +410,22 @@
             assert self.cf.get_option("b") == 2
 
     def test_callback(self):
+        """ """
         k = [None]
         v = [None]
 
         def callback(key):
+            """
+
+            Parameters
+            ----------
+            key :
+                
+
+            Returns
+            -------
+
+            """
             k.append(key)
             v.append(self.cf.get_option(key))
 
@@ -395,7 +447,19 @@
         assert k[-1] == "d.b"
 
     def test_set_ContextManager(self):
+        """ """
         def eq(val):
+            """
+
+            Parameters
+            ----------
+            val :
+                
+
+            Returns
+            -------
+
+            """
             assert self.cf.get_option("a") == val
 
         self.cf.register_option("a", 0)
@@ -413,14 +477,27 @@
         # Test that option_context can be used as a decorator too (#34253).
         @self.cf.option_context("a", 123)
         def f():
+            """ """
             eq(123)
 
         f()
 
     def test_attribute_access(self):
+        """ """
         holder = []
 
         def f3(key):
+            """
+
+            Parameters
+            ----------
+            key :
+                
+
+            Returns
+            -------
+
+            """
             holder.append(True)
 
         self.cf.register_option("a", 0)
@@ -448,6 +525,7 @@
         assert len(holder) == 1
 
     def test_option_context_scope(self):
+        """ """
         # Ensure that creating a context does not affect the existing
         # environment as it is supposed to be used with the `with` statement.
         # See https://github.com/pandas-dev/pandas/issues/8514
@@ -470,6 +548,7 @@
         assert self.cf.get_option(option_name) == original_value
 
     def test_dictwrapper_getattr(self):
+        """ """
         options = self.cf.options
         # GH 19789
         with pytest.raises(OptionError, match="No such option"):
