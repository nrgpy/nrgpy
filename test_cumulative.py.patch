# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/series/test_cumulative.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/series/test_cumulative.py
@@ -15,6 +15,21 @@
 
 
 def _check_accum_op(name, series, check_dtype=True):
+    """
+
+    Parameters
+    ----------
+    name :
+        
+    series :
+        
+    check_dtype :
+         (Default value = True)
+
+    Returns
+    -------
+
+    """
     func = getattr(np, name)
     tm.assert_numpy_array_equal(
         func(series).values, func(np.array(series)), check_dtype=check_dtype,
@@ -31,13 +46,47 @@
 
 
 class TestSeriesCumulativeOps:
+    """ """
     def test_cumsum(self, datetime_series):
+        """
+
+        Parameters
+        ----------
+        datetime_series :
+            
+
+        Returns
+        -------
+
+        """
         _check_accum_op("cumsum", datetime_series)
 
     def test_cumprod(self, datetime_series):
+        """
+
+        Parameters
+        ----------
+        datetime_series :
+            
+
+        Returns
+        -------
+
+        """
         _check_accum_op("cumprod", datetime_series)
 
     def test_cummin(self, datetime_series):
+        """
+
+        Parameters
+        ----------
+        datetime_series :
+            
+
+        Returns
+        -------
+
+        """
         tm.assert_numpy_array_equal(
             datetime_series.cummin().values,
             np.minimum.accumulate(np.array(datetime_series)),
@@ -51,6 +100,17 @@
         tm.assert_series_equal(result, expected)
 
     def test_cummax(self, datetime_series):
+        """
+
+        Parameters
+        ----------
+        datetime_series :
+            
+
+        Returns
+        -------
+
+        """
         tm.assert_numpy_array_equal(
             datetime_series.cummax().values,
             np.maximum.accumulate(np.array(datetime_series)),
@@ -65,6 +125,17 @@
 
     @pytest.mark.parametrize("tz", [None, "US/Pacific"])
     def test_cummin_datetime64(self, tz):
+        """
+
+        Parameters
+        ----------
+        tz :
+            
+
+        Returns
+        -------
+
+        """
         s = pd.Series(
             pd.to_datetime(
                 ["NaT", "2000-1-2", "NaT", "2000-1-1", "NaT", "2000-1-3"]
@@ -89,6 +160,17 @@
 
     @pytest.mark.parametrize("tz", [None, "US/Pacific"])
     def test_cummax_datetime64(self, tz):
+        """
+
+        Parameters
+        ----------
+        tz :
+            
+
+        Returns
+        -------
+
+        """
         s = pd.Series(
             pd.to_datetime(
                 ["NaT", "2000-1-2", "NaT", "2000-1-1", "NaT", "2000-1-3"]
@@ -112,6 +194,7 @@
         tm.assert_series_equal(expected, result)
 
     def test_cummin_timedelta64(self):
+        """ """
         s = pd.Series(pd.to_timedelta(["NaT", "2 min", "NaT", "1 min", "NaT", "3 min"]))
 
         expected = pd.Series(
@@ -127,6 +210,7 @@
         tm.assert_series_equal(expected, result)
 
     def test_cummax_timedelta64(self):
+        """ """
         s = pd.Series(pd.to_timedelta(["NaT", "2 min", "NaT", "1 min", "NaT", "3 min"]))
 
         expected = pd.Series(
@@ -142,6 +226,7 @@
         tm.assert_series_equal(expected, result)
 
     def test_cummethods_bool(self):
+        """ """
         # GH#6270
 
         a = pd.Series([False, False, False, True, True, False, False])
