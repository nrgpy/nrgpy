# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/datetimes/test_datetime.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/datetimes/test_datetime.py
@@ -12,13 +12,16 @@
 
 
 class TestDatetimeIndex:
+    """ """
     def test_reindex_preserves_tz_if_target_is_empty_list_or_array(self):
+        """ """
         # GH7774
         index = date_range("20130101", periods=3, tz="US/Eastern")
         assert str(index.reindex([])[0].tz) == "US/Eastern"
         assert str(index.reindex(np.array([]))[0].tz) == "US/Eastern"
 
     def test_reindex_with_same_tz(self):
+        """ """
         # GH 32740
         rng_a = date_range("2010-01-01", "2010-01-02", periods=24, tz="utc")
         rng_b = date_range("2010-01-01", "2010-01-02", periods=23, tz="utc")
@@ -58,6 +61,7 @@
         tm.assert_numpy_array_equal(result2, expected2)
 
     def test_time_loc(self):  # GH8667
+        """ """
         from datetime import time
 
         from pandas._libs.index import _SIZE_CUTOFF
@@ -81,6 +85,7 @@
             tm.assert_series_equal(left, right)
 
     def test_time_overflow_for_32bit_machines(self):
+        """ """
         # GH8943.  On some machines NumPy defaults to np.int32 (for example,
         # 32-bit Linux machines).  In the function _generate_regular_range
         # found in tseries/index.py, `periods` gets multiplied by `strides`
@@ -96,9 +101,11 @@
         assert len(idx2) == periods
 
     def test_nat(self):
+        """ """
         assert DatetimeIndex([np.nan])[0] is pd.NaT
 
     def test_week_of_month_frequency(self):
+        """ """
         # GH 5348: "ValueError: Could not evaluate WOM-1SUN" shouldn't raise
         d1 = date(2002, 9, 1)
         d2 = date(2013, 10, 27)
@@ -119,6 +126,7 @@
         tm.assert_index_equal(result, expected)
 
     def test_stringified_slice_with_tz(self):
+        """ """
         # GH#2658
         start = "2013-01-07"
         idx = date_range(start=start, freq="1d", periods=10, tz="US/Eastern")
@@ -126,6 +134,7 @@
         df["2013-01-14 23:44:34.437768-05:00":]  # no exception here
 
     def test_append_nondatetimeindex(self):
+        """ """
         rng = date_range("1/1/2000", periods=10)
         idx = Index(["a", "b", "c", "d"])
 
@@ -133,6 +142,7 @@
         assert isinstance(result[0], Timestamp)
 
     def test_iteration_preserves_tz(self):
+        """ """
         # see gh-8890
         index = date_range("2012-01-01", periods=3, freq="H", tz="US/Eastern")
 
@@ -163,6 +173,17 @@
 
     @pytest.mark.parametrize("periods", [0, 9999, 10000, 10001])
     def test_iteration_over_chunksize(self, periods):
+        """
+
+        Parameters
+        ----------
+        periods :
+            
+
+        Returns
+        -------
+
+        """
         # GH21012
 
         index = date_range("2000-01-01 00:00:00", periods=periods, freq="min")
@@ -173,6 +194,7 @@
         assert num == len(index)
 
     def test_misc_coverage(self):
+        """ """
         rng = date_range("1/1/2000", periods=5)
         result = rng.groupby(rng.day)
         assert isinstance(list(result.values())[0][0], Timestamp)
@@ -184,6 +206,7 @@
         assert not idx.equals(list(non_datetime))
 
     def test_string_index_series_name_converted(self):
+        """ """
         # #1644
         df = DataFrame(np.random.randn(10, 4), index=date_range("1/1/2000", periods=10))
 
@@ -194,11 +217,13 @@
         assert result.name == df.index[2]
 
     def test_argmin_argmax(self):
+        """ """
         idx = DatetimeIndex(["2000-01-04", "2000-01-01", "2000-01-02"])
         assert idx.argmin() == 1
         assert idx.argmax() == 0
 
     def test_sort_values(self):
+        """ """
         idx = DatetimeIndex(["2000-01-04", "2000-01-01", "2000-01-02"])
 
         ordered = idx.sort_values()
@@ -216,6 +241,7 @@
         tm.assert_numpy_array_equal(dexer, np.array([0, 2, 1], dtype=np.intp))
 
     def test_groupby_function_tuple_1677(self):
+        """ """
         df = DataFrame(np.random.rand(100), index=date_range("1/1/2000", periods=100))
         monthly_group = df.groupby(lambda x: (x.year, x.month))
 
@@ -223,6 +249,7 @@
         assert isinstance(result.index[0], tuple)
 
     def test_append_numpy_bug_1681(self):
+        """ """
         # another datetime64 bug
         dr = date_range("2011/1/1", "2012/1/1", freq="W-FRI")
         a = DataFrame()
@@ -232,6 +259,7 @@
         assert (result["B"] == dr).all()
 
     def test_isin(self):
+        """ """
         index = tm.makeDateIndex(4)
         result = index.isin(index)
         assert result.all()
@@ -244,10 +272,22 @@
         )
 
     def assert_index_parameters(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         assert index.freq == "40960N"
         assert index.inferred_freq == "40960N"
 
     def test_ns_index(self):
+        """ """
         nsamples = 400
         ns = int(1e9 / 24414)
         dtstart = np.datetime64("2012-09-20T00:00:00")
@@ -261,6 +301,7 @@
         self.assert_index_parameters(new_index)
 
     def test_factorize(self):
+        """ """
         idx1 = DatetimeIndex(
             ["2014-01", "2014-01", "2014-02", "2014-02", "2014-03", "2014-03"]
         )
@@ -308,6 +349,17 @@
         tm.assert_index_equal(idx, idx3)
 
     def test_factorize_tz(self, tz_naive_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+
+        Returns
+        -------
+
+        """
         tz = tz_naive_fixture
         # GH#13750
         base = pd.date_range("2016-11-05", freq="H", periods=100, tz=tz)
@@ -322,6 +374,7 @@
             tm.assert_index_equal(res, expected)
 
     def test_factorize_dst(self):
+        """ """
         # GH 13750
         idx = pd.date_range("2016-11-06", freq="H", periods=12, tz="US/Eastern")
 
@@ -348,6 +401,19 @@
         ],
     )
     def test_unique(self, arr, expected):
+        """
+
+        Parameters
+        ----------
+        arr :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         result = arr.unique()
         tm.assert_index_equal(result, expected)
         # GH 21737
@@ -355,6 +421,7 @@
         assert result[0] == expected[0]
 
     def test_asarray_tz_naive(self):
+        """ """
         # This shouldn't produce a warning.
         idx = pd.date_range("2000", periods=2)
         # M8[ns] by default
@@ -370,6 +437,7 @@
         tm.assert_numpy_array_equal(result, expected)
 
     def test_asarray_tz_aware(self):
+        """ """
         tz = "US/Central"
         idx = pd.date_range("2000", periods=2, tz=tz)
         expected = np.array(["2000-01-01T06", "2000-01-02T06"], dtype="M8[ns]")
@@ -391,6 +459,7 @@
         tm.assert_numpy_array_equal(result, expected)
 
     def test_to_frame_datetime_tz(self):
+        """ """
         # GH 25809
         idx = date_range(start="2019-01-01", end="2019-01-30", freq="D", tz="UTC")
         result = idx.to_frame()
@@ -398,6 +467,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_split_non_utc(self):
+        """ """
         # GH 14042
         indices = pd.date_range("2016-01-01 00:00:00+0200", freq="S", periods=10)
         result = np.split(indices, indices_or_sections=[])[0]
