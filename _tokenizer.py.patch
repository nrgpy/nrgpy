# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/bleach/_vendor/html5lib/_tokenizer.py
+++ b/..//venv/lib/python3.8/site-packages/bleach/_vendor/html5lib/_tokenizer.py
@@ -25,16 +25,23 @@
 
 
 class HTMLTokenizer(object):
-    """ This class takes care of tokenizing HTML.
-
+    """This class takes care of tokenizing HTML.
+    
     * self.currentToken
       Holds the token that is currently being processed.
-
+    
     * self.state
       Holds a reference to the method to be invoked... XXX
-
+    
     * self.stream
       Points to HTMLInputStream object.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, stream, parser=None, **kwargs):
@@ -72,6 +79,15 @@
         """This function returns either U+FFFD or the character based on the
         decimal or hexadecimal representation. It also discards ";" if present.
         If not present self.tokenQueue.append({"type": tokenTypes["ParseError"]}) is invoked.
+
+        Parameters
+        ----------
+        isHex :
+            
+
+        Returns
+        -------
+
         """
 
         allowed = digits
@@ -141,6 +157,19 @@
         return char
 
     def consumeEntity(self, allowedChar=None, fromAttribute=False):
+        """
+
+        Parameters
+        ----------
+        allowedChar :
+             (Default value = None)
+        fromAttribute :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         # Initialise to the default output for when no entity is matched
         output = "&"
 
@@ -222,6 +251,15 @@
 
     def processEntityInAttribute(self, allowedChar):
         """This method replaces the need for "entityInAttributeValueState".
+
+        Parameters
+        ----------
+        allowedChar :
+            
+
+        Returns
+        -------
+
         """
         self.consumeEntity(allowedChar=allowedChar, fromAttribute=True)
 
@@ -229,6 +267,13 @@
         """This method is a generic handler for emitting the tags. It also sets
         the state to "data" because that's what's needed after a token has been
         emitted.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         token = self.currentToken
         # Add token to the queue to be yielded
@@ -254,6 +299,7 @@
 
     # Below are the various tokenizer states worked out.
     def dataState(self):
+        """ """
         data = self.stream.char()
         if data == "&":
             self.state = self.entityDataState
@@ -283,11 +329,13 @@
         return True
 
     def entityDataState(self):
+        """ """
         self.consumeEntity()
         self.state = self.dataState
         return True
 
     def rcdataState(self):
+        """ """
         data = self.stream.char()
         if data == "&":
             self.state = self.characterReferenceInRcdata
@@ -317,11 +365,13 @@
         return True
 
     def characterReferenceInRcdata(self):
+        """ """
         self.consumeEntity()
         self.state = self.rcdataState
         return True
 
     def rawtextState(self):
+        """ """
         data = self.stream.char()
         if data == "<":
             self.state = self.rawtextLessThanSignState
@@ -340,6 +390,7 @@
         return True
 
     def scriptDataState(self):
+        """ """
         data = self.stream.char()
         if data == "<":
             self.state = self.scriptDataLessThanSignState
@@ -358,6 +409,7 @@
         return True
 
     def plaintextState(self):
+        """ """
         data = self.stream.char()
         if data == EOF:
             # Tokenization ends.
@@ -373,6 +425,7 @@
         return True
 
     def tagOpenState(self):
+        """ """
         data = self.stream.char()
         if data == "!":
             self.state = self.markupDeclarationOpenState
@@ -408,6 +461,7 @@
         return True
 
     def closeTagOpenState(self):
+        """ """
         data = self.stream.char()
         if data in asciiLetters:
             self.currentToken = {"type": tokenTypes["EndTag"], "name": data,
@@ -432,6 +486,7 @@
         return True
 
     def tagNameState(self):
+        """ """
         data = self.stream.char()
         if data in spaceCharacters:
             self.state = self.beforeAttributeNameState
@@ -454,6 +509,7 @@
         return True
 
     def rcdataLessThanSignState(self):
+        """ """
         data = self.stream.char()
         if data == "/":
             self.temporaryBuffer = ""
@@ -465,6 +521,7 @@
         return True
 
     def rcdataEndTagOpenState(self):
+        """ """
         data = self.stream.char()
         if data in asciiLetters:
             self.temporaryBuffer += data
@@ -476,6 +533,7 @@
         return True
 
     def rcdataEndTagNameState(self):
+        """ """
         appropriate = self.currentToken and self.currentToken["name"].lower() == self.temporaryBuffer.lower()
         data = self.stream.char()
         if data in spaceCharacters and appropriate:
@@ -504,6 +562,7 @@
         return True
 
     def rawtextLessThanSignState(self):
+        """ """
         data = self.stream.char()
         if data == "/":
             self.temporaryBuffer = ""
@@ -515,6 +574,7 @@
         return True
 
     def rawtextEndTagOpenState(self):
+        """ """
         data = self.stream.char()
         if data in asciiLetters:
             self.temporaryBuffer += data
@@ -526,6 +586,7 @@
         return True
 
     def rawtextEndTagNameState(self):
+        """ """
         appropriate = self.currentToken and self.currentToken["name"].lower() == self.temporaryBuffer.lower()
         data = self.stream.char()
         if data in spaceCharacters and appropriate:
@@ -554,6 +615,7 @@
         return True
 
     def scriptDataLessThanSignState(self):
+        """ """
         data = self.stream.char()
         if data == "/":
             self.temporaryBuffer = ""
@@ -568,6 +630,7 @@
         return True
 
     def scriptDataEndTagOpenState(self):
+        """ """
         data = self.stream.char()
         if data in asciiLetters:
             self.temporaryBuffer += data
@@ -579,6 +642,7 @@
         return True
 
     def scriptDataEndTagNameState(self):
+        """ """
         appropriate = self.currentToken and self.currentToken["name"].lower() == self.temporaryBuffer.lower()
         data = self.stream.char()
         if data in spaceCharacters and appropriate:
@@ -607,6 +671,7 @@
         return True
 
     def scriptDataEscapeStartState(self):
+        """ """
         data = self.stream.char()
         if data == "-":
             self.tokenQueue.append({"type": tokenTypes["Characters"], "data": "-"})
@@ -617,6 +682,7 @@
         return True
 
     def scriptDataEscapeStartDashState(self):
+        """ """
         data = self.stream.char()
         if data == "-":
             self.tokenQueue.append({"type": tokenTypes["Characters"], "data": "-"})
@@ -627,6 +693,7 @@
         return True
 
     def scriptDataEscapedState(self):
+        """ """
         data = self.stream.char()
         if data == "-":
             self.tokenQueue.append({"type": tokenTypes["Characters"], "data": "-"})
@@ -647,6 +714,7 @@
         return True
 
     def scriptDataEscapedDashState(self):
+        """ """
         data = self.stream.char()
         if data == "-":
             self.tokenQueue.append({"type": tokenTypes["Characters"], "data": "-"})
@@ -667,6 +735,7 @@
         return True
 
     def scriptDataEscapedDashDashState(self):
+        """ """
         data = self.stream.char()
         if data == "-":
             self.tokenQueue.append({"type": tokenTypes["Characters"], "data": "-"})
@@ -689,6 +758,7 @@
         return True
 
     def scriptDataEscapedLessThanSignState(self):
+        """ """
         data = self.stream.char()
         if data == "/":
             self.temporaryBuffer = ""
@@ -704,6 +774,7 @@
         return True
 
     def scriptDataEscapedEndTagOpenState(self):
+        """ """
         data = self.stream.char()
         if data in asciiLetters:
             self.temporaryBuffer = data
@@ -715,6 +786,7 @@
         return True
 
     def scriptDataEscapedEndTagNameState(self):
+        """ """
         appropriate = self.currentToken and self.currentToken["name"].lower() == self.temporaryBuffer.lower()
         data = self.stream.char()
         if data in spaceCharacters and appropriate:
@@ -743,6 +815,7 @@
         return True
 
     def scriptDataDoubleEscapeStartState(self):
+        """ """
         data = self.stream.char()
         if data in (spaceCharacters | frozenset(("/", ">"))):
             self.tokenQueue.append({"type": tokenTypes["Characters"], "data": data})
@@ -759,6 +832,7 @@
         return True
 
     def scriptDataDoubleEscapedState(self):
+        """ """
         data = self.stream.char()
         if data == "-":
             self.tokenQueue.append({"type": tokenTypes["Characters"], "data": "-"})
@@ -780,6 +854,7 @@
         return True
 
     def scriptDataDoubleEscapedDashState(self):
+        """ """
         data = self.stream.char()
         if data == "-":
             self.tokenQueue.append({"type": tokenTypes["Characters"], "data": "-"})
@@ -803,6 +878,7 @@
         return True
 
     def scriptDataDoubleEscapedDashDashState(self):
+        """ """
         data = self.stream.char()
         if data == "-":
             self.tokenQueue.append({"type": tokenTypes["Characters"], "data": "-"})
@@ -828,6 +904,7 @@
         return True
 
     def scriptDataDoubleEscapedLessThanSignState(self):
+        """ """
         data = self.stream.char()
         if data == "/":
             self.tokenQueue.append({"type": tokenTypes["Characters"], "data": "/"})
@@ -839,6 +916,7 @@
         return True
 
     def scriptDataDoubleEscapeEndState(self):
+        """ """
         data = self.stream.char()
         if data in (spaceCharacters | frozenset(("/", ">"))):
             self.tokenQueue.append({"type": tokenTypes["Characters"], "data": data})
@@ -855,6 +933,7 @@
         return True
 
     def beforeAttributeNameState(self):
+        """ """
         data = self.stream.char()
         if data in spaceCharacters:
             self.stream.charsUntil(spaceCharacters, True)
@@ -885,6 +964,7 @@
         return True
 
     def attributeNameState(self):
+        """ """
         data = self.stream.char()
         leavingThisState = True
         emitToken = False
@@ -939,6 +1019,7 @@
         return True
 
     def afterAttributeNameState(self):
+        """ """
         data = self.stream.char()
         if data in spaceCharacters:
             self.stream.charsUntil(spaceCharacters, True)
@@ -971,6 +1052,7 @@
         return True
 
     def beforeAttributeValueState(self):
+        """ """
         data = self.stream.char()
         if data in spaceCharacters:
             self.stream.charsUntil(spaceCharacters, True)
@@ -1005,6 +1087,7 @@
         return True
 
     def attributeValueDoubleQuotedState(self):
+        """ """
         data = self.stream.char()
         if data == "\"":
             self.state = self.afterAttributeValueState
@@ -1024,6 +1107,7 @@
         return True
 
     def attributeValueSingleQuotedState(self):
+        """ """
         data = self.stream.char()
         if data == "'":
             self.state = self.afterAttributeValueState
@@ -1043,6 +1127,7 @@
         return True
 
     def attributeValueUnQuotedState(self):
+        """ """
         data = self.stream.char()
         if data in spaceCharacters:
             self.state = self.beforeAttributeNameState
@@ -1068,6 +1153,7 @@
         return True
 
     def afterAttributeValueState(self):
+        """ """
         data = self.stream.char()
         if data in spaceCharacters:
             self.state = self.beforeAttributeNameState
@@ -1088,6 +1174,7 @@
         return True
 
     def selfClosingStartTagState(self):
+        """ """
         data = self.stream.char()
         if data == ">":
             self.currentToken["selfClosing"] = True
@@ -1106,6 +1193,7 @@
         return True
 
     def bogusCommentState(self):
+        """ """
         # Make a new comment token and give it as value all the characters
         # until the first > or EOF (charsUntil checks for EOF automatically)
         # and emit it.
@@ -1121,6 +1209,7 @@
         return True
 
     def markupDeclarationOpenState(self):
+        """ """
         charStack = [self.stream.char()]
         if charStack[-1] == "-":
             charStack.append(self.stream.char())
@@ -1166,6 +1255,7 @@
         return True
 
     def commentStartState(self):
+        """ """
         data = self.stream.char()
         if data == "-":
             self.state = self.commentStartDashState
@@ -1189,6 +1279,7 @@
         return True
 
     def commentStartDashState(self):
+        """ """
         data = self.stream.char()
         if data == "-":
             self.state = self.commentEndState
@@ -1212,6 +1303,7 @@
         return True
 
     def commentState(self):
+        """ """
         data = self.stream.char()
         if data == "-":
             self.state = self.commentEndDashState
@@ -1230,6 +1322,7 @@
         return True
 
     def commentEndDashState(self):
+        """ """
         data = self.stream.char()
         if data == "-":
             self.state = self.commentEndState
@@ -1249,6 +1342,7 @@
         return True
 
     def commentEndState(self):
+        """ """
         data = self.stream.char()
         if data == ">":
             self.tokenQueue.append(self.currentToken)
@@ -1280,6 +1374,7 @@
         return True
 
     def commentEndBangState(self):
+        """ """
         data = self.stream.char()
         if data == ">":
             self.tokenQueue.append(self.currentToken)
@@ -1303,6 +1398,7 @@
         return True
 
     def doctypeState(self):
+        """ """
         data = self.stream.char()
         if data in spaceCharacters:
             self.state = self.beforeDoctypeNameState
@@ -1320,6 +1416,7 @@
         return True
 
     def beforeDoctypeNameState(self):
+        """ """
         data = self.stream.char()
         if data in spaceCharacters:
             pass
@@ -1346,6 +1443,7 @@
         return True
 
     def doctypeNameState(self):
+        """ """
         data = self.stream.char()
         if data in spaceCharacters:
             self.currentToken["name"] = self.currentToken["name"].translate(asciiUpper2Lower)
@@ -1371,6 +1469,7 @@
         return True
 
     def afterDoctypeNameState(self):
+        """ """
         data = self.stream.char()
         if data in spaceCharacters:
             pass
@@ -1422,6 +1521,7 @@
         return True
 
     def afterDoctypePublicKeywordState(self):
+        """ """
         data = self.stream.char()
         if data in spaceCharacters:
             self.state = self.beforeDoctypePublicIdentifierState
@@ -1442,6 +1542,7 @@
         return True
 
     def beforeDoctypePublicIdentifierState(self):
+        """ """
         data = self.stream.char()
         if data in spaceCharacters:
             pass
@@ -1471,6 +1572,7 @@
         return True
 
     def doctypePublicIdentifierDoubleQuotedState(self):
+        """ """
         data = self.stream.char()
         if data == "\"":
             self.state = self.afterDoctypePublicIdentifierState
@@ -1495,6 +1597,7 @@
         return True
 
     def doctypePublicIdentifierSingleQuotedState(self):
+        """ """
         data = self.stream.char()
         if data == "'":
             self.state = self.afterDoctypePublicIdentifierState
@@ -1519,6 +1622,7 @@
         return True
 
     def afterDoctypePublicIdentifierState(self):
+        """ """
         data = self.stream.char()
         if data in spaceCharacters:
             self.state = self.betweenDoctypePublicAndSystemIdentifiersState
@@ -1549,6 +1653,7 @@
         return True
 
     def betweenDoctypePublicAndSystemIdentifiersState(self):
+        """ """
         data = self.stream.char()
         if data in spaceCharacters:
             pass
@@ -1575,6 +1680,7 @@
         return True
 
     def afterDoctypeSystemKeywordState(self):
+        """ """
         data = self.stream.char()
         if data in spaceCharacters:
             self.state = self.beforeDoctypeSystemIdentifierState
@@ -1595,6 +1701,7 @@
         return True
 
     def beforeDoctypeSystemIdentifierState(self):
+        """ """
         data = self.stream.char()
         if data in spaceCharacters:
             pass
@@ -1624,6 +1731,7 @@
         return True
 
     def doctypeSystemIdentifierDoubleQuotedState(self):
+        """ """
         data = self.stream.char()
         if data == "\"":
             self.state = self.afterDoctypeSystemIdentifierState
@@ -1648,6 +1756,7 @@
         return True
 
     def doctypeSystemIdentifierSingleQuotedState(self):
+        """ """
         data = self.stream.char()
         if data == "'":
             self.state = self.afterDoctypeSystemIdentifierState
@@ -1672,6 +1781,7 @@
         return True
 
     def afterDoctypeSystemIdentifierState(self):
+        """ """
         data = self.stream.char()
         if data in spaceCharacters:
             pass
@@ -1691,6 +1801,7 @@
         return True
 
     def bogusDoctypeState(self):
+        """ """
         data = self.stream.char()
         if data == ">":
             self.tokenQueue.append(self.currentToken)
@@ -1705,6 +1816,7 @@
         return True
 
     def cdataSectionState(self):
+        """ """
         data = []
         while True:
             data.append(self.stream.charsUntil("]"))
