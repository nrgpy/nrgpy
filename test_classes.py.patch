# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/polynomial/tests/test_classes.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/polynomial/tests/test_classes.py
@@ -27,6 +27,17 @@
 
 @pytest.fixture(params=classes, ids=classids)
 def Poly(request):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     return request.param
 
 #
@@ -36,6 +47,21 @@
 
 
 def assert_poly_almost_equal(p1, p2, msg=""):
+    """
+
+    Parameters
+    ----------
+    p1 :
+        
+    p2 :
+        
+    msg :
+         (Default value = "")
+
+    Returns
+    -------
+
+    """
     try:
         assert_(np.all(p1.domain == p2.domain))
         assert_(np.all(p1.window == p2.window))
@@ -54,6 +80,19 @@
 
 
 def test_conversion(Poly1, Poly2):
+    """
+
+    Parameters
+    ----------
+    Poly1 :
+        
+    Poly2 :
+        
+
+    Returns
+    -------
+
+    """
     x = np.linspace(0, 1, 10)
     coef = random((3,))
 
@@ -71,6 +110,19 @@
 
 
 def test_cast(Poly1, Poly2):
+    """
+
+    Parameters
+    ----------
+    Poly1 :
+        
+    Poly2 :
+        
+
+    Returns
+    -------
+
+    """
     x = np.linspace(0, 1, 10)
     coef = random((3,))
 
@@ -93,6 +145,17 @@
 
 
 def test_identity(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     d = Poly.domain + random((2,))*.25
     w = Poly.window + random((2,))*.25
     x = np.linspace(d[0], d[1], 11)
@@ -103,6 +166,17 @@
 
 
 def test_basis(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     d = Poly.domain + random((2,))*.25
     w = Poly.window + random((2,))*.25
     p = Poly.basis(5, domain=d, window=w)
@@ -112,6 +186,17 @@
 
 
 def test_fromroots(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     # check that requested roots are zeros of a polynomial
     # of correct degree, domain, and window.
     d = Poly.domain + random((2,))*.25
@@ -131,6 +216,17 @@
 
 
 def test_bad_conditioned_fit(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
 
     x = [0., 0., 1.]
     y = [1., 2., 3.]
@@ -142,8 +238,30 @@
 
 
 def test_fit(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
 
     def f(x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         return x*(x - 1)*(x - 2)
     x = np.linspace(0, 3)
     y = f(x)
@@ -186,6 +304,17 @@
 
 
 def test_equal(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     p1 = Poly([1, 2, 3], domain=[0, 1], window=[2, 3])
     p2 = Poly([1, 1, 1], domain=[0, 1], window=[2, 3])
     p3 = Poly([1, 2, 3], domain=[1, 2], window=[2, 3])
@@ -197,6 +326,17 @@
 
 
 def test_not_equal(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     p1 = Poly([1, 2, 3], domain=[0, 1], window=[2, 3])
     p2 = Poly([1, 1, 1], domain=[0, 1], window=[2, 3])
     p3 = Poly([1, 2, 3], domain=[1, 2], window=[2, 3])
@@ -208,6 +348,17 @@
 
 
 def test_add(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     # This checks commutation, not numerical correctness
     c1 = list(random((4,)) + .5)
     c2 = list(random((3,)) + .5)
@@ -230,6 +381,17 @@
 
 
 def test_sub(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     # This checks commutation, not numerical correctness
     c1 = list(random((4,)) + .5)
     c2 = list(random((3,)) + .5)
@@ -252,6 +414,17 @@
 
 
 def test_mul(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     c1 = list(random((4,)) + .5)
     c2 = list(random((3,)) + .5)
     p1 = Poly(c1)
@@ -275,6 +448,17 @@
 
 
 def test_floordiv(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     c1 = list(random((4,)) + .5)
     c2 = list(random((3,)) + .5)
     c3 = list(random((2,)) + .5)
@@ -303,6 +487,17 @@
 
 
 def test_truediv(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     # true division is valid only if the denominator is a Number and
     # not a python bool.
     p1 = Poly([1,2,3])
@@ -330,6 +525,17 @@
 
 
 def test_mod(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     # This checks commutation, not numerical correctness
     c1 = list(random((4,)) + .5)
     c2 = list(random((3,)) + .5)
@@ -357,6 +563,17 @@
 
 
 def test_divmod(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     # This checks commutation, not numerical correctness
     c1 = list(random((4,)) + .5)
     c2 = list(random((3,)) + .5)
@@ -402,6 +619,17 @@
 
 
 def test_roots(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     d = Poly.domain * 1.25 + .25
     w = Poly.window
     tgt = np.linspace(d[0], d[1], 5)
@@ -413,11 +641,33 @@
 
 
 def test_degree(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     p = Poly.basis(5)
     assert_equal(p.degree(), 5)
 
 
 def test_copy(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     p1 = Poly.basis(5)
     p2 = p1.copy()
     assert_(p1 == p2)
@@ -428,6 +678,17 @@
 
 
 def test_integ(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     P = Polynomial
     # Check defaults
     p0 = Poly.cast(P([1*2, 2*3, 3*4]))
@@ -457,6 +718,17 @@
 
 
 def test_deriv(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     # Check that the derivative is the inverse of integration. It is
     # assumes that the integration has been checked elsewhere.
     d = Poly.domain + random((2,))*.25
@@ -475,6 +747,17 @@
 
 
 def test_linspace(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     d = Poly.domain + random((2,))*.25
     w = Poly.window + random((2,))*.25
     p = Poly([1, 2, 3], domain=d, window=w)
@@ -493,6 +776,17 @@
 
 
 def test_pow(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     d = Poly.domain + random((2,))*.25
     w = Poly.window + random((2,))*.25
     tgt = Poly([1], domain=d, window=w)
@@ -512,6 +806,17 @@
 
 
 def test_call(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     P = Polynomial
     d = Poly.domain
     x = np.linspace(d[0], d[1], 11)
@@ -524,6 +829,17 @@
 
 
 def test_cutdeg(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     p = Poly([1, 2, 3])
     assert_raises(ValueError, p.cutdeg, .5)
     assert_raises(ValueError, p.cutdeg, -1)
@@ -534,6 +850,17 @@
 
 
 def test_truncate(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     p = Poly([1, 2, 3])
     assert_raises(ValueError, p.truncate, .5)
     assert_raises(ValueError, p.truncate, 0)
@@ -544,6 +871,17 @@
 
 
 def test_trim(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     c = [1, 1e-6, 1e-12, 0]
     p = Poly(c)
     assert_equal(p.trim().coef, c[:3])
@@ -552,6 +890,17 @@
 
 
 def test_mapparms(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     # check with defaults. Should be identity.
     d = Poly.domain
     w = Poly.window
@@ -564,6 +913,17 @@
 
 
 def test_ufunc_override(Poly):
+    """
+
+    Parameters
+    ----------
+    Poly :
+        
+
+    Returns
+    -------
+
+    """
     p = Poly([1, 2, 3])
     x = np.ones(3)
     assert_raises(TypeError, np.add, p, x)
@@ -576,21 +936,49 @@
 
 
 class TestInterpolate:
+    """ """
 
     def f(self, x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         return x * (x - 1) * (x - 2)
 
     def test_raises(self):
+        """ """
         assert_raises(ValueError, Chebyshev.interpolate, self.f, -1)
         assert_raises(TypeError, Chebyshev.interpolate, self.f, 10.)
 
     def test_dimensions(self):
+        """ """
         for deg in range(1, 5):
             assert_(Chebyshev.interpolate(self.f, deg).degree() == deg)
 
     def test_approximation(self):
+        """ """
 
         def powx(x, p):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+            p :
+                
+
+            Returns
+            -------
+
+            """
             return x**p
 
         x = np.linspace(0, 2, 10)
