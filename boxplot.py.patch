# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/plotting/_matplotlib/boxplot.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/plotting/_matplotlib/boxplot.py
@@ -16,6 +16,7 @@
 
 
 class BoxPlot(LinePlot):
+    """ """
     _kind = "box"
     _layout_type = "horizontal"
 
@@ -32,6 +33,7 @@
         MPLPlot.__init__(self, data, **kwargs)
 
     def _args_adjust(self):
+        """ """
         if self.subplots:
             # Disable label ax sharing. Otherwise, all subplots shows last
             # column label
@@ -42,6 +44,25 @@
 
     @classmethod
     def _plot(cls, ax, y, column_num=None, return_type="axes", **kwds):
+        """
+
+        Parameters
+        ----------
+        ax :
+            
+        y :
+            
+        column_num :
+             (Default value = None)
+        return_type :
+             (Default value = "axes")
+        **kwds :
+            
+
+        Returns
+        -------
+
+        """
         if y.ndim == 2:
             y = [remove_na_arraylike(v) for v in y]
             # Boxplot fails with empty arrays, so need to add a NaN
@@ -60,6 +81,7 @@
             return ax, bp
 
     def _validate_color_args(self):
+        """ """
         if "color" in self.kwds:
             if self.colormap is not None:
                 warnings.warn(
@@ -90,9 +112,33 @@
         self._caps_c = "k"  # mpl default
 
     def _get_colors(self, num_colors=None, color_kwds="color"):
+        """
+
+        Parameters
+        ----------
+        num_colors :
+             (Default value = None)
+        color_kwds :
+             (Default value = "color")
+
+        Returns
+        -------
+
+        """
         pass
 
     def maybe_color_bp(self, bp):
+        """
+
+        Parameters
+        ----------
+        bp :
+            
+
+        Returns
+        -------
+
+        """
         if isinstance(self.color, dict):
             boxes = self.color.get("boxes", self._boxes_c)
             whiskers = self.color.get("whiskers", self._whiskers_c)
@@ -118,6 +164,7 @@
             setp(bp["caps"], color=caps, alpha=1)
 
     def _make_plot(self):
+        """ """
         if self.subplots:
             self._return_obj = pd.Series(dtype=object)
 
@@ -151,19 +198,47 @@
             self._set_ticklabels(ax, labels)
 
     def _set_ticklabels(self, ax, labels):
+        """
+
+        Parameters
+        ----------
+        ax :
+            
+        labels :
+            
+
+        Returns
+        -------
+
+        """
         if self.orientation == "vertical":
             ax.set_xticklabels(labels)
         else:
             ax.set_yticklabels(labels)
 
     def _make_legend(self):
+        """ """
         pass
 
     def _post_plot_logic(self, ax, data):
+        """
+
+        Parameters
+        ----------
+        ax :
+            
+        data :
+            
+
+        Returns
+        -------
+
+        """
         pass
 
     @property
     def orientation(self):
+        """ """
         if self.kwds.get("vert", True):
             return "vertical"
         else:
@@ -171,6 +246,7 @@
 
     @property
     def result(self):
+        """ """
         if self.return_type is None:
             return super().result
         else:
@@ -190,6 +266,37 @@
     return_type=None,
     **kwargs,
 ):
+    """
+
+    Parameters
+    ----------
+    plotf :
+        
+    data :
+        
+    columns :
+         (Default value = None)
+    by :
+         (Default value = None)
+    numeric_only :
+         (Default value = True)
+    grid :
+         (Default value = False)
+    figsize :
+         (Default value = None)
+    ax :
+         (Default value = None)
+    layout :
+         (Default value = None)
+    return_type :
+         (Default value = None)
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     grouped = data.groupby(by)
     if columns is None:
         if not isinstance(by, (list, tuple)):
@@ -240,6 +347,37 @@
     return_type=None,
     **kwds,
 ):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+    column :
+         (Default value = None)
+    by :
+         (Default value = None)
+    ax :
+         (Default value = None)
+    fontsize :
+         (Default value = None)
+    rot :
+         (Default value = 0)
+    grid :
+         (Default value = True)
+    figsize :
+         (Default value = None)
+    layout :
+         (Default value = None)
+    return_type :
+         (Default value = None)
+    **kwds :
+        
+
+    Returns
+    -------
+
+    """
 
     import matplotlib.pyplot as plt
 
@@ -252,6 +390,7 @@
         column = "x"
 
     def _get_colors():
+        """ """
         #  num_colors=3 is required as method maybe_color_bp takes the colors
         #  in positions 0 and 2.
         #  if colors not provided, use same defaults as DataFrame.plot.box
@@ -281,6 +420,19 @@
         return result
 
     def maybe_color_bp(bp, **kwds):
+        """
+
+        Parameters
+        ----------
+        bp :
+            
+        **kwds :
+            
+
+        Returns
+        -------
+
+        """
         # GH 30346, when users specifying those arguments explicitly, our defaults
         # for these four kwargs should be overridden; if not, use Pandas settings
         if not kwds.get("boxprops"):
@@ -293,6 +445,21 @@
             setp(bp["caps"], color=colors[3], alpha=1)
 
     def plot_group(keys, values, ax):
+        """
+
+        Parameters
+        ----------
+        keys :
+            
+        values :
+            
+        ax :
+            
+
+        Returns
+        -------
+
+        """
         keys = [pprint_thing(x) for x in keys]
         values = [np.asarray(remove_na_arraylike(v)) for v in values]
         bp = ax.boxplot(values, **kwds)
@@ -375,6 +542,35 @@
     return_type=None,
     **kwds,
 ):
+    """
+
+    Parameters
+    ----------
+    column :
+         (Default value = None)
+    by :
+         (Default value = None)
+    ax :
+         (Default value = None)
+    fontsize :
+         (Default value = None)
+    rot :
+         (Default value = 0)
+    grid :
+         (Default value = True)
+    figsize :
+         (Default value = None)
+    layout :
+         (Default value = None)
+    return_type :
+         (Default value = None)
+    **kwds :
+        
+
+    Returns
+    -------
+
+    """
     import matplotlib.pyplot as plt
 
     ax = boxplot(
@@ -408,6 +604,39 @@
     sharey=True,
     **kwds,
 ):
+    """
+
+    Parameters
+    ----------
+    grouped :
+        
+    subplots :
+         (Default value = True)
+    column :
+         (Default value = None)
+    fontsize :
+         (Default value = None)
+    rot :
+         (Default value = 0)
+    grid :
+         (Default value = True)
+    ax :
+         (Default value = None)
+    figsize :
+         (Default value = None)
+    layout :
+         (Default value = None)
+    sharex :
+         (Default value = False)
+    sharey :
+         (Default value = True)
+    **kwds :
+        
+
+    Returns
+    -------
+
+    """
     if subplots is True:
         naxes = len(grouped)
         fig, axes = _subplots(
