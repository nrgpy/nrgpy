# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tornado/tcpserver.py
+++ b/..//venv/lib/python3.8/site-packages/tornado/tcpserver.py
@@ -36,15 +36,15 @@
 
 
 class TCPServer(object):
-    r"""A non-blocking, single-threaded TCP server.
-
+    """r"""A non-blocking, single-threaded TCP server.
+    
     To use `TCPServer`, define a subclass which overrides the `handle_stream`
     method. For example, a simple echo server could be defined like this::
-
+    
       from tornado.tcpserver import TCPServer
       from tornado.iostream import StreamClosedError
       from tornado import gen
-
+    
       class EchoServer(TCPServer):
           async def handle_stream(self, stream, address):
               while True:
@@ -53,57 +53,82 @@
                       await stream.write(data)
                   except StreamClosedError:
                       break
-
+    
     To make this server serve SSL traffic, send the ``ssl_options`` keyword
     argument with an `ssl.SSLContext` object. For compatibility with older
     versions of Python ``ssl_options`` may also be a dictionary of keyword
-    arguments for the `ssl.wrap_socket` method.::
-
-       ssl_ctx = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
-       ssl_ctx.load_cert_chain(os.path.join(data_dir, "mydomain.crt"),
-                               os.path.join(data_dir, "mydomain.key"))
-       TCPServer(ssl_options=ssl_ctx)
-
-    `TCPServer` initialization follows one of three patterns:
-
-    1. `listen`: simple single-process::
-
-            server = TCPServer()
-            server.listen(8888)
-            IOLoop.current().start()
-
-    2. `bind`/`start`: simple multi-process::
-
-            server = TCPServer()
-            server.bind(8888)
-            server.start(0)  # Forks multiple sub-processes
-            IOLoop.current().start()
-
-       When using this interface, an `.IOLoop` must *not* be passed
-       to the `TCPServer` constructor.  `start` will always start
-       the server on the default singleton `.IOLoop`.
-
-    3. `add_sockets`: advanced multi-process::
-
-            sockets = bind_sockets(8888)
-            tornado.process.fork_processes(0)
-            server = TCPServer()
-            server.add_sockets(sockets)
-            IOLoop.current().start()
-
-       The `add_sockets` interface is more complicated, but it can be
-       used with `tornado.process.fork_processes` to give you more
-       flexibility in when the fork happens.  `add_sockets` can
-       also be used in single-process servers if you want to create
-       your listening sockets in some way other than
-       `~tornado.netutil.bind_sockets`.
-
-    .. versionadded:: 3.1
-       The ``max_buffer_size`` argument.
-
-    .. versionchanged:: 5.0
-       The ``io_loop`` argument has been removed.
-    """
+
+    Parameters
+    ----------
+    ssl_ctx :
+        ssl
+    ssl_ctx :
+        load_cert_chain
+    os :
+        path
+    TCPServer :
+        ssl_options
+    TCPServer :
+        initialization follows one of three patterns
+    1 :
+        listen
+    server :
+        TCPServer
+    server :
+        listen
+    IOLoop :
+        current
+    2 :
+        bind
+    server :
+        TCPServer
+    server :
+        bind
+    server :
+        start
+    IOLoop :
+        current
+    When :
+        using this interface
+    to :
+        the
+    the :
+        server on the default singleton
+    3 :
+        add_sockets
+    sockets :
+        bind_sockets
+    tornado :
+        process
+    server :
+        TCPServer
+    server :
+        add_sockets
+    IOLoop :
+        current
+    The :
+        add_sockets
+    used :
+        with
+    flexibility :
+        in when the fork happens
+    also :
+        be used in single
+    your :
+        listening sockets in some way other than
+    tornado :
+        netutil
+    versionadded :
+        
+    The :
+        max_buffer_size
+    versionchanged :
+        
+    The :
+        io_loop
+
+    Returns
+    -------
 
     def __init__(
         self,
@@ -142,23 +167,43 @@
 
     def listen(self, port: int, address: str = "") -> None:
         """Starts accepting connections on the given port.
-
+        
         This method may be called more than once to listen on multiple ports.
         `listen` takes effect immediately; it is not necessary to call
         `TCPServer.start` afterwards.  It is, however, necessary to start
         the `.IOLoop`.
+
+        Parameters
+        ----------
+        port: int :
+            
+        address: str :
+             (Default value = "")
+
+        Returns
+        -------
+
         """
         sockets = bind_sockets(port, address=address)
         self.add_sockets(sockets)
 
     def add_sockets(self, sockets: Iterable[socket.socket]) -> None:
         """Makes this server start accepting connections on the given sockets.
-
+        
         The ``sockets`` parameter is a list of socket objects such as
         those returned by `~tornado.netutil.bind_sockets`.
         `add_sockets` is typically used in combination with that
         method and `tornado.process.fork_processes` to provide greater
         control over the initialization of a multi-process server.
+
+        Parameters
+        ----------
+        sockets: Iterable[socket.socket] :
+            
+
+        Returns
+        -------
+
         """
         for sock in sockets:
             self._sockets[sock.fileno()] = sock
@@ -167,7 +212,17 @@
             )
 
     def add_socket(self, socket: socket.socket) -> None:
-        """Singular version of `add_sockets`.  Takes a single socket object."""
+        """Singular version of `add_sockets`.  Takes a single socket object.
+
+        Parameters
+        ----------
+        socket: socket.socket :
+            
+
+        Returns
+        -------
+
+        """
         self.add_sockets([socket])
 
     def bind(
@@ -179,27 +234,44 @@
         reuse_port: bool = False,
     ) -> None:
         """Binds this server to the given port on the given address.
-
+        
         To start the server, call `start`. If you want to run this server
         in a single process, you can call `listen` as a shortcut to the
         sequence of `bind` and `start` calls.
-
+        
         Address may be either an IP address or hostname.  If it's a hostname,
         the server will listen on all IP addresses associated with the
         name.  Address may be an empty string or None to listen on all
         available interfaces.  Family may be set to either `socket.AF_INET`
         or `socket.AF_INET6` to restrict to IPv4 or IPv6 addresses, otherwise
         both will be used if available.
-
+        
         The ``backlog`` argument has the same meaning as for
         `socket.listen <socket.socket.listen>`. The ``reuse_port`` argument
         has the same meaning as for `.bind_sockets`.
-
+        
         This method may be called multiple times prior to `start` to listen
         on multiple ports or interfaces.
-
+        
         .. versionchanged:: 4.4
            Added the ``reuse_port`` argument.
+
+        Parameters
+        ----------
+        port: int :
+            
+        address: Optional[str] :
+             (Default value = None)
+        family: socket.AddressFamily :
+             (Default value = socket.AF_UNSPEC)
+        backlog: int :
+             (Default value = 128)
+        reuse_port: bool :
+             (Default value = False)
+
+        Returns
+        -------
+
         """
         sockets = bind_sockets(
             port, address=address, family=family, backlog=backlog, reuse_port=reuse_port
@@ -213,31 +285,42 @@
         self, num_processes: Optional[int] = 1, max_restarts: Optional[int] = None
     ) -> None:
         """Starts this server in the `.IOLoop`.
-
+        
         By default, we run the server in this process and do not fork any
         additional child process.
-
+        
         If num_processes is ``None`` or <= 0, we detect the number of cores
         available on this machine and fork that number of child
         processes. If num_processes is given and > 1, we fork that
         specific number of sub-processes.
-
+        
         Since we use processes and not threads, there is no shared memory
         between any server code.
-
+        
         Note that multiple processes are not compatible with the autoreload
         module (or the ``autoreload=True`` option to `tornado.web.Application`
         which defaults to True when ``debug=True``).
         When using multiple processes, no IOLoops can be created or
         referenced until after the call to ``TCPServer.start(n)``.
-
+        
         Values of ``num_processes`` other than 1 are not supported on Windows.
-
+        
         The ``max_restarts`` argument is passed to `.fork_processes`.
-
+        
         .. versionchanged:: 6.0
-
+        
            Added ``max_restarts`` argument.
+
+        Parameters
+        ----------
+        num_processes: Optional[int] :
+             (Default value = 1)
+        max_restarts: Optional[int] :
+             (Default value = None)
+
+        Returns
+        -------
+
         """
         assert not self._started
         self._started = True
@@ -249,9 +332,16 @@
 
     def stop(self) -> None:
         """Stops listening for new connections.
-
+        
         Requests currently in progress may still continue after the
         server is stopped.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         if self._stopped:
             return
@@ -266,22 +356,46 @@
         self, stream: IOStream, address: tuple
     ) -> Optional[Awaitable[None]]:
         """Override to handle a new `.IOStream` from an incoming connection.
-
+        
         This method may be a coroutine; if so any exceptions it raises
         asynchronously will be logged. Accepting of incoming connections
         will not be blocked by this coroutine.
-
+        
         If this `TCPServer` is configured for SSL, ``handle_stream``
         may be called before the SSL handshake has completed. Use
         `.SSLIOStream.wait_for_handshake` if you need to verify the client's
         certificate or use NPN/ALPN.
-
+        
         .. versionchanged:: 4.2
            Added the option for this method to be a coroutine.
+
+        Parameters
+        ----------
+        stream: IOStream :
+            
+        address: tuple :
+            
+
+        Returns
+        -------
+
         """
         raise NotImplementedError()
 
     def _handle_connection(self, connection: socket.socket, address: Any) -> None:
+        """
+
+        Parameters
+        ----------
+        connection: socket.socket :
+            
+        address: Any :
+            
+
+        Returns
+        -------
+
+        """
         if self.ssl_options is not None:
             assert ssl, "Python 2.6+ and OpenSSL required for SSL"
             try:
