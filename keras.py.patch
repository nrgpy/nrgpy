# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tqdm/keras.py
+++ b/..//venv/lib/python3.8/site-packages/tqdm/keras.py
@@ -16,7 +16,35 @@
     """`keras` callback for epoch and batch progress"""
     @staticmethod
     def bar2callback(bar, pop=None, delta=(lambda logs: 1)):
+        """
+
+        Parameters
+        ----------
+        bar :
+            
+        pop :
+             (Default value = None)
+        delta :
+             (Default value = (lambda logs: 1))
+
+        Returns
+        -------
+
+        """
         def callback(_, logs=None):
+            """
+
+            Parameters
+            ----------
+            _ :
+                
+            logs :
+                 (Default value = None)
+
+            Returns
+            -------
+
+            """
             n = delta(logs)
             if logs:
                 if pop:
@@ -61,12 +89,38 @@
                 delta=lambda logs: logs.get('size', 1))
 
     def on_train_begin(self, *_, **__):
+        """
+
+        Parameters
+        ----------
+        *_ :
+            
+        **__ :
+            
+
+        Returns
+        -------
+
+        """
         params = self.params.get
         auto_total = params('epochs', params('nb_epoch', None))
         if auto_total is not None:
             self.epoch_bar.reset(total=auto_total)
 
     def on_epoch_begin(self, *_, **__):
+        """
+
+        Parameters
+        ----------
+        *_ :
+            
+        **__ :
+            
+
+        Returns
+        -------
+
+        """
         if self.verbose:
             params = self.params.get
             total = params('samples', params(
@@ -88,18 +142,34 @@
                 raise KeyError('Unknown verbosity')
 
     def on_train_end(self, *_, **__):
+        """
+
+        Parameters
+        ----------
+        *_ :
+            
+        **__ :
+            
+
+        Returns
+        -------
+
+        """
         if self.verbose:
             self.batch_bar.close()
         self.epoch_bar.close()
 
     @staticmethod
     def _implements_train_batch_hooks():
+        """ """
         return True
 
     @staticmethod
     def _implements_test_batch_hooks():
+        """ """
         return True
 
     @staticmethod
     def _implements_predict_batch_hooks():
+        """ """
         return True
