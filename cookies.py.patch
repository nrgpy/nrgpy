# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/requests/cookies.py
+++ b/..//venv/lib/python3.8/site-packages/requests/cookies.py
@@ -24,14 +24,21 @@
 
 class MockRequest(object):
     """Wraps a `requests.Request` to mimic a `urllib2.Request`.
-
+    
     The code in `cookielib.CookieJar` expects this interface in order to correctly
     manage cookie policies, i.e., determine whether a cookie can be set, given the
     domains of the request and the cookie.
-
+    
     The original request object is read-only. The client is responsible for collecting
     the new headers via `get_new_headers()` and interpreting them appropriately. You
     probably want `get_cookie_header`, defined below.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, request):
@@ -40,15 +47,19 @@
         self.type = urlparse(self._r.url).scheme
 
     def get_type(self):
+        """ """
         return self.type
 
     def get_host(self):
+        """ """
         return urlparse(self._r.url).netloc
 
     def get_origin_req_host(self):
+        """ """
         return self.get_host()
 
     def get_full_url(self):
+        """ """
         # Only return the response's URL if the user hadn't set the Host
         # header
         if not self._r.headers.get('Host'):
@@ -63,42 +74,103 @@
         ])
 
     def is_unverifiable(self):
+        """ """
         return True
 
     def has_header(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         return name in self._r.headers or name in self._new_headers
 
     def get_header(self, name, default=None):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+        default :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         return self._r.headers.get(name, self._new_headers.get(name, default))
 
     def add_header(self, key, val):
-        """cookielib has no legitimate use for this method; add it back if you find one."""
+        """cookielib has no legitimate use for this method; add it back if you find one.
+
+        Parameters
+        ----------
+        key :
+            
+        val :
+            
+
+        Returns
+        -------
+
+        """
         raise NotImplementedError("Cookie headers should be added with add_unredirected_header()")
 
     def add_unredirected_header(self, name, value):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+        value :
+            
+
+        Returns
+        -------
+
+        """
         self._new_headers[name] = value
 
     def get_new_headers(self):
+        """ """
         return self._new_headers
 
     @property
     def unverifiable(self):
+        """ """
         return self.is_unverifiable()
 
     @property
     def origin_req_host(self):
+        """ """
         return self.get_origin_req_host()
 
     @property
     def host(self):
+        """ """
         return self.get_host()
 
 
 class MockResponse(object):
     """Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.
-
+    
     ...what? Basically, expose the parsed HTTP headers from the server response
     the way `cookielib` expects to see them.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, headers):
@@ -109,18 +181,39 @@
         self._headers = headers
 
     def info(self):
+        """ """
         return self._headers
 
     def getheaders(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         self._headers.getheaders(name)
 
 
 def extract_cookies_to_jar(jar, request, response):
     """Extract the cookies from the response into a CookieJar.
 
-    :param jar: cookielib.CookieJar (not necessarily a RequestsCookieJar)
-    :param request: our own requests.Request object
-    :param response: urllib3.HTTPResponse object
+    Parameters
+    ----------
+    jar :
+        cookielib.CookieJar (not necessarily a RequestsCookieJar)
+    request :
+        our own requests.Request object
+    response :
+        urllib3.HTTPResponse object
+
+    Returns
+    -------
+
     """
     if not (hasattr(response, '_original_response') and
             response._original_response):
@@ -133,10 +226,18 @@
 
 
 def get_cookie_header(jar, request):
-    """
-    Produce an appropriate Cookie header string to be sent with `request`, or None.
-
-    :rtype: str
+    """Produce an appropriate Cookie header string to be sent with `request`, or None.
+
+    Parameters
+    ----------
+    jar :
+        
+    request :
+        
+
+    Returns
+    -------
+
     """
     r = MockRequest(request)
     jar.add_cookie_header(r)
@@ -145,8 +246,23 @@
 
 def remove_cookie_by_name(cookiejar, name, domain=None, path=None):
     """Unsets a cookie by name, by default over all domains and paths.
-
+    
     Wraps CookieJar.clear(), is O(n).
+
+    Parameters
+    ----------
+    cookiejar :
+        
+    name :
+        
+    domain :
+         (Default value = None)
+    path :
+         (Default value = None)
+
+    Returns
+    -------
+
     """
     clearables = []
     for cookie in cookiejar:
@@ -165,33 +281,62 @@
 class CookieConflictError(RuntimeError):
     """There are two cookies that meet the criteria specified in the cookie jar.
     Use .get and .set and include domain and path args in order to be more specific.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
 
 class RequestsCookieJar(cookielib.CookieJar, MutableMapping):
     """Compatibility class; is a cookielib.CookieJar, but exposes a dict
     interface.
-
+    
     This is the CookieJar we create by default for requests and sessions that
     don't specify one, since some clients may expect response.cookies and
     session.cookies to support dict operations.
-
+    
     Requests does not use the dict interface internally; it's just for
     compatibility with external client code. All requests code should work
     out of the box with externally provided instances of ``CookieJar``, e.g.
     ``LWPCookieJar`` and ``FileCookieJar``.
-
+    
     Unlike a regular CookieJar, this class is pickleable.
-
+    
     .. warning:: dictionary operations that are normally O(1) may be O(n).
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def get(self, name, default=None, domain=None, path=None):
         """Dict-like get() that also supports optional domain and path args in
         order to resolve naming collisions from using one cookie jar over
         multiple domains.
-
+        
         .. warning:: operation is O(n), not O(1).
+
+        Parameters
+        ----------
+        name :
+            
+        default :
+             (Default value = None)
+        domain :
+             (Default value = None)
+        path :
+             (Default value = None)
+
+        Returns
+        -------
+
         """
         try:
             return self._find_no_duplicates(name, domain, path)
@@ -202,6 +347,19 @@
         """Dict-like set() that also supports optional domain and path args in
         order to resolve naming collisions from using one cookie jar over
         multiple domains.
+
+        Parameters
+        ----------
+        name :
+            
+        value :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
         """
         # support client code that unsets cookies by assignment of a None value:
         if value is None:
@@ -218,8 +376,15 @@
     def iterkeys(self):
         """Dict-like iterkeys() that returns an iterator of names of cookies
         from the jar.
-
+        
         .. seealso:: itervalues() and iteritems().
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         for cookie in iter(self):
             yield cookie.name
@@ -227,16 +392,30 @@
     def keys(self):
         """Dict-like keys() that returns a list of names of cookies from the
         jar.
-
+        
         .. seealso:: values() and items().
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         return list(self.iterkeys())
 
     def itervalues(self):
         """Dict-like itervalues() that returns an iterator of values of cookies
         from the jar.
-
+        
         .. seealso:: iterkeys() and iteritems().
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         for cookie in iter(self):
             yield cookie.value
@@ -244,16 +423,30 @@
     def values(self):
         """Dict-like values() that returns a list of values of cookies from the
         jar.
-
+        
         .. seealso:: keys() and items().
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         return list(self.itervalues())
 
     def iteritems(self):
         """Dict-like iteritems() that returns an iterator of name-value tuples
         from the jar.
-
+        
         .. seealso:: iterkeys() and itervalues().
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         for cookie in iter(self):
             yield cookie.name, cookie.value
@@ -262,8 +455,15 @@
         """Dict-like items() that returns a list of name-value tuples from the
         jar. Allows client-code to call ``dict(RequestsCookieJar)`` and get a
         vanilla python dict of key value pairs.
-
+        
         .. seealso:: keys() and values().
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         return list(self.iteritems())
 
@@ -287,7 +487,12 @@
         """Returns True if there are multiple domains in the jar.
         Returns False otherwise.
 
-        :rtype: bool
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         domains = []
         for cookie in iter(self):
@@ -301,7 +506,16 @@
         old Python dict of name-value pairs of cookies that meet the
         requirements.
 
-        :rtype: dict
+        Parameters
+        ----------
+        domain :
+             (Default value = None)
+        path :
+             (Default value = None)
+
+        Returns
+        -------
+
         """
         dictionary = {}
         for cookie in iter(self):
@@ -341,12 +555,37 @@
         remove_cookie_by_name(self, name)
 
     def set_cookie(self, cookie, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        cookie :
+            
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         if hasattr(cookie.value, 'startswith') and cookie.value.startswith('"') and cookie.value.endswith('"'):
             cookie.value = cookie.value.replace('\\"', '')
         return super(RequestsCookieJar, self).set_cookie(cookie, *args, **kwargs)
 
     def update(self, other):
-        """Updates this jar with cookies from another CookieJar or dict-like"""
+        """Updates this jar with cookies from another CookieJar or dict-like
+
+        Parameters
+        ----------
+        other :
+            
+
+        Returns
+        -------
+
+        """
         if isinstance(other, cookielib.CookieJar):
             for cookie in other:
                 self.set_cookie(copy.copy(cookie))
@@ -355,15 +594,25 @@
 
     def _find(self, name, domain=None, path=None):
         """Requests uses this method internally to get cookie values.
-
+        
         If there are conflicting cookies, _find arbitrarily chooses one.
         See _find_no_duplicates if you want an exception thrown if there are
         conflicting cookies.
 
-        :param name: a string containing name of cookie
-        :param domain: (optional) string containing domain of cookie
-        :param path: (optional) string containing path of cookie
-        :return: cookie.value
+        Parameters
+        ----------
+        name :
+            a string containing name of cookie
+        domain :
+            optional) string containing domain of cookie (Default value = None)
+        path :
+            optional) string containing path of cookie (Default value = None)
+
+        Returns
+        -------
+        type
+            cookie.value
+
         """
         for cookie in iter(self):
             if cookie.name == name:
@@ -377,13 +626,28 @@
         """Both ``__get_item__`` and ``get`` call this function: it's never
         used elsewhere in Requests.
 
-        :param name: a string containing name of cookie
-        :param domain: (optional) string containing domain of cookie
-        :param path: (optional) string containing path of cookie
-        :raises KeyError: if cookie is not found
-        :raises CookieConflictError: if there are multiple cookies
+        Parameters
+        ----------
+        name :
+            a string containing name of cookie
+        domain :
+            optional) string containing domain of cookie (Default value = None)
+        path :
+            optional) string containing path of cookie (Default value = None)
+
+        Returns
+        -------
+        type
+            cookie.value
+
+        Raises
+        ------
+        KeyError
+            if cookie is not found
+        CookieConflictError
+            if there are multiple cookies
             that match name and optionally domain and path
-        :return: cookie.value
+
         """
         toReturn = None
         for cookie in iter(self):
@@ -412,18 +676,29 @@
             self._cookies_lock = threading.RLock()
 
     def copy(self):
-        """Return a copy of this RequestsCookieJar."""
+        """ """
         new_cj = RequestsCookieJar()
         new_cj.set_policy(self.get_policy())
         new_cj.update(self)
         return new_cj
 
     def get_policy(self):
-        """Return the CookiePolicy instance used."""
+        """ """
         return self._policy
 
 
 def _copy_cookie_jar(jar):
+    """
+
+    Parameters
+    ----------
+    jar :
+        
+
+    Returns
+    -------
+
+    """
     if jar is None:
         return None
 
@@ -440,9 +715,22 @@
 
 def create_cookie(name, value, **kwargs):
     """Make a cookie from underspecified parameters.
-
+    
     By default, the pair of `name` and `value` will be set for the domain ''
     and sent on every request (this is sometimes called a "supercookie").
+
+    Parameters
+    ----------
+    name :
+        
+    value :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
     """
     result = {
         'version': 0,
@@ -475,7 +763,17 @@
 
 
 def morsel_to_cookie(morsel):
-    """Convert a Morsel object into a Cookie containing the one k/v pair."""
+    """Convert a Morsel object into a Cookie containing the one k/v pair.
+
+    Parameters
+    ----------
+    morsel :
+        
+
+    Returns
+    -------
+
+    """
 
     expires = None
     if morsel['max-age']:
@@ -508,11 +806,19 @@
 def cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):
     """Returns a CookieJar from a key/value dictionary.
 
-    :param cookie_dict: Dict of key/values to insert into CookieJar.
-    :param cookiejar: (optional) A cookiejar to add the cookies to.
-    :param overwrite: (optional) If False, will not replace cookies
-        already in the jar with new ones.
-    :rtype: CookieJar
+    Parameters
+    ----------
+    cookie_dict :
+        Dict of key/values to insert into CookieJar.
+    cookiejar :
+        optional) A cookiejar to add the cookies to. (Default value = None)
+    overwrite :
+        optional) If False, will not replace cookies
+        already in the jar with new ones. (Default value = True)
+
+    Returns
+    -------
+
     """
     if cookiejar is None:
         cookiejar = RequestsCookieJar()
@@ -529,9 +835,16 @@
 def merge_cookies(cookiejar, cookies):
     """Add cookies to cookiejar and returns a merged CookieJar.
 
-    :param cookiejar: CookieJar object to add the cookies to.
-    :param cookies: Dictionary or CookieJar object to be added.
-    :rtype: CookieJar
+    Parameters
+    ----------
+    cookiejar :
+        CookieJar object to add the cookies to.
+    cookies :
+        Dictionary or CookieJar object to be added.
+
+    Returns
+    -------
+
     """
     if not isinstance(cookiejar, cookielib.CookieJar):
         raise ValueError('You can only merge into CookieJar')
