# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/series/test_datetime_values.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/series/test_datetime_values.py
@@ -29,7 +29,9 @@
 
 
 class TestSeriesDatetimeValues:
+    """ """
     def test_dt_namespace_accessor(self):
+        """ """
 
         # GH 7207, 11128
         # test .dt namespace accessor
@@ -62,6 +64,19 @@
         ]
 
         def get_expected(s, name):
+            """
+
+            Parameters
+            ----------
+            s :
+                
+            name :
+                
+
+            Returns
+            -------
+
+            """
             result = getattr(Index(s._values), prop)
             if isinstance(result, np.ndarray):
                 if is_integer_dtype(result):
@@ -71,6 +86,19 @@
             return Series(result, index=s.index, name=s.name)
 
         def compare(s, name):
+            """
+
+            Parameters
+            ----------
+            s :
+                
+            name :
+                
+
+            Returns
+            -------
+
+            """
             a = getattr(s.dt, prop)
             b = get_expected(s, prop)
             if not (is_list_like(a) and is_list_like(b)):
@@ -211,6 +239,17 @@
 
         # test limited display api
         def get_dir(s):
+            """
+
+            Parameters
+            ----------
+            s :
+                
+
+            Returns
+            -------
+
+            """
             results = [r for r in s.dt.__dir__() if not r.startswith("_")]
             return sorted(set(results))
 
@@ -260,6 +299,19 @@
         ],
     )
     def test_dt_round(self, method, dates):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+        dates :
+            
+
+        Returns
+        -------
+
+        """
         # round
         s = Series(
             pd.to_datetime(
@@ -272,6 +324,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_dt_round_tz(self):
+        """ """
         s = Series(
             pd.to_datetime(
                 ["2012-01-01 13:00:00", "2012-01-01 12:01:00", "2012-01-01 08:00:00"]
@@ -288,6 +341,17 @@
 
     @pytest.mark.parametrize("method", ["ceil", "round", "floor"])
     def test_dt_round_tz_ambiguous(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         # GH 18946 round near "fall back" DST
         df1 = pd.DataFrame(
             [
@@ -326,6 +390,21 @@
         ],
     )
     def test_dt_round_tz_nonexistent(self, method, ts_str, freq):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+        ts_str :
+            
+        freq :
+            
+
+        Returns
+        -------
+
+        """
         # GH 23324 round near "spring forward" DST
         s = Series([pd.Timestamp(ts_str, tz="America/Chicago")])
         result = getattr(s.dt, method)(freq, nonexistent="shift_forward")
@@ -340,6 +419,7 @@
             getattr(s.dt, method)(freq, nonexistent="raise")
 
     def test_dt_namespace_accessor_categorical(self):
+        """ """
         # GH 19468
         dti = DatetimeIndex(["20171111", "20181212"]).repeat(2)
         s = Series(pd.Categorical(dti), name="foo")
@@ -348,6 +428,17 @@
         tm.assert_series_equal(result, expected)
 
     def test_dt_tz_localize_categorical(self, tz_aware_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_aware_fixture :
+            
+
+        Returns
+        -------
+
+        """
         # GH 27952
         tz = tz_aware_fixture
         datetimes = pd.Series(
@@ -359,6 +450,17 @@
         tm.assert_series_equal(result, expected)
 
     def test_dt_tz_convert_categorical(self, tz_aware_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_aware_fixture :
+            
+
+        Returns
+        -------
+
+        """
         # GH 27952
         tz = tz_aware_fixture
         datetimes = pd.Series(
@@ -371,6 +473,17 @@
 
     @pytest.mark.parametrize("accessor", ["year", "month", "day"])
     def test_dt_other_accessors_categorical(self, accessor):
+        """
+
+        Parameters
+        ----------
+        accessor :
+            
+
+        Returns
+        -------
+
+        """
         # GH 27952
         datetimes = pd.Series(
             ["2018-01-01", "2018-01-01", "2019-01-02"], dtype="datetime64[ns]"
@@ -381,6 +494,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_dt_accessor_no_new_attributes(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/10673
         s = Series(date_range("20130101", periods=5, freq="D"))
         with pytest.raises(AttributeError, match="You cannot add any new attribute"):
@@ -390,6 +504,17 @@
         "time_locale", [None] if tm.get_locales() is None else [None] + tm.get_locales()
     )
     def test_dt_accessor_datetime_name_accessors(self, time_locale):
+        """
+
+        Parameters
+        ----------
+        time_locale :
+            
+
+        Returns
+        -------
+
+        """
         # Test Monday -> Sunday and January -> December, in that sequence
         if time_locale is None:
             # If the time_locale is None, day-name and month_name should
@@ -461,6 +586,7 @@
         assert np.isnan(s.dt.month_name(locale=time_locale).iloc[-1])
 
     def test_strftime(self):
+        """ """
         # GH 10086
         s = Series(date_range("20130101", periods=5))
         result = s.dt.strftime("%Y/%m/%d")
@@ -564,6 +690,17 @@
         ],
     )
     def test_strftime_nat(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # GH 29578
         s = Series(data)
         result = s.dt.strftime("%Y-%m-%d")
@@ -571,6 +708,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_valid_dt_with_missing_values(self):
+        """ """
 
         from datetime import date, time
 
@@ -602,6 +740,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_dt_accessor_api(self):
+        """ """
         # GH 9322
         from pandas.core.indexes.accessors import (
             CombinedDatetimelikeProperties,
@@ -617,12 +756,24 @@
         "ser", [Series(np.arange(5)), Series(list("abcde")), Series(np.random.randn(5))]
     )
     def test_dt_accessor_invalid(self, ser):
+        """
+
+        Parameters
+        ----------
+        ser :
+            
+
+        Returns
+        -------
+
+        """
         # GH#9322 check that series with incorrect dtypes don't have attr
         with pytest.raises(AttributeError, match="only use .dt accessor"):
             ser.dt
         assert not hasattr(ser, "dt")
 
     def test_dt_accessor_updates_on_inplace(self):
+        """ """
         s = Series(pd.date_range("2018-01-01", periods=10))
         s[2] = None
         return_value = s.fillna(pd.Timestamp("2018-01-01"), inplace=True)
@@ -631,6 +782,7 @@
         assert result[0] == result[2]
 
     def test_date_tz(self):
+        """ """
         # GH11757
         rng = pd.DatetimeIndex(
             ["2014-04-04 23:56", "2014-07-18 21:24", "2015-11-22 22:14"],
@@ -642,6 +794,17 @@
         tm.assert_series_equal(s.apply(lambda x: x.date()), expected)
 
     def test_dt_timetz_accessor(self, tz_naive_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+
+        Returns
+        -------
+
+        """
         # GH21358
         tz = maybe_get_tz(tz_naive_fixture)
 
@@ -656,6 +819,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_setitem_with_string_index(self):
+        """ """
         # GH 23451
         x = pd.Series([1, 2, 3], index=["Date", "b", "other"])
         x["Date"] = date.today()
@@ -663,6 +827,7 @@
         assert x["Date"] == date.today()
 
     def test_setitem_with_different_tz(self):
+        """ """
         # GH#24024
         ser = pd.Series(pd.date_range("2000", periods=2, tz="US/Central"))
         ser[0] = pd.Timestamp("2000", tz="US/Eastern")
@@ -688,6 +853,19 @@
         ],
     )
     def test_isocalendar(self, input_series, expected_output):
+        """
+
+        Parameters
+        ----------
+        input_series :
+            
+        expected_output :
+            
+
+        Returns
+        -------
+
+        """
         result = pd.to_datetime(pd.Series(input_series)).dt.isocalendar()
         expected_frame = pd.DataFrame(
             expected_output, columns=["year", "week", "day"], dtype="UInt32"
@@ -696,6 +874,7 @@
 
 
 def test_week_and_weekofyear_are_deprecated():
+    """ """
     # GH#33595 Deprecate week and weekofyear
     series = pd.to_datetime(pd.Series(["2020-01-01"]))
     with tm.assert_produces_warning(FutureWarning):
@@ -705,6 +884,7 @@
 
 
 def test_normalize_pre_epoch_dates():
+    """ """
     # GH: 36294
     s = pd.to_datetime(pd.Series(["1969-01-01 09:00:00", "2016-01-01 09:00:00"]))
     result = s.dt.normalize()
