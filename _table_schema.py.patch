# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/io/json/_table_schema.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/io/json/_table_schema.py
@@ -32,12 +32,14 @@
 
 
 def as_json_table_type(x: DtypeObj) -> str:
-    """
-    Convert a NumPy / pandas type to its corresponding json_table.
+    """Convert a NumPy / pandas type to its corresponding json_table.
 
     Parameters
     ----------
     x : np.dtype or ExtensionDtype
+        
+    x: DtypeObj :
+        
 
     Returns
     -------
@@ -48,7 +50,7 @@
     -----
     This table shows the relationship between NumPy / pandas dtypes,
     and Table Schema dtypes.
-
+    
     ==============  =================
     Pandas type     Table Schema type
     ==============  =================
@@ -80,7 +82,17 @@
 
 
 def set_default_names(data):
-    """Sets index names to 'index' for regular, or 'level_x' for Multi"""
+    """Sets index names to 'index' for regular, or 'level_x' for Multi
+
+    Parameters
+    ----------
+    data :
+        
+
+    Returns
+    -------
+
+    """
     if com.all_not_none(*data.index.names):
         nms = data.index.names
         if len(nms) == 1 and data.index.name == "index":
@@ -102,6 +114,17 @@
 
 
 def convert_pandas_type_to_json_field(arr):
+    """
+
+    Parameters
+    ----------
+    arr :
+        
+
+    Returns
+    -------
+
+    """
     dtype = arr.dtype
     if arr.name is None:
         name = "values"
@@ -126,17 +149,17 @@
 
 
 def convert_json_field_to_pandas_type(field):
-    """
-    Converts a JSON field descriptor into its corresponding NumPy / pandas type
-
-    Parameters
-    ----------
-    field
+    """Converts a JSON field descriptor into its corresponding NumPy / pandas type
+
+    Parameters
+    ----------
+    field :
         A JSON field descriptor
 
     Returns
     -------
     dtype
+        
 
     Raises
     ------
@@ -195,12 +218,12 @@
     primary_key: Optional[bool] = None,
     version: bool = True,
 ) -> Dict[str, JSONSerializable]:
-    """
-    Create a Table schema from ``data``.
+    """Create a Table schema from ``data``.
 
     Parameters
     ----------
     data : Series, DataFrame
+        
     index : bool, default True
         Whether to include ``data.index`` in the schema.
     primary_key : bool or None, default True
@@ -210,10 +233,19 @@
     version : bool, default True
         Whether to include a field `pandas_version` with the version
         of pandas that generated the schema.
+    data: FrameOrSeries :
+        
+    index: bool :
+         (Default value = True)
+    primary_key: Optional[bool] :
+         (Default value = None)
+    version: bool :
+         (Default value = True)
 
     Returns
     -------
     schema : dict
+        
 
     Notes
     -----
@@ -222,11 +254,10 @@
     conversion types.
     Timedeltas as converted to ISO8601 duration format with
     9 decimal places after the seconds field for nanosecond precision.
-
+    
     Categoricals are converted to the `any` dtype, and use the `enum` field
     constraint to list the allowed values. The `ordered` attribute is included
     in an `ordered` field.
-
     Examples
     --------
     >>> df = pd.DataFrame(
@@ -279,8 +310,7 @@
 
 
 def parse_table_schema(json, precise_float):
-    """
-    Builds a DataFrame from a given schema
+    """Builds a DataFrame from a given schema
 
     Parameters
     ----------
@@ -293,6 +323,7 @@
     Returns
     -------
     df : DataFrame
+        
 
     Raises
     ------
@@ -308,7 +339,6 @@
         applies to any strings beginning with 'level_'. Therefore, an
         :class:`Index` name of 'index'  and :class:`MultiIndex` names starting
         with 'level_' are not supported.
-
     See Also
     --------
     build_table_schema : Inverse function.
