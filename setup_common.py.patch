# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/setup_common.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/setup_common.py
@@ -43,10 +43,23 @@
 C_API_VERSION = 0x0000000d
 
 class MismatchCAPIWarning(Warning):
+    """ """
     pass
 
 def is_released(config):
-    """Return True if a released version of numpy is detected."""
+    """
+
+    Parameters
+    ----------
+    config :
+        
+
+    Returns
+    -------
+    type
+        
+
+    """
     from distutils.version import LooseVersion
 
     v = config.get_version('../version.py')
@@ -58,11 +71,19 @@
     return True
 
 def get_api_versions(apiversion, codegen_dir):
-    """
-    Return current C API checksum and the recorded checksum.
-
-    Return current C API checksum and the recorded checksum for the given
-    version of the C API version.
+    """Return current C API checksum and the recorded checksum.
+
+    Parameters
+    ----------
+    apiversion :
+        
+    codegen_dir :
+        
+
+    Returns
+    -------
+    type
+        version of the C API version.
 
     """
     # Compute the hash of the current API as defined in the .txt files in
@@ -79,7 +100,19 @@
     return curapi_hash, apis_hash[apiversion]
 
 def check_api_version(apiversion, codegen_dir):
-    """Emits a MismatchCAPIWarning if the C API version needs updating."""
+    """Emits a MismatchCAPIWarning if the C API version needs updating.
+
+    Parameters
+    ----------
+    apiversion :
+        
+    codegen_dir :
+        
+
+    Returns
+    -------
+
+    """
     curapi_hash, api_hash = get_api_versions(apiversion, codegen_dir)
 
     # If different hash, it means that the api .txt files in
@@ -211,18 +244,62 @@
     ]
 
 def fname2def(name):
+    """
+
+    Parameters
+    ----------
+    name :
+        
+
+    Returns
+    -------
+
+    """
     return "HAVE_%s" % name.upper()
 
 def sym2def(symbol):
+    """
+
+    Parameters
+    ----------
+    symbol :
+        
+
+    Returns
+    -------
+
+    """
     define = symbol.replace(' ', '')
     return define.upper()
 
 def type2def(symbol):
+    """
+
+    Parameters
+    ----------
+    symbol :
+        
+
+    Returns
+    -------
+
+    """
     define = symbol.replace(' ', '_')
     return define.upper()
 
 # Code to detect long double representation taken from MPFR m4 macro
 def check_long_double_representation(cmd):
+    """
+
+    Parameters
+    ----------
+    cmd :
+        
+
+    Returns
+    -------
+
+    """
     cmd._check_compiler()
     body = LONG_DOUBLE_REPRESENTATION_SRC % {'type': 'long double'}
 
@@ -297,13 +374,8 @@
 
     Returns
     -------
-    out : seq
-        list of lines of od output
-
-    Note
-    ----
-    We only implement enough to get the necessary information for long double
-    representation, this is not intended as a compatible replacement for od.
+
+    
     """
     out = []
     with open(filename, 'rb') as fid:
@@ -337,7 +409,17 @@
 
 def long_double_representation(lines):
     """Given a binary dump as given by GNU od -b, look for long double
-    representation."""
+    representation.
+
+    Parameters
+    ----------
+    lines :
+        
+
+    Returns
+    -------
+
+    """
 
     # Read contains a list of 32 items, each item is a byte (in octal
     # representation, as a string). We 'slide' over the output until read is of
@@ -395,11 +477,10 @@
 
 
 def check_for_right_shift_internal_compiler_error(cmd):
-    """
-    On our arm CI, this fails with an internal compilation error
-
+    """On our arm CI, this fails with an internal compilation error
+    
     The failure looks like the following, and can be reproduced on ARM64 GCC 5.4:
-
+    
         <source>: In function 'right_shift':
         <source>:4:20: internal compiler error: in expand_shift_1, at expmed.c:2349
                ip1[i] = ip1[i] >> in2;
@@ -408,9 +489,18 @@
         with preprocessed source if appropriate.
         See <http://gcc.gnu.org/bugs.html> for instructions.
         Compiler returned: 1
-
+    
     This function returns True if this compiler bug is present, and we need to
     turn off optimization for the function
+
+    Parameters
+    ----------
+    cmd :
+        
+
+    Returns
+    -------
+
     """
     cmd._check_compiler()
     has_optimize = cmd.try_compile(textwrap.dedent("""\
