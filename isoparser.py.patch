# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/dateutil/parser/isoparser.py
+++ b/..//venv/lib/python3.8/site-packages/dateutil/parser/isoparser.py
@@ -20,8 +20,34 @@
 
 
 def _takes_ascii(f):
+    """
+
+    Parameters
+    ----------
+    f :
+        
+
+    Returns
+    -------
+
+    """
     @wraps(f)
     def func(self, str_in, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        str_in :
+            
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         # If it's a stream, read the whole thing
         str_in = getattr(str_in, 'read', lambda: str_in)()
 
@@ -41,12 +67,19 @@
 
 class isoparser(object):
     def __init__(self, sep=None):
-        """
-        :param sep:
-            A single character that separates date and time portions. If
-            ``None``, the parser will accept any single character.
-            For strict ISO-8601 adherence, pass ``'T'``.
-        """
+    """
+
+    Parameters
+    ----------
+    sep :
+        A single character that separates date and time portions. If
+        ``None``, the parser will accept any single character.
+        For strict ISO-8601 adherence, pass ``'T'``.
+
+    Returns
+    -------
+
+    """
         if sep is not None:
             if (len(sep) != 1 or ord(sep) >= 128 or sep in '0123456789'):
                 raise ValueError('Separator must be a single, non-numeric ' +
@@ -58,69 +91,72 @@
 
     @_takes_ascii
     def isoparse(self, dt_str):
-        """
-        Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.
-
+        """Parse an ISO-8601 datetime string into a :class:`datetime.datetime`.
+        
         An ISO-8601 datetime string consists of a date portion, followed
         optionally by a time portion - the date and time portions are separated
         by a single character separator, which is ``T`` in the official
         standard. Incomplete date formats (such as ``YYYY-MM``) may *not* be
         combined with a time portion.
-
+        
         Supported date formats are:
-
+        
         Common:
-
+        
         - ``YYYY``
         - ``YYYY-MM`` or ``YYYYMM``
         - ``YYYY-MM-DD`` or ``YYYYMMDD``
-
+        
         Uncommon:
-
+        
         - ``YYYY-Www`` or ``YYYYWww`` - ISO week (day defaults to 0)
         - ``YYYY-Www-D`` or ``YYYYWwwD`` - ISO week and day
-
+        
         The ISO week and day numbering follows the same logic as
         :func:`datetime.date.isocalendar`.
-
+        
         Supported time formats are:
-
+        
         - ``hh``
         - ``hh:mm`` or ``hhmm``
         - ``hh:mm:ss`` or ``hhmmss``
         - ``hh:mm:ss.ssssss`` (Up to 6 sub-second digits)
-
+        
         Midnight is a special case for `hh`, as the standard supports both
         00:00 and 24:00 as a representation. The decimal separator can be
         either a dot or a comma.
-
-
+        
+        
         .. caution::
-
+        
             Support for fractional components other than seconds is part of the
             ISO-8601 standard, but is not currently implemented in this parser.
-
+        
         Supported time zone offset formats are:
-
+        
         - `Z` (UTC)
         - `±HH:MM`
         - `±HHMM`
         - `±HH`
-
+        
         Offsets will be represented as :class:`dateutil.tz.tzoffset` objects,
         with the exception of UTC, which will be represented as
         :class:`dateutil.tz.tzutc`. Time zone offsets equivalent to UTC (such
         as `+00:00`) will also be represented as :class:`dateutil.tz.tzutc`.
 
-        :param dt_str:
+        Parameters
+        ----------
+        dt_str :
             A string or stream containing only an ISO-8601 datetime string
 
-        :return:
+        Returns
+        -------
+        type
             Returns a :class:`datetime.datetime` representing the string.
             Unspecified components default to their lowest value.
-
-        .. warning::
-
+            
+            .. warning::
+            
             As of version 2.7.0, the strictness of the parser should not be
             considered a stable part of the contract. Any valid ISO-8601 string
             that parses correctly with the default settings will continue to
@@ -128,8 +164,9 @@
             currently fail (e.g. ``2017-01-01T00:00+00:00:00``) are not
             guaranteed to continue failing in future versions if they encode
             a valid date.
-
-        .. versionadded:: 2.7.0
+            
+            .. versionadded:: 2.7.0
+
         """
         components, pos = self._parse_isodate(dt_str)
 
@@ -147,14 +184,18 @@
 
     @_takes_ascii
     def parse_isodate(self, datestr):
-        """
-        Parse the date portion of an ISO string.
-
-        :param datestr:
+        """Parse the date portion of an ISO string.
+
+        Parameters
+        ----------
+        datestr :
             The string portion of an ISO string, without a separator
 
-        :return:
+        Returns
+        -------
+        type
             Returns a :class:`datetime.date` object
+
         """
         components, pos = self._parse_isodate(datestr)
         if pos < len(datestr):
@@ -164,14 +205,18 @@
 
     @_takes_ascii
     def parse_isotime(self, timestr):
-        """
-        Parse the time portion of an ISO string.
-
-        :param timestr:
+        """Parse the time portion of an ISO string.
+
+        Parameters
+        ----------
+        timestr :
             The time portion of an ISO string, without a separator
 
-        :return:
+        Returns
+        -------
+        type
             Returns a :class:`datetime.time` object
+
         """
         components = self._parse_isotime(timestr)
         if components[0] == 24:
@@ -180,21 +225,24 @@
 
     @_takes_ascii
     def parse_tzstr(self, tzstr, zero_as_utc=True):
-        """
-        Parse a valid ISO time zone string.
-
+        """Parse a valid ISO time zone string.
+        
         See :func:`isoparser.isoparse` for details on supported formats.
 
-        :param tzstr:
+        Parameters
+        ----------
+        tzstr :
             A string representing an ISO time zone offset
-
-        :param zero_as_utc:
-            Whether to return :class:`dateutil.tz.tzutc` for zero-offset zones
-
-        :return:
+        zero_as_utc :
+            Whether to return :class:`dateutil.tz.tzutc` for zero-offset zones (Default value = True)
+
+        Returns
+        -------
+        type
             Returns :class:`dateutil.tz.tzoffset` for offsets and
             :class:`dateutil.tz.tzutc` for ``Z`` and (if ``zero_as_utc`` is
             specified) offsets equivalent to UTC.
+
         """
         return self._parse_tzstr(tzstr, zero_as_utc=zero_as_utc)
 
@@ -204,12 +252,34 @@
     _FRACTION_REGEX = re.compile(b'[\\.,]([0-9]+)')
 
     def _parse_isodate(self, dt_str):
+        """
+
+        Parameters
+        ----------
+        dt_str :
+            
+
+        Returns
+        -------
+
+        """
         try:
             return self._parse_isodate_common(dt_str)
         except ValueError:
             return self._parse_isodate_uncommon(dt_str)
 
     def _parse_isodate_common(self, dt_str):
+        """
+
+        Parameters
+        ----------
+        dt_str :
+            
+
+        Returns
+        -------
+
+        """
         len_str = len(dt_str)
         components = [1, 1, 1]
 
@@ -251,6 +321,17 @@
         return components, pos + 2
 
     def _parse_isodate_uncommon(self, dt_str):
+        """
+
+        Parameters
+        ----------
+        dt_str :
+            
+
+        Returns
+        -------
+
+        """
         if len(dt_str) < 4:
             raise ValueError('ISO string too short')
 
@@ -295,23 +376,25 @@
         return components, pos
 
     def _calculate_weekdate(self, year, week, day):
-        """
-        Calculate the day of corresponding to the ISO year-week-day calendar.
-
+        """Calculate the day of corresponding to the ISO year-week-day calendar.
+        
         This function is effectively the inverse of
         :func:`datetime.date.isocalendar`.
 
-        :param year:
+        Parameters
+        ----------
+        year :
             The year in the ISO calendar
-
-        :param week:
+        week :
             The week in the ISO calendar - range is [1, 53]
-
-        :param day:
+        day :
             The day in the ISO calendar - range is [1 (MON), 7 (SUN)]
 
-        :return:
+        Returns
+        -------
+        type
             Returns a :class:`datetime.date`
+
         """
         if not 0 < week < 54:
             raise ValueError('Invalid week: {}'.format(week))
@@ -328,6 +411,17 @@
         return week_1 + timedelta(days=week_offset)
 
     def _parse_isotime(self, timestr):
+        """
+
+        Parameters
+        ----------
+        timestr :
+            
+
+        Returns
+        -------
+
+        """
         len_str = len(timestr)
         components = [0, 0, 0, 0, None]
         pos = 0
@@ -376,6 +470,19 @@
         return components
 
     def _parse_tzstr(self, tzstr, zero_as_utc=True):
+        """
+
+        Parameters
+        ----------
+        tzstr :
+            
+        zero_as_utc :
+             (Default value = True)
+
+        Returns
+        -------
+
+        """
         if tzstr == b'Z' or tzstr == b'z':
             return tz.UTC
 
