# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/reshape/merge/test_merge.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/reshape/merge/test_merge.py
@@ -35,6 +35,19 @@
 
 
 def get_test_data(ngroups=NGROUPS, n=N):
+    """
+
+    Parameters
+    ----------
+    ngroups :
+         (Default value = NGROUPS)
+    n :
+         (Default value = N)
+
+    Returns
+    -------
+
+    """
     unique_groups = list(range(ngroups))
     arr = np.asarray(np.tile(unique_groups, n // ngroups))
 
@@ -46,6 +59,7 @@
 
 
 def get_series():
+    """ """
     return [
         pd.Series([1], dtype="int64"),
         pd.Series([1], dtype="Int64"),
@@ -58,6 +72,7 @@
 
 
 def get_series_na():
+    """ """
     return [
         pd.Series([np.nan], dtype="Int64"),
         pd.Series([np.nan], dtype="float"),
@@ -68,33 +83,69 @@
 
 @pytest.fixture(params=get_series(), ids=lambda x: x.dtype.name)
 def series_of_dtype(request):
-    """
-    A parametrized fixture returning a variety of Series of different
+    """A parametrized fixture returning a variety of Series of different
     dtypes
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
     """
     return request.param
 
 
 @pytest.fixture(params=get_series(), ids=lambda x: x.dtype.name)
 def series_of_dtype2(request):
-    """
-    A duplicate of the series_of_dtype fixture, so that it can be used
+    """A duplicate of the series_of_dtype fixture, so that it can be used
     twice by a single function
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
     """
     return request.param
 
 
 @pytest.fixture(params=get_series_na(), ids=lambda x: x.dtype.name)
 def series_of_dtype_all_na(request):
-    """
-    A parametrized fixture returning a variety of Series with all NA
+    """A parametrized fixture returning a variety of Series with all NA
     values
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
     """
     return request.param
 
 
 class TestMerge:
+    """ """
     def setup_method(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         # aggregate multiple columns
         self.df = DataFrame(
             {
@@ -122,6 +173,7 @@
         self.right = DataFrame({"v2": np.random.randn(4)}, index=["d", "b", "c", "a"])
 
     def test_merge_inner_join_empty(self):
+        """ """
         # GH 15328
         df_empty = pd.DataFrame()
         df_a = pd.DataFrame({"a": [1, 2]}, index=[0, 1], dtype="int64")
@@ -130,11 +182,13 @@
         tm.assert_frame_equal(result, expected)
 
     def test_merge_common(self):
+        """ """
         joined = merge(self.df, self.df2)
         exp = merge(self.df, self.df2, on=["key1", "key2"])
         tm.assert_frame_equal(joined, exp)
 
     def test_merge_non_string_columns(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/17962
         # Checks that method runs for non string column names
         left = pd.DataFrame(
@@ -147,6 +201,7 @@
         tm.assert_frame_equal(expected, result)
 
     def test_merge_index_as_on_arg(self):
+        """ """
         # GH14355
 
         left = self.df.set_index("key1")
@@ -156,6 +211,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_merge_index_singlekey_right_vs_left(self):
+        """ """
         left = DataFrame(
             {"key": ["a", "b", "c", "d", "e", "e", "a"], "v1": np.random.randn(7)}
         )
@@ -178,6 +234,7 @@
         tm.assert_frame_equal(merged1, merged2.loc[:, merged1.columns])
 
     def test_merge_index_singlekey_inner(self):
+        """ """
         left = DataFrame(
             {"key": ["a", "b", "c", "d", "e", "e", "a"], "v1": np.random.randn(7)}
         )
@@ -193,6 +250,7 @@
         tm.assert_frame_equal(result, expected.loc[:, result.columns])
 
     def test_merge_misspecified(self):
+        """ """
         msg = "Must pass right_on or right_index=True"
         with pytest.raises(pd.errors.MergeError, match=msg):
             merge(self.left, self.right, left_index=True)
@@ -212,6 +270,7 @@
             merge(self.df, self.df2, left_on=["key1"], right_on=["key1", "key2"])
 
     def test_index_and_on_parameters_confusion(self):
+        """ """
         msg = "right_index parameter must be of type bool, not <class 'list'>"
         with pytest.raises(ValueError, match=msg):
             merge(
@@ -240,6 +299,7 @@
             )
 
     def test_merge_overlap(self):
+        """ """
         merged = merge(self.left, self.left, on="key")
         exp_len = (self.left["key"].value_counts() ** 2).sum()
         assert len(merged) == exp_len
@@ -247,6 +307,7 @@
         assert "v1_y" in merged
 
     def test_merge_different_column_key_names(self):
+        """ """
         left = DataFrame({"lkey": ["foo", "bar", "baz", "foo"], "value": [1, 2, 3, 4]})
         right = DataFrame({"rkey": ["foo", "bar", "qux", "foo"], "value": [5, 6, 7, 8]})
 
@@ -267,6 +328,7 @@
         tm.assert_series_equal(merged["value_y"], exp)
 
     def test_merge_copy(self):
+        """ """
         left = DataFrame({"a": 0, "b": 1}, index=range(10))
         right = DataFrame({"c": "foo", "d": "bar"}, index=range(10))
 
@@ -279,6 +341,7 @@
         assert (right["d"] == "bar").all()
 
     def test_merge_nocopy(self):
+        """ """
         left = DataFrame({"a": 0, "b": 1}, index=range(10))
         right = DataFrame({"c": "foo", "d": "bar"}, index=range(10))
 
@@ -291,6 +354,7 @@
         assert (right["d"] == "peekaboo").all()
 
     def test_intelligently_handle_join_key(self):
+        """ """
         # #733, be a bit more 1337 about not returning unconsolidated DataFrame
 
         left = DataFrame(
@@ -310,6 +374,7 @@
         tm.assert_frame_equal(joined, expected)
 
     def test_merge_join_key_dtype_cast(self):
+        """ """
         # #8596
 
         df1 = DataFrame({"key": [1], "v1": [10]})
@@ -333,6 +398,7 @@
         assert df["key_0"].dtype == "int64"
 
     def test_handle_join_key_pass_array(self):
+        """ """
         left = DataFrame(
             {"key": [1, 1, 2, 2, 3], "value": np.arange(5)}, columns=["value", "key"]
         )
@@ -364,6 +430,7 @@
         tm.assert_series_equal(merged["key_0"], Series(key, name="key_0"))
 
     def test_no_overlap_more_informative_error(self):
+        """ """
         dt = datetime.now()
         df1 = DataFrame({"x": ["a"]}, index=[dt])
 
@@ -379,6 +446,7 @@
             merge(df1, df2)
 
     def test_merge_non_unique_indexes(self):
+        """ """
 
         dt = datetime(2012, 5, 1)
         dt2 = datetime(2012, 5, 2)
@@ -401,6 +469,7 @@
         _check_merge(df1, df2)
 
     def test_merge_non_unique_index_many_to_many(self):
+        """ """
         dt = datetime(2012, 5, 1)
         dt2 = datetime(2012, 5, 2)
         dt3 = datetime(2012, 5, 3)
@@ -411,6 +480,7 @@
         _check_merge(df1, df2)
 
     def test_left_merge_empty_dataframe(self):
+        """ """
         left = DataFrame({"key": [1], "value": [2]})
         right = DataFrame({"key": []})
 
@@ -430,6 +500,19 @@
         ],
     )
     def test_merge_left_empty_right_empty(self, join_type, kwarg):
+        """
+
+        Parameters
+        ----------
+        join_type :
+            
+        kwarg :
+            
+
+        Returns
+        -------
+
+        """
         # GH 10824
         left = pd.DataFrame(columns=["a", "b", "c"])
         right = pd.DataFrame(columns=["x", "y", "z"])
@@ -444,6 +527,7 @@
         tm.assert_frame_equal(result, exp_in)
 
     def test_merge_left_empty_right_notempty(self):
+        """ """
         # GH 10824
         left = pd.DataFrame(columns=["a", "b", "c"])
         right = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=["x", "y", "z"])
@@ -464,12 +548,38 @@
         exp_in.index = exp_in.index.astype(object)
 
         def check1(exp, kwarg):
+            """
+
+            Parameters
+            ----------
+            exp :
+                
+            kwarg :
+                
+
+            Returns
+            -------
+
+            """
             result = pd.merge(left, right, how="inner", **kwarg)
             tm.assert_frame_equal(result, exp)
             result = pd.merge(left, right, how="left", **kwarg)
             tm.assert_frame_equal(result, exp)
 
         def check2(exp, kwarg):
+            """
+
+            Parameters
+            ----------
+            exp :
+                
+            kwarg :
+                
+
+            Returns
+            -------
+
+            """
             result = pd.merge(left, right, how="right", **kwarg)
             tm.assert_frame_equal(result, exp)
             result = pd.merge(left, right, how="outer", **kwarg)
@@ -493,6 +603,7 @@
         check2(exp_out, kwarg)
 
     def test_merge_left_notempty_right_empty(self):
+        """ """
         # GH 10824
         left = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], columns=["a", "b", "c"])
         right = pd.DataFrame(columns=["x", "y", "z"])
@@ -513,12 +624,38 @@
         exp_in.index = exp_in.index.astype(object)
 
         def check1(exp, kwarg):
+            """
+
+            Parameters
+            ----------
+            exp :
+                
+            kwarg :
+                
+
+            Returns
+            -------
+
+            """
             result = pd.merge(left, right, how="inner", **kwarg)
             tm.assert_frame_equal(result, exp)
             result = pd.merge(left, right, how="right", **kwarg)
             tm.assert_frame_equal(result, exp)
 
         def check2(exp, kwarg):
+            """
+
+            Parameters
+            ----------
+            exp :
+                
+            kwarg :
+                
+
+            Returns
+            -------
+
+            """
             result = pd.merge(left, right, how="left", **kwarg)
             tm.assert_frame_equal(result, exp)
             result = pd.merge(left, right, how="outer", **kwarg)
@@ -534,6 +671,19 @@
                 check2(exp_out, kwarg)
 
     def test_merge_empty_frame(self, series_of_dtype, series_of_dtype2):
+        """
+
+        Parameters
+        ----------
+        series_of_dtype :
+            
+        series_of_dtype2 :
+            
+
+        Returns
+        -------
+
+        """
         # GH 25183
         df = pd.DataFrame(
             {"key": series_of_dtype, "value": series_of_dtype2},
@@ -552,6 +702,19 @@
         tm.assert_frame_equal(actual, expected)
 
     def test_merge_all_na_column(self, series_of_dtype, series_of_dtype_all_na):
+        """
+
+        Parameters
+        ----------
+        series_of_dtype :
+            
+        series_of_dtype_all_na :
+            
+
+        Returns
+        -------
+
+        """
         # GH 25183
         df_left = pd.DataFrame(
             {"key": series_of_dtype, "value": series_of_dtype_all_na},
@@ -573,6 +736,7 @@
         tm.assert_frame_equal(actual, expected)
 
     def test_merge_nosort(self):
+        """ """
         # GH#2098, TODO: anything to do?
 
         d = {
@@ -603,6 +767,7 @@
         assert (df.var3.unique() == result.var3.unique()).all()
 
     def test_merge_nan_right(self):
+        """ """
         df1 = DataFrame({"i1": [0, 1], "i2": [0, 1]})
         df2 = DataFrame({"i1": [0], "i3": [0]})
         result = df1.join(df2, on="i1", rsuffix="_")
@@ -635,9 +800,12 @@
         tm.assert_frame_equal(result, expected)
 
     def test_merge_type(self):
+        """ """
         class NotADataFrame(DataFrame):
+            """ """
             @property
             def _constructor(self):
+                """ """
                 return NotADataFrame
 
         nad = NotADataFrame(self.df)
@@ -646,6 +814,7 @@
         assert isinstance(result, NotADataFrame)
 
     def test_join_append_timedeltas(self):
+        """ """
         # timedelta64 issues with join/merge
         # GH 5695
 
@@ -675,6 +844,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_other_datetime_unit(self):
+        """ """
         # GH 13389
         df1 = pd.DataFrame({"entity_id": [101, 102]})
         s = pd.Series([None, None], index=[101, 102], name="days")
@@ -706,6 +876,17 @@
 
     @pytest.mark.parametrize("unit", ["D", "h", "m", "s", "ms", "us", "ns"])
     def test_other_timedelta_unit(self, unit):
+        """
+
+        Parameters
+        ----------
+        unit :
+            
+
+        Returns
+        -------
+
+        """
         # GH 13389
         df1 = pd.DataFrame({"entity_id": [101, 102]})
         s = pd.Series([None, None], index=[101, 102], name="days")
@@ -723,6 +904,7 @@
         tm.assert_frame_equal(result, exp)
 
     def test_overlapping_columns_error_message(self):
+        """ """
         df = DataFrame({"key": [1, 2, 3], "v1": [4, 5, 6], "v2": [7, 8, 9]})
         df2 = DataFrame({"key": [1, 2, 3], "v1": [4, 5, 6], "v2": [7, 8, 9]})
 
@@ -747,6 +929,7 @@
             merge(df, df2)
 
     def test_merge_on_datetime64tz(self):
+        """ """
 
         # GH11405
         left = pd.DataFrame(
@@ -799,6 +982,7 @@
         assert result["value_y"].dtype == "datetime64[ns, US/Eastern]"
 
     def test_merge_on_datetime64tz_empty(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/25014
         dtz = pd.DatetimeTZDtype(tz="UTC")
         right = pd.DataFrame(
@@ -824,6 +1008,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_merge_datetime64tz_with_dst_transition(self):
+        """ """
         # GH 18885
         df1 = pd.DataFrame(
             pd.date_range("2017-10-29 01:00", periods=4, freq="H", tz="Europe/Madrid"),
@@ -856,6 +1041,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_merge_non_unique_period_index(self):
+        """ """
         # GH #16871
         index = pd.period_range("2016-01-01", periods=16, freq="M")
         df = DataFrame(list(range(len(index))), index=index, columns=["pnum"])
@@ -869,6 +1055,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_merge_on_periods(self):
+        """ """
         left = pd.DataFrame(
             {"key": pd.period_range("20151010", periods=2, freq="D"), "value": [1, 2]}
         )
@@ -911,6 +1098,7 @@
         assert result["value_y"].dtype == "Period[D]"
 
     def test_indicator(self):
+        """ """
         # PR #10054. xref #7412 and closes #8790.
         df1 = DataFrame(
             {"col1": [0, 1], "col_conflict": [1, 2], "col_left": ["a", "b"]}
@@ -1056,6 +1244,7 @@
         tm.assert_frame_equal(test5, hand_coded_result)
 
     def test_validation(self):
+        """ """
         left = DataFrame(
             {"a": ["a", "b", "c", "d"], "b": ["cat", "dog", "weasel", "horse"]},
             index=range(4),
@@ -1242,6 +1431,7 @@
         tm.assert_frame_equal(result, expected_multi)
 
     def test_merge_two_empty_df_no_division_error(self):
+        """ """
         # GH17776, PR #17846
         a = pd.DataFrame({"a": [], "b": [], "c": []})
         with np.errstate(divide="raise"):
@@ -1283,6 +1473,21 @@
         ],
     )
     def test_merge_on_index_with_more_values(self, how, index, expected_index):
+        """
+
+        Parameters
+        ----------
+        how :
+            
+        index :
+            
+        expected_index :
+            
+
+        Returns
+        -------
+
+        """
         # GH 24212
         # pd.merge gets [0, 1, 2, -1, -1, -1] as left_indexer, ensure that
         # -1 is interpreted as a missing value instead of the last element
@@ -1304,6 +1509,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_merge_right_index_right(self):
+        """ """
         # Note: the expected output here is probably incorrect.
         # See https://github.com/pandas-dev/pandas/issues/17257 for more.
         # We include this as a regression test for GH-24897.
@@ -1320,6 +1526,17 @@
 
     @pytest.mark.parametrize("how", ["left", "right"])
     def test_merge_preserves_row_order(self, how):
+        """
+
+        Parameters
+        ----------
+        how :
+            
+
+        Returns
+        -------
+
+        """
         # GH 27453
         left_df = pd.DataFrame({"animal": ["dog", "pig"], "max_speed": [40, 11]})
         right_df = pd.DataFrame({"animal": ["quetzal", "pig"], "max_speed": [80, 11]})
@@ -1333,6 +1550,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_merge_take_missing_values_from_index_of_other_dtype(self):
+        """ """
         # GH 24212
         left = pd.DataFrame(
             {
@@ -1356,6 +1574,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_merge_readonly(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/27943
         data1 = pd.DataFrame(
             np.arange(20).reshape((4, 5)) + 1, columns=["a", "b", "c", "d", "e"]
@@ -1369,6 +1588,19 @@
 
 
 def _check_merge(x, y):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+    y :
+        
+
+    Returns
+    -------
+
+    """
     for how in ["inner", "left", "outer"]:
         result = x.join(y, how=how)
 
@@ -1380,10 +1612,22 @@
 
 
 class TestMergeDtypes:
+    """ """
     @pytest.mark.parametrize(
         "right_vals", [["foo", "bar"], Series(["foo", "bar"]).astype("category")]
     )
     def test_different(self, right_vals):
+        """
+
+        Parameters
+        ----------
+        right_vals :
+            
+
+        Returns
+        -------
+
+        """
 
         left = DataFrame(
             {
@@ -1406,6 +1650,19 @@
     @pytest.mark.parametrize("d1", [np.int64, np.int32, np.int16, np.int8, np.uint8])
     @pytest.mark.parametrize("d2", [np.int64, np.float64, np.float32, np.float16])
     def test_join_multi_dtypes(self, d1, d2):
+        """
+
+        Parameters
+        ----------
+        d1 :
+            
+        d2 :
+            
+
+        Returns
+        -------
+
+        """
 
         dtype1 = np.dtype(d1)
         dtype2 = np.dtype(d2)
@@ -1446,6 +1703,21 @@
         ],
     )
     def test_merge_on_ints_floats(self, int_vals, float_vals, exp_vals):
+        """
+
+        Parameters
+        ----------
+        int_vals :
+            
+        float_vals :
+            
+        exp_vals :
+            
+
+        Returns
+        -------
+
+        """
         # GH 16572
         # Check that float column is not cast to object if
         # merging on float and int columns
@@ -1460,6 +1732,7 @@
         tm.assert_frame_equal(result, expected[["Y", "X"]])
 
     def test_merge_key_dtype_cast(self):
+        """ """
         # GH 17044
         df1 = DataFrame({"key": [1.0, 2.0], "v1": [10, 20]}, columns=["key", "v1"])
         df2 = DataFrame({"key": [2], "v2": [200]}, columns=["key", "v2"])
@@ -1471,6 +1744,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_merge_on_ints_floats_warning(self):
+        """ """
         # GH 16572
         # merge will produce a warning when merging on int and
         # float columns where the float values are not exactly
@@ -1495,6 +1769,7 @@
             tm.assert_frame_equal(result, expected[["Y", "X"]])
 
     def test_merge_incompat_infer_boolean_object(self):
+        """ """
         # GH21119: bool + object bool merge OK
         df1 = DataFrame({"key": Series([True, False], dtype=object)})
         df2 = DataFrame({"key": [True, False]})
@@ -1527,6 +1802,19 @@
         ],
     )
     def test_merge_incompat_dtypes_are_ok(self, df1_vals, df2_vals):
+        """
+
+        Parameters
+        ----------
+        df1_vals :
+            
+        df2_vals :
+            
+
+        Returns
+        -------
+
+        """
         # these are explicitly allowed incompat merges, that pass thru
         # the result type is dependent on if the values on the rhs are
         # inferred, otherwise these will be coerced to object
@@ -1561,6 +1849,19 @@
         ],
     )
     def test_merge_incompat_dtypes_error(self, df1_vals, df2_vals):
+        """
+
+        Parameters
+        ----------
+        df1_vals :
+            
+        df2_vals :
+            
+
+        Returns
+        -------
+
+        """
         # GH 9780, GH 15800
         # Raise a ValueError when a user tries to merge on
         # dtypes that are incompatible (e.g., obj and int/float)
@@ -1590,6 +1891,7 @@
 
 @pytest.fixture
 def left():
+    """ """
     np.random.seed(1234)
     return DataFrame(
         {
@@ -1603,6 +1905,7 @@
 
 @pytest.fixture
 def right():
+    """ """
     np.random.seed(1234)
     return DataFrame(
         {"X": Series(["foo", "bar"]).astype(CDT(["foo", "bar"])), "Z": [1, 2]}
@@ -1610,7 +1913,19 @@
 
 
 class TestMergeCategorical:
+    """ """
     def test_identical(self, left):
+        """
+
+        Parameters
+        ----------
+        left :
+            
+
+        Returns
+        -------
+
+        """
         # merging on the same, should preserve dtypes
         merged = pd.merge(left, left, on="X")
         result = merged.dtypes.sort_index()
@@ -1621,6 +1936,19 @@
         tm.assert_series_equal(result, expected)
 
     def test_basic(self, left, right):
+        """
+
+        Parameters
+        ----------
+        left :
+            
+        right :
+            
+
+        Returns
+        -------
+
+        """
         # we have matching Categorical dtypes in X
         # so should preserve the merged column
         merged = pd.merge(left, right, on="X")
@@ -1632,6 +1960,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_merge_categorical(self):
+        """ """
         # GH 9426
 
         right = DataFrame(
@@ -1675,6 +2004,7 @@
         tm.assert_frame_equal(result, expected)
 
     def tests_merge_categorical_unordered_equal(self):
+        """ """
         # GH-19551
         df1 = DataFrame(
             {
@@ -1700,6 +2030,19 @@
         tm.assert_frame_equal(result, expected)
 
     def test_other_columns(self, left, right):
+        """
+
+        Parameters
+        ----------
+        left :
+            
+        right :
+            
+
+        Returns
+        -------
+
+        """
         # non-merge columns should preserve if possible
         right = right.assign(Z=right.Z.astype("category"))
 
@@ -1724,6 +2067,23 @@
         ],
     )
     def test_dtype_on_merged_different(self, change, join_type, left, right):
+        """
+
+        Parameters
+        ----------
+        change :
+            
+        join_type :
+            
+        left :
+            
+        right :
+            
+
+        Returns
+        -------
+
+        """
         # our merging columns, X now has 2 different dtypes
         # so we must be object as a result
 
@@ -1741,6 +2101,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_self_join_multiple_categories(self):
+        """ """
         # GH 16767
         # non-duplicates should work with multiple categories
         m = 5
@@ -1781,6 +2142,7 @@
         tm.assert_frame_equal(result, df)
 
     def test_dtype_on_categorical_dates(self):
+        """ """
         # GH 16900
         # dates should not be coerced to ints
 
@@ -1823,6 +2185,23 @@
     def test_merging_with_bool_or_int_cateorical_column(
         self, category_column, categories, expected_categories, ordered
     ):
+        """
+
+        Parameters
+        ----------
+        category_column :
+            
+        categories :
+            
+        expected_categories :
+            
+        ordered :
+            
+
+        Returns
+        -------
+
+        """
         # GH 17187
         # merging with a boolean/int categorical column
         df1 = pd.DataFrame({"id": [1, 2, 3, 4], "cat": category_column})
@@ -1836,6 +2215,7 @@
         tm.assert_frame_equal(expected, result)
 
     def test_merge_on_int_array(self):
+        """ """
         # GH 23020
         df = pd.DataFrame({"A": pd.Series([1, 2, np.nan], dtype="Int64"), "B": 1})
         result = pd.merge(df, df, on="A")
@@ -1847,15 +2227,18 @@
 
 @pytest.fixture
 def left_df():
+    """ """
     return DataFrame({"a": [20, 10, 0]}, index=[2, 1, 0])
 
 
 @pytest.fixture
 def right_df():
+    """ """
     return DataFrame({"b": [300, 100, 200]}, index=[3, 1, 2])
 
 
 class TestMergeOnIndexes:
+    """ """
     @pytest.mark.parametrize(
         "how, sort, expected",
         [
@@ -1904,6 +2287,25 @@
         ],
     )
     def test_merge_on_indexes(self, left_df, right_df, how, sort, expected):
+        """
+
+        Parameters
+        ----------
+        left_df :
+            
+        right_df :
+            
+        how :
+            
+        sort :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         result = pd.merge(
             left_df, right_df, left_index=True, right_index=True, how=how, sort=sort
         )
@@ -1923,6 +2325,17 @@
     ids=lambda x: type(x).__name__,
 )
 def test_merge_index_types(index):
+    """
+
+    Parameters
+    ----------
+    index :
+        
+
+    Returns
+    -------
+
+    """
     # gh-20777
     # assert key access is consistent across index types
     left = DataFrame({"left_data": [1, 2]}, index=index)
@@ -1950,6 +2363,27 @@
     ],
 )
 def test_merge_series(on, left_on, right_on, left_index, right_index, nm):
+    """
+
+    Parameters
+    ----------
+    on :
+        
+    left_on :
+        
+    right_on :
+        
+    left_index :
+        
+    right_index :
+        
+    nm :
+        
+
+    Returns
+    -------
+
+    """
     # GH 21220
     a = pd.DataFrame(
         {"A": [1, 2, 3, 4]},
@@ -2012,6 +2446,23 @@
     ],
 )
 def test_merge_suffix(col1, col2, kwargs, expected_cols):
+    """
+
+    Parameters
+    ----------
+    col1 :
+        
+    col2 :
+        
+    kwargs :
+        
+    expected_cols :
+        
+
+    Returns
+    -------
+
+    """
     # issue: 24782
     a = pd.DataFrame({col1: [1, 2, 3]})
     b = pd.DataFrame({col2: [4, 5, 6]})
@@ -2047,6 +2498,19 @@
     ],
 )
 def test_merge_duplicate_suffix(how, expected):
+    """
+
+    Parameters
+    ----------
+    how :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     left_df = DataFrame({"A": [100, 200, 1], "B": [60, 70, 80]})
     right_df = DataFrame({"A": [100, 200, 300], "B": [600, 700, 800]})
     result = merge(left_df, right_df, on="A", how=how, suffixes=("_x", "_x"))
@@ -2060,6 +2524,21 @@
     [("a", "a", (None, None)), ("a", "a", ("", None)), (0, 0, (None, ""))],
 )
 def test_merge_suffix_error(col1, col2, suffixes):
+    """
+
+    Parameters
+    ----------
+    col1 :
+        
+    col2 :
+        
+    suffixes :
+        
+
+    Returns
+    -------
+
+    """
     # issue: 24782
     a = pd.DataFrame({col1: [1, 2, 3]})
     b = pd.DataFrame({col2: [3, 4, 5]})
@@ -2072,6 +2551,17 @@
 
 @pytest.mark.parametrize("suffixes", [{"left", "right"}, {"left": 0, "right": 0}])
 def test_merge_suffix_warns(suffixes):
+    """
+
+    Parameters
+    ----------
+    suffixes :
+        
+
+    Returns
+    -------
+
+    """
     a = pd.DataFrame({"a": [1, 2, 3]})
     b = pd.DataFrame({"b": [3, 4, 5]})
 
@@ -2087,6 +2577,23 @@
     ],
 )
 def test_merge_suffix_length_error(col1, col2, suffixes, msg):
+    """
+
+    Parameters
+    ----------
+    col1 :
+        
+    col2 :
+        
+    suffixes :
+        
+    msg :
+        
+
+    Returns
+    -------
+
+    """
     a = pd.DataFrame({col1: [1, 2, 3]})
     b = pd.DataFrame({col2: [3, 4, 5]})
 
@@ -2097,6 +2604,19 @@
 @pytest.mark.parametrize("cat_dtype", ["one", "two"])
 @pytest.mark.parametrize("reverse", [True, False])
 def test_merge_equal_cat_dtypes(cat_dtype, reverse):
+    """
+
+    Parameters
+    ----------
+    cat_dtype :
+        
+    reverse :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-22501
     cat_dtypes = {
         "one": CategoricalDtype(categories=["a", "b", "c"], ordered=False),
@@ -2132,6 +2652,7 @@
 
 
 def test_merge_equal_cat_dtypes2():
+    """ """
     # see gh-22501
     cat_dtype = CategoricalDtype(categories=["a", "b", "c"], ordered=False)
 
@@ -2154,6 +2675,7 @@
 
 
 def test_merge_on_cat_and_ext_array():
+    """ """
     # GH 28668
     right = DataFrame(
         {"a": Series([pd.Interval(0, 1), pd.Interval(1, 2)], dtype="interval")}
@@ -2168,6 +2690,7 @@
 
 
 def test_merge_multiindex_columns():
+    """ """
     # Issue #28518
     # Verify that merging two dataframes give the expected labels
     # The original cause of this issue come from a bug lexsort_depth and is tested in
@@ -2198,6 +2721,7 @@
 
 
 def test_merge_datetime_upcast_dtype():
+    """ """
     # https://github.com/pandas-dev/pandas/issues/31208
     df1 = pd.DataFrame({"x": ["a", "b", "c"], "y": ["1", "2", "4"]})
     df2 = pd.DataFrame(
@@ -2216,6 +2740,17 @@
 
 @pytest.mark.parametrize("n_categories", [5, 128])
 def test_categorical_non_unique_monotonic(n_categories):
+    """
+
+    Parameters
+    ----------
+    n_categories :
+        
+
+    Returns
+    -------
+
+    """
     # GH 28189
     # With n_categories as 5, we test the int8 case is hit in libjoin,
     # with n_categories as 128 we test the int16 case.
