# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tqdm/std.py
+++ b/..//venv/lib/python3.8/site-packages/tqdm/std.py
@@ -30,17 +30,26 @@
 
 
 class TqdmTypeError(TypeError):
+    """ """
     pass
 
 
 class TqdmKeyError(KeyError):
+    """ """
     pass
 
 
 class TqdmWarning(Warning):
     """base class for all tqdm warnings.
-
+    
     Used for non-external-code-breaking errors, such as garbled printing.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     def __init__(self, msg, fp_write=None, *a, **k):
         if fp_write is not None:
@@ -56,6 +65,7 @@
 
 
 class TqdmDeprecationWarning(TqdmWarning, DeprecationWarning):
+    """ """
     # not suppressed if raised
     pass
 
@@ -66,7 +76,19 @@
 
 
 def TRLock(*args, **kwargs):
-    """threading RLock"""
+    """threading RLock
+
+    Parameters
+    ----------
+    *args :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     try:
         from threading import RLock
         return RLock(*args, **kwargs)
@@ -75,13 +97,19 @@
 
 
 class TqdmDefaultWriteLock(object):
-    """
-    Provide a default write lock for thread and multiprocessing safety.
+    """Provide a default write lock for thread and multiprocessing safety.
     Works only on platforms supporting `fork` (so Windows is excluded).
     You must initialise a `tqdm` or `TqdmDefaultWriteLock` instance
     before forking in order for the write lock to work.
     On Windows, you need to supply the lock from the parent to the children as
     an argument to joblib or the parallelism lib you use.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     # global thread lock so no setup required for multithreading.
     # NB: Do not create multiprocessing lock as it sets the multiprocessing
@@ -101,10 +129,24 @@
             root_lock.release()
 
     def acquire(self, *a, **k):
+        """
+
+        Parameters
+        ----------
+        *a :
+            
+        **k :
+            
+
+        Returns
+        -------
+
+        """
         for lock in self.locks:
             lock.acquire(*a, **k)
 
     def release(self):
+        """ """
         for lock in self.locks[::-1]:  # Release in inverse order of acquisition
             lock.release()
 
@@ -116,6 +158,7 @@
 
     @classmethod
     def create_mp_lock(cls):
+        """ """
         if not hasattr(cls, 'mp_lock'):
             try:
                 from multiprocessing import RLock
@@ -125,15 +168,15 @@
 
     @classmethod
     def create_th_lock(cls):
+        """ """
         assert hasattr(cls, 'th_lock')
         warn("create_th_lock not needed anymore", TqdmDeprecationWarning,
              stacklevel=2)
 
 
 class Bar(object):
-    """
-    `str.format`-able bar with format specifiers: `[width][type]`
-
+    """`str.format`-able bar with format specifiers: `[width][type]`
+    
     - `width`
       + unspecified (default): use `self.default_len`
       + `int >= 0`: overrides `self.default_len`
@@ -142,6 +185,13 @@
       + `a`: ascii (`charset=self.ASCII` override)
       + `u`: unicode (`charset=self.UTF` override)
       + `b`: blank (`charset="  "` override)
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     ASCII = " 123456789#"
     UTF = u" " + u''.join(map(_unich, range(0x258F, 0x2587, -1)))
@@ -164,10 +214,22 @@
 
     @property
     def colour(self):
+        """ """
         return self._colour
 
     @colour.setter
     def colour(self, value):
+        """
+
+        Parameters
+        ----------
+        value :
+            
+
+        Returns
+        -------
+
+        """
         if not value:
             self._colour = None
             return
@@ -216,10 +278,16 @@
 
 
 class tqdm(Comparable):
-    """
-    Decorate an iterable object, returning an iterator which acts exactly
+    """Decorate an iterable object, returning an iterator which acts exactly
     like the original iterable, but prints a dynamically updating
     progressbar every time a value is requested.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     monitor_interval = 10  # set to 0 to disable the thread
@@ -227,23 +295,22 @@
 
     @staticmethod
     def format_sizeof(num, suffix='', divisor=1000):
-        """
-        Formats a number (greater than unity) with SI Order of Magnitude
+        """Formats a number (greater than unity) with SI Order of Magnitude
         prefixes.
 
         Parameters
         ----------
-        num  : float
+        num : float
             Number ( >= 1) to format.
-        suffix  : str, optional
+        suffix : str, optional
             Post-postfix [default: ''].
-        divisor  : float, optional
+        divisor : float, optional
             Divisor between prefixes [default: 1000].
 
         Returns
         -------
-        out  : str
-            Number with Order of Magnitude SI unit postfix.
+
+        
         """
         for unit in ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z']:
             if abs(num) < 999.5:
@@ -257,18 +324,17 @@
 
     @staticmethod
     def format_interval(t):
-        """
-        Formats a number of seconds as a clock time, [H:]MM:SS
-
-        Parameters
-        ----------
-        t  : int
+        """Formats a number of seconds as a clock time, [H:]MM:SS
+
+        Parameters
+        ----------
+        t : int
             Number of seconds.
 
         Returns
         -------
-        out  : str
-            [H:]MM:SS
+
+        
         """
         mins, s = divmod(int(t), 60)
         h, m = divmod(mins, 60)
@@ -279,18 +345,17 @@
 
     @staticmethod
     def format_num(n):
-        """
-        Intelligent scientific notation (.3g).
-
-        Parameters
-        ----------
-        n  : int or float or Numeric
+        """Intelligent scientific notation (.3g).
+
+        Parameters
+        ----------
+        n : int or float or Numeric
             A Number.
 
         Returns
         -------
-        out  : str
-            Formatted number.
+
+        
         """
         f = '{0:.3g}'.format(n).replace('+0', '+').replace('-0', '-')
         n = str(n)
@@ -298,40 +363,72 @@
 
     @staticmethod
     def ema(x, mu=None, alpha=0.3):
-        """
-        Exponential moving average: smoothing to give progressively lower
+        """Exponential moving average: smoothing to give progressively lower
         weights to older values.
 
         Parameters
         ----------
-        x  : float
-            New value to include in EMA.
-        mu  : float, optional
-            Previous EMA value.
-        alpha  : float, optional
-            Smoothing factor in range [0, 1], [default: 0.3].
-            Increase to give more weight to recent values.
-            Ranges from 0 (yields mu) to 1 (yields x).
+        x :
+            
+        mu :
+             (Default value = None)
+        alpha :
+             (Default value = 0.3)
+
+        Returns
+        -------
+
+        
         """
         return x if mu is None else (alpha * x) + (1 - alpha) * mu
 
     @staticmethod
     def status_printer(file):
-        """
-        Manage the printing and in-place updating of a line of characters.
+        """Manage the printing and in-place updating of a line of characters.
         Note that if the string is longer than a line, then in-place
         updating may not work (it will print a new line at each refresh).
+
+        Parameters
+        ----------
+        file :
+            
+
+        Returns
+        -------
+
         """
         fp = file
         fp_flush = getattr(fp, 'flush', lambda: None)  # pragma: no cover
 
         def fp_write(s):
+            """
+
+            Parameters
+            ----------
+            s :
+                
+
+            Returns
+            -------
+
+            """
             fp.write(_unicode(s))
             fp_flush()
 
         last_len = [0]
 
         def print_status(s):
+            """
+
+            Parameters
+            ----------
+            s :
+                
+
+            Returns
+            -------
+
+            """
             len_s = disp_len(s)
             fp_write('\r' + s + (' ' * max(last_len[0] - len_s, 0)))
             last_len[0] = len_s
@@ -343,69 +440,71 @@
                      unit='it', unit_scale=False, rate=None, bar_format=None,
                      postfix=None, unit_divisor=1000, initial=0, colour=None,
                      **extra_kwargs):
-        """
-        Return a string-based progress bar given some parameters
-
-        Parameters
-        ----------
-        n  : int or float
+        """Return a string-based progress bar given some parameters
+
+        Parameters
+        ----------
+        n : int or float
             Number of finished iterations.
-        total  : int or float
+        total : int or float
             The expected total number of iterations. If meaningless (None),
             only basic progress statistics are displayed (no ETA).
-        elapsed  : float
+        elapsed : float
             Number of seconds passed since start.
-        ncols  : int, optional
+        ncols : int, optional
             The width of the entire output message. If specified,
             dynamically resizes `{bar}` to stay within this bound
             [default: None]. If `0`, will not print any bar (only stats).
             The fallback is `{bar:10}`.
-        prefix  : str, optional
+        prefix : str, optional
             Prefix message (included in total width) [default: ''].
             Use as {desc} in bar_format string.
-        ascii  : bool, optional or str, optional
+        ascii : bool, optional or str, optional
             If not set, use unicode (smooth blocks) to fill the meter
             [default: False]. The fallback is to use ASCII characters
             " 123456789#".
-        unit  : str, optional
+        unit : str, optional
             The iteration unit [default: 'it'].
-        unit_scale  : bool or int or float, optional
+        unit_scale : bool or int or float, optional
             If 1 or True, the number of iterations will be printed with an
             appropriate SI metric prefix (k = 10^3, M = 10^6, etc.)
             [default: False]. If any other non-zero number, will scale
             `total` and `n`.
-        rate  : float, optional
+        rate : float, optional
             Manual override for iteration rate.
             If [default: None], uses n/elapsed.
-        bar_format  : str, optional
+        bar_format : str, optional
             Specify a custom bar string formatting. May impact performance.
             [default: '{l_bar}{bar}{r_bar}'], where
             l_bar='{desc}: {percentage:3.0f}%|' and
             r_bar='| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, '
-              '{rate_fmt}{postfix}]'
+            '{rate_fmt}{postfix}]'
             Possible vars: l_bar, bar, r_bar, n, n_fmt, total, total_fmt,
-              percentage, elapsed, elapsed_s, ncols, nrows, desc, unit,
-              rate, rate_fmt, rate_noinv, rate_noinv_fmt,
-              rate_inv, rate_inv_fmt, postfix, unit_divisor,
-              remaining, remaining_s, eta.
+            percentage, elapsed, elapsed_s, ncols, nrows, desc, unit,
+            rate, rate_fmt, rate_noinv, rate_noinv_fmt,
+            rate_inv, rate_inv_fmt, postfix, unit_divisor,
+            remaining, remaining_s, eta.
             Note that a trailing ": " is automatically removed after {desc}
             if the latter is empty.
-        postfix  : *, optional
+        postfix : *, optional
             Similar to `prefix`, but placed at the end
             (e.g. for additional stats).
             Note: postfix is usually a string (not a dict) for this method,
             and will if possible be set to postfix = ', ' + postfix.
-            However other types are supported (#382).
-        unit_divisor  : float, optional
+            However other types are supported (#382). (Default value = None)
+        unit_divisor : float, optional
             [default: 1000], ignored unless `unit_scale` is True.
-        initial  : int or float, optional
+        initial : int or float, optional
             The initial counter value [default: 0].
-        colour  : str, optional
-            Bar colour (e.g. 'green', '#00ff00').
-
-        Returns
-        -------
-        out  : Formatted meter and stats, ready to display.
+        colour : str, optional
+            Bar colour (e.g. 'green', '#00ff00'). (Default value = None)
+        **extra_kwargs :
+            
+
+        Returns
+        -------
+
+        
         """
 
         # sanity check: total
@@ -576,20 +675,38 @@
 
     @classmethod
     def _get_free_pos(cls, instance=None):
-        """Skips specified instance."""
+        """Skips specified instance.
+
+        Parameters
+        ----------
+        instance :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         positions = set(abs(inst.pos) for inst in cls._instances
                         if inst is not instance and hasattr(inst, "pos"))
         return min(set(range(len(positions) + 1)).difference(positions))
 
     @classmethod
     def _decr_instances(cls, instance):
-        """
-        Remove from list and reposition another unfixed bar
+        """Remove from list and reposition another unfixed bar
         to fill the new gap.
-
+        
         This means that by default (where all nested bars are unfixed),
         order is not maintained but screen flicker/blank space is minimised.
         (tqdm<=4.44.1 moved ALL subsequent unfixed bars up.)
+
+        Parameters
+        ----------
+        instance :
+            
+
+        Returns
+        -------
+
         """
         with cls._lock:
             try:
@@ -613,7 +730,23 @@
 
     @classmethod
     def write(cls, s, file=None, end="\n", nolock=False):
-        """Print a message via tqdm (without overlap with bars)."""
+        """Print a message via tqdm (without overlap with bars).
+
+        Parameters
+        ----------
+        s :
+            
+        file :
+             (Default value = None)
+        end :
+             (Default value = "\n")
+        nolock :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         fp = file if file is not None else sys.stdout
         with cls.external_write_mode(file=file, nolock=nolock):
             # Write the message
@@ -623,9 +756,19 @@
     @classmethod
     @contextmanager
     def external_write_mode(cls, file=None, nolock=False):
-        """
-        Disable tqdm within context and refresh tqdm when exits.
+        """Disable tqdm within context and refresh tqdm when exits.
         Useful when writing to standard output stream
+
+        Parameters
+        ----------
+        file :
+             (Default value = None)
+        nolock :
+             (Default value = False)
+
+        Returns
+        -------
+
         """
         fp = file if file is not None else sys.stdout
 
@@ -652,7 +795,17 @@
 
     @classmethod
     def set_lock(cls, lock):
-        """Set the global lock."""
+        """Set the global lock.
+
+        Parameters
+        ----------
+        lock :
+            
+
+        Returns
+        -------
+
+        """
         cls._lock = lock
 
     @classmethod
@@ -664,24 +817,33 @@
 
     @classmethod
     def pandas(cls, **tqdm_kwargs):
-        """
-        Registers the current `tqdm` class with
+        """Registers the current `tqdm` class with
             pandas.core.
             ( frame.DataFrame
             | series.Series
             | groupby.(generic.)DataFrameGroupBy
             | groupby.(generic.)SeriesGroupBy
             ).progress_apply
-
+        
         A new instance will be create every time `progress_apply` is called,
         and each instance will automatically `close()` upon completion.
 
         Parameters
         ----------
-        tqdm_kwargs  : arguments for the tqdm instance
+        tqdm_kwargs : arguments for the tqdm instance
+            
+        **tqdm_kwargs :
+            
+
+        Returns
+        -------
 
         Examples
         --------
+        References
+        ----------
+        <https://stackoverflow.com/questions/18603270/\
+        progress-indicator-during-pandas-operations-python>
         >>> import pandas as pd
         >>> import numpy as np
         >>> from tqdm import tqdm
@@ -691,11 +853,6 @@
         >>> tqdm.pandas(ncols=50)  # can use tqdm_gui, optional kwargs, etc
         >>> # Now you can use `progress_apply` instead of `apply`
         >>> df.groupby(0).progress_apply(lambda x: x**2)
-
-        References
-        ----------
-        <https://stackoverflow.com/questions/18603270/\
-        progress-indicator-during-pandas-operations-python>
         """
         from pandas.core.frame import DataFrame
         from pandas.core.series import Series
@@ -737,16 +894,35 @@
         deprecated_t = [tqdm_kwargs.pop('deprecated_t', None)]
 
         def inner_generator(df_function='apply'):
+            """
+
+            Parameters
+            ----------
+            df_function :
+                 (Default value = 'apply')
+
+            Returns
+            -------
+
+            """
             def inner(df, func, *args, **kwargs):
                 """
+
                 Parameters
                 ----------
-                df  : (DataFrame|Series)[GroupBy]
-                    Data (may be grouped).
-                func  : function
-                    To be applied on the (grouped) data.
-                **kwargs  : optional
-                    Transmitted to `df.apply()`.
+                df :
+                    
+                func :
+                    
+                *args :
+                    
+                **kwargs :
+                    
+
+                Returns
+                -------
+
+                
                 """
 
                 # Precompute total iterations
@@ -790,6 +966,19 @@
 
                 # Define bar updating wrapper
                 def wrapper(*args, **kwargs):
+                    """
+
+                    Parameters
+                    ----------
+                    *args :
+                        
+                    **kwargs :
+                        
+
+                    Returns
+                    -------
+
+                    """
                     # update tbar correctly
                     # it seems `pandas apply` calls `func` twice
                     # on the first column/row to decide whether it can
@@ -1132,6 +1321,7 @@
 
     @property
     def _comparable(self):
+        """ """
         return abs(getattr(self, "pos", 1 << 31))
 
     def __hash__(self):
@@ -1224,10 +1414,21 @@
             self.close()
 
     def update(self, n=1):
-        """
-        Manually update the progress bar, useful for streams
+        """Manually update the progress bar, useful for streams
         such as reading files.
         E.g.:
+
+        Parameters
+        ----------
+        n : int or float, optional
+            Increment to add to the internal counter of iterations
+            [default: 1]. If using float, consider specifying `{n:.3f}`
+            or similar in `bar_format`, or specifying `unit_scale`.
+
+        Returns
+        -------
+
+        
         >>> t = tqdm(total=filesize) # Initialise
         >>> for current_buffer in stream:
         ...    ...
@@ -1236,18 +1437,6 @@
         The last line is highly recommended, but possibly not necessary if
         `t.update()` will be called in such a way that `filesize` will be
         exactly reached and printed.
-
-        Parameters
-        ----------
-        n  : int or float, optional
-            Increment to add to the internal counter of iterations
-            [default: 1]. If using float, consider specifying `{n:.3f}`
-            or similar in `bar_format`, or specifying `unit_scale`.
-
-        Returns
-        -------
-        out  : bool or None
-            True if a `display()` was triggered.
         """
         # N.B.: see __iter__() for more comments.
         if self.disable:
@@ -1323,6 +1512,17 @@
 
         # annoyingly, _supports_unicode isn't good enough
         def fp_write(s):
+            """
+
+            Parameters
+            ----------
+            s :
+                
+
+            Returns
+            -------
+
+            """
             self.fp.write(_unicode(s))
 
         try:
@@ -1346,7 +1546,17 @@
                     fp_write('\r')
 
     def clear(self, nolock=False):
-        """Clear current bar display."""
+        """Clear current bar display.
+
+        Parameters
+        ----------
+        nolock :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         if self.disable:
             return
 
@@ -1362,17 +1572,19 @@
             self._lock.release()
 
     def refresh(self, nolock=False, lock_args=None):
-        """
-        Force refresh the display of this bar.
-
-        Parameters
-        ----------
-        nolock  : bool, optional
-            If `True`, does not lock.
-            If [default: `False`]: calls `acquire()` on internal lock.
-        lock_args  : tuple, optional
-            Passed to internal lock's `acquire()`.
-            If specified, will only `display()` if `acquire()` returns `True`.
+        """Force refresh the display of this bar.
+
+        Parameters
+        ----------
+        nolock :
+             (Default value = False)
+        lock_args :
+             (Default value = None)
+
+        Returns
+        -------
+
+        
         """
         if self.disable:
             return
@@ -1395,14 +1607,19 @@
         self.last_print_t = cur_t
 
     def reset(self, total=None):
-        """
-        Resets to 0 iterations for repeated use.
-
+        """Resets to 0 iterations for repeated use.
+        
         Consider combining with `leave=True`.
 
         Parameters
         ----------
-        total  : int or float, optional. Total to use for the new bar.
+        total :
+             (Default value = None)
+
+        Returns
+        -------
+
+        
         """
         self.last_print_n = self.n = 0
         self.last_print_t = self.start_t = self._time()
@@ -1411,36 +1628,59 @@
         self.refresh()
 
     def set_description(self, desc=None, refresh=True):
-        """
-        Set/modify description of the progress bar.
-
-        Parameters
-        ----------
-        desc  : str, optional
-        refresh  : bool, optional
-            Forces refresh [default: True].
+        """Set/modify description of the progress bar.
+
+        Parameters
+        ----------
+        desc :
+             (Default value = None)
+        refresh :
+             (Default value = True)
+
+        Returns
+        -------
+
+        
         """
         self.desc = desc + ': ' if desc else ''
         if refresh:
             self.refresh()
 
     def set_description_str(self, desc=None, refresh=True):
-        """Set/modify description without ': ' appended."""
+        """Set/modify description without ': ' appended.
+
+        Parameters
+        ----------
+        desc :
+             (Default value = None)
+        refresh :
+             (Default value = True)
+
+        Returns
+        -------
+
+        """
         self.desc = desc or ''
         if refresh:
             self.refresh()
 
     def set_postfix(self, ordered_dict=None, refresh=True, **kwargs):
-        """
-        Set/modify postfix (additional stats)
+        """Set/modify postfix (additional stats)
         with automatic formatting based on datatype.
 
         Parameters
         ----------
-        ordered_dict  : dict or OrderedDict, optional
-        refresh  : bool, optional
-            Forces refresh [default: True].
-        kwargs  : dict, optional
+        ordered_dict :
+             (Default value = None)
+        refresh :
+             (Default value = True)
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        
         """
         # Sort in alphabetical order to be more deterministic
         postfix = _OrderedDict([] if ordered_dict is None else ordered_dict)
@@ -1462,14 +1702,35 @@
             self.refresh()
 
     def set_postfix_str(self, s='', refresh=True):
-        """
-        Postfix without dictionary expansion, similar to prefix handling.
+        """Postfix without dictionary expansion, similar to prefix handling.
+
+        Parameters
+        ----------
+        s :
+             (Default value = '')
+        refresh :
+             (Default value = True)
+
+        Returns
+        -------
+
         """
         self.postfix = str(s)
         if refresh:
             self.refresh()
 
     def moveto(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         # TODO: private method
         self.fp.write(_unicode('\n' * n + _term_move_up() * -n))
         self.fp.flush()
@@ -1493,17 +1754,22 @@
             colour=self.colour)
 
     def display(self, msg=None, pos=None):
-        """
-        Use `self.sp` to display `msg` in the specified `pos`.
-
+        """Use `self.sp` to display `msg` in the specified `pos`.
+        
         Consider overloading this function when inheriting to use e.g.:
         `self.some_frontend(**self.format_dict)` instead of `self.sp`.
 
         Parameters
         ----------
-        msg  : str, optional. What to display (default: `repr(self)`).
-        pos  : int, optional. Position to `moveto`
-          (default: `abs(self.pos)`).
+        msg :
+             (Default value = None)
+        pos :
+             (Default value = None)
+
+        Returns
+        -------
+
+        
         """
         if pos is None:
             pos = abs(self.pos)
@@ -1525,10 +1791,25 @@
     @classmethod
     @contextmanager
     def wrapattr(cls, stream, method, total=None, bytes=True, **tqdm_kwargs):
-        """
-        stream  : file-like object.
+        """stream  : file-like object.
         method  : str, "read" or "write". The result of `read()` and
             the first argument of `write()` should have a `len()`.
+
+        Parameters
+        ----------
+        stream :
+            
+        method :
+            
+        total :
+             (Default value = None)
+        bytes :
+             (Default value = True)
+        **tqdm_kwargs :
+            
+
+        Returns
+        -------
 
         >>> with tqdm.wrapattr(file_obj, "read", total=file_obj.size) as fobj:
         ...     while True:
@@ -1545,8 +1826,18 @@
 
 
 def trange(*args, **kwargs):
-    """
-    A shortcut for tqdm(xrange(*args), **kwargs).
+    """A shortcut for tqdm(xrange(*args), **kwargs).
     On Python3+ range is used instead of xrange.
+
+    Parameters
+    ----------
+    *args :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
     """
     return tqdm(_range(*args), **kwargs)
