# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/extensions.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/extensions.py
@@ -21,13 +21,13 @@
 
 class ExtensionManager(Configurable):
     """A class to manage IPython extensions.
-
+    
     An IPython extension is an importable Python module that has
     a function with the signature::
-
+    
         def load_ipython_extension(ipython):
             # Do things with ipython
-
+    
     This function is called after your extension is imported and the
     currently active :class:`InteractiveShell` instance is passed as
     the only argument.  You can do anything you want with IPython at
@@ -38,12 +38,19 @@
     function, which will be called if the user unloads or reloads the extension.
     The extension manager will only call :func:`load_ipython_extension` again
     if the extension is reloaded.
-
+    
     You can put your extension modules anywhere you want, as long as
     they can be imported by Python's standard import mechanism.  However,
     to make it easy to write extensions, you can also put your extensions
     in ``os.path.join(self.ipython_dir, 'extensions')``.  This directory
     is added to ``sys.path`` automatically.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     shell = Instance('IPython.core.interactiveshell.InteractiveShellABC', allow_none=True)
@@ -57,17 +64,38 @@
 
     @property
     def ipython_extension_dir(self):
+        """ """
         return os.path.join(self.shell.ipython_dir, u'extensions')
 
     def _on_ipython_dir_changed(self, change):
+        """
+
+        Parameters
+        ----------
+        change :
+            
+
+        Returns
+        -------
+
+        """
         ensure_dir_exists(self.ipython_extension_dir)
 
     def load_extension(self, module_str):
         """Load an IPython extension by its module name.
-
+        
         Returns the string "already loaded" if the extension is already loaded,
         "no load function" if the module doesn't have a load_ipython_extension
         function, or None if it succeeded.
+
+        Parameters
+        ----------
+        module_str :
+            
+
+        Returns
+        -------
+
         """
         if module_str in self.loaded:
             return "already loaded"
@@ -91,13 +119,22 @@
 
     def unload_extension(self, module_str):
         """Unload an IPython extension by its module name.
-
+        
         This function looks up the extension's name in ``sys.modules`` and
         simply calls ``mod.unload_ipython_extension(self)``.
         
         Returns the string "no unload function" if the extension doesn't define
         a function to unload itself, "not loaded" if the extension isn't loaded,
         otherwise None.
+
+        Parameters
+        ----------
+        module_str :
+            
+
+        Returns
+        -------
+
         """
         if module_str not in self.loaded:
             return "not loaded"
@@ -111,11 +148,20 @@
 
     def reload_extension(self, module_str):
         """Reload an IPython extension by calling reload.
-
+        
         If the module has not been loaded before,
         :meth:`InteractiveShell.load_extension` is called. Otherwise
         :func:`reload` is called and then the :func:`load_ipython_extension`
         function of the module, if it exists is called.
+
+        Parameters
+        ----------
+        module_str :
+            
+
+        Returns
+        -------
+
         """
         from IPython.utils.syspathcontext import prepended_to_syspath
 
@@ -130,19 +176,51 @@
             self.load_extension(module_str)
 
     def _call_load_ipython_extension(self, mod):
+        """
+
+        Parameters
+        ----------
+        mod :
+            
+
+        Returns
+        -------
+
+        """
         if hasattr(mod, 'load_ipython_extension'):
             mod.load_ipython_extension(self.shell)
             return True
 
     def _call_unload_ipython_extension(self, mod):
+        """
+
+        Parameters
+        ----------
+        mod :
+            
+
+        Returns
+        -------
+
+        """
         if hasattr(mod, 'unload_ipython_extension'):
             mod.unload_ipython_extension(self.shell)
             return True
 
     @undoc
     def install_extension(self, url, filename=None):
-        """
-        Deprecated.
+        """Deprecated.
+
+        Parameters
+        ----------
+        url :
+            
+        filename :
+             (Default value = None)
+
+        Returns
+        -------
+
         """
         # Ensure the extension directory exists
         raise DeprecationWarning(
