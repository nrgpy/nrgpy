# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/parso/cache.py
+++ b/..//venv/lib/python3.8/site-packages/parso/cache.py
@@ -71,6 +71,7 @@
 
 
 def _get_default_cache_path():
+    """ """
     if platform.system().lower() == 'windows':
         dir_ = os.path.join(os.getenv('LOCALAPPDATA')
                             or os.path.expanduser('~'), 'Parso', 'Parso')
@@ -94,11 +95,19 @@
 _CACHE_CLEAR_THRESHOLD = 60 * 60 * 24
 
 def _get_cache_clear_lock(cache_path = None):
-    """
-    The path where the cache lock is stored.
-
+    """The path where the cache lock is stored.
+    
     Cache lock will prevent continous cache clearing and only allow garbage
     collection once a day (can be configured in _CACHE_CLEAR_THRESHOLD).
+
+    Parameters
+    ----------
+    cache_path :
+         (Default value = None)
+
+    Returns
+    -------
+
     """
     cache_path = cache_path or _get_default_cache_path()
     return FileIO(os.path.join(cache_path, "PARSO-CACHE-LOCK"))
@@ -108,6 +117,7 @@
 
 
 class _NodeCacheItem(object):
+    """ """
     def __init__(self, node, lines, change_time=None):
         self.node = node
         self.lines = lines
@@ -118,8 +128,20 @@
 
 
 def load_module(hashed_grammar, file_io, cache_path=None):
-    """
-    Returns a module or None, if it fails.
+    """Returns a module or None, if it fails.
+
+    Parameters
+    ----------
+    hashed_grammar :
+        
+    file_io :
+        
+    cache_path :
+         (Default value = None)
+
+    Returns
+    -------
+
     """
     p_time = file_io.get_last_modified()
     if p_time is None:
@@ -140,6 +162,23 @@
 
 
 def _load_from_file_system(hashed_grammar, path, p_time, cache_path=None):
+    """
+
+    Parameters
+    ----------
+    hashed_grammar :
+        
+    path :
+        
+    p_time :
+        
+    cache_path :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     cache_path = _get_hashed_path(hashed_grammar, path, cache_path=cache_path)
     try:
         try:
@@ -168,6 +207,21 @@
 
 
 def _set_cache_item(hashed_grammar, path, module_cache_item):
+    """
+
+    Parameters
+    ----------
+    hashed_grammar :
+        
+    path :
+        
+    module_cache_item :
+        
+
+    Returns
+    -------
+
+    """
     if sum(len(v) for v in parser_cache.values()) >= _CACHED_SIZE_TRIGGER:
         # Garbage collection of old cache files.
         # We are basically throwing everything away that hasn't been accessed
@@ -184,6 +238,27 @@
 
 
 def try_to_save_module(hashed_grammar, file_io, module, lines, pickling=True, cache_path=None):
+    """
+
+    Parameters
+    ----------
+    hashed_grammar :
+        
+    file_io :
+        
+    module :
+        
+    lines :
+        
+    pickling :
+         (Default value = True)
+    cache_path :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     path = file_io.path
     try:
         p_time = None if path is None else file_io.get_last_modified()
@@ -209,11 +284,39 @@
 
 
 def _save_to_file_system(hashed_grammar, path, item, cache_path=None):
+    """
+
+    Parameters
+    ----------
+    hashed_grammar :
+        
+    path :
+        
+    item :
+        
+    cache_path :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     with open(_get_hashed_path(hashed_grammar, path, cache_path=cache_path), 'wb') as f:
         pickle.dump(item, f, pickle.HIGHEST_PROTOCOL)
 
 
 def clear_cache(cache_path=None):
+    """
+
+    Parameters
+    ----------
+    cache_path :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     if cache_path is None:
         cache_path = _default_cache_path
     shutil.rmtree(cache_path)
@@ -224,6 +327,19 @@
     cache_path=None,
     inactivity_threshold=_CACHED_FILE_MAXIMUM_SURVIVAL,
 ):
+    """
+
+    Parameters
+    ----------
+    cache_path :
+         (Default value = None)
+    inactivity_threshold :
+         (Default value = _CACHED_FILE_MAXIMUM_SURVIVAL)
+
+    Returns
+    -------
+
+    """
     if cache_path is None:
         cache_path = _get_default_cache_path()
     if not os.path.exists(cache_path):
@@ -246,6 +362,17 @@
 
 
 def _remove_cache_and_update_lock(cache_path = None):
+    """
+
+    Parameters
+    ----------
+    cache_path :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     lock = _get_cache_clear_lock(cache_path=cache_path)
     clear_lock_time = lock.get_last_modified()
     if (
@@ -261,6 +388,21 @@
         clear_inactive_cache(cache_path = cache_path)
 
 def _get_hashed_path(hashed_grammar, path, cache_path=None):
+    """
+
+    Parameters
+    ----------
+    hashed_grammar :
+        
+    path :
+        
+    cache_path :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     directory = _get_cache_directory_path(cache_path=cache_path)
 
     file_hash = hashlib.sha256(path.encode("utf-8")).hexdigest()
@@ -268,6 +410,17 @@
 
 
 def _get_cache_directory_path(cache_path=None):
+    """
+
+    Parameters
+    ----------
+    cache_path :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     if cache_path is None:
         cache_path = _default_cache_path
     directory = os.path.join(cache_path, _VERSION_TAG)
