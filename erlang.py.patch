# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pygments/lexers/erlang.py
+++ b/..//venv/lib/python3.8/site-packages/pygments/lexers/erlang.py
@@ -24,12 +24,18 @@
 
 
 class ErlangLexer(RegexLexer):
-    """
-    For the Erlang functional programming language.
-
+    """For the Erlang functional programming language.
+    
     Blame Jeremy Thurgood (http://jerith.za.net/).
-
+    
     .. versionadded:: 0.9
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Erlang'
@@ -153,10 +159,16 @@
 
 
 class ErlangShellLexer(Lexer):
-    """
-    Shell sessions in erl (for Erlang code).
-
+    """Shell sessions in erl (for Erlang code).
+    
     .. versionadded:: 1.1
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Erlang erl session'
     aliases = ['erl']
@@ -166,6 +178,17 @@
     _prompt_re = re.compile(r'(?:\([\w@_.]+\))?\d+>(?=\s|\Z)')
 
     def get_tokens_unprocessed(self, text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         erlexer = ErlangLexer(**self.options)
 
         curcode = ''
@@ -194,6 +217,21 @@
 
 
 def gen_elixir_string_rules(name, symbol, token):
+    """
+
+    Parameters
+    ----------
+    name :
+        
+    symbol :
+        
+    token :
+        
+
+    Returns
+    -------
+
+    """
     states = {}
     states['string_' + name] = [
         (r'[^#%s\\]+' % (symbol,), token),
@@ -206,6 +244,23 @@
 
 
 def gen_elixir_sigstr_rules(term, term_class, token, interpol=True):
+    """
+
+    Parameters
+    ----------
+    term :
+        
+    term_class :
+        
+    token :
+        
+    interpol :
+         (Default value = True)
+
+    Returns
+    -------
+
+    """
     if interpol:
         return [
             (r'[^#%s\\]+' % (term_class,), token),
@@ -223,10 +278,16 @@
 
 
 class ElixirLexer(RegexLexer):
-    """
-    For the `Elixir language <http://elixir-lang.org>`_.
-
+    """For the `Elixir language <http://elixir-lang.org>`_.
+    
     .. versionadded:: 1.5
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Elixir'
@@ -265,6 +326,17 @@
     )
 
     def get_tokens_unprocessed(self, text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         for index, token, value in RegexLexer.get_tokens_unprocessed(self, text):
             if token is Name:
                 if value in self.KEYWORD:
@@ -287,6 +359,7 @@
                 yield index, token, value
 
     def gen_elixir_sigil_rules():
+        """ """
         # all valid sigil terminators (excluding heredocs)
         terminators = [
             (r'\{', r'\}', '}',   'cb'),
@@ -471,11 +544,10 @@
 
 
 class ElixirConsoleLexer(Lexer):
-    """
-    For Elixir interactive console (iex) output like:
-
+    """For Elixir interactive console (iex) output like:
+    
     .. sourcecode:: iex
-
+    
         iex> [head | tail] = [1,2,3]
         [1,2,3]
         iex> head
@@ -486,8 +558,15 @@
         [1,2,3]
         iex> length [head | tail]
         3
-
+    
     .. versionadded:: 1.5
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Elixir iex session'
@@ -497,6 +576,17 @@
     _prompt_re = re.compile(r'(iex|\.{3})((?:\([\w@_.]+\))?\d+|\(\d+\))?> ')
 
     def get_tokens_unprocessed(self, text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         exlexer = ElixirLexer(**self.options)
 
         curcode = ''
