# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/terminal/ipapp.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/terminal/ipapp.py
@@ -72,7 +72,19 @@
         )
 
     def make_report(self,traceback):
-        """Return a string containing a crash report."""
+        """
+
+        Parameters
+        ----------
+        traceback :
+            
+
+        Returns
+        -------
+        type
+            
+
+        """
 
         sec_sep = self.section_sep
         # Start with parent report
@@ -163,13 +175,14 @@
 
 
 class LocateIPythonApp(BaseIPythonApplication):
-    description = """print the path to the IPython dir"""
+    """description = """print the path to the IPython dir"""
     subcommands = dict(
         profile=('IPython.core.profileapp.ProfileLocate',
             "print the path to an IPython profile directory",
         ),
     )
     def start(self):
+        """ """
         if self.subapp is not None:
             return self.subapp.start()
         else:
@@ -177,6 +190,7 @@
 
 
 class TerminalIPythonApp(BaseIPythonApplication, InteractiveShellApp):
+    """ """
     name = u'ipython'
     description = usage.cl_usage
     crash_handler_class = IPAppCrashHandler
@@ -256,6 +270,17 @@
     ).tag(config=True)
     @observe('quick')
     def _quick_changed(self, change):
+        """
+
+        Parameters
+        ----------
+        change :
+            
+
+        Returns
+        -------
+
+        """
         if change['new']:
             self.load_config_file = lambda *a, **kw: None
 
@@ -272,11 +297,33 @@
     ).tag(config=True)
     @observe('force_interact')
     def _force_interact_changed(self, change):
+        """
+
+        Parameters
+        ----------
+        change :
+            
+
+        Returns
+        -------
+
+        """
         if change['new']:
             self.interact = True
 
     @observe('file_to_run', 'code_to_run', 'module_to_run')
     def _file_to_run_changed(self, change):
+        """
+
+        Parameters
+        ----------
+        change :
+            
+
+        Returns
+        -------
+
+        """
         new = change['new']
         if new:
             self.something_to_run = True
@@ -287,7 +334,17 @@
     something_to_run=Bool(False)
 
     def parse_command_line(self, argv=None):
-        """override to allow old '-pylab' flag with deprecation warning"""
+        """override to allow old '-pylab' flag with deprecation warning
+
+        Parameters
+        ----------
+        argv :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
 
         argv = sys.argv[1:] if argv is None else argv
 
@@ -304,7 +361,17 @@
     
     @catch_config_error
     def initialize(self, argv=None):
-        """Do actions after construct, but before starting the app."""
+        """Do actions after construct, but before starting the app.
+
+        Parameters
+        ----------
+        argv :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         super(TerminalIPythonApp, self).initialize(argv)
         if self.subapp is not None:
             # don't bother initializing further, starting subapp
@@ -341,13 +408,28 @@
         if self.log_level <= logging.INFO: print()
 
     def _pylab_changed(self, name, old, new):
-        """Replace --pylab='inline' with --pylab='auto'"""
+        """Replace --pylab='inline' with --pylab='auto'
+
+        Parameters
+        ----------
+        name :
+            
+        old :
+            
+        new :
+            
+
+        Returns
+        -------
+
+        """
         if new == 'inline':
             warnings.warn("'inline' not available as pylab backend, "
                       "using 'auto' instead.")
             self.pylab = 'auto'
 
     def start(self):
+        """ """
         if self.subapp is not None:
             return self.subapp.start()
         # perform any prexec steps:
@@ -361,8 +443,17 @@
 
 def load_default_config(ipython_dir=None):
     """Load the default config file from the default ipython_dir.
-
+    
     This is useful for embedded shells.
+
+    Parameters
+    ----------
+    ipython_dir :
+         (Default value = None)
+
+    Returns
+    -------
+
     """
     if ipython_dir is None:
         ipython_dir = get_ipython_dir()
