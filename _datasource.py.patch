# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/lib/_datasource.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/lib/_datasource.py
@@ -50,13 +50,17 @@
 
     Parameters
     ----------
-    mode : str
-        File open mode.
-    encoding : str
-        File encoding.
-    newline : str
-        Newline for text files.
-
+    mode :
+        
+    encoding :
+        
+    newline :
+        
+
+    Returns
+    -------
+
+    
     """
     if "t" in mode:
         if "b" in mode:
@@ -74,20 +78,24 @@
 
 # TODO: .zip support, .tar support?
 class _FileOpeners:
-    """
-    Container for different methods to open (un-)compressed files.
-
+    """Container for different methods to open (un-)compressed files.
+    
     `_FileOpeners` contains a dictionary that holds one method for each
     supported file format. Attribute lookup is implemented in such a way
     that an instance of `_FileOpeners` itself can be indexed with the keys
     of that dictionary. Currently uncompressed files as well as files
     compressed with ``gzip``, ``bz2`` or ``xz`` compression are supported.
 
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     Notes
     -----
     `_file_openers`, an instance of `_FileOpeners`, is made available for
     use in the `_datasource` module.
-
     Examples
     --------
     >>> import gzip
@@ -95,7 +103,6 @@
     [None, '.bz2', '.gz', '.xz', '.lzma']
     >>> np.lib._datasource._file_openers['.gz'] is gzip.open
     True
-
     """
 
     def __init__(self):
@@ -103,6 +110,7 @@
         self._file_openers = {None: io.open}
 
     def _load(self):
+        """ """
         if self._loaded:
             return
 
@@ -130,20 +138,17 @@
         self._loaded = True
 
     def keys(self):
-        """
-        Return the keys of currently supported file openers.
-
-        Parameters
-        ----------
-        None
-
-        Returns
-        -------
-        keys : list
-            The keys are None for uncompressed files and the file extension
-            strings (i.e. ``'.gz'``, ``'.xz'``) for supported compression
-            methods.
-
+        """Return the keys of currently supported file openers.
+
+        Parameters
+        ----------
+        None :
+            
+
+        Returns
+        -------
+
+        
         """
         self._load()
         return list(self._file_openers.keys())
@@ -155,9 +160,8 @@
 _file_openers = _FileOpeners()
 
 def open(path, mode='r', destpath=os.curdir, encoding=None, newline=None):
-    """
-    Open `path` with `mode` and return the file object.
-
+    """Open `path` with `mode` and return the file object.
+    
     If ``path`` is an URL, it will be downloaded, stored in the
     `DataSource` `destpath` directory and opened from there.
 
@@ -177,7 +181,7 @@
         Open text file with given encoding. The default encoding will be
         what `io.open` uses.
     newline : {None, str}, optional
-        Newline to use when reading text file.
+        Newline to use when reading text file. (Default value = None)
 
     Returns
     -------
@@ -188,7 +192,6 @@
     -----
     This is a convenience function that instantiates a `DataSource` and
     returns the file object from ``DataSource.open(path)``.
-
     """
 
     ds = DataSource(destpath)
@@ -197,11 +200,10 @@
 
 @set_module('numpy')
 class DataSource:
-    """
-    DataSource(destpath='.')
-
+    """DataSource(destpath='.')
+    
     A generic data source file (file, http, ftp, ...).
-
+    
     DataSources can be local files or remote files/URLs.  The files may
     also be compressed or uncompressed. DataSource hides some of the
     low-level details of downloading the file, allowing you to simply pass
@@ -214,35 +216,36 @@
         use.  If `destpath` is None, a temporary directory will be created.
         The default path is the current directory.
 
+    Returns
+    -------
+
     Notes
     -----
     URLs require a scheme string (``http://``) to be used, without it they
     will fail::
-
-        >>> repos = np.DataSource()
+    
+    
+    Temporary directories are deleted when the DataSource is deleted.
+    Examples
+    --------
+    ::
+    >>> repos = np.DataSource()
         >>> repos.exists('www.google.com/index.html')
         False
         >>> repos.exists('http://www.google.com/index.html')
         True
-
-    Temporary directories are deleted when the DataSource is deleted.
-
-    Examples
-    --------
-    ::
-
+    
         >>> ds = np.DataSource('/home/guido')
         >>> urlname = 'http://www.google.com/'
         >>> gfile = ds.open('http://www.google.com/')
         >>> ds.abspath(urlname)
         '/home/guido/www.google.com/index.html'
-
+    
         >>> ds = np.DataSource(None)  # use with temporary file
         >>> ds.open('/home/guido/foobar.txt')
         <open file '/home/guido.foobar.txt', mode 'r' at 0x91d4430>
         >>> ds.abspath('/home/guido/foobar.txt')
         '/tmp/.../home/guido/foobar.txt'
-
     """
 
     def __init__(self, destpath=os.curdir):
@@ -263,12 +266,30 @@
     def _iszip(self, filename):
         """Test if the filename is a zip file by looking at the file extension.
 
+        Parameters
+        ----------
+        filename :
+            
+
+        Returns
+        -------
+
         """
         fname, ext = os.path.splitext(filename)
         return ext in _file_openers.keys()
 
     def _iswritemode(self, mode):
-        """Test if the given mode will open a file for writing."""
+        """Test if the given mode will open a file for writing.
+
+        Parameters
+        ----------
+        mode :
+            
+
+        Returns
+        -------
+
+        """
 
         # Currently only used to test the bz2 files.
         _writemodes = ("w", "+")
@@ -279,9 +300,17 @@
 
     def _splitzipext(self, filename):
         """Split zip extension from filename and return filename.
-
+        
         *Returns*:
             base, zip_ext : {tuple}
+
+        Parameters
+        ----------
+        filename :
+            
+
+        Returns
+        -------
 
         """
 
@@ -291,7 +320,19 @@
             return filename, None
 
     def _possible_names(self, filename):
-        """Return a tuple containing compressed filename variations."""
+        """
+
+        Parameters
+        ----------
+        filename :
+            
+
+        Returns
+        -------
+        type
+            
+
+        """
         names = [filename]
         if not self._iszip(filename):
             for zipext in _file_openers.keys():
@@ -300,7 +341,17 @@
         return names
 
     def _isurl(self, path):
-        """Test if path is a net location.  Tests the scheme and netloc."""
+        """Test if path is a net location.  Tests the scheme and netloc.
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
 
         # We do this here to reduce the 'import numpy' initial import time.
         from urllib.parse import urlparse
@@ -316,8 +367,16 @@
 
     def _cache(self, path):
         """Cache the file specified by path.
-
+        
         Creates a copy of the file in the datasource cache.
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
 
         """
         # We import these here because importing urllib is slow and
@@ -345,13 +404,20 @@
 
     def _findfile(self, path):
         """Searches for ``path`` and returns full path if found.
-
+        
         If path is an URL, _findfile will cache a local copy and return the
         path to the cached file.  If path is a local file, _findfile will
-        return a path to that local file.
-
-        The search will include possible compressed versions of the file
-        and return the first occurrence found.
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+        type
+            The search will include possible compressed versions of the file
+            and return the first occurrence found.
 
         """
 
@@ -375,9 +441,8 @@
         return None
 
     def abspath(self, path):
-        """
-        Return absolute path of file in the DataSource directory.
-
+        """Return absolute path of file in the DataSource directory.
+        
         If `path` is an URL, then `abspath` will return either the location
         the file exists locally or the location it would exist when opened
         using the `open` method.
@@ -395,7 +460,6 @@
         Notes
         -----
         The functionality is based on `os.path.abspath`.
-
         """
         # We do this here to reduce the 'import numpy' initial import time.
         from urllib.parse import urlparse
@@ -417,8 +481,18 @@
         return os.path.join(self._destpath, netloc, upath)
 
     def _sanitize_relative_path(self, path):
-        """Return a sanitised relative path for which
-        os.path.abspath(os.path.join(base, path)).startswith(base)
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+        type
+            os.path.abspath(os.path.join(base, path)).startswith(base)
+
         """
         last = None
         path = os.path.normpath(path)
@@ -431,11 +505,10 @@
         return path
 
     def exists(self, path):
-        """
-        Test if path exists.
-
+        """Test if path exists.
+        
         Test if `path` exists as (and in this order):
-
+        
         - a local file.
         - a remote URL that has been downloaded and stored locally in the
           `DataSource` directory.
@@ -458,7 +531,6 @@
         stored locally in the `DataSource` directory, or is a valid remote
         URL.  `DataSource` does not discriminate between the two, the file
         is accessible if it exists in either location.
-
         """
 
         # First test for local path
@@ -487,9 +559,8 @@
         return False
 
     def open(self, path, mode='r', encoding=None, newline=None):
-        """
-        Open and return file-like object.
-
+        """Open and return file-like object.
+        
         If `path` is an URL, it will be downloaded, stored in the
         `DataSource` directory and opened from there.
 
@@ -505,13 +576,12 @@
             Open text file with given encoding. The default encoding will be
             what `io.open` uses.
         newline : {None, str}, optional
-            Newline to use when reading text file.
-
-        Returns
-        -------
-        out : file object
-            File object.
-
+            Newline to use when reading text file. (Default value = None)
+
+        Returns
+        -------
+
+        
         """
 
         # TODO: There is no support for opening a file for writing which
@@ -536,12 +606,11 @@
 
 
 class Repository (DataSource):
-    """
-    Repository(baseurl, destpath='.')
-
+    """Repository(baseurl, destpath='.')
+    
     A data repository where multiple DataSource's share a base
     URL/directory.
-
+    
     `Repository` extends `DataSource` by prepending a base URL (or
     directory) to all the files it handles. Use `Repository` when you will
     be working with multiple files from one base URL.  Initialize
@@ -558,21 +627,23 @@
         use.  If `destpath` is None, a temporary directory will be created.
         The default path is the current directory.
 
+    Returns
+    -------
+
     Examples
     --------
     To analyze all files in the repository, do something like this
     (note: this is not self-contained code)::
-
-        >>> repos = np.lib._datasource.Repository('/home/user/data/dir/')
+    
+    
+    Similarly you could use a URL for a repository::
+    >>> repos = np.lib._datasource.Repository('/home/user/data/dir/')
         >>> for filename in filelist:
         ...     fp = repos.open(filename)
         ...     fp.analyze()
         ...     fp.close()
-
-    Similarly you could use a URL for a repository::
-
+    
         >>> repos = np.lib._datasource.Repository('http://www.xyz.edu/data')
-
     """
 
     def __init__(self, baseurl, destpath=os.curdir):
@@ -584,7 +655,19 @@
         DataSource.__del__(self)
 
     def _fullpath(self, path):
-        """Return complete path for path.  Prepends baseurl if necessary."""
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+        type
+            
+
+        """
         splitpath = path.split(self._baseurl, 2)
         if len(splitpath) == 1:
             result = os.path.join(self._baseurl, path)
@@ -593,13 +676,22 @@
         return result
 
     def _findfile(self, path):
-        """Extend DataSource method to prepend baseurl to ``path``."""
+        """Extend DataSource method to prepend baseurl to ``path``.
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
         return DataSource._findfile(self, self._fullpath(path))
 
     def abspath(self, path):
-        """
-        Return absolute path of file in the Repository directory.
-
+        """Return absolute path of file in the Repository directory.
+        
         If `path` is an URL, then `abspath` will return either the location
         the file exists locally or the location it would exist when opened
         using the `open` method.
@@ -613,18 +705,16 @@
 
         Returns
         -------
-        out : str
-            Complete path, including the `DataSource` destination directory.
-
+
+        
         """
         return DataSource.abspath(self, self._fullpath(path))
 
     def exists(self, path):
-        """
-        Test if path exists prepending Repository base URL to path.
-
+        """Test if path exists prepending Repository base URL to path.
+        
         Test if `path` exists as (and in this order):
-
+        
         - a local file.
         - a remote URL that has been downloaded and stored locally in the
           `DataSource` directory.
@@ -649,14 +739,12 @@
         stored locally in the `DataSource` directory, or is a valid remote
         URL.  `DataSource` does not discriminate between the two, the file
         is accessible if it exists in either location.
-
         """
         return DataSource.exists(self, self._fullpath(path))
 
     def open(self, path, mode='r', encoding=None, newline=None):
-        """
-        Open and return file-like object prepending Repository base URL.
-
+        """Open and return file-like object prepending Repository base URL.
+        
         If `path` is an URL, it will be downloaded, stored in the
         DataSource directory and opened from there.
 
@@ -674,20 +762,21 @@
             Open text file with given encoding. The default encoding will be
             what `io.open` uses.
         newline : {None, str}, optional
-            Newline to use when reading text file.
-
-        Returns
-        -------
-        out : file object
-            File object.
-
+            Newline to use when reading text file. (Default value = None)
+
+        Returns
+        -------
+
+        
         """
         return DataSource.open(self, self._fullpath(path), mode,
                                encoding=encoding, newline=newline)
 
     def listdir(self):
-        """
-        List files in the source Repository.
+        """List files in the source Repository.
+
+        Parameters
+        ----------
 
         Returns
         -------
@@ -697,7 +786,6 @@
         Notes
         -----
         Does not currently work for remote repositories.
-
         """
         if self._isurl(self._baseurl):
             raise NotImplementedError(
