# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/matrixlib/defmatrix.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/matrixlib/defmatrix.py
@@ -12,6 +12,17 @@
 
 
 def _convert_from_string(data):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+
+    Returns
+    -------
+
+    """
     for char in '[]':
         data = data.replace(char, '')
 
@@ -35,9 +46,8 @@
 
 @set_module('numpy')
 def asmatrix(data, dtype=None):
-    """
-    Interpret the input as a matrix.
-
+    """Interpret the input as a matrix.
+    
     Unlike `matrix`, `asmatrix` does not make a copy if the input is already
     a matrix or an ndarray.  Equivalent to ``matrix(data, copy=False)``.
 
@@ -46,7 +56,7 @@
     data : array_like
         Input data.
     dtype : data-type
-       Data-type of the output matrix.
+        Data-type of the output matrix. (Default value = None)
 
     Returns
     -------
@@ -56,28 +66,26 @@
     Examples
     --------
     >>> x = np.array([[1, 2], [3, 4]])
-
+    
     >>> m = np.asmatrix(x)
-
+    
     >>> x[0,0] = 5
-
+    
     >>> m
     matrix([[5, 2],
             [3, 4]])
-
     """
     return matrix(data, dtype=dtype, copy=False)
 
 
 @set_module('numpy')
 class matrix(N.ndarray):
-    """
-    matrix(data, dtype=None, copy=True)
-
+    """matrix(data, dtype=None, copy=True)
+    
     .. note:: It is no longer recommended to use this class, even for linear
               algebra. Instead use regular arrays. The class may be removed
               in the future.
-
+    
     Returns a matrix from an array-like object, or from a string of data.
     A matrix is a specialized 2-D array that retains its 2-D nature
     through operations.  It has certain special operators, such as ``*``
@@ -86,30 +94,31 @@
     Parameters
     ----------
     data : array_like or string
-       If `data` is a string, it is interpreted as a matrix with commas
-       or spaces separating columns, and semicolons separating rows.
+        If `data` is a string, it is interpreted as a matrix with commas
+        or spaces separating columns, and semicolons separating rows.
     dtype : data-type
-       Data-type of the output matrix.
+        Data-type of the output matrix.
     copy : bool
-       If `data` is already an `ndarray`, then this flag determines
-       whether the data is copied (the default), or whether a view is
-       constructed.
+        If `data` is already an `ndarray`, then this flag determines
+        whether the data is copied (the default), or whether a view is
+        constructed.
+
+    Returns
+    -------
 
     See Also
     --------
     array
-
     Examples
     --------
     >>> a = np.matrix('1 2; 3 4')
     >>> a
     matrix([[1, 2],
             [3, 4]])
-
+    
     >>> np.matrix([[1, 2], [3, 4]])
     matrix([[1, 2],
             [3, 4]])
-
     """
     __array_priority__ = 10.0
     def __new__(subtype, data, dtype=None, copy=True):
@@ -240,6 +249,15 @@
     def _align(self, axis):
         """A convenience function for operations that need to preserve axis
         orientation.
+
+        Parameters
+        ----------
+        axis :
+            
+
+        Returns
+        -------
+
         """
         if axis is None:
             return self[0, 0]
@@ -253,6 +271,15 @@
     def _collapse(self, axis):
         """A convenience function for operations that want to collapse
         to a scalar like _align, but are using keepdims=True
+
+        Parameters
+        ----------
+        axis :
+            
+
+        Returns
+        -------
+
         """
         if axis is None:
             return self[0, 0]
@@ -262,15 +289,19 @@
     # Necessary because base-class tolist expects dimension
     #  reduction by x[0]
     def tolist(self):
-        """
-        Return the matrix as a (possibly nested) list.
-
+        """Return the matrix as a (possibly nested) list.
+        
         See `ndarray.tolist` for full documentation.
 
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         See Also
         --------
         ndarray.tolist
-
         Examples
         --------
         >>> x = np.matrix(np.arange(12).reshape((3,4))); x
@@ -279,26 +310,34 @@
                 [ 8,  9, 10, 11]])
         >>> x.tolist()
         [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]
-
         """
         return self.__array__().tolist()
 
     # To preserve orientation of result...
     def sum(self, axis=None, dtype=None, out=None):
-        """
-        Returns the sum of the matrix elements, along the given axis.
-
+        """Returns the sum of the matrix elements, along the given axis.
+        
         Refer to `numpy.sum` for full documentation.
 
+        Parameters
+        ----------
+        axis :
+             (Default value = None)
+        dtype :
+             (Default value = None)
+        out :
+             (Default value = None)
+
+        Returns
+        -------
+
         See Also
         --------
         numpy.sum
-
         Notes
         -----
         This is the same as `ndarray.sum`, except that where an `ndarray` would
         be returned, a `matrix` object is returned instead.
-
         Examples
         --------
         >>> x = np.matrix([[1, 2], [4, 3]])
@@ -314,16 +353,14 @@
         >>> x.sum(axis=1, dtype='float', out=np.asmatrix(out))
         matrix([[3.],
                 [7.]])
-
         """
         return N.ndarray.sum(self, axis, dtype, out, keepdims=True)._collapse(axis)
 
 
     # To update docstring from array to matrix...
     def squeeze(self, axis=None):
-        """
-        Return a possibly reshaped matrix.
-
+        """Return a possibly reshaped matrix.
+        
         Refer to `numpy.squeeze` for more documentation.
 
         Parameters
@@ -331,7 +368,7 @@
         axis : None or int or tuple of ints, optional
             Selects a subset of the single-dimensional entries in the shape.
             If an axis is selected with shape entry greater than one,
-            an error is raised.
+            an error is raised. (Default value = None)
 
         Returns
         -------
@@ -341,7 +378,6 @@
         See Also
         --------
         numpy.squeeze : related function
-
         Notes
         -----
         If `m` has a single column then that column is returned
@@ -349,7 +385,6 @@
         The returned matrix is always either `m` itself or a view into `m`.
         Supplying an axis keyword argument will not affect the returned matrix
         but it may cause an error to be raised.
-
         Examples
         --------
         >>> c = np.matrix([[1], [2]])
@@ -367,16 +402,14 @@
         >>> m.squeeze()
         matrix([[1, 2],
                 [3, 4]])
-
         """
         return N.ndarray.squeeze(self, axis=axis)
 
 
     # To update docstring from array to matrix...
     def flatten(self, order='C'):
-        """
-        Return a flattened copy of the matrix.
-
+        """Return a flattened copy of the matrix.
+        
         All `N` elements of the matrix are placed into a single row.
 
         Parameters
@@ -398,7 +431,6 @@
         --------
         ravel : Return a flattened array.
         flat : A 1-D flat iterator over the matrix.
-
         Examples
         --------
         >>> m = np.matrix([[1,2], [3,4]])
@@ -406,25 +438,33 @@
         matrix([[1, 2, 3, 4]])
         >>> m.flatten('F')
         matrix([[1, 3, 2, 4]])
-
         """
         return N.ndarray.flatten(self, order=order)
 
     def mean(self, axis=None, dtype=None, out=None):
-        """
-        Returns the average of the matrix elements along the given axis.
-
+        """Returns the average of the matrix elements along the given axis.
+        
         Refer to `numpy.mean` for full documentation.
 
+        Parameters
+        ----------
+        axis :
+             (Default value = None)
+        dtype :
+             (Default value = None)
+        out :
+             (Default value = None)
+
+        Returns
+        -------
+
         See Also
         --------
         numpy.mean
-
         Notes
         -----
         Same as `ndarray.mean` except that, where that returns an `ndarray`,
         this returns a `matrix` object.
-
         Examples
         --------
         >>> x = np.matrix(np.arange(12).reshape((3, 4)))
@@ -440,25 +480,35 @@
         matrix([[ 1.5],
                 [ 5.5],
                 [ 9.5]])
-
         """
         return N.ndarray.mean(self, axis, dtype, out, keepdims=True)._collapse(axis)
 
     def std(self, axis=None, dtype=None, out=None, ddof=0):
-        """
-        Return the standard deviation of the array elements along the given axis.
-
+        """Return the standard deviation of the array elements along the given axis.
+        
         Refer to `numpy.std` for full documentation.
 
+        Parameters
+        ----------
+        axis :
+             (Default value = None)
+        dtype :
+             (Default value = None)
+        out :
+             (Default value = None)
+        ddof :
+             (Default value = 0)
+
+        Returns
+        -------
+
         See Also
         --------
         numpy.std
-
         Notes
         -----
         This is the same as `ndarray.std`, except that where an `ndarray` would
         be returned, a `matrix` object is returned instead.
-
         Examples
         --------
         >>> x = np.matrix(np.arange(12).reshape((3, 4)))
@@ -474,25 +524,35 @@
         matrix([[ 1.11803399],
                 [ 1.11803399],
                 [ 1.11803399]])
-
         """
         return N.ndarray.std(self, axis, dtype, out, ddof, keepdims=True)._collapse(axis)
 
     def var(self, axis=None, dtype=None, out=None, ddof=0):
-        """
-        Returns the variance of the matrix elements, along the given axis.
-
+        """Returns the variance of the matrix elements, along the given axis.
+        
         Refer to `numpy.var` for full documentation.
 
+        Parameters
+        ----------
+        axis :
+             (Default value = None)
+        dtype :
+             (Default value = None)
+        out :
+             (Default value = None)
+        ddof :
+             (Default value = 0)
+
+        Returns
+        -------
+
         See Also
         --------
         numpy.var
-
         Notes
         -----
         This is the same as `ndarray.var`, except that where an `ndarray` would
         be returned, a `matrix` object is returned instead.
-
         Examples
         --------
         >>> x = np.matrix(np.arange(12).reshape((3, 4)))
@@ -508,25 +568,33 @@
         matrix([[1.25],
                 [1.25],
                 [1.25]])
-
         """
         return N.ndarray.var(self, axis, dtype, out, ddof, keepdims=True)._collapse(axis)
 
     def prod(self, axis=None, dtype=None, out=None):
-        """
-        Return the product of the array elements over the given axis.
-
+        """Return the product of the array elements over the given axis.
+        
         Refer to `prod` for full documentation.
 
+        Parameters
+        ----------
+        axis :
+             (Default value = None)
+        dtype :
+             (Default value = None)
+        out :
+             (Default value = None)
+
+        Returns
+        -------
+
         See Also
         --------
         prod, ndarray.prod
-
         Notes
         -----
         Same as `ndarray.prod`, except, where that returns an `ndarray`, this
         returns a `matrix` object instead.
-
         Examples
         --------
         >>> x = np.matrix(np.arange(12).reshape((3,4))); x
@@ -541,49 +609,50 @@
         matrix([[   0],
                 [ 840],
                 [7920]])
-
         """
         return N.ndarray.prod(self, axis, dtype, out, keepdims=True)._collapse(axis)
 
     def any(self, axis=None, out=None):
-        """
-        Test whether any array element along a given axis evaluates to True.
-
+        """Test whether any array element along a given axis evaluates to True.
+        
         Refer to `numpy.any` for full documentation.
 
         Parameters
         ----------
         axis : int, optional
-            Axis along which logical OR is performed
+            Axis along which logical OR is performed (Default value = None)
         out : ndarray, optional
             Output to existing array instead of creating new one, must have
-            same shape as expected output
-
-        Returns
-        -------
-            any : bool, ndarray
-                Returns a single bool if `axis` is ``None``; otherwise,
-                returns `ndarray`
-
+            same shape as expected output (Default value = None)
+
+        Returns
+        -------
+
+        
         """
         return N.ndarray.any(self, axis, out, keepdims=True)._collapse(axis)
 
     def all(self, axis=None, out=None):
-        """
-        Test whether all matrix elements along a given axis evaluate to True.
-
-        Parameters
-        ----------
-        See `numpy.all` for complete descriptions
+        """Test whether all matrix elements along a given axis evaluate to True.
+
+        Parameters
+        ----------
+        See `numpy.all` for complete descriptions :
+            
+        axis :
+             (Default value = None)
+        out :
+             (Default value = None)
+
+        Returns
+        -------
 
         See Also
         --------
         numpy.all
-
         Notes
         -----
         This is the same as `ndarray.all`, but it returns a `matrix` object.
-
         Examples
         --------
         >>> x = np.matrix(np.arange(12).reshape((3,4))); x
@@ -604,27 +673,31 @@
         matrix([[ True],
                 [False],
                 [False]])
-
         """
         return N.ndarray.all(self, axis, out, keepdims=True)._collapse(axis)
 
     def max(self, axis=None, out=None):
-        """
-        Return the maximum value along an axis.
-
-        Parameters
-        ----------
-        See `amax` for complete descriptions
+        """Return the maximum value along an axis.
+
+        Parameters
+        ----------
+        See `amax` for complete descriptions :
+            
+        axis :
+             (Default value = None)
+        out :
+             (Default value = None)
+
+        Returns
+        -------
 
         See Also
         --------
         amax, ndarray.max
-
         Notes
         -----
         This is the same as `ndarray.max`, but returns a `matrix` object
         where `ndarray.max` would return an ndarray.
-
         Examples
         --------
         >>> x = np.matrix(np.arange(12).reshape((3,4))); x
@@ -639,31 +712,35 @@
         matrix([[ 3],
                 [ 7],
                 [11]])
-
         """
         return N.ndarray.max(self, axis, out, keepdims=True)._collapse(axis)
 
     def argmax(self, axis=None, out=None):
-        """
-        Indexes of the maximum values along an axis.
-
+        """Indexes of the maximum values along an axis.
+        
         Return the indexes of the first occurrences of the maximum values
         along the specified axis.  If axis is None, the index is for the
         flattened matrix.
 
         Parameters
         ----------
-        See `numpy.argmax` for complete descriptions
+        See `numpy.argmax` for complete descriptions :
+            
+        axis :
+             (Default value = None)
+        out :
+             (Default value = None)
+
+        Returns
+        -------
 
         See Also
         --------
         numpy.argmax
-
         Notes
         -----
         This is the same as `ndarray.argmax`, but returns a `matrix` object
         where `ndarray.argmax` would return an `ndarray`.
-
         Examples
         --------
         >>> x = np.matrix(np.arange(12).reshape((3,4))); x
@@ -678,27 +755,31 @@
         matrix([[3],
                 [3],
                 [3]])
-
         """
         return N.ndarray.argmax(self, axis, out)._align(axis)
 
     def min(self, axis=None, out=None):
-        """
-        Return the minimum value along an axis.
-
-        Parameters
-        ----------
-        See `amin` for complete descriptions.
+        """Return the minimum value along an axis.
+
+        Parameters
+        ----------
+        See `amin` for complete descriptions. :
+            
+        axis :
+             (Default value = None)
+        out :
+             (Default value = None)
+
+        Returns
+        -------
 
         See Also
         --------
         amin, ndarray.min
-
         Notes
         -----
         This is the same as `ndarray.min`, but returns a `matrix` object
         where `ndarray.min` would return an ndarray.
-
         Examples
         --------
         >>> x = -np.matrix(np.arange(12).reshape((3,4))); x
@@ -713,31 +794,35 @@
         matrix([[ -3],
                 [ -7],
                 [-11]])
-
         """
         return N.ndarray.min(self, axis, out, keepdims=True)._collapse(axis)
 
     def argmin(self, axis=None, out=None):
-        """
-        Indexes of the minimum values along an axis.
-
+        """Indexes of the minimum values along an axis.
+        
         Return the indexes of the first occurrences of the minimum values
         along the specified axis.  If axis is None, the index is for the
         flattened matrix.
 
         Parameters
         ----------
-        See `numpy.argmin` for complete descriptions.
+        See `numpy.argmin` for complete descriptions. :
+            
+        axis :
+             (Default value = None)
+        out :
+             (Default value = None)
+
+        Returns
+        -------
 
         See Also
         --------
         numpy.argmin
-
         Notes
         -----
         This is the same as `ndarray.argmin`, but returns a `matrix` object
         where `ndarray.argmin` would return an `ndarray`.
-
         Examples
         --------
         >>> x = -np.matrix(np.arange(12).reshape((3,4))); x
@@ -752,25 +837,31 @@
         matrix([[3],
                 [3],
                 [3]])
-
         """
         return N.ndarray.argmin(self, axis, out)._align(axis)
 
     def ptp(self, axis=None, out=None):
-        """
-        Peak-to-peak (maximum - minimum) value along the given axis.
-
+        """Peak-to-peak (maximum - minimum) value along the given axis.
+        
         Refer to `numpy.ptp` for full documentation.
 
+        Parameters
+        ----------
+        axis :
+             (Default value = None)
+        out :
+             (Default value = None)
+
+        Returns
+        -------
+
         See Also
         --------
         numpy.ptp
-
         Notes
         -----
         Same as `ndarray.ptp`, except, where that would return an `ndarray` object,
         this returns a `matrix` object.
-
         Examples
         --------
         >>> x = np.matrix(np.arange(12).reshape((3,4))); x
@@ -785,18 +876,17 @@
         matrix([[3],
                 [3],
                 [3]])
-
         """
         return N.ndarray.ptp(self, axis, out)._align(axis)
 
     @property
     def I(self):
-        """
-        Returns the (multiplicative) inverse of invertible `self`.
-
-        Parameters
-        ----------
-        None
+        """Returns the (multiplicative) inverse of invertible `self`.
+
+        Parameters
+        ----------
+        None :
+            
 
         Returns
         -------
@@ -807,13 +897,12 @@
 
         Raises
         ------
-        numpy.linalg.LinAlgError: Singular matrix
+        numpy.linalg.LinAlgError
             If `self` is singular.
 
         See Also
         --------
         linalg.inv
-
         Examples
         --------
         >>> m = np.matrix('[1, 2; 3, 4]'); m
@@ -825,7 +914,6 @@
         >>> m.getI() * m
         matrix([[ 1.,  0.], # may vary
                 [ 0.,  1.]])
-
         """
         M, N = self.shape
         if M == N:
@@ -836,14 +924,14 @@
 
     @property
     def A(self):
-        """
-        Return `self` as an `ndarray` object.
-
+        """Return `self` as an `ndarray` object.
+        
         Equivalent to ``np.asarray(self)``.
 
         Parameters
         ----------
-        None
+        None :
+            
 
         Returns
         -------
@@ -860,20 +948,19 @@
         array([[ 0,  1,  2,  3],
                [ 4,  5,  6,  7],
                [ 8,  9, 10, 11]])
-
         """
         return self.__array__()
 
     @property
     def A1(self):
-        """
-        Return `self` as a flattened `ndarray`.
-
+        """Return `self` as a flattened `ndarray`.
+        
         Equivalent to ``np.asarray(x).ravel()``
 
         Parameters
         ----------
-        None
+        None :
+            
 
         Returns
         -------
@@ -888,16 +975,13 @@
                 [ 8,  9, 10, 11]])
         >>> x.getA1()
         array([ 0,  1,  2, ...,  9, 10, 11])
-
-
         """
         return self.__array__().ravel()
 
 
     def ravel(self, order='C'):
-        """
-        Return a flattened matrix.
-
+        """Return a flattened matrix.
+        
         Refer to `numpy.ravel` for more documentation.
 
         Parameters
@@ -928,20 +1012,19 @@
         matrix.flatten : returns a similar output matrix but always a copy
         matrix.flat : a flat iterator on the array.
         numpy.ravel : related function which returns an ndarray
-
         """
         return N.ndarray.ravel(self, order=order)
 
     @property
     def T(self):
-        """
-        Returns the transpose of the matrix.
-
+        """Returns the transpose of the matrix.
+        
         Does *not* conjugate!  For the complex conjugate transpose, use ``.H``.
 
         Parameters
         ----------
-        None
+        None :
+            
 
         Returns
         -------
@@ -951,7 +1034,6 @@
         See Also
         --------
         transpose, getH
-
         Examples
         --------
         >>> m = np.matrix('[1, 2; 3, 4]')
@@ -961,20 +1043,19 @@
         >>> m.getT()
         matrix([[1, 3],
                 [2, 4]])
-
         """
         return self.transpose()
 
     @property
     def H(self):
-        """
-        Returns the (complex) conjugate transpose of `self`.
-
+        """Returns the (complex) conjugate transpose of `self`.
+        
         Equivalent to ``np.transpose(self)`` if `self` is real-valued.
 
         Parameters
         ----------
-        None
+        None :
+            
 
         Returns
         -------
@@ -993,7 +1074,6 @@
                 [ 1. +1.j,  5. +5.j,  9. +9.j],
                 [ 2. +2.j,  6. +6.j, 10.+10.j],
                 [ 3. +3.j,  7. +7.j, 11.+11.j]])
-
         """
         if issubclass(self.dtype.type, N.complexfloating):
             return self.transpose().conjugate()
@@ -1008,6 +1088,21 @@
     getI = I.fget
 
 def _from_string(str, gdict, ldict):
+    """
+
+    Parameters
+    ----------
+    str :
+        
+    gdict :
+        
+    ldict :
+        
+
+    Returns
+    -------
+
+    """
     rows = str.split(';')
     rowtup = []
     for row in rows:
@@ -1034,8 +1129,7 @@
 
 @set_module('numpy')
 def bmat(obj, ldict=None, gdict=None):
-    """
-    Build a matrix object from a string, nested sequence, or array.
+    """Build a matrix object from a string, nested sequence, or array.
 
     Parameters
     ----------
@@ -1044,10 +1138,10 @@
         referenced by name.
     ldict : dict, optional
         A dictionary that replaces local operands in current frame.
-        Ignored if `obj` is not a string or `gdict` is None.
+        Ignored if `obj` is not a string or `gdict` is None. (Default value = None)
     gdict : dict, optional
         A dictionary that replaces global operands in current frame.
-        Ignored if `obj` is not a string.
+        Ignored if `obj` is not a string. (Default value = None)
 
     Returns
     -------
@@ -1059,16 +1153,15 @@
     block :
         A generalization of this function for N-d arrays, that returns normal
         ndarrays.
-
     Examples
     --------
+    
+    All the following expressions construct the same block matrix:
     >>> A = np.mat('1 1; 1 1')
     >>> B = np.mat('2 2; 2 2')
     >>> C = np.mat('3 4; 5 6')
     >>> D = np.mat('7 8; 9 0')
-
-    All the following expressions construct the same block matrix:
-
+    
     >>> np.bmat([[A, B], [C, D]])
     matrix([[1, 1, 2, 2],
             [1, 1, 2, 2],
@@ -1084,7 +1177,6 @@
             [1, 1, 2, 2],
             [3, 4, 7, 8],
             [5, 6, 9, 0]])
-
     """
     if isinstance(obj, str):
         if gdict is None:
