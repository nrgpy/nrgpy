# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/rfc3986/parseresult.py
+++ b/..//venv/lib/python3.8/site-packages/rfc3986/parseresult.py
@@ -28,7 +28,19 @@
 
 
 class ParseResultMixin(object):
+    """ """
     def _generate_authority(self, attributes):
+        """
+
+        Parameters
+        ----------
+        attributes :
+            
+
+        Returns
+        -------
+
+        """
         # I swear I did not align the comparisons below. That's just how they
         # happened to align based on pep8 and attribute lengths.
         userinfo, host, port = (attributes[p]
@@ -68,9 +80,16 @@
 class ParseResult(namedtuple('ParseResult', PARSED_COMPONENTS),
                   ParseResultMixin):
     """Implementation of urlparse compatibility class.
-
+    
     This uses the URIReference logic to handle compatibility with the
     urlparse.ParseResult class.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     slots = ()
@@ -94,7 +113,31 @@
     @classmethod
     def from_parts(cls, scheme=None, userinfo=None, host=None, port=None,
                    path=None, query=None, fragment=None, encoding='utf-8'):
-        """Create a ParseResult instance from its parts."""
+        """Create a ParseResult instance from its parts.
+
+        Parameters
+        ----------
+        scheme :
+             (Default value = None)
+        userinfo :
+             (Default value = None)
+        host :
+             (Default value = None)
+        port :
+             (Default value = None)
+        path :
+             (Default value = None)
+        query :
+             (Default value = None)
+        fragment :
+             (Default value = None)
+        encoding :
+             (Default value = 'utf-8')
+
+        Returns
+        -------
+
+        """
         authority = ''
         if userinfo is not None:
             authority += userinfo + '@'
@@ -124,12 +167,30 @@
                     lazy_normalize=True):
         """Parse a URI from the given unicode URI string.
 
-        :param str uri_string: Unicode URI to be parsed into a reference.
-        :param str encoding: The encoding of the string provided
-        :param bool strict: Parse strictly according to :rfc:`3986` if True.
+        Parameters
+        ----------
+        str :
+            uri_string: Unicode URI to be parsed into a reference.
+        str :
+            encoding: The encoding of the string provided
+        bool :
+            strict: Parse strictly according to :rfc:`3986` if True.
             If False, parse similarly to the standard library's urlparse
             function.
-        :returns: :class:`ParseResult` or subclass thereof
+        uri_string :
+            
+        encoding :
+             (Default value = 'utf-8')
+        strict :
+             (Default value = True)
+        lazy_normalize :
+             (Default value = True)
+
+        Returns
+        -------
+        type
+            class:`ParseResult` or subclass thereof
+
         """
         reference = uri.URIReference.from_string(uri_string, encoding)
         if not lazy_normalize:
@@ -148,14 +209,36 @@
 
     @property
     def authority(self):
-        """Return the normalized authority."""
+        """ """
         return self.reference.authority
 
     def copy_with(self, scheme=misc.UseExisting, userinfo=misc.UseExisting,
                   host=misc.UseExisting, port=misc.UseExisting,
                   path=misc.UseExisting, query=misc.UseExisting,
                   fragment=misc.UseExisting):
-        """Create a copy of this instance replacing with specified parts."""
+        """Create a copy of this instance replacing with specified parts.
+
+        Parameters
+        ----------
+        scheme :
+             (Default value = misc.UseExisting)
+        userinfo :
+             (Default value = misc.UseExisting)
+        host :
+             (Default value = misc.UseExisting)
+        port :
+             (Default value = misc.UseExisting)
+        path :
+             (Default value = misc.UseExisting)
+        query :
+             (Default value = misc.UseExisting)
+        fragment :
+             (Default value = misc.UseExisting)
+
+        Returns
+        -------
+
+        """
         attributes = zip(PARSED_COMPONENTS,
                          (scheme, userinfo, host, port, path, query, fragment))
         attrs_dict = {}
@@ -172,7 +255,17 @@
         return ParseResult(uri_ref=ref, encoding=self.encoding, **attrs_dict)
 
     def encode(self, encoding=None):
-        """Convert to an instance of ParseResultBytes."""
+        """Convert to an instance of ParseResultBytes.
+
+        Parameters
+        ----------
+        encoding :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         encoding = encoding or self.encoding
         attrs = dict(
             zip(PARSED_COMPONENTS,
@@ -187,8 +280,16 @@
     def unsplit(self, use_idna=False):
         """Create a URI string from the components.
 
-        :returns: The parsed URI reconstituted as a string.
-        :rtype: str
+        Parameters
+        ----------
+        use_idna :
+             (Default value = False)
+
+        Returns
+        -------
+        str
+            The parsed URI reconstituted as a string.
+
         """
         parse_result = self
         if use_idna and self.host:
@@ -223,7 +324,33 @@
     def from_parts(cls, scheme=None, userinfo=None, host=None, port=None,
                    path=None, query=None, fragment=None, encoding='utf-8',
                    lazy_normalize=True):
-        """Create a ParseResult instance from its parts."""
+        """Create a ParseResult instance from its parts.
+
+        Parameters
+        ----------
+        scheme :
+             (Default value = None)
+        userinfo :
+             (Default value = None)
+        host :
+             (Default value = None)
+        port :
+             (Default value = None)
+        path :
+             (Default value = None)
+        query :
+             (Default value = None)
+        fragment :
+             (Default value = None)
+        encoding :
+             (Default value = 'utf-8')
+        lazy_normalize :
+             (Default value = True)
+
+        Returns
+        -------
+
+        """
         authority = ''
         if userinfo is not None:
             authority += userinfo + '@'
@@ -257,12 +384,30 @@
                     lazy_normalize=True):
         """Parse a URI from the given unicode URI string.
 
-        :param str uri_string: Unicode URI to be parsed into a reference.
-        :param str encoding: The encoding of the string provided
-        :param bool strict: Parse strictly according to :rfc:`3986` if True.
+        Parameters
+        ----------
+        str :
+            uri_string: Unicode URI to be parsed into a reference.
+        str :
+            encoding: The encoding of the string provided
+        bool :
+            strict: Parse strictly according to :rfc:`3986` if True.
             If False, parse similarly to the standard library's urlparse
             function.
-        :returns: :class:`ParseResultBytes` or subclass thereof
+        uri_string :
+            
+        encoding :
+             (Default value = 'utf-8')
+        strict :
+             (Default value = True)
+        lazy_normalize :
+             (Default value = True)
+
+        Returns
+        -------
+        type
+            class:`ParseResultBytes` or subclass thereof
+
         """
         reference = uri.URIReference.from_string(uri_string, encoding)
         if not lazy_normalize:
@@ -283,14 +428,38 @@
 
     @property
     def authority(self):
-        """Return the normalized authority."""
+        """ """
         return self.reference.authority.encode(self.encoding)
 
     def copy_with(self, scheme=misc.UseExisting, userinfo=misc.UseExisting,
                   host=misc.UseExisting, port=misc.UseExisting,
                   path=misc.UseExisting, query=misc.UseExisting,
                   fragment=misc.UseExisting, lazy_normalize=True):
-        """Create a copy of this instance replacing with specified parts."""
+        """Create a copy of this instance replacing with specified parts.
+
+        Parameters
+        ----------
+        scheme :
+             (Default value = misc.UseExisting)
+        userinfo :
+             (Default value = misc.UseExisting)
+        host :
+             (Default value = misc.UseExisting)
+        port :
+             (Default value = misc.UseExisting)
+        path :
+             (Default value = misc.UseExisting)
+        query :
+             (Default value = misc.UseExisting)
+        fragment :
+             (Default value = misc.UseExisting)
+        lazy_normalize :
+             (Default value = True)
+
+        Returns
+        -------
+
+        """
         attributes = zip(PARSED_COMPONENTS,
                          (scheme, userinfo, host, port, path, query, fragment))
         attrs_dict = {}
@@ -321,8 +490,16 @@
     def unsplit(self, use_idna=False):
         """Create a URI bytes object from the components.
 
-        :returns: The parsed URI reconstituted as a string.
-        :rtype: bytes
+        Parameters
+        ----------
+        use_idna :
+             (Default value = False)
+
+        Returns
+        -------
+        bytes
+            The parsed URI reconstituted as a string.
+
         """
         parse_result = self
         if use_idna and self.host:
@@ -338,6 +515,17 @@
 
 
 def split_authority(authority):
+    """
+
+    Parameters
+    ----------
+    authority :
+        
+
+    Returns
+    -------
+
+    """
     # Initialize our expected return values
     userinfo = host = port = None
     # Initialize an extra var we may need to use
@@ -365,6 +553,19 @@
 
 
 def authority_from(reference, strict):
+    """
+
+    Parameters
+    ----------
+    reference :
+        
+    strict :
+        
+
+    Returns
+    -------
+
+    """
     try:
         subauthority = reference.authority_info()
     except exceptions.InvalidAuthority:
