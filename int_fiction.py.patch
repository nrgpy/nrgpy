# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pygments/lexers/int_fiction.py
+++ b/..//venv/lib/python3.8/site-packages/pygments/lexers/int_fiction.py
@@ -21,10 +21,16 @@
 
 
 class Inform6Lexer(RegexLexer):
-    """
-    For `Inform 6 <http://inform-fiction.org/>`_ source code.
-
+    """For `Inform 6 <http://inform-fiction.org/>`_ source code.
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Inform 6'
@@ -486,6 +492,17 @@
     }
 
     def get_tokens_unprocessed(self, text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         # 'in' is either a keyword or an operator.
         # If the token two tokens after 'in' is ')', 'in' is a keyword:
         #   objectloop(a in b)
@@ -518,7 +535,17 @@
 
     def analyse_text(text):
         """We try to find a keyword which seem relatively common, unfortunately
-        there is a decent overlap with Smalltalk keywords otherwise here.."""
+        there is a decent overlap with Smalltalk keywords otherwise here..
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         result = 0
         if re.search('\borigsource\b', text, re.IGNORECASE):
             result += 0.05
@@ -527,10 +554,16 @@
 
 
 class Inform7Lexer(RegexLexer):
-    """
-    For `Inform 7 <http://inform7.com/>`_ source code.
-
+    """For `Inform 7 <http://inform7.com/>`_ source code.
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Inform 7'
@@ -730,11 +763,17 @@
 
 
 class Inform6TemplateLexer(Inform7Lexer):
-    """
-    For `Inform 6 template
+    """For `Inform 6 template
     <http://inform7.com/sources/src/i6template/Woven/index.html>`_ code.
-
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Inform 6 template'
@@ -742,13 +781,26 @@
     filenames = ['*.i6t']
 
     def get_tokens_unprocessed(self, text, stack=('+i6t-root',)):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+        stack :
+             (Default value = ('+i6t-root')
+        ) :
+            
+
+        Returns
+        -------
+
+        """
         return Inform7Lexer.get_tokens_unprocessed(self, text, stack)
 
 
 class Tads3Lexer(RegexLexer):
-    """
-    For `TADS 3 <http://www.tads.org/>`_ source code.
-    """
+    """For `TADS 3 <http://www.tads.org/>`_ source code."""
 
     name = 'TADS 3'
     aliases = ['tads3']
@@ -768,6 +820,23 @@
     _ws_pp = r'(?:\\\n|[^\S\n]|%s|%s)' % (_comment_single, _comment_multiline)
 
     def _make_string_state(triple, double, verbatim=None, _escape=_escape):
+        """
+
+        Parameters
+        ----------
+        triple :
+            
+        double :
+            
+        verbatim :
+             (Default value = None)
+        _escape :
+             (Default value = _escape)
+
+        Returns
+        -------
+
+        """
         if verbatim:
             verbatim = ''.join(['(?:%s|%s)' % (re.escape(c.lower()),
                                                re.escape(c.upper()))
@@ -818,6 +887,21 @@
         return state
 
     def _make_tag_state(triple, double, _escape=_escape):
+        """
+
+        Parameters
+        ----------
+        triple :
+            
+        double :
+            
+        _escape :
+             (Default value = _escape)
+
+        Returns
+        -------
+
+        """
         char = r'"' if double else r"'"
         quantifier = r'{3,}' if triple else r''
         state_name = '%s%sqt' % ('t' if triple else '', 'd' if double else 's')
@@ -844,6 +928,23 @@
 
     def _make_attribute_value_state(terminator, host_triple, host_double,
                                     _escape=_escape):
+        """
+
+        Parameters
+        ----------
+        terminator :
+            
+        host_triple :
+            
+        host_double :
+            
+        _escape :
+             (Default value = _escape)
+
+        Returns
+        -------
+
+        """
         token = (String.Double if terminator == r'"' else
                  String.Single if terminator == r"'" else String.Other)
         host_char = r'"' if host_double else r"'"
@@ -1331,6 +1432,19 @@
     }
 
     def get_tokens_unprocessed(self, text, **kwargs):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         pp = r'^%s*#%s*' % (self._ws_pp, self._ws_pp)
         if_false_level = 0
         for index, token, value in (
@@ -1356,7 +1470,17 @@
     def analyse_text(text):
         """This is a rather generic descriptive language without strong
         identifiers. It looks like a 'GameMainDef' has to be present,
-        and/or a 'versionInfo' with an 'IFID' field."""
+        and/or a 'versionInfo' with an 'IFID' field.
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         result = 0
         if '__TADS' in text or 'GameMainDef' in text:
             result += 0.2
