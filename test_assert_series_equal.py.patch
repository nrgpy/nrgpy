# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/util/test_assert_series_equal.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/util/test_assert_series_equal.py
@@ -6,36 +6,44 @@
 
 
 def _assert_series_equal_both(a, b, **kwargs):
-    """
-    Check that two Series equal.
-
+    """Check that two Series equal.
+    
     This check is performed commutatively.
 
     Parameters
     ----------
-    a : Series
-        The first Series to compare.
-    b : Series
-        The second Series to compare.
-    kwargs : dict
-        The arguments passed to `tm.assert_series_equal`.
+    a :
+        
+    b :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    
     """
     tm.assert_series_equal(a, b, **kwargs)
     tm.assert_series_equal(b, a, **kwargs)
 
 
 def _assert_not_series_equal(a, b, **kwargs):
-    """
-    Check that two Series are not equal.
-
-    Parameters
-    ----------
-    a : Series
-        The first Series to compare.
-    b : Series
-        The second Series to compare.
-    kwargs : dict
-        The arguments passed to `tm.assert_series_equal`.
+    """Check that two Series are not equal.
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    
     """
     try:
         tm.assert_series_equal(a, b, **kwargs)
@@ -47,19 +55,23 @@
 
 
 def _assert_not_series_equal_both(a, b, **kwargs):
-    """
-    Check that two Series are not equal.
-
+    """Check that two Series are not equal.
+    
     This check is performed commutatively.
 
     Parameters
     ----------
-    a : Series
-        The first Series to compare.
-    b : Series
-        The second Series to compare.
-    kwargs : dict
-        The arguments passed to `tm.assert_series_equal`.
+    a :
+        
+    b :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    
     """
     _assert_not_series_equal(a, b, **kwargs)
     _assert_not_series_equal(b, a, **kwargs)
@@ -67,6 +79,17 @@
 
 @pytest.mark.parametrize("data", [range(3), list("abc"), list("áàä")])
 def test_series_equal(data):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+
+    Returns
+    -------
+
+    """
     _assert_series_equal_both(Series(data), Series(data))
 
 
@@ -81,6 +104,19 @@
     ],
 )
 def test_series_not_equal_value_mismatch(data1, data2):
+    """
+
+    Parameters
+    ----------
+    data1 :
+        
+    data2 :
+        
+
+    Returns
+    -------
+
+    """
     _assert_not_series_equal_both(Series(data1), Series(data2))
 
 
@@ -93,6 +129,17 @@
     ],
 )
 def test_series_not_equal_metadata_mismatch(kwargs):
+    """
+
+    Parameters
+    ----------
+    kwargs :
+        
+
+    Returns
+    -------
+
+    """
     data = range(3)
     s1 = Series(data)
 
@@ -104,6 +151,23 @@
 @pytest.mark.parametrize("dtype", ["float32", "float64"])
 @pytest.mark.parametrize("decimals", [0, 1, 2, 3, 5, 10])
 def test_less_precise(data1, data2, dtype, decimals):
+    """
+
+    Parameters
+    ----------
+    data1 :
+        
+    data2 :
+        
+    dtype :
+        
+    decimals :
+        
+
+    Returns
+    -------
+
+    """
     rtol = 10 ** -decimals
     s1 = Series([data1], dtype=dtype)
     s2 = Series([data2], dtype=dtype)
@@ -140,6 +204,23 @@
     ],
 )
 def test_series_equal_index_dtype(s1, s2, msg, check_index_type):
+    """
+
+    Parameters
+    ----------
+    s1 :
+        
+    s2 :
+        
+    msg :
+        
+    check_index_type :
+        
+
+    Returns
+    -------
+
+    """
     kwargs = dict(check_index_type=check_index_type)
 
     if check_index_type:
@@ -150,11 +231,19 @@
 
 
 def test_series_equal_length_mismatch(rtol):
-    msg = """Series are different
-
-Series length are different
-\\[left\\]:  3, RangeIndex\\(start=0, stop=3, step=1\\)
-\\[right\\]: 4, RangeIndex\\(start=0, stop=4, step=1\\)"""
+    """msg = """Series are different
+    
+    Series length are different
+    \\[left\\]:  3, RangeIndex\\(start=0, stop=3, step=1\\)
+    \\[right\\]: 4, RangeIndex\\(start=0, stop=4, step=1\\)
+
+    Parameters
+    ----------
+    rtol :
+        
+
+    Returns
+    -------
 
     s1 = Series([1, 2, 3])
     s2 = Series([1, 2, 3, 4])
@@ -164,12 +253,20 @@
 
 
 def test_series_equal_numeric_values_mismatch(rtol):
-    msg = """Series are different
-
-Series values are different \\(33\\.33333 %\\)
-\\[index\\]: \\[0, 1, 2\\]
-\\[left\\]:  \\[1, 2, 3\\]
-\\[right\\]: \\[1, 2, 4\\]"""
+    """msg = """Series are different
+    
+    Series values are different \\(33\\.33333 %\\)
+    \\[index\\]: \\[0, 1, 2\\]
+    \\[left\\]:  \\[1, 2, 3\\]
+    \\[right\\]: \\[1, 2, 4\\]
+
+    Parameters
+    ----------
+    rtol :
+        
+
+    Returns
+    -------
 
     s1 = Series([1, 2, 3])
     s2 = Series([1, 2, 4])
@@ -179,14 +276,22 @@
 
 
 def test_series_equal_categorical_values_mismatch(rtol):
-    msg = """Series are different
-
-Series values are different \\(66\\.66667 %\\)
-\\[index\\]: \\[0, 1, 2\\]
-\\[left\\]:  \\['a', 'b', 'c'\\]
-Categories \\(3, object\\): \\['a', 'b', 'c'\\]
-\\[right\\]: \\['a', 'c', 'b'\\]
-Categories \\(3, object\\): \\['a', 'b', 'c'\\]"""
+    """msg = """Series are different
+    
+    Series values are different \\(66\\.66667 %\\)
+    \\[index\\]: \\[0, 1, 2\\]
+    \\[left\\]:  \\['a', 'b', 'c'\\]
+    Categories \\(3, object\\): \\['a', 'b', 'c'\\]
+    \\[right\\]: \\['a', 'c', 'b'\\]
+    Categories \\(3, object\\): \\['a', 'b', 'c'\\]
+
+    Parameters
+    ----------
+    rtol :
+        
+
+    Returns
+    -------
 
     s1 = Series(Categorical(["a", "b", "c"]))
     s2 = Series(Categorical(["a", "c", "b"]))
@@ -196,12 +301,20 @@
 
 
 def test_series_equal_datetime_values_mismatch(rtol):
-    msg = """numpy array are different
-
-numpy array values are different \\(100.0 %\\)
-\\[index\\]: \\[0, 1, 2\\]
-\\[left\\]:  \\[1514764800000000000, 1514851200000000000, 1514937600000000000\\]
-\\[right\\]: \\[1549065600000000000, 1549152000000000000, 1549238400000000000\\]"""
+    """msg = """numpy array are different
+    
+    numpy array values are different \\(100.0 %\\)
+    \\[index\\]: \\[0, 1, 2\\]
+    \\[left\\]:  \\[1514764800000000000, 1514851200000000000, 1514937600000000000\\]
+    \\[right\\]: \\[1549065600000000000, 1549152000000000000, 1549238400000000000\\]
+
+    Parameters
+    ----------
+    rtol :
+        
+
+    Returns
+    -------
 
     s1 = Series(pd.date_range("2018-01-01", periods=3, freq="D"))
     s2 = Series(pd.date_range("2019-02-02", periods=3, freq="D"))
@@ -211,12 +324,20 @@
 
 
 def test_series_equal_categorical_mismatch(check_categorical):
-    msg = """Attributes of Series are different
-
-Attribute "dtype" are different
-\\[left\\]:  CategoricalDtype\\(categories=\\['a', 'b'\\], ordered=False\\)
-\\[right\\]: CategoricalDtype\\(categories=\\['a', 'b', 'c'\\], \
-ordered=False\\)"""
+    """msg = """Attributes of Series are different
+    
+    Attribute "dtype" are different
+    \\[left\\]:  CategoricalDtype\\(categories=\\['a', 'b'\\], ordered=False\\)
+    \\[right\\]: CategoricalDtype\\(categories=\\['a', 'b', 'c'\\], \
+    ordered=False\\)
+
+    Parameters
+    ----------
+    check_categorical :
+        
+
+    Returns
+    -------
 
     s1 = Series(Categorical(["a", "b"]))
     s2 = Series(Categorical(["a", "b"], categories=list("abc")))
@@ -229,6 +350,7 @@
 
 
 def test_assert_series_equal_extension_dtype_mismatch():
+    """ """
     # https://github.com/pandas-dev/pandas/issues/32747
     left = Series(pd.array([1, 2, 3], dtype="Int64"))
     right = left.astype(int)
@@ -246,6 +368,7 @@
 
 
 def test_assert_series_equal_interval_dtype_mismatch():
+    """ """
     # https://github.com/pandas-dev/pandas/issues/32747
     left = Series([pd.Interval(0, 1)], dtype="interval")
     right = left.astype(object)
@@ -263,7 +386,9 @@
 
 
 def test_series_equal_series_type():
+    """ """
     class MySeries(Series):
+        """ """
         pass
 
     s1 = Series([1, 2])
@@ -284,6 +409,7 @@
 
 
 def test_series_equal_exact_for_nonnumeric():
+    """ """
     # https://github.com/pandas-dev/pandas/issues/35446
     s1 = Series(["a", "b"])
     s2 = Series(["a", "b"])
@@ -300,6 +426,17 @@
 
 @pytest.mark.parametrize("right_dtype", ["Int32", "int64"])
 def test_assert_series_equal_ignore_extension_dtype_mismatch(right_dtype):
+    """
+
+    Parameters
+    ----------
+    right_dtype :
+        
+
+    Returns
+    -------
+
+    """
     # https://github.com/pandas-dev/pandas/issues/35715
     left = pd.Series([1, 2, 3], dtype="Int64")
     right = pd.Series([1, 2, 3], dtype=right_dtype)
