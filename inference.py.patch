# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/dtypes/inference.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/dtypes/inference.py
@@ -29,9 +29,8 @@
 
 
 def is_number(obj) -> bool:
-    """
-    Check if the object is a number.
-
+    """Check if the object is a number.
+    
     Returns True when the object is a number, and False if is not.
 
     Parameters
@@ -47,19 +46,18 @@
     See Also
     --------
     api.types.is_integer: Checks a subgroup of numbers.
-
-    Examples
-    --------
+    Examples
+    --------
+    
+    Booleans are valid because they are int subclass.
     >>> pd.api.types.is_number(1)
     True
     >>> pd.api.types.is_number(7.15)
     True
-
-    Booleans are valid because they are int subclass.
-
+    
     >>> pd.api.types.is_number(False)
     True
-
+    
     >>> pd.api.types.is_number("foo")
     False
     >>> pd.api.types.is_number("5")
@@ -69,12 +67,12 @@
 
 
 def _iterable_not_string(obj) -> bool:
-    """
-    Check if the object is an iterable but not a string.
+    """Check if the object is an iterable but not a string.
 
     Parameters
     ----------
     obj : The object to check.
+        
 
     Returns
     -------
@@ -94,19 +92,19 @@
 
 
 def is_file_like(obj) -> bool:
-    """
-    Check if the object is a file-like object.
-
+    """Check if the object is a file-like object.
+    
     For objects to be considered file-like, they must
     be an iterator AND have either a `read` and/or `write`
     method as an attribute.
-
+    
     Note: file-like objects must be iterable, but
     iterable objects need not be file-like.
 
     Parameters
     ----------
     obj : The object to check
+        
 
     Returns
     -------
@@ -132,12 +130,12 @@
 
 
 def is_re(obj) -> bool:
-    """
-    Check if the object is a regex pattern instance.
-
-    Parameters
-    ----------
-    obj : The object to check
+    """Check if the object is a regex pattern instance.
+
+    Parameters
+    ----------
+    obj : The object to check
+        
 
     Returns
     -------
@@ -155,12 +153,12 @@
 
 
 def is_re_compilable(obj) -> bool:
-    """
-    Check if the object can be compiled into a regex pattern instance.
-
-    Parameters
-    ----------
-    obj : The object to check
+    """Check if the object can be compiled into a regex pattern instance.
+
+    Parameters
+    ----------
+    obj : The object to check
+        
 
     Returns
     -------
@@ -183,15 +181,15 @@
 
 
 def is_array_like(obj) -> bool:
-    """
-    Check if the object is array-like.
-
+    """Check if the object is array-like.
+    
     For an object to be considered array-like, it must be list-like and
     have a `dtype` attribute.
 
     Parameters
     ----------
     obj : The object to check
+        
 
     Returns
     -------
@@ -215,13 +213,13 @@
 
 
 def is_nested_list_like(obj) -> bool:
-    """
-    Check if the object is list-like, and that all of its elements
+    """Check if the object is list-like, and that all of its elements
     are also list-like.
 
     Parameters
     ----------
     obj : The object to check
+        
 
     Returns
     -------
@@ -230,27 +228,25 @@
 
     Examples
     --------
-    >>> is_nested_list_like([[1, 2, 3]])
-    True
-    >>> is_nested_list_like([{1, 2, 3}, {1, 2, 3}])
-    True
-    >>> is_nested_list_like(["foo"])
-    False
-    >>> is_nested_list_like([])
-    False
-    >>> is_nested_list_like([[1, 2, 3], 1])
-    False
-
     Notes
     -----
     This won't reliably detect whether a consumable iterator (e. g.
     a generator) is a nested-list-like without consuming the iterator.
     To avoid consuming it, we always return False if the outer container
     doesn't define `__len__`.
-
     See Also
     --------
     is_list_like
+    >>> is_nested_list_like([[1, 2, 3]])
+    True
+    >>> is_nested_list_like([{1, 2, 3}, {1, 2, 3}])
+    True
+    >>> is_nested_list_like(["foo"])
+    False
+    >>> is_nested_list_like([])
+    False
+    >>> is_nested_list_like([[1, 2, 3], 1])
+    False
     """
     return (
         is_list_like(obj)
@@ -261,12 +257,12 @@
 
 
 def is_dict_like(obj) -> bool:
-    """
-    Check if the object is dict-like.
-
-    Parameters
-    ----------
-    obj : The object to check
+    """Check if the object is dict-like.
+
+    Parameters
+    ----------
+    obj : The object to check
+        
 
     Returns
     -------
@@ -293,12 +289,12 @@
 
 
 def is_named_tuple(obj) -> bool:
-    """
-    Check if the object is a named tuple.
-
-    Parameters
-    ----------
-    obj : The object to check
+    """Check if the object is a named tuple.
+
+    Parameters
+    ----------
+    obj : The object to check
+        
 
     Returns
     -------
@@ -320,18 +316,23 @@
 
 
 def is_hashable(obj) -> bool:
-    """
-    Return True if hash(obj) will succeed, False otherwise.
-
+    """Return True if hash(obj) will succeed, False otherwise.
+    
     Some types will pass a test against collections.abc.Hashable but fail when
     they are actually hashed with hash().
-
+    
     Distinguish between these and other types by trying the call to hash() and
     seeing if they raise TypeError.
 
+    Parameters
+    ----------
+    obj :
+        
+
     Returns
     -------
     bool
+        
 
     Examples
     --------
@@ -358,13 +359,13 @@
 
 
 def is_sequence(obj) -> bool:
-    """
-    Check if the object is a sequence of objects.
+    """Check if the object is a sequence of objects.
     String types are not included as sequences here.
 
     Parameters
     ----------
     obj : The object to check
+        
 
     Returns
     -------
@@ -389,15 +390,15 @@
 
 
 def is_dataclass(item):
-    """
-    Checks if the object is a data-class instance
+    """Checks if the object is a data-class instance
 
     Parameters
     ----------
     item : object
-
-    Returns
-    --------
+        
+
+    Returns
+    -------
     is_dataclass : bool
         True if the item is an instance of a data-class,
         will return false if you pass the data class itself
@@ -409,12 +410,11 @@
     ... class Point:
     ...     x: int
     ...     y: int
-
+    
     >>> is_dataclass(Point)
     False
     >>> is_dataclass(Point(0,2))
     True
-
     """
     try:
         from dataclasses import is_dataclass
