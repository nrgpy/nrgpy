# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/external/qt_loaders.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/external/qt_loaders.py
@@ -35,26 +35,73 @@
 class ImportDenier(object):
     """Import Hook that will guard against bad Qt imports
     once IPython commits to a specific binding
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self):
         self.__forbidden = set()
 
     def forbid(self, module_name):
+        """
+
+        Parameters
+        ----------
+        module_name :
+            
+
+        Returns
+        -------
+
+        """
         sys.modules.pop(module_name, None)
         self.__forbidden.add(module_name)
 
     def find_module(self, fullname, path=None):
+        """
+
+        Parameters
+        ----------
+        fullname :
+            
+        path :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if path:
             return
         if fullname in self.__forbidden:
             return self
 
     def load_module(self, fullname):
-        raise ImportError("""
-    Importing %s disabled by IPython, which has
-    already imported an Incompatible QT Binding: %s
-    """ % (fullname, loaded_api()))
+        """
+
+        Parameters
+        ----------
+        fullname :
+            
+
+        Returns
+        -------
+
+        Raises
+        ------
+        Importing
+            s disabled by IPython
+        already
+            imported an Incompatible QT Binding
+        fullname
+            loaded_api
+
+        """
 
 ID = ImportDenier()
 sys.meta_path.insert(0, ID)
@@ -62,7 +109,17 @@
 
 def commit_api(api):
     """Commit to a particular API, and trigger ImportErrors on subsequent
-       dangerous imports"""
+       dangerous imports
+
+    Parameters
+    ----------
+    api :
+        
+
+    Returns
+    -------
+
+    """
 
     if api == QT_API_PYSIDE2:
         ID.forbid('PySide')
@@ -84,13 +141,17 @@
 
 def loaded_api():
     """Return which API is loaded, if any
-
+    
     If this returns anything besides None,
     importing any other Qt binding is unsafe.
 
-    Returns
-    -------
-    None, 'pyside2', 'pyside', 'pyqt', 'pyqt5', or 'pyqtv1'
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    
     """
     if 'PyQt4.QtCore' in sys.modules:
         if qtapi_version() == 2:
@@ -109,15 +170,16 @@
 def has_binding(api):
     """Safely check for PyQt4/5, PySide or PySide2, without importing submodules
 
-        Parameters
-        ----------
-        api : str [ 'pyqtv1' | 'pyqt' | 'pyqt5' | 'pyside' | 'pyside2' | 'pyqtdefault']
-             Which module to check for
-
-        Returns
-        -------
-        True if the relevant module appears to be importable
-     """
+    Parameters
+    ----------
+    api : str [ 'pyqtv1' | 'pyqt' | 'pyqt5' | 'pyside' | 'pyside2' | 'pyqtdefault']
+        Which module to check for
+
+    Returns
+    -------
+
+    
+    """
     module_name = api_to_module[api]
     from importlib.util import find_spec
 
@@ -146,12 +208,7 @@
 
 
 def qtapi_version():
-    """Return which QString API has been set, if any
-
-    Returns
-    -------
-    The QString API version (1 or 2), or None if not set
-    """
+    """Return which QString API has been set, if any"""
     try:
         import sip
     except ImportError:
@@ -163,7 +220,17 @@
 
 
 def can_import(api):
-    """Safely query whether an API is importable, without importing it"""
+    """Safely query whether an API is importable, without importing it
+
+    Parameters
+    ----------
+    api :
+        
+
+    Returns
+    -------
+
+    """
     if not has_binding(api):
         return False
 
@@ -175,16 +242,17 @@
 
 
 def import_pyqt4(version=2):
-    """
-    Import PyQt4
-
-    Parameters
-    ----------
-    version : 1, 2, or None
-      Which QString/QVariant API to use. Set to None to use the system
-      default
-
-    ImportErrors rasied within this function are non-recoverable
+    """Import PyQt4
+
+    Parameters
+    ----------
+    version :
+         (Default value = 2)
+
+    Returns
+    -------
+
+    
     """
     # The new-style string API (version=2) automatically
     # converts QStrings to Unicode Python strings. Also, automatically unpacks
@@ -212,10 +280,16 @@
 
 
 def import_pyqt5():
-    """
-    Import PyQt5
-
+    """Import PyQt5
+    
     ImportErrors rasied within this function are non-recoverable
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     from PyQt5 import QtCore, QtSvg, QtWidgets, QtGui
@@ -234,19 +308,31 @@
 
 
 def import_pyside():
-    """
-    Import PySide
-
+    """Import PySide
+    
     ImportErrors raised within this function are non-recoverable
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     from PySide import QtGui, QtCore, QtSvg
     return QtCore, QtGui, QtSvg, QT_API_PYSIDE
 
 def import_pyside2():
-    """
-    Import PySide2
-
+    """Import PySide2
+    
     ImportErrors raised within this function are non-recoverable
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     from PySide2 import QtGui, QtCore, QtSvg, QtWidgets, QtPrintSupport
 
@@ -260,30 +346,27 @@
 
 
 def load_qt(api_options):
-    """
-    Attempt to import Qt, given a preference list
+    """Attempt to import Qt, given a preference list
     of permissible bindings
-
+    
     It is safe to call this function multiple times.
 
     Parameters
     ----------
-    api_options: List of strings
+    api_options : List of strings
         The order of APIs to try. Valid items are 'pyside', 'pyside2',
         'pyqt', 'pyqt5', 'pyqtv1' and 'pyqtdefault'
 
     Returns
     -------
-
     A tuple of QtCore, QtGui, QtSvg, QT_API
+        
     The first three are the Qt modules. The last is the
+        
     string indicating which module was loaded.
-
-    Raises
-    ------
-    ImportError, if it isn't possible to import any requested
-    bindings (either because they aren't installed, or because
-    an incompatible library has already been installed)
+        
+
+    
     """
     loaders = {
                QT_API_PYSIDE2: import_pyside2,
