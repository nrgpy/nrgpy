# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/rfc3986/iri.py
+++ b/..//venv/lib/python3.8/site-packages/rfc3986/iri.py
@@ -32,13 +32,20 @@
 class IRIReference(namedtuple('IRIReference', misc.URI_COMPONENTS),
                    uri.URIMixin):
     """Immutable object representing a parsed IRI Reference.
-
+    
     Can be encoded into an URIReference object via the procedure
     specified in RFC 3987 Section 3.1
-
+    
      .. note::
         The IRI submodule is a new interface and may possibly change in
         the future. Check for changes to the interface when upgrading.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     slots = ()
@@ -73,15 +80,29 @@
         return tuple(self) == tuple(other_ref)
 
     def _match_subauthority(self):
+        """ """
         return misc.ISUBAUTHORITY_MATCHER.match(self.authority)
 
     @classmethod
     def from_string(cls, iri_string, encoding='utf-8'):
         """Parse a IRI reference from the given unicode IRI string.
 
-        :param str iri_string: Unicode IRI to be parsed into a reference.
-        :param str encoding: The encoding of the string provided
-        :returns: :class:`IRIReference` or subclass thereof
+        Parameters
+        ----------
+        str :
+            iri_string: Unicode IRI to be parsed into a reference.
+        str :
+            encoding: The encoding of the string provided
+        iri_string :
+            
+        encoding :
+             (Default value = 'utf-8')
+
+        Returns
+        -------
+        type
+            class:`IRIReference` or subclass thereof
+
         """
         iri_string = compat.to_str(iri_string, encoding)
 
@@ -96,17 +117,23 @@
 
     def encode(self, idna_encoder=None):  # noqa: C901
         """Encode an IRIReference into a URIReference instance.
-
+        
         If the ``idna`` module is installed or the ``rfc3986[idna]``
         extra is used then unicode characters in the IRI host
         component will be encoded with IDNA2008.
 
-        :param idna_encoder:
+        Parameters
+        ----------
+        idna_encoder :
             Function that encodes each part of the host component
             If not given will raise an exception if the IRI
-            contains a host component.
-        :rtype: uri.URIReference
-        :returns: A URI reference
+            contains a host component. (Default value = None)
+
+        Returns
+        -------
+        type
+            A URI reference
+
         """
         authority = self.authority
         if authority:
@@ -118,6 +145,17 @@
                     )
 
                 def idna_encoder(name):
+                    """
+
+                    Parameters
+                    ----------
+                    name :
+                        
+
+                    Returns
+                    -------
+
+                    """
                     if any(ord(c) > 128 for c in name):
                         try:
                             return idna.encode(name.lower(),
