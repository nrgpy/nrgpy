# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/resample/test_period_index.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/resample/test_period_index.py
@@ -21,18 +21,36 @@
 
 @pytest.fixture()
 def _index_factory():
+    """ """
     return period_range
 
 
 @pytest.fixture
 def _series_name():
+    """ """
     return "pi"
 
 
 class TestPeriodIndex:
+    """ """
     @pytest.mark.parametrize("freq", ["2D", "1H", "2H"])
     @pytest.mark.parametrize("kind", ["period", None, "timestamp"])
     def test_asfreq(self, series_and_frame, freq, kind):
+        """
+
+        Parameters
+        ----------
+        series_and_frame :
+            
+        freq :
+            
+        kind :
+            
+
+        Returns
+        -------
+
+        """
         # GH 12884, 15944
         # make sure .asfreq() returns PeriodIndex (except kind='timestamp')
 
@@ -48,6 +66,17 @@
         tm.assert_almost_equal(result, expected)
 
     def test_asfreq_fill_value(self, series):
+        """
+
+        Parameters
+        ----------
+        series :
+            
+
+        Returns
+        -------
+
+        """
         # test for fill value during resampling, issue 3715
 
         s = series
@@ -74,6 +103,23 @@
     @pytest.mark.parametrize("kind", [None, "period", "timestamp"])
     @pytest.mark.parametrize("kwargs", [dict(on="date"), dict(level="d")])
     def test_selection(self, index, freq, kind, kwargs):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+        freq :
+            
+        kind :
+            
+        kwargs :
+            
+
+        Returns
+        -------
+
+        """
         # This is a bug, these should be implemented
         # GH 14008
         rng = np.arange(len(index), dtype=np.int64)
@@ -96,6 +142,25 @@
     def test_annual_upsample_cases(
         self, targ, conv, meth, month, simple_period_range_series
     ):
+        """
+
+        Parameters
+        ----------
+        targ :
+            
+        conv :
+            
+        meth :
+            
+        month :
+            
+        simple_period_range_series :
+            
+
+        Returns
+        -------
+
+        """
         ts = simple_period_range_series("1/1/1990", "12/31/1991", freq=f"A-{month}")
 
         result = getattr(ts.resample(targ, convention=conv), meth)()
@@ -104,6 +169,17 @@
         tm.assert_series_equal(result, expected)
 
     def test_basic_downsample(self, simple_period_range_series):
+        """
+
+        Parameters
+        ----------
+        simple_period_range_series :
+            
+
+        Returns
+        -------
+
+        """
         ts = simple_period_range_series("1/1/1990", "6/30/1995", freq="M")
         result = ts.resample("a-dec").mean()
 
@@ -125,6 +201,21 @@
         ],
     )
     def test_not_subperiod(self, simple_period_range_series, rule, expected_error_msg):
+        """
+
+        Parameters
+        ----------
+        simple_period_range_series :
+            
+        rule :
+            
+        expected_error_msg :
+            
+
+        Returns
+        -------
+
+        """
         # These are incompatible period rules for resampling
         ts = simple_period_range_series("1/1/1990", "6/30/1995", freq="w-wed")
         msg = (
@@ -136,6 +227,19 @@
 
     @pytest.mark.parametrize("freq", ["D", "2D"])
     def test_basic_upsample(self, freq, simple_period_range_series):
+        """
+
+        Parameters
+        ----------
+        freq :
+            
+        simple_period_range_series :
+            
+
+        Returns
+        -------
+
+        """
         ts = simple_period_range_series("1/1/1990", "6/30/1995", freq="M")
         result = ts.resample("a-dec").mean()
 
@@ -145,6 +249,7 @@
         tm.assert_series_equal(resampled, expected)
 
     def test_upsample_with_limit(self):
+        """ """
         rng = period_range("1/1/2000", periods=5, freq="A")
         ts = Series(np.random.randn(len(rng)), rng)
 
@@ -153,6 +258,17 @@
         tm.assert_series_equal(result, expected)
 
     def test_annual_upsample(self, simple_period_range_series):
+        """
+
+        Parameters
+        ----------
+        simple_period_range_series :
+            
+
+        Returns
+        -------
+
+        """
         ts = simple_period_range_series("1/1/1990", "12/31/1995", freq="A-DEC")
         df = DataFrame({"a": ts})
         rdf = df.resample("D").ffill()
@@ -174,6 +290,23 @@
     def test_quarterly_upsample(
         self, month, target, convention, simple_period_range_series
     ):
+        """
+
+        Parameters
+        ----------
+        month :
+            
+        target :
+            
+        convention :
+            
+        simple_period_range_series :
+            
+
+        Returns
+        -------
+
+        """
         freq = f"Q-{month}"
         ts = simple_period_range_series("1/1/1990", "12/31/1995", freq=freq)
         result = ts.resample(target, convention=convention).ffill()
@@ -184,6 +317,21 @@
     @pytest.mark.parametrize("target", ["D", "B"])
     @pytest.mark.parametrize("convention", ["start", "end"])
     def test_monthly_upsample(self, target, convention, simple_period_range_series):
+        """
+
+        Parameters
+        ----------
+        target :
+            
+        convention :
+            
+        simple_period_range_series :
+            
+
+        Returns
+        -------
+
+        """
         ts = simple_period_range_series("1/1/1990", "12/31/1995", freq="M")
         result = ts.resample(target, convention=convention).ffill()
         expected = result.to_timestamp(target, how=convention)
@@ -191,6 +339,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_resample_basic(self):
+        """ """
         # GH3609
         s = Series(
             range(100),
@@ -212,6 +361,19 @@
         "freq,expected_vals", [("M", [31, 29, 31, 9]), ("2M", [31 + 29, 31 + 9])]
     )
     def test_resample_count(self, freq, expected_vals):
+        """
+
+        Parameters
+        ----------
+        freq :
+            
+        expected_vals :
+            
+
+        Returns
+        -------
+
+        """
         # GH12774
         series = Series(1, index=pd.period_range(start="2000", periods=100))
         result = series.resample(freq).count()
@@ -222,6 +384,17 @@
         tm.assert_series_equal(result, expected)
 
     def test_resample_same_freq(self, resample_method):
+        """
+
+        Parameters
+        ----------
+        resample_method :
+            
+
+        Returns
+        -------
+
+        """
 
         # GH12770
         series = Series(
@@ -233,6 +406,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_resample_incompat_freq(self):
+        """ """
         msg = (
             "Frequency <MonthEnd> cannot be resampled to <Week: weekday=6>, "
             "as they are not sub or super periods"
@@ -243,6 +417,7 @@
             ).resample("W").mean()
 
     def test_with_local_timezone_pytz(self):
+        """ """
         # see gh-5430
         local_timezone = pytz.timezone("America/Los_Angeles")
 
@@ -264,6 +439,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_resample_with_pytz(self):
+        """ """
         # GH 13238
         s = Series(
             2, index=pd.date_range("2017-01-01", periods=48, freq="H", tz="US/Eastern")
@@ -280,6 +456,7 @@
         assert result.index.tz == pytz.timezone("US/Eastern")
 
     def test_with_local_timezone_dateutil(self):
+        """ """
         # see gh-5430
         local_timezone = "dateutil/America/Los_Angeles"
 
@@ -307,6 +484,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_resample_nonexistent_time_bin_edge(self):
+        """ """
         # GH 19375
         index = date_range("2017-03-12", "2017-03-12 1:45:00", freq="15T")
         s = Series(np.zeros(len(index)), index=index)
@@ -331,6 +509,7 @@
         tm.assert_index_equal(result.index, expected)
 
     def test_resample_ambiguous_time_bin_edge(self):
+        """ """
         # GH 10117
         idx = pd.date_range(
             "2014-10-25 22:00:00", "2014-10-26 00:30:00", freq="30T", tz="Europe/London"
@@ -340,6 +519,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_fill_method_and_how_upsample(self):
+        """ """
         # GH2073
         s = Series(
             np.arange(9, dtype="int64"),
@@ -353,6 +533,23 @@
     @pytest.mark.parametrize("target", ["D", "B"])
     @pytest.mark.parametrize("convention", ["start", "end"])
     def test_weekly_upsample(self, day, target, convention, simple_period_range_series):
+        """
+
+        Parameters
+        ----------
+        day :
+            
+        target :
+            
+        convention :
+            
+        simple_period_range_series :
+            
+
+        Returns
+        -------
+
+        """
         freq = f"W-{day}"
         ts = simple_period_range_series("1/1/1990", "12/31/1995", freq=freq)
         result = ts.resample(target, convention=convention).ffill()
@@ -361,6 +558,17 @@
         tm.assert_series_equal(result, expected)
 
     def test_resample_to_timestamps(self, simple_period_range_series):
+        """
+
+        Parameters
+        ----------
+        simple_period_range_series :
+            
+
+        Returns
+        -------
+
+        """
         ts = simple_period_range_series("1/1/1990", "12/31/1995", freq="M")
 
         result = ts.resample("A-DEC", kind="timestamp").mean()
@@ -368,6 +576,17 @@
         tm.assert_series_equal(result, expected)
 
     def test_resample_to_quarterly(self, simple_period_range_series):
+        """
+
+        Parameters
+        ----------
+        simple_period_range_series :
+            
+
+        Returns
+        -------
+
+        """
         for month in MONTHS:
             ts = simple_period_range_series("1990", "1992", freq=f"A-{month}")
             quar_ts = ts.resample(f"Q-{month}").ffill()
@@ -398,6 +617,7 @@
             tm.assert_series_equal(result, expected)
 
     def test_resample_fill_missing(self):
+        """ """
         rng = PeriodIndex([2000, 2005, 2007, 2009], freq="A")
 
         s = Series(np.random.randn(4), index=rng)
@@ -408,6 +628,7 @@
         tm.assert_series_equal(filled, expected)
 
     def test_cant_fill_missing_dups(self):
+        """ """
         rng = PeriodIndex([2000, 2005, 2005, 2007, 2007], freq="A")
         s = Series(np.random.randn(5), index=rng)
         msg = "Reindexing only valid with uniquely valued Index objects"
@@ -417,6 +638,19 @@
     @pytest.mark.parametrize("freq", ["5min"])
     @pytest.mark.parametrize("kind", ["period", None, "timestamp"])
     def test_resample_5minute(self, freq, kind):
+        """
+
+        Parameters
+        ----------
+        freq :
+            
+        kind :
+            
+
+        Returns
+        -------
+
+        """
         rng = period_range("1/1/2000", "1/5/2000", freq="T")
         ts = Series(np.random.randn(len(rng)), index=rng)
         expected = ts.to_timestamp().resample(freq).mean()
@@ -426,6 +660,17 @@
         tm.assert_series_equal(result, expected)
 
     def test_upsample_daily_business_daily(self, simple_period_range_series):
+        """
+
+        Parameters
+        ----------
+        simple_period_range_series :
+            
+
+        Returns
+        -------
+
+        """
         ts = simple_period_range_series("1/1/2000", "2/1/2000", freq="B")
 
         result = ts.resample("D").asfreq()
@@ -439,6 +684,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_resample_irregular_sparse(self):
+        """ """
         dr = date_range(start="1/1/2012", freq="5min", periods=1000)
         s = Series(np.array(100), index=dr)
         # subset the data.
@@ -449,6 +695,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_resample_weekly_all_na(self):
+        """ """
         rng = date_range("1/1/2000", periods=10, freq="W-WED")
         ts = Series(np.random.randn(len(rng)), index=rng)
 
@@ -461,6 +708,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_resample_tz_localized(self):
+        """ """
         dr = date_range(start="2012-4-13", end="2012-5-1")
         ts = Series(range(len(dr)), index=dr)
 
@@ -522,6 +770,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_closed_left_corner(self):
+        """ """
         # #1465
         s = Series(
             np.random.randn(21),
@@ -542,6 +791,7 @@
         tm.assert_series_equal(result, exp)
 
     def test_quarterly_resampling(self):
+        """ """
         rng = period_range("2000Q1", periods=10, freq="Q-DEC")
         ts = Series(np.arange(10), index=rng)
 
@@ -550,6 +800,7 @@
         tm.assert_series_equal(result, exp)
 
     def test_resample_weekly_bug_1726(self):
+        """ """
         # 8/6/12 is a Monday
         ind = date_range(start="8/6/2012", end="8/26/2012", freq="D")
         n = len(ind)
@@ -560,6 +811,7 @@
         df.resample("W-MON", closed="left", label="left").first()
 
     def test_resample_with_dst_time_change(self):
+        """ """
         # GH 15549
         index = (
             pd.DatetimeIndex([1457537600000000000, 1458059600000000000])
@@ -595,6 +847,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_resample_bms_2752(self):
+        """ """
         # GH2753
         foo = Series(index=pd.bdate_range("20000101", "20000201"), dtype=np.float64)
         res1 = foo.resample("BMS").mean()
@@ -616,6 +869,7 @@
     #     tm.assert_series_equal(result, expected)
 
     def test_default_right_closed_label(self):
+        """ """
         end_freq = ["D", "Q", "M", "D"]
         end_types = ["M", "A", "Q", "W"]
 
@@ -629,6 +883,7 @@
             )
 
     def test_default_left_closed_label(self):
+        """ """
         others = ["MS", "AS", "QS", "D", "H"]
         others_freq = ["D", "Q", "M", "H", "T"]
 
@@ -642,6 +897,7 @@
             )
 
     def test_all_values_single_bin(self):
+        """ """
         # 2070
         index = period_range(start="2012-01-01", end="2012-12-31", freq="M")
         s = Series(np.random.randn(len(index)), index=index)
@@ -650,6 +906,7 @@
         tm.assert_almost_equal(result[0], s.mean())
 
     def test_evenly_divisible_with_no_extra_bins(self):
+        """ """
         # 4076
         # when the frequency is evenly divisible, sometimes extra bins
 
@@ -722,6 +979,21 @@
     @pytest.mark.parametrize("freq, period_mult", [("H", 24), ("12H", 2)])
     @pytest.mark.parametrize("kind", [None, "period"])
     def test_upsampling_ohlc(self, freq, period_mult, kind):
+        """
+
+        Parameters
+        ----------
+        freq :
+            
+        period_mult :
+            
+        kind :
+            
+
+        Returns
+        -------
+
+        """
         # GH 13083
         pi = period_range(start="2000", freq="D", periods=10)
         s = Series(range(len(pi)), index=pi)
@@ -773,6 +1045,23 @@
         ],
     )
     def test_resample_with_nat(self, periods, values, freq, expected_values):
+        """
+
+        Parameters
+        ----------
+        periods :
+            
+        values :
+            
+        freq :
+            
+        expected_values :
+            
+
+        Returns
+        -------
+
+        """
         # GH 13224
         index = PeriodIndex(periods, freq="S")
         frame = DataFrame(values, index=index)
@@ -785,6 +1074,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_resample_with_only_nat(self):
+        """ """
         # GH 13224
         pi = PeriodIndex([pd.NaT] * 3, freq="S")
         frame = DataFrame([2, 3, 5], index=pi)
@@ -815,6 +1105,25 @@
         ],
     )
     def test_resample_with_offset(self, start, end, start_freq, end_freq, offset):
+        """
+
+        Parameters
+        ----------
+        start :
+            
+        end :
+            
+        start_freq :
+            
+        end_freq :
+            
+        offset :
+            
+
+        Returns
+        -------
+
+        """
         # GH 23882 & 31809
         s = pd.Series(0, index=pd.period_range(start, end, freq=start_freq))
         s = s + np.arange(len(s))
@@ -845,6 +1154,25 @@
         ],
     )
     def test_get_period_range_edges(self, first, last, freq, exp_first, exp_last):
+        """
+
+        Parameters
+        ----------
+        first :
+            
+        last :
+            
+        freq :
+            
+        exp_first :
+            
+        exp_last :
+            
+
+        Returns
+        -------
+
+        """
         first = pd.Period(first)
         last = pd.Period(last)
 
@@ -857,6 +1185,7 @@
         assert result == expected
 
     def test_sum_min_count(self):
+        """ """
         # GH 19974
         index = pd.date_range(start="2018", freq="M", periods=6)
         data = np.ones(6)
