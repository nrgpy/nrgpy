# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_mem_overlap.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_mem_overlap.py
@@ -19,7 +19,17 @@
 
 
 def _indices_for_nelems(nelems):
-    """Returns slices of length nelems, from start onwards, in direction sign."""
+    """Returns slices of length nelems, from start onwards, in direction sign.
+
+    Parameters
+    ----------
+    nelems :
+        
+
+    Returns
+    -------
+
+    """
 
     if nelems == 0:
         return [size // 2]  # int index
@@ -46,14 +56,36 @@
 
 
 def _indices(ndims):
-    """Returns ((axis0_src, axis0_dst), (axis1_src, axis1_dst), ... ) index pairs."""
+    """Returns ((axis0_src, axis0_dst), (axis1_src, axis1_dst), ... ) index pairs.
+
+    Parameters
+    ----------
+    ndims :
+        
+
+    Returns
+    -------
+
+    """
 
     ind = _indices_for_axis()
     return itertools.product(ind, repeat=ndims)
 
 
 def _check_assignment(srcidx, dstidx):
-    """Check assignment arr[dstidx] = arr[srcidx] works."""
+    """Check assignment arr[dstidx] = arr[srcidx] works.
+
+    Parameters
+    ----------
+    srcidx :
+        
+    dstidx :
+        
+
+    Returns
+    -------
+
+    """
 
     arr = np.arange(np.product(shape)).reshape(shape)
 
@@ -67,6 +99,7 @@
 
 
 def test_overlapping_assignments():
+    """ """
     # Test automatically generated assignments which overlap in memory.
 
     inds = _indices(ndims)
@@ -80,6 +113,7 @@
 
 @pytest.mark.slow
 def test_diophantine_fuzz():
+    """ """
     # Fuzz test the diophantine solver
     rng = np.random.RandomState(1234)
 
@@ -140,6 +174,7 @@
 
 
 def test_diophantine_overflow():
+    """ """
     # Smoke test integer overflow detection
     max_intp = np.iinfo(np.intp).max
     max_int64 = np.iinfo(np.int64).max
@@ -155,6 +190,19 @@
 
 
 def check_may_share_memory_exact(a, b):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
+    """
     got = np.may_share_memory(a, b, max_work=MAY_SHARE_EXACT)
 
     assert_equal(np.may_share_memory(a, b),
@@ -181,6 +229,7 @@
 
 
 def test_may_share_memory_manual():
+    """ """
     # Manual test cases for may_share_memory
 
     # Base arrays
@@ -232,12 +281,40 @@
 
 
 def iter_random_view_pairs(x, same_steps=True, equal_size=False):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+    same_steps :
+         (Default value = True)
+    equal_size :
+         (Default value = False)
+
+    Returns
+    -------
+
+    """
     rng = np.random.RandomState(1234)
 
     if equal_size and same_steps:
         raise ValueError()
 
     def random_slice(n, step):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+        step :
+            
+
+        Returns
+        -------
+
+        """
         start = rng.randint(0, n+1, dtype=np.intp)
         stop = rng.randint(start, n+1, dtype=np.intp)
         if rng.randint(0, 2, dtype=np.intp) == 0:
@@ -246,6 +323,21 @@
         return slice(start, stop, step)
 
     def random_slice_fixed_size(n, step, size):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+        step :
+            
+        size :
+            
+
+        Returns
+        -------
+
+        """
         start = rng.randint(0, n+1 - size*step)
         stop = start + (size-1)*step + 1
         if rng.randint(0, 2) == 0:
@@ -320,6 +412,21 @@
 
 
 def check_may_share_memory_easy_fuzz(get_max_work, same_steps, min_count):
+    """
+
+    Parameters
+    ----------
+    get_max_work :
+        
+    same_steps :
+        
+    min_count :
+        
+
+    Returns
+    -------
+
+    """
     # Check that overlap problems with common strides are solved with
     # little work.
     x = np.zeros([17,34,71,97], dtype=np.int16)
@@ -353,6 +460,7 @@
 
 @pytest.mark.slow
 def test_may_share_memory_easy_fuzz():
+    """ """
     # Check that overlap problems with common strides are always
     # solved with little work.
 
@@ -363,6 +471,7 @@
 
 @pytest.mark.slow
 def test_may_share_memory_harder_fuzz():
+    """ """
     # Overlap problems with not necessarily common strides take more
     # work.
     #
@@ -376,6 +485,7 @@
 
 
 def test_shares_memory_api():
+    """ """
     x = np.zeros([4, 5, 6], dtype=np.int8)
 
     assert_equal(np.shares_memory(x, x), True)
@@ -389,13 +499,30 @@
 
 
 def test_may_share_memory_bad_max_work():
+    """ """
     x = np.zeros([1])
     assert_raises(OverflowError, np.may_share_memory, x, x, max_work=10**100)
     assert_raises(OverflowError, np.shares_memory, x, x, max_work=10**100)
 
 
 def test_internal_overlap_diophantine():
+    """ """
     def check(A, U, exists=None):
+        """
+
+        Parameters
+        ----------
+        A :
+            
+        U :
+            
+        exists :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         X = solve_diophantine(A, U, 0, require_ub_nontrivial=1)
 
         if exists is None:
@@ -417,6 +544,7 @@
 
 
 def test_internal_overlap_slices():
+    """ """
     # Slicing an array never generates internal overlap
 
     x = np.zeros([17,34,71,97], dtype=np.int16)
@@ -424,6 +552,19 @@
     rng = np.random.RandomState(1234)
 
     def random_slice(n, step):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+        step :
+            
+
+        Returns
+        -------
+
+        """
         start = rng.randint(0, n+1, dtype=np.intp)
         stop = rng.randint(start, n+1, dtype=np.intp)
         if rng.randint(0, 2, dtype=np.intp) == 0:
@@ -448,6 +589,19 @@
 
 
 def check_internal_overlap(a, manual_expected=None):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    manual_expected :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     got = internal_overlap(a)
 
     # Brute-force check
@@ -472,6 +626,7 @@
 
 
 def test_internal_overlap_manual():
+    """ """
     # Stride tricks can construct arrays with internal overlap
 
     # We don't care about memory bounds, the array is not
@@ -509,6 +664,7 @@
 
 
 def test_internal_overlap_fuzz():
+    """ """
     # Fuzz check; the brute-force check is fairly slow
 
     x = np.arange(1).astype(np.int8)
@@ -537,9 +693,11 @@
 
 
 def test_non_ndarray_inputs():
+    """ """
     # Regression check for gh-5604
 
     class MyArray:
+        """ """
         def __init__(self, data):
             self.data = data
 
@@ -548,6 +706,7 @@
             return self.data.__array_interface__
 
     class MyArray2:
+        """ """
         def __init__(self, data):
             self.data = data
 
@@ -565,7 +724,17 @@
 
 
 def view_element_first_byte(x):
-    """Construct an array viewing the first byte of each element of `x`"""
+    """Construct an array viewing the first byte of each element of `x`
+
+    Parameters
+    ----------
+    x :
+        
+
+    Returns
+    -------
+
+    """
     from numpy.lib.stride_tricks import DummyArray
     interface = dict(x.__array_interface__)
     interface['typestr'] = '|b1'
@@ -574,9 +743,23 @@
 
 
 def assert_copy_equivalent(operation, args, out, **kwargs):
-    """
-    Check that operation(*args, out=out) produces results
+    """Check that operation(*args, out=out) produces results
     equivalent to out[...] = operation(*args, out=out.copy())
+
+    Parameters
+    ----------
+    operation :
+        
+    args :
+        
+    out :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
     """
 
     kwargs['out'] = out
@@ -595,12 +778,27 @@
 
 
 class TestUFunc:
-    """
-    Test ufunc call memory overlap handling
-    """
+    """Test ufunc call memory overlap handling"""
 
     def check_unary_fuzz(self, operation, get_out_axis_size, dtype=np.int16,
                              count=5000):
+        """
+
+        Parameters
+        ----------
+        operation :
+            
+        get_out_axis_size :
+            
+        dtype :
+             (Default value = np.int16)
+        count :
+             (Default value = 5000)
+
+        Returns
+        -------
+
+        """
         shapes = [7, 13, 8, 21, 29, 32]
 
         rng = np.random.RandomState(1234)
@@ -664,10 +862,27 @@
 
     @pytest.mark.slow
     def test_unary_ufunc_call_fuzz(self):
+        """ """
         self.check_unary_fuzz(np.invert, None, np.int16)
 
     def test_binary_ufunc_accumulate_fuzz(self):
+        """ """
         def get_out_axis_size(a, b, axis):
+            """
+
+            Parameters
+            ----------
+            a :
+                
+            b :
+                
+            axis :
+                
+
+            Returns
+            -------
+
+            """
             if axis is None:
                 if a.ndim == 1:
                     return a.size, False
@@ -680,14 +895,46 @@
                               dtype=np.int16, count=500)
 
     def test_binary_ufunc_reduce_fuzz(self):
+        """ """
         def get_out_axis_size(a, b, axis):
+            """
+
+            Parameters
+            ----------
+            a :
+                
+            b :
+                
+            axis :
+                
+
+            Returns
+            -------
+
+            """
             return None, (axis is None or a.ndim == 1)
 
         self.check_unary_fuzz(np.add.reduce, get_out_axis_size,
                               dtype=np.int16, count=500)
 
     def test_binary_ufunc_reduceat_fuzz(self):
+        """ """
         def get_out_axis_size(a, b, axis):
+            """
+
+            Parameters
+            ----------
+            a :
+                
+            b :
+                
+            axis :
+                
+
+            Returns
+            -------
+
+            """
             if axis is None:
                 if a.ndim == 1:
                     return a.size, False
@@ -697,6 +944,21 @@
                 return a.shape[axis], False
 
         def do_reduceat(a, out, axis):
+            """
+
+            Parameters
+            ----------
+            a :
+                
+            out :
+                
+            axis :
+                
+
+            Returns
+            -------
+
+            """
             if axis is None:
                 size = len(a)
                 step = size//len(out)
@@ -710,7 +972,25 @@
                               dtype=np.int16, count=500)
 
     def test_binary_ufunc_reduceat_manual(self):
+        """ """
         def check(ufunc, a, ind, out):
+            """
+
+            Parameters
+            ----------
+            ufunc :
+                
+            a :
+                
+            ind :
+                
+            out :
+                
+
+            Returns
+            -------
+
+            """
             c1 = ufunc.reduceat(a.copy(), ind.copy(), out=out.copy())
             c2 = ufunc.reduceat(a, ind, out=out)
             assert_array_equal(c1, c2)
@@ -725,6 +1005,7 @@
 
     @pytest.mark.slow
     def test_unary_gufunc_fuzz(self):
+        """ """
         shapes = [7, 13, 8, 21, 29, 32]
         gufunc = _umath_tests.euclidean_pdist
 
@@ -768,7 +1049,25 @@
                     assert_copy_equivalent(gufunc, [a], out=b)
 
     def test_ufunc_at_manual(self):
+        """ """
         def check(ufunc, a, ind, b=None):
+            """
+
+            Parameters
+            ----------
+            ufunc :
+                
+            a :
+                
+            ind :
+                
+            b :
+                 (Default value = None)
+
+            Returns
+            -------
+
+            """
             a0 = a.copy()
             if b is None:
                 ufunc.at(a0, ind.copy())
@@ -792,9 +1091,23 @@
         check(np.add, a, ind, a[25:75])
 
     def test_unary_ufunc_1d_manual(self):
+        """ """
         # Exercise branches in PyArray_EQUIVALENTLY_ITERABLE
 
         def check(a, b):
+            """
+
+            Parameters
+            ----------
+            a :
+                
+            b :
+                
+
+            Returns
+            -------
+
+            """
             a_orig = a.copy()
             b_orig = b.copy()
 
@@ -860,10 +1173,26 @@
                     check(x[-1:].reshape([]), y)
 
     def test_unary_ufunc_where_same(self):
+        """ """
         # Check behavior at wheremask overlap
         ufunc = np.invert
 
         def check(a, out, mask):
+            """
+
+            Parameters
+            ----------
+            a :
+                
+            out :
+                
+            mask :
+                
+
+            Returns
+            -------
+
+            """
             c1 = ufunc(a, out=out.copy(), where=mask.copy())
             c2 = ufunc(a, out=out, where=mask)
             assert_array_equal(c1, c2)
@@ -876,9 +1205,25 @@
 
     @pytest.mark.slow
     def test_binary_ufunc_1d_manual(self):
+        """ """
         ufunc = np.add
 
         def check(a, b, c):
+            """
+
+            Parameters
+            ----------
+            a :
+                
+            b :
+                
+            c :
+                
+
+            Returns
+            -------
+
+            """
             c0 = c.copy()
             c1 = ufunc(a, b, out=c0)
             c2 = ufunc(a, b, out=c)
@@ -919,6 +1264,7 @@
                 check(x, y[-1:].reshape([]), z)
 
     def test_inplace_op_simple_manual(self):
+        """ """
         rng = np.random.RandomState(1234)
         x = rng.rand(200, 200)  # bigger than bufsize
 
