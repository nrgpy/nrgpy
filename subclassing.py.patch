# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/doc/subclassing.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/doc/subclassing.py
@@ -115,6 +115,7 @@
 .. testcode::
 
   class C:
+    """ """
       def __new__(cls, *args):
           print('Cls in __new__:', cls)
           print('Args in __new__:', args)
@@ -152,6 +153,7 @@
 .. testcode::
 
   class D(C):
+    """ """
       def __new__(cls, *args):
           print('D cls is:', cls)
           print('D args in __new__:', args)
@@ -182,6 +184,7 @@
 that preserve the class type.  When taking a view, the standard
 ndarray machinery creates the new ndarray object with something
 like::
+    """ """
 
   obj = ndarray.__new__(subtype, shape, ...
 
@@ -236,6 +239,7 @@
    import numpy as np
 
    class C(np.ndarray):
+     """ """
        def __new__(cls, *args, **kwargs):
            print('In __new__ with class %s' % cls)
            return super(C, cls).__new__(cls, *args, **kwargs)
@@ -303,6 +307,7 @@
   import numpy as np
 
   class InfoArray(np.ndarray):
+    """ """
 
       def __new__(subtype, shape, dtype=float, buffer=None, offset=0,
                   strides=None, order=None, info=None):
@@ -385,6 +390,7 @@
   import numpy as np
 
   class RealisticInfoArray(np.ndarray):
+    """ """
 
       def __new__(cls, input_array, info=None):
           # Input array is an already formed ndarray instance
@@ -454,6 +460,7 @@
     input numpy as np
 
     class A(np.ndarray):
+        """ """
         def __array_ufunc__(self, ufunc, method, *inputs, out=None, **kwargs):
             args = []
             in_no = []
@@ -580,6 +587,7 @@
   import numpy as np
 
   class MySubClass(np.ndarray):
+    """ """
 
       def __new__(cls, input_array, info=None):
           obj = np.asarray(input_array).view(cls)
@@ -631,6 +639,7 @@
 .. testcode::
 
   class SillySubClass(np.ndarray):
+    """ """
 
       def __array_wrap__(self, arr, context=None):
           return 'I lost your data'
@@ -718,6 +727,23 @@
 .. testcode::
 
     def sum(self, axis=None, dtype=None, out=None, keepdims=False):
+        """
+
+        Parameters
+        ----------
+        axis :
+             (Default value = None)
+        dtype :
+             (Default value = None)
+        out :
+             (Default value = None)
+        keepdims :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
     ...
 
 This is the exact same method signature for ``np.sum``, so now if a user calls
@@ -730,6 +756,19 @@
 .. testcode::
 
    def sum(self, axis=None, dtype=None):
+     """
+
+     Parameters
+     ----------
+     axis :
+          (Default value = None)
+     dtype :
+          (Default value = None)
+
+     Returns
+     -------
+
+     """
    ...
 
 This object is no longer compatible with ``np.sum`` because if you call ``np.sum``,
@@ -743,6 +782,21 @@
 .. testcode::
 
    def sum(self, axis=None, dtype=None, **unused_kwargs):
+     """
+
+     Parameters
+     ----------
+     axis :
+          (Default value = None)
+     dtype :
+          (Default value = None)
+     **unused_kwargs :
+         
+
+     Returns
+     -------
+
+     """
    ...
 
 This object is now compatible with ``np.sum`` again because any extraneous arguments
