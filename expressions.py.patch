# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/computation/expressions.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/computation/expressions.py
@@ -37,6 +37,17 @@
 
 
 def set_use_numexpr(v=True):
+    """
+
+    Parameters
+    ----------
+    v :
+         (Default value = True)
+
+    Returns
+    -------
+
+    """
     # set/unset to use numexpr
     global _USE_NUMEXPR
     if _NUMEXPR_INSTALLED:
@@ -50,6 +61,17 @@
 
 
 def set_numexpr_threads(n=None):
+    """
+
+    Parameters
+    ----------
+    n :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     # if we are using numexpr, set the threads to n
     # otherwise reset
     if _NUMEXPR_INSTALLED and _USE_NUMEXPR:
@@ -59,8 +81,22 @@
 
 
 def _evaluate_standard(op, op_str, a, b):
-    """
-    Standard evaluation.
+    """Standard evaluation.
+
+    Parameters
+    ----------
+    op :
+        
+    op_str :
+        
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
     """
     if _TEST_MODE:
         _store_test_result(False)
@@ -69,7 +105,27 @@
 
 
 def _can_use_numexpr(op, op_str, a, b, dtype_check):
-    """ return a boolean if we WILL be using numexpr """
+    """
+
+    Parameters
+    ----------
+    op :
+        
+    op_str :
+        
+    a :
+        
+    b :
+        
+    dtype_check :
+        
+
+    Returns
+    -------
+    type
+        
+
+    """
     if op_str is not None:
 
         # required min elements (otherwise we are adding overhead)
@@ -95,6 +151,23 @@
 
 
 def _evaluate_numexpr(op, op_str, a, b):
+    """
+
+    Parameters
+    ----------
+    op :
+        
+    op_str :
+        
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
+    """
     result = None
 
     if _can_use_numexpr(op, op_str, a, b, "evaluate"):
@@ -157,11 +230,41 @@
 
 
 def _where_standard(cond, a, b):
+    """
+
+    Parameters
+    ----------
+    cond :
+        
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
+    """
     # Caller is responsible for extracting ndarray if necessary
     return np.where(cond, a, b)
 
 
 def _where_numexpr(cond, a, b):
+    """
+
+    Parameters
+    ----------
+    cond :
+        
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
+    """
     # Caller is responsible for extracting ndarray if necessary
     result = None
 
@@ -184,6 +287,17 @@
 
 
 def _has_bool_dtype(x):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+
+    Returns
+    -------
+
+    """
     if isinstance(x, ABCDataFrame):
         return "bool" in x.dtypes
     try:
@@ -195,6 +309,29 @@
 def _bool_arith_check(
     op_str, a, b, not_allowed=frozenset(("/", "//", "**")), unsupported=None
 ):
+    """
+
+    Parameters
+    ----------
+    op_str :
+        
+    a :
+        
+    b :
+        
+    not_allowed :
+         (Default value = frozenset(("/")
+    "//" :
+        
+    "**")) :
+        
+    unsupported :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     if unsupported is None:
         unsupported = {"+": "|", "*": "&", "-": "^"}
 
@@ -215,16 +352,23 @@
 
 
 def evaluate(op, a, b, use_numexpr: bool = True):
-    """
-    Evaluate and return the expression of the op on a and b.
-
-    Parameters
-    ----------
-    op : the actual operand
-    a : left operand
-    b : right operand
-    use_numexpr : bool, default True
-        Whether to try to use numexpr.
+    """Evaluate and return the expression of the op on a and b.
+
+    Parameters
+    ----------
+    op :
+        
+    a :
+        
+    b :
+        
+    use_numexpr: bool :
+         (Default value = True)
+
+    Returns
+    -------
+
+    
     """
     op_str = _op_str_mapping[op]
     if op_str is not None:
@@ -235,25 +379,40 @@
 
 
 def where(cond, a, b, use_numexpr=True):
-    """
-    Evaluate the where condition cond on a and b.
-
-    Parameters
-    ----------
-    cond : np.ndarray[bool]
-    a : return if cond is True
-    b : return if cond is False
-    use_numexpr : bool, default True
-        Whether to try to use numexpr.
+    """Evaluate the where condition cond on a and b.
+
+    Parameters
+    ----------
+    cond :
+        
+    a :
+        
+    b :
+        
+    use_numexpr :
+         (Default value = True)
+
+    Returns
+    -------
+
+    
     """
     return _where(cond, a, b) if use_numexpr else _where_standard(cond, a, b)
 
 
 def set_test_mode(v=True):
-    """
-    Keeps track of whether numexpr was used.  Stores an additional ``True``
+    """Keeps track of whether numexpr was used.  Stores an additional ``True``
     for every successful use of evaluate with numexpr since the last
     ``get_test_result``
+
+    Parameters
+    ----------
+    v :
+         (Default value = True)
+
+    Returns
+    -------
+
     """
     global _TEST_MODE, _TEST_RESULT
     _TEST_MODE = v
@@ -261,6 +420,17 @@
 
 
 def _store_test_result(used_numexpr):
+    """
+
+    Parameters
+    ----------
+    used_numexpr :
+        
+
+    Returns
+    -------
+
+    """
     global _TEST_RESULT
     if used_numexpr:
         _TEST_RESULT.append(used_numexpr)
