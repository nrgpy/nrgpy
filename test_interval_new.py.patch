# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexing/interval/test_interval_new.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexing/interval/test_interval_new.py
@@ -8,10 +8,23 @@
 
 
 class TestIntervalIndex:
+    """ """
     def setup_method(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         self.s = Series(np.arange(5), IntervalIndex.from_breaks(np.arange(6)))
 
     def test_loc_with_interval(self):
+        """ """
 
         # loc with single label / list of labels:
         #   - Intervals: only exact matches
@@ -64,6 +77,7 @@
             s[Interval(5, 6)]
 
     def test_loc_with_scalar(self):
+        """ """
 
         # loc with single label / list of labels:
         #   - Intervals: only exact matches
@@ -91,6 +105,7 @@
         tm.assert_series_equal(expected, s.loc[s >= 2])
 
     def test_loc_with_slices(self):
+        """ """
 
         # loc with slices:
         #   - Interval objects: only works with exact matches
@@ -141,6 +156,7 @@
         tm.assert_series_equal(expected, s[0.1:2.5])
 
     def test_slice_step_ne1(self):
+        """ """
         # GH#31658 slice of scalar with step != 1
         s = self.s
         expected = s.iloc[0:4:2]
@@ -152,6 +168,7 @@
         tm.assert_series_equal(result2, expected)
 
     def test_slice_float_start_stop(self):
+        """ """
         # GH#31658 slicing with integers is positional, with floats is not
         #  supported
         ser = Series(np.arange(5), IntervalIndex.from_breaks(np.arange(6)))
@@ -161,6 +178,7 @@
             ser[1.5:9.5:2]
 
     def test_slice_interval_step(self):
+        """ """
         # GH#31658 allows for integer step!=1, not Interval step
         s = self.s
         msg = "label-based slicing with step!=1 is not supported for IntervalIndex"
@@ -168,6 +186,7 @@
             s[0 : 4 : Interval(0, 1)]
 
     def test_loc_with_overlap(self):
+        """ """
 
         idx = IntervalIndex.from_tuples([(1, 5), (3, 7)])
         s = Series(range(len(idx)), index=idx)
@@ -235,6 +254,7 @@
             s.loc[1:4]
 
     def test_non_unique(self):
+        """ """
 
         idx = IntervalIndex.from_tuples([(1, 3), (3, 7)])
         s = Series(range(len(idx)), index=idx)
@@ -247,6 +267,7 @@
         tm.assert_series_equal(expected, result)
 
     def test_non_unique_moar(self):
+        """ """
 
         idx = IntervalIndex.from_tuples([(1, 3), (1, 3), (3, 7)])
         s = Series(range(len(idx)), index=idx)
