# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/frame/apply/test_frame_apply.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/frame/apply/test_frame_apply.py
@@ -18,10 +18,16 @@
 
 @pytest.fixture
 def int_frame_const_col():
-    """
-    Fixture for DataFrame of ints which are constant per column
-
+    """Fixture for DataFrame of ints which are constant per column
+    
     Columns are ['A', 'B', 'C'], with values (per column): [1, 2, 3]
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     df = DataFrame(
         np.tile(np.arange(3, dtype="int64"), 6).reshape(6, -1) + 1,
@@ -31,7 +37,19 @@
 
 
 class TestDataFrameApply:
+    """ """
     def test_apply(self, float_frame):
+        """
+
+        Parameters
+        ----------
+        float_frame :
+            
+
+        Returns
+        -------
+
+        """
         with np.errstate(all="ignore"):
             # ufunc
             applied = float_frame.apply(np.sqrt)
@@ -61,6 +79,7 @@
         assert isinstance(df["c1"].dtype, CategoricalDtype)
 
     def test_apply_mixed_datetimelike(self):
+        """ """
         # mixed datetimelike
         # GH 7778
         df = DataFrame(
@@ -73,6 +92,17 @@
         tm.assert_frame_equal(result, df)
 
     def test_apply_empty(self, float_frame):
+        """
+
+        Parameters
+        ----------
+        float_frame :
+            
+
+        Returns
+        -------
+
+        """
         # empty
         empty_frame = DataFrame()
 
@@ -98,6 +128,7 @@
         tm.assert_frame_equal(expected, result)
 
     def test_apply_with_reduce_empty(self):
+        """ """
         # reduce with an empty DataFrame
         empty_frame = DataFrame()
 
@@ -120,6 +151,17 @@
 
     @pytest.mark.parametrize("func", ["sum", "prod", "any", "all"])
     def test_apply_funcs_over_empty(self, func):
+        """
+
+        Parameters
+        ----------
+        func :
+            
+
+        Returns
+        -------
+
+        """
         # GH 28213
         df = DataFrame(columns=["a", "b", "c"])
 
@@ -128,6 +170,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_nunique_empty(self):
+        """ """
         # GH 28213
         df = DataFrame(columns=["a", "b", "c"])
 
@@ -140,6 +183,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_apply_standard_nonunique(self):
+        """ """
         df = DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]], index=["a", "a", "c"])
 
         result = df.apply(lambda s: s[0], axis=1)
@@ -161,11 +205,41 @@
         ],
     )
     def test_apply_with_string_funcs(self, float_frame, func, args, kwds):
+        """
+
+        Parameters
+        ----------
+        float_frame :
+            
+        func :
+            
+        args :
+            
+        kwds :
+            
+
+        Returns
+        -------
+
+        """
         result = float_frame.apply(func, *args, **kwds)
         expected = getattr(float_frame, func)(*args, **kwds)
         tm.assert_series_equal(result, expected)
 
     def test_apply_broadcast(self, float_frame, int_frame_const_col):
+        """
+
+        Parameters
+        ----------
+        float_frame :
+            
+        int_frame_const_col :
+            
+
+        Returns
+        -------
+
+        """
 
         # scalars
         result = float_frame.apply(np.mean, result_type="broadcast")
@@ -218,6 +292,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_apply_broadcast_error(self, int_frame_const_col):
+        """
+
+        Parameters
+        ----------
+        int_frame_const_col :
+            
+
+        Returns
+        -------
+
+        """
         df = int_frame_const_col
 
         # > 1 ndim
@@ -238,7 +323,31 @@
             df.apply(lambda x: Series([1, 2]), axis=1, result_type="broadcast")
 
     def test_apply_raw(self, float_frame, mixed_type_frame):
+        """
+
+        Parameters
+        ----------
+        float_frame :
+            
+        mixed_type_frame :
+            
+
+        Returns
+        -------
+
+        """
         def _assert_raw(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             assert isinstance(x, np.ndarray)
             assert x.ndim == 1
 
@@ -264,11 +373,33 @@
         mixed_type_frame.apply(_assert_raw, axis=1, raw=True)
 
     def test_apply_axis1(self, float_frame):
+        """
+
+        Parameters
+        ----------
+        float_frame :
+            
+
+        Returns
+        -------
+
+        """
         d = float_frame.index[0]
         tapplied = float_frame.apply(np.mean, axis=1)
         assert tapplied[d] == np.mean(float_frame.xs(d))
 
     def test_apply_ignore_failures(self, float_string_frame):
+        """
+
+        Parameters
+        ----------
+        float_string_frame :
+            
+
+        Returns
+        -------
+
+        """
         result = frame_apply(
             float_string_frame, np.mean, 0, ignore_failures=True
         ).apply_standard()
@@ -276,6 +407,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_apply_mixed_dtype_corner(self):
+        """ """
         df = DataFrame({"A": ["foo"], "B": [1.0]})
         result = df[:0].apply(np.mean, axis=1)
         # the result here is actually kind of ambiguous, should it be a Series
@@ -293,16 +425,43 @@
         tm.assert_series_equal(result, expected)
 
     def test_apply_empty_infer_type(self):
+        """ """
         no_cols = DataFrame(index=["a", "b", "c"])
         no_index = DataFrame(columns=["a", "b", "c"])
 
         def _check(df, f):
+            """
+
+            Parameters
+            ----------
+            df :
+                
+            f :
+                
+
+            Returns
+            -------
+
+            """
             with warnings.catch_warnings(record=True):
                 warnings.simplefilter("ignore", RuntimeWarning)
                 test_res = f(np.array([], dtype="f8"))
             is_reduction = not isinstance(test_res, np.ndarray)
 
             def _checkit(axis=0, raw=False):
+                """
+
+                Parameters
+                ----------
+                axis :
+                     (Default value = 0)
+                raw :
+                     (Default value = False)
+
+                Returns
+                -------
+
+                """
                 result = df.apply(f, axis=axis, raw=raw)
                 if is_reduction:
                     agg_axis = df._get_agg_axis(axis)
@@ -326,13 +485,65 @@
         assert isinstance(result, DataFrame)
 
     def test_apply_with_args_kwds(self, float_frame):
+        """
+
+        Parameters
+        ----------
+        float_frame :
+            
+
+        Returns
+        -------
+
+        """
         def add_some(x, howmuch=0):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+            howmuch :
+                 (Default value = 0)
+
+            Returns
+            -------
+
+            """
             return x + howmuch
 
         def agg_and_add(x, howmuch=0):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+            howmuch :
+                 (Default value = 0)
+
+            Returns
+            -------
+
+            """
             return x.mean() + howmuch
 
         def subtract_and_divide(x, sub, divide=1):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+            sub :
+                
+            divide :
+                 (Default value = 1)
+
+            Returns
+            -------
+
+            """
             return (x - sub) / divide
 
         result = float_frame.apply(add_some, howmuch=2)
@@ -348,16 +559,39 @@
         tm.assert_frame_equal(result, expected)
 
     def test_apply_yield_list(self, float_frame):
+        """
+
+        Parameters
+        ----------
+        float_frame :
+            
+
+        Returns
+        -------
+
+        """
         result = float_frame.apply(list)
         tm.assert_frame_equal(result, float_frame)
 
     def test_apply_reduce_Series(self, float_frame):
+        """
+
+        Parameters
+        ----------
+        float_frame :
+            
+
+        Returns
+        -------
+
+        """
         float_frame["A"].iloc[::2] = np.nan
         expected = float_frame.mean(1)
         result = float_frame.apply(np.mean, axis=1)
         tm.assert_series_equal(result, expected)
 
     def test_apply_reduce_rows_to_dict(self):
+        """ """
         # GH 25196
         data = pd.DataFrame([[1, 2], [3, 4]])
         expected = pd.Series([{0: 1, 1: 3}, {0: 2, 1: 4}])
@@ -365,6 +599,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_apply_differently_indexed(self):
+        """ """
         df = DataFrame(np.random.randn(20, 10))
 
         result0 = df.apply(Series.describe, axis=0)
@@ -380,6 +615,7 @@
         tm.assert_frame_equal(result1, expected1)
 
     def test_apply_modify_traceback(self):
+        """ """
         data = DataFrame(
             {
                 "A": [
@@ -430,11 +666,33 @@
         data.loc[4, "C"] = np.nan
 
         def transform(row):
+            """
+
+            Parameters
+            ----------
+            row :
+                
+
+            Returns
+            -------
+
+            """
             if row["C"].startswith("shin") and row["A"] == "foo":
                 row["D"] = 7
             return row
 
         def transform2(row):
+            """
+
+            Parameters
+            ----------
+            row :
+                
+
+            Returns
+            -------
+
+            """
             if notna(row["C"]) and row["C"].startswith("shin") and row["A"] == "foo":
                 row["D"] = 7
             return row
@@ -444,6 +702,7 @@
             data.apply(transform, axis=1)
 
     def test_apply_bug(self):
+        """ """
 
         # GH 6125
         positions = pd.DataFrame(
@@ -459,6 +718,17 @@
         )
 
         def f(r):
+            """
+
+            Parameters
+            ----------
+            r :
+                
+
+            Returns
+            -------
+
+            """
             return r["market"]
 
         expected = positions.apply(f, axis=1)
@@ -478,6 +748,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_apply_convert_objects(self):
+        """ """
         data = DataFrame(
             {
                 "A": [
@@ -529,6 +800,17 @@
         tm.assert_frame_equal(result._convert(datetime=True), data)
 
     def test_apply_attach_name(self, float_frame):
+        """
+
+        Parameters
+        ----------
+        float_frame :
+            
+
+        Returns
+        -------
+
+        """
         result = float_frame.apply(lambda x: x.name)
         expected = Series(float_frame.columns, index=float_frame.columns)
         tm.assert_series_equal(result, expected)
@@ -554,6 +836,17 @@
         tm.assert_series_equal(result, expected)
 
     def test_apply_multi_index(self, float_frame):
+        """
+
+        Parameters
+        ----------
+        float_frame :
+            
+
+        Returns
+        -------
+
+        """
         index = MultiIndex.from_arrays([["a", "a", "b"], ["c", "d", "d"]])
         s = DataFrame([[1, 2], [3, 4], [5, 6]], index=index, columns=["col1", "col2"])
         result = s.apply(lambda x: Series({"min": min(x), "max": max(x)}), 1)
@@ -563,6 +856,7 @@
         tm.assert_frame_equal(result, expected, check_like=True)
 
     def test_apply_dict(self):
+        """ """
 
         # GH 8735
         A = DataFrame([["foo", "bar"], ["spam", "eggs"]])
@@ -583,6 +877,17 @@
             tm.assert_series_equal(reduce_none, dicts)
 
     def test_applymap(self, float_frame):
+        """
+
+        Parameters
+        ----------
+        float_frame :
+            
+
+        Returns
+        -------
+
+        """
         applied = float_frame.applymap(lambda x: x * 2)
         tm.assert_frame_equal(applied, float_frame * 2)
         float_frame.applymap(type)
@@ -631,16 +936,29 @@
                 tm.assert_frame_equal(result, frame)
 
     def test_applymap_box_timestamps(self):
+        """ """
         # GH 2689, GH 2627
         ser = pd.Series(date_range("1/1/2000", periods=10))
 
         def func(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return (x.hour, x.day, x.month)
 
         # it works!
         pd.DataFrame(ser).applymap(func)
 
     def test_applymap_box(self):
+        """ """
         # ufunc will not be boxed. Same test cases as the test_map_box
         df = pd.DataFrame(
             {
@@ -669,6 +987,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_frame_apply_dont_convert_datetime64(self):
+        """ """
         from pandas.tseries.offsets import BDay
 
         df = DataFrame({"x1": [datetime(1996, 1, 1)]})
@@ -679,6 +998,7 @@
         assert df.x1.dtype == "M8[ns]"
 
     def test_apply_non_numpy_dtype(self):
+        """ """
         # GH 12244
         df = DataFrame(
             {"dt": pd.date_range("2015-01-01", periods=3, tz="Europe/Brussels")}
@@ -697,6 +1017,7 @@
         tm.assert_frame_equal(result, df)
 
     def test_apply_dup_names_multi_agg(self):
+        """ """
         # GH 21063
         df = pd.DataFrame([[0, 1], [2, 3]], columns=["a", "a"])
         expected = pd.DataFrame([[0, 1]], columns=["a", "a"], index=["min"])
@@ -705,8 +1026,20 @@
         tm.assert_frame_equal(result, expected)
 
     def test_apply_nested_result_axis_1(self):
+        """ """
         # GH 13820
         def apply_list(row):
+            """
+
+            Parameters
+            ----------
+            row :
+                
+
+            Returns
+            -------
+
+            """
             return [2 * row["A"], 2 * row["C"], 2 * row["B"]]
 
         df = pd.DataFrame(np.zeros((4, 4)), columns=list("ABCD"))
@@ -717,6 +1050,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_apply_noreduction_tzaware_object(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/31505
         df = pd.DataFrame(
             {"foo": [pd.Timestamp("2020", tz="UTC")]}, dtype="datetime64[ns, UTC]"
@@ -727,15 +1061,38 @@
         tm.assert_frame_equal(result, df)
 
     def test_apply_function_runs_once(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/30815
 
         df = pd.DataFrame({"a": [1, 2, 3]})
         names = []  # Save row names function is applied to
 
         def reducing_function(row):
+            """
+
+            Parameters
+            ----------
+            row :
+                
+
+            Returns
+            -------
+
+            """
             names.append(row.name)
 
         def non_reducing_function(row):
+            """
+
+            Parameters
+            ----------
+            row :
+                
+
+            Returns
+            -------
+
+            """
             names.append(row.name)
             return row
 
@@ -746,15 +1103,38 @@
             assert names == list(df.index)
 
     def test_apply_raw_function_runs_once(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/34506
 
         df = pd.DataFrame({"a": [1, 2, 3]})
         values = []  # Save row values function is applied to
 
         def reducing_function(row):
+            """
+
+            Parameters
+            ----------
+            row :
+                
+
+            Returns
+            -------
+
+            """
             values.extend(row)
 
         def non_reducing_function(row):
+            """
+
+            Parameters
+            ----------
+            row :
+                
+
+            Returns
+            -------
+
+            """
             values.extend(row)
             return row
 
@@ -765,14 +1145,37 @@
             assert values == list(df.a.to_list())
 
     def test_applymap_function_runs_once(self):
+        """ """
 
         df = pd.DataFrame({"a": [1, 2, 3]})
         values = []  # Save values function is applied to
 
         def reducing_function(val):
+            """
+
+            Parameters
+            ----------
+            val :
+                
+
+            Returns
+            -------
+
+            """
             values.append(val)
 
         def non_reducing_function(val):
+            """
+
+            Parameters
+            ----------
+            val :
+                
+
+            Returns
+            -------
+
+            """
             values.append(val)
             return val
 
@@ -783,6 +1186,7 @@
             assert values == df.a.to_list()
 
     def test_apply_with_byte_string(self):
+        """ """
         # GH 34529
         df = pd.DataFrame(np.array([b"abcd", b"efgh"]), columns=["col"])
         expected = pd.DataFrame(
@@ -795,6 +1199,17 @@
 
     @pytest.mark.parametrize("val", ["asd", 12, None, np.NaN])
     def test_apply_category_equalness(self, val):
+        """
+
+        Parameters
+        ----------
+        val :
+            
+
+        Returns
+        -------
+
+        """
         # Check if categorical comparisons on apply, GH 21239
         df_values = ["asd", None, 12, "asd", "cde", np.NaN]
         df = pd.DataFrame({"a": df_values}, dtype="category")
@@ -807,11 +1222,13 @@
 
 
 class TestInferOutputShape:
+    """ """
     # the user has supplied an opaque UDF where
     # they are transforming the input that requires
     # us to infer the output
 
     def test_infer_row_shape(self):
+        """ """
         # GH 17437
         # if row shape is changing, infer it
         df = pd.DataFrame(np.random.rand(10, 2))
@@ -822,6 +1239,7 @@
         assert result.shape == (6, 2)
 
     def test_with_dictlike_columns(self):
+        """ """
         # GH 17602
         df = DataFrame([[1, 2], [1, 2]], columns=["a", "b"])
         result = df.apply(lambda x: {"s": x["a"] + x["b"]}, axis=1)
@@ -852,6 +1270,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_with_dictlike_columns_with_infer(self):
+        """ """
         # GH 17602
         df = DataFrame([[1, 2], [1, 2]], columns=["a", "b"])
         result = df.apply(
@@ -870,6 +1289,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_with_listlike_columns(self):
+        """ """
         # GH 17348
         df = DataFrame(
             {
@@ -898,6 +1318,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_infer_output_shape_columns(self):
+        """ """
         # GH 18573
 
         df = DataFrame(
@@ -915,6 +1336,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_infer_output_shape_listlike_columns(self):
+        """ """
         # GH 16353
 
         df = DataFrame(np.random.randn(6, 3), columns=["A", "B", "C"])
@@ -954,6 +1376,17 @@
         )
 
         def fun(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return (1, 2)
 
         result = df.apply(fun, axis=1)
@@ -961,6 +1394,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_consistent_coerce_for_shapes(self):
+        """ """
         # we want column names to NOT be propagated
         # just because the shape matches the input shape
         df = DataFrame(np.random.randn(4, 3), columns=["A", "B", "C"])
@@ -974,6 +1408,17 @@
         tm.assert_series_equal(result, expected)
 
     def test_consistent_names(self, int_frame_const_col):
+        """
+
+        Parameters
+        ----------
+        int_frame_const_col :
+            
+
+        Returns
+        -------
+
+        """
         # if a Series is returned, we should use the resulting index names
         df = int_frame_const_col
 
@@ -990,6 +1435,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_result_type(self, int_frame_const_col):
+        """
+
+        Parameters
+        ----------
+        int_frame_const_col :
+            
+
+        Returns
+        -------
+
+        """
         # result_type should be consistent no matter which
         # path we take in the code
         df = int_frame_const_col
@@ -1030,6 +1486,19 @@
 
     @pytest.mark.parametrize("result_type", ["foo", 1])
     def test_result_type_error(self, result_type, int_frame_const_col):
+        """
+
+        Parameters
+        ----------
+        result_type :
+            
+        int_frame_const_col :
+            
+
+        Returns
+        -------
+
+        """
         # allowed result_type
         df = int_frame_const_col
 
@@ -1046,6 +1515,19 @@
         ids=["list", "tuple", "array"],
     )
     def test_consistency_for_boxed(self, box, int_frame_const_col):
+        """
+
+        Parameters
+        ----------
+        box :
+            
+        int_frame_const_col :
+            
+
+        Returns
+        -------
+
+        """
         # passing an array or list should not affect the output shape
         df = int_frame_const_col
 
@@ -1059,13 +1541,20 @@
 
 
 def zip_frames(frames, axis=1):
-    """
-    take a list of frames, zip them together under the
+    """take a list of frames, zip them together under the
     assumption that these all have the first frames' index/columns.
+
+    Parameters
+    ----------
+    frames :
+        
+    axis :
+         (Default value = 1)
 
     Returns
     -------
-    new_frame : DataFrame
+
+    
     """
     if axis == 1:
         columns = frames[0].columns
@@ -1078,7 +1567,21 @@
 
 
 class TestDataFrameAggregate:
+    """ """
     def test_agg_transform(self, axis, float_frame):
+        """
+
+        Parameters
+        ----------
+        axis :
+            
+        float_frame :
+            
+
+        Returns
+        -------
+
+        """
         other_axis = 1 if axis in {0, "index"} else 0
 
         with np.errstate(all="ignore"):
@@ -1132,6 +1635,19 @@
             tm.assert_frame_equal(result, expected)
 
     def test_transform_and_agg_err(self, axis, float_frame):
+        """
+
+        Parameters
+        ----------
+        axis :
+            
+        float_frame :
+            
+
+        Returns
+        -------
+
+        """
         # cannot both transform and agg
         msg = "transforms cannot produce aggregated results"
         with pytest.raises(ValueError, match=msg):
@@ -1149,11 +1665,23 @@
         df = pd.DataFrame({"A": range(5), "B": 5})
 
         def f():
+            """ """
             with np.errstate(all="ignore"):
                 df.agg({"A": ["abs", "sum"], "B": ["mean", "max"]}, axis=axis)
 
     @pytest.mark.parametrize("method", ["abs", "shift", "pct_change", "cumsum", "rank"])
     def test_transform_method_name(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         # GH 19760
         df = pd.DataFrame({"A": [-1, 2]})
         result = df.transform(method)
@@ -1161,6 +1689,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_demo(self):
+        """ """
         # demonstration tests
         df = pd.DataFrame({"A": range(5), "B": 5})
 
@@ -1179,6 +1708,7 @@
         tm.assert_frame_equal(result.reindex_like(expected), expected)
 
     def test_agg_multiple_mixed_no_warning(self):
+        """ """
         # GH 20909
         mdf = pd.DataFrame(
             {
@@ -1213,6 +1743,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_agg_dict_nested_renaming_depr(self):
+        """ """
 
         df = pd.DataFrame({"A": range(5), "B": 5})
 
@@ -1222,6 +1753,19 @@
             df.agg({"A": {"foo": "min"}, "B": {"bar": "max"}})
 
     def test_agg_reduce(self, axis, float_frame):
+        """
+
+        Parameters
+        ----------
+        axis :
+            
+        float_frame :
+            
+
+        Returns
+        -------
+
+        """
         other_axis = 1 if axis in {0, "index"} else 0
         name1, name2 = float_frame.axes[other_axis].unique()[:2].sort_values()
 
@@ -1301,6 +1845,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_nuiscance_columns(self):
+        """ """
 
         # GH 15015
         df = DataFrame(
@@ -1335,6 +1880,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_non_callable_aggregates(self):
+        """ """
 
         # GH 16405
         # 'size' is a property of frame/series
@@ -1384,12 +1930,24 @@
         assert result == expected
 
     def test_agg_listlike_result(self):
+        """ """
         # GH-29587 user defined function returning list-likes
         df = DataFrame(
             {"A": [2, 2, 3], "B": [1.5, np.nan, 1.5], "C": ["foo", None, "bar"]}
         )
 
         def func(group_col):
+            """
+
+            Parameters
+            ----------
+            group_col :
+                
+
+            Returns
+            -------
+
+            """
             return list(group_col.dropna().unique())
 
         result = df.agg(func)
@@ -1436,6 +1994,23 @@
         ),
     )
     def test_agg_cython_table(self, df, func, expected, axis):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        func :
+            
+        expected :
+            
+        axis :
+            
+
+        Returns
+        -------
+
+        """
         # GH 21224
         # test reducing functions in
         # pandas.core.base.SelectionMixin._cython_table
@@ -1458,6 +2033,23 @@
         ),
     )
     def test_agg_cython_table_transform(self, df, func, expected, axis):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        func :
+            
+        expected :
+            
+        axis :
+            
+
+        Returns
+        -------
+
+        """
         # GH 21224
         # test transforming functions in
         # pandas.core.base.SelectionMixin._cython_table (cumprod, cumsum)
@@ -1475,6 +2067,23 @@
         ),
     )
     def test_agg_cython_table_raises(self, df, func, expected, axis):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        func :
+            
+        expected :
+            
+        axis :
+            
+
+        Returns
+        -------
+
+        """
         # GH 21224
         msg = "can't multiply sequence by non-int of type 'str'"
         with pytest.raises(expected, match=msg):
@@ -1494,7 +2103,39 @@
         ],
     )
     def test_agg_args_kwargs(self, axis, args, kwargs):
+        """
+
+        Parameters
+        ----------
+        axis :
+            
+        args :
+            
+        kwargs :
+            
+
+        Returns
+        -------
+
+        """
         def f(x, a, b, c=3):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+            a :
+                
+            b :
+                
+            c :
+                 (Default value = 3)
+
+            Returns
+            -------
+
+            """
             return x.sum() + (a + b) / c
 
         df = pd.DataFrame([[1, 2], [3, 4]])
@@ -1510,6 +2151,17 @@
 
     @pytest.mark.parametrize("num_cols", [2, 3, 5])
     def test_frequency_is_original(self, num_cols):
+        """
+
+        Parameters
+        ----------
+        num_cols :
+            
+
+        Returns
+        -------
+
+        """
         # GH 22150
         index = pd.DatetimeIndex(["1950-06-30", "1952-10-24", "1953-05-29"])
         original = index.copy()
@@ -1518,6 +2170,7 @@
         assert index.freq == original.freq
 
     def test_apply_datetime_tz_issue(self):
+        """ """
         # GH 29052
 
         timestamps = [
@@ -1534,6 +2187,19 @@
     @pytest.mark.parametrize("df", [pd.DataFrame({"A": ["a", None], "B": ["c", "d"]})])
     @pytest.mark.parametrize("method", ["min", "max", "sum"])
     def test_consistency_of_aggregates_of_columns_with_missing_values(self, df, method):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        method :
+            
+
+        Returns
+        -------
+
+        """
         # GH 16832
         none_in_first_column_result = getattr(df[["A", "B"]], method)()
         none_in_second_column_result = getattr(df[["B", "A"]], method)()
@@ -1544,6 +2210,17 @@
 
     @pytest.mark.parametrize("col", [1, 1.0, True, "a", np.nan])
     def test_apply_dtype(self, col):
+        """
+
+        Parameters
+        ----------
+        col :
+            
+
+        Returns
+        -------
+
+        """
         # GH 31466
         df = pd.DataFrame([[1.0, col]], columns=["a", "b"])
         result = df.apply(lambda x: x.dtype)
@@ -1553,10 +2230,22 @@
 
 
 def test_apply_mutating():
+    """ """
     # GH#35462 case where applied func pins a new BlockManager to a row
     df = pd.DataFrame({"a": range(100), "b": range(100, 200)})
 
     def func(row):
+        """
+
+        Parameters
+        ----------
+        row :
+            
+
+        Returns
+        -------
+
+        """
         mgr = row._mgr
         row.loc["a"] += 1
         assert row._mgr is not mgr
@@ -1572,6 +2261,7 @@
 
 
 def test_apply_empty_list_reduce():
+    """ """
     # GH#35683 get columns correct
     df = pd.DataFrame([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]], columns=["a", "b"])
 
@@ -1581,6 +2271,7 @@
 
 
 def test_apply_no_suffix_index():
+    """ """
     # GH36189
     pdf = pd.DataFrame([[4, 9]] * 3, columns=["A", "B"])
     result = pdf.apply(["sum", lambda x: x.sum(), lambda x: x.sum()])
@@ -1592,6 +2283,7 @@
 
 
 def test_apply_raw_returns_string():
+    """ """
     # https://github.com/pandas-dev/pandas/issues/35940
     df = pd.DataFrame({"A": ["aa", "bbb"]})
     result = df.apply(lambda x: x[0], axis=1, raw=True)
