# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/parser/test_usecols.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/parser/test_usecols.py
@@ -23,6 +23,17 @@
 
 
 def test_raise_on_mixed_dtype_usecols(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # See gh-12678
     data = """a,b,c
         1000,2000,3000
@@ -37,12 +48,22 @@
 
 @pytest.mark.parametrize("usecols", [(1, 2), ("b", "c")])
 def test_usecols(all_parsers, usecols):
-    data = """\
-a,b,c
-1,2,3
-4,5,6
-7,8,9
-10,11,12"""
+    """data = """\
+    a,b,c
+    1,2,3
+    4,5,6
+    7,8,9
+    10,11,12
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    usecols :
+        
+
+    Returns
+    -------
     parser = all_parsers
     result = parser.read_csv(StringIO(data), usecols=usecols)
 
@@ -51,12 +72,20 @@
 
 
 def test_usecols_with_names(all_parsers):
-    data = """\
-a,b,c
-1,2,3
-4,5,6
-7,8,9
-10,11,12"""
+    """data = """\
+    a,b,c
+    1,2,3
+    4,5,6
+    7,8,9
+    10,11,12
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
     parser = all_parsers
     names = ["foo", "bar"]
     result = parser.read_csv(StringIO(data), names=names, usecols=[1, 2], header=0)
@@ -69,11 +98,23 @@
     "names,usecols", [(["b", "c"], [1, 2]), (["a", "b", "c"], ["b", "c"])]
 )
 def test_usecols_relative_to_names(all_parsers, names, usecols):
-    data = """\
-1,2,3
-4,5,6
-7,8,9
-10,11,12"""
+    """data = """\
+    1,2,3
+    4,5,6
+    7,8,9
+    10,11,12
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    names :
+        
+    usecols :
+        
+
+    Returns
+    -------
     parser = all_parsers
     result = parser.read_csv(StringIO(data), names=names, header=None, usecols=usecols)
 
@@ -82,6 +123,17 @@
 
 
 def test_usecols_relative_to_names2(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-5766
     data = """\
 1,2,3
@@ -98,11 +150,19 @@
 
 
 def test_usecols_name_length_conflict(all_parsers):
-    data = """\
-1,2,3
-4,5,6
-7,8,9
-10,11,12"""
+    """data = """\
+    1,2,3
+    4,5,6
+    7,8,9
+    10,11,12
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
     parser = all_parsers
     msg = (
         "Number of passed names did not match number of header fields in the file"
@@ -115,6 +175,17 @@
 
 
 def test_usecols_single_string(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-20558
     parser = all_parsers
     data = """foo, bar, baz
@@ -129,6 +200,19 @@
     "data", ["a,b,c,d\n1,2,3,4\n5,6,7,8", "a,b,c,d\n1,2,3,4,\n5,6,7,8,"]
 )
 def test_usecols_index_col_false(all_parsers, data):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    data :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-9082
     parser = all_parsers
     usecols = ["a", "c", "d"]
@@ -141,6 +225,21 @@
 @pytest.mark.parametrize("index_col", ["b", 0])
 @pytest.mark.parametrize("usecols", [["b", "c"], [1, 2]])
 def test_usecols_index_col_conflict(all_parsers, usecols, index_col):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    usecols :
+        
+    index_col :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-4201: test that index_col as integer reflects usecols
     parser = all_parsers
     data = "a,b,c,d\nA,a,1,one\nB,b,2,two"
@@ -151,6 +250,17 @@
 
 
 def test_usecols_index_col_conflict2(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-4201: test that index_col as integer reflects usecols
     parser = all_parsers
     data = "a,b,c,d\nA,a,1,one\nB,b,2,two"
@@ -165,6 +275,17 @@
 
 
 def test_usecols_implicit_index_col(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-2654
     parser = all_parsers
     data = "a,b,c\n4,apple,bat,5.7\n8,orange,cow,10"
@@ -175,6 +296,17 @@
 
 
 def test_usecols_regex_sep(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-2733
     parser = all_parsers
     data = "a  b  c\n4  apple  bat  5.7\n8  orange  cow  10"
@@ -185,6 +317,17 @@
 
 
 def test_usecols_with_whitespace(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = "a  b  c\n4  apple  bat  5.7\n8  orange  cow  10"
 
@@ -203,6 +346,21 @@
     ],
 )
 def test_usecols_with_integer_like_header(all_parsers, usecols, expected):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    usecols :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """2,0,1
 1000,2000,3000
@@ -214,6 +372,19 @@
 
 @pytest.mark.parametrize("usecols", [[0, 2, 3], [3, 0, 2]])
 def test_usecols_with_parse_dates(all_parsers, usecols):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    usecols :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-9755
     data = """a,b,c,d,e
 0,1,20140101,0900,4
@@ -231,6 +402,17 @@
 
 
 def test_usecols_with_parse_dates2(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-13604
     parser = all_parsers
     data = """2008-02-07 09:40,1032.43
@@ -264,6 +446,17 @@
 
 
 def test_usecols_with_parse_dates3(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-14792
     parser = all_parsers
     data = """a,b,c,d,e,f,g,h,i,j
@@ -291,6 +484,17 @@
 
 
 def test_usecols_with_parse_dates4(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     data = "a,b,c,d,e,f,g,h,i,j\n2016/09/21,1,1,2,3,4,5,6,7,8"
     usecols = list("abcdefghij")
     parse_dates = [[0, 1]]
@@ -322,6 +526,21 @@
     ],
 )
 def test_usecols_with_parse_dates_and_names(all_parsers, usecols, names):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    usecols :
+        
+    names :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-9755
     s = """0,1,20140101,0900,4
 0,1,20140102,1000,4"""
@@ -341,6 +560,17 @@
 
 
 def test_usecols_with_unicode_strings(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-13219
     data = """AAA,BBB,CCC,DDD
 0.056674973,8,True,a
@@ -359,6 +589,17 @@
 
 
 def test_usecols_with_single_byte_unicode_strings(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-13219
     data = """A,B,C,D
 0.056674973,8,True,a
@@ -378,10 +619,20 @@
 
 @pytest.mark.parametrize("usecols", [["AAA", b"BBB"], [b"AAA", "BBB"]])
 def test_usecols_with_mixed_encoding_strings(all_parsers, usecols):
-    data = """AAA,BBB,CCC,DDD
-0.056674973,8,True,a
-2.613230982,2,False,b
-3.568935038,7,False,a"""
+    """data = """AAA,BBB,CCC,DDD
+    0.056674973,8,True,a
+    2.613230982,2,False,b
+    3.568935038,7,False,a
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    usecols :
+        
+
+    Returns
+    -------
     parser = all_parsers
 
     with pytest.raises(ValueError, match=_msg_validate_usecols_arg):
@@ -390,10 +641,20 @@
 
 @pytest.mark.parametrize("usecols", [["あああ", "いい"], ["あああ", "いい"]])
 def test_usecols_with_multi_byte_characters(all_parsers, usecols):
-    data = """あああ,いい,ううう,ええええ
-0.056674973,8,True,a
-2.613230982,2,False,b
-3.568935038,7,False,a"""
+    """data = """あああ,いい,ううう,ええええ
+    0.056674973,8,True,a
+    2.613230982,2,False,b
+    3.568935038,7,False,a
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    usecols :
+        
+
+    Returns
+    -------
     parser = all_parsers
 
     exp_data = {
@@ -407,6 +668,17 @@
 
 
 def test_empty_usecols(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     data = "a,b,c\n1,2,3\n4,5,6"
     expected = DataFrame()
     parser = all_parsers
@@ -416,6 +688,17 @@
 
 
 def test_np_array_usecols(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-12546
     parser = all_parsers
     data = "a,b,c\n1,2,3"
@@ -447,6 +730,21 @@
     ],
 )
 def test_callable_usecols(all_parsers, usecols, expected):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    usecols :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-14154
     data = """AaA,bBb,CCC,ddd
 0.056674973,8,True,a
@@ -460,6 +758,19 @@
 
 @pytest.mark.parametrize("usecols", [["a", "c"], lambda x: x in ["a", "c"]])
 def test_incomplete_first_row(all_parsers, usecols):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    usecols :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-6710
     data = "1,2\n1,2,3"
     parser = all_parsers
@@ -496,6 +807,25 @@
     ],
 )
 def test_uneven_length_cols(all_parsers, data, usecols, kwargs, expected):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    data :
+        
+    usecols :
+        
+    kwargs :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-8985
     parser = all_parsers
     result = parser.read_csv(StringIO(data), usecols=usecols, **kwargs)
@@ -546,6 +876,25 @@
     ],
 )
 def test_raises_on_usecols_names_mismatch(all_parsers, usecols, kwargs, expected, msg):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    usecols :
+        
+    kwargs :
+        
+    expected :
+        
+    msg :
+        
+
+    Returns
+    -------
+
+    """
     data = "a,b,c,d\n1,2,3,4\n5,6,7,8"
     kwargs.update(usecols=usecols)
     parser = all_parsers
@@ -560,6 +909,21 @@
 
 @pytest.mark.parametrize("usecols", [["A", "C"], [0, 2]])
 def test_usecols_subset_names_mismatch_orig_columns(all_parsers, usecols, request):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    usecols :
+        
+    request :
+        
+
+    Returns
+    -------
+
+    """
     if all_parsers.engine != "c":
         reason = "see gh-16469: works on the C engine but not the Python engine"
         # Number of passed names did not match number of header fields in the file
