# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/babel/messages/pofile.py
+++ b/..//venv/lib/python3.8/site-packages/babel/messages/pofile.py
@@ -20,16 +20,32 @@
 
 
 def unescape(string):
-    r"""Reverse `escape` the given string.
+    """r"""Reverse `escape` the given string.
+
+    Parameters
+    ----------
+    string :
+        the string to unescape
+
+    Returns
+    -------
 
     >>> print(unescape('"Say:\\n  \\"hello, world!\\"\\n"'))
     Say:
       "hello, world!"
     <BLANKLINE>
-
-    :param string: the string to unescape
-    """
     def replace_escapes(match):
+        """
+
+        Parameters
+        ----------
+        match :
+            
+
+        Returns
+        -------
+
+        """
         m = match.group(1)
         if m == 'n':
             return '\n'
@@ -43,7 +59,15 @@
 
 
 def denormalize(string):
-    r"""Reverse the normalization done by the `normalize` function.
+    """r"""Reverse the normalization done by the `normalize` function.
+
+    Parameters
+    ----------
+    string :
+        the string to denormalize
+
+    Returns
+    -------
 
     >>> print(denormalize(r'''""
     ... "Say:\n"
@@ -51,7 +75,7 @@
     Say:
       "hello, world!"
     <BLANKLINE>
-
+    
     >>> print(denormalize(r'''""
     ... "Say:\n"
     ... "  \"Lorem ipsum dolor sit "
@@ -60,9 +84,6 @@
     Say:
       "Lorem ipsum dolor sit amet, consectetur adipisicing elit, "
     <BLANKLINE>
-
-    :param string: the string to denormalize
-    """
     if '\n' in string:
         escaped_lines = string.splitlines()
         if string.startswith('""'):
@@ -74,7 +95,7 @@
 
 
 class PoFileError(Exception):
-    """Exception thrown by PoParser when an invalid po file is encountered."""
+    """ """
     def __init__(self, message, catalog, line, lineno):
         super(PoFileError, self).__init__('{message} on {lineno}'.format(message=message, lineno=lineno))
         self.catalog = catalog
@@ -83,6 +104,7 @@
 
 
 class _NormalizedString(object):
+    """ """
 
     def __init__(self, *args):
         self._strs = []
@@ -90,9 +112,21 @@
             self.append(arg)
 
     def append(self, s):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+
+        Returns
+        -------
+
+        """
         self._strs.append(s.strip())
 
     def denormalize(self):
+        """ """
         return ''.join(map(unescape, self._strs))
 
     def __nonzero__(self):
@@ -132,8 +166,15 @@
 class PoFileParser(object):
     """Support class to  read messages from a ``gettext`` PO (portable object) file
     and add them to a `Catalog`
-
+    
     See `read_po` for simple cases.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     _keywords = [
@@ -152,6 +193,7 @@
         self._reset_message_state()
 
     def _reset_message_state(self):
+        """ """
         self.messages = []
         self.translations = []
         self.locations = []
@@ -165,9 +207,15 @@
         self.in_msgctxt = False
 
     def _add_message(self):
-        """
-        Add a message to the catalog based on the current parser state and
+        """Add a message to the catalog based on the current parser state and
         clear the state ready to process the next message.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         self.translations.sort()
         if len(self.messages) > 1:
@@ -200,16 +248,47 @@
         self._reset_message_state()
 
     def _finish_current_message(self):
+        """ """
         if self.messages:
             self._add_message()
 
     def _process_message_line(self, lineno, line, obsolete=False):
+        """
+
+        Parameters
+        ----------
+        lineno :
+            
+        line :
+            
+        obsolete :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         if line.startswith('"'):
             self._process_string_continuation_line(line, lineno)
         else:
             self._process_keyword_line(lineno, line, obsolete)
 
     def _process_keyword_line(self, lineno, line, obsolete=False):
+        """
+
+        Parameters
+        ----------
+        lineno :
+            
+        line :
+            
+        obsolete :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
 
         for keyword in self._keywords:
             try:
@@ -251,6 +330,19 @@
             self.context = _NormalizedString(arg)
 
     def _process_string_continuation_line(self, line, lineno):
+        """
+
+        Parameters
+        ----------
+        line :
+            
+        lineno :
+            
+
+        Returns
+        -------
+
+        """
         if self.in_msgid:
             s = self.messages[-1]
         elif self.in_msgstr:
@@ -263,6 +355,17 @@
         s.append(line)
 
     def _process_comment(self, line):
+        """
+
+        Parameters
+        ----------
+        line :
+            
+
+        Returns
+        -------
+
+        """
 
         self._finish_current_message()
 
@@ -290,9 +393,17 @@
             self.user_comments.append(line[1:].strip())
 
     def parse(self, fileobj):
-        """
-        Reads from the file-like object `fileobj` and adds any po file
+        """Reads from the file-like object `fileobj` and adds any po file
         units found in it to the `Catalog` supplied to the constructor.
+
+        Parameters
+        ----------
+        fileobj :
+            
+
+        Returns
+        -------
+
         """
 
         for lineno, line in enumerate(fileobj):
@@ -319,6 +430,21 @@
             self._add_message()
 
     def _invalid_pofile(self, line, lineno, msg):
+        """
+
+        Parameters
+        ----------
+        line :
+            
+        lineno :
+            
+        msg :
+            
+
+        Returns
+        -------
+
+        """
         assert isinstance(line, text_type)
         if self.abort_invalid:
             raise PoFileError(msg, self.catalog, line, lineno)
@@ -332,6 +458,31 @@
 def read_po(fileobj, locale=None, domain=None, ignore_obsolete=False, charset=None, abort_invalid=False):
     """Read messages from a ``gettext`` PO (portable object) file from the given
     file-like object and return a `Catalog`.
+    
+    
+    
+    .. versionadded:: 1.0
+       Added support for explicit charset argument.
+
+    Parameters
+    ----------
+    fileobj :
+        the file-like object to read the PO file from
+    locale :
+        the locale identifier or `Locale` object, or `None`
+        if the catalog is not bound to a locale (which basically
+        means it's a template) (Default value = None)
+    domain :
+        the message domain (Default value = None)
+    ignore_obsolete :
+        whether to ignore obsolete messages in the input (Default value = False)
+    charset :
+        the character set of the catalog. (Default value = None)
+    abort_invalid :
+        abort read if po file is invalid (Default value = False)
+
+    Returns
+    -------
 
     >>> from datetime import datetime
     >>> from babel._compat import StringIO
@@ -351,7 +502,7 @@
     ... ''')
     >>> catalog = read_po(buf)
     >>> catalog.revision_date = datetime(2007, 4, 1)
-
+    
     >>> for message in catalog:
     ...     if message.id:
     ...         print((message.id, message.string))
@@ -363,18 +514,6 @@
     ((u'bar', u'baz'), (u'bar', u'baaz'))
       ([(u'main.py', 3)], [])
       ([u'A user comment'], [u'An auto comment'])
-
-    .. versionadded:: 1.0
-       Added support for explicit charset argument.
-
-    :param fileobj: the file-like object to read the PO file from
-    :param locale: the locale identifier or `Locale` object, or `None`
-                   if the catalog is not bound to a locale (which basically
-                   means it's a template)
-    :param domain: the message domain
-    :param ignore_obsolete: whether to ignore obsolete messages in the input
-    :param charset: the character set of the catalog.
-    :param abort_invalid: abort read if po file is invalid
     """
     catalog = Catalog(locale=locale, domain=domain, charset=charset)
     parser = PoFileParser(catalog, ignore_obsolete, abort_invalid=abort_invalid)
@@ -390,16 +529,21 @@
 
 
 def escape(string):
-    r"""Escape the given string so that it can be included in double-quoted
+    """r"""Escape the given string so that it can be included in double-quoted
     strings in ``PO`` files.
+
+    Parameters
+    ----------
+    string :
+        the string to escape
+
+    Returns
+    -------
 
     >>> escape('''Say:
     ...   "hello, world!"
     ... ''')
     '"Say:\\n  \\"hello, world!\\"\\n"'
-
-    :param string: the string to escape
-    """
     return '"%s"' % string.replace('\\', '\\\\') \
                           .replace('\t', '\\t') \
                           .replace('\r', '\\r') \
@@ -408,7 +552,20 @@
 
 
 def normalize(string, prefix='', width=76):
-    r"""Convert a string into a format that is appropriate for .po files.
+    """r"""Convert a string into a format that is appropriate for .po files.
+
+    Parameters
+    ----------
+    string :
+        the string to normalize
+    prefix :
+        a string that should be prepended to every line (Default value = '')
+    width :
+        the maximum line width; use `None`, 0, or a negative number
+        to completely disable line wrapping (Default value = 76)
+
+    Returns
+    -------
 
     >>> print(normalize('''Say:
     ...   "hello, world!"
@@ -416,7 +573,7 @@
     ""
     "Say:\n"
     "  \"hello, world!\"\n"
-
+    
     >>> print(normalize('''Say:
     ...   "Lorem ipsum dolor sit amet, consectetur adipisicing elit, "
     ... ''', width=32))
@@ -425,12 +582,6 @@
     "  \"Lorem ipsum dolor sit "
     "amet, consectetur adipisicing"
     " elit, \"\n"
-
-    :param string: the string to normalize
-    :param prefix: a string that should be prepended to every line
-    :param width: the maximum line width; use `None`, 0, or a negative number
-                  to completely disable line wrapping
-    """
     if width and width > 0:
         prefixlen = len(prefix)
         lines = []
@@ -471,8 +622,40 @@
 def write_po(fileobj, catalog, width=76, no_location=False, omit_header=False,
              sort_output=False, sort_by_file=False, ignore_obsolete=False,
              include_previous=False, include_lineno=True):
-    r"""Write a ``gettext`` PO (portable object) template file for a given
+    """r"""Write a ``gettext`` PO (portable object) template file for a given
     message catalog to the provided file-like object.
+
+    Parameters
+    ----------
+    fileobj :
+        the file-like object to write to
+    catalog :
+        the `Catalog` instance
+    width :
+        the maximum line width for the generated output; use `None`,
+        0, or a negative number to completely disable line wrapping (Default value = 76)
+    no_location :
+        do not emit a location comment for every message (Default value = False)
+    omit_header :
+        do not include the ``msgid ""`` entry at the top of the
+        output (Default value = False)
+    sort_output :
+        whether to sort the messages in the output by msgid (Default value = False)
+    sort_by_file :
+        whether to sort the messages in the output by their
+        locations (Default value = False)
+    ignore_obsolete :
+        whether to ignore obsolete messages and not include
+        them in the output; by default they are included as
+        comments
+    include_previous :
+        include the old msgid as a comment when
+        updating the catalog (Default value = False)
+    include_lineno :
+        include line number in the location comment (Default value = True)
+
+    Returns
+    -------
 
     >>> catalog = Catalog()
     >>> catalog.add(u'foo %(name)s', locations=[('main.py', 1)],
@@ -496,33 +679,52 @@
     msgstr[1] ""
     <BLANKLINE>
     <BLANKLINE>
-
-    :param fileobj: the file-like object to write to
-    :param catalog: the `Catalog` instance
-    :param width: the maximum line width for the generated output; use `None`,
-                  0, or a negative number to completely disable line wrapping
-    :param no_location: do not emit a location comment for every message
-    :param omit_header: do not include the ``msgid ""`` entry at the top of the
-                        output
-    :param sort_output: whether to sort the messages in the output by msgid
-    :param sort_by_file: whether to sort the messages in the output by their
-                         locations
-    :param ignore_obsolete: whether to ignore obsolete messages and not include
-                            them in the output; by default they are included as
-                            comments
-    :param include_previous: include the old msgid as a comment when
-                             updating the catalog
-    :param include_lineno: include line number in the location comment
-    """
     def _normalize(key, prefix=''):
+        """
+
+        Parameters
+        ----------
+        key :
+            
+        prefix :
+             (Default value = '')
+
+        Returns
+        -------
+
+        """
         return normalize(key, prefix=prefix, width=width)
 
     def _write(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         if isinstance(text, text_type):
             text = text.encode(catalog.charset, 'backslashreplace')
         fileobj.write(text)
 
     def _write_comment(comment, prefix=''):
+        """
+
+        Parameters
+        ----------
+        comment :
+            
+        prefix :
+             (Default value = '')
+
+        Returns
+        -------
+
+        """
         # xgettext always wraps comments even if --no-wrap is passed;
         # provide the same behaviour
         if width and width > 0:
@@ -533,6 +735,19 @@
             _write('#%s %s\n' % (prefix, line.strip()))
 
     def _write_message(message, prefix=''):
+        """
+
+        Parameters
+        ----------
+        message :
+            
+        prefix :
+             (Default value = '')
+
+        Returns
+        -------
+
+        """
         if isinstance(message.id, (list, tuple)):
             if message.context:
                 _write('%smsgctxt %s\n' % (prefix,
@@ -628,14 +843,22 @@
 
 
 def _sort_messages(messages, sort_by):
-    """
-    Sort the given message iterable by the given criteria.
-
+    """Sort the given message iterable by the given criteria.
+    
     Always returns a list.
 
-    :param messages: An iterable of Messages.
-    :param sort_by: Sort by which criteria? Options are `message` and `location`.
-    :return: list[Message]
+    Parameters
+    ----------
+    messages :
+        An iterable of Messages.
+    sort_by :
+        Sort by which criteria? Options are `message` and `location`.
+
+    Returns
+    -------
+    type
+        list[Message]
+
     """
     messages = list(messages)
     if sort_by == "message":
