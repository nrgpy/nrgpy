# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/series/methods/test_interpolate.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/series/methods/test_interpolate.py
@@ -30,11 +30,20 @@
     ]
 )
 def nontemporal_method(request):
-    """ Fixture that returns an (method name, required kwargs) pair.
-
+    """Fixture that returns an (method name, required kwargs) pair.
+    
     This fixture does not include method 'time' as a parameterization; that
     method requires a Series with a DatetimeIndex, and is generally tested
     separately from these non-temporal methods.
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
     """
     method = request.param
     kwargs = dict(order=1) if method in ("spline", "polynomial") else dict()
@@ -60,11 +69,20 @@
     ]
 )
 def interp_methods_ind(request):
-    """ Fixture that returns a (method name, required kwargs) pair to
+    """Fixture that returns a (method name, required kwargs) pair to
     be tested for various Index types.
-
+    
     This fixture does not include methods - 'time', 'index', 'nearest',
     'values' as a parameterization
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
     """
     method = request.param
     kwargs = dict(order=1) if method in ("spline", "polynomial") else dict()
@@ -72,7 +90,21 @@
 
 
 class TestSeriesInterpolateData:
+    """ """
     def test_interpolate(self, datetime_series, string_series):
+        """
+
+        Parameters
+        ----------
+        datetime_series :
+            
+        string_series :
+            
+
+        Returns
+        -------
+
+        """
         ts = Series(np.arange(len(datetime_series), dtype=float), datetime_series.index)
 
         ts_copy = ts.copy()
@@ -92,6 +124,7 @@
         tm.assert_series_equal(time_interp, ord_ts)
 
     def test_interpolate_time_raises_for_non_timeseries(self):
+        """ """
         # When method='time' is used on a non-TimeSeries that contains a null
         # value, a ValueError should be raised.
         non_ts = Series([0, 1, 2, np.NaN])
@@ -101,6 +134,7 @@
 
     @td.skip_if_no_scipy
     def test_interpolate_cubicspline(self):
+        """ """
 
         ser = Series([10, 11, 12, 13])
 
@@ -117,6 +151,7 @@
 
     @td.skip_if_no_scipy
     def test_interpolate_pchip(self):
+        """ """
 
         ser = Series(np.sort(np.random.uniform(size=100)))
 
@@ -130,6 +165,7 @@
 
     @td.skip_if_no_scipy
     def test_interpolate_akima(self):
+        """ """
 
         ser = Series([10, 11, 12, 13])
 
@@ -157,6 +193,7 @@
 
     @td.skip_if_no_scipy
     def test_interpolate_piecewise_polynomial(self):
+        """ """
         ser = Series([10, 11, 12, 13])
 
         expected = Series(
@@ -172,6 +209,7 @@
 
     @td.skip_if_no_scipy
     def test_interpolate_from_derivatives(self):
+        """ """
         ser = Series([10, 11, 12, 13])
 
         expected = Series(
@@ -195,6 +233,17 @@
         ],
     )
     def test_interpolate_corners(self, kwargs):
+        """
+
+        Parameters
+        ----------
+        kwargs :
+            
+
+        Returns
+        -------
+
+        """
         s = Series([np.nan, np.nan])
         tm.assert_series_equal(s.interpolate(**kwargs), s)
 
@@ -202,6 +251,7 @@
         tm.assert_series_equal(s.interpolate(**kwargs), s)
 
     def test_interpolate_index_values(self):
+        """ """
         s = Series(np.nan, index=np.sort(np.random.rand(30)))
         s[::3] = np.random.randn(10)
 
@@ -225,6 +275,7 @@
         tm.assert_series_equal(other_result[bad], expected)
 
     def test_interpolate_non_ts(self):
+        """ """
         s = Series([1, 3, np.nan, np.nan, np.nan, 11])
         msg = (
             "time-weighted interpolation only works on Series or DataFrames "
@@ -243,18 +294,31 @@
         ],
     )
     def test_nan_interpolate(self, kwargs):
+        """
+
+        Parameters
+        ----------
+        kwargs :
+            
+
+        Returns
+        -------
+
+        """
         s = Series([0, 1, np.nan, 3])
         result = s.interpolate(**kwargs)
         expected = Series([0.0, 1.0, 2.0, 3.0])
         tm.assert_series_equal(result, expected)
 
     def test_nan_irregular_index(self):
+        """ """
         s = Series([1, 2, np.nan, 4], index=[1, 3, 5, 9])
         result = s.interpolate()
         expected = Series([1.0, 2.0, 3.0, 4.0], index=[1, 3, 5, 9])
         tm.assert_series_equal(result, expected)
 
     def test_nan_str_index(self):
+        """ """
         s = Series([0, 1, 2, np.nan], index=list("abcd"))
         result = s.interpolate()
         expected = Series([0.0, 1.0, 2.0, 2.0], index=list("abcd"))
@@ -262,6 +326,7 @@
 
     @td.skip_if_no_scipy
     def test_interp_quad(self):
+        """ """
         sq = Series([1, 4, np.nan, 16], index=[1, 2, 3, 4])
         result = sq.interpolate(method="quadratic")
         expected = Series([1.0, 4.0, 9.0, 16.0], index=[1, 2, 3, 4])
@@ -269,6 +334,7 @@
 
     @td.skip_if_no_scipy
     def test_interp_scipy_basic(self):
+        """ """
         s = Series([1, 3, np.nan, 12, np.nan, 25])
         # slinear
         expected = Series([1.0, 3.0, 7.5, 12.0, 18.5, 25.0])
@@ -305,6 +371,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_interp_limit(self):
+        """ """
         s = Series([1, 3, np.nan, np.nan, np.nan, 11])
 
         expected = Series([1.0, 3.0, 5.0, 7.0, np.nan, 11.0])
@@ -313,6 +380,19 @@
 
     @pytest.mark.parametrize("limit", [-1, 0])
     def test_interpolate_invalid_nonpositive_limit(self, nontemporal_method, limit):
+        """
+
+        Parameters
+        ----------
+        nontemporal_method :
+            
+        limit :
+            
+
+        Returns
+        -------
+
+        """
         # GH 9217: make sure limit is greater than zero.
         s = pd.Series([1, 2, np.nan, 4])
         method, kwargs = nontemporal_method
@@ -320,6 +400,17 @@
             s.interpolate(limit=limit, method=method, **kwargs)
 
     def test_interpolate_invalid_float_limit(self, nontemporal_method):
+        """
+
+        Parameters
+        ----------
+        nontemporal_method :
+            
+
+        Returns
+        -------
+
+        """
         # GH 9217: make sure limit is an integer.
         s = pd.Series([1, 2, np.nan, 4])
         method, kwargs = nontemporal_method
@@ -329,6 +420,17 @@
 
     @pytest.mark.parametrize("invalid_method", [None, "nonexistent_method"])
     def test_interp_invalid_method(self, invalid_method):
+        """
+
+        Parameters
+        ----------
+        invalid_method :
+            
+
+        Returns
+        -------
+
+        """
         s = Series([1, 3, np.nan, 12, np.nan, 25])
 
         msg = f"method must be one of.* Got '{invalid_method}' instead"
@@ -341,6 +443,7 @@
             s.interpolate(method=invalid_method, limit=-1)
 
     def test_interp_limit_forward(self):
+        """ """
         s = Series([1, 3, np.nan, np.nan, np.nan, 11])
 
         # Provide 'forward' (the default) explicitly here.
@@ -353,6 +456,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_interp_unlimited(self):
+        """ """
         # these test are for issue #16282 default Limit=None is unlimited
         s = Series([np.nan, 1.0, 3.0, np.nan, np.nan, np.nan, 11.0, np.nan])
         expected = Series([1.0, 1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 11.0])
@@ -368,6 +472,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_interp_limit_bad_direction(self):
+        """ """
         s = Series([1, 3, np.nan, np.nan, np.nan, 11])
 
         msg = (
@@ -383,6 +488,7 @@
 
     # limit_area introduced GH #16284
     def test_interp_limit_area(self):
+        """ """
         # These tests are for issue #9218 -- fill NaNs in both directions.
         s = Series([np.nan, np.nan, 3, np.nan, np.nan, np.nan, 7, np.nan, np.nan])
 
@@ -443,6 +549,21 @@
         ],
     )
     def test_interp_limit_direction_raises(self, method, limit_direction, expected):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+        limit_direction :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # https://github.com/pandas-dev/pandas/pull/34746
         s = Series([1, 2, 3])
 
@@ -451,6 +572,7 @@
             s.interpolate(method=method, limit_direction=limit_direction)
 
     def test_interp_limit_direction(self):
+        """ """
         # These tests are for issue #9218 -- fill NaNs in both directions.
         s = Series([1, 3, np.nan, np.nan, np.nan, 11])
 
@@ -476,6 +598,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_interp_limit_to_ends(self):
+        """ """
         # These test are for issue #10420 -- flow back to beginning.
         s = Series([np.nan, np.nan, 5, 7, 9, np.nan])
 
@@ -488,6 +611,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_interp_limit_before_ends(self):
+        """ """
         # These test are for issue #11115 -- limit ends properly.
         s = Series([np.nan, np.nan, 5, 7, np.nan, np.nan])
 
@@ -505,6 +629,7 @@
 
     @td.skip_if_no_scipy
     def test_interp_all_good(self):
+        """ """
         s = Series([1, 2, 3])
         result = s.interpolate(method="polynomial", order=1)
         tm.assert_series_equal(result, s)
@@ -517,6 +642,17 @@
         "check_scipy", [False, pytest.param(True, marks=td.skip_if_no_scipy)]
     )
     def test_interp_multiIndex(self, check_scipy):
+        """
+
+        Parameters
+        ----------
+        check_scipy :
+            
+
+        Returns
+        -------
+
+        """
         idx = MultiIndex.from_tuples([(0, "a"), (1, "b"), (2, "c")])
         s = Series([1, 2, np.nan], index=idx)
 
@@ -532,6 +668,7 @@
 
     @td.skip_if_no_scipy
     def test_interp_nonmono_raise(self):
+        """ """
         s = Series([1, np.nan, 3], index=[0, 2, 1])
         msg = "krogh interpolation requires that the index be monotonic"
         with pytest.raises(ValueError, match=msg):
@@ -540,6 +677,19 @@
     @td.skip_if_no_scipy
     @pytest.mark.parametrize("method", ["nearest", "pad"])
     def test_interp_datetime64(self, method, tz_naive_fixture):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+        tz_naive_fixture :
+            
+
+        Returns
+        -------
+
+        """
         df = Series(
             [1, np.nan, 3], index=date_range("1/1/2000", periods=3, tz=tz_naive_fixture)
         )
@@ -551,6 +701,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_interp_pad_datetime64tz_values(self):
+        """ """
         # GH#27628 missing.interpolate_2d should handle datetimetz values
         dti = pd.date_range("2015-04-05", periods=3, tz="US/Central")
         ser = pd.Series(dti)
@@ -562,6 +713,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_interp_limit_no_nans(self):
+        """ """
         # GH 7173
         s = pd.Series([1.0, 2.0, 3.0])
         result = s.interpolate(limit=1)
@@ -571,6 +723,17 @@
     @td.skip_if_no_scipy
     @pytest.mark.parametrize("method", ["polynomial", "spline"])
     def test_no_order(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         # see GH-10633, GH-24014
         s = Series([0, 1, np.nan, 3])
         msg = "You must specify the order of the spline or polynomial"
@@ -580,6 +743,17 @@
     @td.skip_if_no_scipy
     @pytest.mark.parametrize("order", [-1, -1.0, 0, 0.0, np.nan])
     def test_interpolate_spline_invalid_order(self, order):
+        """
+
+        Parameters
+        ----------
+        order :
+            
+
+        Returns
+        -------
+
+        """
         s = Series([0, 1, np.nan, 3])
         msg = "order needs to be specified and greater than 0"
         with pytest.raises(ValueError, match=msg):
@@ -587,6 +761,7 @@
 
     @td.skip_if_no_scipy
     def test_spline(self):
+        """ """
         s = Series([1, 2, np.nan, 4, 5, np.nan, 7])
         result = s.interpolate(method="spline", order=1)
         expected = Series([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])
@@ -594,6 +769,7 @@
 
     @td.skip_if_no_scipy
     def test_spline_extrapolate(self):
+        """ """
         s = Series([1, 2, 3, 4, np.nan, 6, np.nan])
         result3 = s.interpolate(method="spline", order=1, ext=3)
         expected3 = Series([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 6.0])
@@ -605,6 +781,7 @@
 
     @td.skip_if_no_scipy
     def test_spline_smooth(self):
+        """ """
         s = Series([1, 2, np.nan, 4, 5.1, np.nan, 7])
         assert (
             s.interpolate(method="spline", order=3, s=0)[5]
@@ -613,6 +790,7 @@
 
     @td.skip_if_no_scipy
     def test_spline_interpolation(self):
+        """ """
         s = Series(np.arange(10) ** 2)
         s[np.random.randint(0, 9, 3)] = np.nan
         result1 = s.interpolate(method="spline", order=1)
@@ -620,6 +798,7 @@
         tm.assert_series_equal(result1, expected1)
 
     def test_interp_timedelta64(self):
+        """ """
         # GH 6424
         df = Series([1, np.nan, 3], index=pd.to_timedelta([1, 2, 3]))
         result = df.interpolate(method="time")
@@ -633,6 +812,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_series_interpolate_method_values(self):
+        """ """
         # GH#1646
         rng = date_range("1/1/2000", "1/20/2000", freq="D")
         ts = Series(np.random.randn(len(rng)), index=rng)
@@ -644,6 +824,7 @@
         tm.assert_series_equal(result, exp)
 
     def test_series_interpolate_intraday(self):
+        """ """
         # #1698
         index = pd.date_range("1/1/2012", periods=4, freq="12D")
         ts = pd.Series([0, 12, 24, 36], index)
@@ -667,6 +848,19 @@
         ],
     )
     def test_interp_non_timedelta_index(self, interp_methods_ind, ind):
+        """
+
+        Parameters
+        ----------
+        interp_methods_ind :
+            
+        ind :
+            
+
+        Returns
+        -------
+
+        """
         # gh 21662
         df = pd.DataFrame([0, 1, np.nan, 3], index=ind)
 
@@ -689,10 +883,18 @@
                 df[0].interpolate(method=method, **kwargs)
 
     def test_interpolate_timedelta_index(self, interp_methods_ind):
-        """
-        Tests for non numerical index types  - object, period, timedelta
+        """Tests for non numerical index types  - object, period, timedelta
         Note that all methods except time, index, nearest and values
         are tested here.
+
+        Parameters
+        ----------
+        interp_methods_ind :
+            
+
+        Returns
+        -------
+
         """
         # gh 21662
         ind = pd.timedelta_range(start=1, periods=4)
@@ -716,6 +918,19 @@
         [(True, [1, 2, 3, 9, 10]), (False, [10, 9, 3, 2, 1])],
     )
     def test_interpolate_unsorted_index(self, ascending, expected_values):
+        """
+
+        Parameters
+        ----------
+        ascending :
+            
+        expected_values :
+            
+
+        Returns
+        -------
+
+        """
         # GH 21037
         ts = pd.Series(data=[10, 9, np.nan, 2, 1], index=[10, 9, 3, 2, 1])
         result = ts.sort_index(ascending=ascending).interpolate(method="index")
