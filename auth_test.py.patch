# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tornado/test/auth_test.py
+++ b/..//venv/lib/python3.8/site-packages/tornado/test/auth_test.py
@@ -28,11 +28,24 @@
 
 
 class OpenIdClientLoginHandler(RequestHandler, OpenIdMixin):
+    """ """
     def initialize(self, test):
+        """
+
+        Parameters
+        ----------
+        test :
+            
+
+        Returns
+        -------
+
+        """
         self._OPENID_ENDPOINT = test.get_url("/openid/server/authenticate")
 
     @gen.coroutine
     def get(self):
+        """ """
         if self.get_argument("openid.mode", None):
             user = yield self.get_authenticated_user(
                 http_client=self.settings["http_client"]
@@ -46,24 +59,42 @@
 
 
 class OpenIdServerAuthenticateHandler(RequestHandler):
+    """ """
     def post(self):
+        """ """
         if self.get_argument("openid.mode") != "check_authentication":
             raise Exception("incorrect openid.mode %r")
         self.write("is_valid:true")
 
 
 class OAuth1ClientLoginHandler(RequestHandler, OAuthMixin):
+    """ """
     def initialize(self, test, version):
+        """
+
+        Parameters
+        ----------
+        test :
+            
+        version :
+            
+
+        Returns
+        -------
+
+        """
         self._OAUTH_VERSION = version
         self._OAUTH_REQUEST_TOKEN_URL = test.get_url("/oauth1/server/request_token")
         self._OAUTH_AUTHORIZE_URL = test.get_url("/oauth1/server/authorize")
         self._OAUTH_ACCESS_TOKEN_URL = test.get_url("/oauth1/server/access_token")
 
     def _oauth_consumer_token(self):
+        """ """
         return dict(key="asdf", secret="qwer")
 
     @gen.coroutine
     def get(self):
+        """ """
         if self.get_argument("oauth_token", None):
             user = yield self.get_authenticated_user(
                 http_client=self.settings["http_client"]
@@ -76,6 +107,17 @@
 
     @gen.coroutine
     def _oauth_get_user_future(self, access_token):
+        """
+
+        Parameters
+        ----------
+        access_token :
+            
+
+        Returns
+        -------
+
+        """
         if self.get_argument("fail_in_get_user", None):
             raise Exception("failing in get_user")
         if access_token != dict(key="uiop", secret="5678"):
@@ -88,6 +130,7 @@
 
     @gen.coroutine
     def get(self):
+        """ """
         if self.get_argument("oauth_token", None):
             # Ensure that any exceptions are set on the returned Future,
             # not simply thrown into the surrounding StackContext.
@@ -101,13 +144,27 @@
 
 
 class OAuth1ClientRequestParametersHandler(RequestHandler, OAuthMixin):
+    """ """
     def initialize(self, version):
+        """
+
+        Parameters
+        ----------
+        version :
+            
+
+        Returns
+        -------
+
+        """
         self._OAUTH_VERSION = version
 
     def _oauth_consumer_token(self):
+        """ """
         return dict(key="asdf", secret="qwer")
 
     def get(self):
+        """ """
         params = self._oauth_request_parameters(
             "http://www.example.com/api/asdf",
             dict(key="uiop", secret="5678"),
@@ -117,32 +174,62 @@
 
 
 class OAuth1ServerRequestTokenHandler(RequestHandler):
-    def get(self):
+    """ """
+    def get(self):
+        """ """
         self.write("oauth_token=zxcv&oauth_token_secret=1234")
 
 
 class OAuth1ServerAccessTokenHandler(RequestHandler):
-    def get(self):
+    """ """
+    def get(self):
+        """ """
         self.write("oauth_token=uiop&oauth_token_secret=5678")
 
 
 class OAuth2ClientLoginHandler(RequestHandler, OAuth2Mixin):
+    """ """
     def initialize(self, test):
+        """
+
+        Parameters
+        ----------
+        test :
+            
+
+        Returns
+        -------
+
+        """
         self._OAUTH_AUTHORIZE_URL = test.get_url("/oauth2/server/authorize")
 
     def get(self):
+        """ """
         res = self.authorize_redirect()  # type: ignore
         assert res is None
 
 
 class FacebookClientLoginHandler(RequestHandler, FacebookGraphMixin):
+    """ """
     def initialize(self, test):
+        """
+
+        Parameters
+        ----------
+        test :
+            
+
+        Returns
+        -------
+
+        """
         self._OAUTH_AUTHORIZE_URL = test.get_url("/facebook/server/authorize")
         self._OAUTH_ACCESS_TOKEN_URL = test.get_url("/facebook/server/access_token")
         self._FACEBOOK_BASE_URL = test.get_url("/facebook/server")
 
     @gen.coroutine
     def get(self):
+        """ """
         if self.get_argument("code", None):
             user = yield self.get_authenticated_user(
                 redirect_uri=self.request.full_url(),
@@ -160,17 +247,33 @@
 
 
 class FacebookServerAccessTokenHandler(RequestHandler):
-    def get(self):
+    """ """
+    def get(self):
+        """ """
         self.write(dict(access_token="asdf", expires_in=3600))
 
 
 class FacebookServerMeHandler(RequestHandler):
-    def get(self):
+    """ """
+    def get(self):
+        """ """
         self.write("{}")
 
 
 class TwitterClientHandler(RequestHandler, TwitterMixin):
+    """ """
     def initialize(self, test):
+        """
+
+        Parameters
+        ----------
+        test :
+            
+
+        Returns
+        -------
+
+        """
         self._OAUTH_REQUEST_TOKEN_URL = test.get_url("/oauth1/server/request_token")
         self._OAUTH_ACCESS_TOKEN_URL = test.get_url("/twitter/server/access_token")
         self._OAUTH_AUTHORIZE_URL = test.get_url("/oauth1/server/authorize")
@@ -178,12 +281,15 @@
         self._TWITTER_BASE_URL = test.get_url("/twitter/api")
 
     def get_auth_http_client(self):
+        """ """
         return self.settings["http_client"]
 
 
 class TwitterClientLoginHandler(TwitterClientHandler):
-    @gen.coroutine
-    def get(self):
+    """ """
+    @gen.coroutine
+    def get(self):
+        """ """
         if self.get_argument("oauth_token", None):
             user = yield self.get_authenticated_user()
             if user is None:
@@ -194,10 +300,12 @@
 
 
 class TwitterClientAuthenticateHandler(TwitterClientHandler):
+    """ """
     # Like TwitterClientLoginHandler, but uses authenticate_redirect
     # instead of authorize_redirect.
     @gen.coroutine
     def get(self):
+        """ """
         if self.get_argument("oauth_token", None):
             user = yield self.get_authenticated_user()
             if user is None:
@@ -208,8 +316,10 @@
 
 
 class TwitterClientLoginGenCoroutineHandler(TwitterClientHandler):
-    @gen.coroutine
-    def get(self):
+    """ """
+    @gen.coroutine
+    def get(self):
+        """ """
         if self.get_argument("oauth_token", None):
             user = yield self.get_authenticated_user()
             self.finish(user)
@@ -220,8 +330,10 @@
 
 
 class TwitterClientShowUserHandler(TwitterClientHandler):
-    @gen.coroutine
-    def get(self):
+    """ """
+    @gen.coroutine
+    def get(self):
+        """ """
         # TODO: would be nice to go through the login flow instead of
         # cheating with a hard-coded access token.
         try:
@@ -239,12 +351,26 @@
 
 
 class TwitterServerAccessTokenHandler(RequestHandler):
-    def get(self):
+    """ """
+    def get(self):
+        """ """
         self.write("oauth_token=hjkl&oauth_token_secret=vbnm&screen_name=foo")
 
 
 class TwitterServerShowUserHandler(RequestHandler):
+    """ """
     def get(self, screen_name):
+        """
+
+        Parameters
+        ----------
+        screen_name :
+            
+
+        Returns
+        -------
+
+        """
         if screen_name == "error":
             raise HTTPError(500)
         assert "oauth_nonce" in self.request.arguments
@@ -258,7 +384,9 @@
 
 
 class TwitterServerVerifyCredentialsHandler(RequestHandler):
-    def get(self):
+    """ """
+    def get(self):
+        """ """
         assert "oauth_nonce" in self.request.arguments
         assert "oauth_timestamp" in self.request.arguments
         assert "oauth_signature" in self.request.arguments
@@ -270,7 +398,9 @@
 
 
 class AuthTest(AsyncHTTPTestCase):
+    """ """
     def get_app(self):
+        """ """
         return Application(
             [
                 # test endpoints
@@ -339,11 +469,13 @@
         )
 
     def test_openid_redirect(self):
+        """ """
         response = self.fetch("/openid/client/login", follow_redirects=False)
         self.assertEqual(response.code, 302)
         self.assertTrue("/openid/server/authenticate?" in response.headers["Location"])
 
     def test_openid_get_user(self):
+        """ """
         response = self.fetch(
             "/openid/client/login?openid.mode=blah"
             "&openid.ns.ax=http://openid.net/srv/ax/1.0"
@@ -355,6 +487,7 @@
         self.assertEqual(parsed["email"], "foo@example.com")
 
     def test_oauth10_redirect(self):
+        """ """
         response = self.fetch("/oauth10/client/login", follow_redirects=False)
         self.assertEqual(response.code, 302)
         self.assertTrue(
@@ -370,6 +503,7 @@
         )
 
     def test_oauth10_get_user(self):
+        """ """
         response = self.fetch(
             "/oauth10/client/login?oauth_token=zxcv",
             headers={"Cookie": "_oauth_request_token=enhjdg==|MTIzNA=="},
@@ -380,6 +514,7 @@
         self.assertEqual(parsed["access_token"], dict(key="uiop", secret="5678"))
 
     def test_oauth10_request_parameters(self):
+        """ """
         response = self.fetch("/oauth10/client/request_params")
         response.rethrow()
         parsed = json_decode(response.body)
@@ -389,6 +524,7 @@
         self.assertTrue("oauth_signature" in parsed)
 
     def test_oauth10a_redirect(self):
+        """ """
         response = self.fetch("/oauth10a/client/login", follow_redirects=False)
         self.assertEqual(response.code, 302)
         self.assertTrue(
@@ -405,6 +541,7 @@
 
     @unittest.skipIf(mock is None, "mock package not present")
     def test_oauth10a_redirect_error(self):
+        """ """
         with mock.patch.object(OAuth1ServerRequestTokenHandler, "get") as get:
             get.side_effect = Exception("boom")
             with ExpectLog(app_log, "Uncaught exception"):
@@ -412,6 +549,7 @@
             self.assertEqual(response.code, 500)
 
     def test_oauth10a_get_user(self):
+        """ """
         response = self.fetch(
             "/oauth10a/client/login?oauth_token=zxcv",
             headers={"Cookie": "_oauth_request_token=enhjdg==|MTIzNA=="},
@@ -422,6 +560,7 @@
         self.assertEqual(parsed["access_token"], dict(key="uiop", secret="5678"))
 
     def test_oauth10a_request_parameters(self):
+        """ """
         response = self.fetch("/oauth10a/client/request_params")
         response.rethrow()
         parsed = json_decode(response.body)
@@ -431,6 +570,7 @@
         self.assertTrue("oauth_signature" in parsed)
 
     def test_oauth10a_get_user_coroutine_exception(self):
+        """ """
         response = self.fetch(
             "/oauth10a/client/login_coroutine?oauth_token=zxcv&fail_in_get_user=true",
             headers={"Cookie": "_oauth_request_token=enhjdg==|MTIzNA=="},
@@ -438,11 +578,13 @@
         self.assertEqual(response.code, 503)
 
     def test_oauth2_redirect(self):
+        """ """
         response = self.fetch("/oauth2/client/login", follow_redirects=False)
         self.assertEqual(response.code, 302)
         self.assertTrue("/oauth2/server/authorize?" in response.headers["Location"])
 
     def test_facebook_login(self):
+        """ """
         response = self.fetch("/facebook/client/login", follow_redirects=False)
         self.assertEqual(response.code, 302)
         self.assertTrue("/facebook/server/authorize?" in response.headers["Location"])
@@ -455,6 +597,17 @@
         self.assertEqual(user["session_expires"], "3600")
 
     def base_twitter_redirect(self, url):
+        """
+
+        Parameters
+        ----------
+        url :
+            
+
+        Returns
+        -------
+
+        """
         # Same as test_oauth10a_redirect
         response = self.fetch(url, follow_redirects=False)
         self.assertEqual(response.code, 302)
@@ -471,12 +624,15 @@
         )
 
     def test_twitter_redirect(self):
+        """ """
         self.base_twitter_redirect("/twitter/client/login")
 
     def test_twitter_redirect_gen_coroutine(self):
+        """ """
         self.base_twitter_redirect("/twitter/client/login_gen_coroutine")
 
     def test_twitter_authenticate_redirect(self):
+        """ """
         response = self.fetch("/twitter/client/authenticate", follow_redirects=False)
         self.assertEqual(response.code, 302)
         self.assertTrue(
@@ -493,6 +649,7 @@
         )
 
     def test_twitter_get_user(self):
+        """ """
         response = self.fetch(
             "/twitter/client/login?oauth_token=zxcv",
             headers={"Cookie": "_oauth_request_token=enhjdg==|MTIzNA=="},
@@ -514,6 +671,7 @@
         )
 
     def test_twitter_show_user(self):
+        """ """
         response = self.fetch("/twitter/client/show_user?name=somebody")
         response.rethrow()
         self.assertEqual(
@@ -521,13 +679,26 @@
         )
 
     def test_twitter_show_user_error(self):
+        """ """
         response = self.fetch("/twitter/client/show_user?name=error")
         self.assertEqual(response.code, 500)
         self.assertEqual(response.body, b"error from twitter request")
 
 
 class GoogleLoginHandler(RequestHandler, GoogleOAuth2Mixin):
+    """ """
     def initialize(self, test):
+        """
+
+        Parameters
+        ----------
+        test :
+            
+
+        Returns
+        -------
+
+        """
         self.test = test
         self._OAUTH_REDIRECT_URI = test.get_url("/client/login")
         self._OAUTH_AUTHORIZE_URL = test.get_url("/google/oauth2/authorize")
@@ -535,6 +706,7 @@
 
     @gen.coroutine
     def get(self):
+        """ """
         code = self.get_argument("code", None)
         if code is not None:
             # retrieve authenticate google user
@@ -558,14 +730,18 @@
 
 
 class GoogleOAuth2AuthorizeHandler(RequestHandler):
-    def get(self):
+    """ """
+    def get(self):
+        """ """
         # issue a fake auth code and redirect to redirect_uri
         code = "fake-authorization-code"
         self.redirect(url_concat(self.get_argument("redirect_uri"), dict(code=code)))
 
 
 class GoogleOAuth2TokenHandler(RequestHandler):
+    """ """
     def post(self):
+        """ """
         assert self.get_argument("code") == "fake-authorization-code"
         # issue a fake token
         self.finish(
@@ -574,14 +750,18 @@
 
 
 class GoogleOAuth2UserinfoHandler(RequestHandler):
-    def get(self):
+    """ """
+    def get(self):
+        """ """
         assert self.get_argument("access_token") == "fake-access-token"
         # return a fake user
         self.finish({"name": "Foo", "email": "foo@example.com"})
 
 
 class GoogleOAuth2Test(AsyncHTTPTestCase):
+    """ """
     def get_app(self):
+        """ """
         return Application(
             [
                 # test endpoints
@@ -598,6 +778,7 @@
         )
 
     def test_google_login(self):
+        """ """
         response = self.fetch("/client/login")
         self.assertDictEqual(
             {
