# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pycparser/_ast_gen.py
+++ b/..//venv/lib/python3.8/site-packages/pycparser/_ast_gen.py
@@ -16,15 +16,31 @@
 
 class ASTCodeGenerator(object):
     def __init__(self, cfg_filename='_c_ast.cfg'):
-        """ Initialize the code generator from a configuration
+    """Initialize the code generator from a configuration
             file.
-        """
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
         self.cfg_filename = cfg_filename
         self.node_cfg = [NodeCfg(name, contents)
             for (name, contents) in self.parse_cfgfile(cfg_filename)]
 
     def generate(self, file=None):
-        """ Generates the code into file, an open file buffer.
+        """Generates the code into file, an open file buffer.
+
+        Parameters
+        ----------
+        file :
+             (Default value = None)
+
+        Returns
+        -------
+
         """
         src = Template(_PROLOGUE_COMMENT).substitute(
             cfg_filename=self.cfg_filename)
@@ -36,8 +52,17 @@
         file.write(src)
 
     def parse_cfgfile(self, filename):
-        """ Parse the configuration file and yield pairs of
+        """Parse the configuration file and yield pairs of
             (name, contents) for each node.
+
+        Parameters
+        ----------
+        filename :
+            
+
+        Returns
+        -------
+
         """
         with open(filename, "r") as f:
             for line in f:
@@ -57,11 +82,18 @@
 
 
 class NodeCfg(object):
-    """ Node configuration.
-
+    """Node configuration.
+    
         name: node name
         contents: a list of contents - attributes and child nodes
         See comment at the top of the configuration file for details.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, name, contents):
@@ -83,6 +115,7 @@
                 self.attr.append(entry)
 
     def generate_source(self):
+        """ """
         src = self._gen_init()
         src += '\n' + self._gen_children()
         src += '\n' + self._gen_iter()
@@ -91,6 +124,7 @@
         return src
 
     def _gen_init(self):
+        """ """
         src = "class %s(Node):\n" % self.name
 
         if self.all_entries:
@@ -111,6 +145,7 @@
         return src
 
     def _gen_children(self):
+        """ """
         src = '    def children(self):\n'
 
         if self.all_entries:
@@ -135,6 +170,7 @@
         return src
 
     def _gen_iter(self):
+        """ """
         src = '    def __iter__(self):\n'
 
         if self.all_entries:
@@ -162,6 +198,7 @@
         return src
 
     def _gen_attr_names(self):
+        """ """
         src = "    attr_names = (" + ''.join("%r, " % nm for nm in self.attr) + ')'
         return src
 
@@ -190,8 +227,16 @@
 import sys
 
 def _repr(obj):
-    """
-    Get the representation of an object, with dedicated pprint-like format for lists.
+    """Get the representation of an object, with dedicated pprint-like format for lists.
+
+    Parameters
+    ----------
+    obj :
+        
+
+    Returns
+    -------
+
     """
     if isinstance(obj, list):
         return '[' + (',\n '.join((_repr(e).replace('\n', '\n ') for e in obj))) + '\n]'
@@ -199,6 +244,7 @@
         return repr(obj) 
 
 class Node(object):
+    """ """
     __slots__ = ()
     """ Abstract base class for AST nodes.
     """
@@ -222,31 +268,49 @@
         return result
 
     def children(self):
-        """ A sequence of all children that are Nodes
-        """
+        """A sequence of all children that are Nodes"""
         pass
 
     def show(self, buf=sys.stdout, offset=0, attrnames=False, nodenames=False, showcoord=False, _my_node_name=None):
-        """ Pretty print the Node and all its attributes and
+        """Pretty print the Node and all its attributes and
             children (recursively) to a buffer.
-
+        
             buf:
                 Open IO buffer into which the Node is printed.
-
+        
             offset:
                 Initial offset (amount of leading spaces)
-
+        
             attrnames:
                 True if you want to see the attribute names in
                 name=value pairs. False to only see the values.
-
+        
             nodenames:
                 True if you want to see the actual node names
                 within their parents.
-
+        
             showcoord:
                 Do you want the coordinates of each Node to be
                 displayed.
+
+        Parameters
+        ----------
+        buf :
+             (Default value = sys.stdout)
+        offset :
+             (Default value = 0)
+        attrnames :
+             (Default value = False)
+        nodenames :
+             (Default value = False)
+        showcoord :
+             (Default value = False)
+        _my_node_name :
+             (Default value = None)
+
+        Returns
+        -------
+
         """
         lead = ' ' * offset
         if nodenames and _my_node_name is not None:
@@ -278,28 +342,28 @@
 
 
 class NodeVisitor(object):
-    """ A base NodeVisitor class for visiting c_ast nodes.
+    """A base NodeVisitor class for visiting c_ast nodes.
         Subclass it and define your own visit_XXX methods, where
         XXX is the class name you want to visit with these
         methods.
-
+    
         For example:
-
+    
         class ConstantVisitor(NodeVisitor):
             def __init__(self):
                 self.values = []
-
+    
             def visit_Constant(self, node):
                 self.values.append(node.value)
-
+    
         Creates a list of values of all the constant nodes
         encountered below the given node. To use it:
-
+    
         cv = ConstantVisitor()
         cv.visit(node)
-
+    
         Notes:
-
+    
         *   generic_visit() will be called for AST nodes for which
             no visit_XXX method was defined.
         *   The children of nodes for which a visit_XXX was
@@ -309,12 +373,28 @@
                 NodeVisitor.generic_visit(self, node)
         *   Modeled after Python's own AST visiting facilities
             (the ast module of Python 3.0)
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     _method_cache = None
 
     def visit(self, node):
-        """ Visit a node.
+        """Visit a node.
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
         """
 
         if self._method_cache is None:
@@ -329,8 +409,17 @@
         return visitor(node)
 
     def generic_visit(self, node):
-        """ Called if no explicit visitor function exists for a
+        """Called if no explicit visitor function exists for a
             node. Implements preorder visiting of the node.
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
         """
         for c in node:
             self.visit(c)
