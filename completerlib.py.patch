# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/completerlib.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/completerlib.py
@@ -66,8 +66,17 @@
 
 def module_list(path):
     """
-    Return the list containing the names of the modules available in the given
-    folder.
+
+    Parameters
+    ----------
+    path :
+        
+
+    Returns
+    -------
+    type
+        folder.
+
     """
     # sys.path has the cwd as an empty string, but isdir/listdir need it as '.'
     if path == '':
@@ -105,11 +114,17 @@
 
 
 def get_root_modules():
-    """
-    Returns a list containing the names of all the modules available in the
+    """Returns a list containing the names of all the modules available in the
     folders of the pythonpath.
-
+    
     ip.db['rootmodules_cache'] maps sys.path entries to list of modules.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     ip = get_ipython()
     if ip is None:
@@ -149,6 +164,21 @@
 
 
 def is_importable(module, attr, only_modules):
+    """
+
+    Parameters
+    ----------
+    module :
+        
+    attr :
+        
+    only_modules :
+        
+
+    Returns
+    -------
+
+    """
     if only_modules:
         return inspect.ismodule(getattr(module, attr))
     else:
@@ -156,8 +186,18 @@
 
 
 def try_import(mod: str, only_modules=False) -> List[str]:
-    """
-    Try to import given module and return list of potential completions.
+    """Try to import given module and return list of potential completions.
+
+    Parameters
+    ----------
+    mod: str :
+        
+    only_modules :
+         (Default value = False)
+
+    Returns
+    -------
+
     """
     mod = mod.rstrip('.')
     try:
@@ -185,35 +225,63 @@
 #-----------------------------------------------------------------------------
 
 def quick_completer(cmd, completions):
-    r""" Easily create a trivial completer for a command.
-
+    """r""" Easily create a trivial completer for a command.
+    
     Takes either a list of completions, or all completions in string (that will
     be split on whitespace).
-
+    
     Example::
-
+    
         [d:\ipython]|1> import ipy_completers
         [d:\ipython]|2> ipy_completers.quick_completer('foo', ['bar','baz'])
         [d:\ipython]|3> foo b<TAB>
         bar baz
         [d:\ipython]|3> foo ba
-    """
+
+    Parameters
+    ----------
+    cmd :
+        
+    completions :
+        
+
+    Returns
+    -------
 
     if isinstance(completions, str):
         completions = completions.split()
 
     def do_complete(self, event):
+        """
+
+        Parameters
+        ----------
+        event :
+            
+
+        Returns
+        -------
+
+        """
         return completions
 
     get_ipython().set_hook('complete_command',do_complete, str_key = cmd)
 
 def module_completion(line):
-    """
-    Returns a list containing the completion possibilities for an import line.
-
+    """Returns a list containing the completion possibilities for an import line.
+    
     The line looks like this :
     'import xml.d'
     'from xml.dom import'
+
+    Parameters
+    ----------
+    line :
+        
+
+    Returns
+    -------
+
     """
 
     words = line.split(' ')
@@ -245,7 +313,17 @@
 # completers
 
 def module_completer(self,event):
-    """Give completions after user has typed 'import ...' or 'from ...'"""
+    """Give completions after user has typed 'import ...' or 'from ...'
+
+    Parameters
+    ----------
+    event :
+        
+
+    Returns
+    -------
+
+    """
 
     # This works in all versions of python.  While 2.5 has
     # pkgutil.walk_packages(), that particular routine is fairly dangerous,
@@ -260,6 +338,15 @@
 
 def magic_run_completer(self, event):
     """Complete files that end in .py or .ipy or .ipynb for the %run command.
+
+    Parameters
+    ----------
+    event :
+        
+
+    Returns
+    -------
+
     """
     comps = arg_split(event.line, strict=False)
     # relpath should be the current token that we need to complete.
@@ -296,7 +383,17 @@
 
 
 def cd_completer(self, event):
-    """Completer function for cd, which only returns directories."""
+    """Completer function for cd, which only returns directories.
+
+    Parameters
+    ----------
+    event :
+        
+
+    Returns
+    -------
+
+    """
     ip = get_ipython()
     relpath = event.symbol
 
@@ -350,5 +447,16 @@
     return [compress_user(p, tilde_expand, tilde_val) for p in found]
 
 def reset_completer(self, event):
+    """
+
+    Parameters
+    ----------
+    event :
+        
+
+    Returns
+    -------
+
+    """
     "A completer for %reset magic"
     return '-f -s in out array dhist'.split()
