# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/tests/test_display.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/tests/test_display.py
@@ -34,6 +34,7 @@
 
 
 def test_image_mimes():
+    """ """
     fmt = get_ipython().display_formatter.format
     for format in display.Image._ACCEPTABLE_EMBEDDINGS:
         mime = display.Image._MIMETYPES[format]
@@ -43,6 +44,7 @@
 
 
 def test_geojson():
+    """ """
 
     gj = display.GeoJSON(data={
             "type": "Feature",
@@ -64,6 +66,7 @@
     nt.assert_equal(u'<IPython.core.display.GeoJSON object>', str(gj))
 
 def test_retina_png():
+    """ """
     here = os.path.dirname(__file__)
     img = display.Image(os.path.join(here, "2x2.png"), retina=True)
     nt.assert_equal(img.height, 1)
@@ -73,6 +76,7 @@
     nt.assert_equal(md['height'], 1)
 
 def test_embed_svg_url():
+    """ """
     import gzip
     from io import BytesIO
     svg_data = b'<svg><circle x="0" y="0" r="1"/></svg>'
@@ -84,12 +88,27 @@
     gzip_svg = gzip_svg.getvalue()
     
     def mocked_urlopen(*args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         class MockResponse:
+            """ """
             def __init__(self, svg):
                 self._svg_data = svg
                 self.headers = {'content-type': 'image/svg+xml'}
 
             def read(self):
+                """ """
                 return self._svg_data
 
         if args[0] == url:
@@ -107,6 +126,7 @@
         nt.assert_true(svg._repr_svg_().startswith('<svg'))
     
 def test_retina_jpeg():
+    """ """
     here = os.path.dirname(__file__)
     img = display.Image(os.path.join(here, "2x2.jpg"), retina=True)
     nt.assert_equal(img.height, 1)
@@ -116,10 +136,11 @@
     nt.assert_equal(md['height'], 1)
 
 def test_base64image():
+    """ """
     display.Image("iVBORw0KGgoAAAANSUhEUgAAAAEAAAABAQMAAAAl21bKAAAAA1BMVEUAAACnej3aAAAAAWJLR0QAiAUdSAAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB94BCRQnOqNu0b4AAAAKSURBVAjXY2AAAAACAAHiIbwzAAAAAElFTkSuQmCC")
 
 def test_image_filename_defaults():
-    '''test format constraint, and validity of jpeg and png'''
+    """test format constraint, and validity of jpeg and png"""
     tpath = ipath.get_ipython_package_dir()
     nt.assert_raises(ValueError, display.Image, filename=os.path.join(tpath, 'testing/tests/badformat.zip'),
                      embed=True)
@@ -135,6 +156,7 @@
     nt.assert_is_none(img._repr_jpeg_())
 
 def _get_inline_config():
+    """ """
     from ipykernel.pylab.config import InlineBackend
     return InlineBackend.instance()
 
@@ -142,6 +164,7 @@
 @dec.skip_without("ipykernel")
 @dec.skip_without("matplotlib")
 def test_set_matplotlib_close():
+    """ """
     cfg = _get_inline_config()
     cfg.close_figures = False
     display.set_matplotlib_close()
@@ -159,6 +182,7 @@
 
 @dec.skip_without('matplotlib')
 def test_set_matplotlib_formats():
+    """ """
     from matplotlib.figure import Figure
     formatters = get_ipython().display_formatter.formatters
     for formats in [
@@ -179,6 +203,7 @@
 @dec.skip_without("ipykernel")
 @dec.skip_without("matplotlib")
 def test_set_matplotlib_formats_kwargs():
+    """ """
     from matplotlib.figure import Figure
     ip = get_ipython()
     cfg = _get_inline_config()
@@ -193,11 +218,17 @@
     nt.assert_equal(cell, expected)
 
 def test_display_available():
-    """
-    Test that display is available without import
-
+    """Test that display is available without import
+    
     We don't really care if it's in builtin or anything else, but it should
     always be available.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     ip = get_ipython()
     with AssertNotPrints('NameError'):
@@ -211,6 +242,7 @@
         ip.run_cell('display')
 
 def test_textdisplayobj_pretty_repr():
+    """ """
      p = display.Pretty("This is a simple test")
      nt.assert_equal(repr(p), '<IPython.core.display.Pretty object>')
      nt.assert_equal(p.data, 'This is a simple test')
@@ -219,6 +251,7 @@
      nt.assert_equal(repr(p), object.__repr__(p))
 
 def test_displayobject_repr():
+    """ """
     h = display.HTML('<br />')
     nt.assert_equal(repr(h), '<IPython.core.display.HTML object>')
     h._show_mem_addr = True
@@ -235,6 +268,17 @@
 
 @mock.patch('warnings.warn')
 def test_encourage_iframe_over_html(m_warn):
+    """
+
+    Parameters
+    ----------
+    m_warn :
+        
+
+    Returns
+    -------
+
+    """
     display.HTML()
     m_warn.assert_not_called()
 
@@ -252,6 +296,7 @@
     m_warn.assert_called_with('Consider using IPython.display.IFrame instead')
 
 def test_progress():
+    """ """
     p = display.ProgressBar(10)
     nt.assert_in('0/10',repr(p))
     p.html_width = '100%'
@@ -259,6 +304,7 @@
     nt.assert_equal(p._repr_html_(), "<progress style='width:100%' max='10' value='5'></progress>")
 
 def test_progress_iter():
+    """ """
     with capture_output(display=False) as captured:
         for i in display.ProgressBar(5):
             out = captured.stdout
@@ -267,6 +313,7 @@
     nt.assert_in('5/5', out)
 
 def test_json():
+    """ """
     d = {'a': 5}
     lis = [d]
     metadata = [
@@ -342,11 +389,13 @@
         nt.assert_in('src="data:video/xyz;base64,YWJj"',html)
 
 def test_html_metadata():
+    """ """
     s = "<h1>Test</h1>"
     h = display.HTML(s, metadata={"isolated": True})
     nt.assert_equal(h._repr_html_(), (s, {"isolated": True}))
 
 def test_display_id():
+    """ """
     ip = get_ipython()
     with mock.patch.object(ip.display_pub, 'publish') as pub:
         handle = display.display('x')
@@ -391,6 +440,7 @@
 
 
 def test_update_display():
+    """ """
     ip = get_ipython()
     with mock.patch.object(ip.display_pub, 'publish') as pub:
         with nt.assert_raises(TypeError):
@@ -424,6 +474,7 @@
 
 
 def test_display_handle():
+    """ """
     ip = get_ipython()
     handle = display.DisplayHandle()
     nt.assert_is_instance(handle.display_id, str)
