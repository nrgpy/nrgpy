# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test__datasource.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test__datasource.py
@@ -12,7 +12,19 @@
 
 
 def urlopen_stub(url, data=None):
-    '''Stub to replace urlopen for testing.'''
+    """Stub to replace urlopen for testing.
+
+    Parameters
+    ----------
+    url :
+        
+    data :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     if url == valid_httpurl():
         tmpfile = NamedTemporaryFile(prefix='urltmp_')
         return tmpfile
@@ -24,6 +36,7 @@
 
 
 def setup_module():
+    """ """
     global old_urlopen
 
     old_urlopen = urllib_request.urlopen
@@ -31,6 +44,7 @@
 
 
 def teardown_module():
+    """ """
     urllib_request.urlopen = old_urlopen
 
 # A valid website for more robust testing
@@ -48,6 +62,17 @@
 
 # Utility functions used by many tests
 def valid_textfile(filedir):
+    """
+
+    Parameters
+    ----------
+    filedir :
+        
+
+    Returns
+    -------
+
+    """
     # Generate and return a valid temporary file.
     fd, path = mkstemp(suffix='.txt', prefix='dstmp_', dir=filedir, text=True)
     os.close(fd)
@@ -55,6 +80,17 @@
 
 
 def invalid_textfile(filedir):
+    """
+
+    Parameters
+    ----------
+    filedir :
+        
+
+    Returns
+    -------
+
+    """
     # Generate and return an invalid filename.
     fd, path = mkstemp(suffix='.txt', prefix='dstmp_', dir=filedir)
     os.close(fd)
@@ -63,44 +99,55 @@
 
 
 def valid_httpurl():
+    """ """
     return http_path+http_file
 
 
 def invalid_httpurl():
+    """ """
     return http_fakepath+http_fakefile
 
 
 def valid_baseurl():
+    """ """
     return http_path
 
 
 def invalid_baseurl():
+    """ """
     return http_fakepath
 
 
 def valid_httpfile():
+    """ """
     return http_file
 
 
 def invalid_httpfile():
+    """ """
     return http_fakefile
 
 
 class TestDataSourceOpen:
-    def setup(self):
+    """ """
+    def setup(self):
+        """ """
         self.tmpdir = mkdtemp()
         self.ds = datasource.DataSource(self.tmpdir)
 
     def teardown(self):
+        """ """
         rmtree(self.tmpdir)
         del self.ds
 
     def test_ValidHTTP(self):
+        """ """
         fh = self.ds.open(valid_httpurl())
         assert_(fh)
         fh.close()
 
     def test_InvalidHTTP(self):
+        """ """
         url = invalid_httpurl()
         assert_raises(IOError, self.ds.open, url)
         try:
@@ -110,19 +157,23 @@
             assert_(e.errno is None)
 
     def test_InvalidHTTPCacheURLError(self):
+        """ """
         assert_raises(URLError, self.ds._cache, invalid_httpurl())
 
     def test_ValidFile(self):
+        """ """
         local_file = valid_textfile(self.tmpdir)
         fh = self.ds.open(local_file)
         assert_(fh)
         fh.close()
 
     def test_InvalidFile(self):
+        """ """
         invalid_file = invalid_textfile(self.tmpdir)
         assert_raises(IOError, self.ds.open, invalid_file)
 
     def test_ValidGzipFile(self):
+        """ """
         try:
             import gzip
         except ImportError:
@@ -139,6 +190,7 @@
         assert_equal(magic_line, result)
 
     def test_ValidBz2File(self):
+        """ """
         try:
             import bz2
         except ImportError:
@@ -156,21 +208,27 @@
 
 
 class TestDataSourceExists:
-    def setup(self):
+    """ """
+    def setup(self):
+        """ """
         self.tmpdir = mkdtemp()
         self.ds = datasource.DataSource(self.tmpdir)
 
     def teardown(self):
+        """ """
         rmtree(self.tmpdir)
         del self.ds
 
     def test_ValidHTTP(self):
+        """ """
         assert_(self.ds.exists(valid_httpurl()))
 
     def test_InvalidHTTP(self):
+        """ """
         assert_equal(self.ds.exists(invalid_httpurl()), False)
 
     def test_ValidFile(self):
+        """ """
         # Test valid file in destpath
         tmpfile = valid_textfile(self.tmpdir)
         assert_(self.ds.exists(tmpfile))
@@ -181,26 +239,32 @@
         rmtree(localdir)
 
     def test_InvalidFile(self):
+        """ """
         tmpfile = invalid_textfile(self.tmpdir)
         assert_equal(self.ds.exists(tmpfile), False)
 
 
 class TestDataSourceAbspath:
-    def setup(self):
+    """ """
+    def setup(self):
+        """ """
         self.tmpdir = os.path.abspath(mkdtemp())
         self.ds = datasource.DataSource(self.tmpdir)
 
     def teardown(self):
+        """ """
         rmtree(self.tmpdir)
         del self.ds
 
     def test_ValidHTTP(self):
+        """ """
         scheme, netloc, upath, pms, qry, frg = urlparse(valid_httpurl())
         local_path = os.path.join(self.tmpdir, netloc,
                                   upath.strip(os.sep).strip('/'))
         assert_equal(local_path, self.ds.abspath(valid_httpurl()))
 
     def test_ValidFile(self):
+        """ """
         tmpfile = valid_textfile(self.tmpdir)
         tmpfilename = os.path.split(tmpfile)[-1]
         # Test with filename only
@@ -209,12 +273,14 @@
         assert_equal(tmpfile, self.ds.abspath(tmpfile))
 
     def test_InvalidHTTP(self):
+        """ """
         scheme, netloc, upath, pms, qry, frg = urlparse(invalid_httpurl())
         invalidhttp = os.path.join(self.tmpdir, netloc,
                                    upath.strip(os.sep).strip('/'))
         assert_(invalidhttp != self.ds.abspath(valid_httpurl()))
 
     def test_InvalidFile(self):
+        """ """
         invalidfile = valid_textfile(self.tmpdir)
         tmpfile = valid_textfile(self.tmpdir)
         tmpfilename = os.path.split(tmpfile)[-1]
@@ -224,6 +290,7 @@
         assert_(invalidfile != self.ds.abspath(tmpfile))
 
     def test_sandboxing(self):
+        """ """
         tmpfile = valid_textfile(self.tmpdir)
         tmpfilename = os.path.split(tmpfile)[-1]
 
@@ -238,6 +305,7 @@
             assert_(tmp_path(fn).startswith(self.tmpdir))
 
     def test_windows_os_sep(self):
+        """ """
         orig_os_sep = os.sep
         try:
             os.sep = '\\'
@@ -251,15 +319,19 @@
 
 
 class TestRepositoryAbspath:
-    def setup(self):
+    """ """
+    def setup(self):
+        """ """
         self.tmpdir = os.path.abspath(mkdtemp())
         self.repos = datasource.Repository(valid_baseurl(), self.tmpdir)
 
     def teardown(self):
+        """ """
         rmtree(self.tmpdir)
         del self.repos
 
     def test_ValidHTTP(self):
+        """ """
         scheme, netloc, upath, pms, qry, frg = urlparse(valid_httpurl())
         local_path = os.path.join(self.repos._destpath, netloc,
                                   upath.strip(os.sep).strip('/'))
@@ -267,6 +339,7 @@
         assert_equal(local_path, filepath)
 
     def test_sandboxing(self):
+        """ """
         tmp_path = lambda x: os.path.abspath(self.repos.abspath(x))
         assert_(tmp_path(valid_httpfile()).startswith(self.tmpdir))
         for fn in malicious_files:
@@ -274,6 +347,7 @@
             assert_(tmp_path(fn).startswith(self.tmpdir))
 
     def test_windows_os_sep(self):
+        """ """
         orig_os_sep = os.sep
         try:
             os.sep = '\\'
@@ -284,27 +358,34 @@
 
 
 class TestRepositoryExists:
-    def setup(self):
+    """ """
+    def setup(self):
+        """ """
         self.tmpdir = mkdtemp()
         self.repos = datasource.Repository(valid_baseurl(), self.tmpdir)
 
     def teardown(self):
+        """ """
         rmtree(self.tmpdir)
         del self.repos
 
     def test_ValidFile(self):
+        """ """
         # Create local temp file
         tmpfile = valid_textfile(self.tmpdir)
         assert_(self.repos.exists(tmpfile))
 
     def test_InvalidFile(self):
+        """ """
         tmpfile = invalid_textfile(self.tmpdir)
         assert_equal(self.repos.exists(tmpfile), False)
 
     def test_RemoveHTTPFile(self):
+        """ """
         assert_(self.repos.exists(valid_httpurl()))
 
     def test_CachedHTTPFile(self):
+        """ """
         localfile = valid_httpurl()
         # Create a locally cached temp file with an URL based
         # directory structure.  This is similar to what Repository.open
@@ -317,13 +398,17 @@
 
 
 class TestOpenFunc:
-    def setup(self):
+    """ """
+    def setup(self):
+        """ """
         self.tmpdir = mkdtemp()
 
     def teardown(self):
+        """ """
         rmtree(self.tmpdir)
 
     def test_DataSourceOpen(self):
+        """ """
         local_file = valid_textfile(self.tmpdir)
         # Test case where destpath is passed in
         fp = datasource.open(local_file, destpath=self.tmpdir)
@@ -335,6 +420,7 @@
         fp.close()
 
 def test_del_attr_handling():
+    """ """
     # DataSource __del__ can be called
     # even if __init__ fails when the
     # Exception object is caught by the
