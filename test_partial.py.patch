# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexing/multiindex/test_partial.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexing/multiindex/test_partial.py
@@ -6,7 +6,9 @@
 
 
 class TestMultiIndexPartial:
+    """ """
     def test_getitem_partial_int(self):
+        """ """
         # GH 12416
         # with single item
         l1 = [10, 20]
@@ -30,6 +32,7 @@
             df[[1]]
 
     def test_series_slice_partial(self):
+        """ """
         pass
 
     def test_xs_partial(
@@ -37,6 +40,19 @@
         multiindex_dataframe_random_data,
         multiindex_year_month_day_dataframe_random_data,
     ):
+        """
+
+        Parameters
+        ----------
+        multiindex_dataframe_random_data :
+            
+        multiindex_year_month_day_dataframe_random_data :
+            
+
+        Returns
+        -------
+
+        """
         frame = multiindex_dataframe_random_data
         ymd = multiindex_year_month_day_dataframe_random_data
         result = frame.xs("foo")
@@ -65,6 +81,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_getitem_partial(self, multiindex_year_month_day_dataframe_random_data):
+        """
+
+        Parameters
+        ----------
+        multiindex_year_month_day_dataframe_random_data :
+            
+
+        Returns
+        -------
+
+        """
         ymd = multiindex_year_month_day_dataframe_random_data
         ymd = ymd.T
         result = ymd[2000, 2]
@@ -78,6 +105,19 @@
         multiindex_dataframe_random_data,
         multiindex_year_month_day_dataframe_random_data,
     ):
+        """
+
+        Parameters
+        ----------
+        multiindex_dataframe_random_data :
+            
+        multiindex_year_month_day_dataframe_random_data :
+            
+
+        Returns
+        -------
+
+        """
         frame = multiindex_dataframe_random_data
         result = frame.loc["bar":"baz"]
         expected = frame[3:7]
@@ -90,6 +130,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_getitem_partial_column_select(self):
+        """ """
         idx = MultiIndex(
             codes=[[0, 0, 0], [0, 1, 1], [1, 0, 1]],
             levels=[["a", "b"], ["x", "y"], ["p", "q"]],
@@ -108,6 +149,17 @@
             df.loc[("a", "foo"), :]
 
     def test_partial_set(self, multiindex_year_month_day_dataframe_random_data):
+        """
+
+        Parameters
+        ----------
+        multiindex_year_month_day_dataframe_random_data :
+            
+
+        Returns
+        -------
+
+        """
         # GH #397
         ymd = multiindex_year_month_day_dataframe_random_data
         df = ymd.copy()
@@ -132,6 +184,19 @@
     def test_getitem_intkey_leading_level(
         self, multiindex_year_month_day_dataframe_random_data, dtype
     ):
+        """
+
+        Parameters
+        ----------
+        multiindex_year_month_day_dataframe_random_data :
+            
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         # GH#33355 dont fall-back to positional when leading level is int
         ymd = multiindex_year_month_day_dataframe_random_data
         levels = ymd.index.levels
@@ -158,6 +223,17 @@
     # AMBIGUOUS CASES!
 
     def test_partial_loc_missing(self, multiindex_year_month_day_dataframe_random_data):
+        """
+
+        Parameters
+        ----------
+        multiindex_year_month_day_dataframe_random_data :
+            
+
+        Returns
+        -------
+
+        """
         pytest.skip("skipping for now")
 
         ymd = multiindex_year_month_day_dataframe_random_data
@@ -179,6 +255,17 @@
     # ---------------------------------------------------------------------
 
     def test_setitem_multiple_partial(self, multiindex_dataframe_random_data):
+        """
+
+        Parameters
+        ----------
+        multiindex_dataframe_random_data :
+            
+
+        Returns
+        -------
+
+        """
         frame = multiindex_dataframe_random_data
         expected = frame.copy()
         result = frame.copy()
@@ -210,6 +297,7 @@
 
 
 def test_loc_getitem_partial_both_axis():
+    """ """
     # gh-12660
     iterables = [["a", "b"], [2, 1]]
     columns = MultiIndex.from_product(iterables, names=["col1", "col2"])
