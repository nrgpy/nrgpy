# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/frame/test_axis_select_reindex.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/frame/test_axis_select_reindex.py
@@ -9,10 +9,12 @@
 
 
 class TestDataFrameSelectReindex:
+    """ """
     # These are specific reindex-based tests; other indexing tests should go in
     # test_indexing
 
     def test_merge_join_different_levels(self):
+        """ """
         # GH 9455
 
         # first dataframe
@@ -37,6 +39,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_reindex(self, float_frame):
+        """
+
+        Parameters
+        ----------
+        float_frame :
+            
+
+        Returns
+        -------
+
+        """
         datetime_series = tm.makeTimeSeries(nper=30)
 
         newFrame = float_frame.reindex(datetime_series.index)
@@ -100,6 +113,7 @@
         assert result is not float_frame
 
     def test_reindex_nan(self):
+        """ """
         df = pd.DataFrame(
             [[1, 2], [3, 5], [7, 11], [9, 23]],
             index=[2, np.nan, 1, 5],
@@ -129,6 +143,7 @@
         tm.assert_frame_equal(left, right)
 
     def test_reindex_name_remains(self):
+        """ """
         s = Series(np.random.rand(10))
         df = DataFrame(s, index=np.arange(len(s)))
         i = Series(np.arange(10), name="iname")
@@ -146,6 +161,17 @@
         assert df.columns.name == "iname"
 
     def test_reindex_int(self, int_frame):
+        """
+
+        Parameters
+        ----------
+        int_frame :
+            
+
+        Returns
+        -------
+
+        """
         smaller = int_frame.reindex(int_frame.index[::2])
 
         assert smaller["A"].dtype == np.int64
@@ -157,6 +183,17 @@
         assert smaller["A"].dtype == np.int64
 
     def test_reindex_columns(self, float_frame):
+        """
+
+        Parameters
+        ----------
+        float_frame :
+            
+
+        Returns
+        -------
+
+        """
         new_frame = float_frame.reindex(columns=["A", "B", "E"])
 
         tm.assert_series_equal(new_frame["B"], float_frame["B"])
@@ -168,6 +205,7 @@
         assert new_frame.empty
 
     def test_reindex_columns_method(self):
+        """ """
 
         # GH 14992, reindexing over columns ignored method
         df = DataFrame(
@@ -220,6 +258,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_reindex_axes(self):
+        """ """
         # GH 3317, reindexing by both axes loses freq of the index
         df = DataFrame(
             np.ones((3, 3)),
@@ -236,6 +275,7 @@
         assert index_freq == seq_freq
 
     def test_reindex_fill_value(self):
+        """ """
         df = DataFrame(np.random.randn(10, 4))
 
         # axis=0
@@ -269,6 +309,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_reindex_dups(self):
+        """ """
 
         # GH4746, reindex on duplicate index error messages
         arr = np.random.randn(10)
@@ -286,6 +327,7 @@
             df.reindex(index=list(range(len(df))))
 
     def test_reindex_axis_style(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/12392
         df = pd.DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]})
         expected = pd.DataFrame(
@@ -301,6 +343,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_reindex_positional_warns(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/12392
         df = pd.DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]})
         expected = pd.DataFrame({"A": [1.0, 2], "B": [4.0, 5], "C": [np.nan, np.nan]})
@@ -310,6 +353,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_reindex_axis_style_raises(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/12392
         df = pd.DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]})
         with pytest.raises(TypeError, match="Cannot specify both 'axis'"):
@@ -345,6 +389,7 @@
             df.reindex([0, 1], labels=[0, 1])
 
     def test_reindex_single_named_indexer(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/12392
         df = pd.DataFrame({"A": [1, 2, 3], "B": [1, 2, 3]})
         result = df.reindex([0, 1], columns=["A"])
@@ -352,6 +397,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_reindex_api_equivalence(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/12392
         # equivalence of the labels/axis and index/columns API's
         df = DataFrame(
@@ -383,6 +429,7 @@
             tm.assert_frame_equal(res1, res)
 
     def test_align_int_fill_bug(self):
+        """ """
         # GH #910
         X = np.arange(10 * 10, dtype="float64").reshape(10, 10)
         Y = np.ones((10, 1), dtype=int)
@@ -397,6 +444,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_reindex_boolean(self):
+        """ """
         frame = DataFrame(
             np.ones((10, 2), dtype=bool), index=np.arange(0, 20, 2), columns=[0, 2]
         )
@@ -410,6 +458,17 @@
         assert isna(reindexed[1]).all()
 
     def test_reindex_objects(self, float_string_frame):
+        """
+
+        Parameters
+        ----------
+        float_string_frame :
+            
+
+        Returns
+        -------
+
+        """
         reindexed = float_string_frame.reindex(columns=["foo", "A", "B"])
         assert "foo" in reindexed
 
@@ -417,6 +476,17 @@
         assert "foo" not in reindexed
 
     def test_reindex_corner(self, int_frame):
+        """
+
+        Parameters
+        ----------
+        int_frame :
+            
+
+        Returns
+        -------
+
+        """
         index = Index(["a", "b", "c"])
         dm = DataFrame({}).reindex(index=[1, 2, 3])
         reindexed = dm.reindex(columns=index)
@@ -427,6 +497,7 @@
         assert smaller["E"].dtype == np.float64
 
     def test_reindex_with_nans(self):
+        """ """
         df = DataFrame(
             [[1, 2], [3, 4], [np.nan, np.nan], [7, 8], [9, 10]],
             columns=["a", "b"],
@@ -446,6 +517,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_reindex_multi(self):
+        """ """
         df = DataFrame(np.random.randn(3, 3))
 
         result = df.reindex(index=range(4), columns=range(4))
@@ -475,6 +547,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_reindex_multi_categorical_time(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/21390
         midx = pd.MultiIndex.from_product(
             [
@@ -494,6 +567,19 @@
     )
     @pytest.mark.parametrize("inplace", [False, True])
     def test_inplace_drop_and_operation(self, operation, inplace):
+        """
+
+        Parameters
+        ----------
+        operation :
+            
+        inplace :
+            
+
+        Returns
+        -------
+
+        """
         # GH 30484
         df = pd.DataFrame({"x": range(5)})
         expected = df.copy()
