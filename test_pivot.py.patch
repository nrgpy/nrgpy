# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/reshape/test_pivot.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/reshape/test_pivot.py
@@ -22,17 +22,53 @@
 
 @pytest.fixture(params=[True, False])
 def dropna(request):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     return request.param
 
 
 @pytest.fixture(params=[([0] * 4, [1] * 4), (range(0, 3), range(1, 4))])
 def interval_values(request, closed):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+    closed :
+        
+
+    Returns
+    -------
+
+    """
     left, right = request.param
     return Categorical(pd.IntervalIndex.from_arrays(left, right, closed))
 
 
 class TestPivotTable:
+    """ """
     def setup_method(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         self.data = DataFrame(
             {
                 "A": [
@@ -81,6 +117,17 @@
         )
 
     def test_pivot_table(self, observed):
+        """
+
+        Parameters
+        ----------
+        observed :
+            
+
+        Returns
+        -------
+
+        """
         index = ["A", "B"]
         columns = "C"
         table = pivot_table(
@@ -109,6 +156,17 @@
         tm.assert_frame_equal(table, expected)
 
     def test_pivot_table_categorical_observed_equal(self, observed):
+        """
+
+        Parameters
+        ----------
+        observed :
+            
+
+        Returns
+        -------
+
+        """
         # issue #24923
         df = pd.DataFrame(
             {"col1": list("abcde"), "col2": list("fghij"), "col3": [1, 2, 3, 4, 5]}
@@ -136,6 +194,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_pivot_table_nocols(self):
+        """ """
         df = DataFrame(
             {"rows": ["a", "b", "c"], "cols": ["x", "y", "z"], "values": [1, 2, 3]}
         )
@@ -148,6 +207,7 @@
         tm.assert_frame_equal(rs, xp)
 
     def test_pivot_table_dropna(self):
+        """ """
         df = DataFrame(
             {
                 "amount": {0: 60000, 1: 100000, 2: 50000, 3: 30000},
@@ -185,6 +245,7 @@
         tm.assert_index_equal(pv_ind.index, m)
 
     def test_pivot_table_categorical(self):
+        """ """
 
         cat1 = Categorical(
             ["a", "a", "b", "b"], categories=["a", "b", "z"], ordered=True
@@ -200,6 +261,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_pivot_table_dropna_categoricals(self, dropna):
+        """
+
+        Parameters
+        ----------
+        dropna :
+            
+
+        Returns
+        -------
+
+        """
         # GH 15193
         categories = ["a", "b", "c", "d"]
 
@@ -228,6 +300,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_pivot_with_non_observable_dropna(self, dropna):
+        """
+
+        Parameters
+        ----------
+        dropna :
+            
+
+        Returns
+        -------
+
+        """
         # gh-21133
         df = pd.DataFrame(
             {
@@ -279,6 +362,19 @@
         tm.assert_frame_equal(result, expected)
 
     def test_pivot_with_interval_index(self, interval_values, dropna):
+        """
+
+        Parameters
+        ----------
+        interval_values :
+            
+        dropna :
+            
+
+        Returns
+        -------
+
+        """
         # GH 25814
         df = DataFrame({"A": interval_values, "B": 1})
         result = df.pivot_table(index="A", values="B", dropna=dropna)
@@ -286,6 +382,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_pivot_with_interval_index_margins(self):
+        """ """
         # GH 25815
         ordered_cat = pd.IntervalIndex.from_arrays([0, 0, 1, 1], [1, 1, 2, 2])
         df = DataFrame(
@@ -312,16 +409,19 @@
         tm.assert_series_equal(result, expected)
 
     def test_pass_array(self):
+        """ """
         result = self.data.pivot_table("D", index=self.data.A, columns=self.data.C)
         expected = self.data.pivot_table("D", index="A", columns="C")
         tm.assert_frame_equal(result, expected)
 
     def test_pass_function(self):
+        """ """
         result = self.data.pivot_table("D", index=lambda x: x // 5, columns=self.data.C)
         expected = self.data.pivot_table("D", index=self.data.index // 5, columns="C")
         tm.assert_frame_equal(result, expected)
 
     def test_pivot_table_multiple(self):
+        """ """
         index = ["A", "B"]
         columns = "C"
         table = pivot_table(self.data, index=index, columns=columns)
@@ -329,6 +429,7 @@
         tm.assert_frame_equal(table, expected)
 
     def test_pivot_dtypes(self):
+        """ """
 
         # can convert dtypes
         f = DataFrame(
@@ -373,6 +474,19 @@
         ],
     )
     def test_pivot_preserve_dtypes(self, columns, values):
+        """
+
+        Parameters
+        ----------
+        columns :
+            
+        values :
+            
+
+        Returns
+        -------
+
+        """
         # GH 7142 regression test
         v = np.arange(5, dtype=np.float64)
         df = DataFrame(
@@ -391,6 +505,7 @@
         assert result == expected
 
     def test_pivot_no_values(self):
+        """ """
         # GH 14380
         idx = pd.DatetimeIndex(
             ["2011-01-01", "2011-02-01", "2011-01-02", "2011-01-01", "2011-01-02"]
@@ -428,6 +543,7 @@
         tm.assert_frame_equal(res, exp)
 
     def test_pivot_multi_values(self):
+        """ """
         result = pivot_table(
             self.data, values=["D", "E"], index="A", columns=["B", "C"], fill_value=0
         )
@@ -437,6 +553,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_pivot_multi_functions(self):
+        """ """
         f = lambda func: pivot_table(
             self.data, values=["D", "E"], index=["A", "B"], columns="C", aggfunc=func
         )
@@ -463,6 +580,17 @@
 
     @pytest.mark.parametrize("method", [True, False])
     def test_pivot_index_with_nan(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         # GH 3588
         nan = np.nan
         df = DataFrame(
@@ -517,6 +645,17 @@
 
     @pytest.mark.parametrize("method", [True, False])
     def test_pivot_with_tz(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         # GH 5878
         df = DataFrame(
             {
@@ -576,6 +715,7 @@
         tm.assert_frame_equal(pv, expected)
 
     def test_pivot_tz_in_values(self):
+        """ """
         # GH 14948
         df = pd.DataFrame(
             [
@@ -632,6 +772,17 @@
 
     @pytest.mark.parametrize("method", [True, False])
     def test_pivot_periods(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         df = DataFrame(
             {
                 "p1": [
@@ -677,6 +828,7 @@
         tm.assert_frame_equal(pv, expected)
 
     def test_pivot_periods_with_margins(self):
+        """ """
         # GH 28323
         df = DataFrame(
             {
@@ -713,6 +865,19 @@
     )
     @pytest.mark.parametrize("method", [True, False])
     def test_pivot_with_list_like_values(self, values, method):
+        """
+
+        Parameters
+        ----------
+        values :
+            
+        method :
+            
+
+        Returns
+        -------
+
+        """
         # issue #17160
         df = pd.DataFrame(
             {
@@ -749,6 +914,19 @@
     )
     @pytest.mark.parametrize("method", [True, False])
     def test_pivot_with_list_like_values_nans(self, values, method):
+        """
+
+        Parameters
+        ----------
+        values :
+            
+        method :
+            
+
+        Returns
+        -------
+
+        """
         # issue #17160
         df = pd.DataFrame(
             {
@@ -782,6 +960,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_pivot_columns_none_raise_error(self):
+        """ """
         # GH 30924
         df = pd.DataFrame(
             {"col1": ["a", "b", "c"], "col2": [1, 2, 3], "col3": [1, 2, 3]}
@@ -795,6 +974,17 @@
     )
     @pytest.mark.parametrize("method", [True, False])
     def test_pivot_with_multiindex(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         # issue #17160
         index = Index(data=[0, 1, 2, 3, 4, 5])
         data = [
@@ -834,6 +1024,17 @@
 
     @pytest.mark.parametrize("method", [True, False])
     def test_pivot_with_tuple_of_values(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         # issue #17160
         df = pd.DataFrame(
             {
@@ -851,9 +1052,31 @@
                 pd.pivot(df, index="zoo", columns="foo", values=("bar", "baz"))
 
     def test_margins(self):
+        """ """
         def _check_output(
             result, values_col, index=["A", "B"], columns=["C"], margins_col="All"
         ):
+            """
+
+            Parameters
+            ----------
+            result :
+                
+            values_col :
+                
+            index :
+                 (Default value = ["A")
+            "B"] :
+                
+            columns :
+                 (Default value = ["C"])
+            margins_col :
+                 (Default value = "All")
+
+            Returns
+            -------
+
+            """
             col_margins = result.loc[result.index[:-1], margins_col]
             expected_col_margins = self.data.groupby(index)[values_col].mean()
             tm.assert_series_equal(col_margins, expected_col_margins, check_names=False)
@@ -940,6 +1163,23 @@
     def test_margin_with_only_columns_defined(
         self, columns, aggfunc, values, expected_columns
     ):
+        """
+
+        Parameters
+        ----------
+        columns :
+            
+        aggfunc :
+            
+        values :
+            
+        expected_columns :
+            
+
+        Returns
+        -------
+
+        """
         # GH 31016
         df = pd.DataFrame(
             {
@@ -969,6 +1209,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_margins_dtype(self):
+        """ """
         # GH 17013
 
         df = self.data.copy()
@@ -994,6 +1235,7 @@
 
     @pytest.mark.xfail(reason="GH#17035 (len of floats is casted back to floats)")
     def test_margins_dtype_len(self):
+        """ """
         mi_val = list(product(["bar", "foo"], ["one", "two"])) + [("All", "")]
         mi = MultiIndex.from_tuples(mi_val, names=("A", "B"))
         expected = DataFrame(
@@ -1014,6 +1256,17 @@
 
     @pytest.mark.parametrize("cols", [(1, 2), ("a", "b"), (1, "b"), ("a", 1)])
     def test_pivot_table_multiindex_only(self, cols):
+        """
+
+        Parameters
+        ----------
+        cols :
+            
+
+        Returns
+        -------
+
+        """
         # GH 17038
         df2 = DataFrame({cols[0]: [1, 2, 3], cols[1]: [1, 2, 3], "v": [4, 5, 6]})
 
@@ -1027,6 +1280,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_pivot_table_retains_tz(self):
+        """ """
         dti = date_range("2016-01-01", periods=3, tz="Europe/Amsterdam")
         df = DataFrame({"A": np.random.randn(3), "B": np.random.randn(3), "C": dti})
         result = df.pivot_table(index=["B", "C"], dropna=False)
@@ -1035,6 +1289,7 @@
         assert result.index.levels[1].equals(dti)
 
     def test_pivot_integer_columns(self):
+        """ """
         # caused by upstream bug in unstack
 
         d = date.min
@@ -1056,6 +1311,7 @@
         tm.assert_frame_equal(table, table2, check_names=False)
 
     def test_pivot_no_level_overlap(self):
+        """ """
         # GH #1181
 
         data = DataFrame(
@@ -1074,6 +1330,7 @@
         tm.assert_frame_equal(table, expected)
 
     def test_pivot_columns_lexsorted(self):
+        """ """
 
         n = 10000
 
@@ -1126,6 +1383,7 @@
         assert pivoted.columns.is_monotonic
 
     def test_pivot_complex_aggfunc(self):
+        """ """
         f = {"D": ["std"], "E": ["sum"]}
         expected = self.data.groupby(["A", "B"]).agg(f).unstack("B")
         result = self.data.pivot_table(index="A", columns="B", aggfunc=f)
@@ -1133,6 +1391,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_margins_no_values_no_cols(self):
+        """ """
         # Regression test on pivot table: no values or cols passed.
         result = self.data[["A", "B"]].pivot_table(
             index=["A", "B"], aggfunc=len, margins=True
@@ -1141,6 +1400,7 @@
         assert sum(result_list[:-1]) == result_list[-1]
 
     def test_margins_no_values_two_rows(self):
+        """ """
         # Regression test on pivot table: no values passed but rows are a
         # multi-index
         result = self.data[["A", "B", "C"]].pivot_table(
@@ -1149,6 +1409,7 @@
         assert result.All.tolist() == [3.0, 1.0, 4.0, 3.0, 11.0]
 
     def test_margins_no_values_one_row_one_col(self):
+        """ """
         # Regression test on pivot table: no values passed but row and col
         # defined
         result = self.data[["A", "B"]].pivot_table(
@@ -1157,6 +1418,7 @@
         assert result.All.tolist() == [4.0, 7.0, 11.0]
 
     def test_margins_no_values_two_row_two_cols(self):
+        """ """
         # Regression test on pivot table: no values passed but rows and cols
         # are multi-indexed
         self.data["D"] = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k"]
@@ -1167,6 +1429,17 @@
 
     @pytest.mark.parametrize("margin_name", ["foo", "one", 666, None, ["a", "b"]])
     def test_pivot_table_with_margins_set_margin_name(self, margin_name):
+        """
+
+        Parameters
+        ----------
+        margin_name :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-3335
         msg = (
             f'Conflicting name "{margin_name}" in margins|'
@@ -1204,6 +1477,7 @@
             )
 
     def test_pivot_timegrouper(self):
+        """ """
         df = DataFrame(
             {
                 "Branch": "A A A A A A A B".split(),
@@ -1479,6 +1753,7 @@
         tm.assert_frame_equal(result, expected.T)
 
     def test_pivot_datetime_tz(self):
+        """ """
         dates1 = [
             "2011-07-19 07:00:00",
             "2011-07-19 08:00:00",
@@ -1550,6 +1825,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_pivot_dtaccessor(self):
+        """ """
         # GH 8103
         dates1 = [
             "2011-07-19 07:00:00",
@@ -1633,6 +1909,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_daily(self):
+        """ """
         rng = date_range("1/1/2000", "12/31/2004", freq="D")
         ts = Series(np.random.randn(len(rng)), index=rng)
 
@@ -1652,6 +1929,7 @@
             assert result.name == i
 
     def test_monthly(self):
+        """ """
         rng = date_range("1/1/2000", "12/31/2004", freq="M")
         ts = Series(np.random.randn(len(rng)), index=rng)
 
@@ -1669,6 +1947,7 @@
             assert result.name == i
 
     def test_pivot_table_with_iterator_values(self):
+        """ """
         # GH 12017
         aggs = {"D": "sum", "E": "mean"}
 
@@ -1688,6 +1967,7 @@
         tm.assert_frame_equal(pivot_values_gen, pivot_values_list)
 
     def test_pivot_table_margins_name_with_aggfunc_list(self):
+        """ """
         # GH 13354
         margins_name = "Weekly"
         costs = pd.DataFrame(
@@ -1719,6 +1999,17 @@
 
     @pytest.mark.xfail(reason="GH#17035 (np.mean of ints is casted back to ints)")
     def test_categorical_margins(self, observed):
+        """
+
+        Parameters
+        ----------
+        observed :
+            
+
+        Returns
+        -------
+
+        """
         # GH 10989
         df = pd.DataFrame(
             {"x": np.arange(8), "y": np.arange(8) // 4, "z": np.arange(8) % 2}
@@ -1733,6 +2024,17 @@
 
     @pytest.mark.xfail(reason="GH#17035 (np.mean of ints is casted back to ints)")
     def test_categorical_margins_category(self, observed):
+        """
+
+        Parameters
+        ----------
+        observed :
+            
+
+        Returns
+        -------
+
+        """
         df = pd.DataFrame(
             {"x": np.arange(8), "y": np.arange(8) // 4, "z": np.arange(8) % 2}
         )
@@ -1747,6 +2049,17 @@
         tm.assert_frame_equal(table, expected)
 
     def test_margins_casted_to_float(self, observed):
+        """
+
+        Parameters
+        ----------
+        observed :
+            
+
+        Returns
+        -------
+
+        """
         # GH 24893
         df = pd.DataFrame(
             {
@@ -1765,6 +2078,19 @@
         tm.assert_frame_equal(result, expected)
 
     def test_pivot_with_categorical(self, observed, ordered):
+        """
+
+        Parameters
+        ----------
+        observed :
+            
+        ordered :
+            
+
+        Returns
+        -------
+
+        """
         # gh-21370
         idx = [np.nan, "low", "high", "low", np.nan]
         col = [np.nan, "A", "B", np.nan, "A"]
@@ -1804,6 +2130,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_categorical_aggfunc(self, observed):
+        """
+
+        Parameters
+        ----------
+        observed :
+            
+
+        Returns
+        -------
+
+        """
         # GH 9534
         df = pd.DataFrame(
             {"C1": ["A", "B", "C", "C"], "C2": ["a", "a", "b", "b"], "V": [1, 2, 3, 4]}
@@ -1824,6 +2161,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_categorical_pivot_index_ordering(self, observed):
+        """
+
+        Parameters
+        ----------
+        observed :
+            
+
+        Returns
+        -------
+
+        """
         # GH 8731
         df = pd.DataFrame(
             {
@@ -1867,6 +2215,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_pivot_table_not_series(self):
+        """ """
         # GH 4386
         # pivot_table always returns a DataFrame
         # when values is not list like and columns is None
@@ -1895,6 +2244,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_pivot_margins_name_unicode(self):
+        """ """
         # issue #13292
         greek = "\u0394\u03bf\u03ba\u03b9\u03bc\u03ae"
         frame = pd.DataFrame({"foo": [1, 2, 3]})
@@ -1906,6 +2256,7 @@
         tm.assert_frame_equal(table, expected)
 
     def test_pivot_string_as_func(self):
+        """ """
         # GH #18713
         # for correctness purposes
         data = DataFrame(
@@ -1979,6 +2330,19 @@
         ],
     )
     def test_pivot_string_func_vs_func(self, f, f_numpy):
+        """
+
+        Parameters
+        ----------
+        f :
+            
+        f_numpy :
+            
+
+        Returns
+        -------
+
+        """
         # GH #18713
         # for consistency purposes
         result = pivot_table(self.data, index="A", columns="B", aggfunc=f)
@@ -1987,6 +2351,7 @@
 
     @pytest.mark.slow
     def test_pivot_number_of_levels_larger_than_int32(self):
+        """ """
         # GH 20601
         df = DataFrame(
             {"ind1": np.arange(2 ** 16), "ind2": np.arange(2 ** 16), "count": 0}
@@ -1999,6 +2364,17 @@
             )
 
     def test_pivot_table_aggfunc_dropna(self, dropna):
+        """
+
+        Parameters
+        ----------
+        dropna :
+            
+
+        Returns
+        -------
+
+        """
         # GH 22159
         df = pd.DataFrame(
             {
@@ -2009,12 +2385,45 @@
         )
 
         def ret_one(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return 1
 
         def ret_sum(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return sum(x)
 
         def ret_none(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return np.nan
 
         result = pd.pivot_table(
@@ -2034,6 +2443,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_pivot_table_aggfunc_scalar_dropna(self, dropna):
+        """
+
+        Parameters
+        ----------
+        dropna :
+            
+
+        Returns
+        -------
+
+        """
         # GH 22159
         df = pd.DataFrame(
             {"A": ["one", "two", "one"], "x": [3, np.nan, 2], "y": [1, np.nan, np.nan]}
@@ -2051,6 +2471,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_pivot_table_empty_aggfunc(self):
+        """ """
         # GH 9186
         df = pd.DataFrame(
             {
@@ -2065,8 +2486,20 @@
         tm.assert_frame_equal(result, expected)
 
     def test_pivot_table_no_column_raises(self):
+        """ """
         # GH 10326
         def agg(l):
+            """
+
+            Parameters
+            ----------
+            l :
+                
+
+            Returns
+            -------
+
+            """
             return np.mean(l)
 
         foo = pd.DataFrame(
