# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/categorical/test_category.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/categorical/test_category.py
@@ -12,18 +12,44 @@
 
 
 class TestCategoricalIndex(Base):
+    """ """
     _holder = CategoricalIndex
 
     @pytest.fixture
     def index(self, request):
+        """
+
+        Parameters
+        ----------
+        request :
+            
+
+        Returns
+        -------
+
+        """
         return tm.makeCategoricalIndex(100)
 
     def create_index(self, categories=None, ordered=False):
+        """
+
+        Parameters
+        ----------
+        categories :
+             (Default value = None)
+        ordered :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         if categories is None:
             categories = list("cab")
         return CategoricalIndex(list("aabbca"), categories=categories, ordered=ordered)
 
     def test_can_hold_identifiers(self):
+        """ """
         idx = self.create_index(categories=list("abcd"))
         key = idx[0]
         assert idx._can_hold_identifiers_and_holds_name(key) is True
@@ -40,6 +66,19 @@
         ],
     )
     def test_disallow_addsub_ops(self, func, op_name):
+        """
+
+        Parameters
+        ----------
+        func :
+            
+        op_name :
+            
+
+        Returns
+        -------
+
+        """
         # GH 10039
         # set ops (+/-) raise TypeError
         idx = pd.Index(pd.Categorical(["a", "b"]))
@@ -48,6 +87,7 @@
             func(idx)
 
     def test_method_delegation(self):
+        """ """
 
         ci = CategoricalIndex(list("aabbca"), categories=list("cabdef"))
         result = ci.set_categories(list("cab"))
@@ -97,6 +137,7 @@
             ci.set_categories(list("cab"), inplace=True)
 
     def test_append(self):
+        """ """
 
         ci = self.create_index()
         categories = ci.categories
@@ -136,6 +177,7 @@
         tm.assert_index_equal(result, expected, exact=True)
 
     def test_append_to_another(self):
+        """ """
         # hits Index._concat
         fst = Index(["a", "b"])
         snd = CategoricalIndex(["d", "e"])
@@ -144,6 +186,7 @@
         tm.assert_index_equal(result, expected)
 
     def test_insert(self):
+        """ """
 
         ci = self.create_index()
         categories = ci.categories
@@ -178,6 +221,7 @@
             tm.assert_index_equal(result, expected)
 
     def test_delete(self):
+        """ """
 
         ci = self.create_index()
         categories = ci.categories
@@ -199,6 +243,19 @@
         [[[1, 2, 3], [9, 0, 1, 2, 3]], [list("abc"), list("fabcd")]],
     )
     def test_is_monotonic(self, data, non_lexsorted_data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        non_lexsorted_data :
+            
+
+        Returns
+        -------
+
+        """
         c = CategoricalIndex(data)
         assert c.is_monotonic_increasing is True
         assert c.is_monotonic_decreasing is False
@@ -233,6 +290,7 @@
         assert c.is_monotonic_decreasing is False
 
     def test_has_duplicates(self):
+        """ """
         idx = CategoricalIndex([0, 0, 0], name="foo")
         assert idx.is_unique is False
         assert idx.has_duplicates is True
@@ -287,6 +345,21 @@
         ],
     )
     def test_drop_duplicates(self, data, categories, expected):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        categories :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
 
         idx = CategoricalIndex(data, categories=categories, name="foo")
         for keep, e in expected.items():
@@ -305,12 +378,30 @@
         ],
     )
     def test_unique(self, data, categories, expected_data, expected_categories):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        categories :
+            
+        expected_data :
+            
+        expected_categories :
+            
+
+        Returns
+        -------
+
+        """
 
         idx = CategoricalIndex(data, categories=categories)
         expected = CategoricalIndex(expected_data, categories=expected_categories)
         tm.assert_index_equal(idx.unique(), expected)
 
     def test_repr_roundtrip(self):
+        """ """
 
         ci = CategoricalIndex(["a", "b"], categories=["a", "b"], ordered=True)
         str(ci)
@@ -325,6 +416,7 @@
         str(ci)
 
     def test_isin(self):
+        """ """
 
         ci = CategoricalIndex(list("aabca") + [np.nan], categories=["c", "a", "b"])
         tm.assert_numpy_array_equal(
@@ -347,6 +439,7 @@
         tm.assert_numpy_array_equal(result, expected)
 
     def test_identical(self):
+        """ """
 
         ci1 = CategoricalIndex(["a", "b"], categories=["a", "b"], ordered=True)
         ci2 = CategoricalIndex(["a", "b"], categories=["a", "b", "c"], ordered=True)
@@ -355,6 +448,17 @@
         assert not ci1.identical(ci2)
 
     def test_ensure_copied_data(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         # gh-12309: Check the "copy" argument of each
         # Index.__new__ is honored.
         #
@@ -372,6 +476,7 @@
         assert _base(index.values) is _base(result.values)
 
     def test_equals_categorical(self):
+        """ """
         ci1 = CategoricalIndex(["a", "b"], categories=["a", "b"], ordered=True)
         ci2 = CategoricalIndex(["a", "b"], categories=["a", "b", "c"], ordered=True)
 
@@ -434,6 +539,7 @@
         assert ci.equals(ci.copy())
 
     def test_equals_categorical_unordered(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/16603
         a = pd.CategoricalIndex(["A"], categories=["A", "B"])
         b = pd.CategoricalIndex(["A"], categories=["B", "A"])
@@ -443,6 +549,7 @@
         assert not b.equals(c)
 
     def test_frame_repr(self):
+        """ """
         df = pd.DataFrame({"A": [1, 2, 3]}, index=pd.CategoricalIndex(["a", "b", "c"]))
         result = repr(df)
         expected = "   A\na  1\nb  2\nc  3"
@@ -458,6 +565,19 @@
         ],
     )
     def test_engine_type(self, dtype, engine_type):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+        engine_type :
+            
+
+        Returns
+        -------
+
+        """
         if dtype != np.int64:
             # num. of uniques required to push CategoricalIndex.codes to a
             # dtype (128 categories required for .codes dtype to be int16 etc.)
@@ -472,14 +592,17 @@
         assert isinstance(ci._engine, engine_type)
 
     def test_reindex_base(self):
+        """ """
         # See test_reindex.py
         pass
 
     def test_map_str(self):
+        """ """
         # See test_map.py
         pass
 
     def test_format_different_scalar_lengths(self):
+        """ """
         # GH35439
         idx = CategoricalIndex(["aaaaaaaaa", "b"])
         expected = ["aaaaaaaaa", "b"]
