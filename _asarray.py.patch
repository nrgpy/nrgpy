# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/_asarray.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/_asarray.py
@@ -46,31 +46,32 @@
     fromiter : Create an array from an iterator.
     fromfunction : Construct an array by executing a function on grid
                    positions.
-
     Examples
     --------
     Convert a list into an array:
-
+    
+    
+    Existing arrays are not copied:
+    
+    
+    If `dtype` is set, array is copied only if dtype does not match:
+    
+    
+    Contrary to `asanyarray`, ndarray subclasses are not passed through:
     >>> a = [1, 2]
     >>> np.asarray(a)
     array([1, 2])
-
-    Existing arrays are not copied:
-
+    
     >>> a = np.array([1, 2])
     >>> np.asarray(a) is a
     True
-
-    If `dtype` is set, array is copied only if dtype does not match:
-
+    
     >>> a = np.array([1, 2], dtype=np.float32)
     >>> np.asarray(a, dtype=np.float32) is a
     True
     >>> np.asarray(a, dtype=np.float64) is a
     False
-
-    Contrary to `asanyarray`, ndarray subclasses are not passed through:
-
+    
     >>> issubclass(np.recarray, np.ndarray)
     True
     >>> a = np.array([(1.0, 2), (3.0, 4)], dtype='f4,i4').view(np.recarray)
@@ -78,7 +79,6 @@
     False
     >>> np.asanyarray(a) is a
     True
-
     """
     return array(a, dtype, copy=False, order=order)
 
@@ -117,36 +117,33 @@
     fromiter : Create an array from an iterator.
     fromfunction : Construct an array by executing a function on grid
                    positions.
-
     Examples
     --------
     Convert a list into an array:
-
+    
+    
+    Instances of `ndarray` subclasses are passed through as-is:
     >>> a = [1, 2]
     >>> np.asanyarray(a)
     array([1, 2])
-
-    Instances of `ndarray` subclasses are passed through as-is:
-
+    
     >>> a = np.array([(1.0, 2), (3.0, 4)], dtype='f4,i4').view(np.recarray)
     >>> np.asanyarray(a) is a
     True
-
     """
     return array(a, dtype, copy=False, order=order, subok=True)
 
 
 @set_module('numpy')
 def ascontiguousarray(a, dtype=None):
-    """
-    Return a contiguous array (ndim >= 1) in memory (C order).
+    """Return a contiguous array (ndim >= 1) in memory (C order).
 
     Parameters
     ----------
     a : array_like
         Input array.
     dtype : str or dtype object, optional
-        Data-type of returned array.
+        Data-type of returned array. (Default value = None)
 
     Returns
     -------
@@ -160,27 +157,24 @@
                      memory order.
     require : Return an ndarray that satisfies requirements.
     ndarray.flags : Information about the memory layout of the array.
-
-    Examples
-    --------
+    Examples
+    --------
+    
+    Note: This function returns an array with at least one-dimension (1-d)
+    so it will not preserve 0-d arrays.
     >>> x = np.arange(6).reshape(2,3)
     >>> np.ascontiguousarray(x, dtype=np.float32)
     array([[0., 1., 2.],
            [3., 4., 5.]], dtype=float32)
     >>> x.flags['C_CONTIGUOUS']
     True
-
-    Note: This function returns an array with at least one-dimension (1-d) 
-    so it will not preserve 0-d arrays.  
-
     """
     return array(a, dtype, copy=False, order='C', ndmin=1)
 
 
 @set_module('numpy')
 def asfortranarray(a, dtype=None):
-    """
-    Return an array (ndim >= 1) laid out in Fortran order in memory.
+    """Return an array (ndim >= 1) laid out in Fortran order in memory.
 
     Parameters
     ----------
@@ -201,48 +195,44 @@
         column-major memory order.
     require : Return an ndarray that satisfies requirements.
     ndarray.flags : Information about the memory layout of the array.
-
-    Examples
-    --------
+    Examples
+    --------
+    
+    Note: This function returns an array with at least one-dimension (1-d)
+    so it will not preserve 0-d arrays.
     >>> x = np.arange(6).reshape(2,3)
     >>> y = np.asfortranarray(x)
     >>> x.flags['F_CONTIGUOUS']
     False
     >>> y.flags['F_CONTIGUOUS']
     True
-
-    Note: This function returns an array with at least one-dimension (1-d) 
-    so it will not preserve 0-d arrays.  
-
     """
     return array(a, dtype, copy=False, order='F', ndmin=1)
 
 
 @set_module('numpy')
 def require(a, dtype=None, requirements=None):
-    """
-    Return an ndarray of the provided type that satisfies requirements.
-
+    """Return an ndarray of the provided type that satisfies requirements.
+    
     This function is useful to be sure that an array with the correct flags
     is returned for passing to compiled code (perhaps through ctypes).
 
     Parameters
     ----------
     a : array_like
-       The object to be converted to a type-and-requirement-satisfying array.
+        The object to be converted to a type-and-requirement-satisfying array.
     dtype : data-type
-       The required data-type. If None preserve the current dtype. If your
-       application requires the data to be in native byteorder, include
-       a byteorder specification as a part of the dtype specification.
+        The required data-type. If None preserve the current dtype. If your
+        application requires the data to be in native byteorder, include
+        a byteorder specification as a part of the dtype specification. (Default value = None)
     requirements : str or list of str
-       The requirements list can be any of the following
-
-       * 'F_CONTIGUOUS' ('F') - ensure a Fortran-contiguous array
-       * 'C_CONTIGUOUS' ('C') - ensure a C-contiguous array
-       * 'ALIGNED' ('A')      - ensure a data-type aligned array
-       * 'WRITEABLE' ('W')    - ensure a writable array
-       * 'OWNDATA' ('O')      - ensure an array that owns its own data
-       * 'ENSUREARRAY', ('E') - ensure a base array, instead of a subclass
+        The requirements list can be any of the following
+        * 'F_CONTIGUOUS' ('F') - ensure a Fortran-contiguous array
+        * 'C_CONTIGUOUS' ('C') - ensure a C-contiguous array
+        * 'ALIGNED' ('A')      - ensure a data-type aligned array
+        * 'WRITEABLE' ('W')    - ensure a writable array
+        * 'OWNDATA' ('O')      - ensure an array that owns its own data
+        * 'ENSUREARRAY', ('E') - ensure a base array, instead of a subclass (Default value = None)
 
     Returns
     -------
@@ -257,12 +247,10 @@
     asfortranarray : Convert input to an ndarray with column-major
                      memory order.
     ndarray.flags : Information about the memory layout of the array.
-
     Notes
     -----
     The returned array will be guaranteed to have the listed requirements
     by making a copy if needed.
-
     Examples
     --------
     >>> x = np.arange(6).reshape(2,3)
@@ -274,7 +262,7 @@
       ALIGNED : True
       WRITEBACKIFCOPY : False
       UPDATEIFCOPY : False
-
+    
     >>> y = np.require(x, dtype=np.float32, requirements=['A', 'O', 'W', 'F'])
     >>> y.flags
       C_CONTIGUOUS : False
@@ -284,7 +272,6 @@
       ALIGNED : True
       WRITEBACKIFCOPY : False
       UPDATEIFCOPY : False
-
     """
     possible_flags = {'C': 'C', 'C_CONTIGUOUS': 'C', 'CONTIGUOUS': 'C',
                       'F': 'F', 'F_CONTIGUOUS': 'F', 'FORTRAN': 'F',
