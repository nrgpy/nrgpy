# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/indexes/timedeltas.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/indexes/timedeltas.py
@@ -51,13 +51,12 @@
     TimedeltaArray,
 )
 class TimedeltaIndex(DatetimeTimedeltaMixin):
-    """
-    Immutable ndarray of timedelta64 data, represented internally as int64, and
+    """Immutable ndarray of timedelta64 data, represented internally as int64, and
     which can be boxed to timedelta objects.
 
     Parameters
     ----------
-    data  : array-like (1-dimensional), optional
+    data : array-like (1-dimensional), optional
         Optional timedelta-like data to construct index with.
     unit : unit of the arg (D,h,m,s,ms,us,ns) denote the unit, optional
         Which is an integer/float number.
@@ -65,10 +64,13 @@
         One of pandas date offset strings or corresponding objects. The string
         'infer' can be passed in order to set the frequency of the index as the
         inferred frequency upon creation.
-    copy  : bool
+    copy : bool
         Make a copy of input ndarray.
     name : object
         Name to be stored in the index.
+
+    Returns
+    -------
 
     Attributes
     ----------
@@ -78,7 +80,6 @@
     nanoseconds
     components
     inferred_freq
-
     Methods
     -------
     to_pytimedelta
@@ -88,7 +89,6 @@
     ceil
     to_frame
     mean
-
     See Also
     --------
     Index : The base pandas Index type.
@@ -96,7 +96,6 @@
     DatetimeIndex : Index of datetime64 data.
     PeriodIndex : Index of Period data.
     timedelta_range : Create a fixed-frequency TimedeltaIndex.
-
     Notes
     -----
     To learn more about the frequency strings, please see `this link
@@ -160,6 +159,19 @@
 
     @classmethod
     def _simple_new(cls, values: TimedeltaArray, name: Label = None):
+        """
+
+        Parameters
+        ----------
+        values: TimedeltaArray :
+            
+        name: Label :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         assert isinstance(values, TimedeltaArray)
 
         result = object.__new__(cls)
@@ -177,6 +189,7 @@
 
     @property
     def _formatter_func(self):
+        """ """
         from pandas.io.formats.format import _get_format_timedelta64
 
         return _get_format_timedelta64(self, box=True)
@@ -185,6 +198,19 @@
 
     @doc(Index.astype)
     def astype(self, dtype, copy=True):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+        copy :
+             (Default value = True)
+
+        Returns
+        -------
+
+        """
         dtype = pandas_dtype(dtype)
         if is_timedelta64_dtype(dtype) and not is_timedelta64_ns_dtype(dtype):
             # Have to repeat the check for 'timedelta64' (not ns) dtype
@@ -197,18 +223,35 @@
         return DatetimeIndexOpsMixin.astype(self, dtype, copy=copy)
 
     def _is_comparable_dtype(self, dtype: DtypeObj) -> bool:
-        """
-        Can we compare values of the given dtype to our own?
+        """Can we compare values of the given dtype to our own?
+
+        Parameters
+        ----------
+        dtype: DtypeObj :
+            
+
+        Returns
+        -------
+
         """
         return is_timedelta64_dtype(dtype)
 
     def get_loc(self, key, method=None, tolerance=None):
-        """
-        Get integer location for requested label
-
-        Returns
-        -------
-        loc : int, slice, or ndarray[int]
+        """Get integer location for requested label
+
+        Parameters
+        ----------
+        key :
+            
+        method :
+             (Default value = None)
+        tolerance :
+             (Default value = None)
+
+        Returns
+        -------
+
+        
         """
         if not is_scalar(key):
             raise InvalidIndexError(key)
@@ -221,18 +264,23 @@
         return Index.get_loc(self, key, method, tolerance)
 
     def _maybe_cast_slice_bound(self, label, side: str, kind):
-        """
-        If label is a string, cast it to timedelta according to resolution.
+        """If label is a string, cast it to timedelta according to resolution.
 
         Parameters
         ----------
         label : object
+            
         side : {'left', 'right'}
+            
         kind : {'loc', 'getitem'} or None
-
-        Returns
-        -------
-        label : object
+            
+        side: str :
+            
+
+        Returns
+        -------
+
+        
         """
         assert kind in ["loc", "getitem", None]
 
@@ -249,10 +297,22 @@
         return label
 
     def is_type_compatible(self, typ) -> bool:
+        """
+
+        Parameters
+        ----------
+        typ :
+            
+
+        Returns
+        -------
+
+        """
         return typ == self.inferred_type or typ == "timedelta"
 
     @property
     def inferred_type(self) -> str:
+        """ """
         return "timedelta64"
 
 
@@ -262,29 +322,29 @@
 def timedelta_range(
     start=None, end=None, periods=None, freq=None, name=None, closed=None
 ) -> TimedeltaIndex:
-    """
-    Return a fixed frequency TimedeltaIndex, with day as the default
+    """Return a fixed frequency TimedeltaIndex, with day as the default
     frequency.
 
     Parameters
     ----------
     start : str or timedelta-like, default None
-        Left bound for generating timedeltas.
+        Left bound for generating timedeltas. (Default value = None)
     end : str or timedelta-like, default None
-        Right bound for generating timedeltas.
+        Right bound for generating timedeltas. (Default value = None)
     periods : int, default None
-        Number of periods to generate.
+        Number of periods to generate. (Default value = None)
     freq : str or DateOffset, default 'D'
-        Frequency strings can have multiples, e.g. '5H'.
+        Frequency strings can have multiples, e.g. '5H'. (Default value = None)
     name : str, default None
-        Name of the resulting TimedeltaIndex.
+        Name of the resulting TimedeltaIndex. (Default value = None)
     closed : str, default None
         Make the interval closed with respect to the given frequency to
-        the 'left', 'right', or both sides (None).
+        the 'left', 'right', or both sides (None). (Default value = None)
 
     Returns
     -------
     rng : TimedeltaIndex
+        
 
     Notes
     -----
@@ -292,35 +352,36 @@
     exactly three must be specified. If ``freq`` is omitted, the resulting
     ``TimedeltaIndex`` will have ``periods`` linearly spaced elements between
     ``start`` and ``end`` (closed on both sides).
-
+    
     To learn more about the frequency strings, please see `this link
     <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.
-
     Examples
     --------
+    
+    The ``closed`` parameter specifies which endpoint is included.  The default
+    behavior is to include both endpoints.
+    
+    
+    The ``freq`` parameter specifies the frequency of the TimedeltaIndex.
+    Only fixed frequencies can be passed, non-fixed frequencies such as
+    'M' (month end) will raise.
+    
+    
+    Specify ``start``, ``end``, and ``periods``; the frequency is generated
+    automatically (linearly spaced).
     >>> pd.timedelta_range(start='1 day', periods=4)
     TimedeltaIndex(['1 days', '2 days', '3 days', '4 days'],
                    dtype='timedelta64[ns]', freq='D')
-
-    The ``closed`` parameter specifies which endpoint is included.  The default
-    behavior is to include both endpoints.
-
+    
     >>> pd.timedelta_range(start='1 day', periods=4, closed='right')
     TimedeltaIndex(['2 days', '3 days', '4 days'],
                    dtype='timedelta64[ns]', freq='D')
-
-    The ``freq`` parameter specifies the frequency of the TimedeltaIndex.
-    Only fixed frequencies can be passed, non-fixed frequencies such as
-    'M' (month end) will raise.
-
+    
     >>> pd.timedelta_range(start='1 day', end='2 days', freq='6H')
     TimedeltaIndex(['1 days 00:00:00', '1 days 06:00:00', '1 days 12:00:00',
                     '1 days 18:00:00', '2 days 00:00:00'],
                    dtype='timedelta64[ns]', freq='6H')
-
-    Specify ``start``, ``end``, and ``periods``; the frequency is generated
-    automatically (linearly spaced).
-
+    
     >>> pd.timedelta_range(start='1 day', end='5 days', periods=4)
     TimedeltaIndex(['1 days 00:00:00', '2 days 08:00:00', '3 days 16:00:00',
                     '5 days 00:00:00'],
