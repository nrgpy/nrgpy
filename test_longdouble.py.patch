# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_longdouble.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_longdouble.py
@@ -32,6 +32,7 @@
 @pytest.mark.skipif(LD_INFO.precision + 2 >= repr_precision,
                     reason="repr precision not enough to show eps")
 def test_repr_roundtrip():
+    """ """
     # We will only see eps in repr if within printing precision.
     o = 1 + LD_INFO.eps
     assert_equal(np.longdouble(repr(o)), o, "repr was %s" % repr(o))
@@ -39,6 +40,7 @@
 
 @pytest.mark.skipif(string_to_longdouble_inaccurate, reason="Need strtold_l")
 def test_repr_roundtrip_bytes():
+    """ """
     o = 1 + LD_INFO.eps
     assert_equal(np.longdouble(repr(o).encode("ascii")), o)
 
@@ -46,9 +48,17 @@
 @pytest.mark.skipif(string_to_longdouble_inaccurate, reason="Need strtold_l")
 @pytest.mark.parametrize("strtype", (np.str_, np.bytes_, str, bytes))
 def test_array_and_stringlike_roundtrip(strtype):
-    """
-    Test that string representations of long-double roundtrip both
+    """Test that string representations of long-double roundtrip both
     for array casting and scalar coercion, see also gh-15608.
+
+    Parameters
+    ----------
+    strtype :
+        
+
+    Returns
+    -------
+
     """
     o = 1 + LD_INFO.eps
 
@@ -70,12 +80,14 @@
 
 
 def test_bogus_string():
+    """ """
     assert_raises(ValueError, np.longdouble, "spam")
     assert_raises(ValueError, np.longdouble, "1.0 flub")
 
 
 @pytest.mark.skipif(string_to_longdouble_inaccurate, reason="Need strtold_l")
 def test_fromstring():
+    """ """
     o = 1 + LD_INFO.eps
     s = (" " + repr(o))*5
     a = np.array([o]*5)
@@ -84,6 +96,7 @@
 
 
 def test_fromstring_complex():
+    """ """
     for ctype in ["complex", "cdouble", "cfloat"]:
         # Check spacing between separator
         assert_equal(np.fromstring("1, 2 ,  3  ,4", sep=",", dtype=ctype),
@@ -116,30 +129,35 @@
 
 
 def test_fromstring_bogus():
+    """ """
     with assert_warns(DeprecationWarning):
         assert_equal(np.fromstring("1. 2. 3. flop 4.", dtype=float, sep=" "),
                      np.array([1., 2., 3.]))
 
 
 def test_fromstring_empty():
+    """ """
     with assert_warns(DeprecationWarning):
         assert_equal(np.fromstring("xxxxx", sep="x"),
                      np.array([]))
 
 
 def test_fromstring_missing():
+    """ """
     with assert_warns(DeprecationWarning):
         assert_equal(np.fromstring("1xx3x4x5x6", sep="x"),
                      np.array([1]))
 
 
 class TestFileBased:
+    """ """
 
     ldbl = 1 + LD_INFO.eps
     tgt = np.array([ldbl]*5)
     out = ''.join([repr(t) + '\n' for t in tgt])
 
     def test_fromfile_bogus(self):
+        """ """
         with temppath() as path:
             with open(path, 'wt') as f:
                 f.write("1. 2. 3. flop 4.\n")
@@ -149,6 +167,7 @@
         assert_equal(res, np.array([1., 2., 3.]))
 
     def test_fromfile_complex(self):
+        """ """
         for ctype in ["complex", "cdouble", "cfloat"]:
             # Check spacing between separator and only real component specified
             with temppath() as path:
@@ -233,6 +252,7 @@
     @pytest.mark.skipif(string_to_longdouble_inaccurate,
                         reason="Need strtold_l")
     def test_fromfile(self):
+        """ """
         with temppath() as path:
             with open(path, 'wt') as f:
                 f.write(self.out)
@@ -242,6 +262,7 @@
     @pytest.mark.skipif(string_to_longdouble_inaccurate,
                         reason="Need strtold_l")
     def test_genfromtxt(self):
+        """ """
         with temppath() as path:
             with open(path, 'wt') as f:
                 f.write(self.out)
@@ -251,6 +272,7 @@
     @pytest.mark.skipif(string_to_longdouble_inaccurate,
                         reason="Need strtold_l")
     def test_loadtxt(self):
+        """ """
         with temppath() as path:
             with open(path, 'wt') as f:
                 f.write(self.out)
@@ -260,6 +282,7 @@
     @pytest.mark.skipif(string_to_longdouble_inaccurate,
                         reason="Need strtold_l")
     def test_tofile_roundtrip(self):
+        """ """
         with temppath() as path:
             self.tgt.tofile(path, sep=" ")
             res = np.fromfile(path, dtype=np.longdouble, sep=" ")
@@ -270,6 +293,7 @@
 
 
 def test_repr_exact():
+    """ """
     o = 1 + LD_INFO.eps
     assert_(repr(o) != '1')
 
@@ -278,6 +302,7 @@
 @pytest.mark.skipif(string_to_longdouble_inaccurate,
                     reason="Need strtold_l")
 def test_format():
+    """ """
     o = 1 + LD_INFO.eps
     assert_("{0:.40g}".format(o) != '1')
 
@@ -286,6 +311,7 @@
 @pytest.mark.skipif(string_to_longdouble_inaccurate,
                     reason="Need strtold_l")
 def test_percent():
+    """ """
     o = 1 + LD_INFO.eps
     assert_("%.40g" % o != '1')
 
@@ -295,6 +321,7 @@
 @pytest.mark.skipif(string_to_longdouble_inaccurate,
                     reason="Need strtold_l")
 def test_array_repr():
+    """ """
     o = 1 + LD_INFO.eps
     a = np.array([o])
     b = np.array([1], dtype=np.longdouble)
@@ -307,37 +334,45 @@
 #
 
 class TestCommaDecimalPointLocale(CommaDecimalPointLocale):
+    """ """
 
     def test_repr_roundtrip_foreign(self):
+        """ """
         o = 1.5
         assert_equal(o, np.longdouble(repr(o)))
 
     def test_fromstring_foreign_repr(self):
+        """ """
         f = 1.234
         a = np.fromstring(repr(f), dtype=float, sep=" ")
         assert_equal(a[0], f)
 
     def test_fromstring_best_effort_float(self):
+        """ """
         with assert_warns(DeprecationWarning):
             assert_equal(np.fromstring("1,234", dtype=float, sep=" "),
                          np.array([1.]))
 
     def test_fromstring_best_effort(self):
+        """ """
         with assert_warns(DeprecationWarning):
             assert_equal(np.fromstring("1,234", dtype=np.longdouble, sep=" "),
                          np.array([1.]))
 
     def test_fromstring_foreign(self):
+        """ """
         s = "1.234"
         a = np.fromstring(s, dtype=np.longdouble, sep=" ")
         assert_equal(a[0], np.longdouble(s))
 
     def test_fromstring_foreign_sep(self):
+        """ """
         a = np.array([1, 2, 3, 4])
         b = np.fromstring("1,2,3,4,", dtype=np.longdouble, sep=",")
         assert_array_equal(a, b)
 
     def test_fromstring_foreign_value(self):
+        """ """
         with assert_warns(DeprecationWarning):
             b = np.fromstring("1,234", dtype=np.longdouble, sep=" ")
             assert_array_equal(b[0], 1)
@@ -348,6 +383,17 @@
     # and gh-9968
     2 ** 1024, 0])
 def test_longdouble_from_int(int_val):
+    """
+
+    Parameters
+    ----------
+    int_val :
+        
+
+    Returns
+    -------
+
+    """
     # for issue gh-9968
     str_val = str(int_val)
     # we'll expect a RuntimeWarning on platforms
@@ -366,4 +412,15 @@
 @pytest.mark.parametrize("bool_val", [
     True, False])
 def test_longdouble_from_bool(bool_val):
+    """
+
+    Parameters
+    ----------
+    bool_val :
+        
+
+    Returns
+    -------
+
+    """
     assert np.longdouble(bool_val) == np.longdouble(int(bool_val))
