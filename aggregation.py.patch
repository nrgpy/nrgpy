# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/aggregation.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/aggregation.py
@@ -32,39 +32,44 @@
 ) -> Tuple[
     bool, Optional[AggFuncType], Optional[List[str]], Optional[List[int]],
 ]:
-    """
-    This is the internal function to reconstruct func given if there is relabeling
+    """This is the internal function to reconstruct func given if there is relabeling
     or not and also normalize the keyword to get new order of columns.
-
+    
     If named aggregation is applied, `func` will be None, and kwargs contains the
     column and aggregation function information to be parsed;
     If named aggregation is not applied, `func` is either string (e.g. 'min') or
     Callable, or list of them (e.g. ['min', np.max]), or the dictionary of column name
     and str/Callable/list of them (e.g. {'A': 'min'}, or {'A': [np.min, lambda x: x]})
-
+    
     If relabeling is True, will return relabeling, reconstructed func, column
     names, and the reconstructed order of columns.
     If relabeling is False, the columns and order will be None.
 
     Parameters
     ----------
-    func: agg function (e.g. 'min' or Callable) or list of agg functions
+    func : agg function (e.g. 'min' or Callable) or list of agg functions
         (e.g. ['min', np.max]) or dictionary (e.g. {'A': ['min', np.max]}).
-    **kwargs: dict, kwargs used in is_multi_agg_with_relabel and
+    **kwargs : dict, kwargs used in is_multi_agg_with_relabel and
         normalize_keyword_aggregation function for relabelling
-
-    Returns
-    -------
-    relabelling: bool, if there is relabelling or not
-    func: normalized and mangled func
-    columns: list of column names
-    order: list of columns indices
+    func: Optional[AggFuncType] :
+        
+
+    Returns
+    -------
+    relabelling : bool, if there is relabelling or not
+        
+    func : normalized and mangled func
+        
+    columns : list of column names
+        
+    order : list of columns indices
+        
 
     Examples
     --------
     >>> reconstruct_func(None, **{"foo": ("col", "min")})
     (True, defaultdict(<class 'list'>, {'col': ['min']}), ('foo',), array([0]))
-
+    
     >>> reconstruct_func("min")
     (False, 'min', None, None)
     """
@@ -92,16 +97,17 @@
 
 
 def is_multi_agg_with_relabel(**kwargs) -> bool:
-    """
-    Check whether kwargs passed to .agg look like multi-agg with relabeling.
+    """Check whether kwargs passed to .agg look like multi-agg with relabeling.
 
     Parameters
     ----------
     **kwargs : dict
+        
 
     Returns
     -------
     bool
+        
 
     Examples
     --------
@@ -118,14 +124,16 @@
 
 
 def normalize_keyword_aggregation(kwargs: dict) -> Tuple[dict, List[str], List[int]]:
-    """
-    Normalize user-provided "named aggregation" kwargs.
+    """Normalize user-provided "named aggregation" kwargs.
     Transforms from the new ``Mapping[str, NamedAgg]`` style kwargs
     to the old Dict[str, List[scalar]]].
 
     Parameters
     ----------
     kwargs : dict
+        
+    kwargs: dict :
+        
 
     Returns
     -------
@@ -175,11 +183,22 @@
 def _make_unique_kwarg_list(
     seq: Sequence[Tuple[Any, Any]]
 ) -> Sequence[Tuple[Any, Any]]:
-    """
-    Uniquify aggfunc name of the pairs in the order list
-
+    """Uniquify aggfunc name of the pairs in the order list
+    
     Examples:
     --------
+
+    Parameters
+    ----------
+    seq: Sequence[Tuple[Any :
+        
+    Any]] :
+        
+
+    Returns
+    -------
+
+    
     >>> kwarg_list = [('a', '<lambda>'), ('a', '<lambda>'), ('b', '<lambda>')]
     >>> _make_unique_kwarg_list(kwarg_list)
     [('a', '<lambda>_0'), ('a', '<lambda>_1'), ('b', '<lambda>')]
@@ -200,16 +219,18 @@
 
 
 def _managle_lambda_list(aggfuncs: Sequence[Any]) -> Sequence[Any]:
-    """
-    Possibly mangle a list of aggfuncs.
+    """Possibly mangle a list of aggfuncs.
 
     Parameters
     ----------
     aggfuncs : Sequence
-
-    Returns
-    -------
-    mangled: list-like
+        
+    aggfuncs: Sequence[Any] :
+        
+
+    Returns
+    -------
+    mangled : list-like
         A new AggSpec sequence, where lambdas have been converted
         to have unique names.
 
@@ -233,8 +254,7 @@
 
 
 def maybe_mangle_lambdas(agg_spec: Any) -> Any:
-    """
-    Make new lambdas with unique names.
+    """Make new lambdas with unique names.
 
     Parameters
     ----------
@@ -243,6 +263,8 @@
         Non-dict-like `agg_spec` are pass through as is.
         For dict-like `agg_spec` a new spec is returned
         with name-mangled lambdas.
+    agg_spec: Any :
+        
 
     Returns
     -------
@@ -284,16 +306,36 @@
 ) -> Dict[Label, Series]:
     """Internal function to reorder result if relabelling is True for
     dataframe.agg, and return the reordered result in dict.
-
+    
     Parameters:
     ----------
     result: Result from aggregation
     func: Dict of (column name, funcs)
     columns: New columns name for relabelling
     order: New order for relabelling
-
+    
     Examples:
     ---------
+
+    Parameters
+    ----------
+    result: FrameOrSeriesUnion :
+        
+    func: Dict[str :
+        
+    List[Union[Callable :
+        
+    str]]] :
+        
+    columns: Tuple :
+        
+    order: List[int] :
+        
+
+    Returns
+    -------
+
+    
     >>> result = DataFrame({"A": [np.nan, 2, np.nan],
     ...       "C": [6, np.nan, np.nan], "B": [np.nan, 4, 2.5]})  # doctest: +SKIP
     >>> funcs = {"A": ["max"], "C": ["max"], "B": ["mean", "min"]}
@@ -352,13 +394,15 @@
 def validate_func_kwargs(
     kwargs: dict,
 ) -> Tuple[List[str], List[Union[str, Callable[..., Any]]]]:
-    """
-    Validates types of user-provided "named aggregation" kwargs.
+    """Validates types of user-provided "named aggregation" kwargs.
     `TypeError` is raised if aggfunc is not `str` or callable.
 
     Parameters
     ----------
     kwargs : dict
+        
+    kwargs: dict :
+        
 
     Returns
     -------
