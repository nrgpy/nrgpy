# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/formats/test_info.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/formats/test_info.py
@@ -24,11 +24,10 @@
 
 @pytest.fixture
 def datetime_frame():
-    """
-    Fixture for DataFrame of floats with DatetimeIndex
-
+    """Fixture for DataFrame of floats with DatetimeIndex
+    
     Columns are ['A', 'B', 'C', 'D']
-
+    
                        A         B         C         D
     2000-01-03 -1.122153  0.468535  0.122226  1.693711
     2000-01-04  0.189378  0.486100  0.007864 -1.216052
@@ -45,13 +44,21 @@
     2000-02-09  1.377373  0.398619  1.008453 -0.928207
     2000-02-10  0.473194 -0.636677  0.984058  0.511519
     2000-02-11 -0.965556  0.408313 -1.312844 -0.381948
-
+    
     [30 rows x 4 columns]
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     return DataFrame(tm.getTimeSeriesData())
 
 
 def test_info_categorical_column():
+    """ """
 
     # make sure it works
     n = 2500
@@ -69,6 +76,19 @@
 
 
 def test_info(float_frame, datetime_frame):
+    """
+
+    Parameters
+    ----------
+    float_frame :
+        
+    datetime_frame :
+        
+
+    Returns
+    -------
+
+    """
     io = StringIO()
     float_frame.info(buf=io)
     datetime_frame.info(buf=io)
@@ -80,6 +100,7 @@
 
 
 def test_info_verbose():
+    """ """
     buf = StringIO()
     size = 1001
     start = 5
@@ -102,6 +123,7 @@
 
 
 def test_info_memory():
+    """ """
     # https://github.com/pandas-dev/pandas/issues/21056
     df = DataFrame({"a": Series([1, 2], dtype="i8")})
     buf = StringIO()
@@ -124,6 +146,7 @@
 
 
 def test_info_wide():
+    """ """
     io = StringIO()
     df = DataFrame(np.random.randn(5, 101))
     df.info(buf=io)
@@ -142,6 +165,7 @@
 
 
 def test_info_duplicate_columns():
+    """ """
     io = StringIO()
 
     # it works!
@@ -150,6 +174,7 @@
 
 
 def test_info_duplicate_columns_shows_correct_dtypes():
+    """ """
     # GH11761
     io = StringIO()
 
@@ -162,6 +187,7 @@
 
 
 def test_info_shows_column_dtypes():
+    """ """
     dtypes = [
         "int64",
         "float64",
@@ -190,6 +216,7 @@
 
 
 def test_info_max_cols():
+    """ """
     df = DataFrame(np.random.randn(10, 5))
     for len_, verbose in [(5, None), (5, False), (12, True)]:
         # For verbose always      ^ setting  ^ summarize ^ full output
@@ -225,6 +252,7 @@
 
 
 def test_info_memory_usage():
+    """ """
     # Ensure memory usage is displayed, when asserted, on the last line
     dtypes = [
         "int64",
@@ -311,6 +339,7 @@
 
 @pytest.mark.skipif(PYPY, reason="on PyPy deep=True doesn't change result")
 def test_info_memory_usage_deep_not_pypy():
+    """ """
     df_with_object_index = DataFrame({"a": [1]}, index=["foo"])
     assert (
         df_with_object_index.memory_usage(index=True, deep=True).sum()
@@ -323,6 +352,7 @@
 
 @pytest.mark.skipif(not PYPY, reason="on PyPy deep=True does not change result")
 def test_info_memory_usage_deep_pypy():
+    """ """
     df_with_object_index = DataFrame({"a": [1]}, index=["foo"])
     assert (
         df_with_object_index.memory_usage(index=True, deep=True).sum()
@@ -335,6 +365,7 @@
 
 @pytest.mark.skipif(PYPY, reason="PyPy getsizeof() fails by design")
 def test_usage_via_getsizeof():
+    """ """
     df = DataFrame(
         data=1, index=MultiIndex.from_product([["a"], range(1000)]), columns=["A"],
     )
@@ -346,6 +377,7 @@
 
 
 def test_info_memory_usage_qualified():
+    """ """
 
     buf = StringIO()
     df = DataFrame(1, columns=list("ab"), index=[1, 2, 3])
@@ -375,10 +407,22 @@
 
 
 def test_info_memory_usage_bug_on_multiindex():
+    """ """
     # GH 14308
     # memory usage introspection should not materialize .values
 
     def memory_usage(f):
+        """
+
+        Parameters
+        ----------
+        f :
+            
+
+        Returns
+        -------
+
+        """
         return f.memory_usage(deep=True).sum()
 
     N = 100
@@ -397,6 +441,7 @@
 
 
 def test_info_categorical():
+    """ """
     # GH14298
     idx = CategoricalIndex(["a", "b"])
     df = DataFrame(np.zeros((2, 2)), index=idx, columns=idx)
@@ -407,6 +452,7 @@
 
 @pytest.mark.xfail(not IS64, reason="GH 36579: fail on 32-bit system")
 def test_info_int_columns():
+    """ """
     # GH#37245
     df = DataFrame({1: [1, 2], 2: [2, 3]}, index=["A", "B"])
     buf = StringIO()
