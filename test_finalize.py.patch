# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/generic/test_finalize.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/generic/test_finalize.py
@@ -527,6 +527,17 @@
 
 
 def idfn(x):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+
+    Returns
+    -------
+
+    """
     xpr = re.compile(r"'(.*)?'")
     m = xpr.search(str(x))
     if m:
@@ -537,13 +548,32 @@
 
 @pytest.fixture(params=_all_methods, ids=lambda x: idfn(x[-1]))
 def ndframe_method(request):
-    """
-    An NDFrame method returning an NDFrame.
+    """An NDFrame method returning an NDFrame.
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
     """
     return request.param
 
 
 def test_finalize_called(ndframe_method):
+    """
+
+    Parameters
+    ----------
+    ndframe_method :
+        
+
+    Returns
+    -------
+
+    """
     cls, init_args, method = ndframe_method
     ndframe = cls(*init_args)
 
@@ -572,6 +602,21 @@
     ],
 )
 def test_binops(args, annotate, all_arithmetic_functions):
+    """
+
+    Parameters
+    ----------
+    args :
+        
+    annotate :
+        
+    all_arithmetic_functions :
+        
+
+    Returns
+    -------
+
+    """
     # This generates 326 tests... Is that needed?
     left, right = args
     if annotate == "both" and isinstance(left, int) or isinstance(right, int):
@@ -657,6 +702,17 @@
 )
 @not_implemented_mark
 def test_string_method(method):
+    """
+
+    Parameters
+    ----------
+    method :
+        
+
+    Returns
+    -------
+
+    """
     s = pd.Series(["a1"])
     s.attrs = {"a": 1}
     result = method(s.str)
@@ -680,6 +736,17 @@
 )
 @not_implemented_mark
 def test_datetime_method(method):
+    """
+
+    Parameters
+    ----------
+    method :
+        
+
+    Returns
+    -------
+
+    """
     s = pd.Series(pd.date_range("2000", periods=4))
     s.attrs = {"a": 1}
     result = method(s.dt)
@@ -716,6 +783,17 @@
 )
 @not_implemented_mark
 def test_datetime_property(attr):
+    """
+
+    Parameters
+    ----------
+    attr :
+        
+
+    Returns
+    -------
+
+    """
     s = pd.Series(pd.date_range("2000", periods=4))
     s.attrs = {"a": 1}
     result = getattr(s.dt, attr)
@@ -727,6 +805,17 @@
 )
 @not_implemented_mark
 def test_timedelta_property(attr):
+    """
+
+    Parameters
+    ----------
+    attr :
+        
+
+    Returns
+    -------
+
+    """
     s = pd.Series(pd.timedelta_range("2000", periods=4))
     s.attrs = {"a": 1}
     result = getattr(s.dt, attr)
@@ -738,6 +827,17 @@
 )
 @not_implemented_mark
 def test_timedelta_methods(method):
+    """
+
+    Parameters
+    ----------
+    method :
+        
+
+    Returns
+    -------
+
+    """
     s = pd.Series(pd.timedelta_range("2000", periods=4))
     s.attrs = {"a": 1}
     result = method(s.dt)
@@ -760,6 +860,17 @@
 )
 @not_implemented_mark
 def test_categorical_accessor(method):
+    """
+
+    Parameters
+    ----------
+    method :
+        
+
+    Returns
+    -------
+
+    """
     s = pd.Series(["a", "b"], dtype="category")
     s.attrs = {"a": 1}
     result = method(s.cat)
@@ -777,6 +888,19 @@
     "method", [operator.methodcaller("sum"), lambda x: x.agg("sum")],
 )
 def test_groupby_finalize(obj, method):
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+    method :
+        
+
+    Returns
+    -------
+
+    """
     obj.attrs = {"a": 1}
     result = method(obj.groupby([0, 0]))
     assert result.attrs == {"a": 1}
@@ -795,6 +919,19 @@
 )
 @not_implemented_mark
 def test_groupby_finalize_not_implemented(obj, method):
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+    method :
+        
+
+    Returns
+    -------
+
+    """
     obj.attrs = {"a": 1}
     result = method(obj.groupby([0, 0]))
     assert result.attrs == {"a": 1}
