# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/testing/_private/nosetester.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/testing/_private/nosetester.py
@@ -18,19 +18,20 @@
 
 
 def get_package_name(filepath):
-    """
-    Given a path where a package is installed, determine its name.
+    """Given a path where a package is installed, determine its name.
 
     Parameters
     ----------
     filepath : str
         Path to a file. If the determination fails, "numpy" is returned.
 
+    Returns
+    -------
+
     Examples
     --------
     >>> np.testing.nosetester.get_package_name('nonsense')
     'numpy'
-
     """
 
     fullpath = filepath[:]
@@ -59,9 +60,8 @@
 
 
 def run_module_suite(file_to_run=None, argv=None):
-    """
-    Run a test module.
-
+    """Run a test module.
+    
     Equivalent to calling ``$ nosetests <argv> <file_to_run>`` from
     the command line
 
@@ -74,24 +74,26 @@
         Arguments to be passed to the nose test runner. ``argv[0]`` is
         ignored. All command line arguments accepted by ``nosetests``
         will work. If it is the default value None, sys.argv is used.
-
         .. versionadded:: 1.9.0
+
+    Returns
+    -------
 
     Examples
     --------
     Adding the following::
-
+    
         if __name__ == "__main__" :
             run_module_suite(argv=sys.argv)
-
+    
     at the end of a test module will run the tests when that module is
     called in the python interpreter.
-
+    
     Alternatively, calling::
-
+    
+    
+    from an interpreter will run all the test routine in 'test_matlib.py'.
     >>> run_module_suite(file_to_run="numpy/tests/test_matlib.py")  # doctest: +SKIP
-
-    from an interpreter will run all the test routine in 'test_matlib.py'.
     """
     if file_to_run is None:
         f = sys._getframe(1)
@@ -110,17 +112,22 @@
 
 
 class NoseTester:
-    """
-    Nose test runner.
-
+    """Nose test runner.
+    
     This class is made available as numpy.testing.Tester, and a test function
     is typically added to a package's __init__.py like so::
-
+    
       from numpy.testing import Tester
       test = Tester().test
-
+    
     Calling this test function finds and runs all tests associated with the
     package and all its sub-packages.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     Attributes
     ----------
@@ -128,28 +135,6 @@
         Full path to the package to test.
     package_name : str
         Name of the package to test.
-
-    Parameters
-    ----------
-    package : module, str or None, optional
-        The package to test. If a string, this should be the full path to
-        the package. If None (default), `package` is set to the module from
-        which `NoseTester` is initialized.
-    raise_warnings : None, str or sequence of warnings, optional
-        This specifies which warnings to configure as 'raise' instead
-        of being shown once during the test execution.  Valid strings are:
-
-          - "develop" : equals ``(Warning,)``
-          - "release" : equals ``()``, don't raise on any warnings.
-
-        Default is "release".
-    depth : int, optional
-        If `package` is None, then this can be used to initialize from the
-        module of the caller of (the caller of (...)) the code that
-        initializes `NoseTester`. Default of 0 means the module of the
-        immediate caller; higher values are useful for utility routines that
-        want to initialize `NoseTester` objects on behalf of other code.
-
     """
     def __init__(self, package=None, raise_warnings="release", depth=0,
                  check_fpu_mode=False):
@@ -193,7 +178,7 @@
         self.check_fpu_mode = check_fpu_mode
 
     def _test_argv(self, label, verbose, extra_argv):
-        ''' Generate argv for nosetest command
+        """Generate argv for nosetest command
 
         Parameters
         ----------
@@ -206,9 +191,9 @@
 
         Returns
         -------
-        argv : list
-            command line arguments that will be passed to nose
-        '''
+
+        
+        """
         argv = [__file__, self.package_path, '-s']
         if label and label != 'full':
             if not isinstance(label, str):
@@ -230,6 +215,7 @@
         return argv
 
     def _show_system_info(self):
+        """ """
         nose = import_nose()
 
         import numpy
@@ -250,27 +236,50 @@
         print("nose version %d.%d.%d" % nose.__versioninfo__)
 
     def _get_custom_doctester(self):
-        """ Return instantiated plugin for doctests
-
-        Allows subclassing of this class to override doctester
-
-        A return value of None means use the nose builtin doctest plugin
+        """
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+        type
+            Allows subclassing of this class to override doctester
+            
+            A return value of None means use the nose builtin doctest plugin
+
         """
         from .noseclasses import NumpyDoctest
         return NumpyDoctest()
 
     def prepare_test_args(self, label='fast', verbose=1, extra_argv=None,
                           doctests=False, coverage=False, timer=False):
-        """
-        Run tests for module using nose.
-
+        """Run tests for module using nose.
+        
         This method does the heavy lifting for the `test` method. It takes all
         the same arguments, for details see `test`.
+
+        Parameters
+        ----------
+        label :
+             (Default value = 'fast')
+        verbose :
+             (Default value = 1)
+        extra_argv :
+             (Default value = None)
+        doctests :
+             (Default value = False)
+        coverage :
+             (Default value = False)
+        timer :
+             (Default value = False)
+
+        Returns
+        -------
 
         See Also
         --------
         test
-
         """
         # fail with nice error message if nose is not present
         import_nose()
@@ -326,8 +335,7 @@
     def test(self, label='fast', verbose=1, extra_argv=None,
              doctests=False, coverage=False, raise_warnings=None,
              timer=False):
-        """
-        Run tests for module using nose.
+        """Run tests for module using nose.
 
         Parameters
         ----------
@@ -335,18 +343,16 @@
             Identifies the tests to run. This can be a string to pass to
             the nosetests executable with the '-A' option, or one of several
             special values.  Special values are:
-
             * 'fast' - the default - which corresponds to the ``nosetests -A``
-              option of 'not slow'.
+            option of 'not slow'.
             * 'full' - fast (as above) and slow tests as in the
-              'no -A' option to nosetests - this is the same as ''.
+            'no -A' option to nosetests - this is the same as ''.
             * None or '' - run all tests.
             * attribute_identifier - string passed directly to nosetests as '-A'.
-
         verbose : int, optional
             Verbosity value for test outputs, in the range 1-10. Default is 1.
         extra_argv : list, optional
-            List with any extra arguments to pass to nosetests.
+            List with any extra arguments to pass to nosetests. (Default value = None)
         doctests : bool, optional
             If True, run doctests in module. Default is False.
         coverage : bool, optional
@@ -356,14 +362,13 @@
         raise_warnings : None, str or sequence of warnings, optional
             This specifies which warnings to configure as 'raise' instead
             of being shown once during the test execution. Valid strings are:
-
             * "develop" : equals ``(Warning,)``
-            * "release" : equals ``()``, do not raise on any warnings.
+            * "release" : equals ``()``, do not raise on any warnings. (Default value = None)
         timer : bool or int, optional
             Timing of individual tests with ``nose-timer`` (which needs to be
             installed).  If True, time tests and report on all of them.
             If an integer (say ``N``), report timing results for ``N`` slowest
-            tests.
+            tests. (Default value = False)
 
         Returns
         -------
@@ -375,18 +380,18 @@
         -----
         Each NumPy module exposes `test` in its namespace to run all tests for it.
         For example, to run all tests for numpy.lib:
-
-        >>> np.lib.test() #doctest: +SKIP
-
+        
         Examples
         --------
+        
+        OK
+        >>> np.lib.test() #doctest: +SKIP
+        
         >>> result = np.lib.test() #doctest: +SKIP
         Running unit tests for numpy.lib
         ...
         Ran 976 tests in 3.933s
-
-        OK
-
+        
         >>> result.errors #doctest: +SKIP
         []
         >>> result.knownfail #doctest: +SKIP
@@ -463,8 +468,7 @@
         return t.result
 
     def bench(self, label='fast', verbose=1, extra_argv=None):
-        """
-        Run benchmarks for module using nose.
+        """Run benchmarks for module using nose.
 
         Parameters
         ----------
@@ -472,18 +476,16 @@
             Identifies the benchmarks to run. This can be a string to pass to
             the nosetests executable with the '-A' option, or one of several
             special values.  Special values are:
-
             * 'fast' - the default - which corresponds to the ``nosetests -A``
-              option of 'not slow'.
+            option of 'not slow'.
             * 'full' - fast (as above) and slow benchmarks as in the
-              'no -A' option to nosetests - this is the same as ''.
+            'no -A' option to nosetests - this is the same as ''.
             * None or '' - run all tests.
             * attribute_identifier - string passed directly to nosetests as '-A'.
-
         verbose : int, optional
             Verbosity value for benchmark outputs, in the range 1-10. Default is 1.
         extra_argv : list, optional
-            List with any extra arguments to pass to nosetests.
+            List with any extra arguments to pass to nosetests. (Default value = None)
 
         Returns
         -------
@@ -496,10 +498,9 @@
         Benchmarks are like tests, but have names starting with "bench" instead
         of "test", and can be found under the "benchmarks" sub-directory of the
         module.
-
+        
         Each NumPy module exposes `bench` in its namespace to run all benchmarks
         for it.
-
         Examples
         --------
         >>> success = np.lib.bench() #doctest: +SKIP
@@ -514,10 +515,9 @@
         nUnique: 56230 == 56230
         ...
         OK
-
+        
         >>> success #doctest: +SKIP
         True
-
         """
 
         print("Running benchmarks for %s" % self.package_name)
@@ -537,6 +537,7 @@
 
 
 def _numpy_tester():
+    """ """
     if hasattr(np, "__version__") and ".dev0" in np.__version__:
         mode = "develop"
     else:
