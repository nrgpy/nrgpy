# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/plotting/test_converter.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/plotting/test_converter.py
@@ -31,6 +31,7 @@
 
 
 def test_registry_mpl_resets():
+    """ """
     # Check that Matplotlib converters are properly reset (see issue #27481)
     code = (
         "import matplotlib.units as units; "
@@ -46,11 +47,14 @@
 
 
 def test_timtetonum_accepts_unicode():
+    """ """
     assert converter.time2num("00:01") == converter.time2num("00:01")
 
 
 class TestRegistration:
+    """ """
     def test_register_by_default(self):
+        """ """
         # Run in subprocess to ensure a clean state
         code = (
             "'import matplotlib.units; "
@@ -63,6 +67,7 @@
 
     @td.skip_if_no("matplotlib", min_version="3.1.3")
     def test_registering_no_warning(self):
+        """ """
         plt = pytest.importorskip("matplotlib.pyplot")
         s = Series(range(12), index=date_range("2017", periods=12))
         _, ax = plt.subplots()
@@ -72,6 +77,7 @@
         ax.plot(s.index, s.values)
 
     def test_pandas_plots_register(self):
+        """ """
         pytest.importorskip("matplotlib.pyplot")
         s = Series(range(12), index=date_range("2017", periods=12))
         # Set to the "warn" state, in case this isn't the first test run
@@ -81,6 +87,7 @@
         assert len(w) == 0
 
     def test_matplotlib_formatters(self):
+        """ """
         units = pytest.importorskip("matplotlib.units")
 
         # Can't make any assertion about the start state.
@@ -94,6 +101,7 @@
 
     @td.skip_if_no("matplotlib", min_version="3.1.3")
     def test_option_no_warning(self):
+        """ """
         pytest.importorskip("matplotlib.pyplot")
         ctx = cf.option_context("plotting.matplotlib.register_converters", False)
         plt = pytest.importorskip("matplotlib.pyplot")
@@ -110,6 +118,7 @@
             ax.plot(s.index, s.values)
 
     def test_registry_resets(self):
+        """ """
         units = pytest.importorskip("matplotlib.units")
         dates = pytest.importorskip("matplotlib.dates")
 
@@ -136,16 +145,30 @@
 
 
 class TestDateTimeConverter:
+    """ """
     def setup_method(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         self.dtc = converter.DatetimeConverter()
         self.tc = converter.TimeFormatter(None)
 
     def test_convert_accepts_unicode(self):
+        """ """
         r1 = self.dtc.convert("12:22", None, None)
         r2 = self.dtc.convert("12:22", None, None)
         assert r1 == r2, "DatetimeConverter.convert should accept unicode"
 
     def test_conversion(self):
+        """ """
         rs = self.dtc.convert(["2012-1-1"], None, None)[0]
         xp = dates.date2num(datetime(2012, 1, 1))
         assert rs == xp
@@ -199,6 +222,7 @@
         assert rs[1] == xp
 
     def test_conversion_float(self):
+        """ """
         rtol = 0.5 * 10 ** -9
 
         rs = self.dtc.convert(Timestamp("2012-1-1 01:02:03", tz="UTC"), None, None)
@@ -214,6 +238,7 @@
         tm.assert_almost_equal(rs, xp, rtol=rtol)
 
     def test_conversion_outofbounds_datetime(self):
+        """ """
         # 2579
         values = [date(1677, 1, 1), date(1677, 1, 2)]
         rs = self.dtc.convert(values, None, None)
@@ -242,11 +267,25 @@
         ],
     )
     def test_time_formatter(self, time, format_expected):
+        """
+
+        Parameters
+        ----------
+        time :
+            
+        format_expected :
+            
+
+        Returns
+        -------
+
+        """
         # issue 18478
         result = self.tc(time)
         assert result == format_expected
 
     def test_dateindex_conversion(self):
+        """ """
         rtol = 10 ** -9
 
         for freq in ("B", "L", "S"):
@@ -256,7 +295,21 @@
             tm.assert_almost_equal(rs, xp, rtol=rtol)
 
     def test_resolution(self):
+        """ """
         def _assert_less(ts1, ts2):
+            """
+
+            Parameters
+            ----------
+            ts1 :
+                
+            ts2 :
+                
+
+            Returns
+            -------
+
+            """
             val1 = self.dtc.convert(ts1, None, None)
             val2 = self.dtc.convert(ts2, None, None)
             if not val1 < val2:
@@ -270,6 +323,7 @@
         _assert_less(ts, ts + Micro(50))
 
     def test_convert_nested(self):
+        """ """
         inner = [Timestamp("2017-01-01"), Timestamp("2017-01-02")]
         data = [inner, inner]
         result = self.dtc.convert(data, None, None)
@@ -278,21 +332,36 @@
 
 
 class TestPeriodConverter:
+    """ """
     def setup_method(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         self.pc = converter.PeriodConverter()
 
         class Axis:
+            """ """
             pass
 
         self.axis = Axis()
         self.axis.freq = "D"
 
     def test_convert_accepts_unicode(self):
+        """ """
         r1 = self.pc.convert("2012-1-1", None, self.axis)
         r2 = self.pc.convert("2012-1-1", None, self.axis)
         assert r1 == r2
 
     def test_conversion(self):
+        """ """
         rs = self.pc.convert(["2012-1-1"], None, self.axis)[0]
         xp = Period("2012-1-1").ordinal
         assert rs == xp
@@ -333,12 +402,14 @@
         assert rs[0] == xp
 
     def test_integer_passthrough(self):
+        """ """
         # GH9012
         rs = self.pc.convert([0, 1], None, self.axis)
         xp = [0, 1]
         assert rs == xp
 
     def test_convert_nested(self):
+        """ """
         data = ["2012-1-1", "2012-1-2"]
         r1 = self.pc.convert([data, data], None, self.axis)
         r2 = [self.pc.convert(data, None, self.axis) for _ in range(2)]
@@ -358,6 +429,21 @@
         ],
     )
     def test_format_timedelta_ticks(self, x, decimal, format_expected):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+        decimal :
+            
+        format_expected :
+            
+
+        Returns
+        -------
+
+        """
         tdc = converter.TimeSeries_TimedeltaFormatter
         result = tdc.format_timedelta_ticks(x, pos=None, n_decimals=decimal)
         assert result == format_expected
