# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/json/test_normalize.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/json/test_normalize.py
@@ -11,6 +11,7 @@
 
 @pytest.fixture
 def deep_nested():
+    """ """
     # deeply nested data
     return [
         {
@@ -50,6 +51,7 @@
 
 @pytest.fixture
 def state_data():
+    """ """
     return [
         {
             "counties": [
@@ -75,6 +77,7 @@
 
 @pytest.fixture
 def author_missing_data():
+    """ """
     return [
         {"info": None},
         {
@@ -86,6 +89,7 @@
 
 @pytest.fixture
 def missing_metadata():
+    """ """
     return [
         {
             "name": "Alice",
@@ -115,9 +119,7 @@
 
 @pytest.fixture
 def max_level_test_input_data():
-    """
-    input data to test json_normalize with max_level param
-    """
+    """input data to test json_normalize with max_level param"""
     return [
         {
             "CreatedBy": {"Name": "User001"},
@@ -131,7 +133,9 @@
 
 
 class TestJSONNormalize:
+    """ """
     def test_simple_records(self):
+        """ """
         recs = [
             {"a": 1, "b": 2, "c": 3},
             {"a": 4, "b": 5, "c": 6},
@@ -145,6 +149,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_simple_normalize(self, state_data):
+        """
+
+        Parameters
+        ----------
+        state_data :
+            
+
+        Returns
+        -------
+
+        """
         result = json_normalize(state_data[0], "counties")
         expected = DataFrame(state_data[0]["counties"])
         tm.assert_frame_equal(result, expected)
@@ -164,11 +179,23 @@
         tm.assert_frame_equal(result, expected)
 
     def test_empty_array(self):
+        """ """
         result = json_normalize([])
         expected = DataFrame()
         tm.assert_frame_equal(result, expected)
 
     def test_simple_normalize_with_separator(self, deep_nested):
+        """
+
+        Parameters
+        ----------
+        deep_nested :
+            
+
+        Returns
+        -------
+
+        """
         # GH 14883
         result = json_normalize({"A": {"A": 1, "B": 2}})
         expected = DataFrame([[1, 2]], columns=["A.A", "A.B"])
@@ -192,12 +219,14 @@
         assert result.columns.sort_values().equals(expected)
 
     def test_value_array_record_prefix(self):
+        """ """
         # GH 21536
         result = json_normalize({"A": [1, 2]}, "A", record_prefix="Prefix.")
         expected = DataFrame([[1], [2]], columns=["Prefix.0"])
         tm.assert_frame_equal(result, expected)
 
     def test_nested_object_record_path(self):
+        """ """
         # GH 22706
         data = {
             "state": "Florida",
@@ -218,6 +247,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_more_deeply_nested(self, deep_nested):
+        """
+
+        Parameters
+        ----------
+        deep_nested :
+            
+
+        Returns
+        -------
+
+        """
 
         result = json_normalize(
             deep_nested, ["states", "cities"], meta=["country", ["states", "name"]]
@@ -249,6 +289,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_shallow_nested(self):
+        """ """
         data = [
             {
                 "state": "Florida",
@@ -285,6 +326,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_nested_meta_path_with_nested_record_path(self, state_data):
+        """
+
+        Parameters
+        ----------
+        state_data :
+            
+
+        Returns
+        -------
+
+        """
         # GH 27220
         result = json_normalize(
             data=state_data,
@@ -305,6 +357,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_meta_name_conflict(self):
+        """ """
         data = [
             {
                 "foo": "hello",
@@ -326,6 +379,7 @@
             assert val in result
 
     def test_meta_parameter_not_modified(self):
+        """ """
         # GH 18610
         data = [
             {
@@ -346,6 +400,17 @@
             assert val in result
 
     def test_record_prefix(self, state_data):
+        """
+
+        Parameters
+        ----------
+        state_data :
+            
+
+        Returns
+        -------
+
+        """
         result = json_normalize(state_data[0], "counties")
         expected = DataFrame(state_data[0]["counties"])
         tm.assert_frame_equal(result, expected)
@@ -364,6 +429,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_non_ascii_key(self):
+        """ """
         testjson = (
             b'[{"\xc3\x9cnic\xc3\xb8de":0,"sub":{"A":1, "B":2}},'
             + b'{"\xc3\x9cnic\xc3\xb8de":1,"sub":{"A":3, "B":4}}]'
@@ -380,6 +446,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_missing_field(self, author_missing_data):
+        """
+
+        Parameters
+        ----------
+        author_missing_data :
+            
+
+        Returns
+        -------
+
+        """
         # GH20030:
         result = json_normalize(author_missing_data)
         ex_data = [
@@ -443,6 +520,19 @@
         ],
     )
     def test_max_level_with_records_path(self, max_level, expected):
+        """
+
+        Parameters
+        ----------
+        max_level :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # GH23843: Enhanced JSON normalize
         test_input = [
             {
@@ -475,6 +565,7 @@
         tm.assert_equal(expected_df, result)
 
     def test_nested_flattening_consistent(self):
+        """ """
         # see gh-21537
         df1 = json_normalize([{"A": {"B": 1}}])
         df2 = json_normalize({"dummy": [{"A": {"B": 1}}]}, "dummy")
@@ -483,6 +574,17 @@
         tm.assert_frame_equal(df1, df2)
 
     def test_nonetype_record_path(self, nulls_fixture):
+        """
+
+        Parameters
+        ----------
+        nulls_fixture :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-30148
         # should not raise TypeError
         result = json_normalize(
@@ -497,6 +599,17 @@
 
     @pytest.mark.parametrize("value", ["false", "true", "{}", "1", '"text"'])
     def test_non_list_record_path_errors(self, value):
+        """
+
+        Parameters
+        ----------
+        value :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-30148, GH 26284
         parsed_value = json.loads(value)
         test_input = {"state": "Texas", "info": parsed_value}
@@ -509,6 +622,7 @@
             json_normalize([test_input], record_path=[test_path])
 
     def test_meta_non_iterable(self):
+        """ """
         # GH 31507
         data = """[{"id": 99, "data": [{"one": 1, "two": 2}]}]"""
 
@@ -520,13 +634,16 @@
 
 
 class TestNestedToRecord:
+    """ """
     def test_flat_stays_flat(self):
+        """ """
         recs = [dict(flat1=1, flat2=2), dict(flat1=3, flat2=4)]
         result = nested_to_record(recs)
         expected = recs
         assert result == expected
 
     def test_one_level_deep_flattens(self):
+        """ """
         data = dict(flat1=1, dict1=dict(c=1, d=2))
 
         result = nested_to_record(data)
@@ -535,6 +652,7 @@
         assert result == expected
 
     def test_nested_flattens(self):
+        """ """
         data = dict(flat1=1, dict1=dict(c=1, d=2), nested=dict(e=dict(c=1, d=2), d=2))
 
         result = nested_to_record(data)
@@ -550,6 +668,17 @@
         assert result == expected
 
     def test_json_normalize_errors(self, missing_metadata):
+        """
+
+        Parameters
+        ----------
+        missing_metadata :
+            
+
+        Returns
+        -------
+
+        """
         # GH14583:
         # If meta keys are not always present a new option to set
         # errors='ignore' has been implemented
@@ -564,6 +693,17 @@
             )
 
     def test_missing_meta(self, missing_metadata):
+        """
+
+        Parameters
+        ----------
+        missing_metadata :
+            
+
+        Returns
+        -------
+
+        """
         # GH25468
         # If metadata is nullable with errors set to ignore, the null values
         # should be numpy.nan values
@@ -580,6 +720,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_donot_drop_nonevalues(self):
+        """ """
         # GH21356
         data = [
             {"info": None, "author_name": {"first": "Smith", "last_name": "Appleseed"}},
@@ -606,6 +747,7 @@
         assert result == expected
 
     def test_nonetype_top_level_bottom_level(self):
+        """ """
         # GH21158: If inner level json has a key with a null value
         # make sure it does not do a new_d.pop twice and except
         data = {
@@ -638,6 +780,7 @@
         assert result == expected
 
     def test_nonetype_multiple_levels(self):
+        """ """
         # GH21158: If inner level json has a key with a null value
         # make sure it does not do a new_d.pop twice and except
         data = {
@@ -713,11 +856,27 @@
         ],
     )
     def test_with_max_level(self, max_level, expected, max_level_test_input_data):
+        """
+
+        Parameters
+        ----------
+        max_level :
+            
+        expected :
+            
+        max_level_test_input_data :
+            
+
+        Returns
+        -------
+
+        """
         # GH23843: Enhanced JSON normalize
         output = nested_to_record(max_level_test_input_data, max_level=max_level)
         assert output == expected
 
     def test_with_large_max_level(self):
+        """ """
         # GH23843: Enhanced JSON normalize
         max_level = 100
         input_data = [
@@ -755,6 +914,7 @@
         assert output == expected
 
     def test_deprecated_import(self):
+        """ """
         with tm.assert_produces_warning(FutureWarning):
             from pandas.io.json import json_normalize
 
@@ -762,6 +922,7 @@
             json_normalize(recs)
 
     def test_series_non_zero_index(self):
+        """ """
         # GH 19020
         data = {
             0: {"id": 1, "name": "Foo", "elements": {"a": 1}},
