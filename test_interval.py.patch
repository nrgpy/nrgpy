# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/interval/test_interval.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/interval/test_interval.py
@@ -25,16 +25,50 @@
 
 @pytest.fixture(scope="class", params=[None, "foo"])
 def name(request):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     return request.param
 
 
 class TestIntervalIndex:
+    """ """
     index = IntervalIndex.from_arrays([0, 1], [1, 2])
 
     def create_index(self, closed="right"):
+        """
+
+        Parameters
+        ----------
+        closed :
+             (Default value = "right")
+
+        Returns
+        -------
+
+        """
         return IntervalIndex.from_breaks(range(11), closed=closed)
 
     def create_index_with_nan(self, closed="right"):
+        """
+
+        Parameters
+        ----------
+        closed :
+             (Default value = "right")
+
+        Returns
+        -------
+
+        """
         mask = [True, False] + [True] * 8
         return IntervalIndex.from_arrays(
             np.where(mask, np.arange(10), np.nan),
@@ -43,6 +77,17 @@
         )
 
     def test_properties(self, closed):
+        """
+
+        Parameters
+        ----------
+        closed :
+            
+
+        Returns
+        -------
+
+        """
         index = self.create_index(closed=closed)
         assert len(index) == 10
         assert index.size == 10
@@ -90,6 +135,19 @@
         ],
     )
     def test_length(self, closed, breaks):
+        """
+
+        Parameters
+        ----------
+        closed :
+            
+        breaks :
+            
+
+        Returns
+        -------
+
+        """
         # GH 18789
         index = IntervalIndex.from_breaks(breaks, closed=closed)
         result = index.length
@@ -103,6 +161,17 @@
         tm.assert_index_equal(result, expected)
 
     def test_with_nans(self, closed):
+        """
+
+        Parameters
+        ----------
+        closed :
+            
+
+        Returns
+        -------
+
+        """
         index = self.create_index(closed=closed)
         assert index.hasnans is False
 
@@ -126,6 +195,17 @@
         tm.assert_numpy_array_equal(result, expected)
 
     def test_copy(self, closed):
+        """
+
+        Parameters
+        ----------
+        closed :
+            
+
+        Returns
+        -------
+
+        """
         expected = self.create_index(closed=closed)
 
         result = expected.copy()
@@ -136,6 +216,17 @@
         assert result.left is not expected.left
 
     def test_ensure_copied_data(self, closed):
+        """
+
+        Parameters
+        ----------
+        closed :
+            
+
+        Returns
+        -------
+
+        """
         # exercise the copy flag in the constructor
 
         # not copying
@@ -158,6 +249,17 @@
         )
 
     def test_delete(self, closed):
+        """
+
+        Parameters
+        ----------
+        closed :
+            
+
+        Returns
+        -------
+
+        """
         expected = IntervalIndex.from_breaks(np.arange(1, 11), closed=closed)
         result = self.create_index(closed=closed).delete(0)
         tm.assert_index_equal(result, expected)
@@ -172,6 +274,17 @@
         ],
     )
     def test_insert(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         item = data[0]
         idx_item = IntervalIndex([item])
 
@@ -210,8 +323,16 @@
             tm.assert_index_equal(result, expected)
 
     def test_is_unique_interval(self, closed):
-        """
-        Interval specific tests for is_unique in addition to base class tests
+        """Interval specific tests for is_unique in addition to base class tests
+
+        Parameters
+        ----------
+        closed :
+            
+
+        Returns
+        -------
+
         """
         # unique overlapping - distinct endpoints
         idx = IntervalIndex.from_tuples([(0, 1), (0.5, 1.5)], closed=closed)
@@ -226,6 +347,17 @@
         assert idx.is_unique is True
 
     def test_monotonic(self, closed):
+        """
+
+        Parameters
+        ----------
+        closed :
+            
+
+        Returns
+        -------
+
+        """
         # increasing non-overlapping
         idx = IntervalIndex.from_tuples([(0, 1), (2, 3), (4, 5)], closed=closed)
         assert idx.is_monotonic is True
@@ -297,6 +429,17 @@
         assert idx._is_strictly_monotonic_decreasing is True
 
     def test_get_item(self, closed):
+        """
+
+        Parameters
+        ----------
+        closed :
+            
+
+        Returns
+        -------
+
+        """
         i = IntervalIndex.from_arrays((0, 1, np.nan), (1, 2, np.nan), closed=closed)
         assert i[0] == Interval(0.0, 1.0, closed=closed)
         assert i[1] == Interval(1.0, 2.0, closed=closed)
@@ -326,6 +469,17 @@
         ids=lambda x: str(x.dtype),
     )
     def test_maybe_convert_i8(self, breaks):
+        """
+
+        Parameters
+        ----------
+        breaks :
+            
+
+        Returns
+        -------
+
+        """
         # GH 20636
         index = IntervalIndex.from_breaks(breaks)
 
@@ -360,6 +514,17 @@
         [date_range("2018-01-01", periods=5), timedelta_range("0 days", periods=5)],
     )
     def test_maybe_convert_i8_nat(self, breaks):
+        """
+
+        Parameters
+        ----------
+        breaks :
+            
+
+        Returns
+        -------
+
+        """
         # GH 20636
         index = IntervalIndex.from_breaks(breaks)
 
@@ -390,6 +555,19 @@
         ids=["IntervalIndex", "Interval", "Index", "scalar", "list"],
     )
     def test_maybe_convert_i8_numeric(self, breaks, make_key):
+        """
+
+        Parameters
+        ----------
+        breaks :
+            
+        make_key :
+            
+
+        Returns
+        -------
+
+        """
         # GH 20636
         index = IntervalIndex.from_breaks(breaks)
         key = make_key(breaks)
@@ -422,6 +600,21 @@
         ids=["IntervalIndex", "Interval", "Index", "scalar", "list"],
     )
     def test_maybe_convert_i8_errors(self, breaks1, breaks2, make_key):
+        """
+
+        Parameters
+        ----------
+        breaks1 :
+            
+        breaks2 :
+            
+        make_key :
+            
+
+        Returns
+        -------
+
+        """
         # GH 20636
         index = IntervalIndex.from_breaks(breaks1)
         key = make_key(breaks2)
@@ -435,6 +628,7 @@
             index._maybe_convert_i8(key)
 
     def test_contains_method(self):
+        """ """
         # can select values that are IN the range of a value
         i = IntervalIndex.from_arrays([0, 1], [1, 2])
 
@@ -458,6 +652,7 @@
             i.contains(Interval(0, 1))
 
     def test_contains_dunder(self):
+        """ """
 
         index = IntervalIndex.from_arrays([0, 1], [1, 2], closed="right")
 
@@ -475,6 +670,17 @@
         assert Interval(0, 1, closed="both") not in index
 
     def test_dropna(self, closed):
+        """
+
+        Parameters
+        ----------
+        closed :
+            
+
+        Returns
+        -------
+
+        """
 
         expected = IntervalIndex.from_tuples([(0.0, 1.0), (1.0, 2.0)], closed=closed)
 
@@ -487,6 +693,17 @@
         tm.assert_index_equal(result, expected)
 
     def test_non_contiguous(self, closed):
+        """
+
+        Parameters
+        ----------
+        closed :
+            
+
+        Returns
+        -------
+
+        """
         index = IntervalIndex.from_tuples([(0, 1), (2, 3)], closed=closed)
         target = [0.5, 1.5, 2.5]
         actual = index.get_indexer(target)
@@ -496,6 +713,17 @@
         assert 1.5 not in index
 
     def test_isin(self, closed):
+        """
+
+        Parameters
+        ----------
+        closed :
+            
+
+        Returns
+        -------
+
+        """
         index = self.create_index(closed=closed)
 
         expected = np.array([True] + [False] * (len(index) - 1))
@@ -523,6 +751,7 @@
             tm.assert_numpy_array_equal(result, expected)
 
     def test_comparison(self):
+        """ """
         actual = Interval(0, 1) < self.index
         expected = np.array([False, True])
         tm.assert_numpy_array_equal(actual, expected)
@@ -585,6 +814,17 @@
             self.index > np.arange(3)
 
     def test_missing_values(self, closed):
+        """
+
+        Parameters
+        ----------
+        closed :
+            
+
+        Returns
+        -------
+
+        """
         idx = Index(
             [np.nan, Interval(0, 1, closed=closed), Interval(1, 2, closed=closed)]
         )
@@ -603,6 +843,17 @@
         tm.assert_numpy_array_equal(isna(idx), np.array([True, False, False]))
 
     def test_sort_values(self, closed):
+        """
+
+        Parameters
+        ----------
+        closed :
+            
+
+        Returns
+        -------
+
+        """
         index = self.create_index(closed=closed)
 
         result = index.sort_values()
@@ -624,6 +875,17 @@
 
     @pytest.mark.parametrize("tz", [None, "US/Eastern"])
     def test_datetime(self, tz):
+        """
+
+        Parameters
+        ----------
+        tz :
+            
+
+        Returns
+        -------
+
+        """
         start = Timestamp("2000-01-01", tz=tz)
         dates = date_range(start=start, periods=10)
         index = IntervalIndex.from_breaks(dates)
@@ -665,6 +927,17 @@
         tm.assert_numpy_array_equal(actual, expected)
 
     def test_append(self, closed):
+        """
+
+        Parameters
+        ----------
+        closed :
+            
+
+        Returns
+        -------
+
+        """
 
         index1 = IntervalIndex.from_arrays([0, 1], [1, 2], closed=closed)
         index2 = IntervalIndex.from_arrays([1, 2], [2, 3], closed=closed)
@@ -688,6 +961,17 @@
                 index1.append(index_other_closed)
 
     def test_is_non_overlapping_monotonic(self, closed):
+        """
+
+        Parameters
+        ----------
+        closed :
+            
+
+        Returns
+        -------
+
+        """
         # Should be True in all cases
         tpls = [(0, 1), (2, 3), (4, 5), (6, 7)]
         idx = IntervalIndex.from_tuples(tpls, closed=closed)
@@ -729,6 +1013,23 @@
         ],
     )
     def test_is_overlapping(self, start, shift, na_value, closed):
+        """
+
+        Parameters
+        ----------
+        start :
+            
+        shift :
+            
+        na_value :
+            
+        closed :
+            
+
+        Returns
+        -------
+
+        """
         # GH 23309
         # see test_interval_tree.py for extensive tests; interface tests here
 
@@ -784,6 +1085,17 @@
         ],
     )
     def test_to_tuples(self, tuples):
+        """
+
+        Parameters
+        ----------
+        tuples :
+            
+
+        Returns
+        -------
+
+        """
         # GH 18756
         idx = IntervalIndex.from_tuples(tuples)
         result = idx.to_tuples()
@@ -812,6 +1124,19 @@
     )
     @pytest.mark.parametrize("na_tuple", [True, False])
     def test_to_tuples_na(self, tuples, na_tuple):
+        """
+
+        Parameters
+        ----------
+        tuples :
+            
+        na_tuple :
+            
+
+        Returns
+        -------
+
+        """
         # GH 18756
         idx = IntervalIndex.from_tuples(tuples)
         result = idx.to_tuples(na_tuple=na_tuple)
@@ -831,6 +1156,7 @@
             assert isna(result_na)
 
     def test_nbytes(self):
+        """ """
         # GH 19209
         left = np.arange(0, 4, dtype="i8")
         right = np.arange(1, 5, dtype="i8")
@@ -841,6 +1167,21 @@
 
     @pytest.mark.parametrize("new_closed", ["left", "right", "both", "neither"])
     def test_set_closed(self, name, closed, new_closed):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+        closed :
+            
+        new_closed :
+            
+
+        Returns
+        -------
+
+        """
         # GH 21670
         index = interval_range(0, 5, closed=closed, name=name)
         result = index.set_closed(new_closed)
@@ -849,6 +1190,17 @@
 
     @pytest.mark.parametrize("bad_closed", ["foo", 10, "LEFT", True, False])
     def test_set_closed_errors(self, bad_closed):
+        """
+
+        Parameters
+        ----------
+        bad_closed :
+            
+
+        Returns
+        -------
+
+        """
         # GH 21670
         index = interval_range(0, 5)
         msg = f"invalid option for 'closed': {bad_closed}"
@@ -856,6 +1208,7 @@
             index.set_closed(bad_closed)
 
     def test_is_all_dates(self):
+        """ """
         # GH 23576
         year_2017 = pd.Interval(
             pd.Timestamp("2017-01-01 00:00:00"), pd.Timestamp("2018-01-01 00:00:00")
@@ -865,6 +1218,17 @@
 
     @pytest.mark.parametrize("key", [[5], (2, 3)])
     def test_get_value_non_scalar_errors(self, key):
+        """
+
+        Parameters
+        ----------
+        key :
+            
+
+        Returns
+        -------
+
+        """
         # GH 31117
         idx = IntervalIndex.from_tuples([(1, 3), (2, 4), (3, 5), (7, 10), (3, 10)])
         s = pd.Series(range(len(idx)), index=idx)
@@ -876,6 +1240,17 @@
 
     @pytest.mark.parametrize("closed", ["left", "right", "both"])
     def test_pickle_round_trip_closed(self, closed):
+        """
+
+        Parameters
+        ----------
+        closed :
+            
+
+        Returns
+        -------
+
+        """
         # https://github.com/pandas-dev/pandas/issues/35658
         idx = IntervalIndex.from_tuples([(1, 2), (2, 3)], closed=closed)
         result = tm.round_trip_pickle(idx)
@@ -883,6 +1258,7 @@
 
 
 def test_dir():
+    """ """
     # GH#27571 dir(interval_index) should not raise
     index = IntervalIndex.from_arrays([0, 1], [1, 2])
     result = dir(index)
@@ -891,6 +1267,17 @@
 
 @pytest.mark.parametrize("klass", [list, np.array, pd.array, pd.Series])
 def test_searchsorted_different_argument_classes(klass):
+    """
+
+    Parameters
+    ----------
+    klass :
+        
+
+    Returns
+    -------
+
+    """
     # https://github.com/pandas-dev/pandas/issues/32762
     values = IntervalIndex([Interval(0, 1), Interval(1, 2)])
     result = values.searchsorted(klass(values))
@@ -905,6 +1292,17 @@
     "arg", [[1, 2], ["a", "b"], [pd.Timestamp("2020-01-01", tz="Europe/London")] * 2]
 )
 def test_searchsorted_invalid_argument(arg):
+    """
+
+    Parameters
+    ----------
+    arg :
+        
+
+    Returns
+    -------
+
+    """
     values = IntervalIndex([Interval(0, 1), Interval(1, 2)])
     msg = "'<' not supported between instances of 'pandas._libs.interval.Interval' and "
     with pytest.raises(TypeError, match=msg):
