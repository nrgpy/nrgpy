# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/magics/script.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/magics/script.py
@@ -25,7 +25,17 @@
 #-----------------------------------------------------------------------------
 
 def script_args(f):
-    """single decorator for adding script args"""
+    """single decorator for adding script args
+
+    Parameters
+    ----------
+    f :
+        
+
+    Returns
+    -------
+
+    """
     args = [
         magic_arguments.argument(
             '--out', type=str,
@@ -72,6 +82,13 @@
     This defines a base `%%script` cell magic for running a cell
     with a program in a subprocess, and registers a few top-level
     magics that call %%script with common interpreters.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     script_magics = List(
         help="""Extra script cell magics to define
@@ -122,18 +139,42 @@
         self.kill_bg_processes()
     
     def _generate_script_magics(self):
+        """ """
         cell_magics = self.magics['cell']
         for name in self.script_magics:
             cell_magics[name] = self._make_script_magic(name)
     
     def _make_script_magic(self, name):
-        """make a named magic, that calls %%script with a particular program"""
+        """make a named magic, that calls %%script with a particular program
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         # expand to explicit path if necessary:
         script = self.script_paths.get(name, name)
         
         @magic_arguments.magic_arguments()
         @script_args
         def named_script_magic(line, cell):
+            """
+
+            Parameters
+            ----------
+            line :
+                
+            cell :
+                
+
+            Returns
+            -------
+
+            """
             # if line, add it as cl-flags
             if line:
                  line = "%s %s" % (script, line)
@@ -162,7 +203,17 @@
         specifying a program (bash, perl, ruby, etc.) with which to run.
         
         The rest of the cell is run by that program.
-        
+
+        Parameters
+        ----------
+        line :
+            
+        cell :
+            
+
+        Returns
+        -------
+
         Examples
         --------
         ::
@@ -245,7 +296,21 @@
             raise CalledProcessError(p.returncode, cell, output=out, stderr=err)
     
     def _run_script(self, p, cell, to_close):
-        """callback for running the script in the background"""
+        """callback for running the script in the background
+
+        Parameters
+        ----------
+        p :
+            
+        cell :
+            
+        to_close :
+            
+
+        Returns
+        -------
+
+        """
         p.stdin.write(cell)
         p.stdin.close()
         for s in to_close:
@@ -254,7 +319,17 @@
 
     @line_magic("killbgscripts")
     def killbgscripts(self, _nouse_=''):
-        """Kill all BG processes started by %%script and its family."""
+        """Kill all BG processes started by %%script and its family.
+
+        Parameters
+        ----------
+        _nouse_ :
+             (Default value = '')
+
+        Returns
+        -------
+
+        """
         self.kill_bg_processes()
         print("All background processes were killed.")
 
@@ -291,4 +366,5 @@
         self._gc_bg_processes()
 
     def _gc_bg_processes(self):
+        """ """
         self.bg_processes = [p for p in self.bg_processes if p.poll() is None]
