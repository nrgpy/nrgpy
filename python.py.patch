# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pygments/lexers/python.py
+++ b/..//venv/lib/python3.8/site-packages/pygments/lexers/python.py
@@ -26,14 +26,20 @@
 
 
 class PythonLexer(RegexLexer):
-    """
-    For `Python <http://www.python.org>`_ source code (version 3.x).
-
+    """For `Python <http://www.python.org>`_ source code (version 3.x).
+    
     .. versionadded:: 0.10
-
+    
     .. versionchanged:: 2.5
        This is now the default ``PythonLexer``.  It is still available as the
        alias ``Python3Lexer``.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Python'
@@ -66,6 +72,17 @@
     uni_name = "[%s][%s]*" % (uni.xid_start, uni.xid_continue)
 
     def innerstring_rules(ttype):
+        """
+
+        Parameters
+        ----------
+        ttype :
+            
+
+        Returns
+        -------
+
+        """
         return [
             # the old style '%s' % (...) string formatting (still valid in Py3)
             (r'%(\(\w+\))?[-#0 +]*([0-9]+|[*])?(\.([0-9]+|[*]))?'
@@ -86,6 +103,17 @@
         ]
 
     def fstring_rules(ttype):
+        """
+
+        Parameters
+        ----------
+        ttype :
+            
+
+        Returns
+        -------
+
+        """
         return [
             # Assuming that a '}' is the closing brace after format specifier.
             # Sadly, this means that we won't detect syntax error. But it's
@@ -372,6 +400,17 @@
     }
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         return shebang_matches(text, r'pythonw?(3(\.\d)?)?')
 
 
@@ -379,13 +418,19 @@
 
 
 class Python2Lexer(RegexLexer):
-    """
-    For `Python 2.x <http://www.python.org>`_ source code.
-
+    """For `Python 2.x <http://www.python.org>`_ source code.
+    
     .. versionchanged:: 2.5
        This class has been renamed from ``PythonLexer``.  ``PythonLexer`` now
        refers to the Python 3 variant.  File name patterns like ``*.py`` have
        been moved to Python 3 as well.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Python 2.x'
@@ -394,6 +439,17 @@
     mimetypes = ['text/x-python2', 'application/x-python2']
 
     def innerstring_rules(ttype):
+        """
+
+        Parameters
+        ----------
+        ttype :
+            
+
+        Returns
+        -------
+
+        """
         return [
             # the old style '%s' % (...) string formatting
             (r'%(\(\w+\))?[-#0 +]*([0-9]+|[*])?(\.([0-9]+|[*]))?'
@@ -596,32 +652,49 @@
     }
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         return shebang_matches(text, r'pythonw?2(\.\d)?') or \
             'import ' in text[:1000]
 
 
 class PythonConsoleLexer(Lexer):
-    """
-    For Python console output or doctests, such as:
-
+    """For Python console output or doctests, such as:
+    
     .. sourcecode:: pycon
-
-        >>> a = 'foo'
+    
+    
+    Additional options:
+    
+    `python3`
+        Use Python 3 lexer for code.  Default is ``True``.
+    
+        .. versionadded:: 1.0
+        .. versionchanged:: 2.5
+           Now defaults to ``True``.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    >>> a = 'foo'
         >>> print a
         foo
         >>> 1 / 0
         Traceback (most recent call last):
           File "<stdin>", line 1, in <module>
         ZeroDivisionError: integer division or modulo by zero
-
-    Additional options:
-
-    `python3`
-        Use Python 3 lexer for code.  Default is ``True``.
-
-        .. versionadded:: 1.0
-        .. versionchanged:: 2.5
-           Now defaults to ``True``.
     """
     name = 'Python console session'
     aliases = ['pycon']
@@ -632,6 +705,17 @@
         Lexer.__init__(self, **options)
 
     def get_tokens_unprocessed(self, text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         if self.python3:
             pylexer = PythonLexer(**self.options)
             tblexer = PythonTracebackLexer(**self.options)
@@ -689,14 +773,20 @@
 
 
 class PythonTracebackLexer(RegexLexer):
-    """
-    For Python 3.x tracebacks, with support for chained exceptions.
-
+    """For Python 3.x tracebacks, with support for chained exceptions.
+    
     .. versionadded:: 1.0
-
+    
     .. versionchanged:: 2.5
        This is now the default ``PythonTracebackLexer``.  It is still available
        as the alias ``Python3TracebackLexer``.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Python Traceback'
@@ -736,14 +826,20 @@
 
 
 class Python2TracebackLexer(RegexLexer):
-    """
-    For Python tracebacks.
-
+    """For Python tracebacks.
+    
     .. versionadded:: 0.7
-
+    
     .. versionchanged:: 2.5
        This class has been renamed from ``PythonTracebackLexer``.
        ``PythonTracebackLexer`` now refers to the Python 3 variant.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Python 2.x Traceback'
@@ -779,10 +875,16 @@
 
 
 class CythonLexer(RegexLexer):
-    """
-    For Pyrex and `Cython <http://cython.org>`_ source code.
-
+    """For Pyrex and `Cython <http://cython.org>`_ source code.
+    
     .. versionadded:: 1.1
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Cython'
@@ -958,12 +1060,18 @@
 
 
 class DgLexer(RegexLexer):
-    """
-    Lexer for `dg <http://pyos.github.com/dg>`_,
+    """Lexer for `dg <http://pyos.github.com/dg>`_,
     a functional and object-oriented programming language
     running on the CPython 3 VM.
-
+    
     .. versionadded:: 1.6
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'dg'
     aliases = ['dg']
@@ -1057,10 +1165,16 @@
 
 
 class NumPyLexer(PythonLexer):
-    """
-    A Python lexer recognizing Numerical Python builtins.
-
+    """A Python lexer recognizing Numerical Python builtins.
+    
     .. versionadded:: 0.10
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'NumPy'
@@ -1138,6 +1252,17 @@
     }
 
     def get_tokens_unprocessed(self, text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         for index, token, value in \
                 PythonLexer.get_tokens_unprocessed(self, text):
             if token is Name and value in self.EXTRA_KEYWORDS:
@@ -1146,6 +1271,17 @@
                 yield index, token, value
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         return (shebang_matches(text, r'pythonw?(3(\.\d)?)?') or
                 'import ' in text[:1000]) \
             and ('import numpy' in text or 'from numpy import' in text)
