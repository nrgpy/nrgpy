# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jsonschema/tests/_suite.py
+++ b/..//venv/lib/python3.8/site-packages/jsonschema/tests/_suite.py
@@ -19,6 +19,7 @@
 
 
 def _find_suite():
+    """ """
     root = os.environ.get("JSON_SCHEMA_TEST_SUITE")
     if root is not None:
         return FilePath(root)
@@ -38,10 +39,12 @@
 
 @attr.s(hash=True)
 class Suite(object):
+    """ """
 
     _root = attr.ib(default=attr.Factory(_find_suite))
 
     def _remotes(self):
+        """ """
         jsonschema_suite = self._root.descendant(["bin", "jsonschema_suite"])
         remotes = subprocess.check_output(
             [sys.executable, jsonschema_suite.path, "remotes"],
@@ -52,10 +55,32 @@
         }
 
     def benchmark(self, runner):  # pragma: no cover
+        """
+
+        Parameters
+        ----------
+        runner :
+            
+
+        Returns
+        -------
+
+        """
         for name in validators:
             self.version(name=name).benchmark(runner=runner)
 
     def version(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         return Version(
             name=name,
             path=self._root.descendant(["tests", name]),
@@ -65,6 +90,7 @@
 
 @attr.s(hash=True)
 class Version(object):
+    """ """
 
     _path = attr.ib()
     _remotes = attr.ib()
@@ -72,6 +98,19 @@
     name = attr.ib()
 
     def benchmark(self, runner, **kwargs):  # pragma: no cover
+        """
+
+        Parameters
+        ----------
+        runner :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         for suite in self.tests():
             for test in suite:
                 runner.bench_func(
@@ -80,6 +119,7 @@
                 )
 
     def tests(self):
+        """ """
         return (
             test
             for child in self._path.globChildren("*.json")
@@ -90,6 +130,7 @@
         )
 
     def format_tests(self):
+        """ """
         path = self._path.descendant(["optional", "format"])
         return (
             test
@@ -101,18 +142,53 @@
         )
 
     def tests_of(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         return self._tests_in(
             subject=name,
             path=self._path.child(name + ".json"),
         )
 
     def optional_tests_of(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         return self._tests_in(
             subject=name,
             path=self._path.descendant(["optional", name + ".json"]),
         )
 
     def to_unittest_testcase(self, *suites, **kwargs):
+        """
+
+        Parameters
+        ----------
+        *suites :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         name = kwargs.pop("name", "Test" + self.name.title())
         methods = {
             test.method_name: test.to_unittest_method(**kwargs)
@@ -133,6 +209,19 @@
         return cls
 
     def _tests_in(self, subject, path):
+        """
+
+        Parameters
+        ----------
+        subject :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         for each in json.loads(path.getContent().decode("utf-8")):
             yield (
                 _Test(
@@ -148,6 +237,7 @@
 
 @attr.s(hash=True, repr=False)
 class _Test(object):
+    """ """
 
     version = attr.ib()
 
@@ -167,6 +257,7 @@
 
     @property
     def fully_qualified_name(self):  # pragma: no cover
+        """ """
         return " > ".join(
             [
                 self.version.name,
@@ -178,6 +269,7 @@
 
     @property
     def method_name(self):
+        """ """
         delimiters = r"[\W\- ]+"
         name = "test_%s_%s_%s" % (
             re.sub(delimiters, "_", self.subject),
@@ -190,11 +282,46 @@
         return name
 
     def to_unittest_method(self, skip=lambda test: None, **kwargs):
+        """
+
+        Parameters
+        ----------
+        skip :
+             (Default value = lambda test: None)
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         if self.valid:
             def fn(this):
+                """
+
+                Parameters
+                ----------
+                this :
+                    
+
+                Returns
+                -------
+
+                """
                 self.validate(**kwargs)
         else:
             def fn(this):
+                """
+
+                Parameters
+                ----------
+                this :
+                    
+
+                Returns
+                -------
+
+                """
                 with this.assertRaises(jsonschema.ValidationError):
                     self.validate(**kwargs)
 
@@ -203,6 +330,19 @@
         return unittest.skipIf(reason is not None, reason)(fn)
 
     def validate(self, Validator, **kwargs):
+        """
+
+        Parameters
+        ----------
+        Validator :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         resolver = jsonschema.RefResolver.from_schema(
             schema=self.schema,
             store=self._remotes,
@@ -217,6 +357,17 @@
         )
 
     def validate_ignoring_errors(self, Validator):  # pragma: no cover
+        """
+
+        Parameters
+        ----------
+        Validator :
+            
+
+        Returns
+        -------
+
+        """
         try:
             self.validate(Validator=Validator)
         except jsonschema.ValidationError:
@@ -224,16 +375,22 @@
 
 
 def _someone_save_us_the_module_of_the_caller():
-    """
-    The FQON of the module 2nd stack frames up from here.
-
+    """The FQON of the module 2nd stack frames up from here.
+    
     This is intended to allow us to dynamicallly return test case classes that
     are indistinguishable from being defined in the module that wants them.
-
+    
     Otherwise, trial will mis-print the FQON, and copy pasting it won't re-run
     the class that really is running.
-
+    
     Save us all, this is all so so so so so terrible.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     return sys._getframe(2).f_globals["__name__"]
