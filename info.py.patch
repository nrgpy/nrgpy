# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/io/formats/info.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/io/formats/info.py
@@ -16,8 +16,7 @@
 
 
 def _put_str(s: Union[str, Dtype], space: int) -> str:
-    """
-    Make string of specified length, padding to the right if necessary.
+    """Make string of specified length, padding to the right if necessary.
 
     Parameters
     ----------
@@ -25,6 +24,12 @@
         String to be formatted.
     space : int
         Length to force string to be of.
+    s: Union[str :
+        
+    Dtype] :
+        
+    space: int :
+        
 
     Returns
     -------
@@ -42,8 +47,7 @@
 
 
 def _sizeof_fmt(num: Union[int, float], size_qualifier: str) -> str:
-    """
-    Return size in human readable format.
+    """Return size in human readable format.
 
     Parameters
     ----------
@@ -51,6 +55,12 @@
         Size in bytes.
     size_qualifier : str
         Either empty, or '+' (if lower bound).
+    num: Union[int :
+        
+    float] :
+        
+    size_qualifier: str :
+        
 
     Returns
     -------
@@ -61,7 +71,7 @@
     --------
     >>> _sizeof_fmt(23028, '')
     '22.5 KB'
-
+    
     >>> _sizeof_fmt(23028, '+')
     '22.5+ KB'
     """
@@ -73,6 +83,7 @@
 
 
 class BaseInfo(metaclass=ABCMeta):
+    """ """
     def __init__(
         self,
         data: FrameOrSeries,
@@ -96,8 +107,7 @@
 
     @abstractmethod
     def _get_mem_usage(self, deep: bool) -> int:
-        """
-        Get memory usage in bytes.
+        """Get memory usage in bytes.
 
         Parameters
         ----------
@@ -105,66 +115,66 @@
             If True, introspect the data deeply by interrogating object dtypes
             for system-level memory consumption, and include it in the returned
             values.
-
-        Returns
-        -------
-        mem_usage : int
-            Object's total memory usage in bytes.
+        deep: bool :
+            
+
+        Returns
+        -------
+
+        
         """
         pass
 
     @abstractmethod
     def _get_ids_and_dtypes(self) -> Tuple["Index", "Series"]:
-        """
-        Get column names and dtypes.
-
-        Returns
-        -------
-        ids : Index
-            DataFrame's column names.
-        dtypes : Series
-            Dtype of each of the DataFrame's columns.
-        """
+        """Get column names and dtypes."""
         pass
 
     @abstractmethod
     def _verbose_repr(
         self, lines: List[str], ids: "Index", dtypes: "Series", show_counts: bool
     ) -> None:
-        """
-        Append name, non-null count (optional), and dtype for each column to `lines`.
-
-        Parameters
-        ----------
-        lines : List[str]
-            Lines that will contain `info` representation.
-        ids : Index
-            The DataFrame's column names.
-        dtypes : Series
-            The DataFrame's columns' dtypes.
-        show_counts : bool
-            If True, count of non-NA cells for each column will be appended to `lines`.
+        """Append name, non-null count (optional), and dtype for each column to `lines`.
+
+        Parameters
+        ----------
+        lines: List[str] :
+            
+        ids: "Index" :
+            
+        dtypes: "Series" :
+            
+        show_counts: bool :
+            
+
+        Returns
+        -------
+
+        
         """
         pass
 
     @abstractmethod
     def _non_verbose_repr(self, lines: List[str], ids: "Index") -> None:
-        """
-        Append short summary of columns' names to `lines`.
-
-        Parameters
-        ----------
-        lines : List[str]
-            Lines that will contain `info` representation.
-        ids : Index
-            The DataFrame's column names.
+        """Append short summary of columns' names to `lines`.
+
+        Parameters
+        ----------
+        lines: List[str] :
+            
+        ids: "Index" :
+            
+
+        Returns
+        -------
+
+        
         """
         pass
 
     def info(self) -> None:
-        """
-        Print a concise summary of a %(klass)s.
-
+        """Print a concise summary of a %(klass)s.
+        
         This method prints information about a %(klass)s including
         the index dtype%(type_sub)s, non-null values and memory usage.
 
@@ -179,12 +189,12 @@
             Where to send the output. By default, the output is printed to
             sys.stdout. Pass a writable buffer if you need to further process
             the output.
-        %(max_cols_sub)s
+        %(max_cols_sub)s :
+            
         memory_usage : bool, str, optional
             Specifies whether total memory usage of the %(klass)s
             elements (including the index) should be displayed. By default,
             this follows the ``pandas.options.display.memory_usage`` setting.
-
             True always show memory usage. False never shows memory usage.
             A value of 'deep' is equivalent to "True with deep introspection".
             Memory usage is shown in human-readable units (base-2
@@ -208,7 +218,6 @@
         See Also
         --------
         %(see_also_sub)s
-
         Examples
         --------
         %(examples_sub)s
@@ -272,15 +281,45 @@
 
 
 class DataFrameInfo(BaseInfo):
+    """ """
     def _get_mem_usage(self, deep: bool) -> int:
+        """
+
+        Parameters
+        ----------
+        deep: bool :
+            
+
+        Returns
+        -------
+
+        """
         return self.data.memory_usage(index=True, deep=deep).sum()
 
     def _get_ids_and_dtypes(self) -> Tuple["Index", "Series"]:
+        """ """
         return self.data.columns, self.data.dtypes
 
     def _verbose_repr(
         self, lines: List[str], ids: "Index", dtypes: "Series", show_counts: bool
     ) -> None:
+        """
+
+        Parameters
+        ----------
+        lines: List[str] :
+            
+        ids: "Index" :
+            
+        dtypes: "Series" :
+            
+        show_counts: bool :
+            
+
+        Returns
+        -------
+
+        """
         col_count = len(ids)
         lines.append(f"Data columns (total {col_count} columns):")
 
@@ -348,4 +387,17 @@
             )
 
     def _non_verbose_repr(self, lines: List[str], ids: "Index") -> None:
+        """
+
+        Parameters
+        ----------
+        lines: List[str] :
+            
+        ids: "Index" :
+            
+
+        Returns
+        -------
+
+        """
         lines.append(ids._summary(name="Columns"))
