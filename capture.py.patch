# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/utils/capture.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/utils/capture.py
@@ -14,6 +14,7 @@
 
 
 class RichOutput(object):
+    """ """
     def __init__(self, data=None, metadata=None, transient=None, update=False):
         self.data = data or {}
         self.metadata = metadata or {}
@@ -21,11 +22,23 @@
         self.update = update
 
     def display(self):
+        """ """
         from IPython.display import publish_display_data
         publish_display_data(data=self.data, metadata=self.metadata,
                              transient=self.transient, update=self.update)
 
     def _repr_mime_(self, mime):
+        """
+
+        Parameters
+        ----------
+        mime :
+            
+
+        Returns
+        -------
+
+        """
         if mime not in self.data:
             return
         data = self.data[mime]
@@ -35,41 +48,68 @@
             return data
 
     def _repr_mimebundle_(self, include=None, exclude=None):
+        """
+
+        Parameters
+        ----------
+        include :
+             (Default value = None)
+        exclude :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         return self.data, self.metadata
 
     def _repr_html_(self):
+        """ """
         return self._repr_mime_("text/html")
 
     def _repr_latex_(self):
+        """ """
         return self._repr_mime_("text/latex")
 
     def _repr_json_(self):
+        """ """
         return self._repr_mime_("application/json")
 
     def _repr_javascript_(self):
+        """ """
         return self._repr_mime_("application/javascript")
 
     def _repr_png_(self):
+        """ """
         return self._repr_mime_("image/png")
 
     def _repr_jpeg_(self):
+        """ """
         return self._repr_mime_("image/jpeg")
 
     def _repr_svg_(self):
+        """ """
         return self._repr_mime_("image/svg+xml")
 
 
 class CapturedIO(object):
     """Simple object for containing captured stdout/err and rich display StringIO objects
-
+    
     Each instance `c` has three attributes:
-
+    
     - ``c.stdout`` : standard output as a string
     - ``c.stderr`` : standard error as a string
     - ``c.outputs``: a list of rich display outputs
-
+    
     Additionally, there's a ``c.show()`` method which will print all of the
     above in the same order, and can be invoked simply via ``c()``.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, stdout, stderr, outputs=None):
@@ -84,6 +124,7 @@
 
     @property
     def stdout(self):
+        """ """
         "Captured standard output"
         if not self._stdout:
             return ''
@@ -91,6 +132,7 @@
 
     @property
     def stderr(self):
+        """ """
         "Captured standard error"
         if not self._stderr:
             return ''
@@ -99,13 +141,20 @@
     @property
     def outputs(self):
         """A list of the captured rich display outputs, if any.
-
+        
         If you have a CapturedIO object ``c``, these can be displayed in IPython
         using::
-
+        
             from IPython.display import display
             for o in c.outputs:
                 display(o)
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         return [ RichOutput(**kargs) for kargs in self._outputs ]
 
