# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/random/tests/test_generator_mt19937.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/random/tests/test_generator_mt19937.py
@@ -37,17 +37,31 @@
 
 @pytest.fixture(scope='module', params=[True, False])
 def endpoint(request):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     return request.param
 
 
 class TestSeed:
+    """ """
     def test_scalar(self):
+        """ """
         s = Generator(MT19937(0))
         assert_equal(s.integers(1000), 479)
         s = Generator(MT19937(4294967295))
         assert_equal(s.integers(1000), 324)
 
     def test_array(self):
+        """ """
         s = Generator(MT19937(range(10)))
         assert_equal(s.integers(1000), 465)
         s = Generator(MT19937(np.arange(10)))
@@ -58,26 +72,32 @@
         assert_equal(s.integers(1000), 324)
 
     def test_seedsequence(self):
+        """ """
         s = MT19937(SeedSequence(0))
         assert_equal(s.random_raw(1), 2058676884)
 
     def test_invalid_scalar(self):
+        """ """
         # seed must be an unsigned 32 bit integer
         assert_raises(TypeError, MT19937, -0.5)
         assert_raises(ValueError, MT19937, -1)
 
     def test_invalid_array(self):
+        """ """
         # seed must be an unsigned integer
         assert_raises(TypeError, MT19937, [-0.5])
         assert_raises(ValueError, MT19937, [-1])
         assert_raises(ValueError, MT19937, [1, -2, 4294967296])
 
     def test_noninstantized_bitgen(self):
+        """ """
         assert_raises(ValueError, Generator, MT19937)
 
 
 class TestBinomial:
+    """ """
     def test_n_zero(self):
+        """ """
         # Tests the corner case of n == 0 for the binomial distribution.
         # binomial(0, p) should be zero for any p in [0, 1].
         # This test addresses issue #3480.
@@ -87,24 +107,30 @@
             assert_array_equal(random.binomial(zeros, p), zeros)
 
     def test_p_is_nan(self):
+        """ """
         # Issue #4571.
         assert_raises(ValueError, random.binomial, 1, np.nan)
 
 
 class TestMultinomial:
+    """ """
     def test_basic(self):
+        """ """
         random.multinomial(100, [0.2, 0.8])
 
     def test_zero_probability(self):
+        """ """
         random.multinomial(100, [0.2, 0.8, 0.0, 0.0, 0.0])
 
     def test_int_negative_interval(self):
+        """ """
         assert_(-5 <= random.integers(-5, -1) < -1)
         x = random.integers(-5, -1, 5)
         assert_(np.all(-5 <= x))
         assert_(np.all(x < -1))
 
     def test_size(self):
+        """ """
         # gh-3173
         p = [0.5, 0.5]
         assert_equal(random.multinomial(1, p, np.uint32(1)).shape, (1, 2))
@@ -119,14 +145,17 @@
                       float(1))
 
     def test_invalid_prob(self):
+        """ """
         assert_raises(ValueError, random.multinomial, 100, [1.1, 0.2])
         assert_raises(ValueError, random.multinomial, 100, [-.1, 0.9])
 
     def test_invalid_n(self):
+        """ """
         assert_raises(ValueError, random.multinomial, -1, [0.8, 0.2])
         assert_raises(ValueError, random.multinomial, [-1] * 10, [0.8, 0.2])
 
     def test_p_non_contiguous(self):
+        """ """
         p = np.arange(15.)
         p /= np.sum(p[1::3])
         pvals = p[1::3]
@@ -137,6 +166,7 @@
         assert_array_equal(non_contig, contig)
 
     def test_multidimensional_pvals(self):
+        """ """
         assert_raises(ValueError, random.multinomial, 10, [[0, 1]])
         assert_raises(ValueError, random.multinomial, 10, [[0], [1]])
         assert_raises(ValueError, random.multinomial, 10, [[[0], [1]], [[1], [0]]])
@@ -144,11 +174,14 @@
 
 
 class TestMultivariateHypergeometric:
+    """ """
 
     def setup(self):
+        """ """
         self.seed = 8675309
 
     def test_argument_validation(self):
+        """ """
         # Error cases...
 
         # `colors` must be a 1-d sequence
@@ -183,6 +216,17 @@
 
     @pytest.mark.parametrize('method', ['count', 'marginals'])
     def test_edge_cases(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         # Set the seed, but in fact, all the results in this test are
         # deterministic, so we don't really need this.
         random = Generator(MT19937(self.seed))
@@ -220,6 +264,21 @@
     @pytest.mark.parametrize('method', ['count', 'marginals'])
     @pytest.mark.parametrize('size', [5, (2, 3), 150000])
     def test_typical_cases(self, nsample, method, size):
+        """
+
+        Parameters
+        ----------
+        nsample :
+            
+        method :
+            
+        size :
+            
+
+        Returns
+        -------
+
+        """
         random = Generator(MT19937(self.seed))
 
         colors = np.array([10, 5, 20, 25])
@@ -242,6 +301,7 @@
                             rtol=1e-3, atol=0.005)
 
     def test_repeatability1(self):
+        """ """
         random = Generator(MT19937(self.seed))
         sample = random.multivariate_hypergeometric([3, 4, 5], 5, size=5,
                                                     method='count')
@@ -253,6 +313,7 @@
         assert_array_equal(sample, expected)
 
     def test_repeatability2(self):
+        """ """
         random = Generator(MT19937(self.seed))
         sample = random.multivariate_hypergeometric([20, 30, 50], 50,
                                                     size=5,
@@ -265,6 +326,7 @@
         assert_array_equal(sample, expected)
 
     def test_repeatability3(self):
+        """ """
         random = Generator(MT19937(self.seed))
         sample = random.multivariate_hypergeometric([20, 30, 50], 12,
                                                     size=5,
@@ -278,7 +340,9 @@
 
 
 class TestSetState:
+    """ """
     def setup(self):
+        """ """
         self.seed = 1234567890
         self.rg = Generator(MT19937(self.seed))
         self.bit_generator = self.rg.bit_generator
@@ -288,6 +352,7 @@
                              self.state['state']['pos'])
 
     def test_gaussian_reset(self):
+        """ """
         # Make sure the cached every-other-Gaussian is reset.
         old = self.rg.standard_normal(size=3)
         self.bit_generator.state = self.state
@@ -295,6 +360,7 @@
         assert_(np.all(old == new))
 
     def test_gaussian_reset_in_media_res(self):
+        """ """
         # When the state is saved with a cached Gaussian, make sure the
         # cached Gaussian is restored.
 
@@ -306,12 +372,14 @@
         assert_(np.all(old == new))
 
     def test_negative_binomial(self):
+        """ """
         # Ensure that the negative binomial results take floating point
         # arguments without truncation.
         self.rg.negative_binomial(0.5, 0.5)
 
 
 class TestIntegers:
+    """ """
     rfunc = random.integers
 
     # valid integer/boolean types
@@ -319,9 +387,31 @@
              np.int32, np.uint32, np.int64, np.uint64]
 
     def test_unsupported_type(self, endpoint):
+        """
+
+        Parameters
+        ----------
+        endpoint :
+            
+
+        Returns
+        -------
+
+        """
         assert_raises(TypeError, self.rfunc, 1, endpoint=endpoint, dtype=float)
 
     def test_bounds_checking(self, endpoint):
+        """
+
+        Parameters
+        ----------
+        endpoint :
+            
+
+        Returns
+        -------
+
+        """
         for dt in self.itype:
             lbnd = 0 if dt is bool else np.iinfo(dt).min
             ubnd = 2 if dt is bool else np.iinfo(dt).max + 1
@@ -345,6 +435,17 @@
                           endpoint=endpoint, dtype=dt)
 
     def test_bounds_checking_array(self, endpoint):
+        """
+
+        Parameters
+        ----------
+        endpoint :
+            
+
+        Returns
+        -------
+
+        """
         for dt in self.itype:
             lbnd = 0 if dt is bool else np.iinfo(dt).min
             ubnd = 2 if dt is bool else np.iinfo(dt).max + (not endpoint)
@@ -359,6 +460,17 @@
                           endpoint=endpoint, dtype=dt)
 
     def test_rng_zero_and_extremes(self, endpoint):
+        """
+
+        Parameters
+        ----------
+        endpoint :
+            
+
+        Returns
+        -------
+
+        """
         for dt in self.itype:
             lbnd = 0 if dt is bool else np.iinfo(dt).min
             ubnd = 2 if dt is bool else np.iinfo(dt).max + 1
@@ -385,6 +497,17 @@
                          tgt)
 
     def test_rng_zero_and_extremes_array(self, endpoint):
+        """
+
+        Parameters
+        ----------
+        endpoint :
+            
+
+        Returns
+        -------
+
+        """
         size = 1000
         for dt in self.itype:
             lbnd = 0 if dt is bool else np.iinfo(dt).min
@@ -416,6 +539,17 @@
                 [tgt] * size, [tgt + 1] * size, size=size, dtype=dt), tgt)
 
     def test_full_range(self, endpoint):
+        """
+
+        Parameters
+        ----------
+        endpoint :
+            
+
+        Returns
+        -------
+
+        """
         # Test for ticket #1690
 
         for dt in self.itype:
@@ -431,6 +565,17 @@
                                      "message:\n\n%s" % str(e))
 
     def test_full_range_array(self, endpoint):
+        """
+
+        Parameters
+        ----------
+        endpoint :
+            
+
+        Returns
+        -------
+
+        """
         # Test for ticket #1690
 
         for dt in self.itype:
@@ -446,6 +591,17 @@
                                      "message:\n\n%s" % str(e))
 
     def test_in_bounds_fuzz(self, endpoint):
+        """
+
+        Parameters
+        ----------
+        endpoint :
+            
+
+        Returns
+        -------
+
+        """
         # Don't use fixed seed
         random = Generator(MT19937())
 
@@ -462,6 +618,17 @@
         assert_(vals.min() >= 0)
 
     def test_scalar_array_equiv(self, endpoint):
+        """
+
+        Parameters
+        ----------
+        endpoint :
+            
+
+        Returns
+        -------
+
+        """
         for dt in self.itype:
             lbnd = 0 if dt is bool else np.iinfo(dt).min
             ubnd = 2 if dt is bool else np.iinfo(dt).max + 1
@@ -483,6 +650,17 @@
             assert_array_equal(scalar, array)
 
     def test_repeatability(self, endpoint):
+        """
+
+        Parameters
+        ----------
+        endpoint :
+            
+
+        Returns
+        -------
+
+        """
         # We use a md5 hash of generated sequences of 1000 samples
         # in the range [0, 6) for all but bool, where the range
         # is [0, 2). Hashes are for little endian numbers.
@@ -518,6 +696,17 @@
         assert_(tgt[np.dtype(bool).name] == res)
 
     def test_repeatability_broadcasting(self, endpoint):
+        """
+
+        Parameters
+        ----------
+        endpoint :
+            
+
+        Returns
+        -------
+
+        """
         for dt in self.itype:
             lbnd = 0 if dt in (bool, np.bool_) else np.iinfo(dt).min
             ubnd = 2 if dt in (bool, np.bool_) else np.iinfo(dt).max + 1
@@ -550,12 +739,26 @@
                                1831631863, 1215661561, 3869512430]))]
     )
     def test_repeatability_32bit_boundary(self, bound, expected):
+        """
+
+        Parameters
+        ----------
+        bound :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         for size in [None, len(expected)]:
             random = Generator(MT19937(1234))
             x = random.integers(bound, size=size)
             assert_equal(x, expected if size is not None else expected[0])
 
     def test_repeatability_32bit_boundary_broadcasting(self):
+        """ """
         desired = np.array([[[1622936284, 3620788691, 1659384060],
                              [1417365545,  760222891, 1909653332],
                              [3788118662,  660249498, 4092002593]],
@@ -579,6 +782,17 @@
             assert_array_equal(x, desired if size is not None else desired[0])
 
     def test_int64_uint64_broadcast_exceptions(self, endpoint):
+        """
+
+        Parameters
+        ----------
+        endpoint :
+            
+
+        Returns
+        -------
+
+        """
         configs = {np.uint64: ((0, 2**65), (-1, 2**62), (10, 9), (0, 0)),
                    np.int64: ((0, 2**64), (-(2**64), 2**62), (10, 9), (0, 0),
                               (-2**63-1, -2**63-1))}
@@ -607,6 +821,17 @@
                               endpoint=endpoint, dtype=dtype)
 
     def test_int64_uint64_corner_case(self, endpoint):
+        """
+
+        Parameters
+        ----------
+        endpoint :
+            
+
+        Returns
+        -------
+
+        """
         # When stored in Numpy arrays, `lbnd` is casted
         # as np.int64, and `ubnd` is casted as np.uint64.
         # Checking whether `lbnd` >= `ubnd` used to be
@@ -630,6 +855,17 @@
         assert_equal(actual, tgt)
 
     def test_respect_dtype_singleton(self, endpoint):
+        """
+
+        Parameters
+        ----------
+        endpoint :
+            
+
+        Returns
+        -------
+
+        """
         # See gh-7203
         for dt in self.itype:
             lbnd = 0 if dt is bool else np.iinfo(dt).min
@@ -651,6 +887,17 @@
             assert_equal(type(sample), dt)
 
     def test_respect_dtype_array(self, endpoint):
+        """
+
+        Parameters
+        ----------
+        endpoint :
+            
+
+        Returns
+        -------
+
+        """
         # See gh-7203
         for dt in self.itype:
             lbnd = 0 if dt is bool else np.iinfo(dt).min
@@ -665,6 +912,17 @@
             assert_equal(sample.dtype, dt)
 
     def test_zero_size(self, endpoint):
+        """
+
+        Parameters
+        ----------
+        endpoint :
+            
+
+        Returns
+        -------
+
+        """
         # See gh-7203
         for dt in self.itype:
             sample = self.rfunc(0, 0, (3, 0, 4), endpoint=endpoint, dtype=dt)
@@ -678,6 +936,7 @@
             assert_equal(random.integers(10, 10, size=0).shape, (0,))
 
     def test_error_byteorder(self):
+        """ """
         other_byteord_dt = '<i4' if sys.byteorder == 'big' else '>i4'
         with pytest.raises(ValueError):
             random.integers(0, 200, size=10, dtype=other_byteord_dt)
@@ -692,6 +951,23 @@
         ])
     def test_integers_small_dtype_chisquared(self, sample_size, high,
                                              dtype, chi2max):
+        """
+
+        Parameters
+        ----------
+        sample_size :
+            
+        high :
+            
+        dtype :
+            
+        chi2max :
+            
+
+        Returns
+        -------
+
+        """
         # Regression test for gh-14774.
         samples = random.integers(high, size=sample_size, dtype=dtype)
 
@@ -702,19 +978,23 @@
 
 
 class TestRandomDist:
+    """ """
     # Make sure the random distribution returns the correct value for a
     # given seed
 
     def setup(self):
+        """ """
         self.seed = 1234567890
 
     def test_integers(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.integers(-99, 99, size=(3, 2))
         desired = np.array([[-80, -56], [41, 37], [-83, -16]])
         assert_array_equal(actual, desired)
 
     def test_integers_masked(self):
+        """ """
         # Test masked rejection sampling algorithm to generate array of
         # uint32 in an interval.
         random = Generator(MT19937(self.seed))
@@ -723,12 +1003,14 @@
         assert_array_equal(actual, desired)
 
     def test_integers_closed(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.integers(-99, 99, size=(3, 2), endpoint=True)
         desired = np.array([[-80, -56], [ 41, 38], [-83, -15]])
         assert_array_equal(actual, desired)
 
     def test_integers_max_int(self):
+        """ """
         # Tests whether integers with closed=True can generate the
         # maximum allowed Python int that can be converted
         # into a C long. Previous implementations of this
@@ -741,6 +1023,7 @@
         assert_equal(actual, desired)
 
     def test_random(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.random((3, 2))
         desired = np.array([[0.096999199829214, 0.707517457682192],
@@ -753,6 +1036,7 @@
         assert_array_almost_equal(actual, desired[0, 0], decimal=15)
 
     def test_random_float(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.random((3, 2))
         desired = np.array([[0.0969992 , 0.70751746],
@@ -761,27 +1045,32 @@
         assert_array_almost_equal(actual, desired, decimal=7)
 
     def test_random_float_scalar(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.random(dtype=np.float32)
         desired = 0.0969992
         assert_array_almost_equal(actual, desired, decimal=7)
 
     def test_random_unsupported_type(self):
+        """ """
         assert_raises(TypeError, random.random, dtype='int32')
 
     def test_choice_uniform_replace(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.choice(4, 4)
         desired = np.array([0, 0, 2, 2], dtype=np.int64)
         assert_array_equal(actual, desired)
 
     def test_choice_nonuniform_replace(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.choice(4, 4, p=[0.4, 0.4, 0.1, 0.1])
         desired = np.array([0, 1, 0, 1], dtype=np.int64)
         assert_array_equal(actual, desired)
 
     def test_choice_uniform_noreplace(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.choice(4, 3, replace=False)
         desired = np.array([2, 0, 3], dtype=np.int64)
@@ -791,30 +1080,35 @@
         assert_array_equal(actual, desired)
 
     def test_choice_nonuniform_noreplace(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.choice(4, 3, replace=False, p=[0.1, 0.3, 0.5, 0.1])
         desired = np.array([0, 2, 3], dtype=np.int64)
         assert_array_equal(actual, desired)
 
     def test_choice_noninteger(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.choice(['a', 'b', 'c', 'd'], 4)
         desired = np.array(['a', 'a', 'c', 'c'])
         assert_array_equal(actual, desired)
 
     def test_choice_multidimensional_default_axis(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.choice([[0, 1], [2, 3], [4, 5], [6, 7]], 3)
         desired = np.array([[0, 1], [0, 1], [4, 5]])
         assert_array_equal(actual, desired)
 
     def test_choice_multidimensional_custom_axis(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.choice([[0, 1], [2, 3], [4, 5], [6, 7]], 1, axis=1)
         desired = np.array([[0], [2], [4], [6]])
         assert_array_equal(actual, desired)
 
     def test_choice_exceptions(self):
+        """ """
         sample = random.choice
         assert_raises(ValueError, sample, -1, 3)
         assert_raises(ValueError, sample, 3., 3)
@@ -833,6 +1127,7 @@
                       replace=False, p=[1, 0, 0])
 
     def test_choice_return_shape(self):
+        """ """
         p = [0.1, 0.9]
         # Check scalar
         assert_(np.isscalar(random.choice(2, replace=True)))
@@ -879,11 +1174,13 @@
         assert_raises(ValueError, random.choice, [], 10)
 
     def test_choice_nan_probabilities(self):
+        """ """
         a = np.array([42, 1, 2])
         p = [None, None, None]
         assert_raises(ValueError, random.choice, a, p=p)
 
     def test_choice_p_non_contiguous(self):
+        """ """
         p = np.ones(10) / 5
         p[1::2] = 3.0
         random = Generator(MT19937(self.seed))
@@ -893,6 +1190,7 @@
         assert_array_equal(non_contig, contig)
 
     def test_choice_return_type(self):
+        """ """
         # gh 9867
         p = np.ones(4) / 4.
         actual = random.choice(4, 2)
@@ -905,6 +1203,7 @@
         assert actual.dtype == np.int64
 
     def test_choice_large_sample(self):
+        """ """
         choice_hash = 'd44962a0b1e92f4a3373c23222244e21'
         random = Generator(MT19937(self.seed))
         actual = random.choice(10000, 5000, replace=False)
@@ -914,12 +1213,14 @@
         assert_(choice_hash == res)
 
     def test_bytes(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.bytes(10)
         desired = b'\x86\xf0\xd4\x18\xe1\x81\t8%\xdd'
         assert_equal(actual, desired)
 
     def test_shuffle(self):
+        """ """
         # Test lists, arrays (of various dtypes), and multidimensional versions
         # of both, c-contiguous or not:
         for conv in [lambda x: np.array([]),
@@ -947,6 +1248,7 @@
             assert_array_equal(actual, desired)
 
     def test_shuffle_custom_axis(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = np.arange(16).reshape((4, 4))
         random.shuffle(actual, axis=1)
@@ -961,6 +1263,7 @@
         assert_array_equal(actual, desired)
 
     def test_shuffle_axis_nonsquare(self):
+        """ """
         y1 = np.arange(20).reshape(2, 10)
         y2 = y1.copy()
         random = Generator(MT19937(self.seed))
@@ -970,6 +1273,7 @@
         assert_array_equal(y1, y2)
 
     def test_shuffle_masked(self):
+        """ """
         # gh-3263
         a = np.ma.masked_values(np.reshape(range(20), (5, 4)) % 3 - 1, -1)
         b = np.ma.masked_values(np.arange(20) % 3 - 1, -1)
@@ -984,6 +1288,7 @@
                 sorted(b.data[~b.mask]), sorted(b_orig.data[~b_orig.mask]))
 
     def test_shuffle_exceptions(self):
+        """ """
         random = Generator(MT19937(self.seed))
         arr = np.arange(10)
         assert_raises(np.AxisError, random.shuffle, arr, 1)
@@ -994,6 +1299,7 @@
         assert_raises(NotImplementedError, random.shuffle, arr, 1)
 
     def test_permutation(self):
+        """ """
         random = Generator(MT19937(self.seed))
         alist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
         actual = random.permutation(alist)
@@ -1019,6 +1325,7 @@
         assert_array_equal(actual, desired)
 
     def test_permutation_custom_axis(self):
+        """ """
         a = np.arange(16).reshape((4, 4))
         desired = np.array([[ 0,  3,  1,  2],
                             [ 4,  7,  5,  6],
@@ -1032,6 +1339,7 @@
         assert_array_equal(actual, desired)
 
     def test_permutation_exceptions(self):
+        """ """
         random = Generator(MT19937(self.seed))
         arr = np.arange(10)
         assert_raises(np.AxisError, random.permutation, arr, 1)
@@ -1040,6 +1348,7 @@
         assert_raises(TypeError, random.permutation, arr, slice(1, 2, None))
 
     def test_beta(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.beta(.1, .9, size=(3, 2))
         desired = np.array(
@@ -1049,6 +1358,7 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_binomial(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.binomial(100.123, .456, size=(3, 2))
         desired = np.array([[42, 41],
@@ -1062,6 +1372,7 @@
         assert_array_equal(actual, desired)
 
     def test_chisquare(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.chisquare(50, size=(3, 2))
         desired = np.array([[32.9850547060149, 39.0219480493301],
@@ -1070,6 +1381,7 @@
         assert_array_almost_equal(actual, desired, decimal=13)
 
     def test_dirichlet(self):
+        """ """
         random = Generator(MT19937(self.seed))
         alpha = np.array([51.72840233779265162, 39.74494232180943953])
         actual = random.dirichlet(alpha, size=(3, 2))
@@ -1089,6 +1401,7 @@
         assert_array_almost_equal(actual, desired[0, 0], decimal=15)
 
     def test_dirichlet_size(self):
+        """ """
         # gh-3173
         p = np.array([51.72840233779265162, 39.74494232180943953])
         assert_equal(random.dirichlet(p, np.uint32(1)).shape, (1, 2))
@@ -1101,6 +1414,7 @@
         assert_raises(TypeError, random.dirichlet, p, float(1))
 
     def test_dirichlet_bad_alpha(self):
+        """ """
         # gh-2089
         alpha = np.array([5.4e-01, -1.0e-16])
         assert_raises(ValueError, random.dirichlet, alpha)
@@ -1112,6 +1426,7 @@
         assert_raises(ValueError, random.dirichlet, np.array([[5, 1], [1, 5]]))
 
     def test_dirichlet_alpha_non_contiguous(self):
+        """ """
         a = np.array([51.72840233779265162, -1.0, 39.74494232180943953])
         alpha = a[::2]
         random = Generator(MT19937(self.seed))
@@ -1122,6 +1437,7 @@
         assert_array_almost_equal(non_contig, contig)
 
     def test_dirichlet_small_alpha(self):
+        """ """
         eps = 1.0e-9  # 1.0e-10 -> runtime x 10; 1e-11 -> runtime x 200, etc.
         alpha = eps * np.array([1., 1.0e-3])
         random = Generator(MT19937(self.seed))
@@ -1138,6 +1454,7 @@
 
     @pytest.mark.slow
     def test_dirichlet_moderately_small_alpha(self):
+        """ """
         # Use alpha.max() < 0.1 to trigger stick breaking code path
         alpha = np.array([0.02, 0.04, 0.03])
         exact_mean = alpha / alpha.sum()
@@ -1147,6 +1464,7 @@
         assert_allclose(sample_mean, exact_mean, rtol=1e-3)
 
     def test_exponential(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.exponential(1.1234, size=(3, 2))
         desired = np.array([[0.098845481066258, 1.560752510746964],
@@ -1155,10 +1473,12 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_exponential_0(self):
+        """ """
         assert_equal(random.exponential(scale=0), 0)
         assert_raises(ValueError, random.exponential, scale=-0.)
 
     def test_f(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.f(12, 77, size=(3, 2))
         desired = np.array([[0.461720027077085, 1.100441958872451],
@@ -1167,6 +1487,7 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_gamma(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.gamma(5, 3, size=(3, 2))
         desired = np.array([[ 5.03850858902096,  7.9228656732049 ],
@@ -1175,10 +1496,12 @@
         assert_array_almost_equal(actual, desired, decimal=14)
 
     def test_gamma_0(self):
+        """ """
         assert_equal(random.gamma(shape=0, scale=0), 0)
         assert_raises(ValueError, random.gamma, shape=-0., scale=-0.)
 
     def test_geometric(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.geometric(.123456789, size=(3, 2))
         desired = np.array([[ 1, 10],
@@ -1187,6 +1510,7 @@
         assert_array_equal(actual, desired)
 
     def test_geometric_exceptions(self):
+        """ """
         assert_raises(ValueError, random.geometric, 1.1)
         assert_raises(ValueError, random.geometric, [1.1] * 10)
         assert_raises(ValueError, random.geometric, -0.1)
@@ -1196,6 +1520,7 @@
             assert_raises(ValueError, random.geometric, [np.nan] * 10)
 
     def test_gumbel(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.gumbel(loc=.123456789, scale=2.0, size=(3, 2))
         desired = np.array([[ 4.688397515056245, -0.289514845417841],
@@ -1204,10 +1529,12 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_gumbel_0(self):
+        """ """
         assert_equal(random.gumbel(scale=0), 0)
         assert_raises(ValueError, random.gumbel, scale=-0.)
 
     def test_hypergeometric(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.hypergeometric(10.1, 5.5, 14, size=(3, 2))
         desired = np.array([[ 9, 9],
@@ -1234,6 +1561,7 @@
         assert_array_equal(actual, desired)
 
     def test_laplace(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.laplace(loc=.123456789, scale=2.0, size=(3, 2))
         desired = np.array([[-3.156353949272393,  1.195863024830054],
@@ -1242,10 +1570,12 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_laplace_0(self):
+        """ """
         assert_equal(random.laplace(scale=0), 0)
         assert_raises(ValueError, random.laplace, scale=-0.)
 
     def test_logistic(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.logistic(loc=.123456789, scale=2.0, size=(3, 2))
         desired = np.array([[-4.338584631510999,  1.890171436749954],
@@ -1254,6 +1584,7 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_lognormal(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.lognormal(mean=.123456789, sigma=2.0, size=(3, 2))
         desired = np.array([[ 0.0268252166335, 13.9534486483053],
@@ -1262,10 +1593,12 @@
         assert_array_almost_equal(actual, desired, decimal=13)
 
     def test_lognormal_0(self):
+        """ """
         assert_equal(random.lognormal(sigma=0), 1)
         assert_raises(ValueError, random.lognormal, sigma=-0.)
 
     def test_logseries(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.logseries(p=.923456789, size=(3, 2))
         desired = np.array([[14, 17],
@@ -1274,11 +1607,13 @@
         assert_array_equal(actual, desired)
 
     def test_logseries_exceptions(self):
+        """ """
         with np.errstate(invalid='ignore'):
             assert_raises(ValueError, random.logseries, np.nan)
             assert_raises(ValueError, random.logseries, [np.nan] * 10)
 
     def test_multinomial(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.multinomial(20, [1 / 6.] * 6, size=(3, 2))
         desired = np.array([[[1, 5, 1, 6, 4, 3],
@@ -1291,6 +1626,17 @@
 
     @pytest.mark.parametrize("method", ["svd", "eigh", "cholesky"])
     def test_multivariate_normal(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         random = Generator(MT19937(self.seed))
         mean = (.123456789, 10)
         cov = [[1, 0], [0, 1]]
@@ -1365,6 +1711,17 @@
 
     @pytest.mark.parametrize("method", ["svd", "eigh", "cholesky"])
     def test_multivariate_normal_basic_stats(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         random = Generator(MT19937(self.seed))
         n_s = 1000
         mean = np.array([1, 2])
@@ -1377,6 +1734,7 @@
         assert np.all(np.abs(cov_emp - cov) < 0.2)
 
     def test_negative_binomial(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.negative_binomial(n=100, p=.12345, size=(3, 2))
         desired = np.array([[543, 727],
@@ -1385,17 +1743,20 @@
         assert_array_equal(actual, desired)
 
     def test_negative_binomial_exceptions(self):
+        """ """
         with np.errstate(invalid='ignore'):
             assert_raises(ValueError, random.negative_binomial, 100, np.nan)
             assert_raises(ValueError, random.negative_binomial, 100,
                           [np.nan] * 10)
 
     def test_negative_binomial_p0_exception(self):
+        """ """
         # Verify that p=0 raises an exception.
         with assert_raises(ValueError):
             x = random.negative_binomial(1, 0)
 
     def test_noncentral_chisquare(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.noncentral_chisquare(df=5, nonc=5, size=(3, 2))
         desired = np.array([[ 1.70561552362133, 15.97378184942111],
@@ -1417,6 +1778,7 @@
         assert_array_almost_equal(actual, desired, decimal=14)
 
     def test_noncentral_f(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.noncentral_f(dfnum=5, dfden=2, nonc=1,
                                      size=(3, 2))
@@ -1426,11 +1788,13 @@
         assert_array_almost_equal(actual, desired, decimal=14)
 
     def test_noncentral_f_nan(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.noncentral_f(dfnum=5, dfden=2, nonc=np.nan)
         assert np.isnan(actual)
 
     def test_normal(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.normal(loc=.123456789, scale=2.0, size=(3, 2))
         desired = np.array([[-3.618412914693162,  2.635726692647081],
@@ -1439,10 +1803,12 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_normal_0(self):
+        """ """
         assert_equal(random.normal(scale=0), 0)
         assert_raises(ValueError, random.normal, scale=-0.)
 
     def test_pareto(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.pareto(a=.123456789, size=(3, 2))
         desired = np.array([[1.0394926776069018e+00, 7.7142534343505773e+04],
@@ -1457,6 +1823,7 @@
         np.testing.assert_array_almost_equal_nulp(actual, desired, nulp=30)
 
     def test_poisson(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.poisson(lam=.123456789, size=(3, 2))
         desired = np.array([[0, 0],
@@ -1465,6 +1832,7 @@
         assert_array_equal(actual, desired)
 
     def test_poisson_exceptions(self):
+        """ """
         lambig = np.iinfo('int64').max
         lamneg = -1
         assert_raises(ValueError, random.poisson, lamneg)
@@ -1476,6 +1844,7 @@
             assert_raises(ValueError, random.poisson, [np.nan] * 10)
 
     def test_power(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.power(a=.123456789, size=(3, 2))
         desired = np.array([[1.977857368842754e-09, 9.806792196620341e-02],
@@ -1484,6 +1853,7 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_rayleigh(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.rayleigh(scale=10, size=(3, 2))
         desired = np.array([[ 4.51734079831581, 15.6802442485758 ],
@@ -1492,10 +1862,12 @@
         assert_array_almost_equal(actual, desired, decimal=14)
 
     def test_rayleigh_0(self):
+        """ """
         assert_equal(random.rayleigh(scale=0), 0)
         assert_raises(ValueError, random.rayleigh, scale=-0.)
 
     def test_standard_cauchy(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.standard_cauchy(size=(3, 2))
         desired = np.array([[-1.489437778266206, -3.275389641569784],
@@ -1504,6 +1876,7 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_standard_exponential(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.standard_exponential(size=(3, 2), method='inv')
         desired = np.array([[0.102031839440643, 1.229350298474972],
@@ -1512,9 +1885,11 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_standard_expoential_type_error(self):
+        """ """
         assert_raises(TypeError, random.standard_exponential, dtype=np.int32)
 
     def test_standard_gamma(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.standard_gamma(shape=3, size=(3, 2))
         desired = np.array([[0.62970724056362, 1.22379851271008],
@@ -1523,12 +1898,14 @@
         assert_array_almost_equal(actual, desired, decimal=14)
 
     def test_standard_gammma_scalar_float(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.standard_gamma(3, dtype=np.float32)
         desired = 2.9242148399353027
         assert_array_almost_equal(actual, desired, decimal=6)
 
     def test_standard_gamma_float(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.standard_gamma(shape=3, size=(3, 2))
         desired = np.array([[0.62971, 1.2238 ],
@@ -1537,6 +1914,7 @@
         assert_array_almost_equal(actual, desired, decimal=5)
 
     def test_standard_gammma_float_out(self):
+        """ """
         actual = np.zeros((3, 2), dtype=np.float32)
         random = Generator(MT19937(self.seed))
         random.standard_gamma(10.0, out=actual, dtype=np.float32)
@@ -1550,10 +1928,12 @@
         assert_array_almost_equal(actual, desired, decimal=5)
 
     def test_standard_gamma_unknown_type(self):
+        """ """
         assert_raises(TypeError, random.standard_gamma, 1.,
                       dtype='int32')
 
     def test_out_size_mismatch(self):
+        """ """
         out = np.zeros(10)
         assert_raises(ValueError, random.standard_gamma, 10.0, size=20,
                       out=out)
@@ -1561,10 +1941,12 @@
                       out=out)
 
     def test_standard_gamma_0(self):
+        """ """
         assert_equal(random.standard_gamma(shape=0), 0)
         assert_raises(ValueError, random.standard_gamma, shape=-0.)
 
     def test_standard_normal(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.standard_normal(size=(3, 2))
         desired = np.array([[-1.870934851846581,  1.25613495182354 ],
@@ -1573,9 +1955,11 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_standard_normal_unsupported_type(self):
+        """ """
         assert_raises(TypeError, random.standard_normal, dtype=np.int32)
 
     def test_standard_t(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.standard_t(df=10, size=(3, 2))
         desired = np.array([[-1.484666193042647,  0.30597891831161 ],
@@ -1584,6 +1968,7 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_triangular(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.triangular(left=5.12, mode=10.23, right=20.34,
                                    size=(3, 2))
@@ -1593,6 +1978,7 @@
         assert_array_almost_equal(actual, desired, decimal=14)
 
     def test_uniform(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.uniform(low=1.23, high=10.54, size=(3, 2))
         desired = np.array([[2.13306255040998 , 7.816987531021207],
@@ -1601,6 +1987,7 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_uniform_range_bounds(self):
+        """ """
         fmin = np.finfo('float').min
         fmax = np.finfo('float').max
 
@@ -1617,6 +2004,7 @@
         random.uniform(low=np.nextafter(fmin, 1), high=fmax / 1e17)
 
     def test_scalar_exception_propagation(self):
+        """ """
         # Tests that exceptions are correctly propagated in distributions
         # when called with objects that throw exceptions when converted to
         # scalars.
@@ -1624,6 +2012,7 @@
         # Regression test for gh: 8865
 
         class ThrowingFloat(np.ndarray):
+            """ """
             def __float__(self):
                 raise TypeError
 
@@ -1632,6 +2021,7 @@
                       throwing_float)
 
         class ThrowingInteger(np.ndarray):
+            """ """
             def __int__(self):
                 raise TypeError
 
@@ -1639,6 +2029,7 @@
         assert_raises(TypeError, random.hypergeometric, throwing_int, 1, 1)
 
     def test_vonmises(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.vonmises(mu=1.23, kappa=1.54, size=(3, 2))
         desired = np.array([[ 1.107972248690106,  2.841536476232361],
@@ -1647,17 +2038,20 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_vonmises_small(self):
+        """ """
         # check infinite loop, gh-4720
         random = Generator(MT19937(self.seed))
         r = random.vonmises(mu=0., kappa=1.1e-8, size=10**6)
         assert_(np.isfinite(r).all())
 
     def test_vonmises_nan(self):
+        """ """
         random = Generator(MT19937(self.seed))
         r = random.vonmises(mu=0., kappa=np.nan)
         assert_(np.isnan(r))
 
     def test_wald(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.wald(mean=1.23, scale=1.54, size=(3, 2))
         desired = np.array([[0.26871721804551, 3.2233942732115 ],
@@ -1666,6 +2060,7 @@
         assert_array_almost_equal(actual, desired, decimal=14)
 
     def test_weibull(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.weibull(a=1.23, size=(3, 2))
         desired = np.array([[0.138613914769468, 1.306463419753191],
@@ -1674,11 +2069,13 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_weibull_0(self):
+        """ """
         random = Generator(MT19937(self.seed))
         assert_equal(random.weibull(a=0, size=12), np.zeros(12))
         assert_raises(ValueError, random.weibull, a=-0.)
 
     def test_zipf(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.zipf(a=1.23, size=(3, 2))
         desired = np.array([[  1,   1],
@@ -1688,13 +2085,16 @@
 
 
 class TestBroadcast:
+    """ """
     # tests that functions that broadcast behave
     # correctly when presented with non-scalar arguments
     def setup(self):
+        """ """
         self.seed = 123456789
 
 
     def test_uniform(self):
+        """ """
         random = Generator(MT19937(self.seed))
         low = [0]
         high = [1]
@@ -1710,6 +2110,7 @@
         assert_array_almost_equal(actual, desired, decimal=14)
 
     def test_normal(self):
+        """ """
         loc = [0]
         scale = [1]
         bad_scale = [-1]
@@ -1728,6 +2129,7 @@
         assert_raises(ValueError, normal, loc, bad_scale * 3)
 
     def test_beta(self):
+        """ """
         a = [1]
         b = [2]
         bad_a = [-1]
@@ -1746,6 +2148,7 @@
         assert_array_almost_equal(actual, desired, decimal=14)
 
     def test_exponential(self):
+        """ """
         scale = [1]
         bad_scale = [-1]
         desired = np.array([0.67245993212806, 0.21380495318094, 0.7177848928629])
@@ -1756,6 +2159,7 @@
         assert_raises(ValueError, random.exponential, bad_scale * 3)
 
     def test_standard_gamma(self):
+        """ """
         shape = [1]
         bad_shape = [-1]
         desired = np.array([0.67245993212806, 0.21380495318094, 0.7177848928629])
@@ -1767,6 +2171,7 @@
         assert_raises(ValueError, std_gamma, bad_shape * 3)
 
     def test_gamma(self):
+        """ """
         shape = [1]
         scale = [2]
         bad_shape = [-1]
@@ -1788,6 +2193,7 @@
         assert_raises(ValueError, gamma, shape, bad_scale * 3)
 
     def test_f(self):
+        """ """
         dfnum = [1]
         dfden = [2]
         bad_dfnum = [-1]
@@ -1809,6 +2215,7 @@
         assert_raises(ValueError, f, dfnum, bad_dfden * 3)
 
     def test_noncentral_f(self):
+        """ """
         dfnum = [2]
         dfden = [3]
         nonc = [4]
@@ -1844,12 +2251,14 @@
         assert_raises(ValueError, nonc_f, dfnum, dfden, bad_nonc * 3)
 
     def test_noncentral_f_small_df(self):
+        """ """
         random = Generator(MT19937(self.seed))
         desired = np.array([0.04714867120827, 0.1239390327694])
         actual = random.noncentral_f(0.9, 0.9, 2, size=2)
         assert_array_almost_equal(actual, desired, decimal=14)
 
     def test_chisquare(self):
+        """ """
         df = [1]
         bad_df = [-1]
         desired = np.array([0.05573640064251, 1.47220224353539, 2.9469379318589])
@@ -1860,6 +2269,7 @@
         assert_raises(ValueError, random.chisquare, bad_df * 3)
 
     def test_noncentral_chisquare(self):
+        """ """
         df = [1]
         nonc = [2]
         bad_df = [-1]
@@ -1881,6 +2291,7 @@
         assert_raises(ValueError, nonc_chi, df, bad_nonc * 3)
 
     def test_standard_t(self):
+        """ """
         df = [1]
         bad_df = [-1]
         desired = np.array([-1.39498829447098, -1.23058658835223, 0.17207021065983])
@@ -1891,6 +2302,7 @@
         assert_raises(ValueError, random.standard_t, bad_df * 3)
 
     def test_vonmises(self):
+        """ """
         mu = [2]
         kappa = [1]
         bad_kappa = [-1]
@@ -1907,6 +2319,7 @@
         assert_raises(ValueError, random.vonmises, mu, bad_kappa * 3)
 
     def test_pareto(self):
+        """ """
         a = [1]
         bad_a = [-1]
         desired = np.array([0.95905052946317, 0.2383810889437 , 1.04988745750013])
@@ -1917,6 +2330,7 @@
         assert_raises(ValueError, random.pareto, bad_a * 3)
 
     def test_weibull(self):
+        """ """
         a = [1]
         bad_a = [-1]
         desired = np.array([0.67245993212806, 0.21380495318094, 0.7177848928629])
@@ -1927,6 +2341,7 @@
         assert_raises(ValueError, random.weibull, bad_a * 3)
 
     def test_power(self):
+        """ """
         a = [1]
         bad_a = [-1]
         desired = np.array([0.48954864361052, 0.19249412888486, 0.51216834058807])
@@ -1937,6 +2352,7 @@
         assert_raises(ValueError, random.power, bad_a * 3)
 
     def test_laplace(self):
+        """ """
         loc = [0]
         scale = [1]
         bad_scale = [-1]
@@ -1955,6 +2371,7 @@
         assert_raises(ValueError, laplace, loc, bad_scale * 3)
 
     def test_gumbel(self):
+        """ """
         loc = [0]
         scale = [1]
         bad_scale = [-1]
@@ -1973,6 +2390,7 @@
         assert_raises(ValueError, gumbel, loc, bad_scale * 3)
 
     def test_logistic(self):
+        """ """
         loc = [0]
         scale = [1]
         bad_scale = [-1]
@@ -1990,6 +2408,7 @@
         assert_equal(random.logistic(1.0, 0.0), 1.0)
 
     def test_lognormal(self):
+        """ """
         mean = [0]
         sigma = [1]
         bad_sigma = [-1]
@@ -2006,6 +2425,7 @@
         assert_raises(ValueError, random.lognormal, mean, bad_sigma * 3)
 
     def test_rayleigh(self):
+        """ """
         scale = [1]
         bad_scale = [-1]
         desired = np.array([0.60439534475066, 0.66120048396359, 1.67873398389499])
@@ -2016,6 +2436,7 @@
         assert_raises(ValueError, random.rayleigh, bad_scale * 3)
 
     def test_wald(self):
+        """ """
         mean = [0.5]
         scale = [1]
         bad_mean = [0]
@@ -2035,6 +2456,7 @@
         assert_raises(ValueError, random.wald, mean, bad_scale * 3)
 
     def test_triangular(self):
+        """ """
         left = [1]
         right = [3]
         mode = [2]
@@ -2075,6 +2497,7 @@
         assert_raises(ValueError, triangular, 10., 10., 10.)
 
     def test_binomial(self):
+        """ """
         n = [1]
         p = [0.5]
         bad_n = [-1]
@@ -2098,6 +2521,7 @@
         assert_raises(ValueError, binom, n, bad_p_two * 3)
 
     def test_negative_binomial(self):
+        """ """
         n = [1]
         p = [0.5]
         bad_n = [-1]
@@ -2122,6 +2546,7 @@
         assert_raises(ValueError, neg_binom, n, bad_p_two * 3)
 
     def test_poisson(self):
+        """ """
 
         lam = [1]
         bad_lam_one = [-1]
@@ -2137,6 +2562,7 @@
         assert_raises(ValueError, poisson, bad_lam_two * 3)
 
     def test_zipf(self):
+        """ """
         a = [2]
         bad_a = [0]
         desired = np.array([1, 8, 1])
@@ -2151,6 +2577,7 @@
             assert_raises(ValueError, zipf, [0, 0, np.nan])
 
     def test_geometric(self):
+        """ """
         p = [0.5]
         bad_p_one = [-1]
         bad_p_two = [1.5]
@@ -2164,6 +2591,7 @@
         assert_raises(ValueError, geometric, bad_p_two * 3)
 
     def test_hypergeometric(self):
+        """ """
         ngood = [1]
         nbad = [2]
         nsample = [2]
@@ -2209,6 +2637,7 @@
         assert_raises(ValueError, hypergeom, 999, [2**29, 2**30], 1000)
 
     def test_logseries(self):
+        """ """
         p = [0.5]
         bad_p_one = [2]
         bad_p_two = [-1]
@@ -2222,6 +2651,7 @@
         assert_raises(ValueError, logseries, bad_p_two * 3)
 
     def test_multinomial(self):
+        """ """
         random = Generator(MT19937(self.seed))
         actual = random.multinomial([5, 20], [1 / 6.] * 6, size=(3, 2))
         desired = np.array([[[0, 0, 2, 1, 2, 0],
@@ -2240,11 +2670,26 @@
 
 
 class TestThread:
+    """ """
     # make sure each state produces the same sequence even in threads
     def setup(self):
+        """ """
         self.seeds = range(4)
 
     def check_function(self, function, sz):
+        """
+
+        Parameters
+        ----------
+        function :
+            
+        sz :
+            
+
+        Returns
+        -------
+
+        """
         from threading import Thread
 
         out1 = np.empty((len(self.seeds),) + sz)
@@ -2267,19 +2712,61 @@
             assert_array_equal(out1, out2)
 
     def test_normal(self):
+        """ """
         def gen_random(state, out):
+            """
+
+            Parameters
+            ----------
+            state :
+                
+            out :
+                
+
+            Returns
+            -------
+
+            """
             out[...] = state.normal(size=10000)
 
         self.check_function(gen_random, sz=(10000,))
 
     def test_exp(self):
+        """ """
         def gen_random(state, out):
+            """
+
+            Parameters
+            ----------
+            state :
+                
+            out :
+                
+
+            Returns
+            -------
+
+            """
             out[...] = state.exponential(scale=np.ones((100, 1000)))
 
         self.check_function(gen_random, sz=(100, 1000))
 
     def test_multinomial(self):
+        """ """
         def gen_random(state, out):
+            """
+
+            Parameters
+            ----------
+            state :
+                
+            out :
+                
+
+            Returns
+            -------
+
+            """
             out[...] = state.multinomial(10, [1 / 6.] * 6, size=10000)
 
         self.check_function(gen_random, sz=(10000, 6))
@@ -2287,13 +2774,16 @@
 
 # See Issue #4263
 class TestSingleEltArrayInput:
+    """ """
     def setup(self):
+        """ """
         self.argOne = np.array([2])
         self.argTwo = np.array([3])
         self.argThree = np.array([4])
         self.tgtShape = (1,)
 
     def test_one_arg_funcs(self):
+        """ """
         funcs = (random.exponential, random.standard_gamma,
                  random.chisquare, random.standard_t,
                  random.pareto, random.weibull,
@@ -2313,6 +2803,7 @@
             assert_equal(out.shape, self.tgtShape)
 
     def test_two_arg_funcs(self):
+        """ """
         funcs = (random.uniform, random.normal,
                  random.beta, random.gamma,
                  random.f, random.noncentral_chisquare,
@@ -2340,6 +2831,17 @@
             assert_equal(out.shape, self.tgtShape)
 
     def test_integers(self, endpoint):
+        """
+
+        Parameters
+        ----------
+        endpoint :
+            
+
+        Returns
+        -------
+
+        """
         itype = [np.bool_, np.int8, np.uint8, np.int16, np.uint16,
                  np.int32, np.uint32, np.int64, np.uint64]
         func = random.integers
@@ -2357,6 +2859,7 @@
             assert_equal(out.shape, self.tgtShape)
 
     def test_three_arg_funcs(self):
+        """ """
         funcs = [random.noncentral_f, random.triangular,
                  random.hypergeometric]
 
@@ -2373,6 +2876,17 @@
 
 @pytest.mark.parametrize("config", JUMP_TEST_DATA)
 def test_jumped(config):
+    """
+
+    Parameters
+    ----------
+    config :
+        
+
+    Returns
+    -------
+
+    """
     # Each config contains the initial seed, a number of raw steps
     # the md5 hashes of the initial and the final states' keys and
     # the position of of the initial and the final state.
@@ -2400,6 +2914,7 @@
 
 
 def test_broadcast_size_error():
+    """ """
     mu = np.ones(3)
     sigma = np.ones((4, 3))
     size = (10, 4, 2)
@@ -2443,6 +2958,7 @@
 
 
 def test_broadcast_size_scalar():
+    """ """
     mu = np.ones(3)
     sigma = np.ones(3)
     random.normal(mu, sigma, size=3)
