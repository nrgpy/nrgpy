# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/tests/test_magic.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/tests/test_magic.py
@@ -39,6 +39,7 @@
 class DummyMagics(magic.Magics): pass
 
 def test_extract_code_ranges():
+    """ """
     instr = "1 3 5-6 7-9 10:15 17: :10 10- -13 :"
     expected = [(0, 1), 
                 (2, 3),
@@ -54,7 +55,7 @@
     nt.assert_equal(actual, expected)
 
 def test_extract_symbols():
-    source = """import foo\na = 10\ndef b():\n    return 42\n\n\nclass A: pass\n\n\n"""
+    """source = """import foo\na = 10\ndef b():\nreturn 42\n\n\nclass A: pass\n\n\n"""
     symbols_args = ["a", "b", "A", "A,b", "A,a", "z"]
     expected = [([], ['a']),
                 (["def b():\n    return 42\n"], []),
@@ -67,6 +68,7 @@
 
 
 def test_extract_symbols_raises_exception_with_non_python_code():
+    """ """
     source = ("=begin A Ruby program :)=end\n"
               "def hello\n"
               "puts 'Hello world'\n"
@@ -76,6 +78,7 @@
 
 
 def test_magic_not_found():
+    """ """
     # magic not found raises UsageError
     with nt.assert_raises(UsageError):
         _ip.magic('doesntexist')
@@ -86,6 +89,7 @@
 
 
 def test_cell_magic_not_found():
+    """ """
     # magic not found raises UsageError
     with nt.assert_raises(UsageError):
         _ip.run_cell_magic('doesntexist', 'line', 'cell')
@@ -96,7 +100,19 @@
 
 
 def test_magic_error_status():
+    """ """
     def fail(shell):
+        """
+
+        Parameters
+        ----------
+        shell :
+            
+
+        Returns
+        -------
+
+        """
         1/0
     _ip.register_magic_function(fail)
     result = _ip.run_cell('%fail')
@@ -104,17 +120,32 @@
 
 
 def test_config():
-    """ test that config magic does not raise
+    """test that config magic does not raise
     can happen if Configurable init is moved too early into
     Magics.__init__ as then a Config object will be registered as a
     magic.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     ## should not raise.
     _ip.magic('config')
 
 def test_config_available_configs():
-    """ test that config magic prints available configs in unique and
-    sorted order. """
+    """test that config magic prints available configs in unique and
+    sorted order.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
     with capture_output() as captured:
         _ip.magic('config')
 
@@ -123,7 +154,7 @@
     nt.assert_list_equal(config_classes, sorted(set(config_classes)))
 
 def test_config_print_class():
-    """ test that config with a classname prints the class's options. """
+    """test that config with a classname prints the class's options."""
     with capture_output() as captured:
         _ip.magic('config TerminalInteractiveShell')
 
@@ -134,6 +165,7 @@
                              "'TerminalInteractiveShell.* options'")
 
 def test_rehashx():
+    """ """
     # clear up everything
     _ip.alias_manager.clear_aliases()
     del _ip.db['syscmdlist']
@@ -178,92 +210,113 @@
 @dec.skip_without('sqlite3')
 def doctest_hist_f():
     """Test %hist -f with temporary filename.
-
+    
     In [9]: import tempfile
-
+    
     In [10]: tfile = tempfile.mktemp('.py','tmp-ipython-')
-
+    
     In [11]: %hist -nl -f $tfile 3
-
+    
     In [13]: import os; os.unlink(tfile)
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
 
 @dec.skip_without('sqlite3')
 def doctest_hist_r():
     """Test %hist -r
-
+    
     XXX - This test is not recording the output correctly.  For some reason, in
     testing mode the raw history isn't getting populated.  No idea why.
     Disabling the output checking for now, though at least we do run it.
-
+    
     In [1]: 'hist' in _ip.lsmagic()
     Out[1]: True
-
+    
     In [2]: x=1
-
+    
     In [3]: %hist -rl 2
     x=1 # random
     %hist -r 2
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
 
 @dec.skip_without('sqlite3')
 def doctest_hist_op():
     """Test %hist -op
-
+    
     In [1]: class b(float):
        ...:     pass
-       ...: 
-
+       ...:
+    
     In [2]: class s(object):
        ...:     def __str__(self):
        ...:         return 's'
-       ...: 
-
-    In [3]: 
-
+       ...:
+    
+    In [3]:
+    
     In [4]: class r(b):
        ...:     def __repr__(self):
        ...:         return 'r'
-       ...: 
-
+       ...:
+    
     In [5]: class sr(s,r): pass
-       ...: 
-
-    In [6]: 
-
+       ...:
+    
+    In [6]:
+    
     In [7]: bb=b()
-
+    
     In [8]: ss=s()
-
+    
     In [9]: rr=r()
-
+    
     In [10]: ssrr=sr()
-
+    
     In [11]: 4.5
     Out[11]: 4.5
-
+    
     In [12]: str(ss)
     Out[12]: 's'
-
-    In [13]: 
-
+    
+    In [13]:
+    
     In [14]: %hist -op
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     >>> class b:
     ...     pass
-    ... 
+    ...
     >>> class s(b):
     ...     def __str__(self):
     ...         return 's'
-    ... 
-    >>> 
+    ...
+    >>>
     >>> class r(b):
     ...     def __repr__(self):
     ...         return 'r'
-    ... 
+    ...
     >>> class sr(s,r): pass
-    >>> 
+    >>>
     >>> bb=b()
     >>> ss=s()
     >>> rr=r()
@@ -272,10 +325,11 @@
     4.5
     >>> str(ss)
     's'
-    >>> 
+    >>>
     """
 
 def test_hist_pof():
+    """ """
     ip = get_ipython()
     ip.run_cell(u"1+2", store_history=True)
     #raise Exception(ip.history_manager.session_number)
@@ -288,6 +342,7 @@
 
 @dec.skip_without('sqlite3')
 def test_macro():
+    """ """
     ip = get_ipython()
     ip.history_manager.reset()   # Clear any existing history.
     cmds = ["a=1", "def b():\n  return a**2", "print(a,b())"]
@@ -329,6 +384,7 @@
 
 @dec.skipif_not_numpy
 def test_numpy_reset_array_undec():
+    """ """
     "Test '%reset array' functionality"
     _ip.ex('import numpy as np')
     _ip.ex('a = np.empty(2)')
@@ -337,6 +393,7 @@
     nt.assert_not_in('a', _ip.user_ns)
 
 def test_reset_out():
+    """ """
     "Test '%reset out' magic"
     _ip.run_cell("parrot = 'dead'", store_history=True)
     # test '%reset -f out', make an Out prompt
@@ -347,6 +404,7 @@
     nt.assert_equal(len(_ip.user_ns['Out']), 0)
 
 def test_reset_in():
+    """ """
     "Test '%reset in' magic"
     # test '%reset -f in'
     _ip.run_cell("parrot", store_history=True)
@@ -356,6 +414,7 @@
     nt.assert_equal(len(set(_ip.user_ns['In'])), 1)
 
 def test_reset_dhist():
+    """ """
     "Test '%reset dhist' magic"
     _ip.run_cell("tmp = [d for d in _dh]") # copy before clearing
     _ip.magic('cd ' + os.path.dirname(nt.__file__))
@@ -366,23 +425,38 @@
     _ip.run_cell("_dh = [d for d in tmp]") #restore
 
 def test_reset_in_length():
+    """ """
     "Test that '%reset in' preserves In[] length"
     _ip.run_cell("print 'foo'")
     _ip.run_cell("reset -f in")
     nt.assert_equal(len(_ip.user_ns['In']), _ip.displayhook.prompt_count+1)
 
 class TestResetErrors(TestCase):
+    """ """
 
     def test_reset_redefine(self):
+        """ """
 
         @magics_class
         class KernelMagics(Magics):
+            """ """
               @line_magic
               def less(self, shell): pass
 
         _ip.register_magics(KernelMagics)
 
         with self.assertLogs() as cm:
+                """
+
+                Parameters
+                ----------
+                shell): pass_ip.register_magics(KernelMagics)with self.assertLogs( :
+                    
+
+                Returns
+                -------
+
+                """
             # hack, we want to just capture logs, but assertLogs fails if not
             # logs get produce.
             # so log one things we ignore.
@@ -415,6 +489,7 @@
 
 
 def test_time():
+    """ """
     ip = get_ipython()
     
     with tt.AssertPrints("Wall time: "):
@@ -428,6 +503,7 @@
             ip.run_cell("f('hi')")
 
 def test_time_last_not_expression():
+    """ """
     ip.run_cell("%%time\n"
                 "var_1 = 1\n"
                 "var_2 = 2\n")
@@ -439,6 +515,7 @@
 
 @dec.skip_win32
 def test_time2():
+    """ """
     ip = get_ipython()
     
     with tt.AssertPrints("CPU times: user "):
@@ -468,9 +545,7 @@
     nt.assert_equal(ip.user_ns_hidden['_'], 'hohey')
 
 def test_time_local_ns():
-    """
-    Test that local_ns is actually global_ns when running a cell magic
-    """
+    """Test that local_ns is actually global_ns when running a cell magic"""
     ip = get_ipython()
     ip.run_cell("%%time\n"
                 "myvar = 1")
@@ -478,6 +553,7 @@
     del ip.user_ns['myvar']
 
 def test_doctest_mode():
+    """ """
     "Toggle doctest_mode twice, it should be a no-op and run without error"
     _ip.magic('doctest_mode')
     _ip.magic('doctest_mode')
@@ -529,6 +605,7 @@
 
 
 def test_xmode():
+    """ """
     # Calling xmode three times should be a no-op
     xmode = _ip.InteractiveTB.mode
     for i in range(4):
@@ -536,8 +613,10 @@
     nt.assert_equal(_ip.InteractiveTB.mode, xmode)
     
 def test_reset_hard():
+    """ """
     monitor = []
     class A(object):
+        """ """
         def __del__(self):
             monitor.append(1)
         def __repr__(self):
@@ -551,6 +630,7 @@
     nt.assert_equal(monitor, [1])
     
 class TestXdel(tt.TempFileMixin):
+    """ """
     def test_xdel(self):
         """Test that references from %run are cleared by xdel."""
         src = ("class A(object):\n"
@@ -595,11 +675,19 @@
     
     In [7]: %who_ls
     Out[7]: ['alpha', 'beta']
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
 def test_whos():
     """Check that whos is protected against objects where repr() fails."""
     class A(object):
+        """ """
         def __repr__(self):
             raise Exception()
     _ip.user_ns['a'] = A()
@@ -621,6 +709,13 @@
     
     In [5]: f(3.1415927)
     Out[5]: '3.141593e+00'
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
 def test_debug_magic():
@@ -633,9 +728,17 @@
     ipdb> c
     a b
     In [2]:
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
 def test_psearch():
+    """ """
     with tt.AssertPrints("dict.fromkeys"):
         _ip.run_cell("dict.fr*?")
     with tt.AssertPrints("π.is_integer"):
@@ -653,9 +756,21 @@
 
 
 def test_timeit_special_syntax():
+    """ """
     "Test %%timeit with IPython special syntax"
     @register_line_magic
     def lmagic(line):
+        """
+
+        Parameters
+        ----------
+        line :
+            
+
+        Returns
+        -------
+
+        """
         ip = get_ipython()
         ip.user_ns['lmagic_out'] = line
 
@@ -667,34 +782,44 @@
     nt.assert_equal(_ip.user_ns['lmagic_out'], 'my line2')
 
 def test_timeit_return():
-    """
-    test whether timeit -o return object
-    """
+    """test whether timeit -o return object"""
 
     res = _ip.run_line_magic('timeit','-n10 -r10 -o 1')
     assert(res is not None)
 
 def test_timeit_quiet():
-    """
-    test quiet option of timeit magic
-    """
+    """test quiet option of timeit magic"""
     with tt.AssertNotPrints("loops"):
         _ip.run_cell("%timeit -n1 -r1 -q 1")
 
 def test_timeit_return_quiet():
+    """ """
     with tt.AssertNotPrints("loops"):
         res = _ip.run_line_magic('timeit', '-n1 -r1 -q -o 1')
     assert (res is not None)
 
 def test_timeit_invalid_return():
+    """ """
     with nt.assert_raises_regex(SyntaxError, "outside function"):
         _ip.run_line_magic('timeit', 'return')
 
 @dec.skipif(execution.profile is None)
 def test_prun_special_syntax():
+    """ """
     "Test %%prun with IPython special syntax"
     @register_line_magic
     def lmagic(line):
+        """
+
+        Parameters
+        ----------
+        line :
+            
+
+        Returns
+        -------
+
+        """
         ip = get_ipython()
         ip.user_ns['lmagic_out'] = line
 
@@ -707,11 +832,13 @@
 
 @dec.skipif(execution.profile is None)
 def test_prun_quotes():
+    """ """
     "Test that prun does not clobber string escapes (GH #1302)"
     _ip.magic(r"prun -q x = '\t'")
     nt.assert_equal(_ip.user_ns['x'], '\t')
 
 def test_extension():
+    """ """
     # Debugging information for failures of this test
     print('sys.path:')
     for p in sys.path:
@@ -733,6 +860,7 @@
 
 
 def test_notebook_export_json():
+    """ """
     _ip = get_ipython()
     _ip.history_manager.reset()   # Clear any existing history.
     cmds = [u"a=1", u"def b():\n  return a**2", u"print('noël, été', b())"]
@@ -744,12 +872,15 @@
 
 
 class TestEnv(TestCase):
+    """ """
 
     def test_env(self):
+        """ """
         env = _ip.magic("env")
         self.assertTrue(isinstance(env, dict))
 
     def test_env_secret(self):
+        """ """
         env = _ip.magic("env")
         hidden = "<hidden>"
         with mock.patch.dict(
@@ -768,6 +899,7 @@
         assert env["VAR"] == "abc"
 
     def test_env_get_set_simple(self):
+        """ """
         env = _ip.magic("env var val1")
         self.assertEqual(env, None)
         self.assertEqual(os.environ['var'], 'val1')
@@ -777,6 +909,7 @@
         self.assertEqual(os.environ['var'], 'val2')
 
     def test_env_get_set_complex(self):
+        """ """
         env = _ip.magic("env var 'val1 '' 'val2")
         self.assertEqual(env, None)
         self.assertEqual(os.environ['var'], "'val1 '' 'val2")
@@ -786,15 +919,29 @@
         self.assertEqual(os.environ['var'], 'val2 val3="val4')
 
     def test_env_set_bad_input(self):
+        """ """
         self.assertRaises(UsageError, lambda: _ip.magic("set_env var"))
 
     def test_env_set_whitespace(self):
+        """ """
         self.assertRaises(UsageError, lambda: _ip.magic("env var A=B"))
 
 
 class CellMagicTestCase(TestCase):
+    """ """
 
     def check_ident(self, magic):
+        """
+
+        Parameters
+        ----------
+        magic :
+            
+
+        Returns
+        -------
+
+        """
         # Manually called, we get the result
         out = _ip.run_cell_magic(magic, 'a', 'b')
         nt.assert_equal(out, ('a','b'))
@@ -803,40 +950,98 @@
         nt.assert_equal(_ip.user_ns['_'], ('c','d\n'))
 
     def test_cell_magic_func_deco(self):
+        """ """
         "Cell magic using simple decorator"
         @register_cell_magic
         def cellm(line, cell):
+            """
+
+            Parameters
+            ----------
+            line :
+                
+            cell :
+                
+
+            Returns
+            -------
+
+            """
             return line, cell
 
         self.check_ident('cellm')
 
     def test_cell_magic_reg(self):
+        """ """
         "Cell magic manually registered"
         def cellm(line, cell):
+            """
+
+            Parameters
+            ----------
+            line :
+                
+            cell :
+                
+
+            Returns
+            -------
+
+            """
             return line, cell
 
         _ip.register_magic_function(cellm, 'cell', 'cellm2')
         self.check_ident('cellm2')
 
     def test_cell_magic_class(self):
+        """ """
         "Cell magics declared via a class"
         @magics_class
         class MyMagics(Magics):
+            """ """
 
             @cell_magic
             def cellm3(self, line, cell):
+                """
+
+                Parameters
+                ----------
+                line :
+                    
+                cell :
+                    
+
+                Returns
+                -------
+
+                """
                 return line, cell
 
         _ip.register_magics(MyMagics)
         self.check_ident('cellm3')
 
     def test_cell_magic_class2(self):
+        """ """
         "Cell magics declared via a class, #2"
         @magics_class
         class MyMagics2(Magics):
+            """ """
 
             @cell_magic('cellm4')
             def cellm33(self, line, cell):
+                """
+
+                Parameters
+                ----------
+                line :
+                    
+                cell :
+                    
+
+                Returns
+                -------
+
+                """
                 return line, cell
             
         _ip.register_magics(MyMagics2)
@@ -951,6 +1156,7 @@
         nt.assert_in('line2', s)
     
 def test_script_config():
+    """ """
     ip = get_ipython()
     ip.config.ScriptMagics.script_magics = ['whoda']
     sm = script.ScriptMagics(shell=ip)
@@ -958,18 +1164,21 @@
 
 @dec.skip_win32
 def test_script_out():
+    """ """
     ip = get_ipython()
     ip.run_cell_magic("script", "--out output sh", "echo 'hi'")
     nt.assert_equal(ip.user_ns['output'], 'hi\n')
 
 @dec.skip_win32
 def test_script_err():
+    """ """
     ip = get_ipython()
     ip.run_cell_magic("script", "--err error sh", "echo 'hello' >&2")
     nt.assert_equal(ip.user_ns['error'], 'hello\n')
 
 @dec.skip_win32
 def test_script_out_err():
+    """ """
     ip = get_ipython()
     ip.run_cell_magic("script", "--out output --err error sh", "echo 'hi'\necho 'hello' >&2")
     nt.assert_equal(ip.user_ns['output'], 'hi\n')
@@ -977,6 +1186,7 @@
 
 @dec.skip_win32
 def test_script_bg_out():
+    """ """
     ip = get_ipython()
     ip.run_cell_magic("script", "--bg --out output sh", "echo 'hi'")
 
@@ -985,6 +1195,7 @@
 
 @dec.skip_win32
 def test_script_bg_err():
+    """ """
     ip = get_ipython()
     ip.run_cell_magic("script", "--bg --err error sh", "echo 'hello' >&2")
     nt.assert_equal(ip.user_ns['error'].read(), b'hello\n')
@@ -992,6 +1203,7 @@
 
 @dec.skip_win32
 def test_script_bg_out_err():
+    """ """
     ip = get_ipython()
     ip.run_cell_magic("script", "--bg --out output --err error sh", "echo 'hi'\necho 'hello' >&2")
     nt.assert_equal(ip.user_ns['output'].read(), b'hi\n')
@@ -1000,6 +1212,7 @@
     ip.user_ns['error'].close()
 
 def test_script_defaults():
+    """ """
     ip = get_ipython()
     for cmd in ['sh', 'bash', 'perl', 'ruby']:
         try:
@@ -1015,11 +1228,35 @@
     """class with both %foo and %%foo magics"""
     @line_magic('foo')
     def line_foo(self, line):
+        """
+
+        Parameters
+        ----------
+        line :
+            
+
+        Returns
+        -------
+
+        """
         "I am line foo"
         pass
 
     @cell_magic("foo")
     def cell_foo(self, line, cell):
+        """
+
+        Parameters
+        ----------
+        line :
+            
+        cell :
+            
+
+        Returns
+        -------
+
+        """
         "I am cell foo, not line foo"
         pass
 
@@ -1042,6 +1279,7 @@
     nt.assert_equal(oinfo['docstring'], FooFoo.line_foo.__doc__)
 
 def test_multiple_magics():
+    """ """
     ip = get_ipython()
     foo1 = FooFoo(ip)
     foo2 = FooFoo(ip)
@@ -1120,6 +1358,25 @@
                         exp_lineno=-1,
                         exp_contents=None,
                         exp_is_temp=None):
+    """
+
+    Parameters
+    ----------
+    arg_s :
+        
+    exp_filename :
+         (Default value = None)
+    exp_lineno :
+         (Default value = -1)
+    exp_contents :
+         (Default value = None)
+    exp_is_temp :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     ip = get_ipython()
     M = code.CodeMagics(ip)
     last_call = ['','']
@@ -1162,6 +1419,7 @@
     _run_edit_test("1", exp_contents=ip.user_ns['In'][1], exp_is_temp=True)
 
 def test_bookmark():
+    """ """
     ip = get_ipython()
     ip.run_line_magic('bookmark', 'bmname')
     with tt.AssertPrints('bmname'):
@@ -1169,6 +1427,7 @@
     ip.run_line_magic('bookmark', '-d bmname')
 
 def test_ls_magic():
+    """ """
     ip = get_ipython()
     json_formatter = ip.display_formatter.formatters['application/json']
     json_formatter.enabled = True
@@ -1179,7 +1438,19 @@
     nt.assert_equal(w, []) # no warnings
 
 def test_strip_initial_indent():
+    """ """
     def sii(s):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+
+        Returns
+        -------
+
+        """
         lines = s.splitlines()
         return '\n'.join(code.strip_initial_indent(lines))
 
@@ -1188,6 +1459,7 @@
     nt.assert_equal(sii("a\n  b"), "a\n  b")
 
 def test_logging_magic_quiet_from_arg():
+    """ """
     _ip.config.LoggingMagics.quiet = False
     lm = logging.LoggingMagics(shell=_ip)
     with TemporaryDirectory() as td:
@@ -1199,6 +1471,7 @@
             _ip.logger.logstop()
 
 def test_logging_magic_quiet_from_config():
+    """ """
     _ip.config.LoggingMagics.quiet = True
     lm = logging.LoggingMagics(shell=_ip)
     with TemporaryDirectory() as td:
@@ -1210,6 +1483,7 @@
 
 
 def test_logging_magic_not_quiet():
+    """ """
     _ip.config.LoggingMagics.quiet = False
     lm = logging.LoggingMagics(shell=_ip)
     with TemporaryDirectory() as td:
@@ -1221,6 +1495,7 @@
 
 
 def test_time_no_var_expand():
+    """ """
     _ip.user_ns['a'] = 5
     _ip.user_ns['b'] = []
     _ip.magic('time b.append("{a}")')
@@ -1229,6 +1504,7 @@
 
 # this is slow, put at the end for local testing.
 def test_timeit_arguments():
+    """ """
     "Test valid timeit arguments, should not cause SyntaxError (GH #1269)"
     if sys.version_info < (3,7):
         _ip.magic("timeit -n1 -r1 ('#')")
