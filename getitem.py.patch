# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/extension/base/getitem.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/extension/base/getitem.py
@@ -10,6 +10,17 @@
     """Tests for ExtensionArray.__getitem__."""
 
     def test_iloc_series(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         ser = pd.Series(data)
         result = ser.iloc[:4]
         expected = pd.Series(data[:4])
@@ -19,6 +30,17 @@
         self.assert_series_equal(result, expected)
 
     def test_iloc_frame(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         df = pd.DataFrame({"A": data, "B": np.arange(len(data), dtype="int64")})
         expected = pd.DataFrame({"A": data[:4]})
 
@@ -47,6 +69,17 @@
         self.assert_frame_equal(result, df[["B"]])
 
     def test_iloc_frame_single_block(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # GH#32959 null slice along index, slice along columns with single-block
         df = pd.DataFrame({"A": data})
 
@@ -69,6 +102,17 @@
         self.assert_frame_equal(result, df)
 
     def test_loc_series(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         ser = pd.Series(data)
         result = ser.loc[:3]
         expected = pd.Series(data[:4])
@@ -78,6 +122,17 @@
         self.assert_series_equal(result, expected)
 
     def test_loc_frame(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         df = pd.DataFrame({"A": data, "B": np.arange(len(data), dtype="int64")})
         expected = pd.DataFrame({"A": data[:4]})
 
@@ -100,6 +155,17 @@
         self.assert_series_equal(result, expected)
 
     def test_loc_iloc_frame_single_dtype(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # GH#27110 bug in ExtensionBlock.iget caused df.iloc[n] to incorrectly
         #  return a scalar
         df = pd.DataFrame({"A": data})
@@ -115,6 +181,17 @@
         self.assert_series_equal(result, expected)
 
     def test_getitem_scalar(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         result = data[0]
         assert isinstance(result, data.dtype.type)
 
@@ -122,10 +199,36 @@
         assert isinstance(result, data.dtype.type)
 
     def test_getitem_scalar_na(self, data_missing, na_cmp, na_value):
+        """
+
+        Parameters
+        ----------
+        data_missing :
+            
+        na_cmp :
+            
+        na_value :
+            
+
+        Returns
+        -------
+
+        """
         result = data_missing[0]
         assert na_cmp(result, na_value)
 
     def test_getitem_empty(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # Indexing with empty list
         result = data[[]]
         assert len(result) == 0
@@ -135,6 +238,17 @@
         self.assert_extension_array_equal(result, expected)
 
     def test_getitem_mask(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # Empty mask, raw array
         mask = np.zeros(len(data), dtype=bool)
         result = data[mask]
@@ -159,6 +273,17 @@
         assert result.dtype == data.dtype
 
     def test_getitem_mask_raises(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         mask = np.array([True, False])
         with pytest.raises(IndexError):
             data[mask]
@@ -168,6 +293,17 @@
             data[mask]
 
     def test_getitem_boolean_array_mask(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         mask = pd.array(np.zeros(data.shape, dtype="bool"), dtype="boolean")
         result = data[mask]
         assert len(result) == 0
@@ -187,6 +323,17 @@
         self.assert_series_equal(result, expected)
 
     def test_getitem_boolean_na_treated_as_false(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # https://github.com/pandas-dev/pandas/issues/31503
         mask = pd.array(np.zeros(data.shape, dtype="bool"), dtype="boolean")
         mask[:2] = pd.NA
@@ -210,6 +357,19 @@
         ids=["list", "integer-array", "numpy-array"],
     )
     def test_getitem_integer_array(self, data, idx):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        idx :
+            
+
+        Returns
+        -------
+
+        """
         result = data[idx]
         assert len(result) == 3
         assert isinstance(result, type(data))
@@ -226,6 +386,19 @@
         ids=["list", "integer-array"],
     )
     def test_getitem_integer_with_missing_raises(self, data, idx):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        idx :
+            
+
+        Returns
+        -------
+
+        """
         msg = "Cannot index with an integer indexer containing NA values"
         with pytest.raises(ValueError, match=msg):
             data[idx]
@@ -238,6 +411,17 @@
         #    s[idx]
 
     def test_getitem_slice(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # getitem[slice] should return an array
         result = data[slice(0)]  # empty
         assert isinstance(result, type(data))
@@ -246,6 +430,17 @@
         assert isinstance(result, type(data))
 
     def test_get(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # GH 20882
         s = pd.Series(data, index=[2 * i for i in range(len(data))])
         assert s.get(4) == s.iloc[2]
@@ -281,12 +476,38 @@
         assert s2.get(1) is None
 
     def test_take_sequence(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         result = pd.Series(data)[[0, 1, 3]]
         assert result.iloc[0] == data[0]
         assert result.iloc[1] == data[1]
         assert result.iloc[2] == data[3]
 
     def test_take(self, data, na_value, na_cmp):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        na_value :
+            
+        na_cmp :
+            
+
+        Returns
+        -------
+
+        """
         result = data.take([0, -1])
         assert result.dtype == data.dtype
         assert result[0] == data[0]
@@ -300,6 +521,21 @@
             data.take([len(data) + 1])
 
     def test_take_empty(self, data, na_value, na_cmp):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        na_value :
+            
+        na_cmp :
+            
+
+        Returns
+        -------
+
+        """
         empty = data[:0]
 
         result = empty.take([-1], allow_fill=True)
@@ -312,6 +548,17 @@
             empty.take([0, 1])
 
     def test_take_negative(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # https://github.com/pandas-dev/pandas/issues/20640
         n = len(data)
         result = data.take([0, -n, n - 1, -1])
@@ -319,6 +566,17 @@
         self.assert_extension_array_equal(result, expected)
 
     def test_take_non_na_fill_value(self, data_missing):
+        """
+
+        Parameters
+        ----------
+        data_missing :
+            
+
+        Returns
+        -------
+
+        """
         fill_value = data_missing[1]  # valid
         na = data_missing[0]
 
@@ -330,16 +588,53 @@
         self.assert_extension_array_equal(result, expected)
 
     def test_take_pandas_style_negative_raises(self, data, na_value):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        na_value :
+            
+
+        Returns
+        -------
+
+        """
         with pytest.raises(ValueError):
             data.take([0, -2], fill_value=na_value, allow_fill=True)
 
     @pytest.mark.parametrize("allow_fill", [True, False])
     def test_take_out_of_bounds_raises(self, data, allow_fill):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        allow_fill :
+            
+
+        Returns
+        -------
+
+        """
         arr = data[:3]
         with pytest.raises(IndexError):
             arr.take(np.asarray([0, 3]), allow_fill=allow_fill)
 
     def test_take_series(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         s = pd.Series(data)
         result = s.take([0, -1])
         expected = pd.Series(
@@ -349,6 +644,19 @@
         self.assert_series_equal(result, expected)
 
     def test_reindex(self, data, na_value):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        na_value :
+            
+
+        Returns
+        -------
+
+        """
         s = pd.Series(data)
         result = s.reindex([0, 1, 3])
         expected = pd.Series(data.take([0, 1, 3]), index=[0, 1, 3])
@@ -369,6 +677,17 @@
         self.assert_series_equal(result, expected)
 
     def test_reindex_non_na_fill_value(self, data_missing):
+        """
+
+        Parameters
+        ----------
+        data_missing :
+            
+
+        Returns
+        -------
+
+        """
         valid = data_missing[1]
         na = data_missing[0]
 
@@ -382,12 +701,34 @@
         self.assert_series_equal(result, expected)
 
     def test_loc_len1(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # see GH-27785 take_nd with indexer of len 1 resulting in wrong ndim
         df = pd.DataFrame({"A": data})
         res = df.loc[[0], "A"]
         assert res._mgr._block.ndim == 1
 
     def test_item(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # https://github.com/pandas-dev/pandas/pull/30175
         s = pd.Series(data)
         result = s[:1].item()
