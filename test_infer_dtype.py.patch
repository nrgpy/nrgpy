# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/dtypes/cast/test_infer_dtype.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/dtypes/cast/test_infer_dtype.py
@@ -24,10 +24,32 @@
 
 @pytest.fixture(params=[True, False])
 def pandas_dtype(request):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     return request.param
 
 
 def test_infer_dtype_from_int_scalar(any_int_dtype):
+    """
+
+    Parameters
+    ----------
+    any_int_dtype :
+        
+
+    Returns
+    -------
+
+    """
     # Test that infer_dtype_from_scalar is
     # returning correct dtype for int and float.
     data = np.dtype(any_int_dtype).type(12)
@@ -36,6 +58,17 @@
 
 
 def test_infer_dtype_from_float_scalar(float_dtype):
+    """
+
+    Parameters
+    ----------
+    float_dtype :
+        
+
+    Returns
+    -------
+
+    """
     float_dtype = np.dtype(float_dtype).type
     data = float_dtype(12)
 
@@ -47,17 +80,52 @@
     "data,exp_dtype", [(12, np.int64), (np.float_(12), np.float64)]
 )
 def test_infer_dtype_from_python_scalar(data, exp_dtype):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+    exp_dtype :
+        
+
+    Returns
+    -------
+
+    """
     dtype, val = infer_dtype_from_scalar(data)
     assert dtype == exp_dtype
 
 
 @pytest.mark.parametrize("bool_val", [True, False])
 def test_infer_dtype_from_boolean(bool_val):
+    """
+
+    Parameters
+    ----------
+    bool_val :
+        
+
+    Returns
+    -------
+
+    """
     dtype, val = infer_dtype_from_scalar(bool_val)
     assert dtype == np.bool_
 
 
 def test_infer_dtype_from_complex(complex_dtype):
+    """
+
+    Parameters
+    ----------
+    complex_dtype :
+        
+
+    Returns
+    -------
+
+    """
     data = np.dtype(complex_dtype).type(1)
     dtype, val = infer_dtype_from_scalar(data)
     assert dtype == np.complex_
@@ -67,18 +135,53 @@
     "data", [np.datetime64(1, "ns"), Timestamp(1), datetime(2000, 1, 1, 0, 0)]
 )
 def test_infer_dtype_from_datetime(data):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+
+    Returns
+    -------
+
+    """
     dtype, val = infer_dtype_from_scalar(data)
     assert dtype == "M8[ns]"
 
 
 @pytest.mark.parametrize("data", [np.timedelta64(1, "ns"), Timedelta(1), timedelta(1)])
 def test_infer_dtype_from_timedelta(data):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+
+    Returns
+    -------
+
+    """
     dtype, val = infer_dtype_from_scalar(data)
     assert dtype == "m8[ns]"
 
 
 @pytest.mark.parametrize("freq", ["M", "D"])
 def test_infer_dtype_from_period(freq, pandas_dtype):
+    """
+
+    Parameters
+    ----------
+    freq :
+        
+    pandas_dtype :
+        
+
+    Returns
+    -------
+
+    """
     p = Period("2011-01-01", freq=freq)
     dtype, val = infer_dtype_from_scalar(p, pandas_dtype=pandas_dtype)
 
@@ -97,12 +200,36 @@
     "data", [date(2000, 1, 1), "foo", Timestamp(1, tz="US/Eastern")]
 )
 def test_infer_dtype_misc(data):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+
+    Returns
+    -------
+
+    """
     dtype, val = infer_dtype_from_scalar(data)
     assert dtype == np.object_
 
 
 @pytest.mark.parametrize("tz", ["UTC", "US/Eastern", "Asia/Tokyo"])
 def test_infer_from_scalar_tz(tz, pandas_dtype):
+    """
+
+    Parameters
+    ----------
+    tz :
+        
+    pandas_dtype :
+        
+
+    Returns
+    -------
+
+    """
     dt = Timestamp(1, tz=tz)
     dtype, val = infer_dtype_from_scalar(dt, pandas_dtype=pandas_dtype)
 
@@ -128,6 +255,25 @@
     ],
 )
 def test_infer_from_interval(left, right, subtype, closed, pandas_dtype):
+    """
+
+    Parameters
+    ----------
+    left :
+        
+    right :
+        
+    subtype :
+        
+    closed :
+        
+    pandas_dtype :
+        
+
+    Returns
+    -------
+
+    """
     # GH 30337
     interval = Interval(left, right, closed)
     result_dtype, result_value = infer_dtype_from_scalar(interval, pandas_dtype)
@@ -137,6 +283,7 @@
 
 
 def test_infer_dtype_from_scalar_errors():
+    """ """
     msg = "invalid ndarray passed to infer_dtype_from_scalar"
 
     with pytest.raises(ValueError, match=msg):
@@ -176,6 +323,21 @@
     ],
 )
 def test_infer_dtype_from_array(arr, expected, pandas_dtype):
+    """
+
+    Parameters
+    ----------
+    arr :
+        
+    expected :
+        
+    pandas_dtype :
+        
+
+    Returns
+    -------
+
+    """
     dtype, _ = infer_dtype_from_array(arr, pandas_dtype=pandas_dtype)
     assert is_dtype_equal(dtype, expected)
 
@@ -191,6 +353,19 @@
     ],
 )
 def test_cast_scalar_to_array(obj, dtype):
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+    dtype :
+        
+
+    Returns
+    -------
+
+    """
     shape = (3, 2)
 
     exp = np.empty(shape, dtype=dtype)
