# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jupyter_client/tests/test_kernelmanager.py
+++ b/..//venv/lib/python3.8/site-packages/jupyter_client/tests/test_kernelmanager.py
@@ -30,6 +30,7 @@
 
 @pytest.fixture(autouse=True)
 def env():
+    """ """
     env_patch = test_env()
     env_patch.start()
     yield
@@ -38,6 +39,17 @@
 
 @pytest.fixture(params=['tcp', 'ipc'])
 def transport(request):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     if sys.platform == 'win32' and request.param == 'ipc':  #
         pytest.skip("Transport 'ipc' not supported on Windows.")
     return request.param
@@ -45,6 +57,17 @@
 
 @pytest.fixture
 def config(transport):
+    """
+
+    Parameters
+    ----------
+    transport :
+        
+
+    Returns
+    -------
+
+    """
     c = Config()
     c.KernelManager.transport = transport
     if transport == 'ipc':
@@ -54,6 +77,7 @@
 
 @pytest.fixture
 def install_kernel():
+    """ """
     kernel_dir = pjoin(paths.jupyter_data_dir(), 'kernels', 'signaltest')
     os.makedirs(kernel_dir)
     with open(pjoin(kernel_dir, 'kernel.json'), 'w') as f:
@@ -68,6 +92,7 @@
 
 @pytest.fixture
 def start_kernel():
+    """ """
     km, kc = start_new_kernel(kernel_name='signaltest')
     yield km, kc
     kc.stop_channels()
@@ -77,6 +102,7 @@
 
 @pytest.fixture
 def start_kernel_w_env():
+    """ """
     kernel_cmd = [sys.executable,
                   '-m', 'jupyter_client.tests.signalkernel',
                   '-f', '{connection_file}']
@@ -98,12 +124,24 @@
 
 @pytest.fixture
 def km(config):
+    """
+
+    Parameters
+    ----------
+    config :
+        
+
+    Returns
+    -------
+
+    """
     km = KernelManager(config=config)
     return km
 
 
 @pytest.fixture
 def zmq_context():
+    """ """
     import zmq
     ctx = zmq.Context()
     yield ctx
@@ -112,6 +150,19 @@
 
 @pytest.fixture(params=[AsyncKernelManager, AsyncKernelManagerSubclass, AsyncKernelManagerWithCleanup])
 def async_km(request, config):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+    config :
+        
+
+    Returns
+    -------
+
+    """
     km = request.param(config=config)
     return km
 
@@ -127,8 +178,20 @@
 
 
 class TestKernelManager:
+    """ """
 
     def test_lifecycle(self, km):
+        """
+
+        Parameters
+        ----------
+        km :
+            
+
+        Returns
+        -------
+
+        """
         km.start_kernel(stdout=PIPE, stderr=PIPE)
         assert km.is_alive()
         km.restart_kernel(now=True)
@@ -139,6 +202,17 @@
         assert km.context.closed
 
     def test_get_connect_info(self, km):
+        """
+
+        Parameters
+        ----------
+        km :
+            
+
+        Returns
+        -------
+
+        """
         cinfo = km.get_connection_info()
         keys = sorted(cinfo.keys())
         expected = sorted([
@@ -150,10 +224,34 @@
 
     @pytest.mark.skipif(sys.platform == 'win32', reason="Windows doesn't support signals")
     def test_signal_kernel_subprocesses(self, install_kernel, start_kernel):
+        """
+
+        Parameters
+        ----------
+        install_kernel :
+            
+        start_kernel :
+            
+
+        Returns
+        -------
+
+        """
 
         km, kc = start_kernel
 
         def execute(cmd):
+            """
+
+            Parameters
+            ----------
+            cmd :
+                
+
+            Returns
+            -------
+
+            """
             kc.execute(cmd)
             reply = kc.get_shell_msg(TIMEOUT)
             content = reply['content']
@@ -186,13 +284,48 @@
         assert reply['user_expressions']['poll'] == [-signal.SIGINT] * N
 
     def test_start_new_kernel(self, install_kernel, start_kernel):
+        """
+
+        Parameters
+        ----------
+        install_kernel :
+            
+        start_kernel :
+            
+
+        Returns
+        -------
+
+        """
         km, kc = start_kernel
         assert km.is_alive()
         assert kc.is_alive()
         assert km.context.closed is False
 
     def _env_test_body(self, kc):
+        """
+
+        Parameters
+        ----------
+        kc :
+            
+
+        Returns
+        -------
+
+        """
         def execute(cmd):
+            """
+
+            Parameters
+            ----------
+            cmd :
+                
+
+            Returns
+            -------
+
+            """
             kc.execute(cmd)
             reply = kc.get_shell_msg(TIMEOUT)
             content = reply['content']
@@ -204,6 +337,19 @@
         assert reply['user_expressions']['env'] == 'test_var_1:test_var_2'
 
     def test_templated_kspec_env(self, install_kernel, start_kernel):
+        """
+
+        Parameters
+        ----------
+        install_kernel :
+            
+        start_kernel :
+            
+
+        Returns
+        -------
+
+        """
         km, kc = start_kernel
         assert km.is_alive()
         assert kc.is_alive()
@@ -211,6 +357,19 @@
         self._env_test_body(kc)
 
     def test_templated_extra_env(self, install_kernel, start_kernel_w_env):
+        """
+
+        Parameters
+        ----------
+        install_kernel :
+            
+        start_kernel_w_env :
+            
+
+        Returns
+        -------
+
+        """
         km, kc = start_kernel_w_env
         assert km.is_alive()
         assert kc.is_alive()
@@ -218,12 +377,33 @@
         self._env_test_body(kc)
 
     def test_cleanup_context(self, km):
+        """
+
+        Parameters
+        ----------
+        km :
+            
+
+        Returns
+        -------
+
+        """
         assert km.context is not None
         km.cleanup_resources(restart=False)
         assert km.context.closed
 
     def test_no_cleanup_shared_context(self, zmq_context):
-        """kernel manager does not terminate shared context"""
+        """kernel manager does not terminate shared context
+
+        Parameters
+        ----------
+        zmq_context :
+            
+
+        Returns
+        -------
+
+        """
         km = KernelManager(context=zmq_context)
         assert km.context == zmq_context
         assert km.context is not None
@@ -234,16 +414,42 @@
 
 
 class TestParallel:
+    """ """
 
     @pytest.mark.timeout(TIMEOUT)
     def test_start_sequence_kernels(self, config, install_kernel):
-        """Ensure that a sequence of kernel startups doesn't break anything."""
+        """Ensure that a sequence of kernel startups doesn't break anything.
+
+        Parameters
+        ----------
+        config :
+            
+        install_kernel :
+            
+
+        Returns
+        -------
+
+        """
         self._run_signaltest_lifecycle(config)
         self._run_signaltest_lifecycle(config)
         self._run_signaltest_lifecycle(config)
 
     @pytest.mark.timeout(TIMEOUT)
     def test_start_parallel_thread_kernels(self, config, install_kernel):
+        """
+
+        Parameters
+        ----------
+        config :
+            
+        install_kernel :
+            
+
+        Returns
+        -------
+
+        """
         if config.KernelManager.transport == 'ipc':  # FIXME
             pytest.skip("IPC transport is currently not working for this test!")
         self._run_signaltest_lifecycle(config)
@@ -259,6 +465,19 @@
 
     @pytest.mark.timeout(TIMEOUT)
     def test_start_parallel_process_kernels(self, config, install_kernel):
+        """
+
+        Parameters
+        ----------
+        config :
+            
+        install_kernel :
+            
+
+        Returns
+        -------
+
+        """
         if config.KernelManager.transport == 'ipc':  # FIXME
             pytest.skip("IPC transport is currently not working for this test!")
         self._run_signaltest_lifecycle(config)
@@ -275,6 +494,19 @@
 
     @pytest.mark.timeout(TIMEOUT)
     def test_start_sequence_process_kernels(self, config, install_kernel):
+        """
+
+        Parameters
+        ----------
+        config :
+            
+        install_kernel :
+            
+
+        Returns
+        -------
+
+        """
         self._run_signaltest_lifecycle(config)
         proc = mp.Process(target=self._run_signaltest_lifecycle, args=(config,))
         try:
@@ -285,6 +517,21 @@
         assert proc.exitcode == 0
 
     def _prepare_kernel(self, km, startup_timeout=TIMEOUT, **kwargs):
+        """
+
+        Parameters
+        ----------
+        km :
+            
+        startup_timeout :
+             (Default value = TIMEOUT)
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         km.start_kernel(**kwargs)
         kc = km.client()
         kc.start_channels()
@@ -298,10 +545,32 @@
         return kc
 
     def _run_signaltest_lifecycle(self, config=None):
+        """
+
+        Parameters
+        ----------
+        config :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         km = KernelManager(config=config, kernel_name='signaltest')
         kc = self._prepare_kernel(km, stdout=PIPE, stderr=PIPE)
 
         def execute(cmd):
+            """
+
+            Parameters
+            ----------
+            cmd :
+                
+
+            Returns
+            -------
+
+            """
             kc.execute(cmd)
             reply = kc.get_shell_msg(TIMEOUT)
             content = reply['content']
@@ -323,6 +592,7 @@
 
 @pytest.mark.asyncio
 class TestAsyncKernelManager:
+    """ """
 
     async def test_lifecycle(self, async_km):
         await async_km.start_kernel(stdout=PIPE, stderr=PIPE)
