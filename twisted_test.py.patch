# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tornado/test/twisted_test.py
+++ b/..//venv/lib/python3.8/site-packages/tornado/test/twisted_test.py
@@ -50,6 +50,7 @@
 
 
 def save_signal_handlers():
+    """ """
     saved = {}
     signals = [signal.SIGINT, signal.SIGTERM]
     if hasattr(signal, "SIGCHLD"):
@@ -63,6 +64,17 @@
 
 
 def restore_signal_handlers(saved):
+    """
+
+    Parameters
+    ----------
+    saved :
+        
+
+    Returns
+    -------
+
+    """
     for sig, handler in saved.items():
         signal.signal(sig, handler)
 
@@ -73,7 +85,9 @@
 
 @skipIfNoTwisted
 class CompatibilityTests(unittest.TestCase):
+    """ """
     def setUp(self):
+        """ """
         self.saved_signals = save_signal_handlers()
         self.saved_policy = asyncio.get_event_loop_policy()
         if hasattr(asyncio, "WindowsSelectorEventLoopPolicy"):
@@ -87,6 +101,7 @@
         self.reactor = AsyncioSelectorReactor()
 
     def tearDown(self):
+        """ """
         self.reactor.disconnectAll()
         self.io_loop.clear_current()
         self.io_loop.close(all_fds=True)
@@ -94,10 +109,23 @@
         restore_signal_handlers(self.saved_signals)
 
     def start_twisted_server(self):
+        """ """
         class HelloResource(Resource):
+            """ """
             isLeaf = True
 
             def render_GET(self, request):
+                """
+
+                Parameters
+                ----------
+                request :
+                    
+
+                Returns
+                -------
+
+                """
                 return b"Hello from twisted!"
 
         site = Site(HelloResource())
@@ -105,8 +133,11 @@
         self.twisted_port = port.getHost().port
 
     def start_tornado_server(self):
+        """ """
         class HelloHandler(RequestHandler):
+            """ """
             def get(self):
+                """ """
                 self.write("Hello from tornado!")
 
         app = Application([("/", HelloHandler)], log_function=lambda x: None)
@@ -115,6 +146,7 @@
         server.add_sockets([sock])
 
     def run_reactor(self):
+        """ """
         # In theory, we can run the event loop through Tornado,
         # Twisted, or asyncio interfaces. However, since we're trying
         # to avoid installing anything as the global event loop, only
@@ -127,6 +159,19 @@
         self.reactor.run()
 
     def tornado_fetch(self, url, runner):
+        """
+
+        Parameters
+        ----------
+        url :
+            
+        runner :
+            
+
+        Returns
+        -------
+
+        """
         client = AsyncHTTPClient()
         fut = asyncio.ensure_future(client.fetch(url))
         fut.add_done_callback(lambda f: self.stop_loop())
@@ -134,22 +179,69 @@
         return fut.result()
 
     def twisted_fetch(self, url, runner):
+        """
+
+        Parameters
+        ----------
+        url :
+            
+        runner :
+            
+
+        Returns
+        -------
+
+        """
         # http://twistedmatrix.com/documents/current/web/howto/client.html
         chunks = []
         client = Agent(self.reactor)
         d = client.request(b"GET", utf8(url))
 
         class Accumulator(Protocol):
+            """ """
             def __init__(self, finished):
                 self.finished = finished
 
             def dataReceived(self, data):
+                """
+
+                Parameters
+                ----------
+                data :
+                    
+
+                Returns
+                -------
+
+                """
                 chunks.append(data)
 
             def connectionLost(self, reason):
+                """
+
+                Parameters
+                ----------
+                reason :
+                    
+
+                Returns
+                -------
+
+                """
                 self.finished.callback(None)
 
         def callback(response):
+            """
+
+            Parameters
+            ----------
+            response :
+                
+
+            Returns
+            -------
+
+            """
             finished = Deferred()
             response.deliverBody(Accumulator(finished))
             return finished
@@ -157,6 +249,17 @@
         d.addCallback(callback)
 
         def shutdown(failure):
+            """
+
+            Parameters
+            ----------
+            failure :
+                
+
+            Returns
+            -------
+
+            """
             if hasattr(self, "stop_loop"):
                 self.stop_loop()
             elif failure is not None:
@@ -174,10 +277,24 @@
         return b"".join(chunks)
 
     def twisted_coroutine_fetch(self, url, runner):
+        """
+
+        Parameters
+        ----------
+        url :
+            
+        runner :
+            
+
+        Returns
+        -------
+
+        """
         body = [None]
 
         @gen.coroutine
         def f():
+            """ """
             # This is simpler than the non-coroutine version, but it cheats
             # by reading the body in one blob instead of streaming it with
             # a Protocol.
@@ -195,6 +312,7 @@
         return body[0]
 
     def testTwistedServerTornadoClientReactor(self):
+        """ """
         self.start_twisted_server()
         response = self.tornado_fetch(
             "http://127.0.0.1:%d" % self.twisted_port, self.run_reactor
@@ -202,6 +320,7 @@
         self.assertEqual(response.body, b"Hello from twisted!")
 
     def testTornadoServerTwistedClientReactor(self):
+        """ """
         self.start_tornado_server()
         response = self.twisted_fetch(
             "http://127.0.0.1:%d" % self.tornado_port, self.run_reactor
@@ -209,6 +328,7 @@
         self.assertEqual(response, b"Hello from tornado!")
 
     def testTornadoServerTwistedCoroutineClientReactor(self):
+        """ """
         self.start_tornado_server()
         response = self.twisted_coroutine_fetch(
             "http://127.0.0.1:%d" % self.tornado_port, self.run_reactor
@@ -218,10 +338,13 @@
 
 @skipIfNoTwisted
 class ConvertDeferredTest(AsyncTestCase):
+    """ """
     @gen_test
     def test_success(self):
+        """ """
         @inlineCallbacks
         def fn():
+            """ """
             if False:
                 # inlineCallbacks doesn't work with regular functions;
                 # must have a yield even if it's unreachable.
@@ -233,8 +356,10 @@
 
     @gen_test
     def test_failure(self):
+        """ """
         @inlineCallbacks
         def fn():
+            """ """
             if False:
                 yield
             1 / 0
