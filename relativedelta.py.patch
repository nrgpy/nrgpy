# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/dateutil/relativedelta.py
+++ b/..//venv/lib/python3.8/site-packages/dateutil/relativedelta.py
@@ -16,39 +16,38 @@
 
 
 class relativedelta(object):
-    """
-    The relativedelta type is designed to be applied to an existing datetime and
+    """The relativedelta type is designed to be applied to an existing datetime and
     can replace specific components of that datetime, or represents an interval
     of time.
-
+    
     It is based on the specification of the excellent work done by M.-A. Lemburg
     in his
     `mx.DateTime <https://www.egenix.com/products/python/mxBase/mxDateTime/>`_ extension.
     However, notice that this type does *NOT* implement the same algorithm as
     his work. Do *NOT* expect it to behave like mx.DateTime's counterpart.
-
+    
     There are two different ways to build a relativedelta instance. The
     first one is passing it two date/datetime classes::
-
+    
         relativedelta(datetime1, datetime2)
-
+    
     The second one is passing it any number of the following keyword arguments::
-
+    
         relativedelta(arg1=x,arg2=y,arg3=z...)
-
+    
         year, month, day, hour, minute, second, microsecond:
             Absolute information (argument is singular); adding or subtracting a
             relativedelta with absolute information does not perform an arithmetic
             operation, but rather REPLACES the corresponding value in the
             original datetime with the value(s) in relativedelta.
-
+    
         years, months, weeks, days, hours, minutes, seconds, microseconds:
             Relative information, may be negative (argument is plural); adding
             or subtracting a relativedelta with relative information performs
             the corresponding arithmetic operation on the original datetime value
             with the information in the relativedelta.
-
-        weekday: 
+    
+        weekday:
             One of the weekday instances (MO, TU, etc) available in the
             relativedelta module. These instances may receive a parameter N,
             specifying the Nth weekday, which could be positive or negative
@@ -58,35 +57,58 @@
             or MO(-1) won't change the day. To effectively make it absolute, use
             it in combination with the day argument (e.g. day=1, MO(1) for first
             Monday of the month).
-
+    
         leapdays:
             Will add given days to the date found, if year is a leap
             year, and the date found is post 28 of february.
-
+    
         yearday, nlyearday:
             Set the yearday or the non-leap year day (jump leap days).
             These are converted to day/month/leapdays information.
-
+    
     There are relative and absolute forms of the keyword
-    arguments. The plural is relative, and the singular is
-    absolute. For each argument in the order below, the absolute form
-    is applied first (by setting each attribute to that value) and
-    then the relative form (by adding the value to the attribute).
-
-    The order of attributes considered when this relativedelta is
-    added to a datetime is:
-
-    1. Year
-    2. Month
-    3. Day
-    4. Hours
-    5. Minutes
-    6. Seconds
-    7. Microseconds
-
-    Finally, weekday is applied, using the rule described above.
-
-    For example
+
+    Parameters
+    ----------
+    absolute :
+        For each argument in the order below
+    is :
+        applied first
+    then :
+        the relative form
+    The :
+        order of attributes considered when this relativedelta is
+    added :
+        to a datetime is
+    1 :
+        Year
+    2 :
+        Month
+    3 :
+        Day
+    4 :
+        Hours
+    5 :
+        Minutes
+    6 :
+        Seconds
+    7 :
+        Microseconds
+    Finally :
+        weekday is applied
+    For :
+        example
+    First :
+        the day is set to 1
+    are :
+        added
+    weekday :
+        is applied
+    no :
+        effect
+
+    Returns
+    -------
 
     >>> from datetime import datetime
     >>> from dateutil.relativedelta import relativedelta, MO
@@ -94,12 +116,6 @@
     >>> delta = relativedelta(hours=25, day=1, weekday=MO(1))
     >>> dt + delta
     datetime.datetime(2018, 4, 2, 14, 37)
-
-    First, the day is set to 1 (the first of the month), then 25 hours
-    are added, to get to the 2nd day and 14th hour, finally the
-    weekday is applied, but since the 2nd is already a Monday there is
-    no effect.
-
     """
 
     def __init__(self, dt1=None, dt2=None,
@@ -229,6 +245,7 @@
         self._fix()
 
     def _fix(self):
+        """ """
         if abs(self.microseconds) > 999999:
             s = _sign(self.microseconds)
             div, mod = divmod(self.microseconds * s, 1000000)
@@ -263,13 +280,36 @@
 
     @property
     def weeks(self):
+        """ """
         return int(self.days / 7.0)
 
     @weeks.setter
     def weeks(self, value):
+        """
+
+        Parameters
+        ----------
+        value :
+            
+
+        Returns
+        -------
+
+        """
         self.days = self.days - (self.weeks * 7) + value * 7
 
     def _set_months(self, months):
+        """
+
+        Parameters
+        ----------
+        months :
+            
+
+        Returns
+        -------
+
+        """
         self.months = months
         if abs(self.months) > 11:
             s = _sign(self.months)
@@ -280,15 +320,22 @@
             self.years = 0
 
     def normalized(self):
-        """
-        Return a version of this object represented entirely using integer
+        """Return a version of this object represented entirely using integer
         values for the relative attributes.
+        
+        
+        :return:
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+        type
+            
 
         >>> relativedelta(days=1.5, hours=2).normalized()
         relativedelta(days=+1, hours=+14)
-
-        :return:
-            Returns a :class:`dateutil.relativedelta.relativedelta` object.
         """
         # Cascade remainders down (rounding each to roughly nearest microsecond)
         days = int(self.days)
@@ -594,6 +641,17 @@
 
 
 def _sign(x):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+
+    Returns
+    -------
+
+    """
     return int(copysign(1, x))
 
 # vim:ts=4:sw=4:et
