# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/utils/terminal.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/utils/terminal.py
@@ -24,52 +24,83 @@
 
 if os.name == 'posix':
     def _term_clear():
+        """ """
         os.system('clear')
 elif sys.platform == 'win32':
     def _term_clear():
+        """ """
         os.system('cls')
 else:
     def _term_clear():
+        """ """
         pass
 
 
 
 def toggle_set_term_title(val):
     """Control whether set_term_title is active or not.
-
+    
     set_term_title() allows writing to the console titlebar.  In embedded
     widgets this can cause problems, so this call can be used to toggle it on
     or off as needed.
-
+    
     The default state of the module is for the function to be disabled.
 
     Parameters
     ----------
-      val : bool
-        If True, set_term_title() actually writes to the terminal (using the
-        appropriate platform-specific module).  If False, it is a no-op.
+    val :
+        
+
+    Returns
+    -------
+
+    
     """
     global ignore_termtitle
     ignore_termtitle = not(val)
 
 
 def _set_term_title(*args,**kw):
-    """Dummy no-op."""
+    """Dummy no-op.
+
+    Parameters
+    ----------
+    *args :
+        
+    **kw :
+        
+
+    Returns
+    -------
+
+    """
     pass
 
 
 def _restore_term_title():
+    """ """
     pass
 
 
 def _set_term_title_xterm(title):
-    """ Change virtual terminal title in xterm-workalikes """
+    """Change virtual terminal title in xterm-workalikes
+
+    Parameters
+    ----------
+    title :
+        
+
+    Returns
+    -------
+
+    """
     # save the current title to the xterm "stack"
     sys.stdout.write('\033[22;0t') 
     sys.stdout.write('\033]0;%s\007' % title)
 
 
 def _restore_term_title_xterm():
+    """ """
     sys.stdout.write('\033[23;0t') 
 
 
@@ -86,11 +117,31 @@
         SetConsoleTitleW.argtypes = [ctypes.c_wchar_p]
     
         def _set_term_title(title):
-            """Set terminal title using ctypes to access the Win32 APIs."""
+            """Set terminal title using ctypes to access the Win32 APIs.
+
+            Parameters
+            ----------
+            title :
+                
+
+            Returns
+            -------
+
+            """
             SetConsoleTitleW(title)
     except ImportError:
         def _set_term_title(title):
-            """Set terminal title using the 'title' command."""
+            """Set terminal title using the 'title' command.
+
+            Parameters
+            ----------
+            title :
+                
+
+            Returns
+            -------
+
+            """
             global ignore_termtitle
 
             try:
@@ -106,7 +157,17 @@
 
 
 def set_term_title(title):
-    """Set terminal title using the necessary platform-dependent calls."""
+    """Set terminal title using the necessary platform-dependent calls.
+
+    Parameters
+    ----------
+    title :
+        
+
+    Returns
+    -------
+
+    """
     if ignore_termtitle:
         return
     _set_term_title(title)
@@ -120,10 +181,24 @@
 
 
 def freeze_term_title():
+    """ """
     warnings.warn("This function is deprecated, use toggle_set_term_title()")
     global ignore_termtitle
     ignore_termtitle = True
 
 
 def get_terminal_size(defaultx=80, defaulty=25):
+    """
+
+    Parameters
+    ----------
+    defaultx :
+         (Default value = 80)
+    defaulty :
+         (Default value = 25)
+
+    Returns
+    -------
+
+    """
     return _get_terminal_size((defaultx, defaulty))
