# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/parser/test_dtypes.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/parser/test_dtypes.py
@@ -20,6 +20,21 @@
 @pytest.mark.parametrize("dtype", [str, object])
 @pytest.mark.parametrize("check_orig", [True, False])
 def test_dtype_all_columns(all_parsers, dtype, check_orig):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    dtype :
+        
+    check_orig :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-3795, gh-6607
     parser = all_parsers
 
@@ -44,6 +59,17 @@
 
 
 def test_dtype_all_columns_empty(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-12048
     parser = all_parsers
     result = parser.read_csv(StringIO("A,B"), dtype=str)
@@ -53,6 +79,17 @@
 
 
 def test_dtype_per_column(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """\
 one,two
@@ -71,6 +108,17 @@
 
 
 def test_invalid_dtype_per_column(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """\
 one,two
@@ -92,6 +140,19 @@
     ],
 )
 def test_categorical_dtype(all_parsers, dtype):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    dtype :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-10153
     parser = all_parsers
     data = """a,b,c
@@ -111,6 +172,19 @@
 
 @pytest.mark.parametrize("dtype", [{"b": "category"}, {1: "category"}])
 def test_categorical_dtype_single(all_parsers, dtype):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    dtype :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-10153
     parser = all_parsers
     data = """a,b,c
@@ -125,6 +199,17 @@
 
 
 def test_categorical_dtype_unsorted(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-10153
     parser = all_parsers
     data = """a,b,c
@@ -143,6 +228,17 @@
 
 
 def test_categorical_dtype_missing(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-10153
     parser = all_parsers
     data = """a,b,c
@@ -162,6 +258,17 @@
 
 @pytest.mark.slow
 def test_categorical_dtype_high_cardinality_numeric(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-18186
     parser = all_parsers
     data = np.sort([str(i) for i in range(524289)])
@@ -175,6 +282,19 @@
 
 
 def test_categorical_dtype_latin1(all_parsers, csv_dir_path):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    csv_dir_path :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-10153
     pth = os.path.join(csv_dir_path, "unicode_series.csv")
     parser = all_parsers
@@ -188,6 +308,19 @@
 
 
 def test_categorical_dtype_utf16(all_parsers, csv_dir_path):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    csv_dir_path :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-10153
     pth = os.path.join(csv_dir_path, "utf16_ex.txt")
     parser = all_parsers
@@ -202,6 +335,17 @@
 
 
 def test_categorical_dtype_chunksize_infer_categories(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-10153
     parser = all_parsers
     data = """a,b
@@ -220,6 +364,17 @@
 
 
 def test_categorical_dtype_chunksize_explicit_categories(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-10153
     parser = all_parsers
     data = """a,b
@@ -247,6 +402,21 @@
     [["a", "b", "c"], ["a", "c", "b"], ["a", "b", "c", "d"], ["c", "b", "a"]],
 )
 def test_categorical_category_dtype(all_parsers, categories, ordered):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    categories :
+        
+    ordered :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """a,b
 1,a
@@ -268,6 +438,17 @@
 
 
 def test_categorical_category_dtype_unsorted(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """a,b
 1,a
@@ -287,6 +468,17 @@
 
 
 def test_categorical_coerces_numeric(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     dtype = {"b": CategoricalDtype([1, 2, 3])}
 
@@ -298,6 +490,17 @@
 
 
 def test_categorical_coerces_datetime(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     dti = pd.DatetimeIndex(["2017-01-01", "2018-01-01", "2019-01-01"], freq=None)
     dtype = {"b": CategoricalDtype(dti)}
@@ -310,6 +513,17 @@
 
 
 def test_categorical_coerces_timestamp(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     dtype = {"b": CategoricalDtype([Timestamp("2014")])}
 
@@ -321,6 +535,17 @@
 
 
 def test_categorical_coerces_timedelta(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     dtype = {"b": CategoricalDtype(pd.to_timedelta(["1H", "2H", "3H"]))}
 
@@ -341,6 +566,19 @@
     ],
 )
 def test_categorical_dtype_coerces_boolean(all_parsers, data):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    data :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-20498
     parser = all_parsers
     dtype = {"b": CategoricalDtype([False, True])}
@@ -351,6 +589,17 @@
 
 
 def test_categorical_unexpected_categories(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     dtype = {"b": CategoricalDtype(["a", "b", "d", "e"])}
 
@@ -362,6 +611,17 @@
 
 
 def test_empty_pass_dtype(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
 
     data = "one,two"
@@ -375,6 +635,17 @@
 
 
 def test_empty_with_index_pass_dtype(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
 
     data = "one,two"
@@ -389,6 +660,17 @@
 
 
 def test_empty_with_multi_index_pass_dtype(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
 
     data = "one,two,three"
@@ -404,6 +686,17 @@
 
 
 def test_empty_with_mangled_column_pass_dtype_by_names(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
 
     data = "one,one"
@@ -417,6 +710,17 @@
 
 
 def test_empty_with_mangled_column_pass_dtype_by_indexes(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
 
     data = "one,one"
@@ -430,6 +734,17 @@
 
 
 def test_empty_with_dup_column_pass_dtype_by_indexes(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-9424
     parser = all_parsers
     expected = concat(
@@ -444,6 +759,17 @@
 
 
 def test_empty_with_dup_column_pass_dtype_by_indexes_raises(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-9424
     parser = all_parsers
     expected = concat(
@@ -458,6 +784,17 @@
 
 
 def test_raise_on_passed_int_dtype_with_nas(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-2631
     parser = all_parsers
     data = """YEAR, DOY, a
@@ -475,6 +812,17 @@
 
 
 def test_dtype_with_converters(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """a,b
 1.1,2.2
@@ -533,6 +881,21 @@
     ],
 )
 def test_empty_dtype(all_parsers, dtype, expected):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    dtype :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-14712
     parser = all_parsers
     data = "a,b"
@@ -545,6 +908,19 @@
     "dtype", list(np.typecodes["AllInteger"] + np.typecodes["Float"])
 )
 def test_numeric_dtype(all_parsers, dtype):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    dtype :
+        
+
+    Returns
+    -------
+
+    """
     data = "0\n1"
     parser = all_parsers
     expected = DataFrame([0, 1], dtype=dtype)
@@ -554,6 +930,17 @@
 
 
 def test_boolean_dtype(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = "\n".join(
         [
