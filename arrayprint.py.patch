# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/arrayprint.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/arrayprint.py
@@ -60,7 +60,37 @@
 def _make_options_dict(precision=None, threshold=None, edgeitems=None,
                        linewidth=None, suppress=None, nanstr=None, infstr=None,
                        sign=None, formatter=None, floatmode=None, legacy=None):
-    """ make a dictionary out of the non-None arguments, plus sanity checks """
+    """make a dictionary out of the non-None arguments, plus sanity checks
+
+    Parameters
+    ----------
+    precision :
+         (Default value = None)
+    threshold :
+         (Default value = None)
+    edgeitems :
+         (Default value = None)
+    linewidth :
+         (Default value = None)
+    suppress :
+         (Default value = None)
+    nanstr :
+         (Default value = None)
+    infstr :
+         (Default value = None)
+    sign :
+         (Default value = None)
+    formatter :
+         (Default value = None)
+    floatmode :
+         (Default value = None)
+    legacy :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
 
     options = {k: v for k, v in locals().items() if v is not None}
 
@@ -92,9 +122,8 @@
 def set_printoptions(precision=None, threshold=None, edgeitems=None,
                      linewidth=None, suppress=None, nanstr=None, infstr=None,
                      formatter=None, sign=None, floatmode=None, *, legacy=None):
-    """
-    Set printing options.
-
+    """Set printing options.
+    
     These options determine the way floating point numbers, arrays and
     other NumPy objects are displayed.
 
@@ -135,7 +164,6 @@
         Types that are not specified (by their corresponding keys) are handled
         by the default formatters.  Individual types for which a formatter
         can be set are:
-
         - 'bool'
         - 'int'
         - 'timedelta' : a `numpy.timedelta64`
@@ -147,9 +175,7 @@
         - 'numpystr' : types `numpy.string_` and `numpy.unicode_`
         - 'object' : `np.object_` arrays
         - 'str' : all other strings
-
         Other keys that can be used to set a group of types at once are:
-
         - 'all' : sets all types
         - 'int_kind' : sets 'int'
         - 'float_kind' : sets 'float' and 'longfloat'
@@ -159,56 +185,67 @@
         Controls the interpretation of the `precision` option for
         floating-point types. Can take the following values
         (default maxprec_equal):
-
         * 'fixed': Always print exactly `precision` fractional digits,
-                even if this would print more or fewer digits than
-                necessary to specify the value uniquely.
+        even if this would print more or fewer digits than
+        necessary to specify the value uniquely.
         * 'unique': Print the minimum number of fractional digits necessary
-                to represent each value uniquely. Different elements may
-                have a different number of digits. The value of the
-                `precision` option is ignored.
+        to represent each value uniquely. Different elements may
+        have a different number of digits. The value of the
+        `precision` option is ignored.
         * 'maxprec': Print at most `precision` fractional digits, but if
-                an element can be uniquely represented with fewer digits
-                only print it with that many.
+        an element can be uniquely represented with fewer digits
+        only print it with that many.
         * 'maxprec_equal': Print at most `precision` fractional digits,
-                but if every element in the array can be uniquely
-                represented with an equal number of fewer digits, use that
-                many digits for all elements.
+        but if every element in the array can be uniquely
+        represented with an equal number of fewer digits, use that
+        many digits for all elements.
     legacy : string or `False`, optional
         If set to the string `'1.13'` enables 1.13 legacy printing mode. This
         approximates numpy 1.13 print output by including a space in the sign
         position of floats and different behavior for 0d arrays. If set to
         `False`, disables legacy mode. Unrecognized strings will be ignored
         with a warning for forward compatibility.
-
-        .. versionadded:: 1.14.0
+        .. versionadded:: 1.14.0 (Default value = None)
+    * :
+        
+
+    Returns
+    -------
 
     See Also
     --------
     get_printoptions, printoptions, set_string_function, array2string
-
     Notes
     -----
     `formatter` is always reset with a call to `set_printoptions`.
-
+    
     Use `printoptions` as a context manager to set the values temporarily.
-
     Examples
     --------
     Floating point precision can be set:
-
+    
+    
+    Long arrays can be summarised:
+    
+    
+    Small results can be suppressed:
+    
+    
+    A custom formatter can be used to display array elements as desired:
+    
+    
+    To put back the default options, you can use:
+    
+    
+    Also to temporarily override options, use `printoptions` as a context manager:
     >>> np.set_printoptions(precision=4)
     >>> np.array([1.123456789])
     [1.1235]
-
-    Long arrays can be summarised:
-
+    
     >>> np.set_printoptions(threshold=5)
     >>> np.arange(10)
     array([0, 1, 2, ..., 7, 8, 9])
-
-    Small results can be suppressed:
-
+    
     >>> eps = np.finfo(float).eps
     >>> x = np.arange(4.)
     >>> x**2 - (x + eps)**2
@@ -216,9 +253,7 @@
     >>> np.set_printoptions(suppress=True)
     >>> x**2 - (x + eps)**2
     array([-0., -0.,  0.,  0.])
-
-    A custom formatter can be used to display array elements as desired:
-
+    
     >>> np.set_printoptions(formatter={'all':lambda x: 'int: '+str(-x)})
     >>> x = np.arange(3)
     >>> x
@@ -226,19 +261,14 @@
     >>> np.set_printoptions()  # formatter gets reset
     >>> x
     array([0, 1, 2])
-
-    To put back the default options, you can use:
-
+    
     >>> np.set_printoptions(edgeitems=3, infstr='inf',
     ... linewidth=75, nanstr='nan', precision=8,
     ... suppress=False, threshold=1000, formatter=None)
-
-    Also to temporarily override options, use `printoptions` as a context manager:
-
+    
     >>> with np.printoptions(precision=2, suppress=True, threshold=5):
     ...     np.linspace(0, 10, 10)
     array([ 0.  ,  1.11,  2.22, ...,  7.78,  8.89, 10.  ])
-
     """
     opt = _make_options_dict(precision, threshold, edgeitems, linewidth,
                              suppress, nanstr, infstr, sign, formatter,
@@ -258,30 +288,29 @@
 
 @set_module('numpy')
 def get_printoptions():
-    """
-    Return the current print options.
+    """Return the current print options.
+
+    Parameters
+    ----------
 
     Returns
     -------
     print_opts : dict
         Dictionary of current print options with keys
-
-          - precision : int
-          - threshold : int
-          - edgeitems : int
-          - linewidth : int
-          - suppress : bool
-          - nanstr : str
-          - infstr : str
-          - formatter : dict of callables
-          - sign : str
-
+        - precision : int
+        - threshold : int
+        - edgeitems : int
+        - linewidth : int
+        - suppress : bool
+        - nanstr : str
+        - infstr : str
+        - formatter : dict of callables
+        - sign : str
         For a full description of these options, see `set_printoptions`.
 
     See Also
     --------
     set_printoptions, printoptions, set_string_function
-
     """
     return _format_options.copy()
 
@@ -290,28 +319,37 @@
 @contextlib.contextmanager
 def printoptions(*args, **kwargs):
     """Context manager for setting print options.
-
+    
     Set print options for the scope of the `with` block, and restore the old
     options at the end. See `set_printoptions` for the full description of
     available options.
 
+    Parameters
+    ----------
+    *args :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
     Examples
     --------
-
+    
+    
+    The `as`-clause of the `with`-statement gives the current print options:
+    
+    See Also
+    --------
+    set_printoptions, get_printoptions
     >>> from numpy.testing import assert_equal
     >>> with np.printoptions(precision=2):
     ...     np.array([2.0]) / 3
     array([0.67])
-
-    The `as`-clause of the `with`-statement gives the current print options:
-
+    
     >>> with np.printoptions(precision=2) as opts:
     ...      assert_equal(opts, np.get_printoptions())
-
-    See Also
-    --------
-    set_printoptions, get_printoptions
-
     """
     opts = np.get_printoptions()
     try:
@@ -322,11 +360,23 @@
 
 
 def _leading_trailing(a, edgeitems, index=()):
-    """
-    Keep only the N-D corners (leading and trailing edges) of an array.
-
+    """Keep only the N-D corners (leading and trailing edges) of an array.
+    
     Should be passed a base-class ndarray, since it makes no guarantees about
     preserving subclasses.
+
+    Parameters
+    ----------
+    a :
+        
+    edgeitems :
+        
+    index :
+         (Default value = ())
+
+    Returns
+    -------
+
     """
     axis = len(index)
     if axis == a.ndim:
@@ -342,7 +392,17 @@
 
 
 def _object_format(o):
-    """ Object arrays containing lists should be printed unambiguously """
+    """Object arrays containing lists should be printed unambiguously
+
+    Parameters
+    ----------
+    o :
+        
+
+    Returns
+    -------
+
+    """
     if type(o) is list:
         fmt = 'list({!r})'
     else:
@@ -350,13 +410,62 @@
     return fmt.format(o)
 
 def repr_format(x):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+
+    Returns
+    -------
+
+    """
     return repr(x)
 
 def str_format(x):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+
+    Returns
+    -------
+
+    """
     return str(x)
 
 def _get_formatdict(data, *, precision, floatmode, suppress, sign, legacy,
                     formatter, **kwargs):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+    * :
+        
+    precision :
+        
+    floatmode :
+        
+    suppress :
+        
+    sign :
+        
+    legacy :
+        
+    formatter :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     # note: extra arguments in kwargs are ignored
 
     # wrapped in lambdas to avoid taking a code path with the wrong type of data
@@ -381,6 +490,17 @@
     # we need to wrap values in `formatter` in a lambda, so that the interface
     # is the same as the above values.
     def indirect(x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         return lambda: x
 
     if formatter is not None:
@@ -407,8 +527,18 @@
     return formatdict
 
 def _get_format_function(data, **options):
-    """
-    find the right formatting function for the dtype_
+    """find the right formatting function for the dtype_
+
+    Parameters
+    ----------
+    data :
+        
+    **options :
+        
+
+    Returns
+    -------
+
     """
     dtype_ = data.dtype
     dtypeobj = dtype_.type
@@ -446,20 +576,52 @@
 
 
 def _recursive_guard(fillvalue='...'):
-    """
-    Like the python 3.2 reprlib.recursive_repr, but forwards *args and **kwargs
-
+    """Like the python 3.2 reprlib.recursive_repr, but forwards *args and **kwargs
+    
     Decorates a function such that if it calls itself with the same first
     argument, it returns `fillvalue` instead of recursing.
-
+    
     Largely copied from reprlib.recursive_repr
+
+    Parameters
+    ----------
+    fillvalue :
+         (Default value = '...')
+
+    Returns
+    -------
+
     """
 
     def decorating_function(f):
+        """
+
+        Parameters
+        ----------
+        f :
+            
+
+        Returns
+        -------
+
+        """
         repr_running = set()
 
         @functools.wraps(f)
         def wrapper(self, *args, **kwargs):
+            """
+
+            Parameters
+            ----------
+            *args :
+                
+            **kwargs :
+                
+
+            Returns
+            -------
+
+            """
             key = id(self), get_ident()
             if key in repr_running:
                 return fillvalue
@@ -477,6 +639,23 @@
 # gracefully handle recursive calls, when object arrays contain themselves
 @_recursive_guard()
 def _array2string(a, options, separator=' ', prefix=""):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    options :
+        
+    separator :
+         (Default value = ' ')
+    prefix :
+         (Default value = "")
+
+    Returns
+    -------
+
+    """
     # The formatter __init__s in _get_format_function cannot deal with
     # subclasses yet, and we also need to avoid recursion issues in
     # _formatArray with subclasses which return 0d arrays in place of scalars
@@ -510,6 +689,45 @@
         style=None, formatter=None, threshold=None,
         edgeitems=None, sign=None, floatmode=None, suffix=None,
         *, legacy=None):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    max_line_width :
+         (Default value = None)
+    precision :
+         (Default value = None)
+    suppress_small :
+         (Default value = None)
+    separator :
+         (Default value = None)
+    prefix :
+         (Default value = None)
+    style :
+         (Default value = None)
+    formatter :
+         (Default value = None)
+    threshold :
+         (Default value = None)
+    edgeitems :
+         (Default value = None)
+    sign :
+         (Default value = None)
+    floatmode :
+         (Default value = None)
+    suffix :
+         (Default value = None)
+    * :
+        
+    legacy :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (a,)
 
 
@@ -519,8 +737,7 @@
                  style=np._NoValue, formatter=None, threshold=None,
                  edgeitems=None, sign=None, floatmode=None, suffix="",
                  *, legacy=None):
-    """
-    Return a string representation of an array.
+    """Return a string representation of an array.
 
     Parameters
     ----------
@@ -539,29 +756,26 @@
         zero.
         Defaults to ``numpy.get_printoptions()['suppress']``.
     separator : str, optional
-        Inserted between elements.
+        Inserted between elements. (Default value = ' ')
     prefix : str, optional
-    suffix: str, optional
+         (Default value = "")
+    suffix : str, optional
         The length of the prefix and suffix strings are used to respectively
         align and wrap the output. An array is typically printed as::
-
-          prefix + array2string(a) + suffix
-
+        prefix + array2string(a) + suffix
         The output is left-padded by the length of the prefix string, and
         wrapping is forced at the column ``max_line_width - len(suffix)``.
         It should be noted that the content of prefix and suffix strings are
-        not included in the output.
+        not included in the output. (Default value = "")
     style : _NoValue, optional
         Has no effect, do not use.
-
-        .. deprecated:: 1.14.0
+        .. deprecated:: 1.14.0 (Default value = np._NoValue)
     formatter : dict of callables, optional
         If not None, the keys should indicate the type(s) that the respective
         formatting function applies to.  Callables should return a string.
         Types that are not specified (by their corresponding keys) are handled
         by the default formatters.  Individual types for which a formatter
         can be set are:
-
         - 'bool'
         - 'int'
         - 'timedelta' : a `numpy.timedelta64`
@@ -573,9 +787,7 @@
         - 'void' : type `numpy.void`
         - 'numpystr' : types `numpy.string_` and `numpy.unicode_`
         - 'str' : all other strings
-
         Other keys that can be used to set a group of types at once are:
-
         - 'all' : sets all types
         - 'int_kind' : sets 'int'
         - 'float_kind' : sets 'float' and 'longfloat'
@@ -600,29 +812,29 @@
         floating-point types.
         Defaults to ``numpy.get_printoptions()['floatmode']``.
         Can take the following values:
-
         - 'fixed': Always print exactly `precision` fractional digits,
-          even if this would print more or fewer digits than
-          necessary to specify the value uniquely.
+        even if this would print more or fewer digits than
+        necessary to specify the value uniquely.
         - 'unique': Print the minimum number of fractional digits necessary
-          to represent each value uniquely. Different elements may
-          have a different number of digits.  The value of the
-          `precision` option is ignored.
+        to represent each value uniquely. Different elements may
+        have a different number of digits.  The value of the
+        `precision` option is ignored.
         - 'maxprec': Print at most `precision` fractional digits, but if
-          an element can be uniquely represented with fewer digits
-          only print it with that many.
+        an element can be uniquely represented with fewer digits
+        only print it with that many.
         - 'maxprec_equal': Print at most `precision` fractional digits,
-          but if every element in the array can be uniquely
-          represented with an equal number of fewer digits, use that
-          many digits for all elements.
+        but if every element in the array can be uniquely
+        represented with an equal number of fewer digits, use that
+        many digits for all elements.
     legacy : string or `False`, optional
         If set to the string `'1.13'` enables 1.13 legacy printing mode. This
         approximates numpy 1.13 print output by including a space in the sign
         position of floats and different behavior for 0d arrays. If set to
         `False`, disables legacy mode. Unrecognized strings will be ignored
         with a warning for forward compatibility.
-
-        .. versionadded:: 1.14.0
+        .. versionadded:: 1.14.0 (Default value = None)
+    * :
+        
 
     Returns
     -------
@@ -637,31 +849,28 @@
     See Also
     --------
     array_str, array_repr, set_printoptions, get_printoptions
-
     Notes
     -----
     If a formatter is specified for a certain type, the `precision` keyword is
     ignored for that type.
-
+    
     This is a very flexible function; `array_repr` and `array_str` are using
     `array2string` internally so keywords with the same name should work
     identically in all three functions.
-
     Examples
     --------
     >>> x = np.array([1e-16,1,2,3])
     >>> np.array2string(x, precision=2, separator=',',
     ...                       suppress_small=True)
     '[0.,1.,2.,3.]'
-
+    
     >>> x  = np.arange(3.)
     >>> np.array2string(x, formatter={'float_kind':lambda x: "%.2f" % x})
     '[0.00 1.00 2.00]'
-
+    
     >>> x  = np.arange(3)
     >>> np.array2string(x, formatter={'int':lambda x: hex(x)})
     '[0x0 0x1 0x2]'
-
     """
 
     overrides = _make_options_dict(precision, threshold, edgeitems,
@@ -693,6 +902,27 @@
 
 
 def _extendLine(s, line, word, line_width, next_line_prefix, legacy):
+    """
+
+    Parameters
+    ----------
+    s :
+        
+    line :
+        
+    word :
+        
+    line_width :
+        
+    next_line_prefix :
+        
+    legacy :
+        
+
+    Returns
+    -------
+
+    """
     needs_wrap = len(line) + len(word) > line_width
     if legacy != '1.13':
         s# don't wrap lines if it won't help
@@ -709,17 +939,51 @@
 def _formatArray(a, format_function, line_width, next_line_prefix,
                  separator, edge_items, summary_insert, legacy):
     """formatArray is designed for two modes of operation:
-
+    
     1. Full output
-
+    
     2. Summarized output
 
+    Parameters
+    ----------
+    a :
+        
+    format_function :
+        
+    line_width :
+        
+    next_line_prefix :
+        
+    separator :
+        
+    edge_items :
+        
+    summary_insert :
+        
+    legacy :
+        
+
+    Returns
+    -------
+
     """
     def recurser(index, hanging_indent, curr_width):
-        """
-        By using this local function, we don't need to recurse with all the
-        arguments. Since this function is not created recursively, the cost is
-        not significant
+        """By using this local function, we don't need to recurse with all the
+
+        Parameters
+        ----------
+        not :
+            significant
+        index :
+            
+        hanging_indent :
+            
+        curr_width :
+            
+
+        Returns
+        -------
+
         """
         axis = len(index)
         axes_left = a.ndim - axis
@@ -825,6 +1089,19 @@
         recurser = None
 
 def _none_or_positive_arg(x, name):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+    name :
+        
+
+    Returns
+    -------
+
+    """
     if x is None:
         return -1
     if x < 0:
@@ -832,7 +1109,7 @@
     return x
 
 class FloatingFormat:
-    """ Formatter for subtypes of np.floating """
+    """Formatter for subtypes of np.floating"""
     def __init__(self, data, precision, floatmode, suppress_small, sign=False,
                  *, legacy=None):
         # for backcompatibility, accept bools
@@ -861,6 +1138,17 @@
         self.fillFormat(data)
 
     def fillFormat(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # only the finite values are used to compute the number of digits
         finite_vals = data[isfinite(data)]
 
@@ -977,9 +1265,8 @@
 @set_module('numpy')
 def format_float_scientific(x, precision=None, unique=True, trim='k',
                             sign=False, pad_left=None, exp_digits=None):
-    """
-    Format a floating-point scalar as a decimal string in scientific notation.
-
+    """Format a floating-point scalar as a decimal string in scientific notation.
+    
     Provides control over rounding, trimming and padding. Uses and assumes
     IEEE unbiased rounding. Uses the "Dragon4" algorithm.
 
@@ -989,7 +1276,7 @@
         Value to format.
     precision : non-negative integer or None, optional
         Maximum number of digits to print. May be None if `unique` is
-        `True`, but must be an integer if unique is `False`.
+        `True`, but must be an integer if unique is `False`. (Default value = None)
     unique : boolean, optional
         If `True`, use a digit-generation strategy which gives the shortest
         representation which uniquely identifies the floating-point number from
@@ -998,23 +1285,22 @@
         cut off after `precision` digits and the remaining value is rounded.
         If `False`, digits are generated as if printing an infinite-precision
         value and stopping after `precision` digits, rounding the remaining
-        value.
+        value. (Default value = True)
     trim : one of 'k', '.', '0', '-', optional
         Controls post-processing trimming of trailing digits, as follows:
-
         * 'k' : keep trailing zeros, keep decimal point (no trimming)
         * '.' : trim all trailing zeros, leave decimal point
         * '0' : trim all but the zero before the decimal point. Insert the
-          zero if it is missing.
-        * '-' : trim trailing zeros and any trailing decimal point
+        zero if it is missing.
+        * '-' : trim trailing zeros and any trailing decimal point (Default value = 'k')
     sign : boolean, optional
-        Whether to show the sign for positive values.
+        Whether to show the sign for positive values. (Default value = False)
     pad_left : non-negative integer, optional
         Pad the left side of the string with whitespace until at least that
-        many characters are to the left of the decimal point.
+        many characters are to the left of the decimal point. (Default value = None)
     exp_digits : non-negative integer, optional
         Pad the exponent with zeros until it contains at least this many digits.
-        If omitted, the exponent will be at least 2 digits.
+        If omitted, the exponent will be at least 2 digits. (Default value = None)
 
     Returns
     -------
@@ -1024,7 +1310,6 @@
     See Also
     --------
     format_float_positional
-
     Examples
     --------
     >>> np.format_float_scientific(np.float32(np.pi))
@@ -1047,9 +1332,8 @@
 def format_float_positional(x, precision=None, unique=True,
                             fractional=True, trim='k', sign=False,
                             pad_left=None, pad_right=None):
-    """
-    Format a floating-point scalar as a decimal string in positional notation.
-
+    """Format a floating-point scalar as a decimal string in positional notation.
+    
     Provides control over rounding, trimming and padding. Uses and assumes
     IEEE unbiased rounding. Uses the "Dragon4" algorithm.
 
@@ -1059,7 +1343,7 @@
         Value to format.
     precision : non-negative integer or None, optional
         Maximum number of digits to print. May be None if `unique` is
-        `True`, but must be an integer if unique is `False`.
+        `True`, but must be an integer if unique is `False`. (Default value = None)
     unique : boolean, optional
         If `True`, use a digit-generation strategy which gives the shortest
         representation which uniquely identifies the floating-point number from
@@ -1068,28 +1352,27 @@
         is cut off after `precision` digits and the remaining value is rounded.
         If `False`, digits are generated as if printing an infinite-precision
         value and stopping after `precision` digits, rounding the remaining
-        value.
+        value. (Default value = True)
     fractional : boolean, optional
         If `True`, the cutoff of `precision` digits refers to the total number
         of digits after the decimal point, including leading zeros.
         If `False`, `precision` refers to the total number of significant
-        digits, before or after the decimal point, ignoring leading zeros.
+        digits, before or after the decimal point, ignoring leading zeros. (Default value = True)
     trim : one of 'k', '.', '0', '-', optional
         Controls post-processing trimming of trailing digits, as follows:
-
         * 'k' : keep trailing zeros, keep decimal point (no trimming)
         * '.' : trim all trailing zeros, leave decimal point
         * '0' : trim all but the zero before the decimal point. Insert the
-          zero if it is missing.
-        * '-' : trim trailing zeros and any trailing decimal point
+        zero if it is missing.
+        * '-' : trim trailing zeros and any trailing decimal point (Default value = 'k')
     sign : boolean, optional
-        Whether to show the sign for positive values.
+        Whether to show the sign for positive values. (Default value = False)
     pad_left : non-negative integer, optional
         Pad the left side of the string with whitespace until at least that
-        many characters are to the left of the decimal point.
+        many characters are to the left of the decimal point. (Default value = None)
     pad_right : non-negative integer, optional
         Pad the right side of the string with whitespace until at least that
-        many characters are to the right of the decimal point.
+        many characters are to the right of the decimal point. (Default value = None)
 
     Returns
     -------
@@ -1099,7 +1382,6 @@
     See Also
     --------
     format_float_scientific
-
     Examples
     --------
     >>> np.format_float_positional(np.float32(np.pi))
@@ -1121,6 +1403,7 @@
 
 
 class IntegerFormat:
+    """ """
     def __init__(self, data):
         if data.size > 0:
             max_str_len = max(len(str(np.max(data))),
@@ -1134,6 +1417,7 @@
 
 
 class BoolFormat:
+    """ """
     def __init__(self, data, **kwargs):
         # add an extra space so " True" and "False" have the same length and
         # array elements align nicely when printed, except in 0d arrays
@@ -1144,7 +1428,7 @@
 
 
 class ComplexFloatingFormat:
-    """ Formatter for subtypes of np.complexfloating """
+    """Formatter for subtypes of np.complexfloating"""
     def __init__(self, x, precision, floatmode, suppress_small,
                  sign=False, *, legacy=None):
         # for backcompatibility, accept bools
@@ -1177,6 +1461,7 @@
 
 
 class _TimelikeFormat:
+    """ """
     def __init__(self, data):
         non_nat = data[~isnat(data)]
         if len(non_nat) > 0:
@@ -1192,6 +1477,17 @@
         self._nat = "'NaT'".rjust(max_str_len)
 
     def _format_non_nat(self, x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         # override in subclass
         raise NotImplementedError
 
@@ -1203,6 +1499,7 @@
 
 
 class DatetimeFormat(_TimelikeFormat):
+    """ """
     def __init__(self, x, unit=None, timezone=None, casting='same_kind',
                  legacy=False):
         # Get the unit from the dtype
@@ -1228,6 +1525,17 @@
         return super(DatetimeFormat, self).__call__(x)
 
     def _format_non_nat(self, x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         return "'%s'" % datetime_as_string(x,
                                     unit=self.unit,
                                     timezone=self.timezone,
@@ -1235,11 +1543,24 @@
 
 
 class TimedeltaFormat(_TimelikeFormat):
+    """ """
     def _format_non_nat(self, x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         return str(x.astype('i8'))
 
 
 class SubArrayFormat:
+    """ """
     def __init__(self, format_function):
         self.format_function = format_function
 
@@ -1250,21 +1571,37 @@
 
 
 class StructuredVoidFormat:
-    """
-    Formatter for structured np.void objects.
-
+    """Formatter for structured np.void objects.
+    
     This does not work on structured alias types like np.dtype(('i4', 'i2,i2')),
     as alias scalars lose their field information, and the implementation
     relies upon np.void.__getitem__.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     def __init__(self, format_functions):
         self.format_functions = format_functions
 
     @classmethod
     def from_data(cls, data, **options):
-        """
-        This is a second way to initialize StructuredVoidFormat, using the raw data
+        """This is a second way to initialize StructuredVoidFormat, using the raw data
         as input. Added to avoid changing the signature of __init__.
+
+        Parameters
+        ----------
+        data :
+            
+        **options :
+            
+
+        Returns
+        -------
+
         """
         format_functions = []
         for field_name in data.dtype.names:
@@ -1286,10 +1623,18 @@
 
 
 def _void_scalar_repr(x):
-    """
-    Implements the repr for structured-void scalars. It is called from the
+    """Implements the repr for structured-void scalars. It is called from the
     scalartypes.c.src code, and is placed here because it uses the elementwise
     formatters defined above.
+
+    Parameters
+    ----------
+    x :
+        
+
+    Returns
+    -------
+
     """
     return StructuredVoidFormat.from_data(array(x), **_format_options)(x)
 
@@ -1302,8 +1647,7 @@
 
 
 def dtype_is_implied(dtype):
-    """
-    Determine if the given dtype is implied by the representation of its values.
+    """Determine if the given dtype is implied by the representation of its values.
 
     Parameters
     ----------
@@ -1338,10 +1682,17 @@
 
 
 def dtype_short_repr(dtype):
-    """
-    Convert a dtype to a short form which evaluates to the same dtype.
-
+    """Convert a dtype to a short form which evaluates to the same dtype.
+    
     The intent is roughly that the following holds
+
+    Parameters
+    ----------
+    dtype :
+        
+
+    Returns
+    -------
 
     >>> from numpy import *
     >>> dt = np.int64([1, 2]).dtype
@@ -1365,7 +1716,25 @@
 def _array_repr_implementation(
         arr, max_line_width=None, precision=None, suppress_small=None,
         array2string=array2string):
-    """Internal version of array_repr() that allows overriding array2string."""
+    """Internal version of array_repr() that allows overriding array2string.
+
+    Parameters
+    ----------
+    arr :
+        
+    max_line_width :
+         (Default value = None)
+    precision :
+         (Default value = None)
+    suppress_small :
+         (Default value = None)
+    array2string :
+         (Default value = array2string)
+
+    Returns
+    -------
+
+    """
     if max_line_width is None:
         max_line_width = _format_options['linewidth']
 
@@ -1411,13 +1780,29 @@
 
 def _array_repr_dispatcher(
         arr, max_line_width=None, precision=None, suppress_small=None):
+    """
+
+    Parameters
+    ----------
+    arr :
+        
+    max_line_width :
+         (Default value = None)
+    precision :
+         (Default value = None)
+    suppress_small :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (arr,)
 
 
 @array_function_dispatch(_array_repr_dispatcher, module='numpy')
 def array_repr(arr, max_line_width=None, precision=None, suppress_small=None):
-    """
-    Return the string representation of an array.
+    """Return the string representation of an array.
 
     Parameters
     ----------
@@ -1439,12 +1824,11 @@
     Returns
     -------
     string : str
-      The string representation of an array.
+        The string representation of an array.
 
     See Also
     --------
     array_str, array2string, set_printoptions
-
     Examples
     --------
     >>> np.array_repr(np.array([1,2]))
@@ -1453,11 +1837,10 @@
     'MaskedArray([0.])'
     >>> np.array_repr(np.array([], np.int32))
     'array([], dtype=int32)'
-
+    
     >>> x = np.array([1e-6, 4e-7, 2, 3])
     >>> np.array_repr(x, precision=6, suppress_small=True)
     'array([0.000001,  0.      ,  2.      ,  3.      ])'
-
     """
     return _array_repr_implementation(
         arr, max_line_width, precision, suppress_small)
@@ -1465,6 +1848,17 @@
 
 @_recursive_guard()
 def _guarded_repr_or_str(v):
+    """
+
+    Parameters
+    ----------
+    v :
+        
+
+    Returns
+    -------
+
+    """
     if isinstance(v, bytes):
         return repr(v)
     return str(v)
@@ -1473,7 +1867,25 @@
 def _array_str_implementation(
         a, max_line_width=None, precision=None, suppress_small=None,
         array2string=array2string):
-    """Internal version of array_str() that allows overriding array2string."""
+    """Internal version of array_str() that allows overriding array2string.
+
+    Parameters
+    ----------
+    a :
+        
+    max_line_width :
+         (Default value = None)
+    precision :
+         (Default value = None)
+    suppress_small :
+         (Default value = None)
+    array2string :
+         (Default value = array2string)
+
+    Returns
+    -------
+
+    """
     if (_format_options['legacy'] == '1.13' and
             a.shape == () and not a.dtype.names):
         return str(a.item())
@@ -1492,14 +1904,30 @@
 
 def _array_str_dispatcher(
         a, max_line_width=None, precision=None, suppress_small=None):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    max_line_width :
+         (Default value = None)
+    precision :
+         (Default value = None)
+    suppress_small :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (a,)
 
 
 @array_function_dispatch(_array_str_dispatcher, module='numpy')
 def array_str(a, max_line_width=None, precision=None, suppress_small=None):
-    """
-    Return a string representation of the data in an array.
-
+    """Return a string representation of the data in an array.
+    
     The data in the array is returned as a single string.  This function is
     similar to `array_repr`, the difference being that `array_repr` also
     returns information on the kind of array and its data type.
@@ -1521,15 +1949,16 @@
         zero.
         Defaults to ``numpy.get_printoptions()['suppress']``.
 
+    Returns
+    -------
+
     See Also
     --------
     array2string, array_repr, set_printoptions
-
     Examples
     --------
     >>> np.array_str(np.arange(3))
     '[0 1 2]'
-
     """
     return _array_str_implementation(
         a, max_line_width, precision, suppress_small)
@@ -1544,8 +1973,7 @@
 
 
 def set_string_function(f, repr=True):
-    """
-    Set a Python function to be used when pretty printing arrays.
+    """Set a Python function to be used when pretty printing arrays.
 
     Parameters
     ----------
@@ -1559,12 +1987,22 @@
         is set, if False the function that returns the default string
         representation (``__str__``) is set.
 
+    Returns
+    -------
+
     See Also
     --------
     set_printoptions, get_printoptions
-
     Examples
     --------
+    
+    We can reset the function to the default:
+    
+    
+    `repr` affects either pretty printing or normal string representation.
+    Note that ``__repr__`` is still affected by setting ``__str__``
+    because the width of each array element in the returned string becomes
+    equal to the length of the result of ``__str__()``.
     >>> def pprint(arr):
     ...     return 'HA! - What are you going to do now?'
     ...
@@ -1574,25 +2012,17 @@
     HA! - What are you going to do now?
     >>> _ = a
     >>> # [0 1 2 3 4 5 6 7 8 9]
-
-    We can reset the function to the default:
-
+    
     >>> np.set_string_function(None)
     >>> a
     array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
-
-    `repr` affects either pretty printing or normal string representation.
-    Note that ``__repr__`` is still affected by setting ``__str__``
-    because the width of each array element in the returned string becomes
-    equal to the length of the result of ``__str__()``.
-
+    
     >>> x = np.arange(4)
     >>> np.set_string_function(lambda x:'random', repr=False)
     >>> x.__str__()
     'random'
     >>> x.__repr__()
     'array([0, 1, 2, 3])'
-
     """
     if f is None:
         if repr:
