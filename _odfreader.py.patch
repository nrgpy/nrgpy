# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/io/excel/_odfreader.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/io/excel/_odfreader.py
@@ -11,14 +11,7 @@
 
 
 class _ODFReader(_BaseExcelReader):
-    """
-    Read tables out of OpenDocument formatted files.
-
-    Parameters
-    ----------
-    filepath_or_buffer: string, path to be parsed or
-        an open readable stream.
-    """
+    """Read tables out of OpenDocument formatted files."""
 
     def __init__(self, filepath_or_buffer: FilePathOrBuffer):
         import_optional_dependency("odf")
@@ -26,11 +19,23 @@
 
     @property
     def _workbook_class(self):
+        """ """
         from odf.opendocument import OpenDocument
 
         return OpenDocument
 
     def load_workbook(self, filepath_or_buffer: FilePathOrBuffer):
+        """
+
+        Parameters
+        ----------
+        filepath_or_buffer: FilePathOrBuffer :
+            
+
+        Returns
+        -------
+
+        """
         from odf.opendocument import load
 
         return load(filepath_or_buffer)
@@ -42,19 +47,41 @@
 
     @property
     def sheet_names(self) -> List[str]:
-        """Return a list of sheet names present in the document"""
+        """ """
         from odf.table import Table
 
         tables = self.book.getElementsByType(Table)
         return [t.getAttribute("name") for t in tables]
 
     def get_sheet_by_index(self, index: int):
+        """
+
+        Parameters
+        ----------
+        index: int :
+            
+
+        Returns
+        -------
+
+        """
         from odf.table import Table
 
         tables = self.book.getElementsByType(Table)
         return tables[index]
 
     def get_sheet_by_name(self, name: str):
+        """
+
+        Parameters
+        ----------
+        name: str :
+            
+
+        Returns
+        -------
+
+        """
         from odf.table import Table
 
         tables = self.book.getElementsByType(Table)
@@ -66,8 +93,18 @@
         raise ValueError(f"sheet {name} not found")
 
     def get_sheet_data(self, sheet, convert_float: bool) -> List[List[Scalar]]:
-        """
-        Parse an ODF Table into a list of lists
+        """Parse an ODF Table into a list of lists
+
+        Parameters
+        ----------
+        sheet :
+            
+        convert_float: bool :
+            
+
+        Returns
+        -------
+
         """
         from odf.table import CoveredTableCell, TableCell, TableRow
 
@@ -124,22 +161,50 @@
 
     def _get_row_repeat(self, row) -> int:
         """
-        Return number of times this row was repeated
-        Repeating an empty row appeared to be a common way
-        of representing sparse rows in the table.
+
+        Parameters
+        ----------
+        row :
+            
+
+        Returns
+        -------
+        type
+            Repeating an empty row appeared to be a common way
+            of representing sparse rows in the table.
+
         """
         from odf.namespaces import TABLENS
 
         return int(row.attributes.get((TABLENS, "number-rows-repeated"), 1))
 
     def _get_column_repeat(self, cell) -> int:
+        """
+
+        Parameters
+        ----------
+        cell :
+            
+
+        Returns
+        -------
+
+        """
         from odf.namespaces import TABLENS
 
         return int(cell.attributes.get((TABLENS, "number-columns-repeated"), 1))
 
     def _is_empty_row(self, row) -> bool:
-        """
-        Helper function to find empty rows
+        """Helper function to find empty rows
+
+        Parameters
+        ----------
+        row :
+            
+
+        Returns
+        -------
+
         """
         for column in row.childNodes:
             if len(column.childNodes) > 0:
@@ -148,6 +213,19 @@
         return True
 
     def _get_cell_value(self, cell, convert_float: bool) -> Scalar:
+        """
+
+        Parameters
+        ----------
+        cell :
+            
+        convert_float: bool :
+            
+
+        Returns
+        -------
+
+        """
         from odf.namespaces import OFFICENS
 
         if str(cell) == "#N/A":
@@ -187,9 +265,17 @@
             raise ValueError(f"Unrecognized type {cell_type}")
 
     def _get_cell_string_value(self, cell) -> str:
-        """
-        Find and decode OpenDocument text:s tags that represent
+        """Find and decode OpenDocument text:s tags that represent
         a run length encoded sequence of space characters.
+
+        Parameters
+        ----------
+        cell :
+            
+
+        Returns
+        -------
+
         """
         from odf.element import Element
         from odf.namespaces import TEXTNS
