# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pygments/formatters/img.py
+++ b/..//venv/lib/python3.8/site-packages/pygments/formatters/img.py
@@ -60,9 +60,7 @@
 
 
 class FontManager:
-    """
-    Manages a set of fonts: normal, italic, bold, etc...
-    """
+    """Manages a set of fonts: normal, italic, bold, etc..."""
 
     def __init__(self, font_name, font_size=14):
         self.font_name = font_name
@@ -83,6 +81,19 @@
             self._create_nix()
 
     def _get_nix_font_path(self, name, style):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+        style :
+            
+
+        Returns
+        -------
+
+        """
         proc = subprocess.Popen(['fc-list', "%s:style=%s" % (name, style), 'file'],
                                 stdout=subprocess.PIPE, stderr=None)
         stdout, _ = proc.communicate()
@@ -97,6 +108,7 @@
             return None
 
     def _create_nix(self):
+        """ """
         for name in STYLES['NORMAL']:
             path = self._get_nix_font_path(self.font_name, name)
             if path is not None:
@@ -118,9 +130,25 @@
                     self.fonts[style] = self.fonts['NORMAL']
 
     def _get_mac_font_path(self, font_map, name, style):
+        """
+
+        Parameters
+        ----------
+        font_map :
+            
+        name :
+            
+        style :
+            
+
+        Returns
+        -------
+
+        """
         return font_map.get((name + ' ' + style).strip().lower())
 
     def _create_mac(self):
+        """ """
         font_map = {}
         for font_dir in (os.path.join(os.getenv("HOME"), 'Library/Fonts/'),
                          '/Library/Fonts/', '/System/Library/Fonts/'):
@@ -150,6 +178,23 @@
                     self.fonts[style] = self.fonts['NORMAL']
 
     def _lookup_win(self, key, basename, styles, fail=False):
+        """
+
+        Parameters
+        ----------
+        key :
+            
+        basename :
+            
+        styles :
+            
+        fail :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         for suffix in ('', ' (TrueType)'):
             for style in styles:
                 try:
@@ -165,6 +210,7 @@
             return None
 
     def _create_win(self):
+        """ """
         lookuperror = None
         keynames = [ (_winreg.HKEY_CURRENT_USER, r'Software\Microsoft\Windows NT\CurrentVersion\Fonts'),
                      (_winreg.HKEY_CURRENT_USER, r'Software\Microsoft\Windows\CurrentVersion\Fonts'),
@@ -204,14 +250,22 @@
             raise FontNotFound('Can\'t open Windows font registry key')
 
     def get_char_size(self):
-        """
-        Get the character size.
-        """
+        """Get the character size."""
         return self.fonts['NORMAL'].getsize('M')
 
     def get_font(self, bold, oblique):
-        """
-        Get the font based on bold and italic flags.
+        """Get the font based on bold and italic flags.
+
+        Parameters
+        ----------
+        bold :
+            
+        oblique :
+            
+
+        Returns
+        -------
+
         """
         if bold and oblique:
             return self.fonts['BOLDITALIC']
@@ -224,112 +278,118 @@
 
 
 class ImageFormatter(Formatter):
-    """
-    Create a PNG image from source code. This uses the Python Imaging Library to
+    """Create a PNG image from source code. This uses the Python Imaging Library to
     generate a pixmap from the source code.
-
+    
     .. versionadded:: 0.10
-
+    
     Additional options accepted:
-
+    
     `image_format`
         An image format to output to that is recognised by PIL, these include:
-
+    
         * "PNG" (default)
         * "JPEG"
         * "BMP"
         * "GIF"
-
+    
     `line_pad`
         The extra spacing (in pixels) between each line of text.
-
+    
         Default: 2
-
+    
     `font_name`
         The font name to be used as the base font from which others, such as
         bold and italic fonts will be generated.  This really should be a
         monospace font to look sane.
-
+    
         Default: "Courier New" on Windows, "Menlo" on Mac OS, and
                  "DejaVu Sans Mono" on \\*nix
-
+    
     `font_size`
         The font size in points to be used.
-
+    
         Default: 14
-
+    
     `image_pad`
         The padding, in pixels to be used at each edge of the resulting image.
-
+    
         Default: 10
-
+    
     `line_numbers`
         Whether line numbers should be shown: True/False
-
+    
         Default: True
-
+    
     `line_number_start`
         The line number of the first line.
-
+    
         Default: 1
-
+    
     `line_number_step`
         The step used when printing line numbers.
-
+    
         Default: 1
-
+    
     `line_number_bg`
         The background colour (in "#123456" format) of the line number bar, or
         None to use the style background color.
-
+    
         Default: "#eed"
-
+    
     `line_number_fg`
         The text color of the line numbers (in "#123456"-like format).
-
+    
         Default: "#886"
-
+    
     `line_number_chars`
         The number of columns of line numbers allowable in the line number
         margin.
-
+    
         Default: 2
-
+    
     `line_number_bold`
         Whether line numbers will be bold: True/False
-
+    
         Default: False
-
+    
     `line_number_italic`
         Whether line numbers will be italicized: True/False
-
+    
         Default: False
-
+    
     `line_number_separator`
         Whether a line will be drawn between the line number area and the
         source code area: True/False
-
+    
         Default: True
-
+    
     `line_number_pad`
         The horizontal padding (in pixels) between the line number margin, and
         the source code area.
-
+    
         Default: 6
-
+    
     `hl_lines`
         Specify a list of lines to be highlighted.
-
+    
         .. versionadded:: 1.2
-
+    
         Default: empty list
-
+    
     `hl_color`
         Specify the color for highlighting lines.
-
+    
         .. versionadded:: 1.2
-
+    
         Default: highlight color of the selected style
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     # Required by the pygments mapper
@@ -398,48 +458,97 @@
         self.drawables = []
 
     def get_style_defs(self, arg=''):
+        """
+
+        Parameters
+        ----------
+        arg :
+             (Default value = '')
+
+        Returns
+        -------
+
+        """
         raise NotImplementedError('The -S option is meaningless for the image '
                                   'formatter. Use -O style=<stylename> instead.')
 
     def _get_line_height(self):
-        """
-        Get the height of a line.
-        """
+        """Get the height of a line."""
         return self.fonth + self.line_pad
 
     def _get_line_y(self, lineno):
-        """
-        Get the Y coordinate of a line number.
+        """Get the Y coordinate of a line number.
+
+        Parameters
+        ----------
+        lineno :
+            
+
+        Returns
+        -------
+
         """
         return lineno * self._get_line_height() + self.image_pad
 
     def _get_char_width(self):
-        """
-        Get the width of a character.
-        """
+        """Get the width of a character."""
         return self.fontw
 
     def _get_char_x(self, charno):
-        """
-        Get the X coordinate of a character position.
+        """Get the X coordinate of a character position.
+
+        Parameters
+        ----------
+        charno :
+            
+
+        Returns
+        -------
+
         """
         return charno * self.fontw + self.image_pad + self.line_number_width
 
     def _get_text_pos(self, charno, lineno):
-        """
-        Get the actual position for a character and line position.
+        """Get the actual position for a character and line position.
+
+        Parameters
+        ----------
+        charno :
+            
+        lineno :
+            
+
+        Returns
+        -------
+
         """
         return self._get_char_x(charno), self._get_line_y(lineno)
 
     def _get_linenumber_pos(self, lineno):
-        """
-        Get the actual position for the start of a line number.
+        """Get the actual position for the start of a line number.
+
+        Parameters
+        ----------
+        lineno :
+            
+
+        Returns
+        -------
+
         """
         return (self.image_pad, self._get_line_y(lineno))
 
     def _get_text_color(self, style):
-        """
-        Get the correct color for the token from the style.
+        """Get the correct color for the token from the style.
+
+        Parameters
+        ----------
+        style :
+            
+
+        Returns
+        -------
+
         """
         if style['color'] is not None:
             fill = '#' + style['color']
@@ -448,21 +557,49 @@
         return fill
 
     def _get_style_font(self, style):
-        """
-        Get the correct font for the style.
+        """Get the correct font for the style.
+
+        Parameters
+        ----------
+        style :
+            
+
+        Returns
+        -------
+
         """
         return self.fonts.get_font(style['bold'], style['italic'])
 
     def _get_image_size(self, maxcharno, maxlineno):
-        """
-        Get the required image size.
+        """Get the required image size.
+
+        Parameters
+        ----------
+        maxcharno :
+            
+        maxlineno :
+            
+
+        Returns
+        -------
+
         """
         return (self._get_char_x(maxcharno) + self.image_pad,
                 self._get_line_y(maxlineno + 0) + self.image_pad)
 
     def _draw_linenumber(self, posno, lineno):
-        """
-        Remember a line number drawable to paint later.
+        """Remember a line number drawable to paint later.
+
+        Parameters
+        ----------
+        posno :
+            
+        lineno :
+            
+
+        Returns
+        -------
+
         """
         self._draw_text(
             self._get_linenumber_pos(posno),
@@ -473,14 +610,36 @@
         )
 
     def _draw_text(self, pos, text, font, **kw):
-        """
-        Remember a single drawable tuple to paint later.
+        """Remember a single drawable tuple to paint later.
+
+        Parameters
+        ----------
+        pos :
+            
+        text :
+            
+        font :
+            
+        **kw :
+            
+
+        Returns
+        -------
+
         """
         self.drawables.append((pos, text, font, kw))
 
     def _create_drawables(self, tokensource):
-        """
-        Create drawables for the token content.
+        """Create drawables for the token content.
+
+        Parameters
+        ----------
+        tokensource :
+            
+
+        Returns
+        -------
+
         """
         lineno = charno = maxcharno = 0
         for ttype, value in tokensource:
@@ -512,9 +671,7 @@
         self.maxlineno = lineno
 
     def _draw_line_numbers(self):
-        """
-        Create drawables for the line numbers.
-        """
+        """Create drawables for the line numbers."""
         if not self.line_numbers:
             return
         for p in range(self.maxlineno):
@@ -523,8 +680,16 @@
                 self._draw_linenumber(p, n)
 
     def _paint_line_number_bg(self, im):
-        """
-        Paint the line number background on the image.
+        """Paint the line number background on the image.
+
+        Parameters
+        ----------
+        im :
+            
+
+        Returns
+        -------
+
         """
         if not self.line_numbers:
             return
@@ -540,12 +705,22 @@
         del draw
 
     def format(self, tokensource, outfile):
-        """
-        Format ``tokensource``, an iterable of ``(tokentype, tokenstring)``
+        """Format ``tokensource``, an iterable of ``(tokentype, tokenstring)``
         tuples and write it into ``outfile``.
-
+        
         This implementation calculates where it should draw each token on the
         pixmap, then calculates the required pixmap size and draws the items.
+
+        Parameters
+        ----------
+        tokensource :
+            
+        outfile :
+            
+
+        Returns
+        -------
+
         """
         self._create_drawables(tokensource)
         self._draw_line_numbers()
@@ -574,11 +749,17 @@
 # when used in pygmentize.
 
 class GifImageFormatter(ImageFormatter):
-    """
-    Create a GIF image from source code. This uses the Python Imaging Library to
+    """Create a GIF image from source code. This uses the Python Imaging Library to
     generate a pixmap from the source code.
-
+    
     .. versionadded:: 1.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'img_gif'
@@ -588,11 +769,17 @@
 
 
 class JpgImageFormatter(ImageFormatter):
-    """
-    Create a JPEG image from source code. This uses the Python Imaging Library to
+    """Create a JPEG image from source code. This uses the Python Imaging Library to
     generate a pixmap from the source code.
-
+    
     .. versionadded:: 1.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'img_jpg'
@@ -602,11 +789,17 @@
 
 
 class BmpImageFormatter(ImageFormatter):
-    """
-    Create a bitmap image from source code. This uses the Python Imaging Library to
+    """Create a bitmap image from source code. This uses the Python Imaging Library to
     generate a pixmap from the source code.
-
+    
     .. versionadded:: 1.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'img_bmp'
