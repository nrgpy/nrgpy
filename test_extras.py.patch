# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/ma/tests/test_extras.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/ma/tests/test_extras.py
@@ -33,8 +33,10 @@
 
 
 class TestGeneric:
+    """ """
     #
     def test_masked_all(self):
+        """ """
         # Tests masked_all
         # Standard dtype
         test = masked_all((2,), dtype=float)
@@ -65,6 +67,7 @@
         assert_equal(test, control)
 
     def test_masked_all_with_object_nested(self):
+        """ """
         # Test masked_all works with nested array with dtype of an 'object'
         # refers to issue #15895
         my_dtype = np.dtype([('b', ([('c', object)], (1,)))])
@@ -77,6 +80,7 @@
         assert_equal(masked_arr['b']['c']._fill_value.shape, ())
     
     def test_masked_all_with_object(self):
+        """ """
         # same as above except that the array is not nested
         my_dtype = np.dtype([('b', (object, (1,)))])
         masked_arr = np.ma.masked_all((1,), my_dtype)
@@ -87,6 +91,7 @@
         assert_equal(masked_arr['b']._fill_value.shape, ())
 
     def test_masked_all_like(self):
+        """ """
         # Tests masked_all
         # Standard dtype
         base = array([1, 2], dtype=float)
@@ -107,6 +112,17 @@
         assert_equal(test, control)
 
     def check_clump(self, f):
+        """
+
+        Parameters
+        ----------
+        f :
+            
+
+        Returns
+        -------
+
+        """
         for i in range(1, 7):
             for j in range(2**i):
                 k = np.arange(i, dtype=int)
@@ -123,6 +139,7 @@
                     assert_equal(a.compressed().sum(), s)
 
     def test_clump_masked(self):
+        """ """
         # Test clump_masked
         a = masked_array(np.arange(10))
         a[[0, 1, 2, 6, 8, 9]] = masked
@@ -134,6 +151,7 @@
         self.check_clump(clump_masked)
 
     def test_clump_unmasked(self):
+        """ """
         # Test clump_unmasked
         a = masked_array(np.arange(10))
         a[[0, 1, 2, 6, 8, 9]] = masked
@@ -144,6 +162,7 @@
         self.check_clump(clump_unmasked)
 
     def test_flatnotmasked_contiguous(self):
+        """ """
         # Test flatnotmasked_contiguous
         a = arange(10)
         # No mask
@@ -163,8 +182,10 @@
 
 
 class TestAverage:
+    """ """
     # Several tests of average. Why so many ? Good point...
     def test_testAverage1(self):
+        """ """
         # Test of average.
         ott = array([0., 1., 2., 3.], mask=[True, False, False, False])
         assert_equal(2.0, average(ott, axis=0))
@@ -184,6 +205,7 @@
         assert_equal(wts, [1., 0.])
 
     def test_testAverage2(self):
+        """ """
         # More tests of average.
         w1 = [0, 1, 1, 1, 1, 0]
         w2 = [[0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 1]]
@@ -218,6 +240,7 @@
                      [0., 1., 99., 99., 4.0, 10.0])
 
     def test_testAverage3(self):
+        """ """
         # Yet more tests of average!
         a = arange(6)
         b = arange(6) * 3
@@ -242,6 +265,7 @@
         assert_equal(a2dma, [1.5, 4.0])
 
     def test_onintegers_with_mask(self):
+        """ """
         # Test average on integers with mask
         a = average(array([1, 2]))
         assert_equal(a, 1.5)
@@ -249,6 +273,7 @@
         assert_equal(a, 1.5)
 
     def test_complex(self):
+        """ """
         # Test with complex data.
         # (Regression test for https://github.com/numpy/numpy/issues/2684)
         mask = np.array([[0, 0, 0, 1, 0],
@@ -294,9 +319,11 @@
 
 
 class TestConcatenator:
+    """ """
     # Tests for mr_, the equivalent of r_ for masked arrays.
 
     def test_1d(self):
+        """ """
         # Tests mr_ on 1D arrays.
         assert_array_equal(mr_[1, 2, 3, 4, 5, 6], array([1, 2, 3, 4, 5, 6]))
         b = ones(5)
@@ -308,6 +335,7 @@
         assert_array_equal(c.mask, mr_[m, 0, 0, m])
 
     def test_2d(self):
+        """ """
         # Tests mr_ on 2D arrays.
         a_1 = np.random.rand(5, 5)
         a_2 = np.random.rand(5, 5)
@@ -328,6 +356,7 @@
         assert_array_equal(d.mask, np.r_[m_1, m_2])
 
     def test_masked_constant(self):
+        """ """
         actual = mr_[np.ma.masked, 1]
         assert_equal(actual.mask, [True, False])
         assert_equal(actual.data[1], 1)
@@ -338,9 +367,11 @@
 
 
 class TestNotMasked:
+    """ """
     # Tests notmasked_edges and notmasked_contiguous.
 
     def test_edges(self):
+        """ """
         # Tests unmasked_edges
         data = masked_array(np.arange(25).reshape(5, 5),
                             mask=[[0, 0, 1, 0, 0],
@@ -375,6 +406,7 @@
         assert_equal(test[1], [(0, 1, 2, 4), (4, 2, 4, 4)])
 
     def test_contiguous(self):
+        """ """
         # Tests notmasked_contiguous
         a = masked_array(np.arange(24).reshape(3, 8),
                          mask=[[0, 0, 0, 0, 1, 1, 1, 1],
@@ -408,8 +440,10 @@
 
 
 class TestCompressFunctions:
+    """ """
 
     def test_compress_nd(self):
+        """ """
         # Tests compress_nd
         x = np.array(list(range(3*4*5))).reshape(3, 4, 5)
         m = np.zeros((3,4,5)).astype(bool)
@@ -522,6 +556,7 @@
         assert_equal(a, a2)
 
     def test_compress_rowcols(self):
+        """ """
         # Tests compress_rowcols
         x = array(np.arange(9).reshape(3, 3),
                   mask=[[1, 0, 0], [0, 0, 0], [0, 0, 0]])
@@ -542,6 +577,7 @@
         assert_equal(compress_rowcols(x, 1).size, 0)
 
     def test_mask_rowcols(self):
+        """ """
         # Tests mask_rowcols.
         x = array(np.arange(9).reshape(3, 3),
                   mask=[[1, 0, 0], [0, 0, 0], [0, 0, 0]])
@@ -577,6 +613,21 @@
     @pytest.mark.parametrize(["func", "rowcols_axis"],
                              [(np.ma.mask_rows, 0), (np.ma.mask_cols, 1)])
     def test_mask_row_cols_axis_deprecation(self, axis, func, rowcols_axis):
+        """
+
+        Parameters
+        ----------
+        axis :
+            
+        func :
+            
+        rowcols_axis :
+            
+
+        Returns
+        -------
+
+        """
         # Test deprecation of the axis argument to `mask_rows` and `mask_cols`
         x = array(np.arange(9).reshape(3, 3),
                   mask=[[1, 0, 0], [0, 0, 0], [0, 0, 0]])
@@ -586,6 +637,7 @@
             assert_equal(res, mask_rowcols(x, rowcols_axis))
 
     def test_dot(self):
+        """ """
         # Tests dot product
         n = np.arange(1, 7)
         #
@@ -656,6 +708,7 @@
         assert_equal(c, np.dot(b.filled(0), a.filled(0)))
 
     def test_dot_returns_maskedarray(self):
+        """ """
         # See gh-6611
         a = np.eye(3)
         b = array(a)
@@ -665,6 +718,7 @@
         assert_(type(dot(b, b)) is MaskedArray)
 
     def test_dot_out(self):
+        """ """
         a = array(np.eye(3))
         out = array(np.zeros((3, 3)))
         res = dot(a, a, out=out)
@@ -673,11 +727,24 @@
 
 
 class TestApplyAlongAxis:
+    """ """
     # Tests 2D functions
     def test_3d(self):
+        """ """
         a = arange(12.).reshape(2, 2, 3)
 
         def myfunc(b):
+            """
+
+            Parameters
+            ----------
+            b :
+                
+
+            Returns
+            -------
+
+            """
             return b[1]
 
         xa = apply_along_axis(myfunc, 2, a)
@@ -685,9 +752,23 @@
 
     # Tests kwargs functions
     def test_3d_kwargs(self):
+        """ """
         a = arange(12).reshape(2, 2, 3)
 
         def myfunc(b, offset=0):
+            """
+
+            Parameters
+            ----------
+            b :
+                
+            offset :
+                 (Default value = 0)
+
+            Returns
+            -------
+
+            """
             return b[1+offset]
 
         xa = apply_along_axis(myfunc, 2, a, offset=1)
@@ -695,8 +776,10 @@
 
 
 class TestApplyOverAxes:
+    """ """
     # Tests apply_over_axes
     def test_basic(self):
+        """ """
         a = arange(24).reshape(2, 3, 4)
         test = apply_over_axes(np.sum, a, [0, 2])
         ctrl = np.array([[[60], [92], [124]]])
@@ -708,11 +791,14 @@
 
 
 class TestMedian:
+    """ """
     def test_pytype(self):
+        """ """
         r = np.ma.median([[np.inf, np.inf], [np.inf, np.inf]], axis=-1)
         assert_equal(r, np.inf)
 
     def test_inf(self):
+        """ """
         # test that even which computes handles inf / x = masked
         r = np.ma.median(np.ma.masked_array([[np.inf, np.inf],
                                              [np.inf, np.inf]]), axis=-1)
@@ -731,6 +817,7 @@
         assert_equal(r.mask, True)
 
     def test_non_masked(self):
+        """ """
         x = np.arange(9)
         assert_equal(np.ma.median(x), 4.)
         assert_(type(np.ma.median(x)) is not MaskedArray)
@@ -752,6 +839,7 @@
         assert_(np.ma.median(x, axis=1) is not MaskedArray)
 
     def test_docstring_examples(self):
+        """ """
         "test the examples given in the docstring of ma.median"
         x = array(np.arange(8), mask=[0]*4 + [1]*4)
         assert_equal(np.ma.median(x), 1.5)
@@ -767,6 +855,7 @@
         assert_(type(ma_x) is MaskedArray)
 
     def test_axis_argument_errors(self):
+        """ """
         msg = "mask = %s, ndim = %s, axis = %s, overwrite_input = %s"
         for ndmin in range(5):
             for mask in [False, True]:
@@ -791,6 +880,7 @@
                         raise AssertionError(msg % (mask, ndmin, axis, over))
 
     def test_masked_0d(self):
+        """ """
         # Check values
         x = array(1, mask=False)
         assert_equal(np.ma.median(x), 1)
@@ -798,6 +888,7 @@
         assert_equal(np.ma.median(x), np.ma.masked)
 
     def test_masked_1d(self):
+        """ """
         x = array(np.arange(5), mask=True)
         assert_equal(np.ma.median(x), np.ma.masked)
         assert_equal(np.ma.median(x).shape, (), "shape mismatch")
@@ -836,10 +927,12 @@
         assert_(type(np.ma.median(x)) is not MaskedArray)
 
     def test_1d_shape_consistency(self):
+        """ """
         assert_equal(np.ma.median(array([1,2,3],mask=[0,0,0])).shape,
                      np.ma.median(array([1,2,3],mask=[0,1,0])).shape )
 
     def test_2d(self):
+        """ """
         # Tests median w/ 2D
         (n, p) = (101, 30)
         x = masked_array(np.linspace(-1., 1., n),)
@@ -856,6 +949,7 @@
         assert_equal(median(z.T, axis=1), np.zeros(p))
 
     def test_2d_waxis(self):
+        """ """
         # Tests median w/ 2D arrays and different axis.
         x = masked_array(np.arange(30).reshape(10, 3))
         x[:3] = x[-3:] = masked
@@ -868,6 +962,7 @@
         assert_equal(median(x, axis=1).mask, [1, 1, 1, 0, 0, 0, 0, 1, 1, 1])
 
     def test_3d(self):
+        """ """
         # Tests median w/ 3D
         x = np.ma.arange(24).reshape(3, 4, 2)
         x[x % 3 == 0] = masked
@@ -879,11 +974,13 @@
         assert_equal(median(x, 0), [[12, 10], [8, 9], [16, 17]])
 
     def test_neg_axis(self):
+        """ """
         x = masked_array(np.arange(30).reshape(10, 3))
         x[:3] = x[-3:] = masked
         assert_equal(median(x, axis=-1), median(x, axis=1))
 
     def test_out_1d(self):
+        """ """
         # integer float even odd
         for v in (30, 30., 31, 31.):
             x = masked_array(np.arange(v))
@@ -898,6 +995,7 @@
             assert_(type(r) is MaskedArray)
 
     def test_out(self):
+        """ """
         # integer float even odd
         for v in (40, 40., 30, 30.):
             x = masked_array(np.arange(v).reshape(10, -1))
@@ -915,6 +1013,7 @@
             assert_(type(r) is MaskedArray)
 
     def test_single_non_masked_value_on_axis(self):
+        """ """
         data = [[1., 0.],
                 [0., 3.],
                 [0., 0.]]
@@ -924,6 +1023,7 @@
                            expected)
 
     def test_nan(self):
+        """ """
         for mask in (False, np.zeros(6, dtype=bool)):
             dm = np.ma.array([[1, np.nan, 3], [1, 2, 3]])
             dm.mask = mask
@@ -953,6 +1053,7 @@
         assert_array_equal(np.ma.median(dm, axis=1), [np.nan, 1.5])
 
     def test_out_nan(self):
+        """ """
         o = np.ma.masked_array(np.zeros((4,)))
         d = np.ma.masked_array(np.ones((3, 4)))
         d[2, 1] = np.nan
@@ -964,6 +1065,7 @@
         assert_equal(np.ma.median(d, out=o), o)
 
     def test_nan_behavior(self):
+        """ """
         a = np.ma.masked_array(np.arange(24, dtype=float))
         a[::3] = np.ma.masked
         a[2] = np.nan
@@ -999,6 +1101,7 @@
         assert_equal(np.ma.median(a, (0, 2)), b)
 
     def test_ambigous_fill(self):
+        """ """
         # 255 is max value, used as filler for sort
         a = np.array([[3, 3, 255], [3, 3, 255]], dtype=np.uint8)
         a = np.ma.masked_array(a, mask=a == 3)
@@ -1008,6 +1111,7 @@
         assert_array_equal(np.ma.median(a), 255)
 
     def test_special(self):
+        """ """
         for inf in [np.inf, -np.inf]:
             a = np.array([[inf,  np.nan], [np.nan, np.nan]])
             a = np.ma.masked_array(a, mask=np.isnan(a))
@@ -1051,6 +1155,7 @@
                                  ([np.nan] * i) + [inf] * j)
 
     def test_empty(self):
+        """ """
         # empty arrays
         a = np.ma.masked_array(np.array([], dtype=float))
         with suppress_warnings() as w:
@@ -1080,6 +1185,7 @@
             assert_(w[0].category is RuntimeWarning)
 
     def test_object(self):
+        """ """
         o = np.ma.masked_array(np.arange(7.))
         assert_(type(np.ma.median(o.astype(object))), float)
         o[2] = np.nan
@@ -1087,11 +1193,14 @@
 
 
 class TestCov:
+    """ """
 
     def setup(self):
+        """ """
         self.data = array(np.random.rand(12))
 
     def test_1d_without_missing(self):
+        """ """
         # Test cov on 1D variable w/o missing values
         x = self.data
         assert_almost_equal(np.cov(x), cov(x))
@@ -1100,6 +1209,7 @@
                             cov(x, rowvar=False, bias=True))
 
     def test_2d_without_missing(self):
+        """ """
         # Test cov on 1 2D variable w/o missing values
         x = self.data.reshape(3, 4)
         assert_almost_equal(np.cov(x), cov(x))
@@ -1108,6 +1218,7 @@
                             cov(x, rowvar=False, bias=True))
 
     def test_1d_with_missing(self):
+        """ """
         # Test cov 1 1D variable w/missing values
         x = self.data
         x[-1] = masked
@@ -1132,6 +1243,7 @@
                             cov(x, x[::-1], rowvar=False, bias=True))
 
     def test_2d_with_missing(self):
+        """ """
         # Test cov on 2D variable w/ missing value
         x = self.data
         x[-1] = masked
@@ -1154,12 +1266,15 @@
 
 
 class TestCorrcoef:
+    """ """
 
     def setup(self):
+        """ """
         self.data = array(np.random.rand(12))
         self.data2 = array(np.random.rand(12))
 
     def test_ddof(self):
+        """ """
         # ddof raises DeprecationWarning
         x, y = self.data, self.data2
         expected = np.corrcoef(x)
@@ -1176,6 +1291,7 @@
             assert_almost_equal(corrcoef(x, y, ddof=3), expected2)
 
     def test_bias(self):
+        """ """
         x, y = self.data, self.data2
         expected = np.corrcoef(x)
         # bias raises DeprecationWarning
@@ -1189,6 +1305,7 @@
             assert_almost_equal(corrcoef(x, bias=1), expected)
 
     def test_1d_without_missing(self):
+        """ """
         # Test cov on 1D variable w/o missing values
         x = self.data
         assert_almost_equal(np.corrcoef(x), corrcoef(x))
@@ -1200,6 +1317,7 @@
                                 corrcoef(x, rowvar=False, bias=True))
 
     def test_2d_without_missing(self):
+        """ """
         # Test corrcoef on 1 2D variable w/o missing values
         x = self.data.reshape(3, 4)
         assert_almost_equal(np.corrcoef(x), corrcoef(x))
@@ -1211,6 +1329,7 @@
                                 corrcoef(x, rowvar=False, bias=True))
 
     def test_1d_with_missing(self):
+        """ """
         # Test corrcoef 1 1D variable w/missing values
         x = self.data
         x[-1] = masked
@@ -1241,6 +1360,7 @@
                                 corrcoef(x, x[::-1], ddof=2))
 
     def test_2d_with_missing(self):
+        """ """
         # Test corrcoef on 2D variable w/ missing value
         x = self.data
         x[-1] = masked
@@ -1261,8 +1381,10 @@
 
 
 class TestPolynomial:
+    """ """
     #
     def test_polyfit(self):
+        """ """
         # Tests polyfit
         # On ndarrays
         x = np.random.rand(10)
@@ -1302,6 +1424,7 @@
             assert_almost_equal(a, a_)
 
     def test_polyfit_with_masked_NaNs(self):
+        """ """
         x = np.random.rand(10)
         y = np.random.rand(20).reshape(-1, 2)
 
@@ -1319,8 +1442,10 @@
 
 
 class TestArraySetOps:
+    """ """
 
     def test_unique_onlist(self):
+        """ """
         # Test unique on list
         data = [1, 1, 1, 2, 2, 3]
         test = unique(data, return_index=True, return_inverse=True)
@@ -1330,6 +1455,7 @@
         assert_equal(test[2], [0, 0, 0, 1, 1, 2])
 
     def test_unique_onmaskedarray(self):
+        """ """
         # Test unique on masked data w/use_mask=True
         data = masked_array([1, 1, 1, 2, 2, 3], mask=[0, 0, 1, 0, 1, 0])
         test = unique(data, return_index=True, return_inverse=True)
@@ -1346,6 +1472,7 @@
         assert_equal(test[2], [0, 0, 3, 1, 3, 2])
 
     def test_unique_allmasked(self):
+        """ """
         # Test all masked
         data = masked_array([1, 1, 1], mask=True)
         test = unique(data, return_index=True, return_inverse=True)
@@ -1361,6 +1488,7 @@
         assert_equal(test[2], [0])
 
     def test_ediff1d(self):
+        """ """
         # Tests mediff1d
         x = masked_array(np.arange(5), mask=[1, 0, 0, 0, 1])
         control = array([1, 1, 1, 4], mask=[1, 0, 0, 1])
@@ -1370,6 +1498,7 @@
         assert_equal(test.mask, control.mask)
 
     def test_ediff1d_tobegin(self):
+        """ """
         # Test ediff1d w/ to_begin
         x = masked_array(np.arange(5), mask=[1, 0, 0, 0, 1])
         test = ediff1d(x, to_begin=masked)
@@ -1385,6 +1514,7 @@
         assert_equal(test.mask, control.mask)
 
     def test_ediff1d_toend(self):
+        """ """
         # Test ediff1d w/ to_end
         x = masked_array(np.arange(5), mask=[1, 0, 0, 0, 1])
         test = ediff1d(x, to_end=masked)
@@ -1400,6 +1530,7 @@
         assert_equal(test.mask, control.mask)
 
     def test_ediff1d_tobegin_toend(self):
+        """ """
         # Test ediff1d w/ to_begin and to_end
         x = masked_array(np.arange(5), mask=[1, 0, 0, 0, 1])
         test = ediff1d(x, to_end=masked, to_begin=masked)
@@ -1416,6 +1547,7 @@
         assert_equal(test.mask, control.mask)
 
     def test_ediff1d_ndarray(self):
+        """ """
         # Test ediff1d w/ a ndarray
         x = np.arange(5)
         test = ediff1d(x)
@@ -1432,6 +1564,7 @@
         assert_equal(test.mask, control.mask)
 
     def test_intersect1d(self):
+        """ """
         # Test intersect1d
         x = array([1, 3, 3, 3], mask=[0, 0, 0, 1])
         y = array([3, 1, 1, 1], mask=[0, 0, 0, 1])
@@ -1440,6 +1573,7 @@
         assert_equal(test, control)
 
     def test_setxor1d(self):
+        """ """
         # Test setxor1d
         a = array([1, 2, 5, 7, -1], mask=[0, 0, 0, 0, 1])
         b = array([1, 2, 3, 4, 5, -1], mask=[0, 0, 0, 0, 0, 1])
@@ -1466,6 +1600,7 @@
         assert_array_equal([], setxor1d([], []))
 
     def test_isin(self):
+        """ """
         # the tests for in1d cover most of isin's behavior
         # if in1d is removed, would need to change those tests to test
         # isin instead.
@@ -1487,6 +1622,7 @@
         assert_array_equal(c, d)
 
     def test_in1d(self):
+        """ """
         # Test in1d
         a = array([1, 2, 5, 7, -1], mask=[0, 0, 0, 0, 1])
         b = array([1, 2, 3, 4, 5, -1], mask=[0, 0, 0, 0, 0, 1])
@@ -1501,6 +1637,7 @@
         assert_array_equal([], in1d([], []))
 
     def test_in1d_invert(self):
+        """ """
         # Test in1d's invert parameter
         a = array([1, 2, 5, 7, -1], mask=[0, 0, 0, 0, 1])
         b = array([1, 2, 3, 4, 5, -1], mask=[0, 0, 0, 0, 0, 1])
@@ -1513,6 +1650,7 @@
         assert_array_equal([], in1d([], [], invert=True))
 
     def test_union1d(self):
+        """ """
         # Test union1d
         a = array([1, 2, 5, 7, 5, -1], mask=[0, 0, 0, 0, 0, 1])
         b = array([1, 2, 3, 4, 5, -1], mask=[0, 0, 0, 0, 0, 1])
@@ -1531,6 +1669,7 @@
         assert_array_equal([], union1d([], []))
 
     def test_setdiff1d(self):
+        """ """
         # Test setdiff1d
         a = array([6, 5, 4, 7, 7, 1, 2, 1], mask=[0, 0, 0, 0, 0, 0, 0, 1])
         b = array([2, 4, 3, 3, 2, 1, 5])
@@ -1544,6 +1683,7 @@
         assert_equal(setdiff1d(a, []).dtype, np.uint32)
 
     def test_setdiff1d_char_array(self):
+        """ """
         # Test setdiff1d_charray
         a = np.array(['a', 'b', 'c'])
         b = np.array(['a', 'b', 's'])
@@ -1551,8 +1691,10 @@
 
 
 class TestShapeBase:
+    """ """
 
     def test_atleast_2d(self):
+        """ """
         # Test atleast_2d
         a = masked_array([0, 1, 2], mask=[0, 1, 0])
         b = atleast_2d(a)
@@ -1563,6 +1705,7 @@
         assert_equal(b.mask.shape, b.data.shape)
 
     def test_shape_scalar(self):
+        """ """
         # the atleast and diagflat function should work with scalars
         # GitHub issue #3367
         # Additionally, the atleast functions should accept multiple scalars
@@ -1607,8 +1750,10 @@
 
 
 class TestStack:
+    """ """
 
     def test_stack_1d(self):
+        """ """
         a = masked_array([0, 1, 2], mask=[0, 1, 0])
         b = masked_array([9, 8, 7], mask=[1, 0, 0])
 
@@ -1627,6 +1772,7 @@
         assert_array_equal(b.mask, c[:, 1].mask)
 
     def test_stack_masks(self):
+        """ """
         a = masked_array([0, 1, 2], mask=True)
         b = masked_array([9, 8, 7], mask=False)
 
@@ -1645,6 +1791,7 @@
         assert_array_equal(b.mask, c[:, 1].mask)
 
     def test_stack_nd(self):
+        """ """
         # 2D
         shp = (3, 2)
         d1 = np.random.randint(0, 10, shp)
