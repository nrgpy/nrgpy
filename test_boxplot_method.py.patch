# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/plotting/test_boxplot_method.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/plotting/test_boxplot_method.py
@@ -18,8 +18,10 @@
 
 @td.skip_if_no_mpl
 class TestDataFramePlots(TestPlotBase):
+    """ """
     @pytest.mark.slow
     def test_boxplot_legacy1(self):
+        """ """
         df = DataFrame(
             np.random.randn(6, 4),
             index=list(string.ascii_letters[:6]),
@@ -45,6 +47,7 @@
 
     @pytest.mark.slow
     def test_boxplot_legacy2(self):
+        """ """
         df = DataFrame(np.random.rand(10, 2), columns=["Col1", "Col2"])
         df["X"] = Series(["A", "A", "A", "A", "A", "B", "B", "B", "B", "B"])
         df["Y"] = Series(["A"] * 10)
@@ -80,12 +83,14 @@
 
     @pytest.mark.slow
     def test_boxplot_return_type_none(self):
+        """ """
         # GH 12216; return_type=None & by=None -> axes
         result = self.hist_df.boxplot()
         assert isinstance(result, self.plt.Axes)
 
     @pytest.mark.slow
     def test_boxplot_return_type_legacy(self):
+        """ """
         # API change in https://github.com/pandas-dev/pandas/pull/7096
         import matplotlib as mpl  # noqa
 
@@ -114,7 +119,21 @@
 
     @pytest.mark.slow
     def test_boxplot_axis_limits(self):
+        """ """
         def _check_ax_limits(col, ax):
+            """
+
+            Parameters
+            ----------
+            col :
+                
+            ax :
+                
+
+            Returns
+            -------
+
+            """
             y_min, y_max = ax.get_ylim()
             assert y_min <= col.min()
             assert y_max >= col.max()
@@ -141,24 +160,28 @@
 
     @pytest.mark.slow
     def test_boxplot_empty_column(self):
+        """ """
         df = DataFrame(np.random.randn(20, 4))
         df.loc[:, 0] = np.nan
         _check_plot_works(df.boxplot, return_type="axes")
 
     @pytest.mark.slow
     def test_figsize(self):
+        """ """
         df = DataFrame(np.random.rand(10, 5), columns=["A", "B", "C", "D", "E"])
         result = df.boxplot(return_type="axes", figsize=(12, 8))
         assert result.figure.bbox_inches.width == 12
         assert result.figure.bbox_inches.height == 8
 
     def test_fontsize(self):
+        """ """
         df = DataFrame({"a": [1, 2, 3, 4, 5, 6]})
         self._check_ticks_props(
             df.boxplot("a", fontsize=16), xlabelsize=16, ylabelsize=16
         )
 
     def test_boxplot_numeric_data(self):
+        """ """
         # GH 22799
         df = DataFrame(
             {
@@ -185,6 +208,19 @@
         ],
     )
     def test_color_kwd(self, colors_kwd, expected):
+        """
+
+        Parameters
+        ----------
+        colors_kwd :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # GH: 26214
         df = DataFrame(random.rand(10, 2))
         result = df.boxplot(color=colors_kwd, return_type="dict")
@@ -196,6 +232,19 @@
         [(dict(boxes="r", invalid_key="r"), "invalid key 'invalid_key'")],
     )
     def test_color_kwd_errors(self, dict_colors, msg):
+        """
+
+        Parameters
+        ----------
+        dict_colors :
+            
+        msg :
+            
+
+        Returns
+        -------
+
+        """
         # GH: 26214
         df = DataFrame(random.rand(10, 2))
         with pytest.raises(ValueError, match=msg):
@@ -211,6 +260,19 @@
         ],
     )
     def test_specified_props_kwd(self, props, expected):
+        """
+
+        Parameters
+        ----------
+        props :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # GH 30346
         df = DataFrame({k: np.random.random(100) for k in "ABC"})
         kwd = {props: dict(color="C1")}
@@ -221,8 +283,10 @@
 
 @td.skip_if_no_mpl
 class TestDataFrameGroupByPlots(TestPlotBase):
+    """ """
     @pytest.mark.slow
     def test_boxplot_legacy1(self):
+        """ """
         grouped = self.hist_df.groupby(by="gender")
         with tm.assert_produces_warning(UserWarning):
             axes = _check_plot_works(grouped.boxplot, return_type="axes")
@@ -232,6 +296,7 @@
 
     @pytest.mark.slow
     def test_boxplot_legacy2(self):
+        """ """
         tuples = zip(string.ascii_letters[:10], range(10))
         df = DataFrame(np.random.rand(10, 3), index=MultiIndex.from_tuples(tuples))
         grouped = df.groupby(level=1)
@@ -244,6 +309,7 @@
 
     @pytest.mark.slow
     def test_boxplot_legacy3(self):
+        """ """
         tuples = zip(string.ascii_letters[:10], range(10))
         df = DataFrame(np.random.rand(10, 3), index=MultiIndex.from_tuples(tuples))
         grouped = df.unstack(level=1).groupby(level=0, axis=1)
@@ -255,6 +321,7 @@
 
     @pytest.mark.slow
     def test_grouped_plot_fignums(self):
+        """ """
         n = 10
         weight = Series(np.random.normal(166, 20, size=n))
         height = Series(np.random.normal(60, 10, size=n))
@@ -279,6 +346,7 @@
 
     @pytest.mark.slow
     def test_grouped_box_return_type(self):
+        """ """
         df = self.hist_df
 
         # old style: return_type=None
@@ -314,6 +382,7 @@
 
     @pytest.mark.slow
     def test_grouped_box_layout(self):
+        """ """
         df = self.hist_df
 
         msg = "Layout of 1x1 must be larger than required size 2"
@@ -408,6 +477,7 @@
 
     @pytest.mark.slow
     def test_grouped_box_multiple_axes(self):
+        """ """
         # GH 6970, GH 7069
         df = self.hist_df
 
@@ -451,6 +521,7 @@
                 axes = df.groupby("classroom").boxplot(ax=axes)
 
     def test_fontsize(self):
+        """ """
         df = DataFrame({"a": [1, 2, 3, 4, 5, 6], "b": [0, 0, 0, 1, 1, 1]})
         self._check_ticks_props(
             df.boxplot("a", by="b", fontsize=16), xlabelsize=16, ylabelsize=16
