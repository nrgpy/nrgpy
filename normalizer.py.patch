# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/parso/normalizer.py
+++ b/..//venv/lib/python3.8/site-packages/parso/normalizer.py
@@ -4,6 +4,7 @@
 
 
 class _NormalizerMeta(type):
+    """ """
     def __new__(cls, name, bases, dct):
         new_cls = type.__new__(cls, name, bases, dct)
         new_cls.rule_value_classes = {}
@@ -12,6 +13,7 @@
 
 
 class Normalizer(use_metaclass(_NormalizerMeta)):
+    """ """
     _rule_type_instances = {}
     _rule_value_instances = {}
 
@@ -24,6 +26,17 @@
         self._rule_value_instances = self._instantiate_rules('rule_value_classes')
 
     def _instantiate_rules(self, attr):
+        """
+
+        Parameters
+        ----------
+        attr :
+            
+
+        Returns
+        -------
+
+        """
         dct = {}
         for base in type(self).mro():
             rules_map = getattr(base, attr, {})
@@ -33,12 +46,34 @@
         return dct
 
     def walk(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         self.initialize(node)
         value = self.visit(node)
         self.finalize()
         return value
 
     def visit(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         try:
             children = node.children
         except AttributeError:
@@ -49,14 +84,47 @@
 
     @contextmanager
     def visit_node(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         self._check_type_rules(node)
         yield
 
     def _check_type_rules(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         for rule in self._rule_type_instances.get(node.type, []):
             rule.feed_node(node)
 
     def visit_leaf(self, leaf):
+        """
+
+        Parameters
+        ----------
+        leaf :
+            
+
+        Returns
+        -------
+
+        """
         self._check_type_rules(leaf)
 
         for rule in self._rule_value_instances.get(leaf.value, []):
@@ -65,12 +133,39 @@
         return leaf.prefix + leaf.value
 
     def initialize(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         pass
 
     def finalize(self):
+        """ """
         pass
 
     def add_issue(self, node, code, message):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+        code :
+            
+        message :
+            
+
+        Returns
+        -------
+
+        """
         issue = Issue(node, code, message)
         if issue not in self.issues:
             self.issues.append(issue)
@@ -78,18 +173,43 @@
 
     @classmethod
     def register_rule(cls, **kwargs):
-        """
-        Use it as a class decorator::
-
+        """Use it as a class decorator::
+        
             normalizer = Normalizer('grammar', 'config')
             @normalizer.register_rule(value='foo')
             class MyRule(Rule):
                 error_code = 42
+
+        Parameters
+        ----------
+        **kwargs :
+            
+
+        Returns
+        -------
+
         """
         return cls._register_rule(**kwargs)
 
     @classmethod
     def _register_rule(cls, value=None, values=(), type=None, types=()):
+        """
+
+        Parameters
+        ----------
+        value :
+             (Default value = None)
+        values :
+             (Default value = ())
+        type :
+             (Default value = None)
+        types :
+             (Default value = ())
+
+        Returns
+        -------
+
+        """
         values = list(values)
         types = list(types)
         if value is not None:
@@ -101,6 +221,17 @@
             raise ValueError("You must register at least something.")
 
         def decorator(rule_cls):
+            """
+
+            Parameters
+            ----------
+            rule_cls :
+                
+
+            Returns
+            -------
+
+            """
             for v in values:
                 cls.rule_value_classes.setdefault(v, []).append(rule_cls)
             for t in types:
@@ -111,9 +242,21 @@
 
 
 class NormalizerConfig(object):
+    """ """
     normalizer_class = Normalizer
 
     def create_normalizer(self, grammar):
+        """
+
+        Parameters
+        ----------
+        grammar :
+            
+
+        Returns
+        -------
+
+        """
         if self.normalizer_class is None:
             return None
 
@@ -121,6 +264,7 @@
 
 
 class Issue(object):
+    """ """
     def __init__(self, node, code, message):
         self.code = code
         """
@@ -151,6 +295,7 @@
 
 
 class Rule(object):
+    """ """
     code = None
     message = None
 
@@ -158,12 +303,47 @@
         self._normalizer = normalizer
 
     def is_issue(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         raise NotImplementedError()
 
     def get_node(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         return node
 
     def _get_message(self, message, node):
+        """
+
+        Parameters
+        ----------
+        message :
+            
+        node :
+            
+
+        Returns
+        -------
+
+        """
         if message is None:
             message = self.message
             if message is None:
@@ -171,6 +351,21 @@
         return message
 
     def add_issue(self, node, code=None, message=None):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+        code :
+             (Default value = None)
+        message :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if code is None:
             code = self.code
             if code is None:
@@ -181,22 +376,56 @@
         self._normalizer.add_issue(node, code, message)
 
     def feed_node(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         if self.is_issue(node):
             issue_node = self.get_node(node)
             self.add_issue(issue_node)
 
 
 class RefactoringNormalizer(Normalizer):
+    """ """
     def __init__(self, node_to_str_map):
         self._node_to_str_map = node_to_str_map
 
     def visit(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         try:
             return self._node_to_str_map[node]
         except KeyError:
             return super(RefactoringNormalizer, self).visit(node)
 
     def visit_leaf(self, leaf):
+        """
+
+        Parameters
+        ----------
+        leaf :
+            
+
+        Returns
+        -------
+
+        """
         try:
             return self._node_to_str_map[leaf]
         except KeyError:
