# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jupyter_client/kernelapp.py
+++ b/..//venv/lib/python3.8/site-packages/jupyter_client/kernelapp.py
@@ -11,8 +11,7 @@
 from .manager import KernelManager
 
 class KernelApp(JupyterApp):
-    """Launch a kernel by name in a local subprocess.
-    """
+    """Launch a kernel by name in a local subprocess."""
     version = __version__
     description = "Run a kernel locally in a subprocess"
 
@@ -29,6 +28,17 @@
     ).tag(config=True)
 
     def initialize(self, argv=None):
+        """
+
+        Parameters
+        ----------
+        argv :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         super().initialize(argv)
         
         cf_basename = 'kernel-%s.json' % uuid.uuid4()
@@ -45,24 +55,56 @@
             return
 
         def shutdown_handler(signo, frame):
+            """
+
+            Parameters
+            ----------
+            signo :
+                
+            frame :
+                
+
+            Returns
+            -------
+
+            """
             self.loop.add_callback_from_signal(self.shutdown, signo)
         for sig in [signal.SIGTERM, signal.SIGINT]:
             signal.signal(sig, shutdown_handler)
 
     def shutdown(self, signo):
+        """
+
+        Parameters
+        ----------
+        signo :
+            
+
+        Returns
+        -------
+
+        """
         self.log.info('Shutting down on signal %d' % signo)
         self.km.shutdown_kernel()
         self.loop.stop()
 
     def log_connection_info(self):
+        """ """
         cf = self.km.connection_file
         self.log.info('Connection file: %s', cf)
         self.log.info("To connect a client: --existing %s", os.path.basename(cf))
 
     def _record_started(self):
         """For tests, create a file to indicate that we've started
+        
+        Do not rely on this except in our own tests!
 
-        Do not rely on this except in our own tests!
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         fn = os.environ.get('JUPYTER_CLIENT_TEST_RECORD_STARTUP_PRIVATE')
         if fn is not None:
@@ -70,6 +112,7 @@
                 pass
 
     def start(self):
+        """ """
         self.log.info('Starting kernel %r', self.kernel_name)
         try:
             self.km.start_kernel()
