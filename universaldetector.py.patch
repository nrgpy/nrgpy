# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/chardet/universaldetector.py
+++ b/..//venv/lib/python3.8/site-packages/chardet/universaldetector.py
@@ -49,19 +49,24 @@
 
 
 class UniversalDetector(object):
-    """
-    The ``UniversalDetector`` class underlies the ``chardet.detect`` function
+    """The ``UniversalDetector`` class underlies the ``chardet.detect`` function
     and coordinates all of the different charset probers.
-
+    
     To get a ``dict`` containing an encoding and its confidence, you can simply
     run:
-
+    
     .. code::
-
+    
             u = UniversalDetector()
             u.feed(some_bytes)
             u.close()
             detected = u.result
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     """
 
@@ -92,10 +97,16 @@
         self.reset()
 
     def reset(self):
-        """
-        Reset the UniversalDetector and all of its probers back to their
+        """Reset the UniversalDetector and all of its probers back to their
         initial states.  This is called by ``__init__``, so you only need to
         call this directly in between analyses of different documents.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         self.result = {'encoding': None, 'confidence': 0.0, 'language': None}
         self.done = False
@@ -109,18 +120,26 @@
             prober.reset()
 
     def feed(self, byte_str):
-        """
-        Takes a chunk of a document and feeds it through all of the relevant
+        """Takes a chunk of a document and feeds it through all of the relevant
         charset probers.
-
+        
         After calling ``feed``, you can check the value of the ``done``
         attribute to see if you need to continue feeding the
         ``UniversalDetector`` more data, or if it has made a prediction
         (in the ``result`` attribute).
-
+        
         .. note::
            You should always call ``close`` when you're done feeding in your
            document if ``done`` is not already ``True``.
+
+        Parameters
+        ----------
+        byte_str :
+            
+
+        Returns
+        -------
+
         """
         if self.done:
             return
@@ -218,12 +237,18 @@
                 self._has_win_bytes = True
 
     def close(self):
-        """
-        Stop analyzing the current document and come up with a final
+        """Stop analyzing the current document and come up with a final
         prediction.
 
-        :returns:  The ``result`` attribute, a ``dict`` with the keys
-                   `encoding`, `confidence`, and `language`.
+        Parameters
+        ----------
+
+        Returns
+        -------
+        type
+            The ``result`` attribute, a ``dict`` with the keys
+            `encoding`, `confidence`, and `language`.
+
         """
         # Don't bother with checks if we're already done
         if self.done:
