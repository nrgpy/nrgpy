# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/bleach/_vendor/html5lib/treewalkers/etree_lxml.py
+++ b/..//venv/lib/python3.8/site-packages/bleach/_vendor/html5lib/treewalkers/etree_lxml.py
@@ -12,6 +12,17 @@
 
 
 def ensure_str(s):
+    """
+
+    Parameters
+    ----------
+    s :
+        
+
+    Returns
+    -------
+
+    """
     if s is None:
         return None
     elif isinstance(s, text_type):
@@ -21,6 +32,7 @@
 
 
 class Root(object):
+    """ """
     def __init__(self, et):
         self.elementtree = et
         self.children = []
@@ -52,6 +64,7 @@
         return self.children[key]
 
     def getnext(self):
+        """ """
         return None
 
     def __len__(self):
@@ -59,6 +72,7 @@
 
 
 class Doctype(object):
+    """ """
     def __init__(self, root_node, name, public_id, system_id):
         self.root_node = root_node
         self.name = name
@@ -69,19 +83,23 @@
         self.tail = None
 
     def getnext(self):
+        """ """
         return self.root_node.children[1]
 
 
 class FragmentRoot(Root):
+    """ """
     def __init__(self, children):
         self.children = [FragmentWrapper(self, child) for child in children]
         self.text = self.tail = None
 
     def getnext(self):
+        """ """
         return None
 
 
 class FragmentWrapper(object):
+    """ """
     def __init__(self, fragment_root, obj):
         self.root_node = fragment_root
         self.obj = obj
@@ -98,6 +116,7 @@
         return getattr(self.obj, name)
 
     def getnext(self):
+        """ """
         siblings = self.root_node.children
         idx = siblings.index(self)
         if idx < len(siblings) - 1:
@@ -112,6 +131,7 @@
         return bool(self.obj)
 
     def getparent(self):
+        """ """
         return None
 
     def __str__(self):
@@ -125,6 +145,7 @@
 
 
 class TreeWalker(base.NonRecursiveTreeWalker):
+    """ """
     def __init__(self, tree):
         # pylint:disable=redefined-variable-type
         if isinstance(tree, list):
@@ -137,6 +158,17 @@
         self.filter = _ihatexml.InfosetFilter()
 
     def getNodeDetails(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         if isinstance(node, tuple):  # Text node
             node, key = node
             assert key in ("text", "tail"), "Text nodes are text or tail, found %s" % key
@@ -178,6 +210,17 @@
                     attrs, len(node) > 0 or node.text)
 
     def getFirstChild(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         assert not isinstance(node, tuple), "Text nodes have no children"
 
         assert len(node) or node.text, "Node has no children"
@@ -187,6 +230,17 @@
             return node[0]
 
     def getNextSibling(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         if isinstance(node, tuple):  # Text node
             node, key = node
             assert key in ("text", "tail"), "Text nodes are text or tail, found %s" % key
@@ -203,6 +257,17 @@
         return (node, "tail") if node.tail else node.getnext()
 
     def getParentNode(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         if isinstance(node, tuple):  # Text node
             node, key = node
             assert key in ("text", "tail"), "Text nodes are text or tail, found %s" % key
