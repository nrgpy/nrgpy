# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/plotting/_matplotlib/tools.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/plotting/_matplotlib/tools.py
@@ -13,6 +13,19 @@
 
 
 def format_date_labels(ax, rot):
+    """
+
+    Parameters
+    ----------
+    ax :
+        
+    rot :
+        
+
+    Returns
+    -------
+
+    """
     # mini version of autofmt_xdate
     for label in ax.get_xticklabels():
         label.set_ha("right")
@@ -22,6 +35,25 @@
 
 
 def table(ax, data, rowLabels=None, colLabels=None, **kwargs):
+    """
+
+    Parameters
+    ----------
+    ax :
+        
+    data :
+        
+    rowLabels :
+         (Default value = None)
+    colLabels :
+         (Default value = None)
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     if isinstance(data, ABCSeries):
         data = data.to_frame()
     elif isinstance(data, ABCDataFrame):
@@ -44,6 +76,21 @@
 
 
 def _get_layout(nplots, layout=None, layout_type="box"):
+    """
+
+    Parameters
+    ----------
+    nplots :
+        
+    layout :
+         (Default value = None)
+    layout_type :
+         (Default value = "box")
+
+    Returns
+    -------
+
+    """
     if layout is not None:
         if not isinstance(layout, (tuple, list)) or len(layout) != 2:
             raise ValueError("Layout must be a tuple of (rows, columns)")
@@ -102,77 +149,69 @@
     layout_type="box",
     **fig_kw,
 ):
-    """
-    Create a figure with a set of subplots already made.
-
+    """Create a figure with a set of subplots already made.
+    
     This utility wrapper makes it convenient to create common layouts of
     subplots, including the enclosing figure object, in a single call.
 
     Parameters
     ----------
     naxes : int
-      Number of required axes. Exceeded axes are set invisible. Default is
-      nrows * ncols.
-
+        Number of required axes. Exceeded axes are set invisible. Default is
+        nrows * ncols.
     sharex : bool
-      If True, the X axis will be shared amongst all subplots.
-
+        If True, the X axis will be shared amongst all subplots. (Default value = False)
     sharey : bool
-      If True, the Y axis will be shared amongst all subplots.
-
+        If True, the Y axis will be shared amongst all subplots. (Default value = False)
     squeeze : bool
-
-      If True, extra dimensions are squeezed out from the returned axis object:
+        If True, extra dimensions are squeezed out from the returned axis object:
         - if only one subplot is constructed (nrows=ncols=1), the resulting
         single Axis object is returned as a scalar.
         - for Nx1 or 1xN subplots, the returned object is a 1-d numpy object
         array of Axis objects are returned as numpy 1-d arrays.
         - for NxM subplots with N>1 and M>1 are returned as a 2d array.
-
-      If False, no squeezing is done: the returned axis object is always
-      a 2-d array containing Axis instances, even if it ends up being 1x1.
-
+        If False, no squeezing is done: the returned axis object is always
+        a 2-d array containing Axis instances, even if it ends up being 1x1. (Default value = True)
     subplot_kw : dict
-      Dict with keywords passed to the add_subplot() call used to create each
-      subplots.
-
+        Dict with keywords passed to the add_subplot() call used to create each
+        subplots. (Default value = None)
     ax : Matplotlib axis object, optional
-
+         (Default value = None)
     layout : tuple
-      Number of rows and columns of the subplot grid.
-      If not specified, calculated from naxes and layout_type
-
+        Number of rows and columns of the subplot grid.
+        If not specified, calculated from naxes and layout_type (Default value = None)
     layout_type : {'box', 'horizontal', 'vertical'}, default 'box'
-      Specify how to layout the subplot grid.
-
+        Specify how to layout the subplot grid. (Default value = "box")
     fig_kw : Other keyword arguments to be passed to the figure() call.
         Note that all keywords not recognized above will be
         automatically included here.
+    **fig_kw :
+        
 
     Returns
     -------
     fig, ax : tuple
-      - fig is the Matplotlib Figure object
-      - ax can be either a single axis object or an array of axis objects if
-      more than one subplot was created.  The dimensions of the resulting array
-      can be controlled with the squeeze keyword, see above.
+        - fig is the Matplotlib Figure object
+        - ax can be either a single axis object or an array of axis objects if
+        more than one subplot was created.  The dimensions of the resulting array
+        can be controlled with the squeeze keyword, see above.
 
     Examples
     --------
     x = np.linspace(0, 2*np.pi, 400)
     y = np.sin(x**2)
-
+    
     # Just a figure and one subplot
     f, ax = plt.subplots()
     ax.plot(x, y)
     ax.set_title('Simple plot')
-
+    
     # Two subplots, unpack the output array immediately
     f, (ax1, ax2) = plt.subplots(1, 2, sharey=True)
     ax1.plot(x, y)
     ax1.set_title('Sharing Y axis')
     ax2.scatter(x, y)
-
+    
     # Four polar axes
     plt.subplots(2, 2, subplot_kw=dict(polar=True))
     """
@@ -273,6 +312,17 @@
 
 
 def _remove_labels_from_axis(axis):
+    """
+
+    Parameters
+    ----------
+    axis :
+        
+
+    Returns
+    -------
+
+    """
     for t in axis.get_majorticklabels():
         t.set_visible(False)
 
@@ -289,6 +339,29 @@
 
 
 def _handle_shared_axes(axarr, nplots, naxes, nrows, ncols, sharex, sharey):
+    """
+
+    Parameters
+    ----------
+    axarr :
+        
+    nplots :
+        
+    naxes :
+        
+    nrows :
+        
+    ncols :
+        
+    sharex :
+        
+    sharey :
+        
+
+    Returns
+    -------
+
+    """
     if nplots > 1:
         if compat._mpl_ge_3_2_0():
             row_num = lambda x: x.get_subplotspec().rowspan.start
@@ -335,6 +408,17 @@
 
 
 def _flatten(axes):
+    """
+
+    Parameters
+    ----------
+    axes :
+        
+
+    Returns
+    -------
+
+    """
     if not is_list_like(axes):
         return np.array([axes])
     elif isinstance(axes, (np.ndarray, ABCIndexClass)):
@@ -343,6 +427,25 @@
 
 
 def _set_ticks_props(axes, xlabelsize=None, xrot=None, ylabelsize=None, yrot=None):
+    """
+
+    Parameters
+    ----------
+    axes :
+        
+    xlabelsize :
+         (Default value = None)
+    xrot :
+         (Default value = None)
+    ylabelsize :
+         (Default value = None)
+    yrot :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     import matplotlib.pyplot as plt
 
     for ax in _flatten(axes):
@@ -358,6 +461,17 @@
 
 
 def _get_all_lines(ax):
+    """
+
+    Parameters
+    ----------
+    ax :
+        
+
+    Returns
+    -------
+
+    """
     lines = ax.get_lines()
 
     if hasattr(ax, "right_ax"):
@@ -370,6 +484,17 @@
 
 
 def _get_xlim(lines):
+    """
+
+    Parameters
+    ----------
+    lines :
+        
+
+    Returns
+    -------
+
+    """
     left, right = np.inf, -np.inf
     for l in lines:
         x = l.get_xdata(orig=False)
