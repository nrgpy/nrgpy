# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tornado/curl_httpclient.py
+++ b/..//venv/lib/python3.8/site-packages/tornado/curl_httpclient.py
@@ -46,9 +46,27 @@
 
 
 class CurlAsyncHTTPClient(AsyncHTTPClient):
+    """ """
     def initialize(  # type: ignore
         self, max_clients: int = 10, defaults: Optional[Dict[str, Any]] = None
     ) -> None:
+        """
+
+        Parameters
+        ----------
+        # type: ignoreself :
+            
+        max_clients: int :
+             (Default value = 10)
+        defaults: Optional[Dict[str :
+            
+        Any]] :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         super().initialize(defaults=defaults)
         # Typeshed is incomplete for CurlMulti, so just use Any for now.
         self._multi = pycurl.CurlMulti()  # type: Any
@@ -81,6 +99,7 @@
         self._multi.remove_handle(dummy_curl_handle)
 
     def close(self) -> None:
+        """ """
         self._force_timeout_callback.stop()
         if self._timeout is not None:
             self.io_loop.remove_timeout(self._timeout)
@@ -98,6 +117,21 @@
     def fetch_impl(
         self, request: HTTPRequest, callback: Callable[[HTTPResponse], None]
     ) -> None:
+        """
+
+        Parameters
+        ----------
+        request: HTTPRequest :
+            
+        callback: Callable[[HTTPResponse] :
+            
+        None] :
+            
+
+        Returns
+        -------
+
+        """
         self._requests.append((request, callback, self.io_loop.time()))
         self._process_queue()
         self._set_timeout(0)
@@ -105,6 +139,21 @@
     def _handle_socket(self, event: int, fd: int, multi: Any, data: bytes) -> None:
         """Called by libcurl when it wants to change the file descriptors
         it cares about.
+
+        Parameters
+        ----------
+        event: int :
+            
+        fd: int :
+            
+        multi: Any :
+            
+        data: bytes :
+            
+
+        Returns
+        -------
+
         """
         event_map = {
             pycurl.POLL_NONE: ioloop.IOLoop.NONE,
@@ -132,7 +181,17 @@
             self._fds[fd] = ioloop_event
 
     def _set_timeout(self, msecs: int) -> None:
-        """Called by libcurl to schedule a timeout."""
+        """Called by libcurl to schedule a timeout.
+
+        Parameters
+        ----------
+        msecs: int :
+            
+
+        Returns
+        -------
+
+        """
         if self._timeout is not None:
             self.io_loop.remove_timeout(self._timeout)
         self._timeout = self.io_loop.add_timeout(
@@ -142,6 +201,17 @@
     def _handle_events(self, fd: int, events: int) -> None:
         """Called by IOLoop when there is activity on one of our
         file descriptors.
+
+        Parameters
+        ----------
+        fd: int :
+            
+        events: int :
+            
+
+        Returns
+        -------
+
         """
         action = 0
         if events & ioloop.IOLoop.READ:
@@ -189,6 +259,13 @@
     def _handle_force_timeout(self) -> None:
         """Called by IOLoop periodically to ask libcurl to process any
         events it may have forgotten about.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         while True:
             try:
@@ -202,6 +279,13 @@
     def _finish_pending_requests(self) -> None:
         """Process any requests that were completed by the last
         call to multi.socket_action.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         while True:
             num_q, ok_list, err_list = self._multi.info_read()
@@ -214,6 +298,7 @@
         self._process_queue()
 
     def _process_queue(self) -> None:
+        """ """
         while True:
             started = 0
             while self._free_list and self._requests:
@@ -260,6 +345,21 @@
         curl_error: Optional[int] = None,
         curl_message: Optional[str] = None,
     ) -> None:
+        """
+
+        Parameters
+        ----------
+        curl: pycurl.Curl :
+            
+        curl_error: Optional[int] :
+             (Default value = None)
+        curl_message: Optional[str] :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         info = curl.info  # type: ignore
         curl.info = None  # type: ignore
         self._multi.remove_handle(curl)
@@ -309,9 +409,21 @@
             self.handle_callback_exception(info["callback"])
 
     def handle_callback_exception(self, callback: Any) -> None:
+        """
+
+        Parameters
+        ----------
+        callback: Any :
+            
+
+        Returns
+        -------
+
+        """
         app_log.error("Exception in callback %r", callback, exc_info=True)
 
     def _curl_create(self) -> pycurl.Curl:
+        """ """
         curl = pycurl.Curl()
         if curl_log.isEnabledFor(logging.DEBUG):
             curl.setopt(pycurl.VERBOSE, 1)
@@ -330,6 +442,23 @@
         buffer: BytesIO,
         headers: httputil.HTTPHeaders,
     ) -> None:
+        """
+
+        Parameters
+        ----------
+        curl: pycurl.Curl :
+            
+        request: HTTPRequest :
+            
+        buffer: BytesIO :
+            
+        headers: httputil.HTTPHeaders :
+            
+
+        Returns
+        -------
+
+        """
         curl.setopt(pycurl.URL, native_str(request.url))
 
         # libcurl's magic "Expect: 100-continue" behavior causes delays
@@ -364,6 +493,19 @@
         if request.streaming_callback:
 
             def write_function(b: Union[bytes, bytearray]) -> int:
+                """
+
+                Parameters
+                ----------
+                b: Union[bytes :
+                    
+                bytearray] :
+                    
+
+                Returns
+                -------
+
+                """
                 assert request.streaming_callback is not None
                 self.io_loop.add_callback(request.streaming_callback, b)
                 return len(b)
@@ -480,6 +622,17 @@
             request_buffer = BytesIO(utf8(request.body or ""))
 
             def ioctl(cmd: int) -> None:
+                """
+
+                Parameters
+                ----------
+                cmd: int :
+                    
+
+                Returns
+                -------
+
+                """
                 if cmd == curl.IOCMD_RESTARTREAD:  # type: ignore
                     request_buffer.seek(0)
 
@@ -542,6 +695,23 @@
         header_callback: Callable[[str], None],
         header_line_bytes: bytes,
     ) -> None:
+        """
+
+        Parameters
+        ----------
+        headers: httputil.HTTPHeaders :
+            
+        header_callback: Callable[[str] :
+            
+        None] :
+            
+        header_line_bytes: bytes :
+            
+
+        Returns
+        -------
+
+        """
         header_line = native_str(header_line_bytes.decode("latin1"))
         if header_callback is not None:
             self.io_loop.add_callback(header_callback, header_line)
@@ -560,6 +730,19 @@
         headers.parse_line(header_line)
 
     def _curl_debug(self, debug_type: int, debug_msg: str) -> None:
+        """
+
+        Parameters
+        ----------
+        debug_type: int :
+            
+        debug_msg: str :
+            
+
+        Returns
+        -------
+
+        """
         debug_types = ("I", "<", ">", "<", ">")
         if debug_type == 0:
             debug_msg = native_str(debug_msg)
@@ -573,6 +756,7 @@
 
 
 class CurlError(HTTPError):
+    """ """
     def __init__(self, errno: int, message: str) -> None:
         HTTPError.__init__(self, 599, message)
         self.errno = errno
