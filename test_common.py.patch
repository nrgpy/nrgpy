# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/test_common.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/test_common.py
@@ -18,7 +18,19 @@
 
 
 class TestCommon:
+    """ """
     def test_droplevel(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         # GH 21115
         if isinstance(index, MultiIndex):
             # Tested separately in test_multi.py
@@ -41,6 +53,17 @@
                 index.droplevel(level)
 
     def test_constructor_non_hashable_name(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         # GH 20527
 
         if isinstance(index, MultiIndex):
@@ -58,6 +81,17 @@
             index.set_names(names=renamed)
 
     def test_constructor_unwraps_index(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         if isinstance(index, pd.MultiIndex):
             raise pytest.skip("MultiIndex has no ._data")
         a = index
@@ -68,6 +102,19 @@
     # FutureWarning from non-tuple sequence of nd indexing
     @pytest.mark.filterwarnings("ignore::FutureWarning")
     def test_getitem_error(self, index, itm):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+        itm :
+            
+
+        Returns
+        -------
+
+        """
         with pytest.raises(IndexError):
             index[itm]
 
@@ -82,6 +129,23 @@
         ],
     )
     def test_corner_union(self, index, fname, sname, expected_name):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+        fname :
+            
+        sname :
+            
+        expected_name :
+            
+
+        Returns
+        -------
+
+        """
         # GH 9943 9862
         # Test unions with various name combinations
         # Do not test MultiIndex or repeats
@@ -118,6 +182,17 @@
         tm.assert_index_equal(union, expected)
 
     def test_to_flat_index(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         # 22866
         if isinstance(index, MultiIndex):
             pytest.skip("Separate expectation for MultiIndex")
@@ -126,6 +201,17 @@
         tm.assert_index_equal(result, index)
 
     def test_set_name_methods(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         new_name = "This is the new name for this index"
 
         # don't tests a MultiIndex here (as its tested separated)
@@ -155,6 +241,17 @@
         assert index.names == [name]
 
     def test_copy_and_deepcopy(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         from copy import copy, deepcopy
 
         if isinstance(index, MultiIndex):
@@ -169,6 +266,17 @@
         assert new_copy.name == "banana"
 
     def test_unique(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         # don't test a MultiIndex here (as its tested separated)
         # don't test a CategoricalIndex because categories change (GH 18291)
         if isinstance(index, (MultiIndex, CategoricalIndex)):
@@ -192,6 +300,17 @@
             index.unique(level="wrong")
 
     def test_get_unique_index(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         # MultiIndex tested separately
         if not len(index) or isinstance(index, MultiIndex):
             pytest.skip("Skip check for empty Index and MultiIndex")
@@ -239,6 +358,17 @@
                 tm.assert_index_equal(result, expected)
 
     def test_mutability(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         if not len(index):
             pytest.skip("Skip check for empty Index")
         msg = "Index does not support mutable operations"
@@ -246,9 +376,31 @@
             index[0] = index[0]
 
     def test_view(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         assert index.view().name == index.name
 
     def test_searchsorted_monotonic(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         # GH17271
         # not implemented for tuple searches in MultiIndex
         # or Intervals searches in IntervalIndex
@@ -293,12 +445,36 @@
                 index._searchsorted_monotonic(value, side="left")
 
     def test_pickle(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         original_name, index.name = index.name, "foo"
         unpickled = tm.round_trip_pickle(index)
         assert index.equals(unpickled)
         index.name = original_name
 
     def test_drop_duplicates(self, index, keep):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+        keep :
+            
+
+        Returns
+        -------
+
+        """
         if isinstance(index, MultiIndex):
             pytest.skip("MultiIndex is tested separately")
         if isinstance(index, RangeIndex):
@@ -333,6 +509,17 @@
         tm.assert_index_equal(idx.drop_duplicates(keep=keep), expected_dropped)
 
     def test_drop_duplicates_no_duplicates(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         if isinstance(index, MultiIndex):
             pytest.skip("MultiIndex is tested separately")
 
@@ -354,11 +541,33 @@
         assert result_dropped is not unique_idx
 
     def test_drop_duplicates_inplace(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         msg = r"drop_duplicates\(\) got an unexpected keyword argument"
         with pytest.raises(TypeError, match=msg):
             index.drop_duplicates(inplace=True)
 
     def test_has_duplicates(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         holder = type(index)
         if not len(index) or isinstance(index, (MultiIndex, RangeIndex)):
             # MultiIndex tested separately in:
@@ -376,6 +585,21 @@
     )
     @pytest.mark.parametrize("copy", [True, False])
     def test_astype_preserves_name(self, index, dtype, copy):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+        dtype :
+            
+        copy :
+            
+
+        Returns
+        -------
+
+        """
         # https://github.com/pandas-dev/pandas/issues/32013
         if isinstance(index, MultiIndex):
             index.names = ["idx" + str(i) for i in range(index.nlevels)]
