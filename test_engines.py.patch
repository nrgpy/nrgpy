# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/test_engines.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/test_engines.py
@@ -25,10 +25,22 @@
     ids=lambda x: x[0].__name__,
 )
 def numeric_indexing_engine_type_and_dtype(request):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     return request.param
 
 
 class TestDatetimeEngine:
+    """ """
     @pytest.mark.parametrize(
         "scalar",
         [
@@ -39,6 +51,17 @@
         ],
     )
     def test_not_contains_requires_timestamp(self, scalar):
+        """
+
+        Parameters
+        ----------
+        scalar :
+            
+
+        Returns
+        -------
+
+        """
         dti1 = pd.date_range("2016-01-01", periods=3)
         dti2 = dti1.insert(1, pd.NaT)  # non-monotonic
         dti3 = dti1.insert(3, dti1[0])  # non-unique
@@ -55,6 +78,7 @@
 
 
 class TestTimedeltaEngine:
+    """ """
     @pytest.mark.parametrize(
         "scalar",
         [
@@ -65,6 +89,17 @@
         ],
     )
     def test_not_contains_requires_timestamp(self, scalar):
+        """
+
+        Parameters
+        ----------
+        scalar :
+            
+
+        Returns
+        -------
+
+        """
         tdi1 = pd.timedelta_range("42 days", freq="9h", periods=1234)
         tdi2 = tdi1.insert(1, pd.NaT)  # non-monotonic
         tdi3 = tdi1.insert(3, tdi1[0])  # non-unique
@@ -81,7 +116,19 @@
 
 
 class TestNumericEngine:
+    """ """
     def test_is_monotonic(self, numeric_indexing_engine_type_and_dtype):
+        """
+
+        Parameters
+        ----------
+        numeric_indexing_engine_type_and_dtype :
+            
+
+        Returns
+        -------
+
+        """
         engine_type, dtype = numeric_indexing_engine_type_and_dtype
         num = 1000
         arr = np.array([1] * num + [2] * num + [3] * num, dtype=dtype)
@@ -103,6 +150,17 @@
         assert engine.is_monotonic_decreasing is False
 
     def test_is_unique(self, numeric_indexing_engine_type_and_dtype):
+        """
+
+        Parameters
+        ----------
+        numeric_indexing_engine_type_and_dtype :
+            
+
+        Returns
+        -------
+
+        """
         engine_type, dtype = numeric_indexing_engine_type_and_dtype
 
         # unique
@@ -116,6 +174,17 @@
         assert engine.is_unique is False
 
     def test_get_loc(self, numeric_indexing_engine_type_and_dtype):
+        """
+
+        Parameters
+        ----------
+        numeric_indexing_engine_type_and_dtype :
+            
+
+        Returns
+        -------
+
+        """
         engine_type, dtype = numeric_indexing_engine_type_and_dtype
 
         # unique
@@ -137,6 +206,17 @@
         assert (result == expected).all()
 
     def test_get_backfill_indexer(self, numeric_indexing_engine_type_and_dtype):
+        """
+
+        Parameters
+        ----------
+        numeric_indexing_engine_type_and_dtype :
+            
+
+        Returns
+        -------
+
+        """
         engine_type, dtype = numeric_indexing_engine_type_and_dtype
 
         arr = np.array([1, 5, 10], dtype=dtype)
@@ -149,6 +229,17 @@
         tm.assert_numpy_array_equal(result, expected)
 
     def test_get_pad_indexer(self, numeric_indexing_engine_type_and_dtype):
+        """
+
+        Parameters
+        ----------
+        numeric_indexing_engine_type_and_dtype :
+            
+
+        Returns
+        -------
+
+        """
         engine_type, dtype = numeric_indexing_engine_type_and_dtype
 
         arr = np.array([1, 5, 10], dtype=dtype)
@@ -162,11 +253,13 @@
 
 
 class TestObjectEngine:
+    """ """
     engine_type = libindex.ObjectEngine
     dtype = np.object_
     values = list("abc")
 
     def test_is_monotonic(self):
+        """ """
 
         num = 1000
         arr = np.array(["a"] * num + ["a"] * num + ["c"] * num, dtype=self.dtype)
@@ -188,6 +281,7 @@
         assert engine.is_monotonic_decreasing is False
 
     def test_is_unique(self):
+        """ """
         # unique
         arr = np.array(self.values, dtype=self.dtype)
         engine = self.engine_type(lambda: arr, len(arr))
@@ -199,6 +293,7 @@
         assert engine.is_unique is False
 
     def test_get_loc(self):
+        """ """
         # unique
         arr = np.array(self.values, dtype=self.dtype)
         engine = self.engine_type(lambda: arr, len(arr))
@@ -218,6 +313,7 @@
         assert (result == expected).all()
 
     def test_get_backfill_indexer(self):
+        """ """
         arr = np.array(["a", "e", "j"], dtype=self.dtype)
         engine = self.engine_type(lambda: arr, len(arr))
 
@@ -228,6 +324,7 @@
         tm.assert_numpy_array_equal(result, expected)
 
     def test_get_pad_indexer(self):
+        """ """
         arr = np.array(["a", "e", "j"], dtype=self.dtype)
         engine = self.engine_type(lambda: arr, len(arr))
 
