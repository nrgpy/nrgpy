# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/terminal/ptutils.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/terminal/ptutils.py
@@ -24,16 +24,28 @@
 _completion_sentinel = object()
 
 def _elide_point(string:str, *, min_elide=30)->str:
-    """
-    If a string is long enough, and has at least 3 dots,
+    """If a string is long enough, and has at least 3 dots,
     replace the middle part with ellipses.
-
+    
     If a string naming a file is long enough, and has at least 3 slashes,
     replace the middle part with ellipses.
-
+    
     If three consecutive dots, or two consecutive dots are encountered these are
     replaced by the equivalents HORIZONTAL ELLIPSIS or TWO DOT LEADER unicode
     equivalents
+
+    Parameters
+    ----------
+    string:str :
+        
+    * :
+        
+    min_elide :
+         (Default value = 30)
+
+    Returns
+    -------
+
     """
     string = string.replace('...','\N{HORIZONTAL ELLIPSIS}')
     string = string.replace('..','\N{TWO DOT LEADER}')
@@ -54,8 +66,22 @@
     return string
 
 def _elide_typed(string:str, typed:str, *, min_elide:int=30)->str:
-    """
-    Elide the middle of a long string if the beginning has already been typed.
+    """Elide the middle of a long string if the beginning has already been typed.
+
+    Parameters
+    ----------
+    string:str :
+        
+    typed:str :
+        
+    * :
+        
+    min_elide:int :
+         (Default value = 30)
+
+    Returns
+    -------
+
     """
 
     if len(string) < min_elide:
@@ -68,6 +94,21 @@
     return string
 
 def _elide(string:str, typed:str, min_elide=30)->str:
+    """
+
+    Parameters
+    ----------
+    string:str :
+        
+    typed:str :
+        
+    min_elide :
+         (Default value = 30)
+
+    Returns
+    -------
+
+    """
     return _elide_typed(
         _elide_point(string, min_elide=min_elide),
         typed, min_elide=min_elide)
@@ -75,6 +116,21 @@
 
 
 def _adjust_completion_text_based_on_context(text, body, offset):
+    """
+
+    Parameters
+    ----------
+    text :
+        
+    body :
+        
+    offset :
+        
+
+    Returns
+    -------
+
+    """
     if text.endswith('=') and len(body) > offset and body[offset] == '=':
         return text[:-1]
     else:
@@ -91,12 +147,26 @@
 
     @property
     def ipy_completer(self):
+        """ """
         if self._ipy_completer:
             return self._ipy_completer
         else:
             return self.shell.Completer
 
     def get_completions(self, document, complete_event):
+        """
+
+        Parameters
+        ----------
+        document :
+            
+        complete_event :
+            
+
+        Returns
+        -------
+
+        """
         if not document.current_line.strip():
             return
         # Some bits of our completion system may print stuff (e.g. if a module
@@ -120,8 +190,22 @@
 
     @staticmethod
     def _get_completions(body, offset, cursor_position, ipyc):
-        """
-        Private equivalent of get_completions() use only for unit_testing.
+        """Private equivalent of get_completions() use only for unit_testing.
+
+        Parameters
+        ----------
+        body :
+            
+        offset :
+            
+        cursor_position :
+            
+        ipyc :
+            
+
+        Returns
+        -------
+
         """
         debug = getattr(ipyc, 'debug', False)
         completions = _deduplicate_completions(
@@ -160,9 +244,7 @@
                 yield Completion(adjusted_text, start_position=c.start - offset, display=_elide(display_text,  body[c.start:c.end]), display_meta=c.type)
 
 class IPythonPTLexer(Lexer):
-    """
-    Wrapper around PythonLexer and BashLexer.
-    """
+    """Wrapper around PythonLexer and BashLexer."""
     def __init__(self):
         l = pygments_lexers
         self.python_lexer = PygmentsLexer(l.Python3Lexer)
@@ -179,6 +261,17 @@
         }
 
     def lex_document(self, document):
+        """
+
+        Parameters
+        ----------
+        document :
+            
+
+        Returns
+        -------
+
+        """
         text = document.text.lstrip()
 
         lexer = self.python_lexer
