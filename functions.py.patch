# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jedi/inference/compiled/subprocess/functions.py
+++ b/..//venv/lib/python3.8/site-packages/jedi/inference/compiled/subprocess/functions.py
@@ -12,25 +12,85 @@
 
 
 def get_sys_path():
+    """ """
     return list(map(cast_path, sys.path))
 
 
 def load_module(inference_state, **kwargs):
+    """
+
+    Parameters
+    ----------
+    inference_state :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     return access.load_module(inference_state, **kwargs)
 
 
 def get_compiled_method_return(inference_state, id, attribute, *args, **kwargs):
+    """
+
+    Parameters
+    ----------
+    inference_state :
+        
+    id :
+        
+    attribute :
+        
+    *args :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     handle = inference_state.compiled_subprocess.get_access_handle(id)
     return getattr(handle.access, attribute)(*args, **kwargs)
 
 
 def create_simple_object(inference_state, obj):
+    """
+
+    Parameters
+    ----------
+    inference_state :
+        
+    obj :
+        
+
+    Returns
+    -------
+
+    """
     return access.create_access_path(inference_state, obj)
 
 
 def get_module_info(inference_state, sys_path=None, full_name=None, **kwargs):
-    """
-    Returns Tuple[Union[NamespaceInfo, FileIO, None], Optional[bool]]
+    """Returns Tuple[Union[NamespaceInfo, FileIO, None], Optional[bool]]
+
+    Parameters
+    ----------
+    inference_state :
+        
+    sys_path :
+         (Default value = None)
+    full_name :
+         (Default value = None)
+    **kwargs :
+        
+
+    Returns
+    -------
+
     """
     if sys_path is not None:
         sys.path, temp = sys_path, sys.path
@@ -44,19 +104,52 @@
 
 
 def get_builtin_module_names(inference_state):
+    """
+
+    Parameters
+    ----------
+    inference_state :
+        
+
+    Returns
+    -------
+
+    """
     return list(map(force_unicode, sys.builtin_module_names))
 
 
 def _test_raise_error(inference_state, exception_type):
     """
-    Raise an error to simulate certain problems for unit tests.
+
+    Parameters
+    ----------
+    inference_state :
+        
+    exception_type :
+        
+
+    Returns
+    -------
+
     """
     raise exception_type
 
 
 def _test_print(inference_state, stderr=None, stdout=None):
-    """
-    Force some prints in the subprocesses. This exists for unit tests.
+    """Force some prints in the subprocesses. This exists for unit tests.
+
+    Parameters
+    ----------
+    inference_state :
+        
+    stderr :
+         (Default value = None)
+    stdout :
+         (Default value = None)
+
+    Returns
+    -------
+
     """
     if stderr is not None:
         print(stderr, file=sys.stderr)
@@ -67,9 +160,17 @@
 
 
 def _get_init_path(directory_path):
-    """
-    The __init__ file can be searched in a directory. If found return it, else
+    """The __init__ file can be searched in a directory. If found return it, else
     None.
+
+    Parameters
+    ----------
+    directory_path :
+        
+
+    Returns
+    -------
+
     """
     for suffix in all_suffixes():
         path = os.path.join(directory_path, '__init__' + suffix)
@@ -79,14 +180,53 @@
 
 
 def safe_literal_eval(inference_state, value):
+    """
+
+    Parameters
+    ----------
+    inference_state :
+        
+    value :
+        
+
+    Returns
+    -------
+
+    """
     return parser_utils.safe_literal_eval(value)
 
 
 def iter_module_names(*args, **kwargs):
+    """
+
+    Parameters
+    ----------
+    *args :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     return list(_iter_module_names(*args, **kwargs))
 
 
 def _iter_module_names(inference_state, paths):
+    """
+
+    Parameters
+    ----------
+    inference_state :
+        
+    paths :
+        
+
+    Returns
+    -------
+
+    """
     # Python modules/packages
     for path in paths:
         try:
