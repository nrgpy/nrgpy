# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tornado/test/routing_test.py
+++ b/..//venv/lib/python3.8/site-packages/tornado/test/routing_test.py
@@ -32,12 +32,28 @@
 
 
 class BasicRouter(Router):
+    """ """
     def find_handler(self, request, **kwargs):
+        """
+
+        Parameters
+        ----------
+        request :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         class MessageDelegate(HTTPMessageDelegate):
+            """ """
             def __init__(self, connection):
                 self.connection = connection
 
             def finish(self):
+                """ """
                 self.connection.write_headers(
                     ResponseStartLine("HTTP/1.1", 200, "OK"),
                     HTTPHeaders({"Content-Length": "2"}),
@@ -49,10 +65,13 @@
 
 
 class BasicRouterTestCase(AsyncHTTPTestCase):
+    """ """
     def get_app(self):
+        """ """
         return BasicRouter()
 
     def test_basic_router(self):
+        """ """
         response = self.fetch("/any_request")
         self.assertEqual(response.body, b"OK")
 
@@ -61,7 +80,19 @@
 
 
 class GetResource(RequestHandler):
+    """ """
     def get(self, path):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
         if path not in resources:
             raise HTTPError(404)
 
@@ -69,24 +100,53 @@
 
 
 class PostResource(RequestHandler):
+    """ """
     def post(self, path):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
         resources[path] = self.request.body
 
 
 class HTTPMethodRouter(Router):
+    """ """
     def __init__(self, app):
         self.app = app
 
     def find_handler(self, request, **kwargs):
+        """
+
+        Parameters
+        ----------
+        request :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         handler = GetResource if request.method == "GET" else PostResource
         return self.app.get_handler_delegate(request, handler, path_args=[request.path])
 
 
 class HTTPMethodRouterTestCase(AsyncHTTPTestCase):
+    """ """
     def get_app(self):
+        """ """
         return HTTPMethodRouter(Application())
 
     def test_http_method_router(self):
+        """ """
         response = self.fetch("/post_resource", method="POST", body="data")
         self.assertEqual(response.code, 200)
 
@@ -99,8 +159,33 @@
 
 
 def _get_named_handler(handler_name):
+    """
+
+    Parameters
+    ----------
+    handler_name :
+        
+
+    Returns
+    -------
+
+    """
     class Handler(RequestHandler):
+        """ """
         def get(self, *args, **kwargs):
+            """
+
+            Parameters
+            ----------
+            *args :
+                
+            **kwargs :
+                
+
+            Returns
+            -------
+
+            """
             if self.application.settings.get("app_name") is not None:
                 self.write(self.application.settings["app_name"] + ": ")
 
@@ -114,29 +199,83 @@
 
 
 class CustomRouter(ReversibleRouter):
+    """ """
     def __init__(self):
         super().__init__()
         self.routes = {}  # type: typing.Dict[str, typing.Any]
 
     def add_routes(self, routes):
+        """
+
+        Parameters
+        ----------
+        routes :
+            
+
+        Returns
+        -------
+
+        """
         self.routes.update(routes)
 
     def find_handler(self, request, **kwargs):
+        """
+
+        Parameters
+        ----------
+        request :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         if request.path in self.routes:
             app, handler = self.routes[request.path]
             return app.get_handler_delegate(request, handler)
 
     def reverse_url(self, name, *args):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+        *args :
+            
+
+        Returns
+        -------
+
+        """
         handler_path = "/" + name
         return handler_path if handler_path in self.routes else None
 
 
 class CustomRouterTestCase(AsyncHTTPTestCase):
+    """ """
     def get_app(self):
+        """ """
         router = CustomRouter()
 
         class CustomApplication(Application):
+            """ """
             def reverse_url(self, name, *args):
+                """
+
+                Parameters
+                ----------
+                name :
+                    
+                *args :
+                    
+
+                Returns
+                -------
+
+                """
                 return router.reverse_url(name, *args)
 
         app1 = CustomApplication(app_name="app1")
@@ -153,6 +292,7 @@
         return router
 
     def test_custom_router(self):
+        """ """
         response = self.fetch("/first_handler")
         self.assertEqual(response.body, b"app1: first_handler: /first_handler")
         response = self.fetch("/second_handler")
@@ -162,12 +302,28 @@
 
 
 class ConnectionDelegate(HTTPServerConnectionDelegate):
+    """ """
     def start_request(self, server_conn, request_conn):
+        """
+
+        Parameters
+        ----------
+        server_conn :
+            
+        request_conn :
+            
+
+        Returns
+        -------
+
+        """
         class MessageDelegate(HTTPMessageDelegate):
+            """ """
             def __init__(self, connection):
                 self.connection = connection
 
             def finish(self):
+                """ """
                 response_body = b"OK"
                 self.connection.write_headers(
                     ResponseStartLine("HTTP/1.1", 200, "OK"),
@@ -180,10 +336,23 @@
 
 
 class RuleRouterTest(AsyncHTTPTestCase):
+    """ """
     def get_app(self):
+        """ """
         app = Application()
 
         def request_callable(request):
+            """
+
+            Parameters
+            ----------
+            request :
+                
+
+            Returns
+            -------
+
+            """
             request.connection.write_headers(
                 ResponseStartLine("HTTP/1.1", 200, "OK"),
                 HTTPHeaders({"Content-Length": "2"}),
@@ -220,6 +389,7 @@
         return app
 
     def test_rule_based_router(self):
+        """ """
         response = self.fetch("/first_handler")
         self.assertEqual(response.body, b"first_handler: /first_handler")
 
@@ -243,11 +413,27 @@
 
 
 class WSGIContainerTestCase(AsyncHTTPTestCase):
+    """ """
     def get_app(self):
+        """ """
         wsgi_app = WSGIContainer(self.wsgi_app)
 
         class Handler(RequestHandler):
+            """ """
             def get(self, *args, **kwargs):
+                """
+
+                Parameters
+                ----------
+                *args :
+                    
+                **kwargs :
+                    
+
+                Returns
+                -------
+
+                """
                 self.finish(self.reverse_url("tornado"))
 
         return RuleRouter(
@@ -261,10 +447,24 @@
         )
 
     def wsgi_app(self, environ, start_response):
+        """
+
+        Parameters
+        ----------
+        environ :
+            
+        start_response :
+            
+
+        Returns
+        -------
+
+        """
         start_response("200 OK", [])
         return [b"WSGI"]
 
     def test_wsgi_container(self):
+        """ """
         response = self.fetch("/tornado/test")
         self.assertEqual(response.body, b"/tornado/test")
 
@@ -272,5 +472,6 @@
         self.assertEqual(response.body, b"WSGI")
 
     def test_delegate_not_found(self):
+        """ """
         response = self.fetch("/404")
         self.assertEqual(response.code, 404)
