# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test_twodim_base.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test_twodim_base.py
@@ -19,13 +19,26 @@
 
 
 def get_mat(n):
+    """
+
+    Parameters
+    ----------
+    n :
+        
+
+    Returns
+    -------
+
+    """
     data = arange(n)
     data = add.outer(data, data)
     return data
 
 
 class TestEye:
+    """ """
     def test_basic(self):
+        """ """
         assert_equal(eye(4),
                      array([[1, 0, 0, 0],
                             [0, 1, 0, 0],
@@ -42,6 +55,7 @@
                      eye(3, dtype=bool))
 
     def test_diag(self):
+        """ """
         assert_equal(eye(4, k=1),
                      array([[0, 1, 0, 0],
                             [0, 0, 1, 0],
@@ -55,6 +69,7 @@
                             [0, 0, 1, 0]]))
 
     def test_2d(self):
+        """ """
         assert_equal(eye(4, 3),
                      array([[1, 0, 0],
                             [0, 1, 0],
@@ -67,6 +82,7 @@
                             [0, 0, 1, 0]]))
 
     def test_diag2d(self):
+        """ """
         assert_equal(eye(3, 4, k=2),
                      array([[0, 0, 1, 0],
                             [0, 0, 0, 1],
@@ -79,6 +95,7 @@
                             [0, 1, 0]]))
 
     def test_eye_bounds(self):
+        """ """
         assert_equal(eye(2, 2, 1), [[0, 1], [0, 0]])
         assert_equal(eye(2, 2, -1), [[0, 0], [1, 0]])
         assert_equal(eye(2, 2, 2), [[0, 0], [0, 0]])
@@ -90,13 +107,16 @@
         assert_equal(eye(3, 2, -3), [[0, 0], [0, 0], [0, 0]])
 
     def test_strings(self):
+        """ """
         assert_equal(eye(2, 2, dtype='S3'),
                      [[b'1', b''], [b'', b'1']])
 
     def test_bool(self):
+        """ """
         assert_equal(eye(2, 2, dtype=bool), [[True, False], [False, True]])
 
     def test_order(self):
+        """ """
         mat_c = eye(4, 3, k=-1)
         mat_f = eye(4, 3, k=-1, order='F')
         assert_equal(mat_c, mat_f)
@@ -107,7 +127,9 @@
 
 
 class TestDiag:
+    """ """
     def test_vector(self):
+        """ """
         vals = (100 * arange(5)).astype('l')
         b = zeros((5, 5))
         for k in range(5):
@@ -122,6 +144,17 @@
         assert_equal(diag(vals, k=-2), c)
 
     def test_matrix(self, vals=None):
+        """
+
+        Parameters
+        ----------
+        vals :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if vals is None:
             vals = (100 * get_mat(5) + 1).astype('l')
         b = zeros((5,))
@@ -137,10 +170,12 @@
         assert_equal(diag(vals, -2), b[:3])
 
     def test_fortran_order(self):
+        """ """
         vals = array((100 * get_mat(5) + 1), order='F', dtype='l')
         self.test_matrix(vals)
 
     def test_diag_bounds(self):
+        """ """
         A = [[1, 2], [3, 4], [5, 6]]
         assert_equal(diag(A, k=2), [])
         assert_equal(diag(A, k=1), [2])
@@ -150,11 +185,14 @@
         assert_equal(diag(A, k=-3), [])
 
     def test_failure(self):
+        """ """
         assert_raises(ValueError, diag, [[[1]]])
 
 
 class TestFliplr:
+    """ """
     def test_basic(self):
+        """ """
         assert_raises(ValueError, fliplr, ones(4))
         a = get_mat(4)
         b = a[:, ::-1]
@@ -167,7 +205,9 @@
 
 
 class TestFlipud:
+    """ """
     def test_basic(self):
+        """ """
         a = get_mat(4)
         b = a[::-1, :]
         assert_equal(flipud(a), b)
@@ -179,7 +219,9 @@
 
 
 class TestHistogram2d:
+    """ """
     def test_simple(self):
+        """ """
         x = array(
             [0.41702200, 0.72032449, 1.1437481e-4, 0.302332573, 0.146755891])
         y = array(
@@ -206,6 +248,7 @@
         assert_array_equal(yedges, np.linspace(0, 9, 11))
 
     def test_asym(self):
+        """ """
         x = array([1, 1, 2, 3, 4, 4, 4, 5])
         y = array([1, 3, 2, 0, 1, 2, 3, 4])
         H, xed, yed = histogram2d(
@@ -222,6 +265,7 @@
         assert_array_equal(yed, np.linspace(0, 5, 6))
 
     def test_density(self):
+        """ """
         x = array([1, 2, 3, 1, 2, 3, 1, 2, 3])
         y = array([1, 1, 1, 2, 2, 2, 3, 3, 3])
         H, xed, yed = histogram2d(
@@ -232,11 +276,13 @@
         assert_array_almost_equal(H, answer, 3)
 
     def test_all_outliers(self):
+        """ """
         r = np.random.rand(100) + 1. + 1e6  # histogramdd rounds by decimal=6
         H, xed, yed = histogram2d(r, r, (4, 5), range=([0, 1], [0, 1]))
         assert_array_equal(H, 0)
 
     def test_empty(self):
+        """ """
         a, edge1, edge2 = histogram2d([], [], bins=([0, 1], [0, 1]))
         assert_array_max_ulp(a, array([[0.]]))
 
@@ -244,6 +290,7 @@
         assert_array_max_ulp(a, np.zeros((4, 4)))
 
     def test_binparameter_combination(self):
+        """ """
         x = array(
             [0, 0.09207008, 0.64575234, 0.12875982, 0.47390599,
              0.59944483, 1])
@@ -276,7 +323,9 @@
 
     @requires_array_function
     def test_dispatch(self):
+        """ """
         class ShouldDispatch:
+            """ """
             def __array_function__(self, function, types, args, kwargs):
                 return types, args, kwargs
 
@@ -297,7 +346,9 @@
 
 
 class TestTri:
+    """ """
     def test_dtype(self):
+        """ """
         out = array([[1, 0, 0],
                      [1, 1, 0],
                      [1, 1, 1]])
@@ -306,6 +357,7 @@
 
 
 def test_tril_triu_ndim2():
+    """ """
     for dtype in np.typecodes['AllFloat'] + np.typecodes['AllInteger']:
         a = np.ones((2, 2), dtype=dtype)
         b = np.tril(a)
@@ -318,6 +370,7 @@
 
 
 def test_tril_triu_ndim3():
+    """ """
     for dtype in np.typecodes['AllFloat'] + np.typecodes['AllInteger']:
         a = np.array([
             [[1, 1], [1, 1]],
@@ -343,6 +396,7 @@
 
 
 def test_tril_triu_with_inf():
+    """ """
     # Issue 4859
     arr = np.array([[1, 1, np.inf],
                     [1, 1, 1],
@@ -356,6 +410,7 @@
 
 
 def test_tril_triu_dtype():
+    """ """
     # Issue 4916
     # tril and triu should return the same dtype as input
     for c in np.typecodes['All']:
@@ -378,6 +433,7 @@
 
 
 def test_mask_indices():
+    """ """
     # simple test without offset
     iu = mask_indices(3, np.triu)
     a = np.arange(9).reshape(3, 3)
@@ -388,6 +444,7 @@
 
 
 def test_tril_indices():
+    """ """
     # indices without and with offset
     il1 = tril_indices(4)
     il2 = tril_indices(4, k=2)
@@ -435,7 +492,9 @@
 
 
 class TestTriuIndices:
+    """ """
     def test_triu_indices(self):
+        """ """
         iu1 = triu_indices(4)
         iu2 = triu_indices(4, k=2)
         iu3 = triu_indices(4, m=5)
@@ -485,21 +544,27 @@
 
 
 class TestTrilIndicesFrom:
+    """ """
     def test_exceptions(self):
+        """ """
         assert_raises(ValueError, tril_indices_from, np.ones((2,)))
         assert_raises(ValueError, tril_indices_from, np.ones((2, 2, 2)))
         # assert_raises(ValueError, tril_indices_from, np.ones((2, 3)))
 
 
 class TestTriuIndicesFrom:
+    """ """
     def test_exceptions(self):
+        """ """
         assert_raises(ValueError, triu_indices_from, np.ones((2,)))
         assert_raises(ValueError, triu_indices_from, np.ones((2, 2, 2)))
         # assert_raises(ValueError, triu_indices_from, np.ones((2, 3)))
 
 
 class TestVander:
+    """ """
     def test_basic(self):
+        """ """
         c = np.array([0, 1, -2, 3])
         v = vander(c)
         powers = np.array([[0, 0, 0, 0, 1],
@@ -515,6 +580,7 @@
             assert_array_equal(v, powers[:, m-n:m])
 
     def test_dtypes(self):
+        """ """
         c = array([11, -12, 13], dtype=np.int8)
         v = vander(c)
         expected = np.array([[121, 11, 1],
