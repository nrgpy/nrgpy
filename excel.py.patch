# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/io/formats/excel.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/io/formats/excel.py
@@ -26,6 +26,7 @@
 
 
 class ExcelCell:
+    """ """
     __fields__ = ("row", "col", "val", "style", "mergestart", "mergeend")
     __slots__ = __fields__
 
@@ -41,21 +42,22 @@
 
 
 class CSSToExcelConverter:
-    """
-    A callable for converting CSS declarations to ExcelWriter styles
-
+    """A callable for converting CSS declarations to ExcelWriter styles
+    
     Supports parts of CSS 2.2, with minimal CSS 3.0 support (e.g. text-shadow),
     focusing on font styling, backgrounds, borders and alignment.
-
+    
     Operates by first computing CSS styles in a fairly generic
     way (see :meth:`compute_css`) then determining Excel style
     properties from CSS properties (see :meth:`build_xlstyle`).
 
     Parameters
     ----------
-    inherited : str, optional
-        CSS declarations understood to be the containing scope for the
-        CSS processed by :meth:`__call__`.
+
+    Returns
+    -------
+
+    
     """
 
     # NB: Most of the methods here could be classmethods, as only __init__
@@ -92,6 +94,19 @@
         return self.build_xlstyle(properties)
 
     def build_xlstyle(self, props: Dict[str, str]) -> Dict[str, Dict[str, str]]:
+        """
+
+        Parameters
+        ----------
+        props: Dict[str :
+            
+        str] :
+            
+
+        Returns
+        -------
+
+        """
         out = {
             "alignment": self.build_alignment(props),
             "border": self.build_border(props),
@@ -103,7 +118,19 @@
         # TODO: handle cell width and height: needs support in pandas.io.excel
 
         def remove_none(d: Dict[str, str]) -> None:
-            """Remove key where value is None, through nested dicts"""
+            """Remove key where value is None, through nested dicts
+
+            Parameters
+            ----------
+            d: Dict[str :
+                
+            str] :
+                
+
+            Returns
+            -------
+
+            """
             for k, v in list(d.items()):
                 if v is None:
                     del d[k]
@@ -126,6 +153,17 @@
     }
 
     def build_alignment(self, props) -> Dict[str, Optional[Union[bool, str]]]:
+        """
+
+        Parameters
+        ----------
+        props :
+            
+
+        Returns
+        -------
+
+        """
         # TODO: text-indent, padding-left -> alignment.indent
         return {
             "horizontal": props.get("text-align"),
@@ -138,6 +176,17 @@
         }
 
     def build_border(self, props: Dict) -> Dict[str, Dict[str, str]]:
+        """
+
+        Parameters
+        ----------
+        props: Dict :
+            
+
+        Returns
+        -------
+
+        """
         return {
             side: {
                 "style": self._border_style(
@@ -150,6 +199,19 @@
         }
 
     def _border_style(self, style: Optional[str], width):
+        """
+
+        Parameters
+        ----------
+        style: Optional[str] :
+            
+        width :
+            
+
+        Returns
+        -------
+
+        """
         # convert styles and widths to openxml, one of:
         #       'dashDot'
         #       'dashDotDot'
@@ -199,6 +261,19 @@
             return "mediumDashed"
 
     def build_fill(self, props: Dict[str, str]):
+        """
+
+        Parameters
+        ----------
+        props: Dict[str :
+            
+        str] :
+            
+
+        Returns
+        -------
+
+        """
         # TODO: perhaps allow for special properties
         #       -excel-pattern-bgcolor and -excel-pattern-type
         fill_color = props.get("background-color")
@@ -223,6 +298,17 @@
     ITALIC_MAP = {"normal": False, "italic": True, "oblique": True}
 
     def build_font(self, props) -> Dict[str, Optional[Union[bool, int, str]]]:
+        """
+
+        Parameters
+        ----------
+        props :
+            
+
+        Returns
+        -------
+
+        """
         size = props.get("font-size")
         if size is not None:
             assert size.endswith("pt")
@@ -319,6 +405,17 @@
     }
 
     def color_to_excel(self, val: Optional[str]):
+        """
+
+        Parameters
+        ----------
+        val: Optional[str] :
+            
+
+        Returns
+        -------
+
+        """
         if val is None:
             return None
         if val.startswith("#") and len(val) == 7:
@@ -331,41 +428,22 @@
             warnings.warn(f"Unhandled color format: {repr(val)}", CSSWarning)
 
     def build_number_format(self, props: Dict) -> Dict[str, Optional[str]]:
+        """
+
+        Parameters
+        ----------
+        props: Dict :
+            
+
+        Returns
+        -------
+
+        """
         return {"format_code": props.get("number-format")}
 
 
 class ExcelFormatter:
-    """
-    Class for formatting a DataFrame to a list of ExcelCells,
-
-    Parameters
-    ----------
-    df : DataFrame or Styler
-    na_rep: na representation
-    float_format : string, default None
-            Format string for floating point numbers
-    cols : sequence, optional
-        Columns to write
-    header : boolean or list of string, default True
-        Write out column names. If a list of string is given it is
-        assumed to be aliases for the column names
-    index : boolean, default True
-        output row names (index)
-    index_label : string or sequence, default None
-            Column label for index column(s) if desired. If None is given, and
-            `header` and `index` are True, then the index names are used. A
-            sequence should be given if the DataFrame uses MultiIndex.
-    merge_cells : boolean, default False
-            Format MultiIndex and Hierarchical Rows as merged cells.
-    inf_rep : string, default `'inf'`
-        representation for np.inf values (which aren't representable in Excel)
-        A `'-'` sign will be added in front of -inf.
-    style_converter : callable, optional
-        This translates Styler styles (CSS) into ExcelWriter styles.
-        Defaults to ``CSSToExcelConverter()``.
-        It should have signature css_declarations string -> excel style.
-        This is only called for body cells.
-    """
+    """Class for formatting a DataFrame to a list of ExcelCells,"""
 
     max_rows = 2 ** 20
     max_cols = 2 ** 14
@@ -416,6 +494,7 @@
 
     @property
     def header_style(self):
+        """ """
         return {
             "font": {"bold": True},
             "borders": {
@@ -428,6 +507,17 @@
         }
 
     def _format_value(self, val):
+        """
+
+        Parameters
+        ----------
+        val :
+            
+
+        Returns
+        -------
+
+        """
         if is_scalar(val) and missing.isna(val):
             val = self.na_rep
         elif is_float(val):
@@ -446,6 +536,7 @@
         return val
 
     def _format_header_mi(self):
+        """ """
         if self.columns.nlevels > 1:
             if not self.index:
                 raise NotImplementedError(
@@ -501,6 +592,7 @@
         self.rowcounter = lnum
 
     def _format_header_regular(self):
+        """ """
         has_aliases = isinstance(self.header, (tuple, list, np.ndarray, ABCIndex))
         if has_aliases or self.header:
             coloffset = 0
@@ -526,6 +618,7 @@
                 )
 
     def _format_header(self):
+        """ """
         if isinstance(self.columns, MultiIndex):
             gen = self._format_header_mi()
         else:
@@ -545,12 +638,14 @@
         return itertools.chain(gen, gen2)
 
     def _format_body(self):
+        """ """
         if isinstance(self.df.index, MultiIndex):
             return self._format_hierarchical_rows()
         else:
             return self._format_regular_rows()
 
     def _format_regular_rows(self):
+        """ """
         has_aliases = isinstance(self.header, (tuple, list, np.ndarray, ABCIndex))
         if has_aliases or self.header:
             self.rowcounter += 1
@@ -591,6 +686,7 @@
             yield cell
 
     def _format_hierarchical_rows(self):
+        """ """
         has_aliases = isinstance(self.header, (tuple, list, np.ndarray, ABCIndex))
         if has_aliases or self.header:
             self.rowcounter += 1
@@ -668,6 +764,17 @@
             yield cell
 
     def _generate_body(self, coloffset: int):
+        """
+
+        Parameters
+        ----------
+        coloffset: int :
+            
+
+        Returns
+        -------
+
+        """
         if self.styler is None:
             styles = None
         else:
@@ -685,6 +792,7 @@
                 yield ExcelCell(self.rowcounter + i, colidx + coloffset, val, xlstyle)
 
     def get_formatted_cells(self):
+        """ """
         for cell in itertools.chain(self._format_header(), self._format_body()):
             cell.val = self._format_value(cell.val)
             yield cell
@@ -698,8 +806,7 @@
         freeze_panes=None,
         engine=None,
     ):
-        """
-        writer : string or ExcelWriter object
+        """writer : string or ExcelWriter object
             File path or existing ExcelWriter
         sheet_name : string, default 'Sheet1'
             Name of sheet which will contain DataFrame
@@ -714,6 +821,25 @@
             write engine to use if writer is a path - you can also set this
             via the options ``io.excel.xlsx.writer``, ``io.excel.xls.writer``,
             and ``io.excel.xlsm.writer``.
+
+        Parameters
+        ----------
+        writer :
+            
+        sheet_name :
+             (Default value = "Sheet1")
+        startrow :
+             (Default value = 0)
+        startcol :
+             (Default value = 0)
+        freeze_panes :
+             (Default value = None)
+        engine :
+             (Default value = None)
+
+        Returns
+        -------
+
         """
         from pandas.io.excel import ExcelWriter
 
