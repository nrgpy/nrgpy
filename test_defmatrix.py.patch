# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/matrixlib/tests/test_defmatrix.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/matrixlib/tests/test_defmatrix.py
@@ -10,7 +10,9 @@
 from numpy.matrixlib import mat
 
 class TestCtor:
+    """ """
     def test_basic(self):
+        """ """
         A = np.array([[1, 2], [3, 4]])
         mA = matrix(A)
         assert_(np.all(mA.A == A))
@@ -33,10 +35,12 @@
         assert_(mvec.shape == (1, 5))
 
     def test_exceptions(self):
+        """ """
         # Check for ValueError when called with invalid string data.
         assert_raises(ValueError, matrix, "invalid")
 
     def test_bmat_nondefault_str(self):
+        """ """
         A = np.array([[1, 2], [3, 4]])
         B = np.array([[5, 6], [7, 8]])
         Aresult = np.array([[1, 2, 1, 2],
@@ -57,9 +61,17 @@
 
 
 class TestProperties:
+    """ """
     def test_sum(self):
         """Test whether matrix.sum(axis=1) preserves orientation.
         Fails in NumPy <= 0.9.6.2127.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         M = matrix([[1, 2, 0, 0],
                    [3, 4, 0, 0],
@@ -77,6 +89,7 @@
         assert_equal(sumall, np.sum(M))
 
     def test_prod(self):
+        """ """
         x = matrix([[1, 2, 3], [4, 5, 6]])
         assert_equal(x.prod(), 720)
         assert_equal(x.prod(0), matrix([[4, 10, 18]]))
@@ -90,6 +103,7 @@
         assert_(y.prod() == 0)
 
     def test_max(self):
+        """ """
         x = matrix([[1, 2, 3], [4, 5, 6]])
         assert_equal(x.max(), 6)
         assert_equal(x.max(0), matrix([[4, 5, 6]]))
@@ -100,6 +114,7 @@
         assert_equal(np.max(x, axis=1), matrix([[3], [6]]))
 
     def test_min(self):
+        """ """
         x = matrix([[1, 2, 3], [4, 5, 6]])
         assert_equal(x.min(), 1)
         assert_equal(x.min(0), matrix([[1, 2, 3]]))
@@ -110,18 +125,21 @@
         assert_equal(np.min(x, axis=1), matrix([[1], [4]]))
 
     def test_ptp(self):
+        """ """
         x = np.arange(4).reshape((2, 2))
         assert_(x.ptp() == 3)
         assert_(np.all(x.ptp(0) == np.array([2, 2])))
         assert_(np.all(x.ptp(1) == np.array([1, 1])))
 
     def test_var(self):
+        """ """
         x = np.arange(9).reshape((3, 3))
         mx = x.view(np.matrix)
         assert_equal(x.var(ddof=0), mx.var(ddof=0))
         assert_equal(x.var(ddof=1), mx.var(ddof=1))
 
     def test_basic(self):
+        """ """
         import numpy.linalg as linalg
 
         A = np.array([[1., 2.],
@@ -139,6 +157,7 @@
         assert_(np.all(np.array(np.transpose(B).conj() == mB.H)))
 
     def test_pinv(self):
+        """ """
         x = matrix(np.arange(6).reshape(2, 3))
         xpinv = matrix([[-0.77777778,  0.27777778],
                         [-0.11111111,  0.11111111],
@@ -146,6 +165,7 @@
         assert_almost_equal(x.I, xpinv)
 
     def test_comparisons(self):
+        """ """
         A = np.arange(100).reshape(10, 10)
         mA = matrix(A)
         mB = matrix(A) + 0.1
@@ -170,27 +190,33 @@
         assert_(np.all(abs(mB > 0)))
 
     def test_asmatrix(self):
+        """ """
         A = np.arange(100).reshape(10, 10)
         mA = asmatrix(A)
         A[0, 0] = -10
         assert_(A[0, 0] == mA[0, 0])
 
     def test_noaxis(self):
+        """ """
         A = matrix([[1, 0], [0, 1]])
         assert_(A.sum() == matrix(2))
         assert_(A.mean() == matrix(0.5))
 
     def test_repr(self):
+        """ """
         A = matrix([[1, 0], [0, 1]])
         assert_(repr(A) == "matrix([[1, 0],\n        [0, 1]])")
 
     def test_make_bool_matrix_from_str(self):
+        """ """
         A = matrix('True; True; False')
         B = matrix([[True], [True], [False]])
         assert_array_equal(A, B)
 
 class TestCasting:
+    """ """
     def test_basic(self):
+        """ """
         A = np.arange(100).reshape(10, 10)
         mA = matrix(A)
 
@@ -209,7 +235,9 @@
 
 
 class TestAlgebra:
+    """ """
     def test_basic(self):
+        """ """
         import numpy.linalg as linalg
 
         A = np.array([[1., 2.], [3., 4.]])
@@ -248,13 +276,14 @@
         assert_array_almost_equal(np.dot(mi, m), np.eye(2))
 
     def test_scalar_type_pow(self):
+        """ """
         m = matrix([[1, 2], [3, 4]])
         for scalar_t in [np.int8, np.uint8]:
             two = scalar_t(2)
             assert_array_almost_equal(m ** 2, m ** two)
 
     def test_notimplemented(self):
-        '''Check that 'not implemented' operations produce a failure.'''
+        """Check that 'not implemented' operations produce a failure."""
         A = matrix([[1., 2.],
                     [3., 4.]])
 
@@ -268,7 +297,9 @@
 
 
 class TestMatrixReturn:
+    """ """
     def test_instance_methods(self):
+        """ """
         a = matrix([1.0], dtype='f8')
         methodargs = {
             'astype': ('intc',),
@@ -310,7 +341,9 @@
 
 
 class TestIndexing:
+    """ """
     def test_basic(self):
+        """ """
         x = asmatrix(np.zeros((3, 2), float))
         y = np.zeros((3, 1), float)
         y[:, 0] = [0.8, 0.2, 0.3]
@@ -319,23 +352,28 @@
 
 
 class TestNewScalarIndexing:
+    """ """
     a = matrix([[1, 2], [3, 4]])
 
     def test_dimesions(self):
+        """ """
         a = self.a
         x = a[0]
         assert_equal(x.ndim, 2)
 
     def test_array_from_matrix_list(self):
+        """ """
         a = self.a
         x = np.array([a, a])
         assert_equal(x.shape, [2, 2, 2])
 
     def test_array_to_list(self):
+        """ """
         a = self.a
         assert_equal(a.tolist(), [[1, 2], [3, 4]])
 
     def test_fancy_indexing(self):
+        """ """
         a = self.a
         x = a[1, [0, 1, 0]]
         assert_(isinstance(x, matrix))
@@ -348,6 +386,7 @@
         assert_equal(x, matrix([[4,  3], [1,  2]]))
 
     def test_matrix_element(self):
+        """ """
         x = matrix([[1, 2, 3], [4, 5, 6]])
         assert_equal(x[0][0], matrix([[1, 2, 3]]))
         assert_equal(x[0][0].shape, (1, 3))
@@ -360,10 +399,12 @@
         assert_equal(x[:, 0].shape, x.shape)
 
     def test_scalar_indexing(self):
+        """ """
         x = asmatrix(np.zeros((3, 2), float))
         assert_equal(x[0, 0], x[0][0])
 
     def test_row_column_indexing(self):
+        """ """
         x = asmatrix(np.eye(2))
         assert_array_equal(x[0,:], [[1, 0]])
         assert_array_equal(x[1,:], [[0, 1]])
@@ -371,6 +412,7 @@
         assert_array_equal(x[:, 1], [[0], [1]])
 
     def test_boolean_indexing(self):
+        """ """
         A = np.arange(6)
         A.shape = (3, 2)
         x = asmatrix(A)
@@ -378,6 +420,7 @@
         assert_array_equal(x[np.array([True, False, False]),:], x[0,:])
 
     def test_list_indexing(self):
+        """ """
         A = np.arange(6)
         A.shape = (3, 2)
         x = asmatrix(A)
@@ -386,38 +429,47 @@
 
 
 class TestPower:
+    """ """
     def test_returntype(self):
+        """ """
         a = np.array([[0, 1], [0, 0]])
         assert_(type(matrix_power(a, 2)) is np.ndarray)
         a = mat(a)
         assert_(type(matrix_power(a, 2)) is matrix)
 
     def test_list(self):
+        """ """
         assert_array_equal(matrix_power([[0, 1], [0, 0]], 2), [[0, 0], [0, 0]])
 
 
 class TestShape:
+    """ """
 
     a = np.array([[1], [2]])
     m = matrix([[1], [2]])
 
     def test_shape(self):
+        """ """
         assert_equal(self.a.shape, (2, 1))
         assert_equal(self.m.shape, (2, 1))
 
     def test_numpy_ravel(self):
+        """ """
         assert_equal(np.ravel(self.a).shape, (2,))
         assert_equal(np.ravel(self.m).shape, (2,))
 
     def test_member_ravel(self):
+        """ """
         assert_equal(self.a.ravel().shape, (2,))
         assert_equal(self.m.ravel().shape, (1, 2))
 
     def test_member_flatten(self):
+        """ """
         assert_equal(self.a.flatten().shape, (2,))
         assert_equal(self.m.flatten().shape, (1, 2))
 
     def test_numpy_ravel_order(self):
+        """ """
         x = np.array([[1, 2, 3], [4, 5, 6]])
         assert_equal(np.ravel(x), [1, 2, 3, 4, 5, 6])
         assert_equal(np.ravel(x, order='F'), [1, 4, 2, 5, 3, 6])
@@ -430,6 +482,7 @@
         assert_equal(np.ravel(x.T, order='A'), [1, 2, 3, 4, 5, 6])
 
     def test_matrix_ravel_order(self):
+        """ """
         x = matrix([[1, 2, 3], [4, 5, 6]])
         assert_equal(x.ravel(), [[1, 2, 3, 4, 5, 6]])
         assert_equal(x.ravel(order='F'), [[1, 4, 2, 5, 3, 6]])
@@ -437,14 +490,17 @@
         assert_equal(x.T.ravel(order='A'), [[1, 2, 3, 4, 5, 6]])
 
     def test_array_memory_sharing(self):
+        """ """
         assert_(np.may_share_memory(self.a, self.a.ravel()))
         assert_(not np.may_share_memory(self.a, self.a.flatten()))
 
     def test_matrix_memory_sharing(self):
+        """ """
         assert_(np.may_share_memory(self.m, self.m.ravel()))
         assert_(not np.may_share_memory(self.m, self.m.flatten()))
 
     def test_expand_dims_matrix(self):
+        """ """
         # matrices are always 2d - so expand_dims only makes sense when the
         # type is changed away from matrix.
         a = np.arange(10).reshape((2, 5)).view(np.matrix)
