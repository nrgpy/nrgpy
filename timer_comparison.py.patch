# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/ma/timer_comparison.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/ma/timer_comparison.py
@@ -14,6 +14,7 @@
 
 
 class ModuleTester:
+    """ """
     def __init__(self, module):
         self.module = module
         self.allequal = module.allequal
@@ -50,8 +51,25 @@
 
     def assert_array_compare(self, comparison, x, y, err_msg='', header='',
                          fill_value=True):
-        """
-        Assert that a comparison of two masked arrays is satisfied elementwise.
+        """Assert that a comparison of two masked arrays is satisfied elementwise.
+
+        Parameters
+        ----------
+        comparison :
+            
+        x :
+            
+        y :
+            
+        err_msg :
+             (Default value = '')
+        header :
+             (Default value = '')
+        fill_value :
+             (Default value = True)
+
+        Returns
+        -------
 
         """
         xf = self.filled(x)
@@ -105,28 +123,33 @@
             raise ValueError(msg)
 
     def assert_array_equal(self, x, y, err_msg=''):
-        """
-        Checks the elementwise equality of two masked arrays.
+        """Checks the elementwise equality of two masked arrays.
+
+        Parameters
+        ----------
+        x :
+            
+        y :
+            
+        err_msg :
+             (Default value = '')
+
+        Returns
+        -------
 
         """
         self.assert_array_compare(self.equal, x, y, err_msg=err_msg,
                                   header='Arrays are not equal')
 
     def test_0(self):
-        """
-        Tests creation
-
-        """
+        """Tests creation"""
         x = np.array([1., 1., 1., -2., pi/2.0, 4., 5., -10., 10., 1., 2., 3.])
         m = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
         xm = self.masked_array(x, mask=m)
         xm[0]
 
     def test_1(self):
-        """
-        Tests creation
-
-        """
+        """Tests creation"""
         x = np.array([1., 1., 1., -2., pi/2.0, 4., 5., -10., 10., 1., 2., 3.])
         y = np.array([5., 0., 3., 2., -1., -4., 0., -10., 10., 1., 0., 3.])
         m1 = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
@@ -150,10 +173,7 @@
             assert(self.count(xm) == len(m1) - reduce(lambda x, y:x+y, m1))
 
     def test_2(self):
-        """
-        Tests conversions and indexing.
-
-        """
+        """Tests conversions and indexing."""
         x1 = np.array([1, 2, 4, 3])
         x2 = self.array(x1, mask=[1, 0, 0, 0])
         x3 = self.array(x1, mask=[0, 1, 0, 1])
@@ -192,10 +212,7 @@
         assert(m is not m3)
 
     def test_3(self):
-        """
-        Tests resize/repeat
-
-        """
+        """Tests resize/repeat"""
         x4 = self.arange(4)
         x4[2] = self.masked
         y4 = self.resize(x4, (8,))
@@ -211,10 +228,7 @@
         assert self.allequal(y5, y8)
 
     def test_4(self):
-        """
-        Test of take, transpose, inner, outer products.
-
-        """
+        """Test of take, transpose, inner, outer products."""
         x = self.arange(24)
         y = np.arange(24)
         x[5:6] = self.masked
@@ -234,10 +248,7 @@
         assert t[2] == 3
 
     def test_5(self):
-        """
-        Tests inplace w/ scalar
-
-        """
+        """Tests inplace w/ scalar"""
         x = self.arange(10)
         y = self.arange(10)
         xm = self.arange(10)
@@ -286,10 +297,7 @@
         assert self.allequal(x, y + 1.)
 
     def test_6(self):
-        """
-        Tests inplace w/ array
-
-        """
+        """Tests inplace w/ array"""
         x = self.arange(10, dtype=float_)
         y = self.arange(10)
         xm = self.arange(10, dtype=float_)
@@ -337,6 +345,7 @@
         xm /= a
 
     def test_7(self):
+        """ """
         "Tests ufunc"
         d = (self.array([1.0, 0, -1, pi/2]*2, mask=[0, 1]+[0]*6),
              self.array([1.0, 0, -1, pi/2]*2, mask=[1, 0]+[0]*6),)
@@ -371,6 +380,7 @@
             self.assert_array_equal(ur._mask, mr._mask)
 
     def test_99(self):
+        """ """
         # test average
         ott = self.array([0., 1., 2., 3.], mask=[1, 0, 0, 0])
         self.assert_array_equal(2.0, self.average(ott, axis=0))
@@ -416,6 +426,7 @@
         self.assert_array_equal(self.average(z, axis=0, weights=w2), [0., 1., 99., 99., 4.0, 10.0])
 
     def test_A(self):
+        """ """
         x = self.arange(24)
         x[5:6] = self.masked
         x = x.reshape(2, 3, 4)
