# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_getlimits.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_getlimits.py
@@ -10,37 +10,49 @@
 ##################################################
 
 class TestPythonFloat:
+    """ """
     def test_singleton(self):
+        """ """
         ftype = finfo(float)
         ftype2 = finfo(float)
         assert_equal(id(ftype), id(ftype2))
 
 class TestHalf:
+    """ """
     def test_singleton(self):
+        """ """
         ftype = finfo(half)
         ftype2 = finfo(half)
         assert_equal(id(ftype), id(ftype2))
 
 class TestSingle:
+    """ """
     def test_singleton(self):
+        """ """
         ftype = finfo(single)
         ftype2 = finfo(single)
         assert_equal(id(ftype), id(ftype2))
 
 class TestDouble:
+    """ """
     def test_singleton(self):
+        """ """
         ftype = finfo(double)
         ftype2 = finfo(double)
         assert_equal(id(ftype), id(ftype2))
 
 class TestLongdouble:
+    """ """
     def test_singleton(self):
+        """ """
         ftype = finfo(longdouble)
         ftype2 = finfo(longdouble)
         assert_equal(id(ftype), id(ftype2))
 
 class TestFinfo:
+    """ """
     def test_basic(self):
+        """ """
         dts = list(zip(['f2', 'f4', 'f8', 'c8', 'c16'],
                        [np.float16, np.float32, np.float64, np.complex64,
                         np.complex128]))
@@ -53,7 +65,9 @@
         assert_raises(ValueError, finfo, 'i4')
 
 class TestIinfo:
+    """ """
     def test_basic(self):
+        """ """
         dts = list(zip(['i1', 'i2', 'i4', 'i8',
                    'u1', 'u2', 'u4', 'u8'],
                   [np.int8, np.int16, np.int32, np.int64,
@@ -65,27 +79,45 @@
         assert_raises(ValueError, iinfo, 'f4')
 
     def test_unsigned_max(self):
+        """ """
         types = np.sctypes['uint']
         for T in types:
             assert_equal(iinfo(T).max, T(-1))
 
 class TestRepr:
+    """ """
     def test_iinfo_repr(self):
+        """ """
         expected = "iinfo(min=-32768, max=32767, dtype=int16)"
         assert_equal(repr(np.iinfo(np.int16)), expected)
 
     def test_finfo_repr(self):
+        """ """
         expected = "finfo(resolution=1e-06, min=-3.4028235e+38," + \
                    " max=3.4028235e+38, dtype=float32)"
         assert_equal(repr(np.finfo(np.float32)), expected)
 
 
 def test_instances():
+    """ """
     iinfo(10)
     finfo(3.0)
 
 
 def assert_ma_equal(discovered, ma_like):
+    """
+
+    Parameters
+    ----------
+    discovered :
+        
+    ma_like :
+        
+
+    Returns
+    -------
+
+    """
     # Check MachAr-like objects same as calculated MachAr instances
     for key, value in discovered.__dict__.items():
         assert_equal(value, getattr(ma_like, key))
@@ -95,6 +127,7 @@
 
 
 def test_known_types():
+    """ """
     # Test we are correctly compiling parameters for known types
     for ftype, ma_like in ((np.float16, _float_ma[16]),
                            (np.float32, _float_ma[32]),
@@ -113,6 +146,7 @@
 
 
 def test_plausible_finfo():
+    """ """
     # Assert that finfo returns reasonable results for all types
     for ftype in np.sctypes['float'] + np.sctypes['complex']:
         info = np.finfo(ftype)
