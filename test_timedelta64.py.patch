# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/arithmetic/test_timedelta64.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/arithmetic/test_timedelta64.py
@@ -27,8 +27,18 @@
 
 
 def assert_dtype(obj, expected_dtype):
-    """
-    Helper to check the dtype for a Series, Index, or single-column DataFrame.
+    """Helper to check the dtype for a Series, Index, or single-column DataFrame.
+
+    Parameters
+    ----------
+    obj :
+        
+    expected_dtype :
+        
+
+    Returns
+    -------
+
     """
     if isinstance(obj, DataFrame):
         dtype = obj.dtypes.iat[0]
@@ -43,11 +53,23 @@
 
 
 class TestTimedelta64ArrayLikeComparisons:
+    """ """
     # Comparison tests for timedelta64[ns] vectors fully parametrized over
     #  DataFrame/Series/TimedeltaIndex/TimedeltaArray.  Ideally all comparison
     #  tests will eventually end up here.
 
     def test_compare_timedelta64_zerodim(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#26689 should unbox when comparing with zerodim array
         box = box_with_array
         xbox = box_with_array if box_with_array is not pd.Index else np.ndarray
@@ -71,6 +93,19 @@
         [timedelta(days=1), Timedelta(days=1), Timedelta(days=1).to_timedelta64()],
     )
     def test_compare_timedeltalike_scalar(self, box_with_array, td_scalar):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        td_scalar :
+            
+
+        Returns
+        -------
+
+        """
         # regression test for GH#5963
         box = box_with_array
         xbox = box if box is not pd.Index else np.ndarray
@@ -83,6 +118,19 @@
 
     @pytest.mark.parametrize("invalid", [345600000000000, "a"])
     def test_td64_comparisons_invalid(self, box_with_array, invalid):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        invalid :
+            
+
+        Returns
+        -------
+
+        """
         # GH#13624 for str
         box = box_with_array
         rng = timedelta_range("1 days", periods=10)
@@ -106,6 +154,17 @@
         ],
     )
     def test_td64arr_cmp_arraylike_invalid(self, other):
+        """
+
+        Parameters
+        ----------
+        other :
+            
+
+        Returns
+        -------
+
+        """
         # We don't parametrize this over box_with_array because listlike
         #  other plays poorly with assert_invalid_comparison reversed checks
 
@@ -113,6 +172,7 @@
         assert_invalid_comparison(rng, other, tm.to_array)
 
     def test_td64arr_cmp_mixed_invalid(self):
+        """ """
         rng = timedelta_range("1 days", periods=5)._data
 
         other = np.array([0, 1, 2, rng[3], pd.Timestamp.now()])
@@ -135,10 +195,22 @@
 
 
 class TestTimedelta64ArrayComparisons:
+    """ """
     # TODO: All of these need to be parametrized over box
 
     @pytest.mark.parametrize("dtype", [None, object])
     def test_comp_nat(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         left = pd.TimedeltaIndex(
             [pd.Timedelta("1 days"), pd.NaT, pd.Timedelta("3 days")]
         )
@@ -169,6 +241,7 @@
         tm.assert_numpy_array_equal(pd.NaT > lhs, expected)
 
     def test_comparisons_nat(self):
+        """ """
         tdidx1 = pd.TimedeltaIndex(
             [
                 "1 day",
@@ -224,6 +297,7 @@
 
     # TODO: better name
     def test_comparisons_coverage(self):
+        """ """
         rng = timedelta_range("1 days", periods=10)
 
         result = rng < rng[3]
@@ -240,10 +314,12 @@
 
 
 class TestTimedelta64ArithmeticUnsorted:
+    """ """
     # Tests moved from type-specific test files but not
     #  yet sorted/parametrized/de-duplicated
 
     def test_ufunc_coercions(self):
+        """ """
         # normal ops are also tested in tseries/test_timedeltas.py
         idx = TimedeltaIndex(["2H", "4H", "6H", "8H", "10H"], freq="2H", name="x")
 
@@ -276,6 +352,7 @@
             assert result.freq is None
 
     def test_subtraction_ops(self):
+        """ """
         # with datetimes/timedelta and tdi/dti
         tdi = TimedeltaIndex(["1 days", pd.NaT, "2 days"], name="foo")
         dti = pd.date_range("20130101", periods=3, name="bar")
@@ -323,6 +400,7 @@
         tm.assert_index_equal(result, expected)
 
     def test_subtraction_ops_with_tz(self):
+        """ """
 
         # check that dt/dti subtraction ops with tz are validated
         dti = pd.date_range("20130101", periods=3)
@@ -335,6 +413,19 @@
         td = Timedelta("1 days")
 
         def _check(result, expected):
+            """
+
+            Parameters
+            ----------
+            result :
+                
+            expected :
+                
+
+            Returns
+            -------
+
+            """
             assert result == expected
             assert isinstance(result, Timedelta)
 
@@ -407,6 +498,7 @@
         tm.assert_index_equal(result, expected)
 
     def test_dti_tdi_numeric_ops(self):
+        """ """
         # These are normally union/diff set-like ops
         tdi = TimedeltaIndex(["1 days", pd.NaT, "2 days"], name="foo")
         dti = pd.date_range("20130101", periods=3, name="bar")
@@ -428,6 +520,7 @@
         tm.assert_index_equal(result, expected)
 
     def test_addition_ops(self):
+        """ """
         # with datetimes/timedelta and tdi/dti
         tdi = TimedeltaIndex(["1 days", pd.NaT, "2 days"], name="foo")
         dti = pd.date_range("20130101", periods=3, name="bar")
@@ -485,6 +578,17 @@
     # more targeted tests
     @pytest.mark.parametrize("freq", ["D", "B"])
     def test_timedelta(self, freq):
+        """
+
+        Parameters
+        ----------
+        freq :
+            
+
+        Returns
+        -------
+
+        """
         index = pd.date_range("1/1/2000", periods=50, freq=freq)
 
         shifted = index + timedelta(1)
@@ -523,6 +627,7 @@
         tm.assert_index_equal(result2, result3)
 
     def test_tda_add_sub_index(self):
+        """ """
         # Check that TimedeltaArray defers to Index on arithmetic ops
         tdi = TimedeltaIndex(["1 days", pd.NaT, "2 days"])
         tda = tdi.array
@@ -542,6 +647,19 @@
         tm.assert_index_equal(result, expected)
 
     def test_tda_add_dt64_object_array(self, box_with_array, tz_naive_fixture):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        tz_naive_fixture :
+            
+
+        Returns
+        -------
+
+        """
         # Result should be cast back to DatetimeArray
         box = box_with_array
 
@@ -563,6 +681,19 @@
     # Binary operations TimedeltaIndex and timedelta-like
 
     def test_tdi_iadd_timedeltalike(self, two_hours, box_with_array):
+        """
+
+        Parameters
+        ----------
+        two_hours :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # only test adding/sub offsets as + is now numeric
         rng = timedelta_range("1 days", "10 days")
         expected = timedelta_range("1 days 02:00:00", "10 days 02:00:00", freq="D")
@@ -578,6 +709,19 @@
             tm.assert_equal(orig_rng, expected)
 
     def test_tdi_isub_timedeltalike(self, two_hours, box_with_array):
+        """
+
+        Parameters
+        ----------
+        two_hours :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # only test adding/sub offsets as - is now numeric
         rng = timedelta_range("1 days", "10 days")
         expected = timedelta_range("0 days 22:00:00", "9 days 22:00:00")
@@ -595,6 +739,7 @@
     # -------------------------------------------------------------
 
     def test_tdi_ops_attributes(self):
+        """ """
         rng = timedelta_range("2 days", periods=5, freq="2D", name="x")
 
         result = rng + 1 * rng.freq
@@ -633,9 +778,11 @@
 
 
 class TestAddSubNaTMasking:
+    """ """
     # TODO: parametrize over boxes
 
     def test_tdi_add_timestamp_nat_masking(self):
+        """ """
         # GH#17991 checking for overflow-masking with NaT
         tdinat = pd.to_timedelta(["24658 days 11:15:00", "NaT"])
 
@@ -660,6 +807,7 @@
             assert res[1] is pd.NaT
 
     def test_tdi_add_overflow(self):
+        """ """
         # See GH#14068
         # preliminary test scalar analogue of vectorized tests below
         # TODO: Make raised error message more informative and test
@@ -701,11 +849,13 @@
 
 
 class TestTimedeltaArraylikeAddSubOps:
+    """ """
     # Tests for timedelta64[ns] __add__, __sub__, __radd__, __rsub__
 
     # TODO: moved from tests.indexes.timedeltas.test_arithmetic; needs
     #  parametrization+de-duplication
     def test_timedelta_ops_with_missing_values(self):
+        """ """
         # setup
         s1 = pd.to_timedelta(Series(["00:00:01"]))
         s2 = pd.to_timedelta(Series(["00:00:02"]))
@@ -812,6 +962,7 @@
     # TODO: moved from tests.series.test_operators, needs splitting, cleanup,
     # de-duplication, box-parametrization...
     def test_operators_timedelta64(self):
+        """ """
         # series ops
         v1 = pd.date_range("2012-1-1", periods=3, freq="D")
         v2 = pd.date_range("2012-1-2", periods=3, freq="D")
@@ -878,6 +1029,7 @@
         assert rs[2] == value
 
     def test_timedelta64_ops_nat(self):
+        """ """
         # GH 11349
         timedelta_series = Series([NaT, Timedelta("1s")])
         nat_series_dtype_timedelta = Series([NaT, NaT], dtype="timedelta64[ns]")
@@ -963,6 +1115,17 @@
     # Binary operations td64 arraylike and datetime-like
 
     def test_td64arr_sub_timestamp_raises(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         idx = TimedeltaIndex(["1 day", "2 day"])
         idx = tm.box_expected(idx, box_with_array)
 
@@ -975,6 +1138,19 @@
             idx - Timestamp("2011-01-01")
 
     def test_td64arr_add_timestamp(self, box_with_array, tz_naive_fixture):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        tz_naive_fixture :
+            
+
+        Returns
+        -------
+
+        """
         # GH#23215
 
         # TODO: parametrize over scalar datetime types?
@@ -1002,6 +1178,19 @@
         ],
     )
     def test_td64arr_add_sub_datetimelike_scalar(self, ts, box_with_array):
+        """
+
+        Parameters
+        ----------
+        ts :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#11925, GH#29558
         tdi = timedelta_range("1 day", periods=3)
         expected = pd.date_range("2012-01-02", periods=3)
@@ -1023,6 +1212,17 @@
             tdarr - ts
 
     def test_tdi_sub_dt64_array(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         dti = pd.date_range("2016-01-01", periods=3)
         tdi = dti - dti.shift(1)
         dtarr = dti.values
@@ -1040,6 +1240,17 @@
         tm.assert_equal(result, expected)
 
     def test_tdi_add_dt64_array(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         dti = pd.date_range("2016-01-01", periods=3)
         tdi = dti - dti.shift(1)
         dtarr = dti.values
@@ -1054,6 +1265,17 @@
         tm.assert_equal(result, expected)
 
     def test_td64arr_add_datetime64_nat(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#23215
         other = np.datetime64("NaT")
 
@@ -1072,6 +1294,21 @@
     @pytest.mark.parametrize("pi_freq", ["D", "W", "Q", "H"])
     @pytest.mark.parametrize("tdi_freq", [None, "H"])
     def test_td64arr_sub_periodlike(self, box_with_array, tdi_freq, pi_freq):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        tdi_freq :
+            
+        pi_freq :
+            
+
+        Returns
+        -------
+
+        """
         # GH#20049 subtracting PeriodIndex should raise TypeError
         tdi = TimedeltaIndex(["1 hours", "2 hours"], freq=tdi_freq)
         dti = Timestamp("2018-03-07 17:16:40") + tdi
@@ -1099,6 +1336,19 @@
         ],
     )
     def test_td64arr_addsub_numeric_scalar_invalid(self, box_with_array, other):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        other :
+            
+
+        Returns
+        -------
+
+        """
         # vector-like others are tested in test_td64arr_add_sub_numeric_arr_invalid
         tdser = pd.Series(["59 Days", "59 Days", "NaT"], dtype="m8[ns]")
         tdarr = tm.box_expected(tdser, box_with_array)
@@ -1118,6 +1368,21 @@
     def test_td64arr_addsub_numeric_arr_invalid(
         self, box_with_array, vec, any_real_dtype
     ):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        vec :
+            
+        any_real_dtype :
+            
+
+        Returns
+        -------
+
+        """
         tdser = pd.Series(["59 Days", "59 Days", "NaT"], dtype="m8[ns]")
         tdarr = tm.box_expected(tdser, box_with_array)
 
@@ -1125,6 +1390,19 @@
         assert_invalid_addsub_type(tdarr, vector)
 
     def test_td64arr_add_sub_int(self, box_with_array, one):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        one :
+            
+
+        Returns
+        -------
+
+        """
         # Variants of `one` for #19012, deprecated GH#22535
         rng = timedelta_range("1 days 09:00:00", freq="H", periods=10)
         tdarr = tm.box_expected(rng, box_with_array)
@@ -1139,6 +1417,17 @@
             tdarr -= one
 
     def test_td64arr_add_sub_integer_array(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#19959, deprecated GH#22535
         # GH#22696 for DataFrame case, check that we don't dispatch to numpy
         #  implementation, which treats int64 as m8[ns]
@@ -1151,6 +1440,17 @@
         assert_invalid_addsub_type(tdarr, other, msg)
 
     def test_td64arr_addsub_integer_array_no_freq(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#19959
         tdi = TimedeltaIndex(["1 Day", "NaT", "3 Hours"])
         tdarr = tm.box_expected(tdi, box_with_array)
@@ -1163,6 +1463,17 @@
     # Operations with timedelta-like others
 
     def test_td64arr_add_td64_array(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         box = box_with_array
         dti = pd.date_range("2016-01-01", periods=3)
         tdi = dti - dti.shift(1)
@@ -1178,6 +1489,17 @@
         tm.assert_equal(result, expected)
 
     def test_td64arr_sub_td64_array(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         box = box_with_array
         dti = pd.date_range("2016-01-01", periods=3)
         tdi = dti - dti.shift(1)
@@ -1193,6 +1515,19 @@
         tm.assert_equal(result, expected)
 
     def test_td64arr_add_sub_tdi(self, box_with_array, names):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        names :
+            
+
+        Returns
+        -------
+
+        """
         # GH#17250 make sure result dtype is correct
         # GH#19043 make sure names are propagated correctly
         box = box_with_array
@@ -1235,6 +1570,17 @@
         assert_dtype(result, "timedelta64[ns]")
 
     def test_td64arr_add_sub_td64_nat(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#23320 special handling for timedelta64("NaT")
         box = box_with_array
         tdi = pd.TimedeltaIndex([NaT, Timedelta("1s")])
@@ -1254,6 +1600,17 @@
         tm.assert_equal(result, expected)
 
     def test_td64arr_sub_NaT(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#18808
         box = box_with_array
         ser = Series([NaT, Timedelta("1s")])
@@ -1266,6 +1623,19 @@
         tm.assert_equal(res, expected)
 
     def test_td64arr_add_timedeltalike(self, two_hours, box_with_array):
+        """
+
+        Parameters
+        ----------
+        two_hours :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # only test adding/sub offsets as + is now numeric
         # GH#10699 for Tick cases
         box = box_with_array
@@ -1281,6 +1651,19 @@
         tm.assert_equal(result, expected)
 
     def test_td64arr_sub_timedeltalike(self, two_hours, box_with_array):
+        """
+
+        Parameters
+        ----------
+        two_hours :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # only test adding/sub offsets as - is now numeric
         # GH#10699 for Tick cases
         box = box_with_array
@@ -1300,6 +1683,19 @@
     # __add__/__sub__ with DateOffsets and arrays of DateOffsets
 
     def test_td64arr_add_offset_index(self, names, box_with_array):
+        """
+
+        Parameters
+        ----------
+        names :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#18849, GH#19744
         box = box_with_array
 
@@ -1330,6 +1726,17 @@
     # TODO: combine with test_td64arr_add_offset_index by parametrizing
     # over second box?
     def test_td64arr_add_offset_array(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#18849
         box = box_with_array
         tdi = TimedeltaIndex(["1 days 00:00:00", "3 days 04:00:00"])
@@ -1351,6 +1758,19 @@
         tm.assert_equal(res2, expected)
 
     def test_td64arr_sub_offset_index(self, names, box_with_array):
+        """
+
+        Parameters
+        ----------
+        names :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#18824, GH#19744
         box = box_with_array
         xbox = box if box is not tm.to_array else pd.Index
@@ -1377,6 +1797,17 @@
         tm.assert_equal(res, expected)
 
     def test_td64arr_sub_offset_array(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#18824
         tdi = TimedeltaIndex(["1 days 00:00:00", "3 days 04:00:00"])
         other = np.array([pd.offsets.Hour(n=1), pd.offsets.Minute(n=-2)])
@@ -1393,6 +1824,19 @@
         tm.assert_equal(res, expected)
 
     def test_td64arr_with_offset_series(self, names, box_with_array):
+        """
+
+        Parameters
+        ----------
+        names :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#18849
         box = box_with_array
         box2 = Series if box in [pd.Index, tm.to_array] else box
@@ -1430,6 +1874,19 @@
 
     @pytest.mark.parametrize("obox", [np.array, pd.Index, pd.Series])
     def test_td64arr_addsub_anchored_offset_arraylike(self, obox, box_with_array):
+        """
+
+        Parameters
+        ----------
+        obox :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#18824
         tdi = TimedeltaIndex(["1 days 00:00:00", "3 days 04:00:00"])
         tdi = tm.box_expected(tdi, box_with_array)
@@ -1456,6 +1913,17 @@
     # Unsorted
 
     def test_td64arr_add_sub_object_array(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         tdi = pd.timedelta_range("1 day", periods=3, freq="D")
         tdarr = tm.box_expected(tdi, box_with_array)
 
@@ -1488,6 +1956,7 @@
 
 
 class TestTimedeltaArraylikeMulDivOps:
+    """ """
     # Tests for timedelta64[ns]
     # __mul__, __rmul__, __div__, __rdiv__, __floordiv__, __rfloordiv__
 
@@ -1496,6 +1965,17 @@
     # organized with scalar others first, then array-like
 
     def test_td64arr_mul_int(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         idx = TimedeltaIndex(np.arange(5, dtype="int64"))
         idx = tm.box_expected(idx, box_with_array)
 
@@ -1506,6 +1986,19 @@
         tm.assert_equal(result, idx)
 
     def test_td64arr_mul_tdlike_scalar_raises(self, two_hours, box_with_array):
+        """
+
+        Parameters
+        ----------
+        two_hours :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         rng = timedelta_range("1 days", "10 days", name="foo")
         rng = tm.box_expected(rng, box_with_array)
         msg = "argument must be an integer|cannot use operands with types dtype"
@@ -1513,6 +2006,17 @@
             rng * two_hours
 
     def test_tdi_mul_int_array_zerodim(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         rng5 = np.arange(5, dtype="int64")
         idx = TimedeltaIndex(rng5)
         expected = TimedeltaIndex(rng5 * 5)
@@ -1524,6 +2028,17 @@
         tm.assert_equal(result, expected)
 
     def test_tdi_mul_int_array(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         rng5 = np.arange(5, dtype="int64")
         idx = TimedeltaIndex(rng5)
         expected = TimedeltaIndex(rng5 ** 2)
@@ -1535,6 +2050,17 @@
         tm.assert_equal(result, expected)
 
     def test_tdi_mul_int_series(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         box = box_with_array
         xbox = pd.Series if box in [pd.Index, tm.to_array] else box
 
@@ -1548,6 +2074,17 @@
         tm.assert_equal(result, expected)
 
     def test_tdi_mul_float_series(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         box = box_with_array
         xbox = pd.Series if box in [pd.Index, tm.to_array] else box
 
@@ -1574,6 +2111,19 @@
         ids=lambda x: type(x).__name__,
     )
     def test_tdi_rmul_arraylike(self, other, box_with_array):
+        """
+
+        Parameters
+        ----------
+        other :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         box = box_with_array
         xbox = get_upcast_box(box, other)
 
@@ -1593,6 +2143,17 @@
     # __div__, __rdiv__
 
     def test_td64arr_div_nat_invalid(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # don't allow division by NaT (maybe could in the future)
         rng = timedelta_range("1 days", "10 days", name="foo")
         rng = tm.box_expected(rng, box_with_array)
@@ -1603,6 +2164,17 @@
             pd.NaT / rng
 
     def test_td64arr_div_td64nat(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#23829
         rng = timedelta_range("1 days", "10 days")
         rng = tm.box_expected(rng, box_with_array)
@@ -1619,6 +2191,17 @@
         tm.assert_equal(result, expected)
 
     def test_td64arr_div_int(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         idx = TimedeltaIndex(np.arange(5, dtype="int64"))
         idx = tm.box_expected(idx, box_with_array)
 
@@ -1630,6 +2213,19 @@
             1 / idx
 
     def test_td64arr_div_tdlike_scalar(self, two_hours, box_with_array):
+        """
+
+        Parameters
+        ----------
+        two_hours :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#20088, GH#22163 ensure DataFrame returns correct dtype
         rng = timedelta_range("1 days", "10 days", name="foo")
         expected = pd.Float64Index((np.arange(10) + 1) * 12, name="foo")
@@ -1647,6 +2243,21 @@
     @pytest.mark.parametrize("m", [1, 3, 10])
     @pytest.mark.parametrize("unit", ["D", "h", "m", "s", "ms", "us", "ns"])
     def test_td64arr_div_td64_scalar(self, m, unit, box_with_array):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+        unit :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         startdate = Series(pd.date_range("2013-01-01", "2013-01-03"))
         enddate = Series(pd.date_range("2013-03-01", "2013-03-03"))
 
@@ -1668,6 +2279,19 @@
         tm.assert_equal(result, expected)
 
     def test_td64arr_div_tdlike_scalar_with_nat(self, two_hours, box_with_array):
+        """
+
+        Parameters
+        ----------
+        two_hours :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         rng = TimedeltaIndex(["1 days", pd.NaT, "2 days"], name="foo")
         expected = pd.Float64Index([12, np.nan, 24], name="foo")
 
@@ -1682,6 +2306,17 @@
         tm.assert_equal(result, expected)
 
     def test_td64arr_div_td64_ndarray(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#22631
         rng = TimedeltaIndex(["1 days", pd.NaT, "2 days"])
         expected = pd.Float64Index([12, np.nan, 24])
@@ -1717,6 +2352,17 @@
         tm.assert_equal(result, expected)
 
     def test_tdarr_div_length_mismatch(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         rng = TimedeltaIndex(["1 days", pd.NaT, "2 days"])
         mismatched = [1, 2, 3, 4]
 
@@ -1734,6 +2380,19 @@
     # __floordiv__, __rfloordiv__
 
     def test_td64arr_floordiv_tdscalar(self, box_with_array, scalar_td):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        scalar_td :
+            
+
+        Returns
+        -------
+
+        """
         # GH#18831
         td1 = Series([timedelta(minutes=5, seconds=3)] * 3)
         td1.iloc[2] = np.nan
@@ -1747,6 +2406,19 @@
         tm.assert_equal(result, expected)
 
     def test_td64arr_rfloordiv_tdscalar(self, box_with_array, scalar_td):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        scalar_td :
+            
+
+        Returns
+        -------
+
+        """
         # GH#18831
         td1 = Series([timedelta(minutes=5, seconds=3)] * 3)
         td1.iloc[2] = np.nan
@@ -1760,6 +2432,19 @@
         tm.assert_equal(result, expected)
 
     def test_td64arr_rfloordiv_tdscalar_explicit(self, box_with_array, scalar_td):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        scalar_td :
+            
+
+        Returns
+        -------
+
+        """
         # GH#18831
         td1 = Series([timedelta(minutes=5, seconds=3)] * 3)
         td1.iloc[2] = np.nan
@@ -1775,6 +2460,17 @@
         tm.assert_equal(result, expected)
 
     def test_td64arr_floordiv_int(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         idx = TimedeltaIndex(np.arange(5, dtype="int64"))
         idx = tm.box_expected(idx, box_with_array)
         result = idx // 1
@@ -1785,6 +2481,19 @@
             1 // idx
 
     def test_td64arr_floordiv_tdlike_scalar(self, two_hours, box_with_array):
+        """
+
+        Parameters
+        ----------
+        two_hours :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         tdi = timedelta_range("1 days", "10 days", name="foo")
         expected = pd.Int64Index((np.arange(10) + 1) * 12, name="foo")
 
@@ -1805,6 +2514,19 @@
         ids=lambda x: type(x).__name__,
     )
     def test_td64arr_rfloordiv_tdlike_scalar(self, scalar_td, box_with_array):
+        """
+
+        Parameters
+        ----------
+        scalar_td :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#19125
         tdi = TimedeltaIndex(["00:05:03", "00:05:03", pd.NaT], freq=None)
         expected = pd.Index([2.0, 2.0, np.nan])
@@ -1827,6 +2549,19 @@
     #  reversed ops
 
     def test_td64arr_mod_tdscalar(self, box_with_array, three_days):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        three_days :
+            
+
+        Returns
+        -------
+
+        """
         tdi = timedelta_range("1 Day", "9 days")
         tdarr = tm.box_expected(tdi, box_with_array)
 
@@ -1844,6 +2579,17 @@
         tm.assert_equal(result[0], tdarr // three_days)
 
     def test_td64arr_mod_int(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         tdi = timedelta_range("1 ns", "10 ns", periods=10)
         tdarr = tm.box_expected(tdi, box_with_array)
 
@@ -1865,6 +2611,19 @@
         tm.assert_equal(result[0], tdarr // 2)
 
     def test_td64arr_rmod_tdscalar(self, box_with_array, three_days):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        three_days :
+            
+
+        Returns
+        -------
+
+        """
         tdi = timedelta_range("1 Day", "9 days")
         tdarr = tm.box_expected(tdi, box_with_array)
 
@@ -1886,6 +2645,19 @@
     # Operations with invalid others
 
     def test_td64arr_mul_tdscalar_invalid(self, box_with_array, scalar_td):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        scalar_td :
+            
+
+        Returns
+        -------
+
+        """
         td1 = Series([timedelta(minutes=5, seconds=3)] * 3)
         td1.iloc[2] = np.nan
 
@@ -1901,6 +2673,17 @@
             scalar_td * td1
 
     def test_td64arr_mul_too_short_raises(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         idx = TimedeltaIndex(np.arange(5, dtype="int64"))
         idx = tm.box_expected(idx, box_with_array)
         msg = (
@@ -1915,6 +2698,17 @@
             idx * np.array([1, 2])
 
     def test_td64arr_mul_td64arr_raises(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         idx = TimedeltaIndex(np.arange(5, dtype="int64"))
         idx = tm.box_expected(idx, box_with_array)
         msg = "cannot use operands with types dtype"
@@ -1925,6 +2719,19 @@
     # Operations with numeric others
 
     def test_td64arr_mul_numeric_scalar(self, box_with_array, one):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        one :
+            
+
+        Returns
+        -------
+
+        """
         # GH#4521
         # divide/multiply by integers
         tdser = pd.Series(["59 Days", "59 Days", "NaT"], dtype="m8[ns]")
@@ -1948,6 +2755,19 @@
 
     @pytest.mark.parametrize("two", [2, 2.0, np.array(2), np.array(2.0)])
     def test_td64arr_div_numeric_scalar(self, box_with_array, two):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        two :
+            
+
+        Returns
+        -------
+
+        """
         # GH#4521
         # divide/multiply by integers
         tdser = pd.Series(["59 Days", "59 Days", "NaT"], dtype="m8[ns]")
@@ -1968,6 +2788,21 @@
         ids=lambda x: type(x).__name__,
     )
     def test_td64arr_rmul_numeric_array(self, box_with_array, vector, any_real_dtype):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        vector :
+            
+        any_real_dtype :
+            
+
+        Returns
+        -------
+
+        """
         # GH#4521
         # divide/multiply by integers
         xbox = get_upcast_box(box_with_array, vector)
@@ -1992,6 +2827,21 @@
         ids=lambda x: type(x).__name__,
     )
     def test_td64arr_div_numeric_array(self, box_with_array, vector, any_real_dtype):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        vector :
+            
+        any_real_dtype :
+            
+
+        Returns
+        -------
+
+        """
         # GH#4521
         # divide/multiply by integers
         xbox = get_upcast_box(box_with_array, vector)
@@ -2032,6 +2882,21 @@
             vector.astype(object) / tdser
 
     def test_td64arr_mul_int_series(self, box_with_array, names, request):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        names :
+            
+        request :
+            
+
+        Returns
+        -------
+
+        """
         # GH#19042 test for correct name attachment
         box = box_with_array
         if box_with_array is pd.DataFrame and names[2] is None:
@@ -2068,6 +2933,19 @@
 
     # TODO: Should we be parametrizing over types for `ser` too?
     def test_float_series_rdiv_td64arr(self, box_with_array, names):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        names :
+            
+
+        Returns
+        -------
+
+        """
         # GH#19042 test for correct name attachment
         # TODO: the direct operation TimedeltaIndex / Series still
         # needs to be fixed.
@@ -2100,11 +2978,25 @@
 
 
 class TestTimedelta64ArrayLikeArithmetic:
+    """ """
     # Arithmetic tests for timedelta64[ns] vectors fully parametrized over
     #  DataFrame/Series/TimedeltaIndex/TimedeltaArray.  Ideally all arithmetic
     #  tests will eventually end up here.
 
     def test_td64arr_pow_invalid(self, scalar_td, box_with_array):
+        """
+
+        Parameters
+        ----------
+        scalar_td :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         td1 = Series([timedelta(minutes=5, seconds=3)] * 3)
         td1.iloc[2] = np.nan
 
@@ -2122,6 +3014,7 @@
 
 
 def test_add_timestamp_to_timedelta():
+    """ """
     # GH: 35897
     timestamp = pd.Timestamp.now()
     result = timestamp + pd.timedelta_range("0s", "1s", periods=31)
