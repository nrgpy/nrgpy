# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/computation/scope.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/computation/scope.py
@@ -20,7 +20,27 @@
 def ensure_scope(
     level: int, global_dict=None, local_dict=None, resolvers=(), target=None, **kwargs
 ) -> "Scope":
-    """Ensure that we are grabbing the correct scope."""
+    """Ensure that we are grabbing the correct scope.
+
+    Parameters
+    ----------
+    level: int :
+        
+    global_dict :
+         (Default value = None)
+    local_dict :
+         (Default value = None)
+    resolvers :
+         (Default value = ())
+    target :
+         (Default value = None)
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     return Scope(
         level + 1,
         global_dict=global_dict,
@@ -31,9 +51,17 @@
 
 
 def _replacer(x) -> str:
-    """
-    Replace a number with its hexadecimal representation. Used to tag
+    """Replace a number with its hexadecimal representation. Used to tag
     temporary variables with their calling scope's id.
+
+    Parameters
+    ----------
+    x :
+        
+
+    Returns
+    -------
+
     """
     # get the hex repr of the binary char and remove 0x and pad by pad_size
     # zeros
@@ -47,7 +75,19 @@
 
 
 def _raw_hex_id(obj) -> str:
-    """Return the padded hexadecimal id of ``obj``."""
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+
+    Returns
+    -------
+    type
+        
+
+    """
     # interpret as a pointer since that's what really what id returns
     packed = struct.pack("@P", id(obj))
     return "".join(_replacer(x) for x in packed)
@@ -66,8 +106,7 @@
 
 
 def _get_pretty_string(obj) -> str:
-    """
-    Return a prettier version of obj.
+    """Return a prettier version of obj.
 
     Parameters
     ----------
@@ -76,8 +115,8 @@
 
     Returns
     -------
-    str
-        Pretty print object repr
+
+    
     """
     sio = StringIO()
     pprint.pprint(obj, stream=sio)
@@ -85,17 +124,24 @@
 
 
 class Scope:
-    """
-    Object to hold scope, with a few bells to deal with some custom syntax
+    """Object to hold scope, with a few bells to deal with some custom syntax
     and contexts added by pandas.
 
     Parameters
     ----------
     level : int
+        
     global_dict : dict or None, optional, default None
+        
     local_dict : dict or Scope or None, optional, default None
+        
     resolvers : list-like or None, optional, default None
+        
     target : object
+        
+
+    Returns
+    -------
 
     Attributes
     ----------
@@ -149,21 +195,23 @@
 
     @property
     def has_resolvers(self) -> bool:
-        """
-        Return whether we have any extra scope.
-
+        """Return whether we have any extra scope.
+        
         For example, DataFrames pass Their columns as resolvers during calls to
         ``DataFrame.eval()`` and ``DataFrame.query()``.
 
-        Returns
-        -------
-        hr : bool
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        
         """
         return bool(len(self.resolvers))
 
     def resolve(self, key: str, is_local: bool):
-        """
-        Resolve a variable name in a possibly local context.
+        """Resolve a variable name in a possibly local context.
 
         Parameters
         ----------
@@ -172,11 +220,15 @@
         is_local : bool
             Flag indicating whether the variable is local or not (prefixed with
             the '@' symbol)
-
-        Returns
-        -------
-        value : object
-            The value of a particular variable
+        key: str :
+            
+        is_local: bool :
+            
+
+        Returns
+        -------
+
+        
         """
         try:
             # only look for locals in outer scope
@@ -204,17 +256,21 @@
                 raise UndefinedVariableError(key, is_local) from err
 
     def swapkey(self, old_key: str, new_key: str, new_value=None):
-        """
-        Replace a variable name, with a potentially new value.
-
-        Parameters
-        ----------
-        old_key : str
-            Current variable name to replace
-        new_key : str
-            New variable name to replace `old_key` with
-        new_value : object
-            Value to be replaced along with the possible renaming
+        """Replace a variable name, with a potentially new value.
+
+        Parameters
+        ----------
+        old_key: str :
+            
+        new_key: str :
+            
+        new_value :
+             (Default value = None)
+
+        Returns
+        -------
+
+        
         """
         if self.has_resolvers:
             maps = self.resolvers.maps + self.scope.maps
@@ -229,16 +285,19 @@
                 return
 
     def _get_vars(self, stack, scopes: List[str]):
-        """
-        Get specifically scoped variables from a list of stack frames.
-
-        Parameters
-        ----------
-        stack : list
-            A list of stack frames as returned by ``inspect.stack()``
-        scopes : sequence of strings
-            A sequence containing valid stack frame attribute names that
-            evaluate to a dictionary. For example, ('locals', 'globals')
+        """Get specifically scoped variables from a list of stack frames.
+
+        Parameters
+        ----------
+        stack :
+            
+        scopes: List[str] :
+            
+
+        Returns
+        -------
+
+        
         """
         variables = itertools.product(scopes, stack)
         for scope, (frame, _, _, _, _, _) in variables:
@@ -252,12 +311,17 @@
                 del frame
 
     def _update(self, level: int):
-        """
-        Update the current scope by going back `level` levels.
-
-        Parameters
-        ----------
-        level : int
+        """Update the current scope by going back `level` levels.
+
+        Parameters
+        ----------
+        level: int :
+            
+
+        Returns
+        -------
+
+        
         """
         sl = level + 1
 
@@ -272,8 +336,7 @@
             del stack[:], stack
 
     def add_tmp(self, value) -> str:
-        """
-        Add a temporary variable to the scope.
+        """Add a temporary variable to the scope.
 
         Parameters
         ----------
@@ -282,8 +345,8 @@
 
         Returns
         -------
-        str
-            The name of the temporary variable created.
+
+        
         """
         name = f"{type(value).__name__}_{self.ntemps}_{_raw_hex_id(self)}"
 
@@ -302,14 +365,16 @@
 
     @property
     def full_scope(self):
-        """
-        Return the full scope for use with passing to engines transparently
+        """Return the full scope for use with passing to engines transparently
         as a mapping.
 
-        Returns
-        -------
-        vars : DeepChainMap
-            All variables in this scope.
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        
         """
         maps = [self.temps] + self.resolvers.maps + self.scope.maps
         return DeepChainMap(*maps)
