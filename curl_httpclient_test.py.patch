# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tornado/test/curl_httpclient_test.py
+++ b/..//venv/lib/python3.8/site-packages/tornado/test/curl_httpclient_test.py
@@ -18,7 +18,9 @@
 
 @unittest.skipIf(pycurl is None, "pycurl module not present")
 class CurlHTTPClientCommonTestCase(httpclient_test.HTTPClientCommonTestCase):
+    """ """
     def get_http_client(self):
+        """ """
         client = CurlAsyncHTTPClient(defaults=dict(allow_ipv6=False))
         # make sure AsyncHTTPClient magic doesn't give us the wrong class
         self.assertTrue(isinstance(client, CurlAsyncHTTPClient))
@@ -26,11 +28,26 @@
 
 
 class DigestAuthHandler(RequestHandler):
+    """ """
     def initialize(self, username, password):
+        """
+
+        Parameters
+        ----------
+        username :
+            
+        password :
+            
+
+        Returns
+        -------
+
+        """
         self.username = username
         self.password = password
 
     def get(self):
+        """ """
         realm = "test"
         opaque = "asdf"
         # Real implementations would use a random nonce.
@@ -71,22 +88,29 @@
 
 
 class CustomReasonHandler(RequestHandler):
+    """ """
     def get(self):
+        """ """
         self.set_status(200, "Custom reason")
 
 
 class CustomFailReasonHandler(RequestHandler):
+    """ """
     def get(self):
+        """ """
         self.set_status(400, "Custom reason")
 
 
 @unittest.skipIf(pycurl is None, "pycurl module not present")
 class CurlHTTPClientTestCase(AsyncHTTPTestCase):
+    """ """
     def setUp(self):
+        """ """
         super().setUp()
         self.http_client = self.create_client()
 
     def get_app(self):
+        """ """
         return Application(
             [
                 ("/digest", DigestAuthHandler, {"username": "foo", "password": "bar"}),
@@ -101,25 +125,40 @@
         )
 
     def create_client(self, **kwargs):
+        """
+
+        Parameters
+        ----------
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         return CurlAsyncHTTPClient(
             force_instance=True, defaults=dict(allow_ipv6=False), **kwargs
         )
 
     def test_digest_auth(self):
+        """ """
         response = self.fetch(
             "/digest", auth_mode="digest", auth_username="foo", auth_password="bar"
         )
         self.assertEqual(response.body, b"ok")
 
     def test_custom_reason(self):
+        """ """
         response = self.fetch("/custom_reason")
         self.assertEqual(response.reason, "Custom reason")
 
     def test_fail_custom_reason(self):
+        """ """
         response = self.fetch("/custom_fail_reason")
         self.assertEqual(str(response.error), "HTTP 400: Custom reason")
 
     def test_digest_auth_non_ascii(self):
+        """ """
         response = self.fetch(
             "/digest_non_ascii",
             auth_mode="digest",
