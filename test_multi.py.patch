# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/reshape/merge/test_multi.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/reshape/merge/test_multi.py
@@ -36,6 +36,7 @@
 
 @pytest.fixture
 def left_multi():
+    """ """
     return DataFrame(
         dict(
             Origin=["A", "A", "B", "B", "C"],
@@ -50,6 +51,7 @@
 
 @pytest.fixture
 def right_multi():
+    """ """
     return DataFrame(
         dict(
             Origin=["A", "A", "B", "B", "C", "C", "E"],
@@ -64,16 +66,20 @@
 
 @pytest.fixture
 def on_cols_multi():
+    """ """
     return ["Origin", "Destination", "Period"]
 
 
 @pytest.fixture
 def idx_cols_multi():
+    """ """
     return ["Origin", "Destination", "Period", "TripPurp", "LinkType"]
 
 
 class TestMergeMulti:
+    """ """
     def setup_method(self):
+        """ """
         self.index = MultiIndex(
             levels=[["foo", "bar", "baz", "qux"], ["one", "two", "three"]],
             codes=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3], [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]],
@@ -104,6 +110,21 @@
         self.data = DataFrame({"key1": key1, "key2": key2, "data": data})
 
     def test_merge_on_multikey(self, left, right, join_type):
+        """
+
+        Parameters
+        ----------
+        left :
+            
+        right :
+            
+        join_type :
+            
+
+        Returns
+        -------
+
+        """
         on_cols = ["key1", "key2"]
         result = left.join(right, on=on_cols, how=join_type).reset_index(drop=True)
 
@@ -123,14 +144,55 @@
 
     @pytest.mark.parametrize("sort", [False, True])
     def test_left_join_multi_index(self, left, right, sort):
+        """
+
+        Parameters
+        ----------
+        left :
+            
+        right :
+            
+        sort :
+            
+
+        Returns
+        -------
+
+        """
         icols = ["1st", "2nd", "3rd"]
 
         def bind_cols(df):
+            """
+
+            Parameters
+            ----------
+            df :
+                
+
+            Returns
+            -------
+
+            """
             iord = lambda a: 0 if a != a else ord(a)
             f = lambda ts: ts.map(iord) - ord("a")
             return f(df["1st"]) + f(df["3rd"]) * 1e2 + df["2nd"].fillna(0) * 1e4
 
         def run_asserts(left, right, sort):
+            """
+
+            Parameters
+            ----------
+            left :
+                
+            right :
+                
+            sort :
+                
+
+            Returns
+            -------
+
+            """
             res = left.join(right, on=icols, how="left", sort=sort)
 
             assert len(left) < len(res) + 1
@@ -178,6 +240,21 @@
 
     @pytest.mark.parametrize("sort", [False, True])
     def test_merge_right_vs_left(self, left, right, sort):
+        """
+
+        Parameters
+        ----------
+        left :
+            
+        right :
+            
+        sort :
+            
+
+        Returns
+        -------
+
+        """
         # compare left vs right merge with multikey
         on_cols = ["key1", "key2"]
         merged_left_right = left.merge(
@@ -194,6 +271,7 @@
         tm.assert_frame_equal(merged_left_right, merge_right_left)
 
     def test_merge_multiple_cols_with_mixed_cols_index(self):
+        """ """
         # GH29522
         s = pd.Series(
             range(6),
@@ -215,6 +293,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_compress_group_combinations(self):
+        """ """
 
         # ~ 40000000 possible unique groups
         key1 = tm.rands_array(10, 10000)
@@ -231,6 +310,7 @@
         merge(df, df2, how="outer")
 
     def test_left_join_index_preserve_order(self):
+        """ """
 
         on_cols = ["k1", "k2"]
         left = DataFrame(
@@ -286,6 +366,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_left_join_index_multi_match_multiindex(self):
+        """ """
         left = DataFrame(
             [
                 ["X", "Y", "C", "a"],
@@ -355,6 +436,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_left_join_index_multi_match(self):
+        """ """
         left = DataFrame(
             [["c", 0], ["b", 1], ["a", 2], ["b", 3]],
             columns=["tag", "val"],
@@ -405,6 +487,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_left_merge_na_buglet(self):
+        """ """
         left = DataFrame(
             {
                 "id": list("abcde"),
@@ -429,6 +512,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_merge_na_keys(self):
+        """ """
         data = [
             [1950, "A", 1.5],
             [1950, "B", 1.5],
@@ -462,6 +546,17 @@
 
     @pytest.mark.parametrize("klass", [None, np.asarray, Series, Index])
     def test_merge_datetime_index(self, klass):
+        """
+
+        Parameters
+        ----------
+        klass :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-19038
         df = DataFrame(
             [1, 2, 3], ["2016-01-01", "2017-01-01", "2018-01-01"], columns=["a"]
@@ -485,6 +580,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_join_multi_levels(self):
+        """ """
 
         # GH 3662
         # merge multi-levels
@@ -594,6 +690,7 @@
             portfolio2.join(portfolio, how="inner")
 
     def test_join_multi_levels2(self):
+        """ """
 
         # some more advanced merges
         # GH6360
@@ -733,9 +830,29 @@
 
 
 class TestJoinMultiMulti:
+    """ """
     def test_join_multi_multi(
         self, left_multi, right_multi, join_type, on_cols_multi, idx_cols_multi
     ):
+        """
+
+        Parameters
+        ----------
+        left_multi :
+            
+        right_multi :
+            
+        join_type :
+            
+        on_cols_multi :
+            
+        idx_cols_multi :
+            
+
+        Returns
+        -------
+
+        """
         # Multi-index join tests
         expected = (
             pd.merge(
@@ -754,6 +871,25 @@
     def test_join_multi_empty_frames(
         self, left_multi, right_multi, join_type, on_cols_multi, idx_cols_multi
     ):
+        """
+
+        Parameters
+        ----------
+        left_multi :
+            
+        right_multi :
+            
+        join_type :
+            
+        on_cols_multi :
+            
+        idx_cols_multi :
+            
+
+        Returns
+        -------
+
+        """
 
         left_multi = left_multi.drop(columns=left_multi.columns)
         right_multi = right_multi.drop(columns=right_multi.columns)
@@ -774,6 +910,17 @@
 
     @pytest.mark.parametrize("box", [None, np.asarray, Series, Index])
     def test_merge_datetime_index(self, box):
+        """
+
+        Parameters
+        ----------
+        box :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-19038
         df = DataFrame(
             [1, 2, 3], ["2016-01-01", "2017-01-01", "2018-01-01"], columns=["a"]
@@ -797,6 +944,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_single_common_level(self):
+        """ """
         index_left = pd.MultiIndex.from_tuples(
             [("K0", "X0"), ("K0", "X1"), ("K1", "X2")], names=["key", "X"]
         )
@@ -822,6 +970,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_join_multi_wrong_order(self):
+        """ """
         # GH 25760
         # GH 28956
 
