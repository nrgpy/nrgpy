# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jedi/inference/dynamic_params.py
+++ b/..//venv/lib/python3.8/site-packages/jedi/inference/dynamic_params.py
@@ -3,6 +3,17 @@
 understand code like this::
 
     def foo(bar):
+        """
+
+        Parameters
+        ----------
+        bar :
+            
+
+        Returns
+        -------
+
+        """
         bar. # completion here
     foo(1)
 
@@ -35,7 +46,31 @@
 
 
 def _avoid_recursions(func):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
+    """
     def wrapper(function_value, param_index):
+        """
+
+        Parameters
+        ----------
+        function_value :
+            
+        param_index :
+            
+
+        Returns
+        -------
+
+        """
         inf = function_value.inference_state
         with recursion.execution_allowed(inf, function_value.tree_node) as allowed:
             # We need to catch recursions that may occur, because an
@@ -54,17 +89,27 @@
 @debug.increase_indent
 @_avoid_recursions
 def dynamic_param_lookup(function_value, param_index):
-    """
-    A dynamic search for param values. If you try to complete a type:
+    """A dynamic search for param values. If you try to complete a type:
+    
+    
+    It is not known what the type ``foo`` without analysing the whole code. You
+    have to look for all calls to ``func`` to find out what ``foo`` possibly
+    is.
+
+    Parameters
+    ----------
+    function_value :
+        
+    param_index :
+        
+
+    Returns
+    -------
 
     >>> def func(foo):
     ...     foo
     >>> func(1)
     >>> func("")
-
-    It is not known what the type ``foo`` without analysing the whole code. You
-    have to look for all calls to ``func`` to find out what ``foo`` possibly
-    is.
     """
     funcdef = function_value.tree_node
 
@@ -102,8 +147,20 @@
 @inference_state_method_cache(default=None)
 @to_list
 def _search_function_arguments(module_context, funcdef, string_name):
-    """
-    Returns a list of param names.
+    """Returns a list of param names.
+
+    Parameters
+    ----------
+    module_context :
+        
+    funcdef :
+        
+    string_name :
+        
+
+    Returns
+    -------
+
     """
     compare_node = funcdef
     if string_name == '__init__':
@@ -148,6 +205,17 @@
 
 
 def _get_lambda_name(node):
+    """
+
+    Parameters
+    ----------
+    node :
+        
+
+    Returns
+    -------
+
+    """
     stmt = node.parent
     if stmt.type == 'expr_stmt':
         first_operator = next(stmt.yield_operators(), None)
@@ -160,6 +228,19 @@
 
 
 def _get_potential_nodes(module_value, func_string_name):
+    """
+
+    Parameters
+    ----------
+    module_value :
+        
+    func_string_name :
+        
+
+    Returns
+    -------
+
+    """
     try:
         names = module_value.tree_node.get_used_names()[func_string_name]
     except KeyError:
@@ -173,9 +254,39 @@
 
 
 def _check_name_for_execution(inference_state, context, compare_node, name, trailer):
+    """
+
+    Parameters
+    ----------
+    inference_state :
+        
+    context :
+        
+    compare_node :
+        
+    name :
+        
+    trailer :
+        
+
+    Returns
+    -------
+
+    """
     from jedi.inference.value.function import BaseFunctionExecutionContext
 
     def create_args(value):
+        """
+
+        Parameters
+        ----------
+        value :
+            
+
+        Returns
+        -------
+
+        """
         arglist = trailer.children[1]
         if arglist == ')':
             arglist = None
