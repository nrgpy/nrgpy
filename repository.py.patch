# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/twine/repository.py
+++ b/..//venv/lib/python3.8/site-packages/twine/repository.py
@@ -41,16 +41,27 @@
 
 
 class ProgressBar(tqdm.tqdm):
+    """ """
     def update_to(self, n: int) -> None:
         """Update the bar in the way compatible with requests-toolbelt.
-
+        
         This is identical to tqdm.update, except ``n`` will be the current
         value - not the delta as tqdm expects.
+
+        Parameters
+        ----------
+        n: int :
+            
+
+        Returns
+        -------
+
         """
         self.update(n - self.n)  # will also do self.n = n
 
 
 class Repository:
+    """ """
     def __init__(
         self,
         repository_url: str,
@@ -77,6 +88,7 @@
 
     @staticmethod
     def _make_adapter_with_retries() -> adapters.HTTPAdapter:
+        """ """
         retry = urllib3.Retry(
             connect=5,
             total=10,
@@ -87,6 +99,7 @@
 
     @staticmethod
     def _make_user_agent_string() -> str:
+        """ """
         from twine import cli
 
         dependencies = cli.list_dependencies_and_versions()
@@ -100,10 +113,24 @@
         return cast(str, user_agent_string)
 
     def close(self) -> None:
+        """ """
         self.session.close()
 
     @staticmethod
     def _convert_data_to_list_of_tuples(data: Dict[str, Any]) -> List[Tuple[str, Any]]:
+        """
+
+        Parameters
+        ----------
+        data: Dict[str :
+            
+        Any] :
+            
+
+        Returns
+        -------
+
+        """
         data_to_send = []
         for key, value in data.items():
             if key in KEYWORDS_TO_NOT_FLATTEN or not isinstance(value, (list, tuple)):
@@ -114,14 +141,47 @@
         return data_to_send
 
     def set_certificate_authority(self, cacert: Optional[str]) -> None:
+        """
+
+        Parameters
+        ----------
+        cacert: Optional[str] :
+            
+
+        Returns
+        -------
+
+        """
         if cacert:
             self.session.verify = cacert
 
     def set_client_certificate(self, clientcert: Optional[str]) -> None:
+        """
+
+        Parameters
+        ----------
+        clientcert: Optional[str] :
+            
+
+        Returns
+        -------
+
+        """
         if clientcert:
             self.session.cert = clientcert
 
     def register(self, package: package_file.PackageFile) -> requests.Response:
+        """
+
+        Parameters
+        ----------
+        package: package_file.PackageFile :
+            
+
+        Returns
+        -------
+
+        """
         data = package.metadata_dictionary()
         data.update({":action": "submit", "protocol_version": "1"})
 
@@ -140,6 +200,17 @@
         return resp
 
     def _upload(self, package: package_file.PackageFile) -> requests.Response:
+        """
+
+        Parameters
+        ----------
+        package: package_file.PackageFile :
+            
+
+        Returns
+        -------
+
+        """
         data = package.metadata_dictionary()
         data.update(
             {
@@ -183,6 +254,19 @@
     def upload(
         self, package: package_file.PackageFile, max_redirects: int = 5
     ) -> requests.Response:
+        """
+
+        Parameters
+        ----------
+        package: package_file.PackageFile :
+            
+        max_redirects: int :
+             (Default value = 5)
+
+        Returns
+        -------
+
+        """
         number_of_redirects = 0
         while number_of_redirects < max_redirects:
             resp = self._upload(package)
@@ -209,6 +293,19 @@
     def package_is_uploaded(
         self, package: package_file.PackageFile, bypass_cache: bool = False
     ) -> bool:
+        """
+
+        Parameters
+        ----------
+        package: package_file.PackageFile :
+            
+        bypass_cache: bool :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         # NOTE(sigmavirus24): Not all indices are PyPI and pypi.io doesn't
         # have a similar interface for finding the package versions.
         if not self.url.startswith((LEGACY_PYPI, WAREHOUSE, OLD_WAREHOUSE)):
@@ -239,6 +336,17 @@
         return False
 
     def release_urls(self, packages: List[package_file.PackageFile]) -> Set[str]:
+        """
+
+        Parameters
+        ----------
+        packages: List[package_file.PackageFile] :
+            
+
+        Returns
+        -------
+
+        """
         if self.url.startswith(WAREHOUSE):
             url = WAREHOUSE_WEB
         elif self.url.startswith(TEST_WAREHOUSE):
@@ -252,6 +360,17 @@
         }
 
     def verify_package_integrity(self, package: package_file.PackageFile) -> None:
+        """
+
+        Parameters
+        ----------
+        package: package_file.PackageFile :
+            
+
+        Returns
+        -------
+
+        """
         # TODO(sigmavirus24): Add a way for users to download the package and
         # check it's hash against what it has locally.
         pass
