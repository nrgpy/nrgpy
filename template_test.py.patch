# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tornado/test/template_test.py
+++ b/..//venv/lib/python3.8/site-packages/tornado/test/template_test.py
@@ -10,23 +10,29 @@
 
 
 class TemplateTest(unittest.TestCase):
+    """ """
     def test_simple(self):
+        """ """
         template = Template("Hello {{ name }}!")
         self.assertEqual(template.generate(name="Ben"), b"Hello Ben!")
 
     def test_bytes(self):
+        """ """
         template = Template("Hello {{ name }}!")
         self.assertEqual(template.generate(name=utf8("Ben")), b"Hello Ben!")
 
     def test_expressions(self):
+        """ """
         template = Template("2 + 2 = {{ 2 + 2 }}")
         self.assertEqual(template.generate(), b"2 + 2 = 4")
 
     def test_comment(self):
+        """ """
         template = Template("Hello{# TODO i18n #} {{ name }}!")
         self.assertEqual(template.generate(name=utf8("Ben")), b"Hello Ben!")
 
     def test_include(self):
+        """ """
         loader = DictLoader(
             {
                 "index.html": '{% include "header.html" %}\nbody text',
@@ -38,6 +44,7 @@
         )
 
     def test_extends(self):
+        """ """
         loader = DictLoader(
             {
                 "base.html": """\
@@ -57,6 +64,7 @@
         )
 
     def test_relative_load(self):
+        """ """
         loader = DictLoader(
             {
                 "a/1.html": "{% include '2.html' %}",
@@ -67,6 +75,7 @@
         self.assertEqual(loader.load("a/1.html").generate(), b"ok")
 
     def test_escaping(self):
+        """ """
         self.assertRaises(ParseError, lambda: Template("{{"))
         self.assertRaises(ParseError, lambda: Template("{%"))
         self.assertEqual(Template("{{!").generate(), b"{{")
@@ -78,10 +87,12 @@
         )
 
     def test_unicode_template(self):
+        """ """
         template = Template(utf8(u"\u00e9"))
         self.assertEqual(template.generate(), utf8(u"\u00e9"))
 
     def test_unicode_literal_expression(self):
+        """ """
         # Unicode literals should be usable in templates.  Note that this
         # test simulates unicode characters appearing directly in the
         # template file (with utf8 encoding), i.e. \u escapes would not
@@ -90,42 +101,82 @@
         self.assertEqual(template.generate(), utf8(u"\u00e9"))
 
     def test_custom_namespace(self):
+        """ """
         loader = DictLoader(
             {"test.html": "{{ inc(5) }}"}, namespace={"inc": lambda x: x + 1}
         )
         self.assertEqual(loader.load("test.html").generate(), b"6")
 
     def test_apply(self):
+        """ """
         def upper(s):
+            """
+
+            Parameters
+            ----------
+            s :
+                
+
+            Returns
+            -------
+
+            """
             return s.upper()
 
         template = Template(utf8("{% apply upper %}foo{% end %}"))
         self.assertEqual(template.generate(upper=upper), b"FOO")
 
     def test_unicode_apply(self):
+        """ """
         def upper(s):
+            """
+
+            Parameters
+            ----------
+            s :
+                
+
+            Returns
+            -------
+
+            """
             return to_unicode(s).upper()
 
         template = Template(utf8(u"{% apply upper %}foo \u00e9{% end %}"))
         self.assertEqual(template.generate(upper=upper), utf8(u"FOO \u00c9"))
 
     def test_bytes_apply(self):
+        """ """
         def upper(s):
+            """
+
+            Parameters
+            ----------
+            s :
+                
+
+            Returns
+            -------
+
+            """
             return utf8(to_unicode(s).upper())
 
         template = Template(utf8(u"{% apply upper %}foo \u00e9{% end %}"))
         self.assertEqual(template.generate(upper=upper), utf8(u"FOO \u00c9"))
 
     def test_if(self):
+        """ """
         template = Template(utf8("{% if x > 4 %}yes{% else %}no{% end %}"))
         self.assertEqual(template.generate(x=5), b"yes")
         self.assertEqual(template.generate(x=3), b"no")
 
     def test_if_empty_body(self):
+        """ """
         template = Template(utf8("{% if True %}{% else %}{% end %}"))
         self.assertEqual(template.generate(), b"")
 
     def test_try(self):
+        """ """
         template = Template(
             utf8(
                 """{% try %}
@@ -140,10 +191,12 @@
         self.assertEqual(template.generate(x=0), b"\ntry-except\n-finally\n")
 
     def test_comment_directive(self):
+        """ """
         template = Template(utf8("{% comment blah blah %}foo"))
         self.assertEqual(template.generate(), b"foo")
 
     def test_break_continue(self):
+        """ """
         template = Template(
             utf8(
                 """\
@@ -164,6 +217,7 @@
         self.assertEqual(result, b"013456")
 
     def test_break_outside_loop(self):
+        """ """
         try:
             Template(utf8("{% break %}"))
             raise Exception("Did not get expected exception")
@@ -171,6 +225,7 @@
             pass
 
     def test_break_in_apply(self):
+        """ """
         # This test verifies current behavior, although of course it would
         # be nice if apply didn't cause seemingly unrelated breakage
         try:
@@ -183,6 +238,7 @@
 
     @unittest.skip("no testable future imports")
     def test_no_inherit_future(self):
+        """ """
         # TODO(bdarnell): make a test like this for one of the future
         # imports available in python 3. Unfortunately they're harder
         # to use in a template than division was.
@@ -194,12 +250,15 @@
         self.assertEqual(template.generate(), "0")
 
     def test_non_ascii_name(self):
+        """ """
         loader = DictLoader({u"t\u00e9st.html": "hello"})
         self.assertEqual(loader.load(u"t\u00e9st.html").generate(), b"hello")
 
 
 class StackTraceTest(unittest.TestCase):
+    """ """
     def test_error_line_number_expression(self):
+        """ """
         loader = DictLoader(
             {
                 "test.html": """one
@@ -215,6 +274,7 @@
             self.assertTrue("# test.html:2" in traceback.format_exc())
 
     def test_error_line_number_directive(self):
+        """ """
         loader = DictLoader(
             {
                 "test.html": """one
@@ -230,9 +290,23 @@
             self.assertTrue("# test.html:2" in traceback.format_exc())
 
     def test_error_line_number_module(self):
+        """ """
         loader = None  # type: typing.Optional[DictLoader]
 
         def load_generate(path, **kwargs):
+            """
+
+            Parameters
+            ----------
+            path :
+                
+            **kwargs :
+                
+
+            Returns
+            -------
+
+            """
             assert loader is not None
             return loader.load(path).generate(**kwargs)
 
@@ -249,6 +323,7 @@
             self.assertTrue("# sub.html:1" in exc_stack)
 
     def test_error_line_number_include(self):
+        """ """
         loader = DictLoader(
             {"base.html": "{% include 'sub.html' %}", "sub.html": "{{1/0}}"}
         )
@@ -259,6 +334,7 @@
             self.assertTrue("# sub.html:1 (via base.html:1)" in traceback.format_exc())
 
     def test_error_line_number_extends_base_error(self):
+        """ """
         loader = DictLoader(
             {"base.html": "{{1/0}}", "sub.html": "{% extends 'base.html' %}"}
         )
@@ -270,6 +346,7 @@
         self.assertTrue("# base.html:1" in exc_stack)
 
     def test_error_line_number_extends_sub_error(self):
+        """ """
         loader = DictLoader(
             {
                 "base.html": "{% block 'block' %}{% end %}",
@@ -288,6 +365,7 @@
             self.assertTrue("# sub.html:4 (via base.html:1)" in traceback.format_exc())
 
     def test_multi_includes(self):
+        """ """
         loader = DictLoader(
             {
                 "a.html": "{% include 'b.html' %}",
@@ -305,7 +383,9 @@
 
 
 class ParseErrorDetailTest(unittest.TestCase):
+    """ """
     def test_details(self):
+        """ """
         loader = DictLoader({"foo.html": "\n\n{{"})
         with self.assertRaises(ParseError) as cm:
             loader.load("foo.html")
@@ -314,13 +394,16 @@
         self.assertEqual(3, cm.exception.lineno)
 
     def test_custom_parse_error(self):
+        """ """
         # Make sure that ParseErrors remain compatible with their
         # pre-4.3 signature.
         self.assertEqual("asdf at None:0", str(ParseError("asdf")))
 
 
 class AutoEscapeTest(unittest.TestCase):
+    """ """
     def setUp(self):
+        """ """
         self.templates = {
             "escaped.html": "{% autoescape xhtml_escape %}{{ name }}",
             "unescaped.html": "{% autoescape None %}{{ name }}",
@@ -359,6 +442,7 @@
         }
 
     def test_default_off(self):
+        """ """
         loader = DictLoader(self.templates, autoescape=None)
         name = "Bobby <table>s"
         self.assertEqual(
@@ -379,6 +463,7 @@
         )
 
     def test_default_on(self):
+        """ """
         loader = DictLoader(self.templates, autoescape="xhtml_escape")
         name = "Bobby <table>s"
         self.assertEqual(
@@ -399,6 +484,7 @@
         )
 
     def test_unextended_block(self):
+        """ """
         loader = DictLoader(self.templates)
         name = "<script>"
         self.assertEqual(
@@ -410,9 +496,21 @@
         )
 
     def test_extended_block(self):
+        """ """
         loader = DictLoader(self.templates)
 
         def render(name):
+            """
+
+            Parameters
+            ----------
+            name :
+                
+
+            Returns
+            -------
+
+            """
             return loader.load(name).generate(name="<script>")
 
         self.assertEqual(render("escaped_extends_unescaped.html"), b"base: <script>")
@@ -428,9 +526,21 @@
         )
 
     def test_raw_expression(self):
+        """ """
         loader = DictLoader(self.templates)
 
         def render(name):
+            """
+
+            Parameters
+            ----------
+            name :
+                
+
+            Returns
+            -------
+
+            """
             return loader.load(name).generate(name='<>&"')
 
         self.assertEqual(
@@ -438,13 +548,38 @@
         )
 
     def test_custom_escape(self):
+        """ """
         loader = DictLoader({"foo.py": "{% autoescape py_escape %}s = {{ name }}\n"})
 
         def py_escape(s):
+            """
+
+            Parameters
+            ----------
+            s :
+                
+
+            Returns
+            -------
+
+            """
             self.assertEqual(type(s), bytes)
             return repr(native_str(s))
 
         def render(template, name):
+            """
+
+            Parameters
+            ----------
+            template :
+                
+            name :
+                
+
+            Returns
+            -------
+
+            """
             return loader.load(template).generate(py_escape=py_escape, name=name)
 
         self.assertEqual(render("foo.py", "<html>"), b"s = '<html>'\n")
@@ -454,6 +589,7 @@
         )
 
     def test_manual_minimize_whitespace(self):
+        """ """
         # Whitespace including newlines is allowed within template tags
         # and directives, and this is one way to avoid long lines while
         # keeping extra whitespace out of the rendered output.
@@ -472,6 +608,7 @@
         )
 
     def test_whitespace_by_filename(self):
+        """ """
         # Default whitespace handling depends on the template filename.
         loader = DictLoader(
             {
@@ -495,6 +632,7 @@
         self.assertEqual(loader.load("include.txt").generate(), b"\t\t\nasdf     ")
 
     def test_whitespace_by_loader(self):
+        """ """
         templates = {"foo.html": "\t\tfoo\n\n", "bar.txt": "\t\tbar\n\n"}
         loader = DictLoader(templates, whitespace="all")
         self.assertEqual(loader.load("foo.html").generate(), b"\t\tfoo\n\n")
@@ -509,6 +647,7 @@
         self.assertEqual(loader.load("bar.txt").generate(), b" bar ")
 
     def test_whitespace_directive(self):
+        """ """
         loader = DictLoader(
             {
                 "foo.html": """\
@@ -527,10 +666,13 @@
 
 
 class TemplateLoaderTest(unittest.TestCase):
+    """ """
     def setUp(self):
+        """ """
         self.loader = Loader(os.path.join(os.path.dirname(__file__), "templates"))
 
     def test_utf8_in_file(self):
+        """ """
         tmpl = self.loader.load("utf8.html")
         result = tmpl.generate()
         self.assertEqual(to_unicode(result).strip(), u"H\u00e9llo")
