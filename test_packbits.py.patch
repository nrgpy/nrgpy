# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test_packbits.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test_packbits.py
@@ -4,6 +4,7 @@
 from itertools import chain
 
 def test_packbits():
+    """ """
     # Copied from the docstring.
     a = [[[1, 0, 1], [0, 1, 0]],
          [[1, 1, 0], [0, 0, 1]]]
@@ -17,6 +18,7 @@
 
 
 def test_packbits_empty():
+    """ """
     shapes = [
         (0,), (10, 20, 0), (10, 0, 20), (0, 10, 20), (20, 0, 0), (0, 20, 0),
         (0, 0, 20), (0, 0, 0),
@@ -30,6 +32,7 @@
 
 
 def test_packbits_empty_with_axis():
+    """ """
     # Original shapes and lists of packed shapes for different axes.
     shapes = [
         ((0,), [(0,)]),
@@ -51,6 +54,17 @@
 
 @pytest.mark.parametrize('bitorder', ('little', 'big'))
 def test_packbits_large(bitorder):
+    """
+
+    Parameters
+    ----------
+    bitorder :
+        
+
+    Returns
+    -------
+
+    """
     # test data large enough for 16 byte vectorization
     a = np.array([1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0,
                   0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1,
@@ -212,6 +226,7 @@
 
 
 def test_packbits_very_large():
+    """ """
     # test some with a larger arrays gh-8637
     # code is covered earlier but larger array makes crash on bug more likely
     for s in range(950, 1050):
@@ -221,6 +236,7 @@
 
 
 def test_unpackbits():
+    """ """
     # Copied from the docstring.
     a = np.array([[2], [7], [23]], dtype=np.uint8)
     b = np.unpackbits(a, axis=1)
@@ -230,6 +246,7 @@
                                     [0, 0, 0, 1, 0, 1, 1, 1]]))
 
 def test_pack_unpack_order():
+    """ """
     a = np.array([[2], [7], [23]], dtype=np.uint8)
     b = np.unpackbits(a, axis=1)
     assert_equal(b.dtype, np.uint8)
@@ -245,6 +262,7 @@
 
 
 def test_unpackbits_empty():
+    """ """
     a = np.empty((0,), dtype=np.uint8)
     b = np.unpackbits(a)
     assert_equal(b.dtype, np.uint8)
@@ -252,6 +270,7 @@
 
 
 def test_unpackbits_empty_with_axis():
+    """ """
     # Lists of packed shapes for different axes and unpacked shapes.
     shapes = [
         ([(0,)], (0,)),
@@ -272,6 +291,7 @@
 
 
 def test_unpackbits_large():
+    """ """
     # test all possible numbers via comparison to already tested packbits
     d = np.arange(277, dtype=np.uint8)
     assert_array_equal(np.packbits(np.unpackbits(d)), d)
@@ -283,6 +303,7 @@
 
 
 class TestCount():
+    """ """
     x = np.array([
         [1, 0, 1, 0, 0, 1, 0],
         [0, 1, 1, 1, 0, 0, 0],
@@ -302,6 +323,19 @@
     @pytest.mark.parametrize('bitorder', ('little', 'big'))
     @pytest.mark.parametrize('count', chain(range(58), range(-1, -57, -1)))
     def test_roundtrip(self, bitorder, count):
+        """
+
+        Parameters
+        ----------
+        bitorder :
+            
+        count :
+            
+
+        Returns
+        -------
+
+        """
         if count < 0:
             # one extra zero of padding
             cutoff = count - 1
@@ -317,6 +351,17 @@
                     {}, {'count': None},
                     ])
     def test_count(self, kwargs):
+        """
+
+        Parameters
+        ----------
+        kwargs :
+            
+
+        Returns
+        -------
+
+        """
         packed = np.packbits(self.x)
         unpacked = np.unpackbits(packed, **kwargs)
         assert_equal(unpacked.dtype, np.uint8)
@@ -326,6 +371,19 @@
     # delta==-1 when count<0 because one extra zero of padding
     @pytest.mark.parametrize('count', chain(range(8), range(-1, -9, -1)))
     def test_roundtrip_axis(self, bitorder, count):
+        """
+
+        Parameters
+        ----------
+        bitorder :
+            
+        count :
+            
+
+        Returns
+        -------
+
+        """
         if count < 0:
             # one extra zero of padding
             cutoff = count - 1
@@ -351,6 +409,17 @@
                     {'bitorder': 'big', 'count': None},
                     ])
     def test_axis_count(self, kwargs):
+        """
+
+        Parameters
+        ----------
+        kwargs :
+            
+
+        Returns
+        -------
+
+        """
         packed0 = np.packbits(self.x, axis=0)
         unpacked0 = np.unpackbits(packed0, axis=0, **kwargs)
         assert_equal(unpacked0.dtype, np.uint8)
@@ -368,6 +437,7 @@
             assert_array_equal(unpacked1[:, ::-1], self.padded2[:self.x.shape[0], :-1])
 
     def test_bad_count(self):
+        """ """
         packed0 = np.packbits(self.x, axis=0)
         assert_raises(ValueError, np.unpackbits, packed0, axis=0, count=-9)
         packed1 = np.packbits(self.x, axis=1)
