# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tornado/test/gen_test.py
+++ b/..//venv/lib/python3.8/site-packages/tornado/test/gen_test.py
@@ -28,98 +28,164 @@
 
 
 class GenBasicTest(AsyncTestCase):
+    """ """
     @gen.coroutine
     def delay(self, iterations, arg):
-        """Returns arg after a number of IOLoop iterations."""
+        """Returns arg after a number of IOLoop iterations.
+
+        Parameters
+        ----------
+        iterations :
+            
+        arg :
+            
+
+        Returns
+        -------
+
+        """
         for i in range(iterations):
             yield gen.moment
         raise gen.Return(arg)
 
     @gen.coroutine
     def async_future(self, result):
+        """
+
+        Parameters
+        ----------
+        result :
+            
+
+        Returns
+        -------
+
+        """
         yield gen.moment
         return result
 
     @gen.coroutine
     def async_exception(self, e):
+        """
+
+        Parameters
+        ----------
+        e :
+            
+
+        Returns
+        -------
+
+        """
         yield gen.moment
         raise e
 
     @gen.coroutine
     def add_one_async(self, x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         yield gen.moment
         raise gen.Return(x + 1)
 
     def test_no_yield(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             pass
 
         self.io_loop.run_sync(f)
 
     def test_exception_phase1(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             1 / 0
 
         self.assertRaises(ZeroDivisionError, self.io_loop.run_sync, f)
 
     def test_exception_phase2(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             yield gen.moment
             1 / 0
 
         self.assertRaises(ZeroDivisionError, self.io_loop.run_sync, f)
 
     def test_bogus_yield(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             yield 42
 
         self.assertRaises(gen.BadYieldError, self.io_loop.run_sync, f)
 
     def test_bogus_yield_tuple(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             yield (1, 2)
 
         self.assertRaises(gen.BadYieldError, self.io_loop.run_sync, f)
 
     def test_reuse(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             yield gen.moment
 
         self.io_loop.run_sync(f)
         self.io_loop.run_sync(f)
 
     def test_none(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             yield None
 
         self.io_loop.run_sync(f)
 
     def test_multi(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             results = yield [self.add_one_async(1), self.add_one_async(2)]
             self.assertEqual(results, [2, 3])
 
         self.io_loop.run_sync(f)
 
     def test_multi_dict(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             results = yield dict(foo=self.add_one_async(1), bar=self.add_one_async(2))
             self.assertEqual(results, dict(foo=2, bar=3))
 
         self.io_loop.run_sync(f)
 
     def test_multi_delayed(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             # callbacks run at different times
             responses = yield gen.multi_future(
                 [self.delay(3, "v1"), self.delay(1, "v2")]
@@ -129,8 +195,10 @@
         self.io_loop.run_sync(f)
 
     def test_multi_dict_delayed(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             # callbacks run at different times
             responses = yield gen.multi_future(
                 dict(foo=self.delay(3, "v1"), bar=self.delay(1, "v2"))
@@ -142,6 +210,7 @@
     @skipOnTravis
     @gen_test
     def test_multi_performance(self):
+        """ """
         # Yielding a list used to have quadratic performance; make
         # sure a large list stays reasonable.  On my laptop a list of
         # 2000 used to take 1.8s, now it takes 0.12.
@@ -152,6 +221,7 @@
 
     @gen_test
     def test_multi_empty(self):
+        """ """
         # Empty lists or dicts should return the same type.
         x = yield []
         self.assertTrue(isinstance(x, list))
@@ -160,16 +230,19 @@
 
     @gen_test
     def test_future(self):
+        """ """
         result = yield self.async_future(1)
         self.assertEqual(result, 1)
 
     @gen_test
     def test_multi_future(self):
+        """ """
         results = yield [self.async_future(1), self.async_future(2)]
         self.assertEqual(results, [1, 2])
 
     @gen_test
     def test_multi_future_duplicate(self):
+        """ """
         # Note that this doesn't work with native corotines, only with
         # decorated coroutines.
         f = self.async_future(2)
@@ -178,11 +251,13 @@
 
     @gen_test
     def test_multi_dict_future(self):
+        """ """
         results = yield dict(foo=self.async_future(1), bar=self.async_future(2))
         self.assertEqual(results, dict(foo=1, bar=2))
 
     @gen_test
     def test_multi_exceptions(self):
+        """ """
         with ExpectLog(app_log, "Multiple exceptions in yield list"):
             with self.assertRaises(RuntimeError) as cm:
                 yield gen.Multi(
@@ -211,6 +286,7 @@
 
     @gen_test
     def test_multi_future_exceptions(self):
+        """ """
         with ExpectLog(app_log, "Multiple exceptions in yield list"):
             with self.assertRaises(RuntimeError) as cm:
                 yield [
@@ -234,45 +310,57 @@
             )
 
     def test_sync_raise_return(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             raise gen.Return()
 
         self.io_loop.run_sync(f)
 
     def test_async_raise_return(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             yield gen.moment
             raise gen.Return()
 
         self.io_loop.run_sync(f)
 
     def test_sync_raise_return_value(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             raise gen.Return(42)
 
         self.assertEqual(42, self.io_loop.run_sync(f))
 
     def test_sync_raise_return_value_tuple(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             raise gen.Return((1, 2))
 
         self.assertEqual((1, 2), self.io_loop.run_sync(f))
 
     def test_async_raise_return_value(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             yield gen.moment
             raise gen.Return(42)
 
         self.assertEqual(42, self.io_loop.run_sync(f))
 
     def test_async_raise_return_value_tuple(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             yield gen.moment
             raise gen.Return((1, 2))
 
@@ -280,7 +368,9 @@
 
 
 class GenCoroutineTest(AsyncTestCase):
+    """ """
     def setUp(self):
+        """ """
         # Stray StopIteration exceptions can lead to tests exiting prematurely,
         # so we need explicit checks here to make sure the tests run all
         # the way through.
@@ -288,13 +378,16 @@
         super().setUp()
 
     def tearDown(self):
+        """ """
         super().tearDown()
         assert self.finished
 
     def test_attributes(self):
-        self.finished = True
-
-        def f():
+        """ """
+        self.finished = True
+
+        def f():
+            """ """
             yield gen.moment
 
         coro = gen.coroutine(f)
@@ -303,9 +396,11 @@
         self.assertIs(coro.__wrapped__, f)  # type: ignore
 
     def test_is_coroutine_function(self):
-        self.finished = True
-
-        def f():
+        """ """
+        self.finished = True
+
+        def f():
+            """ """
             yield gen.moment
 
         coro = gen.coroutine(f)
@@ -315,8 +410,10 @@
 
     @gen_test
     def test_sync_gen_return(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             raise gen.Return(42)
 
         result = yield f()
@@ -325,8 +422,10 @@
 
     @gen_test
     def test_async_gen_return(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             yield gen.moment
             raise gen.Return(42)
 
@@ -336,8 +435,10 @@
 
     @gen_test
     def test_sync_return(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             return 42
 
         result = yield f()
@@ -346,8 +447,10 @@
 
     @gen_test
     def test_async_return(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             yield gen.moment
             return 42
 
@@ -357,11 +460,13 @@
 
     @gen_test
     def test_async_early_return(self):
+        """ """
         # A yield statement exists but is not executed, which means
         # this function "returns" via an exception.  This exception
         # doesn't happen before the exception handling is set up.
         @gen.coroutine
         def f():
+            """ """
             if True:
                 return 42
             yield gen.Task(self.io_loop.add_callback)
@@ -372,8 +477,10 @@
 
     @gen_test
     def test_async_await(self):
+        """ """
         @gen.coroutine
         def f1():
+            """ """
             yield gen.moment
             raise gen.Return(42)
 
@@ -390,6 +497,7 @@
 
     @gen_test
     def test_asyncio_sleep_zero(self):
+        """ """
         # asyncio.sleep(0) turns into a special case (equivalent to
         # `yield None`)
         async def f():
@@ -404,8 +512,10 @@
 
     @gen_test
     def test_async_await_mixed_multi_native_future(self):
+        """ """
         @gen.coroutine
         def f1():
+            """ """
             yield gen.moment
 
         async def f2():
@@ -414,6 +524,7 @@
 
         @gen.coroutine
         def f3():
+            """ """
             yield gen.moment
             raise gen.Return(43)
 
@@ -423,6 +534,7 @@
 
     @gen_test
     def test_async_with_timeout(self):
+        """ """
         async def f1():
             return 42
 
@@ -432,8 +544,10 @@
 
     @gen_test
     def test_sync_return_no_value(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             return
 
         result = yield f()
@@ -442,9 +556,11 @@
 
     @gen_test
     def test_async_return_no_value(self):
+        """ """
         # Without a return value we don't need python 3.3.
         @gen.coroutine
         def f():
+            """ """
             yield gen.moment
             return
 
@@ -454,8 +570,10 @@
 
     @gen_test
     def test_sync_raise(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             1 / 0
 
         # The exception is raised when the future is yielded
@@ -468,8 +586,10 @@
 
     @gen_test
     def test_async_raise(self):
-        @gen.coroutine
-        def f():
+        """ """
+        @gen.coroutine
+        def f():
+            """ """
             yield gen.moment
             1 / 0
 
@@ -480,14 +600,17 @@
 
     @gen_test
     def test_replace_yieldpoint_exception(self):
+        """ """
         # Test exception handling: a coroutine can catch one exception
         # raised by a yield point and raise a different one.
         @gen.coroutine
         def f1():
+            """ """
             1 / 0
 
         @gen.coroutine
         def f2():
+            """ """
             try:
                 yield f1()
             except ZeroDivisionError:
@@ -500,14 +623,17 @@
 
     @gen_test
     def test_swallow_yieldpoint_exception(self):
+        """ """
         # Test exception handling: a coroutine can catch an exception
         # raised by a yield point and not raise a different one.
         @gen.coroutine
         def f1():
+            """ """
             1 / 0
 
         @gen.coroutine
         def f2():
+            """ """
             try:
                 yield f1()
             except ZeroDivisionError:
@@ -519,10 +645,24 @@
 
     @gen_test
     def test_moment(self):
+        """ """
         calls = []
 
         @gen.coroutine
         def f(name, yieldable):
+            """
+
+            Parameters
+            ----------
+            name :
+                
+            yieldable :
+                
+
+            Returns
+            -------
+
+            """
             for i in range(5):
                 calls.append(name)
                 yield yieldable
@@ -546,16 +686,30 @@
 
     @gen_test
     def test_sleep(self):
+        """ """
         yield gen.sleep(0.01)
         self.finished = True
 
     @gen_test
     def test_py3_leak_exception_context(self):
+        """ """
         class LeakedException(Exception):
+            """ """
             pass
 
         @gen.coroutine
         def inner(iteration):
+            """
+
+            Parameters
+            ----------
+            iteration :
+                
+
+            Returns
+            -------
+
+            """
             raise LeakedException(iteration)
 
         try:
@@ -577,17 +731,21 @@
         (3,) < sys.version_info < (3, 6), "asyncio.Future has reference cycles"
     )
     def test_coroutine_refcounting(self):
+        """ """
         # On CPython, tasks and their arguments should be released immediately
         # without waiting for garbage collection.
         @gen.coroutine
         def inner():
+            """ """
             class Foo(object):
+                """ """
                 pass
 
             local_var = Foo()
             self.local_ref = weakref.ref(local_var)
 
             def dummy():
+                """ """
                 pass
 
             yield gen.coroutine(dummy)()
@@ -595,6 +753,7 @@
 
         @gen.coroutine
         def inner2():
+            """ """
             try:
                 yield inner()
             except ValueError:
@@ -606,6 +765,7 @@
         self.finished = True
 
     def test_asyncio_future_debug_info(self):
+        """ """
         self.finished = True
         # Enable debug mode
         asyncio_loop = asyncio.get_event_loop()
@@ -613,6 +773,7 @@
         asyncio_loop.set_debug(True)
 
         def f():
+            """ """
             yield gen.moment
 
         coro = gen.coroutine(f)()
@@ -625,10 +786,12 @@
 
     @gen_test
     def test_asyncio_gather(self):
+        """ """
         # This demonstrates that tornado coroutines can be understood
         # by asyncio (This failed prior to Tornado 5.0).
         @gen.coroutine
         def f():
+            """ """
             yield gen.moment
             raise gen.Return(1)
 
@@ -638,8 +801,10 @@
 
 
 class GenCoroutineSequenceHandler(RequestHandler):
+    """ """
     @gen.coroutine
     def get(self):
+        """ """
         yield gen.moment
         self.write("1")
         yield gen.moment
@@ -649,8 +814,10 @@
 
 
 class GenCoroutineUnfinishedSequenceHandler(RequestHandler):
+    """ """
     @gen.coroutine
     def get(self):
+        """ """
         yield gen.moment
         self.write("1")
         yield gen.moment
@@ -662,14 +829,17 @@
 
 # "Undecorated" here refers to the absence of @asynchronous.
 class UndecoratedCoroutinesHandler(RequestHandler):
+    """ """
     @gen.coroutine
     def prepare(self):
+        """ """
         self.chunks = []  # type: List[str]
         yield gen.moment
         self.chunks.append("1")
 
     @gen.coroutine
     def get(self):
+        """ """
         self.chunks.append("2")
         yield gen.moment
         self.chunks.append("3")
@@ -678,23 +848,29 @@
 
 
 class AsyncPrepareErrorHandler(RequestHandler):
+    """ """
     @gen.coroutine
     def prepare(self):
+        """ """
         yield gen.moment
         raise HTTPError(403)
 
     def get(self):
+        """ """
         self.finish("ok")
 
 
 class NativeCoroutineHandler(RequestHandler):
+    """ """
     async def get(self):
         await asyncio.sleep(0)
         self.write("ok")
 
 
 class GenWebTest(AsyncHTTPTestCase):
+    """ """
     def get_app(self):
+        """ """
         return Application(
             [
                 ("/coroutine_sequence", GenCoroutineSequenceHandler),
@@ -709,35 +885,43 @@
         )
 
     def test_coroutine_sequence_handler(self):
+        """ """
         response = self.fetch("/coroutine_sequence")
         self.assertEqual(response.body, b"123")
 
     def test_coroutine_unfinished_sequence_handler(self):
+        """ """
         response = self.fetch("/coroutine_unfinished_sequence")
         self.assertEqual(response.body, b"123")
 
     def test_undecorated_coroutines(self):
+        """ """
         response = self.fetch("/undecorated_coroutine")
         self.assertEqual(response.body, b"123")
 
     def test_async_prepare_error_handler(self):
+        """ """
         response = self.fetch("/async_prepare_error")
         self.assertEqual(response.code, 403)
 
     def test_native_coroutine_handler(self):
+        """ """
         response = self.fetch("/native_coroutine")
         self.assertEqual(response.code, 200)
         self.assertEqual(response.body, b"ok")
 
 
 class WithTimeoutTest(AsyncTestCase):
+    """ """
     @gen_test
     def test_timeout(self):
+        """ """
         with self.assertRaises(gen.TimeoutError):
             yield gen.with_timeout(datetime.timedelta(seconds=0.1), Future())
 
     @gen_test
     def test_completes_before_timeout(self):
+        """ """
         future = Future()  # type: Future[str]
         self.io_loop.add_timeout(
             datetime.timedelta(seconds=0.1), lambda: future.set_result("asdf")
@@ -747,6 +931,7 @@
 
     @gen_test
     def test_fails_before_timeout(self):
+        """ """
         future = Future()  # type: Future[str]
         self.io_loop.add_timeout(
             datetime.timedelta(seconds=0.1),
@@ -757,6 +942,7 @@
 
     @gen_test
     def test_already_resolved(self):
+        """ """
         future = Future()  # type: Future[str]
         future.set_result("asdf")
         result = yield gen.with_timeout(datetime.timedelta(seconds=3600), future)
@@ -764,6 +950,7 @@
 
     @gen_test
     def test_timeout_concurrent_future(self):
+        """ """
         # A concurrent future that does not resolve before the timeout.
         with futures.ThreadPoolExecutor(1) as executor:
             with self.assertRaises(gen.TimeoutError):
@@ -773,11 +960,13 @@
 
     @gen_test
     def test_completed_concurrent_future(self):
+        """ """
         # A concurrent future that is resolved before we even submit it
         # to with_timeout.
         with futures.ThreadPoolExecutor(1) as executor:
 
             def dummy():
+                """ """
                 pass
 
             f = executor.submit(dummy)
@@ -786,6 +975,7 @@
 
     @gen_test
     def test_normal_concurrent_future(self):
+        """ """
         # A conccurrent future that resolves while waiting for the timeout.
         with futures.ThreadPoolExecutor(1) as executor:
             yield gen.with_timeout(
@@ -795,8 +985,10 @@
 
 
 class WaitIteratorTest(AsyncTestCase):
+    """ """
     @gen_test
     def test_empty_iterator(self):
+        """ """
         g = gen.WaitIterator()
         self.assertTrue(g.done(), "empty generator iterated")
 
@@ -808,6 +1000,7 @@
 
     @gen_test
     def test_already_done(self):
+        """ """
         f1 = Future()  # type: Future[int]
         f2 = Future()  # type: Future[int]
         f3 = Future()  # type: Future[int]
@@ -861,6 +1054,19 @@
         self.assertEqual(dg.current_future, None, "bad nil current future")
 
     def finish_coroutines(self, iteration, futures):
+        """
+
+        Parameters
+        ----------
+        iteration :
+            
+        futures :
+            
+
+        Returns
+        -------
+
+        """
         if iteration == 3:
             futures[2].set_result(24)
         elif iteration == 5:
@@ -874,6 +1080,7 @@
 
     @gen_test
     def test_iterator(self):
+        """ """
         futures = [Future(), Future(), Future(), Future()]  # type: List[Future[int]]
 
         self.finish_coroutines(0, futures)
@@ -900,6 +1107,7 @@
 
     @gen_test
     def test_iterator_async_await(self):
+        """ """
         # Recreate the previous test with py35 syntax. It's a little clunky
         # because of the way the previous test handles an exception on
         # a single iteration.
@@ -937,6 +1145,7 @@
 
     @gen_test
     def test_no_ref(self):
+        """ """
         # In this usage, there is no direct hard reference to the
         # WaitIterator itself, only the Future it returns. Since
         # WaitIterator uses weak references internally to improve GC
@@ -947,21 +1156,26 @@
 
 
 class RunnerGCTest(AsyncTestCase):
+    """ """
     def is_pypy3(self):
+        """ """
         return platform.python_implementation() == "PyPy" and sys.version_info > (3,)
 
     @gen_test
     def test_gc(self):
+        """ """
         # GitHub issue 1769: Runner objects can get GCed unexpectedly
         # while their future is alive.
         weakref_scope = [None]  # type: List[Optional[weakref.ReferenceType]]
 
         def callback():
+            """ """
             gc.collect(2)
             weakref_scope[0]().set_result(123)  # type: ignore
 
         @gen.coroutine
         def tester():
+            """ """
             fut = Future()  # type: Future[int]
             weakref_scope[0] = weakref.ref(fut)
             self.io_loop.add_callback(callback)
@@ -970,6 +1184,7 @@
         yield gen.with_timeout(datetime.timedelta(seconds=0.2), tester())
 
     def test_gc_infinite_coro(self):
+        """ """
         # GitHub issue 2229: suspended coroutines should be GCed when
         # their loop is closed, even if they're involved in a reference
         # cycle.
@@ -979,6 +1194,7 @@
 
         @gen.coroutine
         def infinite_coro():
+            """ """
             try:
                 while True:
                     yield gen.sleep(1e-3)
@@ -989,6 +1205,7 @@
 
         @gen.coroutine
         def do_something():
+            """ """
             fut = infinite_coro()
             fut._refcycle = fut  # type: ignore
             wfut.append(weakref.ref(fut))
@@ -1006,6 +1223,7 @@
             self.assertIs(result[-1], None)
 
     def test_gc_infinite_async_await(self):
+        """ """
         # Same as test_gc_infinite_coro, but with a `async def` function
         import asyncio
 
@@ -1024,6 +1242,7 @@
 
         @gen.coroutine
         def do_something():
+            """ """
             fut = asyncio.get_event_loop().create_task(infinite_coro(result))
             fut._refcycle = fut  # type: ignore
             wfut.append(weakref.ref(fut))
@@ -1042,10 +1261,12 @@
             self.assertIs(result[-1], None)
 
     def test_multi_moment(self):
+        """ """
         # Test gen.multi with moment
         # now that it's not a real Future
         @gen.coroutine
         def wait_a_moment():
+            """ """
             result = yield gen.multi([gen.moment, gen.moment])
             raise gen.Return(result)
 
@@ -1060,12 +1281,24 @@
 
 @unittest.skipIf(contextvars is None, "contextvars module not present")
 class ContextVarsTest(AsyncTestCase):
+    """ """
     async def native_root(self, x):
         ctx_var.set(x)
         await self.inner(x)
 
     @gen.coroutine
     def gen_root(self, x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         ctx_var.set(x)
         yield
         yield self.inner(x)
@@ -1088,15 +1321,38 @@
 
     @gen.coroutine
     def gen_inner(self, x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         self.assertEqual(ctx_var.get(), x)
         yield
         self.assertEqual(ctx_var.get(), x)
 
     def thread_inner(self, x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         self.assertEqual(ctx_var.get(), x)
 
     @gen_test
     def test_propagate(self):
+        """ """
         # Verify that context vars get propagated across various
         # combinations of native and decorated coroutines.
         yield [
@@ -1108,6 +1364,7 @@
 
     @gen_test
     def test_reset(self):
+        """ """
         token = ctx_var.set(1)
         yield
         # reset asserts that we are still at the same level of the context tree,
