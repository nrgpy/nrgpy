# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/colorama/winterm.py
+++ b/..//venv/lib/python3.8/site-packages/colorama/winterm.py
@@ -4,6 +4,7 @@
 
 # from wincon.h
 class WinColor(object):
+    """ """
     BLACK   = 0
     BLUE    = 1
     GREEN   = 2
@@ -15,11 +16,13 @@
 
 # from wincon.h
 class WinStyle(object):
+    """ """
     NORMAL              = 0x00 # dim text, dim background
     BRIGHT              = 0x08 # bright text, dim background
     BRIGHT_BACKGROUND   = 0x80 # dim text, bright background
 
 class WinTerm(object):
+    """ """
 
     def __init__(self):
         self._default = win32.GetConsoleScreenBufferInfo(win32.STDOUT).wAttributes
@@ -34,19 +37,57 @@
         self._light = 0
 
     def get_attrs(self):
+        """ """
         return self._fore + self._back * 16 + (self._style | self._light)
 
     def set_attrs(self, value):
+        """
+
+        Parameters
+        ----------
+        value :
+            
+
+        Returns
+        -------
+
+        """
         self._fore = value & 7
         self._back = (value >> 4) & 7
         self._style = value & (WinStyle.BRIGHT | WinStyle.BRIGHT_BACKGROUND)
 
     def reset_all(self, on_stderr=None):
+        """
+
+        Parameters
+        ----------
+        on_stderr :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         self.set_attrs(self._default)
         self.set_console(attrs=self._default)
         self._light = 0
 
     def fore(self, fore=None, light=False, on_stderr=False):
+        """
+
+        Parameters
+        ----------
+        fore :
+             (Default value = None)
+        light :
+             (Default value = False)
+        on_stderr :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         if fore is None:
             fore = self._default_fore
         self._fore = fore
@@ -58,6 +99,21 @@
         self.set_console(on_stderr=on_stderr)
 
     def back(self, back=None, light=False, on_stderr=False):
+        """
+
+        Parameters
+        ----------
+        back :
+             (Default value = None)
+        light :
+             (Default value = False)
+        on_stderr :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         if back is None:
             back = self._default_back
         self._back = back
@@ -69,12 +125,38 @@
         self.set_console(on_stderr=on_stderr)
 
     def style(self, style=None, on_stderr=False):
+        """
+
+        Parameters
+        ----------
+        style :
+             (Default value = None)
+        on_stderr :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         if style is None:
             style = self._default_style
         self._style = style
         self.set_console(on_stderr=on_stderr)
 
     def set_console(self, attrs=None, on_stderr=False):
+        """
+
+        Parameters
+        ----------
+        attrs :
+             (Default value = None)
+        on_stderr :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         if attrs is None:
             attrs = self.get_attrs()
         handle = win32.STDOUT
@@ -83,6 +165,17 @@
         win32.SetConsoleTextAttribute(handle, attrs)
 
     def get_position(self, handle):
+        """
+
+        Parameters
+        ----------
+        handle :
+            
+
+        Returns
+        -------
+
+        """
         position = win32.GetConsoleScreenBufferInfo(handle).dwCursorPosition
         # Because Windows coordinates are 0-based,
         # and win32.SetConsoleCursorPosition expects 1-based.
@@ -91,6 +184,19 @@
         return position
 
     def set_cursor_position(self, position=None, on_stderr=False):
+        """
+
+        Parameters
+        ----------
+        position :
+             (Default value = None)
+        on_stderr :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         if position is None:
             # I'm not currently tracking the position, so there is no default.
             # position = self.get_position()
@@ -101,6 +207,21 @@
         win32.SetConsoleCursorPosition(handle, position)
 
     def cursor_adjust(self, x, y, on_stderr=False):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+        y :
+            
+        on_stderr :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         handle = win32.STDOUT
         if on_stderr:
             handle = win32.STDERR
@@ -109,6 +230,19 @@
         win32.SetConsoleCursorPosition(handle, adjusted_position, adjust=False)
 
     def erase_screen(self, mode=0, on_stderr=False):
+        """
+
+        Parameters
+        ----------
+        mode :
+             (Default value = 0)
+        on_stderr :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         # 0 should clear from the cursor to the end of the screen.
         # 1 should clear from the cursor to the beginning of the screen.
         # 2 should clear the entire screen, and move cursor to (1,1)
@@ -141,6 +275,19 @@
             win32.SetConsoleCursorPosition(handle, (1, 1))
 
     def erase_line(self, mode=0, on_stderr=False):
+        """
+
+        Parameters
+        ----------
+        mode :
+             (Default value = 0)
+        on_stderr :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         # 0 should clear from the cursor to the end of the line.
         # 1 should clear from the cursor to the beginning of the line.
         # 2 should clear the entire line.
@@ -166,4 +313,15 @@
         win32.FillConsoleOutputAttribute(handle, self.get_attrs(), cells_to_erase, from_coord)
 
     def set_title(self, title):
+        """
+
+        Parameters
+        ----------
+        title :
+            
+
+        Returns
+        -------
+
+        """
         win32.SetConsoleTitle(title)
