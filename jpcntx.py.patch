# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/chardet/jpcntx.py
+++ b/..//venv/lib/python3.8/site-packages/chardet/jpcntx.py
@@ -114,6 +114,7 @@
 )
 
 class JapaneseContextAnalysis(object):
+    """ """
     NUM_OF_CATEGORY = 6
     DONT_KNOW = -1
     ENOUGH_REL_THRESHOLD = 100
@@ -129,6 +130,7 @@
         self.reset()
 
     def reset(self):
+        """ """
         self._total_rel = 0  # total sequence received
         # category counters, each integer counts sequence in its category
         self._rel_sample = [0] * self.NUM_OF_CATEGORY
@@ -141,6 +143,19 @@
         self._done = False
 
     def feed(self, byte_str, num_bytes):
+        """
+
+        Parameters
+        ----------
+        byte_str :
+            
+        num_bytes :
+            
+
+        Returns
+        -------
+
+        """
         if self._done:
             return
 
@@ -168,9 +183,11 @@
                 self._last_char_order = order
 
     def got_enough_data(self):
+        """ """
         return self._total_rel > self.ENOUGH_REL_THRESHOLD
 
     def get_confidence(self):
+        """ """
         # This is just one way to calculate confidence. It works well for me.
         if self._total_rel > self.MINIMUM_DATA_THRESHOLD:
             return (self._total_rel - self._rel_sample[0]) / self._total_rel
@@ -178,18 +195,42 @@
             return self.DONT_KNOW
 
     def get_order(self, byte_str):
+        """
+
+        Parameters
+        ----------
+        byte_str :
+            
+
+        Returns
+        -------
+
+        """
         return -1, 1
 
 class SJISContextAnalysis(JapaneseContextAnalysis):
+    """ """
     def __init__(self):
         super(SJISContextAnalysis, self).__init__()
         self._charset_name = "SHIFT_JIS"
 
     @property
     def charset_name(self):
+        """ """
         return self._charset_name
 
     def get_order(self, byte_str):
+        """
+
+        Parameters
+        ----------
+        byte_str :
+            
+
+        Returns
+        -------
+
+        """
         if not byte_str:
             return -1, 1
         # find out current char's byte length
@@ -210,7 +251,19 @@
         return -1, char_len
 
 class EUCJPContextAnalysis(JapaneseContextAnalysis):
+    """ """
     def get_order(self, byte_str):
+        """
+
+        Parameters
+        ----------
+        byte_str :
+            
+
+        Returns
+        -------
+
+        """
         if not byte_str:
             return -1, 1
         # find out current char's byte length
