# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test_index_tricks.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test_index_tricks.py
@@ -13,7 +13,9 @@
 
 
 class TestRavelUnravelIndex:
+    """ """
     def test_basic(self):
+        """ """
         assert_equal(np.unravel_index(2, (2, 2)), (1, 0))
 
         # test backwards compatibility with older dims
@@ -76,6 +78,7 @@
         assert_equal(np.unravel_index(1621, (6, 7, 8, 9)), [3, 1, 4, 1])
 
     def test_empty_indices(self):
+        """ """
         msg1 = 'indices must be integral: the provided empty sequence was'
         msg2 = 'only int indices permitted'
         assert_raises_regex(TypeError, msg1, np.unravel_index, [], (10, 3, 5))
@@ -96,6 +99,7 @@
                      (5, 3)), [])
 
     def test_big_indices(self):
+        """ """
         # ravel_multi_index for big indices (issue #7546)
         if np.intp == np.int64:
             arr = ([1, 29], [3, 5], [3, 117], [19, 2],
@@ -120,6 +124,7 @@
             np.ravel_multi_index, dummy_arr, (half_max+1, 2), order='F')
 
     def test_dtypes(self):
+        """ """
         # Test with different data types
         for dtype in [np.int16, np.uint16, np.int32,
                       np.uint32, np.int64, np.uint64]:
@@ -147,6 +152,7 @@
             assert_equal(coords, np.unravel_index(uncoords, shape, order='F'))
 
     def test_clipmodes(self):
+        """ """
         # Test clipmodes
         assert_equal(
             np.ravel_multi_index([5, 1, -1, 2], (4, 3, 7, 12), mode='wrap'),
@@ -159,12 +165,14 @@
             ValueError, np.ravel_multi_index, [5, 1, -1, 2], (4, 3, 7, 12))
 
     def test_writeability(self):
+        """ """
         # See gh-7269
         x, y = np.unravel_index([1, 2, 3], (4, 5))
         assert_(x.flags.writeable)
         assert_(y.flags.writeable)
 
     def test_0d(self):
+        """ """
         # gh-580
         x = np.unravel_index(0, ())
         assert_equal(x, ())
@@ -175,6 +183,17 @@
 
     @pytest.mark.parametrize("mode", ["clip", "wrap", "raise"])
     def test_empty_array_ravel(self, mode):
+        """
+
+        Parameters
+        ----------
+        mode :
+            
+
+        Returns
+        -------
+
+        """
         res = np.ravel_multi_index(
                     np.zeros((3, 0), dtype=np.intp), (2, 1, 0), mode=mode)
         assert(res.shape == (0,))
@@ -184,6 +203,7 @@
                     np.zeros((3, 1), dtype=np.intp), (2, 1, 0), mode=mode)
 
     def test_empty_array_unravel(self):
+        """ """
         res = np.unravel_index(np.zeros(0, dtype=np.intp), (2, 1, 0))
         # res is a tuple of three empty arrays
         assert(len(res) == 3)
@@ -193,7 +213,9 @@
             np.unravel_index([1], (2, 1, 0))
 
 class TestGrid:
+    """ """
     def test_basic(self):
+        """ """
         a = mgrid[-1:1:10j]
         b = mgrid[-1:1:0.1]
         assert_(a.shape == (10,))
@@ -206,11 +228,13 @@
         assert_almost_equal(a[1]-a[0], 2.0/9.0, 11)
 
     def test_linspace_equivalence(self):
+        """ """
         y, st = np.linspace(2, 10, retstep=True)
         assert_almost_equal(st, 8/49.0)
         assert_array_almost_equal(y, mgrid[2:10:50j], 13)
 
     def test_nd(self):
+        """ """
         c = mgrid[-1:1:10j, -2:2:10j]
         d = mgrid[-1:1:0.1, -2:2:0.2]
         assert_(c.shape == (2, 10, 10))
@@ -225,6 +249,7 @@
                                   0.2*np.ones(20, 'd'), 11)
 
     def test_sparse(self):
+        """ """
         grid_full   = mgrid[-1:1:10j, -2:2:10j]
         grid_sparse = ogrid[-1:1:10j, -2:2:10j]
 
@@ -238,6 +263,23 @@
         (-10, 20, None, (1800, 30)),
         ])
     def test_mgrid_size_none_handling(self, start, stop, step, expected):
+        """
+
+        Parameters
+        ----------
+        start :
+            
+        stop :
+            
+        step :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # regression test None value handling for
         # start and step values used by mgrid;
         # internally, this aims to cover previously
@@ -251,26 +293,32 @@
 
 
 class TestConcatenator:
+    """ """
     def test_1d(self):
+        """ """
         assert_array_equal(r_[1, 2, 3, 4, 5, 6], np.array([1, 2, 3, 4, 5, 6]))
         b = np.ones(5)
         c = r_[b, 0, 0, b]
         assert_array_equal(c, [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1])
 
     def test_mixed_type(self):
+        """ """
         g = r_[10.1, 1:10]
         assert_(g.dtype == 'f8')
 
     def test_more_mixed_type(self):
+        """ """
         g = r_[-10.1, np.array([1]), np.array([2, 3, 4]), 10.0]
         assert_(g.dtype == 'f8')
 
     def test_complex_step(self):
+        """ """
         # Regression test for #12262
         g = r_[0:36:100j]
         assert_(g.shape == (100,))
 
     def test_2d(self):
+        """ """
         b = np.random.rand(5, 5)
         c = np.random.rand(5, 5)
         d = r_['1', b, c]  # append columns
@@ -283,26 +331,32 @@
         assert_array_equal(d[5:, :], c)
 
     def test_0d(self):
+        """ """
         assert_equal(r_[0, np.array(1), 2], [0, 1, 2])
         assert_equal(r_[[0, 1, 2], np.array(3)], [0, 1, 2, 3])
         assert_equal(r_[np.array(0), [1, 2, 3]], [0, 1, 2, 3])
 
 
 class TestNdenumerate:
+    """ """
     def test_basic(self):
+        """ """
         a = np.array([[1, 2], [3, 4]])
         assert_equal(list(ndenumerate(a)),
                      [((0, 0), 1), ((0, 1), 2), ((1, 0), 3), ((1, 1), 4)])
 
 
 class TestIndexExpression:
+    """ """
     def test_regression_1(self):
+        """ """
         # ticket #1196
         a = np.arange(2)
         assert_equal(a[:-1], a[s_[:-1]])
         assert_equal(a[:-1], a[index_exp[:-1]])
 
     def test_simple_1(self):
+        """ """
         a = np.random.rand(4, 5, 6)
 
         assert_equal(a[:, :3, [1, 2]], a[index_exp[:, :3, [1, 2]]])
@@ -310,7 +364,9 @@
 
 
 class TestIx_:
+    """ """
     def test_regression_1(self):
+        """ """
         # Test empty untyped inputs create outputs of indexing type, gh-5804
         a, = np.ix_(range(0))
         assert_equal(a.dtype, np.intp)
@@ -323,6 +379,7 @@
         assert_equal(a.dtype, np.float32)
 
     def test_shape_and_dtype(self):
+        """ """
         sizes = (4, 5, 3, 2)
         # Test both lists and arrays
         for func in (range, np.arange):
@@ -333,15 +390,18 @@
                 assert_(np.issubdtype(a.dtype, np.integer))
 
     def test_bool(self):
+        """ """
         bool_a = [True, False, True, True]
         int_a, = np.nonzero(bool_a)
         assert_equal(np.ix_(bool_a)[0], int_a)
 
     def test_1d_only(self):
+        """ """
         idx2d = [[1, 2, 3], [4, 5, 6]]
         assert_raises(ValueError, np.ix_, idx2d)
 
     def test_repeated_input(self):
+        """ """
         length_of_vector = 5
         x = np.arange(length_of_vector)
         out = ix_(x, x)
@@ -352,12 +412,15 @@
 
 
 def test_c_():
+    """ """
     a = np.c_[np.array([[1, 2, 3]]), 0, 0, np.array([[4, 5, 6]])]
     assert_equal(a, [[1, 2, 3, 0, 0, 4, 5, 6]])
 
 
 class TestFillDiagonal:
+    """ """
     def test_basic(self):
+        """ """
         a = np.zeros((3, 3), int)
         fill_diagonal(a, 5)
         assert_array_equal(
@@ -367,6 +430,7 @@
             )
 
     def test_tall_matrix(self):
+        """ """
         a = np.zeros((10, 3), int)
         fill_diagonal(a, 5)
         assert_array_equal(
@@ -383,6 +447,7 @@
             )
 
     def test_tall_matrix_wrap(self):
+        """ """
         a = np.zeros((10, 3), int)
         fill_diagonal(a, 5, True)
         assert_array_equal(
@@ -399,6 +464,7 @@
             )
 
     def test_wide_matrix(self):
+        """ """
         a = np.zeros((3, 10), int)
         fill_diagonal(a, 5)
         assert_array_equal(
@@ -408,18 +474,21 @@
             )
 
     def test_operate_4d_array(self):
+        """ """
         a = np.zeros((3, 3, 3, 3), int)
         fill_diagonal(a, 4)
         i = np.array([0, 1, 2])
         assert_equal(np.where(a != 0), (i, i, i, i))
 
     def test_low_dim_handling(self):
+        """ """
         # raise error with low dimensionality
         a = np.zeros(3, int)
         with assert_raises_regex(ValueError, "at least 2-d"):
             fill_diagonal(a, 5)
 
     def test_hetero_shape_handling(self):
+        """ """
         # raise error with high dimensionality and
         # shape mismatch
         a = np.zeros((3,3,7,3), int)
@@ -428,6 +497,7 @@
 
 
 def test_diag_indices():
+    """ """
     di = diag_indices(4)
     a = np.array([[1, 2, 3, 4],
                   [5, 6, 7, 8],
@@ -456,25 +526,30 @@
 
 
 class TestDiagIndicesFrom:
+    """ """
 
     def test_diag_indices_from(self):
+        """ """
         x = np.random.random((4, 4))
         r, c = diag_indices_from(x)
         assert_array_equal(r, np.arange(4))
         assert_array_equal(c, np.arange(4))
 
     def test_error_small_input(self):
+        """ """
         x = np.ones(7)
         with assert_raises_regex(ValueError, "at least 2-d"):
             diag_indices_from(x)
 
     def test_error_shape_mismatch(self):
+        """ """
         x = np.zeros((3, 3, 2, 3), int)
         with assert_raises_regex(ValueError, "equal length"):
             diag_indices_from(x)
 
 
 def test_ndindex():
+    """ """
     x = list(ndindex(1, 2, 3))
     expected = [ix for ix, e in ndenumerate(np.zeros((1, 2, 3)))]
     assert_array_equal(x, expected)
