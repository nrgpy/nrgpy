# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test__iotools.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test__iotools.py
@@ -12,9 +12,11 @@
 
 
 class TestLineSplitter:
+    """ """
     "Tests the LineSplitter class."
 
     def test_no_delimiter(self):
+        """ """
         "Test LineSplitter w/o delimiter"
         strg = " 1 2 3 4  5 # test"
         test = LineSplitter()(strg)
@@ -23,6 +25,7 @@
         assert_equal(test, ['1', '2', '3', '4', '5'])
 
     def test_space_delimiter(self):
+        """ """
         "Test space delimiter"
         strg = " 1 2 3 4  5 # test"
         test = LineSplitter(' ')(strg)
@@ -31,6 +34,7 @@
         assert_equal(test, ['1 2 3 4', '5'])
 
     def test_tab_delimiter(self):
+        """ """
         "Test tab delimiter"
         strg = " 1\t 2\t 3\t 4\t 5  6"
         test = LineSplitter('\t')(strg)
@@ -40,6 +44,7 @@
         assert_equal(test, ['1  2', '3  4', '5  6'])
 
     def test_other_delimiter(self):
+        """ """
         "Test LineSplitter on delimiter"
         strg = "1,2,3,4,,5"
         test = LineSplitter(',')(strg)
@@ -55,6 +60,7 @@
         assert_equal(test, ['1', '2', '3', '4', '', '5'])
 
     def test_constant_fixed_width(self):
+        """ """
         "Test LineSplitter w/ fixed-width fields"
         strg = "  1  2  3  4     5   # test"
         test = LineSplitter(3)(strg)
@@ -69,6 +75,7 @@
         assert_equal(test, ['1     3  4  5  6'])
 
     def test_variable_fixed_width(self):
+        """ """
         strg = "  1     3  4  5  6# test"
         test = LineSplitter((3, 6, 6, 3))(strg)
         assert_equal(test, ['1', '3', '4  5', '6'])
@@ -81,8 +88,10 @@
 
 
 class TestNameValidator:
+    """ """
 
     def test_case_sensitivity(self):
+        """ """
         "Test case sensitivity"
         names = ['A', 'a', 'b', 'c']
         test = NameValidator().validate(names)
@@ -98,6 +107,7 @@
         assert_raises(ValueError, NameValidator, case_sensitive='foobar')
 
     def test_excludelist(self):
+        """ """
         "Test excludelist"
         names = ['dates', 'data', 'Other Data', 'mask']
         validator = NameValidator(excludelist=['dates', 'data', 'mask'])
@@ -105,6 +115,7 @@
         assert_equal(test, ['dates_', 'data_', 'Other_Data', 'mask_'])
 
     def test_missing_names(self):
+        """ """
         "Test validate missing names"
         namelist = ('a', 'b', 'c')
         validator = NameValidator()
@@ -117,6 +128,7 @@
         assert_equal(validator(namelist), ['f1', 'f0', 'f2'])
 
     def test_validate_nb_names(self):
+        """ """
         "Test validate nb names"
         namelist = ('a', 'b', 'c')
         validator = NameValidator()
@@ -125,6 +137,7 @@
                      ['a', 'b', 'c', 'g0', 'g1'])
 
     def test_validate_wo_names(self):
+        """ """
         "Test validate no names"
         namelist = None
         validator = NameValidator()
@@ -135,19 +148,33 @@
 
 
 def _bytes_to_date(s):
+    """
+
+    Parameters
+    ----------
+    s :
+        
+
+    Returns
+    -------
+
+    """
     return date(*time.strptime(s, "%Y-%m-%d")[:3])
 
 
 class TestStringConverter:
+    """ """
     "Test StringConverter"
 
     def test_creation(self):
+        """ """
         "Test creation of a StringConverter"
         converter = StringConverter(int, -99999)
         assert_equal(converter._status, 1)
         assert_equal(converter.default, -99999)
 
     def test_upgrade(self):
+        """ """
         "Tests the upgrade method."
 
         converter = StringConverter()
@@ -185,6 +212,7 @@
             assert_equal(converter._status, 8 + status_offset)
 
     def test_missing(self):
+        """ """
         "Tests the use of missing values."
         converter = StringConverter(missing_values=('missing',
                                                     'missed'))
@@ -199,6 +227,7 @@
             pass
 
     def test_upgrademapper(self):
+        """ """
         "Tests updatemapper"
         dateparser = _bytes_to_date
         _original_mapper = StringConverter._mapper[:]
@@ -215,6 +244,7 @@
             StringConverter._mapper = _original_mapper
 
     def test_string_to_object(self):
+        """ """
         "Make sure that string-to-object functions are properly recognized"
         old_mapper = StringConverter._mapper[:]  # copy of list
         conv = StringConverter(_bytes_to_date)
@@ -222,6 +252,7 @@
         assert_(hasattr(conv, 'default'))
 
     def test_keep_default(self):
+        """ """
         "Make sure we don't lose an explicit default"
         converter = StringConverter(None, missing_values='',
                                     default=-999)
@@ -236,12 +267,14 @@
         assert_equal(converter.type, np.dtype(float))
 
     def test_keep_default_zero(self):
+        """ """
         "Check that we don't lose a default of 0"
         converter = StringConverter(int, default=0,
                                     missing_values="N/A")
         assert_equal(converter.default, 0)
 
     def test_keep_missing_values(self):
+        """ """
         "Check that we're not losing missing values"
         converter = StringConverter(int, default=0,
                                     missing_values="N/A")
@@ -249,6 +282,7 @@
             converter.missing_values, {'', 'N/A'})
 
     def test_int64_dtype(self):
+        """ """
         "Check that int64 integer types can be specified"
         converter = StringConverter(np.int64, default=0)
         val = "-9223372036854775807"
@@ -257,6 +291,7 @@
         assert_(converter(val) == 9223372036854775807)
 
     def test_uint64_dtype(self):
+        """ """
         "Check that uint64 integer types can be specified"
         converter = StringConverter(np.uint64, default=0)
         val = "9223372043271415339"
@@ -264,8 +299,10 @@
 
 
 class TestMiscFunctions:
+    """ """
 
     def test_has_nested_dtype(self):
+        """ """
         "Test has_nested_dtype"
         ndtype = np.dtype(float)
         assert_equal(has_nested_fields(ndtype), False)
@@ -275,6 +312,7 @@
         assert_equal(has_nested_fields(ndtype), True)
 
     def test_easy_dtype(self):
+        """ """
         "Test ndtype on dtypes"
         # Simple case
         ndtype = float
@@ -332,6 +370,7 @@
             np.dtype([(_, float) for _ in ('f00', 'f01', 'f02')]))
 
     def test_flatten_dtype(self):
+        """ """
         "Testing flatten_dtype"
         # Standard dtype
         dt = np.dtype([("a", "f8"), ("b", "f8")])
