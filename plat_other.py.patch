# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/send2trash/plat_other.py
+++ b/..//venv/lib/python3.8/site-packages/send2trash/plat_other.py
@@ -36,8 +36,30 @@
     fsdecode = os.fsdecode
 except AttributeError:
     def fsencode(u):         # Python 2
+        """
+
+        Parameters
+        ----------
+        u :
+            
+
+        Returns
+        -------
+
+        """
         return u.encode(sys.getfilesystemencoding())
     def fsdecode(b):
+        """
+
+        Parameters
+        ----------
+        b :
+            
+
+        Returns
+        -------
+
+        """
         return b.decode(sys.getfilesystemencoding())
     # The Python 3 versions are a bit smarter, handling surrogate escapes,
     # but these should work in most cases.
@@ -56,6 +78,19 @@
 TOPDIR_FALLBACK = b'.Trash-' + text_type(uid).encode('ascii')
 
 def is_parent(parent, path):
+    """
+
+    Parameters
+    ----------
+    parent :
+        
+    path :
+        
+
+    Returns
+    -------
+
+    """
     path = op.realpath(path) # In case it's a symlink
     if isinstance(path, text_type):
         path = fsencode(path)
@@ -65,9 +100,33 @@
     return path.startswith(parent)
 
 def format_date(date):
+    """
+
+    Parameters
+    ----------
+    date :
+        
+
+    Returns
+    -------
+
+    """
     return date.strftime("%Y-%m-%dT%H:%M:%S")
 
 def info_for(src, topdir):
+    """
+
+    Parameters
+    ----------
+    src :
+        
+    topdir :
+        
+
+    Returns
+    -------
+
+    """
     # ...it MUST not include a ".." directory, and for files not "under" that
     # directory, absolute pathnames must be used. [2]
     if topdir is None or not is_parent(topdir, src):
@@ -81,11 +140,37 @@
     return info
 
 def check_create(dir):
+    """
+
+    Parameters
+    ----------
+    dir :
+        
+
+    Returns
+    -------
+
+    """
     # use 0700 for paths [3]
     if not op.exists(dir):
         os.makedirs(dir, 0o700)
 
 def trash_move(src, dst, topdir=None):
+    """
+
+    Parameters
+    ----------
+    src :
+        
+    dst :
+        
+    topdir :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     filename = op.basename(src)
     filespath = op.join(dst, FILES_DIR)
     infopath = op.join(dst, INFO_DIR)
@@ -106,6 +191,17 @@
     f.close()
 
 def find_mount_point(path):
+    """
+
+    Parameters
+    ----------
+    path :
+        
+
+    Returns
+    -------
+
+    """
     # Even if something's wrong, "/" is a mount point, so the loop will exit.
     # Use realpath in case it's a symlink
     path = op.realpath(path) # Required to avoid infinite loop
@@ -114,6 +210,17 @@
     return path
 
 def find_ext_volume_global_trash(volume_root):
+    """
+
+    Parameters
+    ----------
+    volume_root :
+        
+
+    Returns
+    -------
+
+    """
     # from [2] Trash directories (1) check for a .Trash dir with the right
     # permissions set.
     trash_dir = op.join(volume_root, TOPDIR_TRASH)
@@ -134,6 +241,17 @@
     return trash_dir
 
 def find_ext_volume_fallback_trash(volume_root):
+    """
+
+    Parameters
+    ----------
+    volume_root :
+        
+
+    Returns
+    -------
+
+    """
     # from [2] Trash directories (1) create a .Trash-$uid dir.
     trash_dir = op.join(volume_root, TOPDIR_FALLBACK)
     # Try to make the directory, if we lack permission, raise TrashPermissionError
@@ -146,6 +264,17 @@
     return trash_dir
 
 def find_ext_volume_trash(volume_root):
+    """
+
+    Parameters
+    ----------
+    volume_root :
+        
+
+    Returns
+    -------
+
+    """
     trash_dir = find_ext_volume_global_trash(volume_root)
     if trash_dir is None:
         trash_dir = find_ext_volume_fallback_trash(volume_root)
@@ -153,9 +282,31 @@
 
 # Pull this out so it's easy to stub (to avoid stubbing lstat itself)
 def get_dev(path):
+    """
+
+    Parameters
+    ----------
+    path :
+        
+
+    Returns
+    -------
+
+    """
     return os.lstat(path).st_dev
 
 def send2trash(path):
+    """
+
+    Parameters
+    ----------
+    path :
+        
+
+    Returns
+    -------
+
+    """
     if isinstance(path, text_type):
         path_b = fsencode(path)
     elif isinstance(path, bytes):
