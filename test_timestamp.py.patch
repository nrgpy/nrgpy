# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/scalar/timestamp/test_timestamp.py
@@ -22,7 +22,9 @@
 
 
 class TestTimestampProperties:
+    """ """
     def test_properties_business(self):
+        """ """
         ts = Timestamp("2017-10-01", freq="B")
         control = Timestamp("2017-10-01")
         assert ts.dayofweek == 6
@@ -42,7 +44,21 @@
         assert control.is_quarter_end
 
     def test_fields(self):
+        """ """
         def check(value, equal):
+            """
+
+            Parameters
+            ----------
+            value :
+                
+            equal :
+                
+
+            Returns
+            -------
+
+            """
             # that we are int like
             assert isinstance(value, int)
             assert value == equal
@@ -104,6 +120,19 @@
         "time_locale", [None] if tm.get_locales() is None else [None] + tm.get_locales()
     )
     def test_names(self, data, time_locale):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        time_locale :
+            
+
+        Returns
+        -------
+
+        """
         # GH 17354
         # Test .day_name(), .month_name
         if time_locale is None:
@@ -134,6 +163,17 @@
         assert np.isnan(nan_ts.month_name(time_locale))
 
     def test_is_leap_year(self, tz_naive_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+
+        Returns
+        -------
+
+        """
         tz = tz_naive_fixture
         # GH 13727
         dt = Timestamp("2000-01-01 00:00:00", tz=tz)
@@ -150,6 +190,7 @@
         assert not dt.is_leap_year
 
     def test_woy_boundary(self):
+        """ """
         # make sure weeks at year boundaries are correct
         d = datetime(2013, 12, 31)
         result = Timestamp(d).week
@@ -185,6 +226,7 @@
         assert (result == [52, 52, 53, 53]).all()
 
     def test_resolution(self):
+        """ """
         # GH#21336, GH#21365
         dt = Timestamp("2100-01-01 00:00:00")
         assert dt.resolution == Timedelta(nanoseconds=1)
@@ -195,7 +237,9 @@
 
 
 class TestTimestamp:
+    """ """
     def test_tz(self):
+        """ """
         tstr = "2014-02-01 09:00"
         ts = Timestamp(tstr)
         local = ts.tz_localize("Asia/Tokyo")
@@ -215,9 +259,11 @@
         assert conv.hour == 19
 
     def test_utc_z_designator(self):
+        """ """
         assert get_timezone(Timestamp("2014-11-02 01:00Z").tzinfo) is utc
 
     def test_asm8(self):
+        """ """
         np.random.seed(7_960_929)
         ns = [Timestamp.min.value, Timestamp.max.value, 1000]
 
@@ -229,7 +275,21 @@
         assert Timestamp("nat").asm8.view("i8") == np.datetime64("nat", "ns").view("i8")
 
     def test_class_ops_pytz(self):
+        """ """
         def compare(x, y):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+            y :
+                
+
+            Returns
+            -------
+
+            """
             assert int((Timestamp(x).value - Timestamp(y).value) / 1e9) == 0
 
         compare(Timestamp.now(), datetime.now())
@@ -253,7 +313,21 @@
         )
 
     def test_class_ops_dateutil(self):
+        """ """
         def compare(x, y):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+            y :
+                
+
+            Returns
+            -------
+
+            """
             assert (
                 int(
                     np.round(Timestamp(x).value / 1e9)
@@ -283,6 +357,7 @@
         )
 
     def test_basics_nanos(self):
+        """ """
         val = np.int64(946_684_800_000_000_000).view("M8[ns]")
         stamp = Timestamp(val.view("i8") + 500)
         assert stamp.year == 2000
@@ -324,7 +399,41 @@
         ],
     )
     def test_unit(self, value, check_kwargs):
+        """
+
+        Parameters
+        ----------
+        value :
+            
+        check_kwargs :
+            
+
+        Returns
+        -------
+
+        """
         def check(value, unit=None, h=1, s=1, us=0, ns=0):
+            """
+
+            Parameters
+            ----------
+            value :
+                
+            unit :
+                 (Default value = None)
+            h :
+                 (Default value = 1)
+            s :
+                 (Default value = 1)
+            us :
+                 (Default value = 0)
+            ns :
+                 (Default value = 0)
+
+            Returns
+            -------
+
+            """
             stamp = Timestamp(value, unit=unit)
             assert stamp.year == 2000
             assert stamp.month == 1
@@ -343,6 +452,7 @@
         check(value, **check_kwargs)
 
     def test_roundtrip(self):
+        """ """
 
         # test value to string and back conversions
         # further test accessors
@@ -370,11 +480,23 @@
         assert result.microsecond == 5 + 200 * 1000
 
     def test_hash_equivalent(self):
+        """ """
         d = {datetime(2011, 1, 1): 5}
         stamp = Timestamp(datetime(2011, 1, 1))
         assert d[stamp] == 5
 
     def test_tz_conversion_freq(self, tz_naive_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+
+        Returns
+        -------
+
+        """
         # GH25241
         t1 = Timestamp("2019-01-01 10:00", freq="H")
         assert t1.tz_localize(tz=tz_naive_fixture).freq == t1.freq
@@ -383,7 +505,9 @@
 
 
 class TestTimestampNsOperations:
+    """ """
     def test_nanosecond_string_parsing(self):
+        """ """
         ts = Timestamp("2013-05-01 07:15:45.123456789")
         # GH 7878
         expected_repr = "2013-05-01 07:15:45.123456789"
@@ -409,6 +533,7 @@
         assert expected_repr in repr(ts)
 
     def test_nanosecond_timestamp(self):
+        """ """
         # GH 7610
         expected = 1_293_840_000_000_000_005
         t = Timestamp("2011-01-01") + offsets.Nano(5)
@@ -444,29 +569,37 @@
 
 
 class TestTimestampToJulianDate:
+    """ """
     def test_compare_1700(self):
+        """ """
         r = Timestamp("1700-06-23").to_julian_date()
         assert r == 2_342_145.5
 
     def test_compare_2000(self):
+        """ """
         r = Timestamp("2000-04-12").to_julian_date()
         assert r == 2_451_646.5
 
     def test_compare_2100(self):
+        """ """
         r = Timestamp("2100-08-12").to_julian_date()
         assert r == 2_488_292.5
 
     def test_compare_hour01(self):
+        """ """
         r = Timestamp("2000-08-12T01:00:00").to_julian_date()
         assert r == 2_451_768.5416666666666666
 
     def test_compare_hour13(self):
+        """ """
         r = Timestamp("2000-08-12T13:00:00").to_julian_date()
         assert r == 2_451_769.0416666666666666
 
 
 class TestTimestampConversion:
+    """ """
     def test_conversion(self):
+        """ """
         # GH#9255
         ts = Timestamp("2000-01-01")
 
@@ -482,6 +615,7 @@
         assert result.dtype == expected.dtype
 
     def test_to_pydatetime_nonzero_nano(self):
+        """ """
         ts = Timestamp("2011-01-01 9:00:00.123456789")
 
         # Warn the user of data loss (nanoseconds).
@@ -491,18 +625,21 @@
             assert result == expected
 
     def test_timestamp_to_datetime(self):
+        """ """
         stamp = Timestamp("20090415", tz="US/Eastern", freq="D")
         dtval = stamp.to_pydatetime()
         assert stamp == dtval
         assert stamp.tzinfo == dtval.tzinfo
 
     def test_timestamp_to_datetime_dateutil(self):
+        """ """
         stamp = Timestamp("20090415", tz="dateutil/US/Eastern", freq="D")
         dtval = stamp.to_pydatetime()
         assert stamp == dtval
         assert stamp.tzinfo == dtval.tzinfo
 
     def test_timestamp_to_datetime_explicit_pytz(self):
+        """ """
         stamp = Timestamp("20090415", tz=pytz.timezone("US/Eastern"), freq="D")
         dtval = stamp.to_pydatetime()
         assert stamp == dtval
@@ -510,12 +647,14 @@
 
     @td.skip_if_windows_python_3
     def test_timestamp_to_datetime_explicit_dateutil(self):
+        """ """
         stamp = Timestamp("20090415", tz=gettz("US/Eastern"), freq="D")
         dtval = stamp.to_pydatetime()
         assert stamp == dtval
         assert stamp.tzinfo == dtval.tzinfo
 
     def test_to_datetime_bijective(self):
+        """ """
         # Ensure that converting to datetime and back only loses precision
         # by going from nanoseconds to microseconds.
         exp_warning = None if Timestamp.max.nanosecond == 0 else UserWarning
@@ -533,6 +672,7 @@
             )
 
     def test_to_period_tz_warning(self):
+        """ """
         # GH#21333 make sure a warning is issued when timezone
         # info is lost
         ts = Timestamp("2009-04-15 16:17:18", tz="US/Eastern")
@@ -541,12 +681,14 @@
             ts.to_period("D")
 
     def test_to_numpy_alias(self):
+        """ """
         # GH 24653: alias .to_numpy() for scalars
         ts = Timestamp(datetime.now())
         assert ts.to_datetime64() == ts.to_numpy()
 
 
 class SubDatetime(datetime):
+    """ """
     pass
 
 
@@ -558,6 +700,19 @@
     ],
 )
 def test_dt_subclass_add_timedelta(lh, rh):
+    """
+
+    Parameters
+    ----------
+    lh :
+        
+    rh :
+        
+
+    Returns
+    -------
+
+    """
     # GH#25851
     # ensure that subclassed datetime works for
     # Timedelta operations
