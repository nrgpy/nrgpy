# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/requests_toolbelt/threaded/pool.py
+++ b/..//venv/lib/python3.8/site-packages/requests_toolbelt/threaded/pool.py
@@ -9,19 +9,23 @@
 class Pool(object):
     """Pool that manages the threads containing sessions.
 
-    :param queue:
+    Parameters
+    ----------
+    queue : queue: queue.Queue
         The queue you're expected to use to which you should add items.
-    :type queue: queue.Queue
-    :param initializer:
+    initializer : collections.Callable
         Function used to initialize an instance of ``session``.
-    :type initializer: collections.Callable
-    :param auth_generator:
+    auth_generator : collections.Callable
         Function used to generate new auth credentials for the session.
-    :type auth_generator: collections.Callable
-    :param int num_process:
+    int :
+        num_process:
         Number of threads to create.
-    :param session:
-    :type session: requests.Session
+    session :
+        type session: requests.Session
+
+    Returns
+    -------
+
     """
 
     def __init__(self, job_queue, initializer=None, auth_generator=None,
@@ -46,24 +50,30 @@
         ]
 
     def _new_session(self):
+        """ """
         return self._auth(self._initializer(self._session()))
 
     @classmethod
     def from_exceptions(cls, exceptions, **kwargs):
-        r"""Create a :class:`~Pool` from an :class:`~ThreadException`\ s.
-
+        """r"""Create a :class:`~Pool` from an :class:`~ThreadException`\ s.
+        
         Provided an iterable that provides :class:`~ThreadException` objects,
         this classmethod will generate a new pool to retry the requests that
         caused the exceptions.
 
-        :param exceptions:
+        Parameters
+        ----------
+        exceptions : iterable
             Iterable that returns :class:`~ThreadException`
-        :type exceptions: iterable
-        :param kwargs:
+        kwargs :
             Keyword arguments passed to the :class:`~Pool` initializer.
-        :returns: An initialized :class:`~Pool` object.
-        :rtype: :class:`~Pool`
-        """
+        **kwargs :
+            
+
+        Returns
+        -------
+        class:`~Pool`
+            An initialized :class:`~Pool` object.
         job_queue = queue.Queue()
         for exc in exceptions:
             job_queue.put(exc.request_kwargs)
@@ -74,16 +84,26 @@
     def from_urls(cls, urls, request_kwargs=None, **kwargs):
         """Create a :class:`~Pool` from an iterable of URLs.
 
-        :param urls:
+        Parameters
+        ----------
+        urls : iterable
             Iterable that returns URLs with which we create a pool.
-        :type urls: iterable
-        :param dict request_kwargs:
+        dict :
+            request_kwargs:
             Dictionary of other keyword arguments to provide to the request
             method.
-        :param kwargs:
+        kwargs :
             Keyword arguments passed to the :class:`~Pool` initializer.
-        :returns: An initialized :class:`~Pool` object.
-        :rtype: :class:`~Pool`
+        request_kwargs :
+             (Default value = None)
+        **kwargs :
+            
+
+        Returns
+        -------
+        class:`~Pool`
+            An initialized :class:`~Pool` object.
+
         """
         request_dict = {'method': 'GET'}
         request_dict.update(request_kwargs or {})
@@ -98,7 +118,14 @@
     def exceptions(self):
         """Iterate over all the exceptions in the pool.
 
-        :returns: Generator of :class:`~ThreadException`
+        Parameters
+        ----------
+
+        Returns
+        -------
+        type
+            Generator of :class:`~ThreadException`
+
         """
         while True:
             exc = self.get_exception()
@@ -107,10 +134,7 @@
             yield exc
 
     def get_exception(self):
-        """Get an exception from the pool.
-
-        :rtype: :class:`~ThreadException`
-        """
+        """Get an exception from the pool."""
         try:
             (request, exc) = self._exc_queue.get_nowait()
         except queue.Empty:
@@ -119,10 +143,7 @@
             return ThreadException(request, exc)
 
     def get_response(self):
-        """Get a response from the pool.
-
-        :rtype: :class:`~ThreadResponse`
-        """
+        """Get a response from the pool."""
         try:
             (request, response) = self._response_queue.get_nowait()
         except queue.Empty:
@@ -133,7 +154,14 @@
     def responses(self):
         """Iterate over all the responses in the pool.
 
-        :returns: Generator of :class:`~ThreadResponse`
+        Parameters
+        ----------
+
+        Returns
+        -------
+        type
+            Generator of :class:`~ThreadResponse`
+
         """
         while True:
             resp = self.get_response()
@@ -148,6 +176,7 @@
 
 
 class ThreadProxy(object):
+    """ """
     proxied_attr = None
 
     def __getattr__(self, attr):
@@ -162,14 +191,20 @@
 
 class ThreadResponse(ThreadProxy):
     """A wrapper around a requests Response object.
-
+    
     This will proxy most attribute access actions to the Response object. For
     example, if you wanted the parsed JSON from the response, you might do:
-
+    
     .. code-block:: python
-
+    
         thread_response = pool.get_response()
         json = thread_response.json()
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     """
     proxied_attr = 'response'
@@ -184,14 +219,20 @@
 
 class ThreadException(ThreadProxy):
     """A wrapper around an exception raised during a request.
-
+    
     This will proxy most attribute access actions to the exception object. For
     example, if you wanted the message from the exception, you might do:
-
+    
     .. code-block:: python
-
+    
         thread_exc = pool.get_exception()
         msg = thread_exc.message
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     """
     proxied_attr = 'exception'
@@ -205,6 +246,17 @@
 
 
 def _identity(session_obj):
+    """
+
+    Parameters
+    ----------
+    session_obj :
+        
+
+    Returns
+    -------
+
+    """
     return session_obj
 
 
