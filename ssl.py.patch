# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/requests_toolbelt/adapters/ssl.py
+++ b/..//venv/lib/python3.8/site-packages/requests_toolbelt/adapters/ssl.py
@@ -17,30 +17,36 @@
 
 
 class SSLAdapter(HTTPAdapter):
-    """
-    A HTTPS Adapter for Python Requests that allows the choice of the SSL/TLS
+    """A HTTPS Adapter for Python Requests that allows the choice of the SSL/TLS
     version negotiated by Requests. This can be used either to enforce the
     choice of high-security TLS versions (where supported), or to work around
     misbehaving servers that fail to correctly negotiate the default TLS
     version being offered.
-
+    
     Example usage:
-
-        >>> import requests
-        >>> import ssl
-        >>> from requests_toolbelt import SSLAdapter
-        >>> s = requests.Session()
-        >>> s.mount('https://', SSLAdapter(ssl.PROTOCOL_TLSv1))
-
+    
+    
     You can replace the chosen protocol with any that are available in the
     default Python SSL module. All subsequent requests that match the adapter
     prefix will use the chosen SSL version instead of the default.
-
+    
     This adapter will also attempt to change the SSL/TLS version negotiated by
     Requests when using a proxy. However, this may not always be possible:
     prior to Requests v2.4.0 the adapter did not have access to the proxy setup
     code. In earlier versions of Requests, this adapter will not function
     properly when used with proxies.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    >>> import requests
+        >>> import ssl
+        >>> from requests_toolbelt import SSLAdapter
+        >>> s = requests.Session()
+        >>> s.mount('https://', SSLAdapter(ssl.PROTOCOL_TLSv1))
     """
 
     __attrs__ = HTTPAdapter.__attrs__ + ['ssl_version']
@@ -51,6 +57,21 @@
         super(SSLAdapter, self).__init__(**kwargs)
 
     def init_poolmanager(self, connections, maxsize, block=False):
+        """
+
+        Parameters
+        ----------
+        connections :
+            
+        maxsize :
+            
+        block :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         self.poolmanager = poolmanager.PoolManager(
             num_pools=connections,
             maxsize=maxsize,
@@ -62,5 +83,18 @@
         # don't allow passing arbitrary keyword arguments. As a result, only
         # conditionally define this method.
         def proxy_manager_for(self, *args, **kwargs):
+            """
+
+            Parameters
+            ----------
+            *args :
+                
+            **kwargs :
+                
+
+            Returns
+            -------
+
+            """
             kwargs['ssl_version'] = self.ssl_version
             return super(SSLAdapter, self).proxy_manager_for(*args, **kwargs)
