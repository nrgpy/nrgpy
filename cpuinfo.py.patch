# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/distutils/cpuinfo.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/distutils/cpuinfo.py
@@ -25,6 +25,23 @@
 
 
 def getoutput(cmd, successful_status=(0,), stacklevel=1):
+    """
+
+    Parameters
+    ----------
+    cmd :
+        
+    successful_status :
+         (Default value = (0)
+    ) :
+        
+    stacklevel :
+         (Default value = 1)
+
+    Returns
+    -------
+
+    """
     try:
         status, output = getstatusoutput(cmd)
     except EnvironmentError as e:
@@ -35,6 +52,23 @@
     return False, output
 
 def command_info(successful_status=(0,), stacklevel=1, **kw):
+    """
+
+    Parameters
+    ----------
+    successful_status :
+         (Default value = (0)
+    ) :
+        
+    stacklevel :
+         (Default value = 1)
+    **kw :
+        
+
+    Returns
+    -------
+
+    """
     info = {}
     for key in kw:
         ok, output = getoutput(kw[key], successful_status=successful_status,
@@ -44,6 +78,23 @@
     return info
 
 def command_by_line(cmd, successful_status=(0,), stacklevel=1):
+    """
+
+    Parameters
+    ----------
+    cmd :
+        
+    successful_status :
+         (Default value = (0)
+    ) :
+        
+    stacklevel :
+         (Default value = 1)
+
+    Returns
+    -------
+
+    """
     ok, output = getoutput(cmd, successful_status=successful_status,
                            stacklevel=stacklevel+1)
     if not ok:
@@ -53,6 +104,25 @@
 
 def key_value_from_command(cmd, sep, successful_status=(0,),
                            stacklevel=1):
+    """
+
+    Parameters
+    ----------
+    cmd :
+        
+    sep :
+        
+    successful_status :
+         (Default value = (0)
+    ) :
+        
+    stacklevel :
+         (Default value = 1)
+
+    Returns
+    -------
+
+    """
     d = {}
     for line in command_by_line(cmd, successful_status=successful_status,
                                 stacklevel=stacklevel+1):
@@ -64,9 +134,27 @@
 class CPUInfoBase:
     """Holds CPU information and provides methods for requiring
     the availability of various CPU features.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def _try_call(self, func):
+        """
+
+        Parameters
+        ----------
+        func :
+            
+
+        Returns
+        -------
+
+        """
         try:
             return func()
         except Exception:
@@ -83,6 +171,7 @@
         raise AttributeError(name)
 
     def _getNCPUs(self):
+        """ """
         return 1
 
     def __get_nbits(self):
@@ -91,12 +180,15 @@
         return nbits
 
     def _is_32bit(self):
+        """ """
         return self.__get_nbits() == '32'
 
     def _is_64bit(self):
+        """ """
         return self.__get_nbits() == '64'
 
 class LinuxCPUInfo(CPUInfoBase):
+    """ """
 
     info = None
 
@@ -128,58 +220,84 @@
     # Athlon
 
     def _is_AMD(self):
+        """
+
+        Parameters
+        ----------
+        self): pass# Athlon_is_AMD(self :
+            
+
+        Returns
+        -------
+
+        """
         return self.info[0]['vendor_id']=='AuthenticAMD'
 
     def _is_AthlonK6_2(self):
+        """ """
         return self._is_AMD() and self.info[0]['model'] == '2'
 
     def _is_AthlonK6_3(self):
+        """ """
         return self._is_AMD() and self.info[0]['model'] == '3'
 
     def _is_AthlonK6(self):
+        """ """
         return re.match(r'.*?AMD-K6', self.info[0]['model name']) is not None
 
     def _is_AthlonK7(self):
+        """ """
         return re.match(r'.*?AMD-K7', self.info[0]['model name']) is not None
 
     def _is_AthlonMP(self):
+        """ """
         return re.match(r'.*?Athlon\(tm\) MP\b',
                         self.info[0]['model name']) is not None
 
     def _is_AMD64(self):
+        """ """
         return self.is_AMD() and self.info[0]['family'] == '15'
 
     def _is_Athlon64(self):
+        """ """
         return re.match(r'.*?Athlon\(tm\) 64\b',
                         self.info[0]['model name']) is not None
 
     def _is_AthlonHX(self):
+        """ """
         return re.match(r'.*?Athlon HX\b',
                         self.info[0]['model name']) is not None
 
     def _is_Opteron(self):
+        """ """
         return re.match(r'.*?Opteron\b',
                         self.info[0]['model name']) is not None
 
     def _is_Hammer(self):
+        """ """
         return re.match(r'.*?Hammer\b',
                         self.info[0]['model name']) is not None
 
     # Alpha
 
     def _is_Alpha(self):
+        """ """
         return self.info[0]['cpu']=='Alpha'
 
     def _is_EV4(self):
+        """ """
         return self.is_Alpha() and self.info[0]['cpu model'] == 'EV4'
 
     def _is_EV5(self):
+        """ """
         return self.is_Alpha() and self.info[0]['cpu model'] == 'EV5'
 
     def _is_EV56(self):
+        """ """
         return self.is_Alpha() and self.info[0]['cpu model'] == 'EV56'
 
     def _is_PCA56(self):
+        """ """
         return self.is_Alpha() and self.info[0]['cpu model'] == 'PCA56'
 
     # Intel
@@ -188,53 +306,67 @@
     _is_i386 = _not_impl
 
     def _is_Intel(self):
+        """ """
         return self.info[0]['vendor_id']=='GenuineIntel'
 
     def _is_i486(self):
+        """ """
         return self.info[0]['cpu']=='i486'
 
     def _is_i586(self):
+        """ """
         return self.is_Intel() and self.info[0]['cpu family'] == '5'
 
     def _is_i686(self):
+        """ """
         return self.is_Intel() and self.info[0]['cpu family'] == '6'
 
     def _is_Celeron(self):
+        """ """
         return re.match(r'.*?Celeron',
                         self.info[0]['model name']) is not None
 
     def _is_Pentium(self):
+        """ """
         return re.match(r'.*?Pentium',
                         self.info[0]['model name']) is not None
 
     def _is_PentiumII(self):
+        """ """
         return re.match(r'.*?Pentium.*?II\b',
                         self.info[0]['model name']) is not None
 
     def _is_PentiumPro(self):
+        """ """
         return re.match(r'.*?PentiumPro\b',
                         self.info[0]['model name']) is not None
 
     def _is_PentiumMMX(self):
+        """ """
         return re.match(r'.*?Pentium.*?MMX\b',
                         self.info[0]['model name']) is not None
 
     def _is_PentiumIII(self):
+        """ """
         return re.match(r'.*?Pentium.*?III\b',
                         self.info[0]['model name']) is not None
 
     def _is_PentiumIV(self):
+        """ """
         return re.match(r'.*?Pentium.*?(IV|4)\b',
                         self.info[0]['model name']) is not None
 
     def _is_PentiumM(self):
+        """ """
         return re.match(r'.*?Pentium.*?M\b',
                         self.info[0]['model name']) is not None
 
     def _is_Prescott(self):
+        """ """
         return self.is_PentiumIV() and self.has_sse3()
 
     def _is_Nocona(self):
+        """ """
         return (self.is_Intel()
                 and (self.info[0]['cpu family'] == '6'
                      or self.info[0]['cpu family'] == '15')
@@ -242,15 +374,18 @@
                 and re.match(r'.*?\blm\b', self.info[0]['flags']) is not None)
 
     def _is_Core2(self):
+        """ """
         return (self.is_64bit() and self.is_Intel() and
                 re.match(r'.*?Core\(TM\)2\b',
                          self.info[0]['model name']) is not None)
 
     def _is_Itanium(self):
+        """ """
         return re.match(r'.*?Itanium\b',
                         self.info[0]['family']) is not None
 
     def _is_XEON(self):
+        """ """
         return re.match(r'.*?XEON\b',
                         self.info[0]['model name'], re.IGNORECASE) is not None
 
@@ -259,39 +394,51 @@
     # Varia
 
     def _is_singleCPU(self):
+        """ """
         return len(self.info) == 1
 
     def _getNCPUs(self):
+        """ """
         return len(self.info)
 
     def _has_fdiv_bug(self):
+        """ """
         return self.info[0]['fdiv_bug']=='yes'
 
     def _has_f00f_bug(self):
+        """ """
         return self.info[0]['f00f_bug']=='yes'
 
     def _has_mmx(self):
+        """ """
         return re.match(r'.*?\bmmx\b', self.info[0]['flags']) is not None
 
     def _has_sse(self):
+        """ """
         return re.match(r'.*?\bsse\b', self.info[0]['flags']) is not None
 
     def _has_sse2(self):
+        """ """
         return re.match(r'.*?\bsse2\b', self.info[0]['flags']) is not None
 
     def _has_sse3(self):
+        """ """
         return re.match(r'.*?\bpni\b', self.info[0]['flags']) is not None
 
     def _has_ssse3(self):
+        """ """
         return re.match(r'.*?\bssse3\b', self.info[0]['flags']) is not None
 
     def _has_3dnow(self):
+        """ """
         return re.match(r'.*?\b3dnow\b', self.info[0]['flags']) is not None
 
     def _has_3dnowext(self):
+        """ """
         return re.match(r'.*?\b3dnowext\b', self.info[0]['flags']) is not None
 
 class IRIXCPUInfo(CPUInfoBase):
+    """ """
     info = None
 
     def __init__(self):
@@ -304,9 +451,21 @@
     def _not_impl(self): pass
 
     def _is_singleCPU(self):
+        """
+
+        Parameters
+        ----------
+        self): pass_is_singleCPU(self :
+            
+
+        Returns
+        -------
+
+        """
         return self.info.get('NUM_PROCESSORS') == '1'
 
     def _getNCPUs(self):
+        """ """
         return int(self.info.get('NUM_PROCESSORS', 1))
 
     def __cputype(self, n):
@@ -328,6 +487,17 @@
     def _is_rorion(self): return self.__cputype('orion')
 
     def get_ip(self):
+        """
+
+        Parameters
+        ----------
+        self): return self.__cputype(2000)_is_r3000(self): return self.__cputype(3000)_is_r3900(self): return self.__cputype(3900)_is_r4000(self): return self.__cputype(4000)_is_r4100(self): return self.__cputype(4100)_is_r4300(self): return self.__cputype(4300)_is_r4400(self): return self.__cputype(4400)_is_r4600(self): return self.__cputype(4600)_is_r4650(self): return self.__cputype(4650)_is_r5000(self): return self.__cputype(5000)_is_r6000(self): return self.__cputype(6000)_is_r8000(self): return self.__cputype(8000)_is_r10000(self): return self.__cputype(10000)_is_r12000(self): return self.__cputype(12000)_is_rorion(self): return self.__cputype('orion')get_ip(self :
+            
+
+        Returns
+        -------
+
+        """
         try: return self.info.get('MACHINE')
         except Exception: pass
     def __machine(self, n):
@@ -350,6 +520,17 @@
 
 
 class DarwinCPUInfo(CPUInfoBase):
+        """
+
+        Parameters
+        ----------
+        self): return self.__machine(19)_is_IP20(self): return self.__machine(20)_is_IP21(self): return self.__machine(21)_is_IP22(self): return self.__machine(22)_is_IP22_4k(self): return self.__machine(22) and self._is_r4000()_is_IP22_5k(self): return self.__machine(22)  and self._is_r5000()_is_IP24(self): return self.__machine(24)_is_IP25(self): return self.__machine(25)_is_IP26(self): return self.__machine(26)_is_IP27(self): return self.__machine(27)_is_IP28(self): return self.__machine(28)_is_IP30(self): return self.__machine(30)_is_IP32(self): return self.__machine(32)_is_IP32_5k(self): return self.__machine(32) and self._is_r5000()_is_IP32_10k(self): return self.__machine(32) and self._is_r10000()class DarwinCPUInfo(CPUInfoBase :
+            
+
+        Returns
+        -------
+
+        """
     info = None
 
     def __init__(self):
@@ -363,14 +544,28 @@
     def _not_impl(self): pass
 
     def _getNCPUs(self):
+        """
+
+        Parameters
+        ----------
+        self): pass_getNCPUs(self :
+            
+
+        Returns
+        -------
+
+        """
         return int(self.info['sysctl_hw'].get('hw.ncpu', 1))
 
     def _is_Power_Macintosh(self):
+        """ """
         return self.info['sysctl_hw']['hw.machine']=='Power Macintosh'
 
     def _is_i386(self):
+        """ """
         return self.info['arch']=='i386'
     def _is_ppc(self):
+        """ """
         return self.info['arch']=='ppc'
 
     def __machine(self, n):
@@ -396,6 +591,17 @@
 
 
 class SunOSCPUInfo(CPUInfoBase):
+        """
+
+        Parameters
+        ----------
+        self): return self.__machine(601)_is_ppc602(self): return self.__machine(602)_is_ppc603(self): return self.__machine(603)_is_ppc603e(self): return self.__machine('603e')_is_ppc604(self): return self.__machine(604)_is_ppc604e(self): return self.__machine('604e')_is_ppc620(self): return self.__machine(620)_is_ppc630(self): return self.__machine(630)_is_ppc740(self): return self.__machine(740)_is_ppc7400(self): return self.__machine(7400)_is_ppc7450(self): return self.__machine(7450)_is_ppc750(self): return self.__machine(750)_is_ppc403(self): return self.__machine(403)_is_ppc505(self): return self.__machine(505)_is_ppc801(self): return self.__machine(801)_is_ppc821(self): return self.__machine(821)_is_ppc823(self): return self.__machine(823)_is_ppc860(self): return self.__machine(860)class SunOSCPUInfo(CPUInfoBase :
+            
+
+        Returns
+        -------
+
+        """
 
     info = None
 
@@ -419,57 +625,91 @@
     def _not_impl(self): pass
 
     def _is_i386(self):
+        """
+
+        Parameters
+        ----------
+        self): pass_is_i386(self :
+            
+
+        Returns
+        -------
+
+        """
         return self.info['isainfo_n']=='i386'
     def _is_sparc(self):
+        """ """
         return self.info['isainfo_n']=='sparc'
     def _is_sparcv9(self):
+        """ """
         return self.info['isainfo_n']=='sparcv9'
 
     def _getNCPUs(self):
+        """ """
         return int(self.info['uname_X'].get('NumCPU', 1))
 
     def _is_sun4(self):
+        """ """
         return self.info['arch']=='sun4'
 
     def _is_SUNW(self):
+        """ """
         return re.match(r'SUNW', self.info['uname_i']) is not None
     def _is_sparcstation5(self):
+        """ """
         return re.match(r'.*SPARCstation-5', self.info['uname_i']) is not None
     def _is_ultra1(self):
+        """ """
         return re.match(r'.*Ultra-1', self.info['uname_i']) is not None
     def _is_ultra250(self):
+        """ """
         return re.match(r'.*Ultra-250', self.info['uname_i']) is not None
     def _is_ultra2(self):
+        """ """
         return re.match(r'.*Ultra-2', self.info['uname_i']) is not None
     def _is_ultra30(self):
+        """ """
         return re.match(r'.*Ultra-30', self.info['uname_i']) is not None
     def _is_ultra4(self):
+        """ """
         return re.match(r'.*Ultra-4', self.info['uname_i']) is not None
     def _is_ultra5_10(self):
+        """ """
         return re.match(r'.*Ultra-5_10', self.info['uname_i']) is not None
     def _is_ultra5(self):
+        """ """
         return re.match(r'.*Ultra-5', self.info['uname_i']) is not None
     def _is_ultra60(self):
+        """ """
         return re.match(r'.*Ultra-60', self.info['uname_i']) is not None
     def _is_ultra80(self):
+        """ """
         return re.match(r'.*Ultra-80', self.info['uname_i']) is not None
     def _is_ultraenterprice(self):
+        """ """
         return re.match(r'.*Ultra-Enterprise', self.info['uname_i']) is not None
     def _is_ultraenterprice10k(self):
+        """ """
         return re.match(r'.*Ultra-Enterprise-10000', self.info['uname_i']) is not None
     def _is_sunfire(self):
+        """ """
         return re.match(r'.*Sun-Fire', self.info['uname_i']) is not None
     def _is_ultra(self):
+        """ """
         return re.match(r'.*Ultra', self.info['uname_i']) is not None
 
     def _is_cpusparcv7(self):
+        """ """
         return self.info['processor']=='sparcv7'
     def _is_cpusparcv8(self):
+        """ """
         return self.info['processor']=='sparcv8'
     def _is_cpusparcv9(self):
+        """ """
         return self.info['processor']=='sparcv9'
 
 class Win32CPUInfo(CPUInfoBase):
+    """ """
 
     info = None
     pkey = r"HARDWARE\DESCRIPTION\System\CentralProcessor"
@@ -522,31 +762,49 @@
     # Athlon
 
     def _is_AMD(self):
+        """
+
+        Parameters
+        ----------
+        self): pass# Athlon_is_AMD(self :
+            
+
+        Returns
+        -------
+
+        """
         return self.info[0]['VendorIdentifier']=='AuthenticAMD'
 
     def _is_Am486(self):
+        """ """
         return self.is_AMD() and self.info[0]['Family']==4
 
     def _is_Am5x86(self):
+        """ """
         return self.is_AMD() and self.info[0]['Family']==4
 
     def _is_AMDK5(self):
+        """ """
         return self.is_AMD() and self.info[0]['Family']==5 \
                and self.info[0]['Model'] in [0, 1, 2, 3]
 
     def _is_AMDK6(self):
+        """ """
         return self.is_AMD() and self.info[0]['Family']==5 \
                and self.info[0]['Model'] in [6, 7]
 
     def _is_AMDK6_2(self):
+        """ """
         return self.is_AMD() and self.info[0]['Family']==5 \
                and self.info[0]['Model']==8
 
     def _is_AMDK6_3(self):
+        """ """
         return self.is_AMD() and self.info[0]['Family']==5 \
                and self.info[0]['Model']==9
 
     def _is_AMDK7(self):
+        """ """
         return self.is_AMD() and self.info[0]['Family'] == 6
 
     # To reliably distinguish between the different types of AMD64 chips
@@ -554,64 +812,81 @@
     # require looking at the 'brand' from cpuid
 
     def _is_AMD64(self):
+        """ """
         return self.is_AMD() and self.info[0]['Family'] == 15
 
     # Intel
 
     def _is_Intel(self):
+        """ """
         return self.info[0]['VendorIdentifier']=='GenuineIntel'
 
     def _is_i386(self):
+        """ """
         return self.info[0]['Family']==3
 
     def _is_i486(self):
+        """ """
         return self.info[0]['Family']==4
 
     def _is_i586(self):
+        """ """
         return self.is_Intel() and self.info[0]['Family']==5
 
     def _is_i686(self):
+        """ """
         return self.is_Intel() and self.info[0]['Family']==6
 
     def _is_Pentium(self):
+        """ """
         return self.is_Intel() and self.info[0]['Family']==5
 
     def _is_PentiumMMX(self):
+        """ """
         return self.is_Intel() and self.info[0]['Family']==5 \
                and self.info[0]['Model']==4
 
     def _is_PentiumPro(self):
+        """ """
         return self.is_Intel() and self.info[0]['Family']==6 \
                and self.info[0]['Model']==1
 
     def _is_PentiumII(self):
+        """ """
         return self.is_Intel() and self.info[0]['Family']==6 \
                and self.info[0]['Model'] in [3, 5, 6]
 
     def _is_PentiumIII(self):
+        """ """
         return self.is_Intel() and self.info[0]['Family']==6 \
                and self.info[0]['Model'] in [7, 8, 9, 10, 11]
 
     def _is_PentiumIV(self):
+        """ """
         return self.is_Intel() and self.info[0]['Family']==15
 
     def _is_PentiumM(self):
+        """ """
         return self.is_Intel() and self.info[0]['Family'] == 6 \
                and self.info[0]['Model'] in [9, 13, 14]
 
     def _is_Core2(self):
+        """ """
         return self.is_Intel() and self.info[0]['Family'] == 6 \
                and self.info[0]['Model'] in [15, 16, 17]
 
     # Varia
 
     def _is_singleCPU(self):
+        """ """
         return len(self.info) == 1
 
     def _getNCPUs(self):
+        """ """
         return len(self.info)
 
     def _has_mmx(self):
+        """ """
         if self.is_Intel():
             return (self.info[0]['Family']==5 and self.info[0]['Model']==4) \
                    or (self.info[0]['Family'] in [6, 15])
@@ -621,6 +896,7 @@
             return False
 
     def _has_sse(self):
+        """ """
         if self.is_Intel():
             return ((self.info[0]['Family']==6 and
                      self.info[0]['Model'] in [7, 8, 9, 10, 11])
@@ -633,6 +909,7 @@
             return False
 
     def _has_sse2(self):
+        """ """
         if self.is_Intel():
             return self.is_Pentium4() or self.is_PentiumM() \
                    or self.is_Core2()
@@ -642,9 +919,11 @@
             return False
 
     def _has_3dnow(self):
+        """ """
         return self.is_AMD() and self.info[0]['Family'] in [5, 6, 15]
 
     def _has_3dnowext(self):
+        """ """
         return self.is_AMD() and self.info[0]['Family'] in [6, 15]
 
 if sys.platform.startswith('linux'): # variations: linux2,linux-i386 (any others?)
