# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/window/expanding.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/window/expanding.py
@@ -9,8 +9,7 @@
 
 
 class Expanding(_Rolling_and_Expanding):
-    """
-    Provide expanding transformations.
+    """Provide expanding transformations.
 
     Parameters
     ----------
@@ -20,21 +19,21 @@
     center : bool, default False
         Set the labels at the center of the window.
     axis : int or str, default 0
+        
 
     Returns
     -------
     a Window sub-classed for the particular operation
+        
 
     See Also
     --------
     rolling : Provides rolling window calculations.
     ewm : Provides exponential weighted functions.
-
     Notes
     -----
     By default, the result is set to the right edge of the window. This can be
     changed to the center of the window by setting ``center=True``.
-
     Examples
     --------
     >>> df = pd.DataFrame({"B": [0, 1, 2, np.nan, 4]})
@@ -45,7 +44,7 @@
     2  2.0
     3  NaN
     4  4.0
-
+    
     >>> df.expanding(2).sum()
          B
     0  NaN
@@ -62,22 +61,24 @@
 
     @property
     def _constructor(self):
+        """ """
         return Expanding
 
     def _get_window(self, other=None, **kwargs):
-        """
-        Get the window length over which to perform some operation.
+        """Get the window length over which to perform some operation.
 
         Parameters
         ----------
         other : object, default None
             The other object that is involved in the operation.
-            Such an object is involved for operations like covariance.
-
-        Returns
-        -------
-        window : int
-            The window length.
+            Such an object is involved for operations like covariance. (Default value = None)
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        
         """
         axis = self.obj._get_axis(self.axis)
         length = len(axis) + (other is not None) * len(axis)
@@ -122,6 +123,21 @@
         axis="",
     )
     def aggregate(self, func, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        func :
+            
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         return super().aggregate(func, *args, **kwargs)
 
     agg = aggregate
@@ -129,6 +145,17 @@
     @Substitution(name="expanding")
     @Appender(_shared_docs["count"])
     def count(self, **kwargs):
+        """
+
+        Parameters
+        ----------
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         return super().count(**kwargs)
 
     @Substitution(name="expanding")
@@ -142,6 +169,29 @@
         args=None,
         kwargs=None,
     ):
+        """
+
+        Parameters
+        ----------
+        func :
+            
+        raw: bool :
+             (Default value = False)
+        engine: Optional[str] :
+             (Default value = None)
+        engine_kwargs: Optional[Dict[str :
+            
+        bool]] :
+             (Default value = None)
+        args :
+             (Default value = None)
+        kwargs :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         return super().apply(
             func,
             raw=raw,
@@ -154,6 +204,19 @@
     @Substitution(name="expanding")
     @Appender(_shared_docs["sum"])
     def sum(self, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         nv.validate_expanding_func("sum", args, kwargs)
         return super().sum(*args, **kwargs)
 
@@ -161,35 +224,115 @@
     @Appender(_doc_template)
     @Appender(_shared_docs["max"])
     def max(self, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         nv.validate_expanding_func("max", args, kwargs)
         return super().max(*args, **kwargs)
 
     @Substitution(name="expanding")
     @Appender(_shared_docs["min"])
     def min(self, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         nv.validate_expanding_func("min", args, kwargs)
         return super().min(*args, **kwargs)
 
     @Substitution(name="expanding")
     @Appender(_shared_docs["mean"])
     def mean(self, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         nv.validate_expanding_func("mean", args, kwargs)
         return super().mean(*args, **kwargs)
 
     @Substitution(name="expanding")
     @Appender(_shared_docs["median"])
     def median(self, **kwargs):
+        """
+
+        Parameters
+        ----------
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         return super().median(**kwargs)
 
     @Substitution(name="expanding", versionadded="")
     @Appender(_shared_docs["std"])
     def std(self, ddof=1, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        ddof :
+             (Default value = 1)
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         nv.validate_expanding_func("std", args, kwargs)
         return super().std(ddof=ddof, **kwargs)
 
     @Substitution(name="expanding", versionadded="")
     @Appender(_shared_docs["var"])
     def var(self, ddof=1, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        ddof :
+             (Default value = 1)
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         nv.validate_expanding_func("var", args, kwargs)
         return super().var(ddof=ddof, **kwargs)
 
@@ -197,6 +340,17 @@
     @Appender(_doc_template)
     @Appender(_shared_docs["skew"])
     def skew(self, **kwargs):
+        """
+
+        Parameters
+        ----------
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         return super().skew(**kwargs)
 
     _agg_doc = dedent(
@@ -228,11 +382,37 @@
     @Substitution(name="expanding")
     @Appender(_shared_docs["kurt"])
     def kurt(self, **kwargs):
+        """
+
+        Parameters
+        ----------
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         return super().kurt(**kwargs)
 
     @Substitution(name="expanding")
     @Appender(_shared_docs["quantile"])
     def quantile(self, quantile, interpolation="linear", **kwargs):
+        """
+
+        Parameters
+        ----------
+        quantile :
+            
+        interpolation :
+             (Default value = "linear")
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         return super().quantile(
             quantile=quantile, interpolation=interpolation, **kwargs
         )
@@ -241,19 +421,50 @@
     @Appender(_doc_template)
     @Appender(_shared_docs["cov"])
     def cov(self, other=None, pairwise=None, ddof=1, **kwargs):
+        """
+
+        Parameters
+        ----------
+        other :
+             (Default value = None)
+        pairwise :
+             (Default value = None)
+        ddof :
+             (Default value = 1)
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         return super().cov(other=other, pairwise=pairwise, ddof=ddof, **kwargs)
 
     @Substitution(name="expanding")
     @Appender(_shared_docs["corr"])
     def corr(self, other=None, pairwise=None, **kwargs):
+        """
+
+        Parameters
+        ----------
+        other :
+             (Default value = None)
+        pairwise :
+             (Default value = None)
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         return super().corr(other=other, pairwise=pairwise, **kwargs)
 
 
 class ExpandingGroupby(WindowGroupByMixin, Expanding):
-    """
-    Provide a expanding groupby implementation.
-    """
+    """Provide a expanding groupby implementation."""
 
     @property
     def _constructor(self):
+        """ """
         return Expanding
