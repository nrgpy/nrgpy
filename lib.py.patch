# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/json5/lib.py
+++ b/..//venv/lib/python3.8/site-packages/json5/lib.py
@@ -31,13 +31,38 @@
          allow_duplicate_keys=True):
     """Deserialize ``fp`` (a ``.read()``-supporting file-like object
     containing a JSON document) to a Python object.
-
+    
     Supports almost the same arguments as ``json.load()`` except that:
         - the `cls` keyword is ignored.
         - an extra `allow_duplicate_keys` parameter supports checking for
           duplicate keys in a object; by default, this is True for
           compatibility with ``json.load()``, but if set to False and
           the object contains duplicate keys, a ValueError will be raised.
+
+    Parameters
+    ----------
+    fp :
+        
+    encoding :
+         (Default value = None)
+    cls :
+         (Default value = None)
+    object_hook :
+         (Default value = None)
+    parse_float :
+         (Default value = None)
+    parse_int :
+         (Default value = None)
+    parse_constant :
+         (Default value = None)
+    object_pairs_hook :
+         (Default value = None)
+    allow_duplicate_keys :
+         (Default value = True)
+
+    Returns
+    -------
+
     """
 
     s = fp.read()
@@ -53,13 +78,38 @@
           allow_duplicate_keys=True):
     """Deserialize ``s`` (a ``str`` or ``unicode`` instance containing a
     JSON5 document) to a Python object.
-
+    
     Supports the same arguments as ``json.load()`` except that:
         - the `cls` keyword is ignored.
         - an extra `allow_duplicate_keys` parameter supports checking for
           duplicate keys in a object; by default, this is True for
           compatibility with ``json.load()``, but if set to False and
           the object contains duplicate keys, a ValueError will be raised.
+
+    Parameters
+    ----------
+    s :
+        
+    encoding :
+         (Default value = None)
+    cls :
+         (Default value = None)
+    object_hook :
+         (Default value = None)
+    parse_float :
+         (Default value = None)
+    parse_int :
+         (Default value = None)
+    parse_constant :
+         (Default value = None)
+    object_pairs_hook :
+         (Default value = None)
+    allow_duplicate_keys :
+         (Default value = True)
+
+    Returns
+    -------
+
     """
 
     assert cls is None, 'Custom decoders are not supported'
@@ -80,6 +130,17 @@
         raise ValueError(err)
 
     def _fp_constant_parser(s):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+
+        Returns
+        -------
+
+        """
         return float(s.replace('Infinity', 'inf').replace('NaN', 'nan'))
 
     if object_pairs_hook:
@@ -101,6 +162,19 @@
 
 
 def _reject_duplicate_keys(pairs, dictify):
+    """
+
+    Parameters
+    ----------
+    pairs :
+        
+    dictify :
+        
+
+    Returns
+    -------
+
+    """
     keys = set()
     for key, _ in pairs:
         if key in keys:
@@ -109,6 +183,25 @@
     return dictify(pairs)
 
 def _walk_ast(el, dictify, parse_float, parse_int, parse_constant):
+    """
+
+    Parameters
+    ----------
+    el :
+        
+    dictify :
+        
+    parse_float :
+        
+    parse_int :
+        
+    parse_constant :
+        
+
+    Returns
+    -------
+
+    """
     if el == 'None':
         return None
     if el == 'True':
@@ -148,9 +241,9 @@
          **kwargs):
     """Serialize ``obj`` to a JSON5-formatted stream to ``fp`` (a ``.write()``-
     supporting file-like object).
-
+    
     Supports the same arguments as ``json.dumps()``, except that:
-
+    
     - The ``cls`` keyword is not supported.
     - The ``encoding`` keyword is ignored; Unicode strings are always written.
     - By default, object keys that are legal identifiers are not quoted;
@@ -166,10 +259,47 @@
       {1: "foo", "1": "bar"} produces '{"1": "foo", "1": "bar"}', an
       object with duplicated keys. If you pass allow_duplicate_keys=False,
       an exception will be raised instead.
-
+    
     Calling ``dumps(obj, fp, quote_keys=True, trailing_commas=False,
                     allow_duplicate_keys=True)``
     should produce exactly the same output as ``json.dumps(obj, fp).``
+
+    Parameters
+    ----------
+    obj :
+        
+    fp :
+        
+    skipkeys :
+         (Default value = False)
+    ensure_ascii :
+         (Default value = True)
+    check_circular :
+         (Default value = True)
+    allow_nan :
+         (Default value = True)
+    cls :
+         (Default value = None)
+    indent :
+         (Default value = None)
+    separators :
+         (Default value = None)
+    default :
+         (Default value = None)
+    sort_keys :
+         (Default value = False)
+    quote_keys :
+         (Default value = False)
+    trailing_commas :
+         (Default value = True)
+    allow_duplicate_keys :
+         (Default value = True)
+    **kwargs :
+        
+
+    Returns
+    -------
+
     """
 
     fp.write(str(dumps(obj=obj, skipkeys=skipkeys, ensure_ascii=ensure_ascii,
@@ -186,9 +316,9 @@
           quote_keys=False, trailing_commas=True, allow_duplicate_keys=True,
           **kwargs):
     """Serialize ``obj`` to a JSON5-formatted ``str``.
-
+    
     Supports the same arguments as ``json.dumps()``, except that:
-
+    
     - The ``cls`` keyword is not supported.
     - The ``encoding`` keyword is ignored; Unicode strings are always returned.
     - By default, object keys that are legal identifiers are not quoted;
@@ -204,11 +334,46 @@
       {1: "foo", "1": "bar"} produces '{"1": "foo", "1": "bar"}', an
       object with duplicated keys. If you pass ``allow_duplicate_keys=False``,
       an exception will be raised instead.
-
-
+    
+    
     Calling ``dumps(obj, quote_keys=True, trailing_commas=False,
                     allow_duplicate_keys=True)``
     should produce exactly the same output as ``json.dumps(obj).``
+
+    Parameters
+    ----------
+    obj :
+        
+    skipkeys :
+         (Default value = False)
+    ensure_ascii :
+         (Default value = True)
+    check_circular :
+         (Default value = True)
+    allow_nan :
+         (Default value = True)
+    cls :
+         (Default value = None)
+    indent :
+         (Default value = None)
+    separators :
+         (Default value = None)
+    default :
+         (Default value = None)
+    sort_keys :
+         (Default value = False)
+    quote_keys :
+         (Default value = False)
+    trailing_commas :
+         (Default value = True)
+    allow_duplicate_keys :
+         (Default value = True)
+    **kwargs :
+        
+
+    Returns
+    -------
+
     """
 
     assert kwargs.get('cls', None) is None, 'Custom encoders are not supported'
@@ -240,6 +405,45 @@
            separators, default, sort_keys,
            quote_keys, trailing_commas, allow_duplicate_keys,
            seen, level, is_key):
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+    skipkeys :
+        
+    ensure_ascii :
+        
+    check_circular :
+        
+    allow_nan :
+        
+    indent :
+        
+    separators :
+        
+    default :
+        
+    sort_keys :
+        
+    quote_keys :
+        
+    trailing_commas :
+        
+    allow_duplicate_keys :
+        
+    seen :
+        
+    level :
+        
+    is_key :
+        
+
+    Returns
+    -------
+
+    """
     s = None
     if obj is True:
         s = u'true'
@@ -326,6 +530,51 @@
                indent, separators, default, sort_keys,
                quote_keys, trailing_commas, allow_duplicate_keys,
                seen, level, item_sep, kv_sep, indent_str, end_str):
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+    skipkeys :
+        
+    ensure_ascii :
+        
+    check_circular :
+        
+    allow_nan :
+        
+    indent :
+        
+    separators :
+        
+    default :
+        
+    sort_keys :
+        
+    quote_keys :
+        
+    trailing_commas :
+        
+    allow_duplicate_keys :
+        
+    seen :
+        
+    level :
+        
+    item_sep :
+        
+    kv_sep :
+        
+    indent_str :
+        
+    end_str :
+        
+
+    Returns
+    -------
+
+    """
     if not obj:
         return u'{}'
 
@@ -371,6 +620,49 @@
                 indent, separators, default, sort_keys,
                 quote_keys, trailing_commas, allow_duplicate_keys,
                 seen, level, item_sep, indent_str, end_str):
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+    skipkeys :
+        
+    ensure_ascii :
+        
+    check_circular :
+        
+    allow_nan :
+        
+    indent :
+        
+    separators :
+        
+    default :
+        
+    sort_keys :
+        
+    quote_keys :
+        
+    trailing_commas :
+        
+    allow_duplicate_keys :
+        
+    seen :
+        
+    level :
+        
+    item_sep :
+        
+    indent_str :
+        
+    end_str :
+        
+
+    Returns
+    -------
+
+    """
     if not obj:
         return u'[]'
     return (u'[' + indent_str +
@@ -383,6 +675,19 @@
 
 
 def _dump_float(obj, allow_nan):
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+    allow_nan :
+        
+
+    Returns
+    -------
+
+    """
     if allow_nan:
         if math.isnan(obj):
             return 'NaN'
@@ -397,6 +702,19 @@
 
 
 def _dump_str(obj, ensure_ascii):
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+    ensure_ascii :
+        
+
+    Returns
+    -------
+
+    """
     ret = ['"']
     for ch in obj:
         if ch == '\\':
@@ -438,6 +756,17 @@
 
 
 def _is_ident(k):
+    """
+
+    Parameters
+    ----------
+    k :
+        
+
+    Returns
+    -------
+
+    """
     k = str(k)
     if not k or not _is_id_start(k[0]) and k[0] not in (u'$', u'_'):
         return False
@@ -448,11 +777,33 @@
 
 
 def _is_id_start(ch):
+    """
+
+    Parameters
+    ----------
+    ch :
+        
+
+    Returns
+    -------
+
+    """
     return unicodedata.category(ch) in (
         'Lu', 'Ll', 'Li', 'Lt', 'Lm', 'Lo', 'Nl')
 
 
 def _is_id_continue(ch):
+    """
+
+    Parameters
+    ----------
+    ch :
+        
+
+    Returns
+    -------
+
+    """
     return unicodedata.category(ch) in (
         'Lu', 'Ll', 'Li', 'Lt', 'Lm', 'Lo', 'Nl', 'Nd', 'Mn', 'Mc', 'Pc')
 
@@ -460,6 +811,17 @@
 _reserved_word_re = None
 
 def _is_reserved_word(k):
+    """
+
+    Parameters
+    ----------
+    k :
+        
+
+    Returns
+    -------
+
+    """
     global _reserved_word_re
 
     if _reserved_word_re is None:
@@ -506,4 +868,15 @@
 
 
 def _raise_type_error(obj):
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+
+    Returns
+    -------
+
+    """
     raise TypeError('%s is not JSON5 serializable' % repr(obj))
