# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/reshape/test_cut.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/reshape/test_cut.py
@@ -25,6 +25,7 @@
 
 
 def test_simple():
+    """ """
     data = np.ones(5, dtype="int64")
     result = cut(data, 4, labels=False)
 
@@ -33,6 +34,7 @@
 
 
 def test_bins():
+    """ """
     data = np.array([0.2, 1.4, 2.5, 6.2, 9.7, 2.1])
     result, bins = cut(data, 3, retbins=True)
 
@@ -45,6 +47,7 @@
 
 
 def test_right():
+    """ """
     data = np.array([0.2, 1.4, 2.5, 6.2, 9.7, 2.1, 2.575])
     result, bins = cut(data, 4, right=True, retbins=True)
 
@@ -57,6 +60,7 @@
 
 
 def test_no_right():
+    """ """
     data = np.array([0.2, 1.4, 2.5, 6.2, 9.7, 2.1, 2.575])
     result, bins = cut(data, 4, right=False, retbins=True)
 
@@ -69,6 +73,7 @@
 
 
 def test_array_like():
+    """ """
     data = [0.2, 1.4, 2.5, 6.2, 9.7, 2.1]
     result, bins = cut(data, 3, retbins=True)
 
@@ -81,6 +86,7 @@
 
 
 def test_bins_from_interval_index():
+    """ """
     c = cut(range(5), 3)
     expected = c
     result = cut(range(5), bins=expected.categories)
@@ -94,6 +100,7 @@
 
 
 def test_bins_from_interval_index_doc_example():
+    """ """
     # Make sure we preserve the bins.
     ages = np.array([10, 15, 13, 12, 23, 25, 28, 59, 60])
     c = cut(ages, bins=[0, 18, 35, 70])
@@ -106,6 +113,7 @@
 
 
 def test_bins_not_overlapping_from_interval_index():
+    """ """
     # see gh-23980
     msg = "Overlapping IntervalIndex is not accepted"
     ii = IntervalIndex.from_tuples([(0, 10), (2, 12), (4, 14)])
@@ -115,6 +123,7 @@
 
 
 def test_bins_not_monotonic():
+    """ """
     msg = "bins must increase monotonically"
     data = [0.2, 1.4, 2.5, 6.2, 9.7, 2.1]
 
@@ -163,12 +172,28 @@
     ],
 )
 def test_bins_monotonic_not_overflowing(x, bins, expected):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+    bins :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     # GH 26045
     result = cut(x, bins)
     tm.assert_index_equal(result.categories, expected)
 
 
 def test_wrong_num_labels():
+    """ """
     msg = "Bin labels must be one fewer than the number of bin edges"
     data = [0.2, 1.4, 2.5, 6.2, 9.7, 2.1]
 
@@ -184,6 +209,21 @@
     ],
 )
 def test_cut_corner(x, bins, msg):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+    bins :
+        
+    msg :
+        
+
+    Returns
+    -------
+
+    """
     with pytest.raises(ValueError, match=msg):
         cut(x, bins)
 
@@ -191,6 +231,19 @@
 @pytest.mark.parametrize("arg", [2, np.eye(2), DataFrame(np.eye(2))])
 @pytest.mark.parametrize("cut_func", [cut, qcut])
 def test_cut_not_1d_arg(arg, cut_func):
+    """
+
+    Parameters
+    ----------
+    arg :
+        
+    cut_func :
+        
+
+    Returns
+    -------
+
+    """
     msg = "Input array must be 1 dimensional"
     with pytest.raises(ValueError, match=msg):
         cut_func(arg, 2)
@@ -205,6 +258,17 @@
     ],
 )
 def test_int_bins_with_inf(data):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+
+    Returns
+    -------
+
+    """
     # GH 24314
     msg = "cannot specify integer `bins` when input data contains infinity"
     with pytest.raises(ValueError, match=msg):
@@ -212,6 +276,7 @@
 
 
 def test_cut_out_of_range_more():
+    """ """
     # see gh-1511
     name = "x"
 
@@ -230,6 +295,21 @@
     ],
 )
 def test_labels(right, breaks, closed):
+    """
+
+    Parameters
+    ----------
+    right :
+        
+    breaks :
+        
+    closed :
+        
+
+    Returns
+    -------
+
+    """
     arr = np.tile(np.arange(0, 1.01, 0.1), 4)
 
     result, bins = cut(arr, 4, retbins=True, right=right)
@@ -238,6 +318,7 @@
 
 
 def test_cut_pass_series_name_to_factor():
+    """ """
     name = "foo"
     ser = Series(np.random.randn(100), name=name)
 
@@ -246,6 +327,7 @@
 
 
 def test_label_precision():
+    """ """
     arr = np.arange(0, 0.73, 0.01)
     result = cut(arr, 4, precision=2)
 
@@ -255,6 +337,17 @@
 
 @pytest.mark.parametrize("labels", [None, False])
 def test_na_handling(labels):
+    """
+
+    Parameters
+    ----------
+    labels :
+        
+
+    Returns
+    -------
+
+    """
     arr = np.arange(0, 0.75, 0.01)
     arr[::3] = np.nan
 
@@ -266,6 +359,7 @@
 
 
 def test_inf_handling():
+    """ """
     data = np.arange(6)
     data_ser = Series(data, dtype="int64")
 
@@ -283,6 +377,7 @@
 
 
 def test_cut_out_of_bounds():
+    """ """
     arr = np.random.randn(100)
     result = cut(arr, [-1, 0, 1])
 
@@ -309,6 +404,19 @@
     ],
 )
 def test_cut_pass_labels(get_labels, get_expected):
+    """
+
+    Parameters
+    ----------
+    get_labels :
+        
+    get_expected :
+        
+
+    Returns
+    -------
+
+    """
     bins = [0, 25, 50, 100]
     arr = [50, 5, 10, 15, 20, 30, 70]
     labels = ["Small", "Medium", "Large"]
@@ -318,6 +426,7 @@
 
 
 def test_cut_pass_labels_compat():
+    """ """
     # see gh-16459
     arr = [50, 5, 10, 15, 20, 30, 70]
     labels = ["Good", "Medium", "Bad"]
@@ -329,6 +438,17 @@
 
 @pytest.mark.parametrize("x", [np.arange(11.0), np.arange(11.0) / 1e10])
 def test_round_frac_just_works(x):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+
+    Returns
+    -------
+
+    """
     # It works.
     cut(x, 2)
 
@@ -343,12 +463,28 @@
     ],
 )
 def test_round_frac(val, precision, expected):
+    """
+
+    Parameters
+    ----------
+    val :
+        
+    precision :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-1979
     result = tmod._round_frac(val, precision=precision)
     assert result == expected
 
 
 def test_cut_return_intervals():
+    """ """
     ser = Series([0, 1, 2, 3, 4, 5, 6, 7, 8])
     result = cut(ser, 3)
 
@@ -364,6 +500,7 @@
 
 
 def test_series_ret_bins():
+    """ """
     # see gh-8589
     ser = Series(np.arange(4))
     result, bins = cut(ser, 2, retbins=True)
@@ -384,6 +521,19 @@
     ],
 )
 def test_cut_duplicates_bin(kwargs, msg):
+    """
+
+    Parameters
+    ----------
+    kwargs :
+        
+    msg :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-20947
     bins = [0, 2, 4, 6, 10, 10]
     values = Series(np.array([1, 3, 5, 7, 9]), index=["a", "b", "c", "d", "e"])
@@ -400,6 +550,19 @@
 @pytest.mark.parametrize("data", [9.0, -9.0, 0.0])
 @pytest.mark.parametrize("length", [1, 2])
 def test_single_bin(data, length):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+    length :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-14652, gh-15428
     ser = Series([data] * length)
     result = cut(ser, 1, labels=False)
@@ -412,6 +575,19 @@
     "array_1_writeable,array_2_writeable", [(True, True), (True, False), (False, False)]
 )
 def test_cut_read_only(array_1_writeable, array_2_writeable):
+    """
+
+    Parameters
+    ----------
+    array_1_writeable :
+        
+    array_2_writeable :
+        
+
+    Returns
+    -------
+
+    """
     # issue 18773
     array_1 = np.arange(0, 100, 10)
     array_1.flags.writeable = array_1_writeable
@@ -435,6 +611,17 @@
     ],
 )
 def test_datetime_bin(conv):
+    """
+
+    Parameters
+    ----------
+    conv :
+        
+
+    Returns
+    -------
+
+    """
     data = [np.datetime64("2012-12-13"), np.datetime64("2012-12-15")]
     bin_data = ["2012-12-12", "2012-12-14", "2012-12-16"]
 
@@ -472,6 +659,17 @@
     ],
 )
 def test_datetime_cut(data):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-14714
     #
     # Testing time data when it comes in various collection types.
@@ -509,6 +707,19 @@
 )
 @pytest.mark.parametrize("box", [list, np.array, Index, Series])
 def test_datetime_tz_cut(bins, box):
+    """
+
+    Parameters
+    ----------
+    bins :
+        
+    box :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-19872
     tz = "US/Eastern"
     s = Series(date_range("20130101", periods=3, tz=tz))
@@ -539,6 +750,7 @@
 
 
 def test_datetime_nan_error():
+    """ """
     msg = "bins must be of datetime64 dtype"
 
     with pytest.raises(ValueError, match=msg):
@@ -546,6 +758,7 @@
 
 
 def test_datetime_nan_mask():
+    """ """
     result = cut(
         date_range("20130102", periods=5), bins=date_range("20130101", periods=2)
     )
@@ -559,6 +772,17 @@
 
 @pytest.mark.parametrize("tz", [None, "UTC", "US/Pacific"])
 def test_datetime_cut_roundtrip(tz):
+    """
+
+    Parameters
+    ----------
+    tz :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-19891
     ser = Series(date_range("20180101", periods=3, tz=tz))
     result, result_bins = cut(ser, 2, retbins=True)
@@ -574,6 +798,7 @@
 
 
 def test_timedelta_cut_roundtrip():
+    """ """
     # see gh-19891
     ser = Series(timedelta_range("1day", periods=3))
     result, result_bins = cut(ser, 2, retbins=True)
@@ -597,6 +822,21 @@
     ],
 )
 def test_cut_bool_coercion_to_int(bins, box, compare):
+    """
+
+    Parameters
+    ----------
+    bins :
+        
+    box :
+        
+    compare :
+        
+
+    Returns
+    -------
+
+    """
     # issue 20303
     data_expected = box([0, 1, 1, 0, 1] * 10)
     data_result = box([False, True, True, False, True] * 10)
@@ -607,6 +847,17 @@
 
 @pytest.mark.parametrize("labels", ["foo", 1, True])
 def test_cut_incorrect_labels(labels):
+    """
+
+    Parameters
+    ----------
+    labels :
+        
+
+    Returns
+    -------
+
+    """
     # GH 13318
     values = range(5)
     msg = "Bin labels must either be False, None or passed in as a list-like argument"
@@ -618,6 +869,21 @@
 @pytest.mark.parametrize("right", [True, False])
 @pytest.mark.parametrize("include_lowest", [True, False])
 def test_cut_nullable_integer(bins, right, include_lowest):
+    """
+
+    Parameters
+    ----------
+    bins :
+        
+    right :
+        
+    include_lowest :
+        
+
+    Returns
+    -------
+
+    """
     a = np.random.randint(0, 10, size=50).astype(float)
     a[::2] = np.nan
     result = cut(
@@ -635,6 +901,25 @@
     ],
 )
 def test_cut_non_unique_labels(data, bins, labels, expected_codes, expected_labels):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+    bins :
+        
+    labels :
+        
+    expected_codes :
+        
+    expected_labels :
+        
+
+    Returns
+    -------
+
+    """
     # GH 33141
     result = cut(data, bins=bins, labels=labels, ordered=False)
     expected = Categorical.from_codes(
@@ -651,6 +936,25 @@
     ],
 )
 def test_cut_unordered_labels(data, bins, labels, expected_codes, expected_labels):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+    bins :
+        
+    labels :
+        
+    expected_codes :
+        
+    expected_labels :
+        
+
+    Returns
+    -------
+
+    """
     # GH 33141
     result = cut(data, bins=bins, labels=labels, ordered=False)
     expected = Categorical.from_codes(
@@ -660,6 +964,7 @@
 
 
 def test_cut_unordered_with_missing_labels_raises_error():
+    """ """
     # GH 33141
     msg = "'labels' must be provided if 'ordered = False'"
     with pytest.raises(ValueError, match=msg):
@@ -667,6 +972,7 @@
 
 
 def test_cut_unordered_with_series_labels():
+    """ """
     # https://github.com/pandas-dev/pandas/issues/36603
     s = pd.Series([1, 2, 3, 4, 5])
     bins = pd.Series([0, 2, 4, 6])
