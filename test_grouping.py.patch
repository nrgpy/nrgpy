# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/groupby/test_grouping.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/groupby/test_grouping.py
@@ -21,7 +21,9 @@
 
 
 class TestSelection:
+    """ """
     def test_select_bad_cols(self):
+        """ """
         df = DataFrame([[1, 2]], columns=["A", "B"])
         g = df.groupby("A")
         with pytest.raises(KeyError, match="\"Columns not found: 'C'\""):
@@ -33,6 +35,7 @@
             g[["A", "C"]]
 
     def test_groupby_duplicated_column_errormsg(self):
+        """ """
         # GH7511
         df = DataFrame(
             columns=["A", "B", "A", "C"], data=[range(4), range(2, 6), range(0, 8, 2)]
@@ -50,6 +53,17 @@
         assert c.columns.size == 3
 
     def test_column_select_via_attr(self, df):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+
+        Returns
+        -------
+
+        """
         result = df.groupby("A").C.sum()
         expected = df.groupby("A")["C"].sum()
         tm.assert_series_equal(result, expected)
@@ -60,6 +74,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_getitem_list_of_columns(self):
+        """ """
         df = DataFrame(
             {
                 "A": ["foo", "bar", "foo", "bar", "foo", "bar", "foo", "foo"],
@@ -79,6 +94,7 @@
         tm.assert_frame_equal(result2, expected)
 
     def test_getitem_numeric_column_names(self):
+        """ """
         # GH #13731
         df = DataFrame(
             {
@@ -101,11 +117,23 @@
             df.groupby(0)[2, 4].mean()
 
     def test_getitem_single_list_of_columns(self, df):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+
+        Returns
+        -------
+
+        """
         # per GH 23566 this should raise a FutureWarning
         with tm.assert_produces_warning(FutureWarning):
             df.groupby("A")["C", "D"].mean()
 
     def test_getitem_single_column(self):
+        """ """
         df = DataFrame(
             {
                 "A": ["foo", "bar", "foo", "bar", "foo", "bar", "foo", "foo"],
@@ -130,7 +158,9 @@
 
 
 class TestGrouping:
+    """ """
     def test_grouper_index_types(self):
+        """ """
         # related GH5375
         # groupby misbehaving when using a Floatlike index
         df = DataFrame(np.arange(10).reshape(5, 2), columns=list("AB"))
@@ -150,6 +180,7 @@
             df.groupby(list("abcde")).apply(lambda x: x)
 
     def test_grouper_multilevel_freq(self):
+        """ """
 
         # GH 7885
         # with level and freq specified in a pd.Grouper
@@ -181,6 +212,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_grouper_creation_bug(self):
+        """ """
 
         # GH 8795
         df = DataFrame({"A": [0, 0, 1, 1, 2, 2], "B": [1, 2, 3, 4, 5, 6]})
@@ -248,6 +280,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_grouper_column_and_index(self):
+        """ """
         # GH 14327
 
         # Grouping a multi-index frame by a column and an index level should
@@ -282,6 +315,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_groupby_levels_and_columns(self):
+        """ """
         # GH9344, GH9049
         idx_names = ["x", "y"]
         idx = pd.MultiIndex.from_tuples(
@@ -299,6 +333,17 @@
         tm.assert_frame_equal(by_levels, by_columns)
 
     def test_groupby_categorical_index_and_columns(self, observed):
+        """
+
+        Parameters
+        ----------
+        observed :
+            
+
+        Returns
+        -------
+
+        """
         # GH18432, adapted for GH25871
         columns = ["A", "B", "A", "B"]
         categories = ["B", "A"]
@@ -322,6 +367,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_grouper_getting_correct_binner(self):
+        """ """
 
         # GH 10063
         # using a non-time-based grouper and a time-based grouper
@@ -345,14 +391,47 @@
         tm.assert_frame_equal(result, expected)
 
     def test_grouper_iter(self, df):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+
+        Returns
+        -------
+
+        """
         assert sorted(df.groupby("A").grouper) == ["bar", "foo"]
 
     def test_empty_groups(self, df):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-1048
         with pytest.raises(ValueError, match="No group keys passed!"):
             df.groupby([])
 
     def test_groupby_grouper(self, df):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+
+        Returns
+        -------
+
+        """
         grouped = df.groupby("A")
 
         result = df.groupby(grouped.grouper).mean()
@@ -360,6 +439,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_groupby_dict_mapping(self):
+        """ """
         # GH #679
         from pandas import Series
 
@@ -380,6 +460,7 @@
         tm.assert_series_equal(result, expected2)
 
     def test_groupby_grouper_f_sanity_checked(self):
+        """ """
         dates = date_range("01-Jan-2013", periods=12, freq="MS")
         ts = Series(np.random.randn(12), index=dates)
 
@@ -397,11 +478,23 @@
             ts.groupby(lambda key: key[0:6])
 
     def test_grouping_error_on_multidim_input(self, df):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+
+        Returns
+        -------
+
+        """
         msg = "Grouper for '<class 'pandas.core.frame.DataFrame'>' not 1-dimensional"
         with pytest.raises(ValueError, match=msg):
             Grouping(df.index, df[["A", "A"]])
 
     def test_multiindex_passthru(self):
+        """ """
 
         # GH 7997
         # regression from 0.14.1
@@ -412,6 +505,17 @@
         tm.assert_frame_equal(result, df)
 
     def test_multiindex_negative_level(self, mframe):
+        """
+
+        Parameters
+        ----------
+        mframe :
+            
+
+        Returns
+        -------
+
+        """
         # GH 13901
         result = mframe.groupby(level=-1).sum()
         expected = mframe.groupby(level="second").sum()
@@ -430,12 +534,24 @@
         tm.assert_frame_equal(result, expected)
 
     def test_multifunc_select_col_integer_cols(self, df):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+
+        Returns
+        -------
+
+        """
         df.columns = np.arange(len(df.columns))
 
         # it works!
         df.groupby(1, as_index=False)[2].agg({"Q": np.mean})
 
     def test_multiindex_columns_empty_level(self):
+        """ """
         lst = [["count", "values"], ["to filter", ""]]
         midx = MultiIndex.from_tuples(lst)
 
@@ -460,6 +576,7 @@
         tm.assert_dict_equal(result, expected)
 
     def test_groupby_multiindex_tuple(self):
+        """ """
         # GH 17979
         df = pd.DataFrame(
             [[1, 2, 3, 4], [3, 4, 5, 6], [1, 4, 2, 3]],
@@ -486,6 +603,21 @@
 
     @pytest.mark.parametrize("sort", [True, False])
     def test_groupby_level(self, sort, mframe, df):
+        """
+
+        Parameters
+        ----------
+        sort :
+            
+        mframe :
+            
+        df :
+            
+
+        Returns
+        -------
+
+        """
         # GH 17537
         frame = mframe
         deleveled = frame.reset_index()
@@ -526,6 +658,17 @@
             df.groupby(level=1)
 
     def test_groupby_level_index_names(self, axis):
+        """
+
+        Parameters
+        ----------
+        axis :
+            
+
+        Returns
+        -------
+
+        """
         # GH4014 this used to raise ValueError since 'exp'>1 (in py2)
         df = DataFrame({"exp": ["A"] * 3 + ["B"] * 3, "var1": range(6)}).set_index(
             "exp"
@@ -539,6 +682,17 @@
 
     @pytest.mark.parametrize("sort", [True, False])
     def test_groupby_level_with_nas(self, sort):
+        """
+
+        Parameters
+        ----------
+        sort :
+            
+
+        Returns
+        -------
+
+        """
         # GH 17537
         index = MultiIndex(
             levels=[[1, 0], [0, 1, 2, 3]],
@@ -563,6 +717,17 @@
         tm.assert_series_equal(result, expected)
 
     def test_groupby_args(self, mframe):
+        """
+
+        Parameters
+        ----------
+        mframe :
+            
+
+        Returns
+        -------
+
+        """
         # PR8618 and issue 8015
         frame = mframe
 
@@ -582,17 +747,44 @@
         ],
     )
     def test_level_preserve_order(self, sort, labels, mframe):
+        """
+
+        Parameters
+        ----------
+        sort :
+            
+        labels :
+            
+        mframe :
+            
+
+        Returns
+        -------
+
+        """
         # GH 17537
         grouped = mframe.groupby(level=0, sort=sort)
         exp_labels = np.array(labels, np.intp)
         tm.assert_almost_equal(grouped.grouper.codes[0], exp_labels)
 
     def test_grouping_labels(self, mframe):
+        """
+
+        Parameters
+        ----------
+        mframe :
+            
+
+        Returns
+        -------
+
+        """
         grouped = mframe.groupby(mframe.index.get_level_values(0))
         exp_labels = np.array([2, 2, 2, 0, 0, 1, 1, 3, 3, 3], dtype=np.intp)
         tm.assert_almost_equal(grouped.grouper.codes[0], exp_labels)
 
     def test_list_grouper_with_nat(self):
+        """ """
         # GH 14715
         df = pd.DataFrame({"date": pd.date_range("1/1/2011", periods=365, freq="D")})
         df.iloc[-1] = pd.NaT
@@ -626,6 +818,19 @@
         ],
     )
     def test_evaluate_with_empty_groups(self, func, expected):
+        """
+
+        Parameters
+        ----------
+        func :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # 26208
         # test transform'ing empty groups
         # (not testing other agg fns, because they return
@@ -636,6 +841,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_groupby_empty(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/27190
         s = pd.Series([], name="name", dtype="float64")
         gr = s.groupby([])
@@ -659,6 +865,7 @@
         assert s.groupby(s).grouper.names == ["name"]
 
     def test_groupby_level_index_value_all_na(self):
+        """ """
         # issue 20519
         df = DataFrame(
             [["x", np.nan, 10], [None, np.nan, 20]], columns=["A", "B", "C"]
@@ -677,6 +884,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_groupby_multiindex_level_empty(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/31670
         df = pd.DataFrame(
             [[123, "a", 1.0], [123, "b", 2.0]], columns=["id", "category", "value"]
@@ -695,7 +903,9 @@
 
 
 class TestGetGroup:
+    """ """
     def test_get_group(self):
+        """ """
         # GH 5267
         # be datelike friendly
         df = DataFrame(
@@ -743,6 +953,17 @@
             g.get_group(("foo", "bar", "baz"))
 
     def test_get_group_empty_bins(self, observed):
+        """
+
+        Parameters
+        ----------
+        observed :
+            
+
+        Returns
+        -------
+
+        """
 
         d = pd.DataFrame([3, 1, 7, 6])
         bins = [0, 5, 10, 15]
@@ -759,6 +980,7 @@
             g.get_group(pd.Interval(10, 15))
 
     def test_get_group_grouped_by_tuple(self):
+        """ """
         # GH 8121
         df = DataFrame([[(1,), (1, 2), (1,), (1, 2)]], index=["ids"]).T
         gr = df.groupby("ids")
@@ -774,6 +996,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_groupby_with_empty(self):
+        """ """
         index = pd.DatetimeIndex(())
         data = ()
         series = pd.Series(data, index, dtype=object)
@@ -782,6 +1005,7 @@
         assert next(iter(grouped), None) is None
 
     def test_groupby_with_single_column(self):
+        """ """
         df = pd.DataFrame({"a": list("abssbab")})
         tm.assert_frame_equal(df.groupby("a").get_group("a"), df.iloc[[0, 5]])
         # GH 13530
@@ -791,6 +1015,7 @@
         tm.assert_frame_equal(df.groupby("a").nth(1), exp)
 
     def test_gb_key_len_equal_axis_len(self):
+        """ """
         # GH16843
         # test ensures that index and column keys are recognized correctly
         # when number of keys equals axis length of groupby
@@ -809,7 +1034,19 @@
 
 
 class TestIteration:
+    """ """
     def test_groups(self, df):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+
+        Returns
+        -------
+
+        """
         grouped = df.groupby(["A"])
         groups = grouped.groups
         assert groups is grouped.groups  # caching works
@@ -826,6 +1063,17 @@
             assert (df.loc[v]["B"] == k[1]).all()
 
     def test_grouping_is_iterable(self, tsframe):
+        """
+
+        Parameters
+        ----------
+        tsframe :
+            
+
+        Returns
+        -------
+
+        """
         # this code path isn't used anywhere else
         # not sure it's useful
         grouped = tsframe.groupby([lambda x: x.weekday(), lambda x: x.year])
@@ -835,6 +1083,7 @@
             pass
 
     def test_multi_iter(self):
+        """ """
         s = Series(np.arange(6))
         k1 = np.array(["a", "a", "a", "b", "b", "b"])
         k2 = np.array(["1", "2", "1", "2", "1", "2"])
@@ -855,6 +1104,17 @@
             tm.assert_series_equal(three, e3)
 
     def test_multi_iter_frame(self, three_group):
+        """
+
+        Parameters
+        ----------
+        three_group :
+            
+
+        Returns
+        -------
+
+        """
         k1 = np.array(["b", "b", "b", "a", "a", "a"])
         k2 = np.array(["1", "2", "1", "2", "1", "2"])
         df = DataFrame(
@@ -893,6 +1153,17 @@
             pass
 
     def test_dictify(self, df):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+
+        Returns
+        -------
+
+        """
         dict(iter(df.groupby("A")))
         dict(iter(df.groupby(["A", "B"])))
         dict(iter(df["C"].groupby(df["A"])))
@@ -901,6 +1172,7 @@
         dict(iter(df.groupby(["A", "B"])["C"]))
 
     def test_groupby_with_small_elem(self):
+        """ """
         # GH 8542
         # length=2
         df = pd.DataFrame(
@@ -953,6 +1225,7 @@
         tm.assert_frame_equal(res, df.iloc[[2], :])
 
     def test_grouping_string_repr(self):
+        """ """
         # GH 13394
         mi = MultiIndex.from_arrays([list("AAB"), list("aba")])
         df = DataFrame([[1, 2, 3]], columns=mi)
