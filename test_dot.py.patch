# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/generic/methods/test_dot.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/generic/methods/test_dot.py
@@ -6,43 +6,106 @@
 
 
 class DotSharedTests:
+    """ """
     @pytest.fixture
     def obj(self):
+        """ """
         raise NotImplementedError
 
     @pytest.fixture
     def other(self) -> DataFrame:
-        """
-        other is a DataFrame that is indexed so that obj.dot(other) is valid
-        """
+        """other is a DataFrame that is indexed so that obj.dot(other) is valid"""
         raise NotImplementedError
 
     @pytest.fixture
     def expected(self, obj, other) -> DataFrame:
-        """
-        The expected result of obj.dot(other)
+        """The expected result of obj.dot(other)
+
+        Parameters
+        ----------
+        obj :
+            
+        other :
+            
+
+        Returns
+        -------
+
         """
         raise NotImplementedError
 
     @classmethod
     def reduced_dim_assert(cls, result, expected):
-        """
-        Assertion about results with 1 fewer dimension that self.obj
+        """Assertion about results with 1 fewer dimension that self.obj
+
+        Parameters
+        ----------
+        result :
+            
+        expected :
+            
+
+        Returns
+        -------
+
         """
         raise NotImplementedError
 
     def test_dot_equiv_values_dot(self, obj, other, expected):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+        other :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # `expected` is constructed from obj.values.dot(other.values)
         result = obj.dot(other)
         tm.assert_equal(result, expected)
 
     def test_dot_2d_ndarray(self, obj, other, expected):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+        other :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # Check ndarray argument; in this case we get matching values,
         #  but index/columns may not match
         result = obj.dot(other.values)
         assert np.all(result == expected.values)
 
     def test_dot_1d_ndarray(self, obj, expected):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # can pass correct-length array
         row = obj.iloc[0] if obj.ndim == 2 else obj
 
@@ -51,78 +114,199 @@
         self.reduced_dim_assert(result, expected)
 
     def test_dot_series(self, obj, other, expected):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+        other :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # Check series argument
         result = obj.dot(other["1"])
         self.reduced_dim_assert(result, expected["1"])
 
     def test_dot_series_alignment(self, obj, other, expected):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+        other :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         result = obj.dot(other.iloc[::-1]["1"])
         self.reduced_dim_assert(result, expected["1"])
 
     def test_dot_aligns(self, obj, other, expected):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+        other :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # Check index alignment
         other2 = other.iloc[::-1]
         result = obj.dot(other2)
         tm.assert_equal(result, expected)
 
     def test_dot_shape_mismatch(self, obj):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+
+        Returns
+        -------
+
+        """
         msg = "Dot product shape mismatch"
         # exception raised is of type Exception
         with pytest.raises(Exception, match=msg):
             obj.dot(obj.values[:3])
 
     def test_dot_misaligned(self, obj, other):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+        other :
+            
+
+        Returns
+        -------
+
+        """
         msg = "matrices are not aligned"
         with pytest.raises(ValueError, match=msg):
             obj.dot(other.T)
 
 
 class TestSeriesDot(DotSharedTests):
+    """ """
     @pytest.fixture
     def obj(self):
+        """ """
         return Series(np.random.randn(4), index=["p", "q", "r", "s"])
 
     @pytest.fixture
     def other(self):
+        """ """
         return DataFrame(
             np.random.randn(3, 4), index=["1", "2", "3"], columns=["p", "q", "r", "s"]
         ).T
 
     @pytest.fixture
     def expected(self, obj, other):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+        other :
+            
+
+        Returns
+        -------
+
+        """
         return Series(np.dot(obj.values, other.values), index=other.columns)
 
     @classmethod
     def reduced_dim_assert(cls, result, expected):
-        """
-        Assertion about results with 1 fewer dimension that self.obj
+        """Assertion about results with 1 fewer dimension that self.obj
+
+        Parameters
+        ----------
+        result :
+            
+        expected :
+            
+
+        Returns
+        -------
+
         """
         tm.assert_almost_equal(result, expected)
 
 
 class TestDataFrameDot(DotSharedTests):
+    """ """
     @pytest.fixture
     def obj(self):
+        """ """
         return DataFrame(
             np.random.randn(3, 4), index=["a", "b", "c"], columns=["p", "q", "r", "s"]
         )
 
     @pytest.fixture
     def other(self):
+        """ """
         return DataFrame(
             np.random.randn(4, 2), index=["p", "q", "r", "s"], columns=["1", "2"]
         )
 
     @pytest.fixture
     def expected(self, obj, other):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+        other :
+            
+
+        Returns
+        -------
+
+        """
         return DataFrame(
             np.dot(obj.values, other.values), index=obj.index, columns=other.columns
         )
 
     @classmethod
     def reduced_dim_assert(cls, result, expected):
-        """
-        Assertion about results with 1 fewer dimension that self.obj
+        """Assertion about results with 1 fewer dimension that self.obj
+
+        Parameters
+        ----------
+        result :
+            
+        expected :
+            
+
+        Returns
+        -------
+
         """
         tm.assert_series_equal(result, expected, check_names=False)
         assert result.name is None
