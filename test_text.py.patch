# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/utils/tests/test_text.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/utils/tests/test_text.py
@@ -60,7 +60,7 @@
 
 
 def test_columnize_random():
-    """Test with random input to hopefully catch edge case """
+    """Test with random input to hopefully catch edge case"""
     for row_first in [True, False]:
         for nitems in [random.randint(2,70) for i in range(2,20)]:
             displaywidth = random.randint(20,200)
@@ -94,6 +94,17 @@
         nt.assert_equal(out, '\n'.join(items+['']), "row_first={0}".format(row_first))
 
 def eval_formatter_check(f):
+    """
+
+    Parameters
+    ----------
+    f :
+        
+
+    Returns
+    -------
+
+    """
     ns = dict(n=12, pi=math.pi, stuff='hello there', os=os, u=u"café", b="café")
     s = f.format("{n} {n//4} {stuff.split()[0]}", **ns)
     nt.assert_equal(s, "12 3 hello")
@@ -115,6 +126,17 @@
     nt.assert_raises(NameError, f.format, '{dne}', **ns)
 
 def eval_formatter_slicing_check(f):
+    """
+
+    Parameters
+    ----------
+    f :
+        
+
+    Returns
+    -------
+
+    """
     ns = dict(n=12, pi=math.pi, stuff='hello there', os=os)
     s = f.format(" {stuff.split()[:]} ", **ns)
     nt.assert_equal(s, " ['hello', 'there'] ")
@@ -126,6 +148,17 @@
     nt.assert_raises(SyntaxError, f.format, "{n:x}", **ns)
 
 def eval_formatter_no_slicing_check(f):
+    """
+
+    Parameters
+    ----------
+    f :
+        
+
+    Returns
+    -------
+
+    """
     ns = dict(n=12, pi=math.pi, stuff='hello there', os=os)
     
     s = f.format('{n:x} {pi**2:+f}', **ns)
@@ -138,16 +171,19 @@
     nt.assert_equal(s, "[1, 2]")
 
 def test_eval_formatter():
+    """ """
     f = text.EvalFormatter()
     eval_formatter_check(f)
     eval_formatter_no_slicing_check(f)
 
 def test_full_eval_formatter():
+    """ """
     f = text.FullEvalFormatter()
     eval_formatter_check(f)
     eval_formatter_slicing_check(f)
 
 def test_dollar_formatter():
+    """ """
     f = text.DollarFormatter()
     eval_formatter_check(f)
     eval_formatter_slicing_check(f)
@@ -166,24 +202,33 @@
 
 
 def test_long_substr():
+    """ """
     data = ['hi']
     nt.assert_equal(text.long_substr(data), 'hi')
 
 
 def test_long_substr2():
+    """ """
     data = ['abc', 'abd', 'abf', 'ab']
     nt.assert_equal(text.long_substr(data), 'ab')
 
 def test_long_substr_empty():
+    """ """
     data = []
     nt.assert_equal(text.long_substr(data), '')
 
 def test_strip_email():
-    src = """\
+    """src = """\
         >> >>> def f(x):
         >> ...   return x+1
-        >> ... 
-        >> >>> zz = f(2.5)"""
+        >> ...
+        >> >>> zz = f(2.5)
+
+    Parameters
+    ----------
+
+    Returns
+    -------
     cln = """\
 >>> def f(x):
 ...   return x+1
@@ -193,11 +238,13 @@
 
 
 def test_strip_email2():
+    """ """
     src = '> > > list()'
     cln = 'list()'
     nt.assert_equal(text.strip_email_quotes(src), cln)
 
 def test_LSString():
+    """ """
     lss = text.LSString("abc\ndef")
     nt.assert_equal(lss.l, ['abc', 'def'])
     nt.assert_equal(lss.s, 'abc def')
@@ -205,6 +252,7 @@
     nt.assert_is_instance(lss.p[0], Path)
 
 def test_SList():
+    """ """
     sl = text.SList(['a 11', 'b 1', 'a 2'])
     nt.assert_equal(sl.n, 'a 11\nb 1\na 2')
     nt.assert_equal(sl.s, 'a 11 b 1 a 2')
