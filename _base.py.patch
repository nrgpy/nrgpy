# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/io/excel/_base.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/io/excel/_base.py
@@ -299,6 +299,65 @@
     convert_float=True,
     mangle_dupe_cols=True,
 ):
+    """
+
+    Parameters
+    ----------
+    io :
+        
+    sheet_name :
+         (Default value = 0)
+    header :
+         (Default value = 0)
+    names :
+         (Default value = None)
+    index_col :
+         (Default value = None)
+    usecols :
+         (Default value = None)
+    squeeze :
+         (Default value = False)
+    dtype :
+         (Default value = None)
+    engine :
+         (Default value = None)
+    converters :
+         (Default value = None)
+    true_values :
+         (Default value = None)
+    false_values :
+         (Default value = None)
+    skiprows :
+         (Default value = None)
+    nrows :
+         (Default value = None)
+    na_values :
+         (Default value = None)
+    keep_default_na :
+         (Default value = True)
+    na_filter :
+         (Default value = True)
+    verbose :
+         (Default value = False)
+    parse_dates :
+         (Default value = False)
+    date_parser :
+         (Default value = None)
+    thousands :
+         (Default value = None)
+    comment :
+         (Default value = None)
+    skipfooter :
+         (Default value = 0)
+    convert_float :
+         (Default value = True)
+    mangle_dupe_cols :
+         (Default value = True)
+
+    Returns
+    -------
+
+    """
 
     if not isinstance(io, ExcelFile):
         io = ExcelFile(io, engine=engine)
@@ -336,6 +395,7 @@
 
 
 class _BaseExcelReader(metaclass=abc.ABCMeta):
+    """ """
     def __init__(self, filepath_or_buffer):
         # If filepath_or_buffer is a url, load the data into a BytesIO
         if is_url(filepath_or_buffer):
@@ -361,30 +421,79 @@
     @property
     @abc.abstractmethod
     def _workbook_class(self):
+        """ """
         pass
 
     @abc.abstractmethod
     def load_workbook(self, filepath_or_buffer):
+        """
+
+        Parameters
+        ----------
+        filepath_or_buffer :
+            
+
+        Returns
+        -------
+
+        """
         pass
 
     def close(self):
+        """ """
         pass
 
     @property
     @abc.abstractmethod
     def sheet_names(self):
+        """ """
         pass
 
     @abc.abstractmethod
     def get_sheet_by_name(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         pass
 
     @abc.abstractmethod
     def get_sheet_by_index(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         pass
 
     @abc.abstractmethod
     def get_sheet_data(self, sheet, convert_float):
+        """
+
+        Parameters
+        ----------
+        sheet :
+            
+        convert_float :
+            
+
+        Returns
+        -------
+
+        """
         pass
 
     def parse(
@@ -411,6 +520,57 @@
         mangle_dupe_cols=True,
         **kwds,
     ):
+        """
+
+        Parameters
+        ----------
+        sheet_name :
+             (Default value = 0)
+        header :
+             (Default value = 0)
+        names :
+             (Default value = None)
+        index_col :
+             (Default value = None)
+        usecols :
+             (Default value = None)
+        squeeze :
+             (Default value = False)
+        dtype :
+             (Default value = None)
+        true_values :
+             (Default value = None)
+        false_values :
+             (Default value = None)
+        skiprows :
+             (Default value = None)
+        nrows :
+             (Default value = None)
+        na_values :
+             (Default value = None)
+        verbose :
+             (Default value = False)
+        parse_dates :
+             (Default value = False)
+        date_parser :
+             (Default value = None)
+        thousands :
+             (Default value = None)
+        comment :
+             (Default value = None)
+        skipfooter :
+             (Default value = 0)
+        convert_float :
+             (Default value = True)
+        mangle_dupe_cols :
+             (Default value = True)
+        **kwds :
+            
+
+        Returns
+        -------
+
+        """
 
         validate_header_arg(header)
 
@@ -533,9 +693,8 @@
 
 
 class ExcelWriter(metaclass=abc.ABCMeta):
-    """
-    Class for writing DataFrame objects into excel sheets.
-
+    """Class for writing DataFrame objects into excel sheets.
+    
     Default is to use xlwt for xls, openpyxl for xlsx, odf for ods.
     See DataFrame.to_excel for typical usage.
 
@@ -554,46 +713,47 @@
         (e.g. 'YYYY-MM-DD HH:MM:SS').
     mode : {'w', 'a'}, default 'w'
         File mode to use (write or append).
-
         .. versionadded:: 0.24.0
+
+    Returns
+    -------
 
     Attributes
     ----------
     None
-
     Methods
     -------
     None
-
     Notes
     -----
     None of the methods and properties are considered public.
-
+    
     For compatibility with CSV writers, ExcelWriter serializes lists
     and dicts to strings before writing.
-
     Examples
     --------
     Default usage:
-
+    
+    
+    To write to separate sheets in a single file:
+    
+    
+    You can set the date format or datetime format:
+    
+    
+    You can also append to an existing Excel file:
     >>> with ExcelWriter('path_to_file.xlsx') as writer:
     ...     df.to_excel(writer)
-
-    To write to separate sheets in a single file:
-
+    
     >>> with ExcelWriter('path_to_file.xlsx') as writer:
     ...     df1.to_excel(writer, sheet_name='Sheet1')
     ...     df2.to_excel(writer, sheet_name='Sheet2')
-
-    You can set the date format or datetime format:
-
+    
     >>> with ExcelWriter('path_to_file.xlsx',
                           date_format='YYYY-MM-DD',
                           datetime_format='YYYY-MM-DD HH:MM:SS') as writer:
     ...     df.to_excel(writer)
-
-    You can also append to an existing Excel file:
-
+    
     >>> with ExcelWriter('path_to_file.xlsx', mode='a') as writer:
     ...     df.to_excel(writer, sheet_name='Sheet3')
     """
@@ -660,27 +820,31 @@
     def write_cells(
         self, cells, sheet_name=None, startrow=0, startcol=0, freeze_panes=None
     ):
-        """
-        Write given formatted cells into Excel an excel sheet
+        """Write given formatted cells into Excel an excel sheet
 
         Parameters
         ----------
-        cells : generator
-            cell of formatted data to save to Excel sheet
-        sheet_name : str, default None
-            Name of Excel sheet, if None, then use self.cur_sheet
-        startrow : upper left cell row to dump data frame
-        startcol : upper left cell column to dump data frame
-        freeze_panes: int tuple of length 2
-            contains the bottom-most row and right-most column to freeze
+        cells :
+            
+        sheet_name :
+             (Default value = None)
+        startrow :
+             (Default value = 0)
+        startcol :
+             (Default value = 0)
+        freeze_panes :
+             (Default value = None)
+
+        Returns
+        -------
+
+        
         """
         pass
 
     @abc.abstractmethod
     def save(self):
-        """
-        Save workbook to disk.
-        """
+        """Save workbook to disk."""
         pass
 
     def __init__(
@@ -716,6 +880,17 @@
         return stringify_path(self.path)
 
     def _get_sheet_name(self, sheet_name):
+        """
+
+        Parameters
+        ----------
+        sheet_name :
+            
+
+        Returns
+        -------
+
+        """
         if sheet_name is None:
             sheet_name = self.cur_sheet
         if sheet_name is None:  # pragma: no cover
@@ -723,8 +898,7 @@
         return sheet_name
 
     def _value_with_fmt(self, val):
-        """
-        Convert numpy types to Python types for the Excel writers.
+        """Convert numpy types to Python types for the Excel writers.
 
         Parameters
         ----------
@@ -733,8 +907,8 @@
 
         Returns
         -------
-        Tuple with the first element being the converted value and the second
-            being an optional format
+
+        
         """
         fmt = None
 
@@ -758,9 +932,17 @@
 
     @classmethod
     def check_extension(cls, ext):
-        """
-        checks that path's extension against the Writer's supported
+        """checks that path's extension against the Writer's supported
         extensions.  If it isn't supported, raises UnsupportedFiletypeError.
+
+        Parameters
+        ----------
+        ext :
+            
+
+        Returns
+        -------
+
         """
         if ext.startswith("."):
             ext = ext[1:]
@@ -782,20 +964,23 @@
 
 
 def _is_ods_stream(stream: Union[BufferedIOBase, RawIOBase]) -> bool:
-    """
-    Check if the stream is an OpenDocument Spreadsheet (.ods) file
-
+    """Check if the stream is an OpenDocument Spreadsheet (.ods) file
+    
     It uses magic values inside the stream
 
     Parameters
     ----------
     stream : Union[BufferedIOBase, RawIOBase]
         IO stream with data which might be an ODS file
+    stream: Union[BufferedIOBase :
+        
+    RawIOBase] :
+        
 
     Returns
     -------
-    is_ods : bool
-        Boolean indication that this is indeed an ODS file or not
+
+    
     """
     stream.seek(0)
     is_ods = False
@@ -810,26 +995,17 @@
 
 
 class ExcelFile:
-    """
-    Class for parsing tabular excel sheets into DataFrame objects.
-
+    """Class for parsing tabular excel sheets into DataFrame objects.
+    
     Uses xlrd engine by default. See read_excel for more documentation
 
     Parameters
     ----------
-    path_or_buffer : str, path object (pathlib.Path or py._path.local.LocalPath),
-        a file-like object, xlrd workbook or openpypl workbook.
-        If a string or path object, expected to be a path to a
-        .xls, .xlsx, .xlsb, .xlsm, .odf, .ods, or .odt file.
-    engine : str, default None
-        If io is not a buffer or path, this must be set to identify io.
-        Supported engines: ``xlrd``, ``openpyxl``, ``odf``, ``pyxlsb``,
-        default ``xlrd``.
-        Engine compatibility :
-        - ``xlrd`` supports most old/new Excel file formats.
-        - ``openpyxl`` supports newer Excel file formats.
-        - ``odf`` supports OpenDocument file formats (.odf, .ods, .odt).
-        - ``pyxlsb`` supports Binary Excel files.
+
+    Returns
+    -------
+
+    
     """
 
     from pandas.io.excel._odfreader import _ODFReader
@@ -892,16 +1068,58 @@
         mangle_dupe_cols=True,
         **kwds,
     ):
-        """
-        Parse specified sheet(s) into a DataFrame.
-
+        """Parse specified sheet(s) into a DataFrame.
+        
         Equivalent to read_excel(ExcelFile, ...)  See the read_excel
         docstring for more info on accepted parameters.
 
+        Parameters
+        ----------
+        sheet_name :
+             (Default value = 0)
+        header :
+             (Default value = 0)
+        names :
+             (Default value = None)
+        index_col :
+             (Default value = None)
+        usecols :
+             (Default value = None)
+        squeeze :
+             (Default value = False)
+        converters :
+             (Default value = None)
+        true_values :
+             (Default value = None)
+        false_values :
+             (Default value = None)
+        skiprows :
+             (Default value = None)
+        nrows :
+             (Default value = None)
+        na_values :
+             (Default value = None)
+        parse_dates :
+             (Default value = False)
+        date_parser :
+             (Default value = None)
+        thousands :
+             (Default value = None)
+        comment :
+             (Default value = None)
+        skipfooter :
+             (Default value = 0)
+        convert_float :
+             (Default value = True)
+        mangle_dupe_cols :
+             (Default value = True)
+        **kwds :
+            
+
         Returns
         -------
-        DataFrame or dict of DataFrames
-            DataFrame from the passed in Excel file.
+
+        
         """
         return self._reader.parse(
             sheet_name=sheet_name,
@@ -928,10 +1146,12 @@
 
     @property
     def book(self):
+        """ """
         return self._reader.book
 
     @property
     def sheet_names(self):
+        """ """
         return self._reader.sheet_names
 
     def close(self):
