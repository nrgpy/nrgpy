# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/lib/index_tricks.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/lib/index_tricks.py
@@ -28,19 +28,29 @@
 
 
 def _ix__dispatcher(*args):
+    """
+
+    Parameters
+    ----------
+    *args :
+        
+
+    Returns
+    -------
+
+    """
     return args
 
 
 @array_function_dispatch(_ix__dispatcher)
 def ix_(*args):
-    """
-    Construct an open mesh from multiple sequences.
-
+    """Construct an open mesh from multiple sequences.
+    
     This function takes N 1-D sequences and returns N outputs with N
     dimensions each, such that the shape is 1 in all but one dimension
     and the dimension with the non-unit shape value cycles through all
     N dimensions.
-
+    
     Using `ix_` one can quickly construct index arrays that will index
     the cross product. ``a[np.ix_([1,3],[2,5])]`` returns the array
     ``[[a[1,2] a[1,5]], [a[3,2] a[3,5]]]``.
@@ -52,6 +62,8 @@
         Boolean sequences will be interpreted as boolean masks for the
         corresponding dimension (equivalent to passing in
         ``np.nonzero(boolean_sequence)``).
+    *args :
+        
 
     Returns
     -------
@@ -62,7 +74,6 @@
     See Also
     --------
     ogrid, mgrid, meshgrid
-
     Examples
     --------
     >>> a = np.arange(10).reshape(2, 5)
@@ -78,7 +89,7 @@
     >>> a[ixgrid]
     array([[2, 4],
            [7, 9]])
-
+    
     >>> ixgrid = np.ix_([True, True], [2, 4])
     >>> a[ixgrid]
     array([[2, 4],
@@ -87,7 +98,6 @@
     >>> a[ixgrid]
     array([[2, 4],
            [7, 9]])
-
     """
     out = []
     nd = len(args)
@@ -106,19 +116,18 @@
     return tuple(out)
 
 class nd_grid:
-    """
-    Construct a multi-dimensional "meshgrid".
-
+    """Construct a multi-dimensional "meshgrid".
+    
     ``grid = nd_grid()`` creates an instance which will return a mesh-grid
     when indexed.  The dimension and number of the output arrays are equal
     to the number of indexing dimensions.  If the step length is not a
     complex number, then the stop is not inclusive.
-
+    
     However, if the step length is a **complex number** (e.g. 5j), then the
     integer part of its magnitude is interpreted as specifying the
     number of points to create between the start and stop values, where
     the stop value **is inclusive**.
-
+    
     If instantiated with an argument of ``sparse=True``, the mesh-grid is
     open (or not fleshed out) so that only one-dimension of each returned
     argument is greater than 1.
@@ -127,15 +136,18 @@
     ----------
     sparse : bool, optional
         Whether the grid is sparse or not. Default is False.
+
+    Returns
+    -------
 
     Notes
     -----
     Two instances of `nd_grid` are made available in the NumPy namespace,
     `mgrid` and `ogrid`, approximately defined as::
-
+    
         mgrid = nd_grid(sparse=False)
         ogrid = nd_grid(sparse=True)
-
+    
     Users should use these pre-defined instances instead of using `nd_grid`
     directly.
     """
@@ -206,30 +218,32 @@
 
 
 class MGridClass(nd_grid):
-    """
-    `nd_grid` instance which returns a dense multi-dimensional "meshgrid".
-
+    """`nd_grid` instance which returns a dense multi-dimensional "meshgrid".
+    
     An instance of `numpy.lib.index_tricks.nd_grid` which returns an dense
     (or fleshed out) mesh-grid when indexed, so that each returned argument
     has the same shape.  The dimensions and number of the output arrays are
     equal to the number of indexing dimensions.  If the step length is not a
     complex number, then the stop is not inclusive.
-
+    
     However, if the step length is a **complex number** (e.g. 5j), then
     the integer part of its magnitude is interpreted as specifying the
     number of points to create between the start and stop values, where
     the stop value **is inclusive**.
 
-    Returns
-    ----------
+    Parameters
+    ----------
+
+    Returns
+    -------
     mesh-grid `ndarrays` all of the same dimensions
+        
 
     See Also
     --------
     numpy.lib.index_tricks.nd_grid : class of `ogrid` and `mgrid` objects
     ogrid : like mgrid but returns open (not fleshed out) mesh grids
     r_ : array concatenator
-
     Examples
     --------
     >>> np.mgrid[0:5,0:5]
@@ -245,7 +259,6 @@
             [0, 1, 2, 3, 4]]])
     >>> np.mgrid[-1:1:5j]
     array([-1. , -0.5,  0. ,  0.5,  1. ])
-
     """
     def __init__(self):
         super(MGridClass, self).__init__(sparse=False)
@@ -253,20 +266,22 @@
 mgrid = MGridClass()
 
 class OGridClass(nd_grid):
-    """
-    `nd_grid` instance which returns an open multi-dimensional "meshgrid".
-
+    """`nd_grid` instance which returns an open multi-dimensional "meshgrid".
+    
     An instance of `numpy.lib.index_tricks.nd_grid` which returns an open
     (i.e. not fleshed out) mesh-grid when indexed, so that only one dimension
     of each returned array is greater than 1.  The dimension and number of the
     output arrays are equal to the number of indexing dimensions.  If the step
     length is not a complex number, then the stop is not inclusive.
-
+    
     However, if the step length is a **complex number** (e.g. 5j), then
     the integer part of its magnitude is interpreted as specifying the
     number of points to create between the start and stop values, where
     the stop value **is inclusive**.
 
+    Parameters
+    ----------
+
     Returns
     -------
     mesh-grid
@@ -277,7 +292,6 @@
     np.lib.index_tricks.nd_grid : class of `ogrid` and `mgrid` objects
     mgrid : like `ogrid` but returns dense (or fleshed out) mesh grids
     r_ : array concatenator
-
     Examples
     --------
     >>> from numpy import ogrid
@@ -289,7 +303,6 @@
             [2],
             [3],
             [4]]), array([[0, 1, 2, 3, 4]])]
-
     """
     def __init__(self):
         super(OGridClass, self).__init__(sparse=True)
@@ -298,10 +311,16 @@
 
 
 class AxisConcatenator:
-    """
-    Translates slice objects to concatenation along an axis.
-
+    """Translates slice objects to concatenation along an axis.
+    
     For detailed documentation on usage, see `r_`.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     # allow ma.mr_ to override this
     concatenate = staticmethod(_nx.concatenate)
@@ -420,16 +439,15 @@
 # in help(r_)
 
 class RClass(AxisConcatenator):
-    """
-    Translates slice objects to concatenation along the first axis.
-
+    """Translates slice objects to concatenation along the first axis.
+    
     This is a simple way to build up arrays quickly. There are two use cases.
-
+    
     1. If the index expression contains comma separated arrays, then stack
        them along their first axis.
     2. If the index expression contains slice notation or scalars then create
        a 1-D array with a range indicated by the slice notation.
-
+    
     If slice notation is used, the syntax ``start:stop:step`` is equivalent
     to ``np.arange(start, stop, step)`` inside of the brackets. However, if
     ``step`` is an imaginary number (i.e. 100j) then its integer portion is
@@ -438,19 +456,19 @@
     ``np.linspace(start, stop, step, endpoint=1)`` inside of the brackets.
     After expansion of slice notation, all comma separated sequences are
     concatenated together.
-
+    
     Optional character strings placed as the first element of the index
     expression can be used to change the output. The strings 'r' or 'c' result
     in matrix output. If the result is 1-D and 'r' is specified a 1 x N (row)
     matrix is produced. If the result is 1-D and 'c' is specified, then a N x 1
     (column) matrix is produced. If the result is 2-D then both provide the
     same matrix result.
-
+    
     A string integer specifies which axis to stack multiple comma separated
     arrays along. A string of two comma-separated integers allows indication
     of the minimum number of dimensions to force each entry into as the
     second integer (the axis to concatenate along is still the first integer).
-
+    
     A string with three comma-separated integers allows specification of the
     axis to concatenate along, the minimum number of dimensions to force the
     entries to, and which axis should contain the start of the arrays which
@@ -465,28 +483,32 @@
 
     Parameters
     ----------
-    Not a function, so takes no parameters
-
+    Not a function, so takes no parameters :
+        
 
     Returns
     -------
     A concatenated ndarray or matrix.
+        
 
     See Also
     --------
     concatenate : Join a sequence of arrays along an existing axis.
     c_ : Translates slice objects to concatenation along the second axis.
-
     Examples
     --------
+    
+    String integers specify the axis to concatenate along or the minimum
+    number of dimensions to force entries into.
+    
+    
+    
+    Using 'r' or 'c' as a first string argument creates a matrix.
     >>> np.r_[np.array([1,2,3]), 0, 0, np.array([4,5,6])]
     array([1, 2, 3, ..., 4, 5, 6])
     >>> np.r_[-1:1:6j, [0]*3, 5, 6]
     array([-1. , -0.6, -0.2,  0.2,  0.6,  1. ,  0. ,  0. ,  0. ,  5. ,  6. ])
-
-    String integers specify the axis to concatenate along or the minimum
-    number of dimensions to force entries into.
-
+    
     >>> a = np.array([[0, 1, 2], [3, 4, 5]])
     >>> np.r_['-1', a, a] # concatenate along last axis
     array([[0, 1, 2, 0, 1, 2],
@@ -494,7 +516,7 @@
     >>> np.r_['0,2', [1,2,3], [4,5,6]] # concatenate along first axis, dim>=2
     array([[1, 2, 3],
            [4, 5, 6]])
-
+    
     >>> np.r_['0,2,0', [1,2,3], [4,5,6]]
     array([[1],
            [2],
@@ -506,12 +528,9 @@
     array([[1, 4],
            [2, 5],
            [3, 6]])
-
-    Using 'r' or 'c' as a first string argument creates a matrix.
-
+    
     >>> np.r_['r',[1,2,3], [4,5,6]]
     matrix([[1, 2, 3, 4, 5, 6]])
-
     """
 
     def __init__(self):
@@ -520,19 +539,23 @@
 r_ = RClass()
 
 class CClass(AxisConcatenator):
-    """
-    Translates slice objects to concatenation along the second axis.
-
+    """Translates slice objects to concatenation along the second axis.
+    
     This is short-hand for ``np.r_['-1,2,0', index expression]``, which is
     useful because of its common occurrence. In particular, arrays will be
     stacked along their last axis after being upgraded to at least 2-D with
     1's post-pended to the shape (column vectors made out of 1-D arrays).
-    
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     See Also
     --------
     column_stack : Stack 1-D arrays as columns into a 2-D array.
     r_ : For more detailed documentation.
-
     Examples
     --------
     >>> np.c_[np.array([1,2,3]), np.array([4,5,6])]
@@ -541,7 +564,6 @@
            [3, 6]])
     >>> np.c_[np.array([[1,2,3]]), 0, 0, np.array([[4,5,6]])]
     array([[1, 2, 3, ..., 4, 5, 6]])
-
     """
 
     def __init__(self):
@@ -553,20 +575,21 @@
 
 @set_module('numpy')
 class ndenumerate:
-    """
-    Multidimensional index iterator.
-
+    """Multidimensional index iterator.
+    
     Return an iterator yielding pairs of array coordinates and values.
 
     Parameters
     ----------
     arr : ndarray
-      Input array.
+        Input array.
+
+    Returns
+    -------
 
     See Also
     --------
     ndindex, flatiter
-
     Examples
     --------
     >>> a = np.array([[1, 2], [3, 4]])
@@ -576,7 +599,6 @@
     (0, 1) 2
     (1, 0) 3
     (1, 1) 4
-
     """
 
     def __init__(self, arr):
@@ -602,9 +624,8 @@
 
 @set_module('numpy')
 class ndindex:
-    """
-    An N-dimensional iterator object to index arrays.
-
+    """An N-dimensional iterator object to index arrays.
+    
     Given the shape of an array, an `ndindex` instance iterates over
     the N-dimensional index of the array. At each iteration a tuple
     of indices is returned, the last dimension is iterated over first.
@@ -612,12 +633,14 @@
     Parameters
     ----------
     `*args` : ints
-      The size of each dimension of the array.
+        The size of each dimension of the array.
+
+    Returns
+    -------
 
     See Also
     --------
     ndenumerate, flatiter
-
     Examples
     --------
     >>> for index in np.ndindex(3, 2, 1):
@@ -628,7 +651,6 @@
     (1, 1, 0)
     (2, 0, 0)
     (2, 1, 0)
-
     """
 
     def __init__(self, *shape):
@@ -643,10 +665,16 @@
         return self
 
     def ndincr(self):
-        """
-        Increment the multi-dimensional index by one.
-
+        """Increment the multi-dimensional index by one.
+        
         This method is for backward compatibility only: do not use.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         next(self)
 
@@ -678,13 +706,12 @@
 #
 
 class IndexExpression:
-    """
-    A nicer way to build up index tuples for arrays.
-
+    """A nicer way to build up index tuples for arrays.
+    
     .. note::
        Use one of the two predefined instances `index_exp` or `s_`
        rather than directly using `IndexExpression`.
-
+    
     For any index combination, including slicing and axis insertion,
     ``a[indices]`` is the same as ``a[np.index_exp[indices]]`` for any
     array `a`. However, ``np.index_exp[indices]`` can be used anywhere
@@ -696,29 +723,29 @@
     maketuple : bool
         If True, always returns a tuple.
 
+    Returns
+    -------
+
     See Also
     --------
     index_exp : Predefined instance that always returns a tuple:
        `index_exp = IndexExpression(maketuple=True)`.
     s_ : Predefined instance without tuple conversion:
        `s_ = IndexExpression(maketuple=False)`.
-
     Notes
     -----
     You can do all this with `slice()` plus a few special objects,
     but there's a lot to remember and this version is simpler because
     it uses the standard array indexing syntax.
-
     Examples
     --------
     >>> np.s_[2::2]
     slice(2, None, 2)
     >>> np.index_exp[2::2]
     (slice(2, None, 2),)
-
+    
     >>> np.array([0, 1, 2, 3, 4])[np.s_[2::2]]
     array([2, 4])
-
     """
 
     def __init__(self, maketuple):
@@ -741,13 +768,28 @@
 
 
 def _fill_diagonal_dispatcher(a, val, wrap=None):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    val :
+        
+    wrap :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (a,)
 
 
 @array_function_dispatch(_fill_diagonal_dispatcher)
 def fill_diagonal(a, val, wrap=False):
     """Fill the main diagonal of the given array of any dimensionality.
-
+    
     For an array `a` with ``a.ndim >= 2``, the diagonal is the list of
     locations with indices ``a[i, ..., i]`` all identical. This function
     modifies the input array in-place, it does not return a value.
@@ -755,45 +797,58 @@
     Parameters
     ----------
     a : array, at least 2-D.
-      Array whose diagonal is to be filled, it gets modified in-place.
-
+        Array whose diagonal is to be filled, it gets modified in-place.
     val : scalar
-      Value to be written on the diagonal, its type must be compatible with
-      that of the array a.
-
+        Value to be written on the diagonal, its type must be compatible with
+        that of the array a.
     wrap : bool
-      For tall matrices in NumPy version up to 1.6.2, the
-      diagonal "wrapped" after N columns. You can have this behavior
-      with this option. This affects only tall matrices.
+        For tall matrices in NumPy version up to 1.6.2, the
+        diagonal "wrapped" after N columns. You can have this behavior
+        with this option. This affects only tall matrices. (Default value = False)
+
+    Returns
+    -------
 
     See also
     --------
     diag_indices, diag_indices_from
-
     Notes
     -----
     .. versionadded:: 1.4.0
-
+    
     This functionality can be obtained via `diag_indices`, but internally
     this version uses a much faster implementation that never constructs the
     indices and uses simple slicing.
-
     Examples
     --------
+    
+    The same function can operate on a 4-D array:
+    
+    
+    We only show a few blocks for clarity:
+    
+    
+    The wrap option affects only tall matrices:
+    
+    
+    
+    
+    The anti-diagonal can be filled by reversing the order of elements
+    using either `numpy.flipud` or `numpy.fliplr`.
+    
+    
+    Note that the order in which the diagonal is filled varies depending
+    on the flip function.
     >>> a = np.zeros((3, 3), int)
     >>> np.fill_diagonal(a, 5)
     >>> a
     array([[5, 0, 0],
            [0, 5, 0],
            [0, 0, 5]])
-
-    The same function can operate on a 4-D array:
-
+    
     >>> a = np.zeros((3, 3, 3, 3), int)
     >>> np.fill_diagonal(a, 4)
-
-    We only show a few blocks for clarity:
-
+    
     >>> a[0, 0]
     array([[4, 0, 0],
            [0, 0, 0],
@@ -806,9 +861,7 @@
     array([[0, 0, 0],
            [0, 0, 0],
            [0, 0, 4]])
-
-    The wrap option affects only tall matrices:
-
+    
     >>> # tall matrices no wrap
     >>> a = np.zeros((5, 3), int)
     >>> np.fill_diagonal(a, 4)
@@ -818,7 +871,7 @@
            [0, 0, 4],
            [0, 0, 0],
            [0, 0, 0]])
-
+    
     >>> # tall matrices wrap
     >>> a = np.zeros((5, 3), int)
     >>> np.fill_diagonal(a, 4, wrap=True)
@@ -828,7 +881,7 @@
            [0, 0, 4],
            [0, 0, 0],
            [4, 0, 0]])
-
+    
     >>> # wide matrices
     >>> a = np.zeros((3, 5), int)
     >>> np.fill_diagonal(a, 4, wrap=True)
@@ -836,10 +889,7 @@
     array([[4, 0, 0, 0, 0],
            [0, 4, 0, 0, 0],
            [0, 0, 4, 0, 0]])
-
-    The anti-diagonal can be filled by reversing the order of elements
-    using either `numpy.flipud` or `numpy.fliplr`.
-
+    
     >>> a = np.zeros((3, 3), int);
     >>> np.fill_diagonal(np.fliplr(a), [1,2,3])  # Horizontal flip
     >>> a
@@ -851,9 +901,6 @@
     array([[0, 0, 3],
            [0, 2, 0],
            [1, 0, 0]])
-
-    Note that the order in which the diagonal is filled varies depending
-    on the flip function.
     """
     if a.ndim < 2:
         raise ValueError("array must be at least 2-d")
@@ -878,9 +925,8 @@
 
 @set_module('numpy')
 def diag_indices(n, ndim=2):
-    """
-    Return the indices to access the main diagonal of an array.
-
+    """Return the indices to access the main diagonal of an array.
+    
     This returns a tuple of indices that can be used to access the main
     diagonal of an array `a` with ``a.ndim >= 2`` dimensions and shape
     (n, n, ..., n). For ``a.ndim = 2`` this is the usual diagonal, for
@@ -890,24 +936,29 @@
     Parameters
     ----------
     n : int
-      The size, along each dimension, of the arrays for which the returned
-      indices can be used.
-
+        The size, along each dimension, of the arrays for which the returned
+        indices can be used.
     ndim : int, optional
-      The number of dimensions.
+        The number of dimensions. (Default value = 2)
+
+    Returns
+    -------
 
     See also
     --------
     diag_indices_from
-
     Notes
     -----
     .. versionadded:: 1.4.0
-
     Examples
     --------
     Create a set of indices to access the diagonal of a (4, 4) array:
-
+    
+    
+    Now, we create indices to manipulate a 3-D array:
+    
+    
+    And use it to set the diagonal of an array of zeros to 1:
     >>> di = np.diag_indices(4)
     >>> di
     (array([0, 1, 2, 3]), array([0, 1, 2, 3]))
@@ -923,15 +974,11 @@
            [  4, 100,   6,   7],
            [  8,   9, 100,  11],
            [ 12,  13,  14, 100]])
-
-    Now, we create indices to manipulate a 3-D array:
-
+    
     >>> d3 = np.diag_indices(2, 3)
     >>> d3
     (array([0, 1]), array([0, 1]), array([0, 1]))
-
-    And use it to set the diagonal of an array of zeros to 1:
-
+    
     >>> a = np.zeros((2, 2, 2), dtype=int)
     >>> a[d3] = 1
     >>> a
@@ -939,35 +986,46 @@
             [0, 0]],
            [[0, 0],
             [0, 1]]])
-
     """
     idx = arange(n)
     return (idx,) * ndim
 
 
 def _diag_indices_from(arr):
+    """
+
+    Parameters
+    ----------
+    arr :
+        
+
+    Returns
+    -------
+
+    """
     return (arr,)
 
 
 @array_function_dispatch(_diag_indices_from)
 def diag_indices_from(arr):
-    """
-    Return the indices to access the main diagonal of an n-dimensional array.
-
+    """Return the indices to access the main diagonal of an n-dimensional array.
+    
     See `diag_indices` for full details.
 
     Parameters
     ----------
     arr : array, at least 2-D
+        
+
+    Returns
+    -------
 
     See Also
     --------
     diag_indices
-
     Notes
     -----
     .. versionadded:: 1.4.0
-
     """
 
     if not arr.ndim >= 2:
