# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/lib/financial.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/lib/financial.py
@@ -37,6 +37,17 @@
                 'finish':0}
 
 def _convert_when(when):
+    """
+
+    Parameters
+    ----------
+    when :
+        
+
+    Returns
+    -------
+
+    """
     #Test to see if when has already been converted to ndarray
     #This will happen if one function calls another, for example ppmt
     if isinstance(when, np.ndarray):
@@ -48,6 +59,25 @@
 
 
 def _fv_dispatcher(rate, nper, pmt, pv, when=None):
+    """
+
+    Parameters
+    ----------
+    rate :
+        
+    nper :
+        
+    pmt :
+        
+    pv :
+        
+    when :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     warnings.warn(_depmsg.format(name='fv'),
                   DeprecationWarning, stacklevel=3)
     return (rate, nper, pmt, pv)
@@ -55,15 +85,14 @@
 
 @array_function_dispatch(_fv_dispatcher)
 def fv(rate, nper, pmt, pv, when='end'):
-    """
-    Compute the future value.
-
+    """Compute the future value.
+    
     .. deprecated:: 1.18
-
+    
        `fv` is deprecated; for details, see NEP 32 [1]_.
        Use the corresponding function in the numpy-financial library,
        https://pypi.org/project/numpy-financial.
-
+    
     Given:
      * a present value, `pv`
      * an interest `rate` compounded once per period, of which
@@ -72,7 +101,7 @@
      * a (fixed) payment, `pmt`, paid either
      * at the beginning (`when` = {'begin', 1}) or the end
        (`when` = {'end', 0}) of each period
-
+    
     Return:
        the value at the end of the `nper` periods
 
@@ -100,15 +129,14 @@
     Notes
     -----
     The future value is computed by solving the equation::
-
+    
      fv +
      pv*(1+rate)**nper +
      pmt*(1 + rate*when)/rate*((1 + rate)**nper - 1) == 0
-
+    
     or, when ``rate == 0``::
-
+    
      fv + pv + pmt * nper == 0
-
     References
     ----------
     .. [1] NumPy Enhancement Proposal (NEP) 32,
@@ -121,28 +149,26 @@
        Available:
        http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formula
        OpenDocument-formula-20090508.odt
-
-
+    
     Examples
     --------
     What is the future value after 10 years of saving $100 now, with
     an additional monthly savings of $100.  Assume the interest rate is
     5% (annually) compounded monthly?
-
-    >>> np.fv(0.05/12, 10*12, -100, -100)
-    15692.928894335748
-
+    
+    
     By convention, the negative sign represents cash flow out (i.e. money not
     available today).  Thus, saving $100 a month at 5% annual interest leads
     to $15,692.93 available to spend in 10 years.
-
+    
     If any input is array_like, returns an array of equal shape.  Let's
     compare different interest rates from the example above.
-
+    >>> np.fv(0.05/12, 10*12, -100, -100)
+    15692.928894335748
+    
     >>> a = np.array((0.05, 0.06, 0.07))/12
     >>> np.fv(a, 10*12, -100, -100)
     array([ 15692.92889434,  16569.87435405,  17509.44688102]) # may vary
-
     """
     when = _convert_when(when)
     (rate, nper, pmt, pv, when) = map(np.asarray, [rate, nper, pmt, pv, when])
@@ -153,6 +179,25 @@
 
 
 def _pmt_dispatcher(rate, nper, pv, fv=None, when=None):
+    """
+
+    Parameters
+    ----------
+    rate :
+        
+    nper :
+        
+    pv :
+        
+    fv :
+         (Default value = None)
+    when :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     warnings.warn(_depmsg.format(name='pmt'),
                   DeprecationWarning, stacklevel=3)
     return (rate, nper, pv, fv)
@@ -160,15 +205,14 @@
 
 @array_function_dispatch(_pmt_dispatcher)
 def pmt(rate, nper, pv, fv=0, when='end'):
-    """
-    Compute the payment against loan principal plus interest.
-
+    """Compute the payment against loan principal plus interest.
+    
     .. deprecated:: 1.18
-
+    
        `pmt` is deprecated; for details, see NEP 32 [1]_.
        Use the corresponding function in the numpy-financial library,
        https://pypi.org/project/numpy-financial.
-
+    
     Given:
      * a present value, `pv` (e.g., an amount borrowed)
      * a future value, `fv` (e.g., 0)
@@ -178,7 +222,7 @@
      * and (optional) specification of whether payment is made
        at the beginning (`when` = {'begin', 1}) or the end
        (`when` = {'end', 0}) of each period
-
+    
     Return:
        the (fixed) periodic payment.
 
@@ -193,7 +237,7 @@
     fv : array_like,  optional
         Future value (default = 0)
     when : {{'begin', 1}, {'end', 0}}, {string, int}
-        When payments are due ('begin' (1) or 'end' (0))
+        When payments are due ('begin' (1) or 'end' (0)) (Default value = 'end')
 
     Returns
     -------
@@ -206,24 +250,23 @@
     Notes
     -----
     The payment is computed by solving the equation::
-
+    
      fv +
      pv*(1 + rate)**nper +
      pmt*(1 + rate*when)/rate*((1 + rate)**nper - 1) == 0
-
+    
     or, when ``rate == 0``::
-
+    
       fv + pv + pmt * nper == 0
-
+    
     for ``pmt``.
-
+    
     Note that computing a monthly mortgage payment is only
     one use for this function.  For example, pmt returns the
     periodic deposit one must make to achieve a specified
     future balance given an initial deposit, a fixed,
     periodically compounded interest rate, and the total
     number of periods.
-
     References
     ----------
     .. [1] NumPy Enhancement Proposal (NEP) 32,
@@ -236,19 +279,17 @@
        Available:
        http://www.oasis-open.org/committees/documents.php
        ?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt
-
     Examples
     --------
     What is the monthly payment needed to pay off a $200,000 loan in 15
     years at an annual interest rate of 7.5%?
-
-    >>> np.pmt(0.075/12, 12*15, 200000)
-    -1854.0247200054619
-
+    
+    
     In order to pay-off (i.e., have a future-value of 0) the $200,000 obtained
     today, a monthly payment of $1,854.02 would be required.  Note that this
     example illustrates usage of `fv` having a default value of 0.
-
+    >>> np.pmt(0.075/12, 12*15, 200000)
+    -1854.0247200054619
     """
     when = _convert_when(when)
     (rate, nper, pv, fv, when) = map(np.array, [rate, nper, pv, fv, when])
@@ -261,6 +302,25 @@
 
 
 def _nper_dispatcher(rate, pmt, pv, fv=None, when=None):
+    """
+
+    Parameters
+    ----------
+    rate :
+        
+    pmt :
+        
+    pv :
+        
+    fv :
+         (Default value = None)
+    when :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     warnings.warn(_depmsg.format(name='nper'),
                   DeprecationWarning, stacklevel=3)
     return (rate, pmt, pv, fv)
@@ -268,15 +328,14 @@
 
 @array_function_dispatch(_nper_dispatcher)
 def nper(rate, pmt, pv, fv=0, when='end'):
-    """
-    Compute the number of periodic payments.
-
+    """Compute the number of periodic payments.
+    
     .. deprecated:: 1.18
-
+    
        `nper` is deprecated; for details, see NEP 32 [1]_.
        Use the corresponding function in the numpy-financial library,
        https://pypi.org/project/numpy-financial.
-
+    
     :class:`decimal.Decimal` type is not supported.
 
     Parameters
@@ -288,38 +347,39 @@
     pv : array_like
         Present value
     fv : array_like, optional
-        Future value
+        Future value (Default value = 0)
     when : {{'begin', 1}, {'end', 0}}, {string, int}, optional
-        When payments are due ('begin' (1) or 'end' (0))
+        When payments are due ('begin' (1) or 'end' (0)) (Default value = 'end')
+
+    Returns
+    -------
 
     Notes
     -----
     The number of periods ``nper`` is computed by solving the equation::
-
+    
      fv + pv*(1+rate)**nper + pmt*(1+rate*when)/rate*((1+rate)**nper-1) = 0
-
+    
     but if ``rate = 0`` then::
-
+    
      fv + pv + pmt*nper = 0
-
     References
     ----------
     .. [1] NumPy Enhancement Proposal (NEP) 32,
        https://numpy.org/neps/nep-0032-remove-financial-functions.html
-
     Examples
     --------
     If you only had $150/month to pay towards the loan, how long would it take
     to pay-off a loan of $8,000 at 7% annual interest?
-
+    
+    
+    So, over 64 months would be required to pay off the loan.
+    
+    The same analysis could be done with several different interest rates
+    and/or payments and/or total amounts to produce an entire table.
     >>> print(np.round(np.nper(0.07/12, -150, 8000), 5))
     64.07335
-
-    So, over 64 months would be required to pay off the loan.
-
-    The same analysis could be done with several different interest rates
-    and/or payments and/or total amounts to produce an entire table.
-
+    
     >>> np.nper(*(np.ogrid[0.07/12: 0.08/12: 0.01/12,
     ...                    -150   : -99     : 50    ,
     ...                    8000   : 9001    : 1000]))
@@ -327,7 +387,6 @@
             [108.07548412, 127.99022654]],
            [[ 66.12443902,  76.87897353],
             [114.70165583, 137.90124779]]])
-
     """
     when = _convert_when(when)
     (rate, pmt, pv, fv, when) = map(np.asarray, [rate, pmt, pv, fv, when])
@@ -348,6 +407,27 @@
 
 
 def _ipmt_dispatcher(rate, per, nper, pv, fv=None, when=None):
+    """
+
+    Parameters
+    ----------
+    rate :
+        
+    per :
+        
+    nper :
+        
+    pv :
+        
+    fv :
+         (Default value = None)
+    when :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     warnings.warn(_depmsg.format(name='ipmt'),
                   DeprecationWarning, stacklevel=3)
     return (rate, per, nper, pv, fv)
@@ -355,11 +435,10 @@
 
 @array_function_dispatch(_ipmt_dispatcher)
 def ipmt(rate, per, nper, pv, fv=0, when='end'):
-    """
-    Compute the interest portion of a payment.
-
+    """Compute the interest portion of a payment.
+    
     .. deprecated:: 1.18
-
+    
        `ipmt` is deprecated; for details, see NEP 32 [1]_.
        Use the corresponding function in the numpy-financial library,
        https://pypi.org/project/numpy-financial.
@@ -376,7 +455,7 @@
     pv : scalar or array_like of shape(M, )
         Present value
     fv : scalar or array_like of shape(M, ), optional
-        Future value
+        Future value (Default value = 0)
     when : {{'begin', 1}, {'end', 0}}, {string, int}, optional
         When payments are due ('begin' (1) or 'end' (0)).
         Defaults to {'end', 0}.
@@ -392,39 +471,37 @@
     See Also
     --------
     ppmt, pmt, pv
-
     Notes
     -----
     The total payment is made up of payment against principal plus interest.
-
+    
     ``pmt = ppmt + ipmt``
-
     References
     ----------
     .. [1] NumPy Enhancement Proposal (NEP) 32,
        https://numpy.org/neps/nep-0032-remove-financial-functions.html
-
     Examples
     --------
     What is the amortization schedule for a 1 year loan of $2500 at
     8.24% interest per year compounded monthly?
-
-    >>> principal = 2500.00
-
+    
+    
     The 'per' variable represents the periods of the loan.  Remember that
     financial equations start the period count at 1!
-
+    
+    
+    Each element of the sum of the 'ipmt' and 'ppmt' arrays should equal
+    'pmt'.
+    >>> principal = 2500.00
+    
     >>> per = np.arange(1*12) + 1
     >>> ipmt = np.ipmt(0.0824/12, per, 1*12, principal)
     >>> ppmt = np.ppmt(0.0824/12, per, 1*12, principal)
-
-    Each element of the sum of the 'ipmt' and 'ppmt' arrays should equal
-    'pmt'.
-
+    
     >>> pmt = np.pmt(0.0824/12, 1*12, principal)
     >>> np.allclose(ipmt + ppmt, pmt)
     True
-
+    
     >>> fmt = '{0:2d} {1:8.2f} {2:8.2f} {3:8.2f}'
     >>> for payment in per:
     ...     index = payment - 1
@@ -442,11 +519,10 @@
     10  -213.32    -4.42   431.05
     11  -214.79    -2.96   216.26
     12  -216.26    -1.49    -0.00
-
+    
     >>> interestpd = np.sum(ipmt)
     >>> np.round(interestpd, 2)
     -112.98
-
     """
     when = _convert_when(when)
     rate, per, nper, pv, fv, when = np.broadcast_arrays(rate, per, nper,
@@ -462,16 +538,53 @@
 
 
 def _rbl(rate, per, pmt, pv, when):
-    """
-    This function is here to simply have a different name for the 'fv'
+    """This function is here to simply have a different name for the 'fv'
     function to not interfere with the 'fv' keyword argument within the 'ipmt'
     function.  It is the 'remaining balance on loan' which might be useful as
     its own function, but is easily calculated with the 'fv' function.
+
+    Parameters
+    ----------
+    rate :
+        
+    per :
+        
+    pmt :
+        
+    pv :
+        
+    when :
+        
+
+    Returns
+    -------
+
     """
     return fv(rate, (per - 1), pmt, pv, when)
 
 
 def _ppmt_dispatcher(rate, per, nper, pv, fv=None, when=None):
+    """
+
+    Parameters
+    ----------
+    rate :
+        
+    per :
+        
+    nper :
+        
+    pv :
+        
+    fv :
+         (Default value = None)
+    when :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     warnings.warn(_depmsg.format(name='ppmt'),
                   DeprecationWarning, stacklevel=3)
     return (rate, per, nper, pv, fv)
@@ -479,11 +592,10 @@
 
 @array_function_dispatch(_ppmt_dispatcher)
 def ppmt(rate, per, nper, pv, fv=0, when='end'):
-    """
-    Compute the payment against loan principal.
-
+    """Compute the payment against loan principal.
+    
     .. deprecated:: 1.18
-
+    
        `ppmt` is deprecated; for details, see NEP 32 [1]_.
        Use the corresponding function in the numpy-financial library,
        https://pypi.org/project/numpy-financial.
@@ -500,25 +612,45 @@
     pv : array_like
         Present value
     fv : array_like, optional
-        Future value
+        Future value (Default value = 0)
     when : {{'begin', 1}, {'end', 0}}, {string, int}
-        When payments are due ('begin' (1) or 'end' (0))
+        When payments are due ('begin' (1) or 'end' (0)) (Default value = 'end')
+
+    Returns
+    -------
 
     See Also
     --------
     pmt, pv, ipmt
-
     References
     ----------
     .. [1] NumPy Enhancement Proposal (NEP) 32,
        https://numpy.org/neps/nep-0032-remove-financial-functions.html
-
     """
     total = pmt(rate, nper, pv, fv, when)
     return total - ipmt(rate, per, nper, pv, fv, when)
 
 
 def _pv_dispatcher(rate, nper, pmt, fv=None, when=None):
+    """
+
+    Parameters
+    ----------
+    rate :
+        
+    nper :
+        
+    pmt :
+        
+    fv :
+         (Default value = None)
+    when :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     warnings.warn(_depmsg.format(name='pv'),
                   DeprecationWarning, stacklevel=3)
     return (rate, nper, nper, pv, fv)
@@ -526,15 +658,14 @@
 
 @array_function_dispatch(_pv_dispatcher)
 def pv(rate, nper, pmt, fv=0, when='end'):
-    """
-    Compute the present value.
-
+    """Compute the present value.
+    
     .. deprecated:: 1.18
-
+    
        `pv` is deprecated; for details, see NEP 32 [1]_.
        Use the corresponding function in the numpy-financial library,
        https://pypi.org/project/numpy-financial.
-
+    
     Given:
      * a future value, `fv`
      * an interest `rate` compounded once per period, of which
@@ -543,7 +674,7 @@
      * a (fixed) payment, `pmt`, paid either
      * at the beginning (`when` = {'begin', 1}) or the end
        (`when` = {'end', 0}) of each period
-
+    
     Return:
        the value now
 
@@ -556,9 +687,9 @@
     pmt : array_like
         Payment
     fv : array_like, optional
-        Future value
+        Future value (Default value = 0)
     when : {{'begin', 1}, {'end', 0}}, {string, int}, optional
-        When payments are due ('begin' (1) or 'end' (0))
+        When payments are due ('begin' (1) or 'end' (0)) (Default value = 'end')
 
     Returns
     -------
@@ -568,17 +699,16 @@
     Notes
     -----
     The present value is computed by solving the equation::
-
+    
      fv +
      pv*(1 + rate)**nper +
      pmt*(1 + rate*when)/rate*((1 + rate)**nper - 1) = 0
-
+    
     or, when ``rate = 0``::
-
+    
      fv + pv + pmt * nper = 0
-
+    
     for `pv`, which is then returned.
-
     References
     ----------
     .. [1] NumPy Enhancement Proposal (NEP) 32,
@@ -591,33 +721,32 @@
        Available:
        http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formula
        OpenDocument-formula-20090508.odt
-
     Examples
     --------
     What is the present value (e.g., the initial investment)
     of an investment that needs to total $15692.93
     after 10 years of saving $100 every month?  Assume the
     interest rate is 5% (annually) compounded monthly.
-
-    >>> np.pv(0.05/12, 10*12, -100, 15692.93)
-    -100.00067131625819
-
+    
+    
     By convention, the negative sign represents cash flow out
     (i.e., money not available today).  Thus, to end up with
     $15,692.93 in 10 years saving $100 a month at 5% annual
     interest, one's initial deposit should also be $100.
-
+    
     If any input is array_like, ``pv`` returns an array of equal shape.
     Let's compare different interest rates in the example above:
-
+    
+    
+    So, to end up with the same $15692.93 under the same $100 per month
+    "savings plan," for annual interest rates of 4% and 3%, one would
+    need initial investments of $649.27 and $1273.79, respectively.
+    >>> np.pv(0.05/12, 10*12, -100, 15692.93)
+    -100.00067131625819
+    
     >>> a = np.array((0.05, 0.04, 0.03))/12
     >>> np.pv(a, 10*12, -100, 15692.93)
     array([ -100.00067132,  -649.26771385, -1273.78633713]) # may vary
-
-    So, to end up with the same $15692.93 under the same $100 per month
-    "savings plan," for annual interest rates of 4% and 3%, one would
-    need initial investments of $649.27 and $1273.79, respectively.
-
     """
     when = _convert_when(when)
     (rate, nper, pmt, fv, when) = map(np.asarray, [rate, nper, pmt, fv, when])
@@ -631,6 +760,27 @@
 #  p*((r + 1)^n - 1)*w/r)
 
 def _g_div_gp(r, n, p, x, y, w):
+    """
+
+    Parameters
+    ----------
+    r :
+        
+    n :
+        
+    p :
+        
+    x :
+        
+    y :
+        
+    w :
+        
+
+    Returns
+    -------
+
+    """
     t1 = (r+1)**n
     t2 = (r+1)**(n-1)
     return ((y + t1*x + p*(t1 - 1)*(r*w + 1)/r) /
@@ -640,6 +790,31 @@
 
 def _rate_dispatcher(nper, pmt, pv, fv, when=None, guess=None, tol=None,
                      maxiter=None):
+    """
+
+    Parameters
+    ----------
+    nper :
+        
+    pmt :
+        
+    pv :
+        
+    fv :
+        
+    when :
+         (Default value = None)
+    guess :
+         (Default value = None)
+    tol :
+         (Default value = None)
+    maxiter :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     warnings.warn(_depmsg.format(name='rate'),
                   DeprecationWarning, stacklevel=3)
     return (nper, pmt, pv, fv)
@@ -654,11 +829,10 @@
 #  g'(r) is the derivative with respect to r.
 @array_function_dispatch(_rate_dispatcher)
 def rate(nper, pmt, pv, fv, when='end', guess=None, tol=None, maxiter=100):
-    """
-    Compute the rate of interest per period.
-
+    """Compute the rate of interest per period.
+    
     .. deprecated:: 1.18
-
+    
        `rate` is deprecated; for details, see NEP 32 [1]_.
        Use the corresponding function in the numpy-financial library,
        https://pypi.org/project/numpy-financial.
@@ -674,23 +848,25 @@
     fv : array_like
         Future value
     when : {{'begin', 1}, {'end', 0}}, {string, int}, optional
-        When payments are due ('begin' (1) or 'end' (0))
+        When payments are due ('begin' (1) or 'end' (0)) (Default value = 'end')
     guess : Number, optional
         Starting guess for solving the rate of interest, default 0.1
     tol : Number, optional
         Required tolerance for the solution, default 1e-6
     maxiter : int, optional
-        Maximum iterations in finding the solution
+        Maximum iterations in finding the solution (Default value = 100)
+
+    Returns
+    -------
 
     Notes
     -----
     The rate of interest is computed by iteratively solving the
     (non-linear) equation::
-
+    
      fv + pv*(1+rate)**nper + pmt*(1+rate*when)/rate * ((1+rate)**nper - 1) = 0
-
+    
     for ``rate``.
-
     References
     ----------
     .. [1] NumPy Enhancement Proposal (NEP) 32,
@@ -703,7 +879,6 @@
        Available:
        http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formula
        OpenDocument-formula-20090508.odt
-
     """
     when = _convert_when(when)
     default_type = Decimal if isinstance(pmt, Decimal) else float
@@ -735,6 +910,17 @@
 
 
 def _irr_dispatcher(values):
+    """
+
+    Parameters
+    ----------
+    values :
+        
+
+    Returns
+    -------
+
+    """
     warnings.warn(_depmsg.format(name='irr'),
                   DeprecationWarning, stacklevel=3)
     return (values,)
@@ -742,19 +928,18 @@
 
 @array_function_dispatch(_irr_dispatcher)
 def irr(values):
-    """
-    Return the Internal Rate of Return (IRR).
-
+    """Return the Internal Rate of Return (IRR).
+    
     .. deprecated:: 1.18
-
+    
        `irr` is deprecated; for details, see NEP 32 [1]_.
        Use the corresponding function in the numpy-financial library,
        https://pypi.org/project/numpy-financial.
-
+    
     This is the "average" periodically compounded rate of return
     that gives a net present value of 0.0; for a more complete explanation,
     see Notes below.
-
+    
     :class:`decimal.Decimal` type is not supported.
 
     Parameters
@@ -780,22 +965,20 @@
     compounding and the periodic withdrawals, the "average" rate of return
     is neither simply 0.73/4 nor (1.73)^0.25-1.  Rather, it is the solution
     (for :math:`r`) of the equation:
-
+    
     .. math:: -100 + \\frac{39}{1+r} + \\frac{59}{(1+r)^2}
      + \\frac{55}{(1+r)^3} + \\frac{20}{(1+r)^4} = 0
-
+    
     In general, for `values` :math:`= [v_0, v_1, ... v_M]`,
     irr is the solution of the equation: [2]_
-
+    
     .. math:: \\sum_{t=0}^M{\\frac{v_t}{(1+irr)^{t}}} = 0
-
     References
     ----------
     .. [1] NumPy Enhancement Proposal (NEP) 32,
        https://numpy.org/neps/nep-0032-remove-financial-functions.html
     .. [2] L. J. Gitman, "Principles of Managerial Finance, Brief," 3rd ed.,
        Addison-Wesley, 2003, pg. 348.
-
     Examples
     --------
     >>> round(np.irr([-100, 39, 59, 55, 20]), 5)
@@ -808,7 +991,6 @@
     0.06206
     >>> round(np.irr([-5, 10.5, 1, -8, 1]), 5)
     0.0886
-
     """
     # `np.roots` call is why this function does not support Decimal type.
     #
@@ -828,6 +1010,19 @@
 
 
 def _npv_dispatcher(rate, values):
+    """
+
+    Parameters
+    ----------
+    rate :
+        
+    values :
+        
+
+    Returns
+    -------
+
+    """
     warnings.warn(_depmsg.format(name='npv'),
                   DeprecationWarning, stacklevel=3)
     return (values,)
@@ -835,11 +1030,10 @@
 
 @array_function_dispatch(_npv_dispatcher)
 def npv(rate, values):
-    """
-    Returns the NPV (Net Present Value) of a cash flow series.
-
+    """Returns the NPV (Net Present Value) of a cash flow series.
+    
     .. deprecated:: 1.18
-
+    
        `npv` is deprecated; for details, see NEP 32 [1]_.
        Use the corresponding function in the numpy-financial library,
        https://pypi.org/project/numpy-financial.
@@ -862,56 +1056,75 @@
     out : float
         The NPV of the input cash flow series `values` at the discount
         `rate`.
-
     Warnings
+        
     --------
+        
     ``npv`` considers a series of cashflows starting in the present (t = 0).
+        
     NPV can also be defined with a series of future cashflows, paid at the
+        
     end, rather than the start, of each period. If future cashflows are used,
+        
     the first cashflow `values[0]` must be zeroed and added to the net
+        
     present value of the future cashflows. This is demonstrated in the
+        
     examples.
+        
 
     Notes
     -----
     Returns the result of: [2]_
-
+    
     .. math :: \\sum_{t=0}^{M-1}{\\frac{values_t}{(1+rate)^{t}}}
-
     References
     ----------
     .. [1] NumPy Enhancement Proposal (NEP) 32,
        https://numpy.org/neps/nep-0032-remove-financial-functions.html
     .. [2] L. J. Gitman, "Principles of Managerial Finance, Brief," 3rd ed.,
        Addison-Wesley, 2003, pg. 346.
-
     Examples
     --------
     Consider a potential project with an initial investment of $40 000 and
     projected cashflows of $5 000, $8 000, $12 000 and $30 000 at the end of
     each period discounted at a rate of 8% per period. To find the project's
     net present value:
-
-    >>> rate, cashflows = 0.08, [-40_000, 5_000, 8_000, 12_000, 30_000]
-    >>> np.npv(rate, cashflows).round(5)
-    3065.22267
-
+    
+    
     It may be preferable to split the projected cashflow into an initial
     investment and expected future cashflows. In this case, the value of
     the initial cashflow is zero and the initial investment is later added
     to the future cashflows net present value:
-
+    >>> rate, cashflows = 0.08, [-40_000, 5_000, 8_000, 12_000, 30_000]
+    >>> np.npv(rate, cashflows).round(5)
+    3065.22267
+    
     >>> initial_cashflow = cashflows[0]
     >>> cashflows[0] = 0
     >>> np.round(np.npv(rate, cashflows) + initial_cashflow, 5)
     3065.22267
-
     """
     values = np.asarray(values)
     return (values / (1+rate)**np.arange(0, len(values))).sum(axis=0)
 
 
 def _mirr_dispatcher(values, finance_rate, reinvest_rate):
+    """
+
+    Parameters
+    ----------
+    values :
+        
+    finance_rate :
+        
+    reinvest_rate :
+        
+
+    Returns
+    -------
+
+    """
     warnings.warn(_depmsg.format(name='mirr'),
                   DeprecationWarning, stacklevel=3)
     return (values,)
@@ -919,11 +1132,10 @@
 
 @array_function_dispatch(_mirr_dispatcher)
 def mirr(values, finance_rate, reinvest_rate):
-    """
-    Modified internal rate of return.
-
+    """Modified internal rate of return.
+    
     .. deprecated:: 1.18
-
+    
        `mirr` is deprecated; for details, see NEP 32 [1]_.
        Use the corresponding function in the numpy-financial library,
        https://pypi.org/project/numpy-financial.
