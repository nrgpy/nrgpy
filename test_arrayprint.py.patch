# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_arrayprint.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_arrayprint.py
@@ -13,11 +13,14 @@
 import textwrap
 
 class TestArrayRepr:
+    """ """
     def test_nan_inf(self):
+        """ """
         x = np.array([np.nan, np.inf])
         assert_equal(repr(x), 'array([nan, inf])')
 
     def test_subclass(self):
+        """ """
         class sub(np.ndarray): pass
 
         # one dimensional
@@ -39,7 +42,9 @@
 
     @pytest.mark.xfail(reason="See gh-10544")
     def test_object_subclass(self):
+            """ """
         class sub(np.ndarray):
+            """ """
             def __new__(cls, inp):
                 obj = np.asarray(inp).view(cls)
                 return obj
@@ -59,9 +64,11 @@
         assert_equal(str(x), '[None sub([None, None], dtype=object)]')
 
     def test_0d_object_subclass(self):
+        """ """
         # make sure that subclasses which return 0ds instead
         # of scalars don't cause infinite recursion in str
         class sub(np.ndarray):
+            """ """
             def __new__(cls, inp):
                 obj = np.asarray(inp).view(cls)
                 return obj
@@ -100,6 +107,7 @@
 
         # gh-10663
         class DuckCounter(np.ndarray):
+            """ """
             def __getitem__(self, item):
                 result = super(DuckCounter, self).__getitem__(item)
                 if not isinstance(result, DuckCounter):
@@ -107,6 +115,7 @@
                 return result
 
             def to_string(self):
+                """ """
                 return {0: 'zero', 1: 'one', 2: 'two'}.get(self.item(), 'many')
 
             def __str__(self):
@@ -121,6 +130,7 @@
         assert_equal(str(dc[0]), "zero")
 
     def test_self_containing(self):
+        """ """
         arr0d = np.array(None)
         arr0d[()] = arr0d
         assert_equal(repr(arr0d),
@@ -142,6 +152,7 @@
         first[()] = 0  # resolve circular references for garbage collector
 
     def test_containing_list(self):
+        """ """
         # printing square brackets directly would be ambiguuous
         arr1d = np.array([None, None])
         arr1d[0] = [1, 2]
@@ -150,10 +161,12 @@
             'array([list([1, 2]), list([3])], dtype=object)')
 
     def test_void_scalar_recursion(self):
+        """ """
         # gh-9345
         repr(np.void(b'test'))  # RecursionError ?
 
     def test_fieldless_structured(self):
+        """ """
         # gh-10366
         no_fields = np.dtype([])
         arr_no_fields = np.empty(4, dtype=no_fields)
@@ -161,7 +174,9 @@
 
 
 class TestComplexArray:
+    """ """
     def test_str(self):
+        """ """
         rvals = [0, 1, -1, np.inf, -np.inf, np.nan]
         cvals = [complex(rp, ip) for rp in rvals for ip in rvals]
         dtypes = [np.complex64, np.cdouble, np.clongdouble]
@@ -208,6 +223,7 @@
             assert_equal(res, val)
 
 class TestArray2String:
+    """ """
     def test_basic(self):
         """Basic test of array2string."""
         a = np.arange(3)
@@ -216,6 +232,7 @@
         assert_(np.array2string(a, max_line_width=4) == '[0\n 1\n 2]')
 
     def test_unexpected_kwarg(self):
+        """ """
         # ensure than an appropriate TypeError
         # is raised when array2string receives
         # an unexpected kwarg
@@ -227,6 +244,17 @@
     def test_format_function(self):
         """Test custom format function for each element in array."""
         def _format_function(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             if np.abs(x) < 1:
                 return '.'
             elif np.abs(x) < 2:
@@ -260,6 +288,7 @@
 
 
     def test_structure_format(self):
+        """ """
         dt = np.dtype([('name', np.str_, 16), ('grades', np.float64, (2,))])
         x = np.array([('Sarah', (8.0, 7.0)), ('John', (6.0, 7.0))], dtype=dt)
         assert_equal(np.array2string(x),
@@ -316,6 +345,7 @@
         assert_equal(np.array2string(array_scalar), "(1., 2.12345679, 3.)")
 
     def test_unstructured_void_repr(self):
+        """ """
         a = np.array([27, 91, 50, 75,  7, 65, 10,  8,
                       27, 91, 51, 49,109, 82,101,100], dtype='u1').view('V8')
         assert_equal(repr(a[0]), r"void(b'\x1B\x5B\x32\x4B\x07\x41\x0A\x08')")
@@ -328,6 +358,7 @@
         assert_equal(eval(repr(a[0]), vars(np)), a[0])
 
     def test_edgeitems_kwarg(self):
+        """ """
         # previously the global print options would be taken over the kwarg
         arr = np.zeros(3, int)
         assert_equal(
@@ -336,6 +367,7 @@
         )
 
     def test_summarize_1d(self):
+        """ """
         A = np.arange(1001)
         strA = '[   0    1    2 ...  998  999 1000]'
         assert_equal(str(A), strA)
@@ -344,6 +376,7 @@
         assert_equal(repr(A), reprA)
 
     def test_summarize_2d(self):
+        """ """
         A = np.arange(1002).reshape(2, 501)
         strA = '[[   0    1    2 ...  498  499  500]\n' \
                ' [ 501  502  503 ...  999 1000 1001]]'
@@ -354,9 +387,25 @@
         assert_equal(repr(A), reprA)
 
     def test_linewidth(self):
+        """ """
         a = np.full(6, 1)
 
         def make_str(a, width, **kw):
+            """
+
+            Parameters
+            ----------
+            a :
+                
+            width :
+                
+            **kw :
+                
+
+            Returns
+            -------
+
+            """
             return np.array2string(a, separator="", max_line_width=width, **kw)
 
         assert_equal(make_str(a, 8, legacy='1.13'), '[111111]')
@@ -385,6 +434,7 @@
                                       '   11]]]')
 
     def test_wide_element(self):
+        """ """
         a = np.array(['xxxxx'])
         assert_equal(
             np.array2string(a, max_line_width=5),
@@ -397,6 +447,17 @@
 
     @given(hynp.from_dtype(np.dtype("U")))
     def test_any_text(self, text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         # This test checks that, given any value that can be represented in an
         # array of dtype("U") (i.e. unicode string), ...
         a = np.array([text, text, text])
@@ -409,6 +470,7 @@
 
     @pytest.mark.skipif(not HAS_REFCOUNT, reason="Python lacks refcounts")
     def test_refcount(self):
+        """ """
         # make sure we do not hold references to the array due to a recursive
         # closure (gh-10620)
         gc.disable()
@@ -425,18 +487,22 @@
     """Test getting and setting global print options."""
 
     def setup(self):
+        """ """
         self.oldopts = np.get_printoptions()
 
     def teardown(self):
+        """ """
         np.set_printoptions(**self.oldopts)
 
     def test_basic(self):
+        """ """
         x = np.array([1.5, 0, 1.234567890])
         assert_equal(repr(x), "array([1.5       , 0.        , 1.23456789])")
         np.set_printoptions(precision=4)
         assert_equal(repr(x), "array([1.5   , 0.    , 1.2346])")
 
     def test_precision_zero(self):
+        """ """
         np.set_printoptions(precision=0)
         for values, string in (
                 ([0.], "0."), ([.3], "0."), ([-.3], "-0."), ([.7], "1."),
@@ -447,11 +513,13 @@
             assert_equal(repr(x), "array([%s])" % string)
 
     def test_formatter(self):
+        """ """
         x = np.arange(3)
         np.set_printoptions(formatter={'all':lambda x: str(x-1)})
         assert_equal(repr(x), "array([-1, 0, 1])")
 
     def test_formatter_reset(self):
+        """ """
         x = np.arange(3)
         np.set_printoptions(formatter={'all':lambda x: str(x-1)})
         assert_equal(repr(x), "array([-1, 0, 1])")
@@ -475,6 +543,7 @@
         assert_equal(repr(x), "array([0., 1., 2.])")
 
     def test_0d_arrays(self):
+        """ """
         assert_equal(str(np.array(u'café', '<U4')), u'café')
 
         assert_equal(repr(np.array('café', '<U4')),
@@ -506,6 +575,7 @@
         np.array2string(np.array(1.), legacy='1.13')
 
     def test_float_spacing(self):
+        """ """
         x = np.array([1., 2., 3.])
         y = np.array([1., 2., -10.])
         z = np.array([100., 2., -1.])
@@ -530,6 +600,7 @@
         assert_equal(repr(z), 'array([       inf,  1.12e+000, -1.00e+120])')
 
     def test_bool_spacing(self):
+        """ """
         assert_equal(repr(np.array([True,  True])),
                      'array([ True,  True])')
         assert_equal(repr(np.array([True, False])),
@@ -542,6 +613,7 @@
                      'array(False)')
 
     def test_sign_spacing(self):
+        """ """
         a = np.arange(4.)
         b = np.array([1.234e9])
         c = np.array([1.0 + 1.0j, 1.123456789 + 1.123456789j], dtype='c16')
@@ -583,17 +655,20 @@
         assert_raises(TypeError, np.set_printoptions, wrongarg=True)
 
     def test_float_overflow_nowarn(self):
+        """ """
         # make sure internal computations in FloatingFormat don't
         # warn about overflow
         repr(np.array([1e4, 0.1], dtype='f2'))
 
     def test_sign_spacing_structured(self):
+        """ """
         a = np.ones(2, dtype='<f,<f')
         assert_equal(repr(a),
             "array([(1., 1.), (1., 1.)], dtype=[('f0', '<f4'), ('f1', '<f4')])")
         assert_equal(repr(a[0]), "(1., 1.)")
 
     def test_floatmode(self):
+        """ """
         x = np.array([0.6104, 0.922, 0.457, 0.0906, 0.3733, 0.007244,
                       0.5933, 0.947, 0.2383, 0.4226], dtype=np.float16)
         y = np.array([0.2918820979355541, 0.5064172631089138,
@@ -685,6 +760,7 @@
             "array([1.00000000+1.00000000j, 1.12345679+1.12345679j])")
 
     def test_legacy_mode_scalars(self):
+        """ """
         # in legacy mode, str of floats get truncated, and complex scalars
         # use * for non-finite imaginary part
         np.set_printoptions(legacy='1.13')
@@ -697,6 +773,7 @@
         assert_equal(str(np.complex128(complex(1, np.nan))), '(1+nanj)')
 
     def test_legacy_stray_comma(self):
+        """ """
         np.set_printoptions(legacy='1.13')
         assert_equal(str(np.arange(10000)), '[   0    1    2 ..., 9997 9998 9999]')
 
@@ -704,6 +781,7 @@
         assert_equal(str(np.arange(10000)), '[   0    1    2 ... 9997 9998 9999]')
 
     def test_dtype_linewidth_wrapping(self):
+        """ """
         np.set_printoptions(linewidth=75)
         assert_equal(repr(np.arange(10,20., dtype='f4')),
             "array([10., 11., 12., 13., 14., 15., 16., 17., 18., 19.], dtype=float32)")
@@ -719,6 +797,7 @@
                   dtype='{}')""".format(styp)))
 
     def test_linewidth_repr(self):
+        """ """
         a = np.full(7, fill_value=2)
         np.set_printoptions(linewidth=17)
         assert_equal(
@@ -756,6 +835,7 @@
         )
 
     def test_linewidth_str(self):
+        """ """
         a = np.full(18, fill_value=2)
         np.set_printoptions(linewidth=18)
         assert_equal(
@@ -774,6 +854,7 @@
         )
 
     def test_edgeitems(self):
+        """ """
         np.set_printoptions(edgeitems=1, threshold=1)
         a = np.arange(27).reshape((3, 3, 3))
         assert_equal(
@@ -844,24 +925,29 @@
         )
 
     def test_bad_args(self):
+        """ """
         assert_raises(ValueError, np.set_printoptions, threshold=float('nan'))
         assert_raises(TypeError, np.set_printoptions, threshold='1')
         assert_raises(TypeError, np.set_printoptions, threshold=b'1')
 
 def test_unicode_object_array():
+    """ """
     expected = "array(['é'], dtype=object)"
     x = np.array([u'\xe9'], dtype=object)
     assert_equal(repr(x), expected)
 
 
 class TestContextManager:
+    """ """
     def test_ctx_mgr(self):
+        """ """
         # test that context manager actually works
         with np.printoptions(precision=2):
             s = str(np.array([2.0]) / 3)
         assert_equal(s, '[0.67]')
 
     def test_ctx_mgr_restores(self):
+        """ """
         # test that print options are actually restrored
         opts = np.get_printoptions()
         with np.printoptions(precision=opts['precision'] - 1,
@@ -870,6 +956,7 @@
         assert_equal(np.get_printoptions(), opts)
 
     def test_ctx_mgr_exceptions(self):
+        """ """
         # test that print options are restored even if an exception is raised
         opts = np.get_printoptions()
         try:
@@ -880,6 +967,7 @@
         assert_equal(np.get_printoptions(), opts)
 
     def test_ctx_mgr_as_smth(self):
+        """ """
         opts = {"precision": 2}
         with np.printoptions(**opts) as ctx:
             saved_opts = ctx.copy()
