# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/f2py/auxfuncs.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/f2py/auxfuncs.py
@@ -60,63 +60,217 @@
 
 
 def outmess(t):
+    """
+
+    Parameters
+    ----------
+    t :
+        
+
+    Returns
+    -------
+
+    """
     if options.get('verbose', 1):
         sys.stdout.write(t)
 
 
 def debugcapi(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return 'capi' in debugoptions
 
 
 def _isstring(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return 'typespec' in var and var['typespec'] == 'character' and \
            not isexternal(var)
 
 
 def isstring(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return _isstring(var) and not isarray(var)
 
 
 def ischaracter(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return isstring(var) and 'charselector' not in var
 
 
 def isstringarray(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return isarray(var) and _isstring(var)
 
 
 def isarrayofstrings(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     # leaving out '*' for now so that `character*(*) a(m)` and `character
     # a(m,*)` are treated differently. Luckily `character**` is illegal.
     return isstringarray(var) and var['dimension'][-1] == '(*)'
 
 
 def isarray(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return 'dimension' in var and not isexternal(var)
 
 
 def isscalar(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return not (isarray(var) or isstring(var) or isexternal(var))
 
 
 def iscomplex(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return isscalar(var) and \
            var.get('typespec') in ['complex', 'double complex']
 
 
 def islogical(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return isscalar(var) and var.get('typespec') == 'logical'
 
 
 def isinteger(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return isscalar(var) and var.get('typespec') == 'integer'
 
 
 def isreal(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return isscalar(var) and var.get('typespec') == 'real'
 
 
 def get_kind(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     try:
         return var['kindselector']['*']
     except KeyError:
@@ -127,6 +281,17 @@
 
 
 def islong_long(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     if not isscalar(var):
         return 0
     if var.get('typespec') not in ['integer', 'logical']:
@@ -135,6 +300,17 @@
 
 
 def isunsigned_char(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     if not isscalar(var):
         return 0
     if var.get('typespec') != 'integer':
@@ -143,6 +319,17 @@
 
 
 def isunsigned_short(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     if not isscalar(var):
         return 0
     if var.get('typespec') != 'integer':
@@ -151,6 +338,17 @@
 
 
 def isunsigned(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     if not isscalar(var):
         return 0
     if var.get('typespec') != 'integer':
@@ -159,6 +357,17 @@
 
 
 def isunsigned_long_long(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     if not isscalar(var):
         return 0
     if var.get('typespec') != 'integer':
@@ -167,6 +376,17 @@
 
 
 def isdouble(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     if not isscalar(var):
         return 0
     if not var.get('typespec') == 'real':
@@ -175,6 +395,17 @@
 
 
 def islong_double(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     if not isscalar(var):
         return 0
     if not var.get('typespec') == 'real':
@@ -183,97 +414,317 @@
 
 
 def islong_complex(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     if not iscomplex(var):
         return 0
     return get_kind(var) == '32'
 
 
 def iscomplexarray(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return isarray(var) and \
            var.get('typespec') in ['complex', 'double complex']
 
 
 def isint1array(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return isarray(var) and var.get('typespec') == 'integer' \
         and get_kind(var) == '1'
 
 
 def isunsigned_chararray(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return isarray(var) and var.get('typespec') in ['integer', 'logical']\
         and get_kind(var) == '-1'
 
 
 def isunsigned_shortarray(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return isarray(var) and var.get('typespec') in ['integer', 'logical']\
         and get_kind(var) == '-2'
 
 
 def isunsignedarray(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return isarray(var) and var.get('typespec') in ['integer', 'logical']\
         and get_kind(var) == '-4'
 
 
 def isunsigned_long_longarray(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return isarray(var) and var.get('typespec') in ['integer', 'logical']\
         and get_kind(var) == '-8'
 
 
 def issigned_chararray(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return isarray(var) and var.get('typespec') in ['integer', 'logical']\
         and get_kind(var) == '1'
 
 
 def issigned_shortarray(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return isarray(var) and var.get('typespec') in ['integer', 'logical']\
         and get_kind(var) == '2'
 
 
 def issigned_array(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return isarray(var) and var.get('typespec') in ['integer', 'logical']\
         and get_kind(var) == '4'
 
 
 def issigned_long_longarray(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return isarray(var) and var.get('typespec') in ['integer', 'logical']\
         and get_kind(var) == '8'
 
 
 def isallocatable(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return 'attrspec' in var and 'allocatable' in var['attrspec']
 
 
 def ismutable(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return not ('dimension' not in var or isstring(var))
 
 
 def ismoduleroutine(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     return 'modulename' in rout
 
 
 def ismodule(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     return 'block' in rout and 'module' == rout['block']
 
 
 def isfunction(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     return 'block' in rout and 'function' == rout['block']
 
 def isfunction_wrap(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     if isintent_c(rout):
         return 0
     return wrapfuncs and isfunction(rout) and (not isexternal(rout))
 
 
 def issubroutine(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     return 'block' in rout and 'subroutine' == rout['block']
 
 
 def issubroutine_wrap(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     if isintent_c(rout):
         return 0
     return issubroutine(rout) and hasassumedshape(rout)
 
 
 def hasassumedshape(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     if rout.get('hasassumedshape'):
         return True
     for a in rout['args']:
@@ -285,10 +736,32 @@
 
 
 def isroutine(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     return isfunction(rout) or issubroutine(rout)
 
 
 def islogicalfunction(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     if not isfunction(rout):
         return 0
     if 'result' in rout:
@@ -301,6 +774,17 @@
 
 
 def islong_longfunction(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     if not isfunction(rout):
         return 0
     if 'result' in rout:
@@ -313,6 +797,17 @@
 
 
 def islong_doublefunction(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     if not isfunction(rout):
         return 0
     if 'result' in rout:
@@ -325,6 +820,17 @@
 
 
 def iscomplexfunction(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     if not isfunction(rout):
         return 0
     if 'result' in rout:
@@ -337,6 +843,17 @@
 
 
 def iscomplexfunction_warn(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     if iscomplexfunction(rout):
         outmess("""\
     **************************************************************
@@ -351,6 +868,17 @@
 
 
 def isstringfunction(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     if not isfunction(rout):
         return 0
     if 'result' in rout:
@@ -363,32 +891,109 @@
 
 
 def hasexternals(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     return 'externals' in rout and rout['externals']
 
 
 def isthreadsafe(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     return 'f2pyenhancements' in rout and \
            'threadsafe' in rout['f2pyenhancements']
 
 
 def hasvariables(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     return 'vars' in rout and rout['vars']
 
 
 def isoptional(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return ('attrspec' in var and 'optional' in var['attrspec'] and
             'required' not in var['attrspec']) and isintent_nothide(var)
 
 
 def isexternal(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return 'attrspec' in var and 'external' in var['attrspec']
 
 
 def isrequired(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return not isoptional(var) and isintent_nothide(var)
 
 
 def isintent_in(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     if 'intent' not in var:
         return 1
     if 'hide' in var['intent']:
@@ -407,61 +1012,215 @@
 
 
 def isintent_inout(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return ('intent' in var and ('inout' in var['intent'] or
             'outin' in var['intent']) and 'in' not in var['intent'] and
             'hide' not in var['intent'] and 'inplace' not in var['intent'])
 
 
 def isintent_out(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return 'out' in var.get('intent', [])
 
 
 def isintent_hide(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return ('intent' in var and ('hide' in var['intent'] or
             ('out' in var['intent'] and 'in' not in var['intent'] and
                 (not l_or(isintent_inout, isintent_inplace)(var)))))
 
 def isintent_nothide(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return not isintent_hide(var)
 
 
 def isintent_c(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return 'c' in var.get('intent', [])
 
 
 def isintent_cache(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return 'cache' in var.get('intent', [])
 
 
 def isintent_copy(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return 'copy' in var.get('intent', [])
 
 
 def isintent_overwrite(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return 'overwrite' in var.get('intent', [])
 
 
 def isintent_callback(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return 'callback' in var.get('intent', [])
 
 
 def isintent_inplace(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return 'inplace' in var.get('intent', [])
 
 
 def isintent_aux(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return 'aux' in var.get('intent', [])
 
 
 def isintent_aligned4(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return 'aligned4' in var.get('intent', [])
 
 
 def isintent_aligned8(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return 'aligned8' in var.get('intent', [])
 
 
 def isintent_aligned16(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return 'aligned16' in var.get('intent', [])
 
 isintent_dict = {isintent_in: 'INTENT_IN', isintent_inout: 'INTENT_INOUT',
@@ -476,24 +1235,79 @@
 
 
 def isprivate(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return 'attrspec' in var and 'private' in var['attrspec']
 
 
 def hasinitvalue(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return '=' in var
 
 
 def hasinitvalueasstring(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     if not hasinitvalue(var):
         return 0
     return var['='][0] in ['"', "'"]
 
 
 def hasnote(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return 'note' in var
 
 
 def hasresultnote(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     if not isfunction(rout):
         return 0
     if 'result' in rout:
@@ -506,10 +1320,32 @@
 
 
 def hascommon(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     return 'common' in rout
 
 
 def containscommon(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     if hascommon(rout):
         return 1
     if hasbody(rout):
@@ -520,6 +1356,17 @@
 
 
 def containsmodule(block):
+    """
+
+    Parameters
+    ----------
+    block :
+        
+
+    Returns
+    -------
+
+    """
     if ismodule(block):
         return 1
     if not hasbody(block):
@@ -531,26 +1378,72 @@
 
 
 def hasbody(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     return 'body' in rout
 
 
 def hascallstatement(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     return getcallstatement(rout) is not None
 
 
 def istrue(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return 1
 
 
 def isfalse(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     return 0
 
 
 class F2PYError(Exception):
+    """ """
     pass
 
 
 class throw_error:
+    """ """
 
     def __init__(self, mess):
         self.mess = mess
@@ -561,6 +1454,17 @@
 
 
 def l_and(*f):
+    """
+
+    Parameters
+    ----------
+    *f :
+        
+
+    Returns
+    -------
+
+    """
     l, l2 = 'lambda v', []
     for i in range(len(f)):
         l = '%s,f%d=f[%d]' % (l, i, i)
@@ -569,6 +1473,17 @@
 
 
 def l_or(*f):
+    """
+
+    Parameters
+    ----------
+    *f :
+        
+
+    Returns
+    -------
+
+    """
     l, l2 = 'lambda v', []
     for i in range(len(f)):
         l = '%s,f%d=f[%d]' % (l, i, i)
@@ -577,10 +1492,32 @@
 
 
 def l_not(f):
+    """
+
+    Parameters
+    ----------
+    f :
+        
+
+    Returns
+    -------
+
+    """
     return eval('lambda v,f=f:not f(v)')
 
 
 def isdummyroutine(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     try:
         return rout['f2pyenhancements']['fortranname'] == ''
     except KeyError:
@@ -588,6 +1525,17 @@
 
 
 def getfortranname(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     try:
         name = rout['f2pyenhancements']['fortranname']
         if name == '':
@@ -602,6 +1550,23 @@
 
 
 def getmultilineblock(rout, blockname, comment=1, counter=0):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+    blockname :
+        
+    comment :
+         (Default value = 1)
+    counter :
+         (Default value = 0)
+
+    Returns
+    -------
+
+    """
     try:
         r = rout['f2pyenhancements'].get(blockname)
     except KeyError:
@@ -632,10 +1597,34 @@
 
 
 def getcallstatement(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     return getmultilineblock(rout, 'callstatement')
 
 
 def getcallprotoargument(rout, cb_map={}):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+    cb_map :
+         (Default value = {})
+
+    Returns
+    -------
+
+    """
     r = getmultilineblock(rout, 'callprotoargument', comment=0)
     if r:
         return r
@@ -672,18 +1661,62 @@
 
 
 def getusercode(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     return getmultilineblock(rout, 'usercode')
 
 
 def getusercode1(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     return getmultilineblock(rout, 'usercode', counter=1)
 
 
 def getpymethoddef(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     return getmultilineblock(rout, 'pymethoddef')
 
 
 def getargs(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     sortargs, args = [], []
     if 'args' in rout:
         args = rout['args']
@@ -700,6 +1733,17 @@
 
 
 def getargs2(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     sortargs, args = [], rout.get('args', [])
     auxvars = [a for a in rout['vars'].keys() if isintent_aux(rout['vars'][a])
                and a not in args]
@@ -717,6 +1761,17 @@
 
 
 def getrestdoc(rout):
+    """
+
+    Parameters
+    ----------
+    rout :
+        
+
+    Returns
+    -------
+
+    """
     if 'f2pymultilines' not in rout:
         return None
     k = None
@@ -726,23 +1781,71 @@
 
 
 def gentitle(name):
+    """
+
+    Parameters
+    ----------
+    name :
+        
+
+    Returns
+    -------
+
+    """
     l = (80 - len(name) - 6) // 2
     return '/*%s %s %s*/' % (l * '*', name, l * '*')
 
 
 def flatlist(l):
+    """
+
+    Parameters
+    ----------
+    l :
+        
+
+    Returns
+    -------
+
+    """
     if isinstance(l, list):
         return reduce(lambda x, y, f=flatlist: x + f(y), l, [])
     return [l]
 
 
 def stripcomma(s):
+    """
+
+    Parameters
+    ----------
+    s :
+        
+
+    Returns
+    -------
+
+    """
     if s and s[-1] == ',':
         return s[:-1]
     return s
 
 
 def replace(str, d, defaultsep=''):
+    """
+
+    Parameters
+    ----------
+    str :
+        
+    d :
+        
+    defaultsep :
+         (Default value = '')
+
+    Returns
+    -------
+
+    """
     if isinstance(d, list):
         return [replace(str, _m, defaultsep) for _m in d]
     if isinstance(str, list):
@@ -762,6 +1865,19 @@
 
 
 def dictappend(rd, ar):
+    """
+
+    Parameters
+    ----------
+    rd :
+        
+    ar :
+        
+
+    Returns
+    -------
+
+    """
     if isinstance(ar, list):
         for a in ar:
             rd = dictappend(rd, a)
@@ -791,6 +1907,21 @@
 
 
 def applyrules(rules, d, var={}):
+    """
+
+    Parameters
+    ----------
+    rules :
+        
+    d :
+        
+    var :
+         (Default value = {})
+
+    Returns
+    -------
+
+    """
     ret = {}
     if isinstance(rules, list):
         for r in rules:
