# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_scalarinherit.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_scalarinherit.py
@@ -9,30 +9,40 @@
 
 
 class A:
+    """ """
     pass
 class B(A, np.float64):
+    """ """
     pass
 
 class C(B):
+    """ """
     pass
 class D(C, B):
+    """ """
     pass
 
 class B0(np.float64, A):
+    """ """
     pass
 class C0(B0):
+    """ """
     pass
 
 class HasNew:
+    """ """
     def __new__(cls, *args, **kwargs):
         return cls, args, kwargs
 
 class B1(np.float64, HasNew):
+    """ """
     pass
 
 
 class TestInherit:
+    """ """
     def test_init(self):
+        """ """
         x = B(1.0)
         assert_(str(x) == '1.0')
         y = C(2.0)
@@ -41,12 +51,14 @@
         assert_(str(z) == '3.0')
 
     def test_init2(self):
+        """ """
         x = B0(1.0)
         assert_(str(x) == '1.0')
         y = C0(2.0)
         assert_(str(y) == '2.0')
 
     def test_gh_15395(self):
+        """ """
         # HasNew is the second base, so `np.float64` should have priority
         x = B1(1.0)
         assert_(str(x) == '1.0')
@@ -57,7 +69,9 @@
 
 
 class TestCharacter:
+    """ """
     def test_char_radd(self):
+        """ """
         # GH issue 9620, reached gentype_add and raise TypeError
         np_s = np.string_('abc')
         np_u = np.unicode_('abc')
@@ -76,6 +90,7 @@
 
 
         class Mystr(str, np.generic):
+            """ """
             # would segfault
             pass
 
@@ -83,6 +98,7 @@
         assert_(type(ret) is type(s))
 
     def test_char_repeat(self):
+        """ """
         np_s = np.string_('abc')
         np_u = np.unicode_('abc')
         res_s = b'abc' * 5
