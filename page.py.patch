# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/page.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/page.py
@@ -33,7 +33,21 @@
 
 
 def display_page(strng, start=0, screen_lines=25):
-    """Just display, no paging. screen_lines is ignored."""
+    """Just display, no paging. screen_lines is ignored.
+
+    Parameters
+    ----------
+    strng :
+        
+    start :
+         (Default value = 0)
+    screen_lines :
+         (Default value = 25)
+
+    Returns
+    -------
+
+    """
     if isinstance(strng, dict):
         data = strng
     else:
@@ -47,6 +61,15 @@
     """Wrap a pager func to strip the `self` arg
     
     so it can be called as a hook.
+
+    Parameters
+    ----------
+    page_func :
+        
+
+    Returns
+    -------
+
     """
     return lambda self, *args, **kwargs: page_func(*args, **kwargs)
 
@@ -55,9 +78,22 @@
 
 def page_dumb(strng, start=0, screen_lines=25):
     """Very dumb 'pager' in Python, for when nothing else works.
-
+    
     Only moves forward, same interface as page(), except for pager_cmd and
     mode.
+
+    Parameters
+    ----------
+    strng :
+        
+    start :
+         (Default value = 0)
+    screen_lines :
+         (Default value = 25)
+
+    Returns
+    -------
+
     """
     if isinstance(strng, dict):
         strng = strng.get('text/plain', '')
@@ -79,9 +115,18 @@
 
 def _detect_screen_size(screen_lines_def):
     """Attempt to work out the number of lines on the screen.
-
+    
     This is called by page(). It can raise an error (e.g. when run in the
     test suite), so it's separated out so it can easily be called in a try block.
+
+    Parameters
+    ----------
+    screen_lines_def :
+        
+
+    Returns
+    -------
+
     """
     TERM = os.environ.get('TERM',None)
     if not((TERM=='xterm' or TERM=='xterm-color') and sys.platform != 'sunos5'):
@@ -129,23 +174,38 @@
     
     strng can be a mime-bundle dict, supplying multiple representations,
     keyed by mime-type.
-
+    
     The screen_lines parameter specifies the number of *usable* lines of your
     terminal screen (total lines minus lines you need to reserve to show other
     information).
-
+    
     If you set screen_lines to a number <=0, page() will try to auto-determine
     your screen size and will only use up to (screen_size+screen_lines) for
     printing, paging after that. That is, if you want auto-detection but need
     to reserve the bottom 3 lines of the screen, use screen_lines = -3, and for
     auto-detection without any lines reserved simply use screen_lines = 0.
-
+    
     If a string won't fit in the allowed lines, it is sent through the
     specified pager command. If none given, look for PAGER in the environment,
     and ultimately default to less.
-
+    
     If no system pager works, the string is sent through a 'dumb pager'
     written in python, very simplistic.
+
+    Parameters
+    ----------
+    strng :
+        
+    start :
+         (Default value = 0)
+    screen_lines :
+         (Default value = 0)
+    pager_cmd :
+         (Default value = None)
+
+    Returns
+    -------
+
     """
     
     # for compatibility with mime-bundle form:
@@ -242,6 +302,21 @@
     
     Pager is dispatched via the `show_in_pager` IPython hook.
     If no hook is registered, `pager_page` will be used.
+
+    Parameters
+    ----------
+    data :
+        
+    start :
+         (Default value = 0)
+    screen_lines :
+         (Default value = 0)
+    pager_cmd :
+         (Default value = None)
+
+    Returns
+    -------
+
     """
     # Some routines may auto-compute start offsets incorrectly and pass a
     # negative value.  Offset to 0 for robustness.
@@ -262,6 +337,19 @@
 
 def page_file(fname, start=0, pager_cmd=None):
     """Page a file, using an optional pager command and starting line.
+
+    Parameters
+    ----------
+    fname :
+        
+    start :
+         (Default value = 0)
+    pager_cmd :
+         (Default value = None)
+
+    Returns
+    -------
+
     """
 
     pager_cmd = get_pager_cmd(pager_cmd)
@@ -281,9 +369,18 @@
 
 
 def get_pager_cmd(pager_cmd=None):
-    """Return a pager command.
-
-    Makes some attempts at finding an OS-correct one.
+    """
+
+    Parameters
+    ----------
+    pager_cmd :
+         (Default value = None)
+
+    Returns
+    -------
+    type
+        Makes some attempts at finding an OS-correct one.
+
     """
     if os.name == 'posix':
         default_pager_cmd = 'less -R'  # -R for color control sequences
@@ -303,9 +400,20 @@
 
 
 def get_pager_start(pager, start):
-    """Return the string for paging files with an offset.
-
-    This is the '+N' argument which less and more (under Unix) accept.
+    """
+
+    Parameters
+    ----------
+    pager :
+        
+    start :
+        
+
+    Returns
+    -------
+    type
+        This is the '+N' argument which less and more (under Unix) accept.
+
     """
 
     if pager in ['less','more']:
@@ -322,9 +430,16 @@
 if os.name == 'nt' and os.environ.get('TERM','dumb') != 'emacs':
     import msvcrt
     def page_more():
-        """ Smart pausing between pages
-
-        @return:    True if need print more lines, False if quit
+        """Smart pausing between pages
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+        type
+            True if need print more lines, False if quit
+
         """
         sys.stdout.write('---Return to continue, q to quit--- ')
         ans = msvcrt.getwch()
@@ -336,6 +451,7 @@
         return result
 else:
     def page_more():
+        """ """
         ans = py3compat.input('---Return to continue, q to quit--- ')
         if ans.lower().startswith('q'):
             return False
