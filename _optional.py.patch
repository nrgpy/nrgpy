# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/compat/_optional.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/compat/_optional.py
@@ -48,6 +48,17 @@
 
 
 def _get_version(module: types.ModuleType) -> str:
+    """
+
+    Parameters
+    ----------
+    module: types.ModuleType :
+        
+
+    Returns
+    -------
+
+    """
     version = getattr(module, "__version__", None)
     if version is None:
         # xlrd uses a capitalized attribute name
@@ -61,9 +72,8 @@
 def import_optional_dependency(
     name: str, extra: str = "", raise_on_missing: bool = True, on_version: str = "raise"
 ):
-    """
-    Import an optional dependency.
-
+    """Import an optional dependency.
+    
     By default, if a dependency is missing an ImportError with a nice
     message will be raised. If a dependency is present, but too old,
     we raise.
@@ -80,20 +90,24 @@
         When False and the module is not present, None is returned.
     on_version : str {'raise', 'warn'}
         What to do when a dependency's version is too old.
-
         * raise : Raise an ImportError
         * warn : Warn that the version is too old. Returns None
         * ignore: Return the module, even if the version is too old.
-          It's expected that users validate the version locally when
-          using ``on_version="ignore"`` (see. ``io/html.py``)
+        It's expected that users validate the version locally when
+        using ``on_version="ignore"`` (see. ``io/html.py``)
+    name: str :
+        
+    extra: str :
+         (Default value = "")
+    raise_on_missing: bool :
+         (Default value = True)
+    on_version: str :
+         (Default value = "raise")
 
     Returns
     -------
-    maybe_module : Optional[ModuleType]
-        The imported module, when found and the version is correct.
-        None is returned when the package is not found and `raise_on_missing`
-        is False, or when the package's version is too old and `on_version`
-        is ``'warn'``.
+
+    
     """
 
     package_name = INSTALL_MAPPING.get(name)
