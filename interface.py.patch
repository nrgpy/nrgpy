# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/extension/base/interface.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/extension/base/interface.py
@@ -17,24 +17,90 @@
     # ------------------------------------------------------------------------
 
     def test_len(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         assert len(data) == 100
 
     def test_size(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         assert data.size == 100
 
     def test_ndim(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         assert data.ndim == 1
 
     def test_can_hold_na_valid(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # GH-20761
         assert data._can_hold_na is True
 
     def test_memory_usage(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         s = pd.Series(data)
         result = s.memory_usage(index=False)
         assert result == s.nbytes
 
     def test_array_interface(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         result = np.array(data)
         assert result[0] == data[0]
 
@@ -43,22 +109,66 @@
         tm.assert_numpy_array_equal(result, expected)
 
     def test_is_extension_array_dtype(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         assert is_extension_array_dtype(data)
         assert is_extension_array_dtype(data.dtype)
         assert is_extension_array_dtype(pd.Series(data))
         assert isinstance(data.dtype, ExtensionDtype)
 
     def test_no_values_attribute(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # GH-20735: EA's with .values attribute give problems with internal
         # code, disallowing this for now until solved
         assert not hasattr(data, "values")
         assert not hasattr(data, "_values")
 
     def test_is_numeric_honored(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         result = pd.Series(data)
         assert result._mgr.blocks[0].is_numeric is data.dtype._is_numeric
 
     def test_isna_extension_array(self, data_missing):
+        """
+
+        Parameters
+        ----------
+        data_missing :
+            
+
+        Returns
+        -------
+
+        """
         # If your `isna` returns an ExtensionArray, you must also implement
         # _reduce. At the *very* least, you must implement any and all
         na = data_missing.isna()
@@ -72,6 +182,17 @@
             assert na.dtype._is_boolean
 
     def test_copy(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # GH#27083 removing deep keyword from EA.copy
         assert data[0] != data[1]
         result = data.copy()
@@ -80,6 +201,17 @@
         assert result[1] != result[0]
 
     def test_view(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # view with no dtype should return a shallow copy, *not* the same
         #  object
         assert data[1] != data[0]
