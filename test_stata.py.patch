# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/test_stata.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/test_stata.py
@@ -32,6 +32,7 @@
 
 @pytest.fixture()
 def mixed_frame():
+    """ """
     return pd.DataFrame(
         {
             "a": [1, 2, 3, 4],
@@ -43,11 +44,33 @@
 
 @pytest.fixture
 def dirpath(datapath):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     return datapath("io", "data", "stata")
 
 
 @pytest.fixture
 def parsed_114(dirpath):
+    """
+
+    Parameters
+    ----------
+    dirpath :
+        
+
+    Returns
+    -------
+
+    """
     dta14_114 = os.path.join(dirpath, "stata5_114.dta")
     parsed_114 = read_stata(dta14_114, convert_dates=True)
     parsed_114.index.name = "index"
@@ -55,8 +78,20 @@
 
 
 class TestStata:
+    """ """
     @pytest.fixture(autouse=True)
     def setup_method(self, datapath):
+        """
+
+        Parameters
+        ----------
+        datapath :
+            
+
+        Returns
+        -------
+
+        """
         self.dirpath = datapath("io", "data", "stata")
         self.dta1_114 = os.path.join(self.dirpath, "stata1_114.dta")
         self.dta1_117 = os.path.join(self.dirpath, "stata1_117.dta")
@@ -121,14 +156,47 @@
         self.stata_dates = os.path.join(self.dirpath, "stata13_dates.dta")
 
     def read_dta(self, file):
+        """
+
+        Parameters
+        ----------
+        file :
+            
+
+        Returns
+        -------
+
+        """
         # Legacy default reader configuration
         return read_stata(file, convert_dates=True)
 
     def read_csv(self, file):
+        """
+
+        Parameters
+        ----------
+        file :
+            
+
+        Returns
+        -------
+
+        """
         return read_csv(file, parse_dates=True)
 
     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
     def test_read_empty_dta(self, version):
+        """
+
+        Parameters
+        ----------
+        version :
+            
+
+        Returns
+        -------
+
+        """
         empty_ds = DataFrame(columns=["unit"])
         # GH 7369, make sure can read a 0-obs dta file
         with tm.ensure_clean() as path:
@@ -138,6 +206,17 @@
 
     @pytest.mark.parametrize("file", ["dta1_114", "dta1_117"])
     def test_read_dta1(self, file):
+        """
+
+        Parameters
+        ----------
+        file :
+            
+
+        Returns
+        -------
+
+        """
 
         file = getattr(self, file)
         parsed = self.read_dta(file)
@@ -156,6 +235,7 @@
         tm.assert_frame_equal(parsed, expected)
 
     def test_read_dta2(self):
+        """ """
 
         expected = DataFrame.from_records(
             [
@@ -217,6 +297,17 @@
 
     @pytest.mark.parametrize("file", ["dta3_113", "dta3_114", "dta3_115", "dta3_117"])
     def test_read_dta3(self, file):
+        """
+
+        Parameters
+        ----------
+        file :
+            
+
+        Returns
+        -------
+
+        """
 
         file = getattr(self, file)
         parsed = self.read_dta(file)
@@ -231,6 +322,17 @@
 
     @pytest.mark.parametrize("file", ["dta4_113", "dta4_114", "dta4_115", "dta4_117"])
     def test_read_dta4(self, file):
+        """
+
+        Parameters
+        ----------
+        file :
+            
+
+        Returns
+        -------
+
+        """
 
         file = getattr(self, file)
         parsed = self.read_dta(file)
@@ -276,6 +378,7 @@
 
     # File containing strls
     def test_read_dta12(self):
+        """ """
         parsed_117 = self.read_dta(self.dta21_117)
         expected = DataFrame.from_records(
             [
@@ -289,6 +392,7 @@
         tm.assert_frame_equal(parsed_117, expected, check_dtype=False)
 
     def test_read_dta18(self):
+        """ """
         parsed_118 = self.read_dta(self.dta22_118)
         parsed_118["Bytes"] = parsed_118["Bytes"].astype("O")
         expected = DataFrame.from_records(
@@ -329,6 +433,7 @@
             assert rdr.data_label == "This is a  Ünicode data label"
 
     def test_read_write_dta5(self):
+        """ """
         original = DataFrame(
             [(np.nan, np.nan, np.nan, np.nan, np.nan)],
             columns=["float_miss", "double_miss", "byte_miss", "int_miss", "long_miss"],
@@ -341,6 +446,7 @@
             tm.assert_frame_equal(written_and_read_again.set_index("index"), original)
 
     def test_write_dta6(self):
+        """ """
         original = self.read_csv(self.csv3)
         original.index.name = "index"
         original.index = original.index.astype(np.int32)
@@ -358,6 +464,17 @@
 
     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
     def test_read_write_dta10(self, version):
+        """
+
+        Parameters
+        ----------
+        version :
+            
+
+        Returns
+        -------
+
+        """
         original = DataFrame(
             data=[["string", "object", 1, 1.1, np.datetime64("2003-12-25")]],
             columns=["string", "object", "integer", "floating", "datetime"],
@@ -378,11 +495,13 @@
             )
 
     def test_stata_doc_examples(self):
+        """ """
         with tm.ensure_clean() as path:
             df = DataFrame(np.random.randn(10, 2), columns=list("AB"))
             df.to_stata(path)
 
     def test_write_preserves_original(self):
+        """ """
         # 9795
         np.random.seed(423)
         df = pd.DataFrame(np.random.randn(5, 4), columns=list("abcd"))
@@ -394,6 +513,17 @@
 
     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
     def test_encoding(self, version):
+        """
+
+        Parameters
+        ----------
+        version :
+            
+
+        Returns
+        -------
+
+        """
 
         # GH 4626, proper encoding handling
         raw = read_stata(self.dta_encoding)
@@ -410,6 +540,7 @@
             tm.assert_frame_equal(encoded, reread_encoded)
 
     def test_read_write_dta11(self):
+        """ """
         original = DataFrame(
             [(1, 2, 3, 4)],
             columns=[
@@ -435,6 +566,17 @@
 
     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
     def test_read_write_dta12(self, version):
+        """
+
+        Parameters
+        ----------
+        version :
+            
+
+        Returns
+        -------
+
+        """
         original = DataFrame(
             [(1, 2, 3, 4, 5, 6)],
             columns=[
@@ -471,6 +613,7 @@
             tm.assert_frame_equal(written_and_read_again.set_index("index"), formatted)
 
     def test_read_write_dta13(self):
+        """ """
         s1 = Series(2 ** 9, dtype=np.int16)
         s2 = Series(2 ** 17, dtype=np.int32)
         s3 = Series(2 ** 33, dtype=np.int64)
@@ -490,6 +633,21 @@
         "file", ["dta14_113", "dta14_114", "dta14_115", "dta14_117"]
     )
     def test_read_write_reread_dta14(self, file, parsed_114, version):
+        """
+
+        Parameters
+        ----------
+        file :
+            
+        parsed_114 :
+            
+        version :
+            
+
+        Returns
+        -------
+
+        """
         file = getattr(self, file)
         parsed = self.read_dta(file)
         parsed.index.name = "index"
@@ -512,6 +670,17 @@
         "file", ["dta15_113", "dta15_114", "dta15_115", "dta15_117"]
     )
     def test_read_write_reread_dta15(self, file):
+        """
+
+        Parameters
+        ----------
+        file :
+            
+
+        Returns
+        -------
+
+        """
 
         expected = self.read_csv(self.csv15)
         expected["byte_"] = expected["byte_"].astype(np.int8)
@@ -530,6 +699,17 @@
 
     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
     def test_timestamp_and_label(self, version):
+        """
+
+        Parameters
+        ----------
+        version :
+            
+
+        Returns
+        -------
+
+        """
         original = DataFrame([(1,)], columns=["variable"])
         time_stamp = datetime(2000, 2, 29, 14, 21)
         data_label = "This is a data file."
@@ -544,6 +724,17 @@
 
     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
     def test_invalid_timestamp(self, version):
+        """
+
+        Parameters
+        ----------
+        version :
+            
+
+        Returns
+        -------
+
+        """
         original = DataFrame([(1,)], columns=["variable"])
         time_stamp = "01 Jan 2000, 00:00:00"
         with tm.ensure_clean() as path:
@@ -552,6 +743,7 @@
                 original.to_stata(path, time_stamp=time_stamp, version=version)
 
     def test_numeric_column_names(self):
+        """ """
         original = DataFrame(np.reshape(np.arange(25.0), (5, 5)))
         original.index.name = "index"
         with tm.ensure_clean() as path:
@@ -568,6 +760,17 @@
 
     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
     def test_nan_to_missing_value(self, version):
+        """
+
+        Parameters
+        ----------
+        version :
+            
+
+        Returns
+        -------
+
+        """
         s1 = Series(np.arange(4.0), dtype=np.float32)
         s2 = Series(np.arange(4.0), dtype=np.float64)
         s1[::2] = np.nan
@@ -581,6 +784,7 @@
             tm.assert_frame_equal(written_and_read_again, original)
 
     def test_no_index(self):
+        """ """
         columns = ["x", "y"]
         original = DataFrame(np.reshape(np.arange(10.0), (5, 2)), columns=columns)
         original.index.name = "index_not_written"
@@ -591,6 +795,7 @@
                 written_and_read_again["index_not_written"]
 
     def test_string_no_dates(self):
+        """ """
         s1 = Series(["a", "A longer string"])
         s2 = Series([1.0, 2.0], dtype=np.float64)
         original = DataFrame({"s1": s1, "s2": s2})
@@ -601,6 +806,7 @@
             tm.assert_frame_equal(written_and_read_again.set_index("index"), original)
 
     def test_large_value_conversion(self):
+        """ """
         s0 = Series([1, 99], dtype=np.int8)
         s1 = Series([1, 127], dtype=np.int8)
         s2 = Series([1, 2 ** 15 - 1], dtype=np.int16)
@@ -619,6 +825,7 @@
             tm.assert_frame_equal(written_and_read_again.set_index("index"), modified)
 
     def test_dates_invalid_column(self):
+        """ """
         original = DataFrame([datetime(2006, 11, 19, 23, 13, 20)])
         original.index.name = "index"
         with tm.ensure_clean() as path:
@@ -631,6 +838,7 @@
             tm.assert_frame_equal(written_and_read_again.set_index("index"), modified)
 
     def test_105(self):
+        """ """
         # Data obtained from:
         # http://go.worldbank.org/ZXY29PVJ21
         dpath = os.path.join(self.dirpath, "S4_EDUC1.dta")
@@ -645,6 +853,7 @@
         tm.assert_frame_equal(df.head(3), df0)
 
     def test_value_labels_old_format(self):
+        """ """
         # GH 19417
         #
         # Test that value_labels() returns an empty dict if the file format
@@ -655,6 +864,7 @@
         reader.close()
 
     def test_date_export_formats(self):
+        """ """
         columns = ["tc", "td", "tw", "tm", "tq", "th", "ty"]
         conversions = {c: c for c in columns}
         data = [datetime(2006, 11, 20, 23, 13, 20)] * len(columns)
@@ -678,6 +888,7 @@
             tm.assert_frame_equal(written_and_read_again.set_index("index"), expected)
 
     def test_write_missing_strings(self):
+        """ """
         original = DataFrame([["1"], [None]], columns=["foo"])
         expected = DataFrame([["1"], [""]], columns=["foo"])
         expected.index.name = "index"
@@ -689,6 +900,19 @@
     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
     @pytest.mark.parametrize("byteorder", [">", "<"])
     def test_bool_uint(self, byteorder, version):
+        """
+
+        Parameters
+        ----------
+        byteorder :
+            
+        version :
+            
+
+        Returns
+        -------
+
+        """
         s0 = Series([0, 1, True], dtype=np.bool_)
         s1 = Series([0, 1, 100], dtype=np.uint8)
         s2 = Series([0, 1, 255], dtype=np.uint8)
@@ -721,6 +945,7 @@
             tm.assert_frame_equal(written_and_read_again, expected)
 
     def test_variable_labels(self):
+        """ """
         with StataReader(self.dta16_115) as rdr:
             sr_115 = rdr.variable_labels()
         with StataReader(self.dta16_117) as rdr:
@@ -734,6 +959,7 @@
             assert v in labels
 
     def test_minimal_size_col(self):
+        """ """
         str_lens = (1, 100, 244)
         s = {}
         for str_len in str_lens:
@@ -753,6 +979,7 @@
                     assert int(variable[1:]) == typ
 
     def test_excessively_long_string(self):
+        """ """
         str_lens = (1, 244, 500)
         s = {}
         for str_len in str_lens:
@@ -771,6 +998,7 @@
                 original.to_stata(path)
 
     def test_missing_value_generator(self):
+        """ """
         types = ("b", "h", "l")
         df = DataFrame([[0.0]], columns=["float_"])
         with tm.ensure_clean() as path:
@@ -803,6 +1031,17 @@
 
     @pytest.mark.parametrize("file", ["dta17_113", "dta17_115", "dta17_117"])
     def test_missing_value_conversion(self, file):
+        """
+
+        Parameters
+        ----------
+        file :
+            
+
+        Returns
+        -------
+
+        """
         columns = ["int8_", "int16_", "int32_", "float32_", "float64_"]
         smv = StataMissingValue(101)
         keys = sorted(smv.MISSING_VALUES.keys())
@@ -816,6 +1055,7 @@
         tm.assert_frame_equal(parsed, expected)
 
     def test_big_dates(self):
+        """ """
         yr = [1960, 2000, 9999, 100, 2262, 1677]
         mo = [1, 1, 12, 1, 4, 9]
         dd = [1, 1, 31, 1, 22, 23]
@@ -874,6 +1114,7 @@
             )
 
     def test_dtype_conversion(self):
+        """ """
         expected = self.read_csv(self.csv15)
         expected["byte_"] = expected["byte_"].astype(np.int8)
         expected["int_"] = expected["int_"].astype(np.int16)
@@ -900,6 +1141,7 @@
         tm.assert_frame_equal(expected, conversion)
 
     def test_drop_column(self):
+        """ """
         expected = self.read_csv(self.csv15)
         expected["byte_"] = expected["byte_"].astype(np.int8)
         expected["int_"] = expected["int_"].astype(np.int16)
@@ -937,6 +1179,17 @@
         "ignore:\\nStata value:pandas.io.stata.ValueLabelTypeMismatch"
     )
     def test_categorical_writing(self, version):
+        """
+
+        Parameters
+        ----------
+        version :
+            
+
+        Returns
+        -------
+
+        """
         original = DataFrame.from_records(
             [
                 ["one", "ten", "one", "one", "one", 1],
@@ -988,6 +1241,7 @@
             tm.assert_frame_equal(res, expected)
 
     def test_categorical_warnings_and_errors(self):
+        """ """
         # Warning for non-string labels
         # Error for labels too long
         original = pd.DataFrame.from_records(
@@ -1019,6 +1273,17 @@
 
     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
     def test_categorical_with_stata_missing_values(self, version):
+        """
+
+        Parameters
+        ----------
+        version :
+            
+
+        Returns
+        -------
+
+        """
         values = [["a" + str(i)] for i in range(120)]
         values.append([np.nan])
         original = pd.DataFrame.from_records(values, columns=["many_labels"])
@@ -1041,6 +1306,17 @@
 
     @pytest.mark.parametrize("file", ["dta19_115", "dta19_117"])
     def test_categorical_order(self, file):
+        """
+
+        Parameters
+        ----------
+        file :
+            
+
+        Returns
+        -------
+
+        """
         # Directly construct using expected codes
         # Format is is_cat, col_name, labels (in order), underlying data
         expected = [
@@ -1077,6 +1353,17 @@
 
     @pytest.mark.parametrize("file", ["dta20_115", "dta20_117"])
     def test_categorical_sorting(self, file):
+        """
+
+        Parameters
+        ----------
+        file :
+            
+
+        Returns
+        -------
+
+        """
         parsed = read_stata(getattr(self, file))
 
         # Sort based on codes, not strings
@@ -1094,6 +1381,17 @@
 
     @pytest.mark.parametrize("file", ["dta19_115", "dta19_117"])
     def test_categorical_ordering(self, file):
+        """
+
+        Parameters
+        ----------
+        file :
+            
+
+        Returns
+        -------
+
+        """
         file = getattr(self, file)
         parsed = read_stata(file)
 
@@ -1126,6 +1424,23 @@
     def test_read_chunks_117(
         self, file, chunksize, convert_categoricals, convert_dates
     ):
+        """
+
+        Parameters
+        ----------
+        file :
+            
+        chunksize :
+            
+        convert_categoricals :
+            
+        convert_dates :
+            
+
+        Returns
+        -------
+
+        """
         fname = getattr(self, file)
 
         with warnings.catch_warnings(record=True) as w:
@@ -1161,8 +1476,16 @@
 
     @staticmethod
     def _convert_categorical(from_frame: DataFrame) -> DataFrame:
-        """
-        Emulate the categorical casting behavior we expect from roundtripping.
+        """Emulate the categorical casting behavior we expect from roundtripping.
+
+        Parameters
+        ----------
+        from_frame: DataFrame :
+            
+
+        Returns
+        -------
+
         """
         for col in from_frame:
             ser = from_frame[col]
@@ -1175,6 +1498,7 @@
         return from_frame
 
     def test_iterator(self):
+        """ """
 
         fname = self.dta3_117
 
@@ -1222,6 +1546,23 @@
     def test_read_chunks_115(
         self, file, chunksize, convert_categoricals, convert_dates
     ):
+        """
+
+        Parameters
+        ----------
+        file :
+            
+        chunksize :
+            
+        convert_categoricals :
+            
+        convert_dates :
+            
+
+        Returns
+        -------
+
+        """
         fname = getattr(self, file)
 
         # Read the whole file
@@ -1258,6 +1599,7 @@
         itr.close()
 
     def test_read_chunks_columns(self):
+        """ """
         fname = self.dta3_117
         columns = ["quarter", "cpi", "m1"]
         chunksize = 2
@@ -1275,6 +1617,19 @@
 
     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
     def test_write_variable_labels(self, version, mixed_frame):
+        """
+
+        Parameters
+        ----------
+        version :
+            
+        mixed_frame :
+            
+
+        Returns
+        -------
+
+        """
         # GH 13631, add support for writing variable labels
         mixed_frame.index.name = "index"
         variable_labels = {"a": "City Rank", "b": "City Exponent", "c": "City"}
@@ -1299,6 +1654,19 @@
 
     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
     def test_invalid_variable_labels(self, version, mixed_frame):
+        """
+
+        Parameters
+        ----------
+        version :
+            
+        mixed_frame :
+            
+
+        Returns
+        -------
+
+        """
         mixed_frame.index.name = "index"
         variable_labels = {"a": "very long" * 10, "b": "City Exponent", "c": "City"}
         with tm.ensure_clean() as path:
@@ -1310,6 +1678,19 @@
 
     @pytest.mark.parametrize("version", [114, 117])
     def test_invalid_variable_label_encoding(self, version, mixed_frame):
+        """
+
+        Parameters
+        ----------
+        version :
+            
+        mixed_frame :
+            
+
+        Returns
+        -------
+
+        """
         mixed_frame.index.name = "index"
         variable_labels = {"a": "very long" * 10, "b": "City Exponent", "c": "City"}
         variable_labels["a"] = "invalid character Œ"
@@ -1322,6 +1703,17 @@
                 )
 
     def test_write_variable_label_errors(self, mixed_frame):
+        """
+
+        Parameters
+        ----------
+        mixed_frame :
+            
+
+        Returns
+        -------
+
+        """
         values = ["\u03A1", "\u0391", "\u039D", "\u0394", "\u0391", "\u03A3"]
 
         variable_labels_utf8 = {
@@ -1352,6 +1744,7 @@
                 mixed_frame.to_stata(path, variable_labels=variable_labels_long)
 
     def test_default_date_conversion(self):
+        """ """
         # GH 12259
         dates = [
             dt.datetime(1999, 12, 31, 12, 12, 12, 12000),
@@ -1381,6 +1774,7 @@
             tm.assert_frame_equal(reread, direct)
 
     def test_unsupported_type(self):
+        """ """
         original = pd.DataFrame({"a": [1 + 2j, 2 + 4j]})
 
         msg = "Data type complex128 not supported"
@@ -1389,6 +1783,7 @@
                 original.to_stata(path)
 
     def test_unsupported_datetype(self):
+        """ """
         dates = [
             dt.datetime(1999, 12, 31, 12, 12, 12, 12000),
             dt.datetime(2012, 12, 21, 12, 21, 12, 21000),
@@ -1420,6 +1815,7 @@
                 original.to_stata(path)
 
     def test_repeated_column_labels(self):
+        """ """
         # GH 13923, 25772
         msg = """
 Value labels for column ethnicsn are not unique. These cannot be converted to
@@ -1435,6 +1831,7 @@
             read_stata(self.dta23, convert_categoricals=True)
 
     def test_stata_111(self):
+        """ """
         # 111 is an old version but still used by current versions of
         # SAS when exporting to Stata format. We do not know of any
         # on-line documentation for this version.
@@ -1451,6 +1848,7 @@
         tm.assert_frame_equal(original, df)
 
     def test_out_of_range_double(self):
+        """ """
         # GH 14618
         df = DataFrame(
             {
@@ -1476,6 +1874,7 @@
                 df.to_stata(path)
 
     def test_out_of_range_float(self):
+        """ """
         original = DataFrame(
             {
                 "ColumnOk": [
@@ -1510,6 +1909,7 @@
                 original.to_stata(path)
 
     def test_path_pathlib(self):
+        """ """
         df = tm.makeDataFrame()
         df.index.name = "index"
         reader = lambda x: read_stata(x).set_index("index")
@@ -1517,6 +1917,7 @@
         tm.assert_frame_equal(df, result)
 
     def test_pickle_path_localpath(self):
+        """ """
         df = tm.makeDataFrame()
         df.index.name = "index"
         reader = lambda x: read_stata(x).set_index("index")
@@ -1525,6 +1926,17 @@
 
     @pytest.mark.parametrize("write_index", [True, False])
     def test_value_labels_iterator(self, write_index):
+        """
+
+        Parameters
+        ----------
+        write_index :
+            
+
+        Returns
+        -------
+
+        """
         # GH 16923
         d = {"A": ["B", "E", "C", "A", "E"]}
         df = pd.DataFrame(data=d)
@@ -1537,6 +1949,7 @@
         assert value_labels == {"A": {0: "A", 1: "B", 2: "C", 3: "E"}}
 
     def test_set_index(self):
+        """ """
         # GH 17328
         df = tm.makeDataFrame()
         df.index.name = "index"
@@ -1549,6 +1962,17 @@
         "column", ["ms", "day", "week", "month", "qtr", "half", "yr"]
     )
     def test_date_parsing_ignores_format_details(self, column):
+        """
+
+        Parameters
+        ----------
+        column :
+            
+
+        Returns
+        -------
+
+        """
         # GH 17797
         #
         # Test that display formats are ignored when determining if a numeric
@@ -1566,6 +1990,7 @@
         assert unformatted == formatted
 
     def test_writer_117(self):
+        """ """
         original = DataFrame(
             data=[
                 [
@@ -1637,6 +2062,7 @@
             tm.assert_frame_equal(original, copy)
 
     def test_convert_strl_name_swap(self):
+        """ """
         original = DataFrame(
             [["a" * 3000, "A", "apple"], ["b" * 1000, "B", "banana"]],
             columns=["long1" * 10, "long", 1],
@@ -1652,6 +2078,7 @@
                 tm.assert_frame_equal(reread, original, check_index_type=False)
 
     def test_invalid_date_conversion(self):
+        """ """
         # GH 12259
         dates = [
             dt.datetime(1999, 12, 31, 12, 12, 12, 12000),
@@ -1673,6 +2100,17 @@
 
     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
     def test_nonfile_writing(self, version):
+        """
+
+        Parameters
+        ----------
+        version :
+            
+
+        Returns
+        -------
+
+        """
         # GH 21041
         bio = io.BytesIO()
         df = tm.makeDataFrame()
@@ -1686,6 +2124,7 @@
         tm.assert_frame_equal(df, reread)
 
     def test_gzip_writing(self):
+        """ """
         # writing version 117 requires seek and cannot be used with gzip
         df = tm.makeDataFrame()
         df.index.name = "index"
@@ -1697,6 +2136,7 @@
         tm.assert_frame_equal(df, reread)
 
     def test_unicode_dta_118(self):
+        """ """
         unicode_df = self.read_dta(self.dta25_118)
 
         columns = ["utf8", "latin1", "ascii", "utf8_strl", "ascii_strl"]
@@ -1714,6 +2154,7 @@
         tm.assert_frame_equal(unicode_df, expected)
 
     def test_mixed_string_strl(self):
+        """ """
         # GH 23633
         output = [{"mixed": "string" * 500, "number": 0}, {"mixed": None, "number": 1}]
         output = pd.DataFrame(output)
@@ -1736,6 +2177,17 @@
 
     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
     def test_all_none_exception(self, version):
+        """
+
+        Parameters
+        ----------
+        version :
+            
+
+        Returns
+        -------
+
+        """
         output = [{"none": "none", "number": 0}, {"none": None, "number": 1}]
         output = pd.DataFrame(output)
         output.loc[:, "none"] = None
@@ -1745,6 +2197,17 @@
 
     @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
     def test_invalid_file_not_written(self, version):
+        """
+
+        Parameters
+        ----------
+        version :
+            
+
+        Returns
+        -------
+
+        """
         content = "Here is one __�__ Another one __·__ Another one __½__"
         df = DataFrame([content], columns=["invalid"])
         with tm.ensure_clean() as path:
@@ -1761,6 +2224,7 @@
                     df.to_stata(path)
 
     def test_strl_latin1(self):
+        """ """
         # GH 23573, correct GSO data to reflect correct size
         output = DataFrame(
             [["pandas"] * 2, ["þâÑÐÅ§"] * 2], columns=["var_str", "var_strl"]
@@ -1780,6 +2244,7 @@
                     assert len(val) == size - 1
 
     def test_encoding_latin1_118(self):
+        """ """
         # GH 25960
         msg = """
 One or more strings in the dta file could not be decoded using utf-8, and
@@ -1796,6 +2261,7 @@
 
     @pytest.mark.slow
     def test_stata_119(self):
+        """ """
         # Gzipped since contains 32,999 variables and uncompressed is 20MiB
         with gzip.open(self.dta26_119, "rb") as gz:
             df = read_stata(gz)
@@ -1807,6 +2273,17 @@
 
     @pytest.mark.parametrize("version", [118, 119, None])
     def test_utf8_writer(self, version):
+        """
+
+        Parameters
+        ----------
+        version :
+            
+
+        Returns
+        -------
+
+        """
         cat = pd.Categorical(["a", "β", "ĉ"], ordered=True)
         data = pd.DataFrame(
             [
@@ -1850,6 +2327,7 @@
             tm.assert_frame_equal(data, reread_to_stata)
 
     def test_writer_118_exceptions(self):
+        """ """
         df = DataFrame(np.zeros((1, 33000), dtype=np.int8))
         with tm.ensure_clean() as path:
             with pytest.raises(ValueError, match="version must be either 118 or 119."):
@@ -1861,6 +2339,19 @@
 
 @pytest.mark.parametrize("version", [105, 108, 111, 113, 114])
 def test_backward_compat(version, datapath):
+    """
+
+    Parameters
+    ----------
+    version :
+        
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     data_base = datapath("io", "data", "stata")
     ref = os.path.join(data_base, "stata-compat-118.dta")
     old = os.path.join(data_base, f"stata-compat-{version}.dta")
@@ -1873,6 +2364,23 @@
 @pytest.mark.parametrize("use_dict", [True, False])
 @pytest.mark.parametrize("infer", [True, False])
 def test_compression(compression, version, use_dict, infer):
+    """
+
+    Parameters
+    ----------
+    compression :
+        
+    version :
+        
+    use_dict :
+        
+    infer :
+        
+
+    Returns
+    -------
+
+    """
     file_name = "dta_inferred_compression.dta"
     if compression:
         file_ext = "gz" if compression == "gzip" and not use_dict else compression
@@ -1908,6 +2416,19 @@
 @pytest.mark.parametrize("method", ["zip", "infer"])
 @pytest.mark.parametrize("file_ext", [None, "dta", "zip"])
 def test_compression_dict(method, file_ext):
+    """
+
+    Parameters
+    ----------
+    method :
+        
+    file_ext :
+        
+
+    Returns
+    -------
+
+    """
     file_name = f"test.{file_ext}"
     archive_name = "test.dta"
     df = DataFrame(np.random.randn(10, 2), columns=list("AB"))
@@ -1928,6 +2449,17 @@
 
 @pytest.mark.parametrize("version", [114, 117, 118, 119, None])
 def test_chunked_categorical(version):
+    """
+
+    Parameters
+    ----------
+    version :
+        
+
+    Returns
+    -------
+
+    """
     df = DataFrame({"cats": Series(["a", "b", "a", "b", "c"], dtype="category")})
     df.index.name = "index"
     with tm.ensure_clean() as path:
@@ -1940,6 +2472,17 @@
 
 
 def test_chunked_categorical_partial(dirpath):
+    """
+
+    Parameters
+    ----------
+    dirpath :
+        
+
+    Returns
+    -------
+
+    """
     dta_file = os.path.join(dirpath, "stata-dta-partially-labeled.dta")
     values = ["a", "b", "a", "b", 3.0]
     with StataReader(dta_file, chunksize=2) as reader:
@@ -1959,6 +2502,17 @@
 
 
 def test_iterator_errors(dirpath):
+    """
+
+    Parameters
+    ----------
+    dirpath :
+        
+
+    Returns
+    -------
+
+    """
     dta_file = os.path.join(dirpath, "stata-dta-partially-labeled.dta")
     with pytest.raises(ValueError, match="chunksize must be a positive"):
         StataReader(dta_file, chunksize=-1)
@@ -1969,6 +2523,7 @@
 
 
 def test_iterator_value_labels():
+    """ """
     # GH 31544
     values = ["c_label", "b_label"] + ["a_label"] * 500
     df = DataFrame({f"col{k}": pd.Categorical(values, ordered=True) for k in range(2)})
@@ -1983,6 +2538,7 @@
 
 
 def test_precision_loss():
+    """ """
     df = DataFrame(
         [[sum(2 ** i for i in range(60)), sum(2 ** i for i in range(52))]],
         columns=["big", "little"],
