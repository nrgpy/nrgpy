# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/requests_toolbelt/_compat.py
+++ b/..//venv/lib/python3.8/site-packages/requests_toolbelt/_compat.py
@@ -81,27 +81,32 @@
 
 class HTTPHeaderDict(MutableMapping):
     """
-    :param headers:
+
+    Parameters
+    ----------
+    headers :
         An iterable of field-value pairs. Must not contain multiple field names
         when compared case-insensitively.
-
-    :param kwargs:
+    kwargs :
         Additional field-value pairs to pass in to ``dict.update``.
-
-    A ``dict`` like container for storing HTTP Headers.
-
-    Field names are stored and compared case-insensitively in compliance with
-    RFC 7230. Iteration provides the first case-sensitive key seen for each
-    case-insensitive pair.
-
-    Using ``__setitem__`` syntax overwrites fields that compare equal
-    case-insensitively in order to maintain ``dict``'s api. For fields that
-    compare equal, instead create a new ``HTTPHeaderDict`` and use ``.add``
-    in a loop.
-
-    If multiple fields that are equal case-insensitively are passed to the
-    constructor or ``.update``, the behavior is undefined and some will be
-    lost.
+        
+        A ``dict`` like container for storing HTTP Headers.
+        
+        Field names are stored and compared case-insensitively in compliance with
+        RFC 7230. Iteration provides the first case-sensitive key seen for each
+        case-insensitive pair.
+        
+        Using ``__setitem__`` syntax overwrites fields that compare equal
+        case-insensitively in order to maintain ``dict``'s api. For fields that
+        compare equal, instead create a new ``HTTPHeaderDict`` and use ``.add``
+        in a loop.
+        
+        If multiple fields that are equal case-insensitively are passed to the
+        constructor or ``.update``, the behavior is undefined and some will be
+        lost.
+
+    Returns
+    -------
 
     >>> headers = HTTPHeaderDict()
     >>> headers.add('Set-Cookie', 'foo=bar')
@@ -165,9 +170,19 @@
 
     def pop(self, key, default=__marker):
         """D.pop(k[,d]) -> v, remove specified key and return its value.
-
+        
         If key is not found, d is returned if given, otherwise KeyError is
-        raised.
+
+        Parameters
+        ----------
+        key :
+            
+        default :
+             (Default value = __marker)
+
+        Returns
+        -------
+
         """
         # Using the MutableMapping function directly fails due to the private
         # marker.
@@ -184,6 +199,17 @@
             return value
 
     def discard(self, key):
+        """
+
+        Parameters
+        ----------
+        key :
+            
+
+        Returns
+        -------
+
+        """
         try:
             del self[key]
         except KeyError:
@@ -192,6 +218,16 @@
     def add(self, key, val):
         """Adds a (name, value) pair, doesn't overwrite the value if it already
         exists.
+
+        Parameters
+        ----------
+        key :
+            
+        val :
+            
+
+        Returns
+        -------
 
         >>> headers = HTTPHeaderDict(foo='bar')
         >>> headers.add('Foo', 'baz')
@@ -216,6 +252,17 @@
         """Generic import function for any type of header-like object.
         Adapted version of MutableMapping.update in order to insert items
         with self.add instead of self.__setitem__
+
+        Parameters
+        ----------
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
         """
         if len(args) > 1:
             raise TypeError("extend() takes at most 1 positional "
@@ -240,7 +287,17 @@
 
     def getlist(self, key):
         """Returns a list of all the values for the named field. Returns an
-        empty list if the key doesn't exist."""
+        empty list if the key doesn't exist.
+
+        Parameters
+        ----------
+        key :
+            
+
+        Returns
+        -------
+
+        """
         try:
             vals = self._container[key.lower()]
         except KeyError:
@@ -260,6 +317,17 @@
         return "%s(%s)" % (type(self).__name__, dict(self.itermerged()))
 
     def _copy_from(self, other):
+        """
+
+        Parameters
+        ----------
+        other :
+            
+
+        Returns
+        -------
+
+        """
         for key in other:
             val = other.getlist(key)
             if isinstance(val, list):
@@ -268,6 +336,7 @@
             self._container[key.lower()] = [key] + val
 
     def copy(self):
+        """ """
         clone = type(self)()
         clone._copy_from(self)
         return clone
@@ -286,11 +355,22 @@
             yield val[0], ', '.join(val[1:])
 
     def items(self):
+        """ """
         return list(self.iteritems())
 
     @classmethod
     def from_httplib(cls, message):  # Python 2
-        """Read headers from a Python 2 httplib message object."""
+        """Read headers from a Python 2 httplib message object.
+
+        Parameters
+        ----------
+        message :
+            
+
+        Returns
+        -------
+
+        """
         # python2.7 does not expose a proper API for exporting multiheaders
         # efficiently. This function re-reads raw lines from the message
         # object and extracts the multiheaders properly.
