# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/io/formats/latex.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/io/formats/latex.py
@@ -11,17 +11,20 @@
 
 
 class LatexFormatter(TableFormatter):
-    """
-    Used to render a DataFrame to a LaTeX tabular/longtable environment output.
+    """Used to render a DataFrame to a LaTeX tabular/longtable environment output.
 
     Parameters
     ----------
     formatter : `DataFrameFormatter`
+        
     column_format : str, default None
         The columns format as specified in `LaTeX table format
         <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g 'rcl' for 3 columns
     longtable : boolean, default False
         Use a longtable environment instead of tabular.
+
+    Returns
+    -------
 
     See Also
     --------
@@ -52,9 +55,17 @@
         self.escape = self.fmt.escape
 
     def write_result(self, buf: IO[str]) -> None:
-        """
-        Render a DataFrame to a LaTeX tabular, longtable, or table/tabular
+        """Render a DataFrame to a LaTeX tabular, longtable, or table/tabular
         environment output.
+
+        Parameters
+        ----------
+        buf: IO[str] :
+            
+
+        Returns
+        -------
+
         """
         # string representation of the columns
         if len(self.frame.columns) == 0 or len(self.frame.index) == 0:
@@ -68,6 +79,17 @@
             strcols = self.fmt._to_str_columns()
 
         def get_col_type(dtype):
+            """
+
+            Parameters
+            ----------
+            dtype :
+                
+
+            Returns
+            -------
+
+            """
             if issubclass(dtype.type, np.number):
                 return "r"
             else:
@@ -85,6 +107,17 @@
             # index.format will sparsify repeated entries with empty strings
             # so pad these with some empty space
             def pad_empties(x):
+                """
+
+                Parameters
+                ----------
+                x :
+                    
+
+                Returns
+                -------
+
+                """
                 for pad in reversed(x):
                     if pad:
                         break
@@ -193,20 +226,30 @@
             self._write_tabular_end(buf)
 
     def _format_multicolumn(self, row: List[str], ilevels: int) -> List[str]:
-        r"""
+        """r"""
         Combine columns belonging to a group to a single multicolumn entry
         according to self.multicolumn_format
-
+        
         e.g.:
         a &  &  & b & c &
         will become
         \multicolumn{3}{l}{a} & b & \multicolumn{2}{l}{c}
-        """
+
+        Parameters
+        ----------
+        row: List[str] :
+            
+        ilevels: int :
+            
+
+        Returns
+        -------
         row2 = list(row[:ilevels])
         ncol = 1
         coltext = ""
 
         def append_col():
+            """ """
             # write multicolumn if needed
             if ncol > 1:
                 row2.append(
@@ -235,15 +278,30 @@
     def _format_multirow(
         self, row: List[str], ilevels: int, i: int, rows: List[Tuple[str, ...]]
     ) -> List[str]:
-        r"""
+        """r"""
         Check following rows, whether row should be a multirow
-
+        
         e.g.:     becomes:
         a & 0 &   \multirow{2}{*}{a} & 0 &
           & 1 &     & 1 &
         b & 0 &   \cline{1-2}
                   b & 0 &
-        """
+
+        Parameters
+        ----------
+        row: List[str] :
+            
+        ilevels: int :
+            
+        i: int :
+            
+        rows: List[Tuple[str :
+            
+        ...]] :
+            
+
+        Returns
+        -------
         for j in range(ilevels):
             if row[j].strip():
                 nrow = 1
@@ -260,8 +318,20 @@
         return row
 
     def _print_cline(self, buf: IO[str], i: int, icol: int) -> None:
-        """
-        Print clines after multirow-blocks are finished.
+        """Print clines after multirow-blocks are finished.
+
+        Parameters
+        ----------
+        buf: IO[str] :
+            
+        i: int :
+            
+        icol: int :
+            
+
+        Returns
+        -------
+
         """
         for cl in self.clinebuf:
             if cl[0] == i:
@@ -270,19 +340,20 @@
         self.clinebuf = [x for x in self.clinebuf if x[0] != i]
 
     def _write_tabular_begin(self, buf, column_format: str):
-        """
-        Write the beginning of a tabular environment or
+        """Write the beginning of a tabular environment or
         nested table/tabular environments including caption and label.
 
         Parameters
         ----------
-        buf : string or file handle
-            File path or object. If not specified, the result is returned as
-            a string.
-        column_format : str
-            The columns format as specified in `LaTeX table format
-            <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g 'rcl'
-            for 3 columns
+        buf :
+            
+        column_format: str :
+            
+
+        Returns
+        -------
+
+        
         """
         if self.caption is not None or self.label is not None:
             # then write output in a nested table/tabular environment
@@ -304,16 +375,18 @@
         buf.write(f"\\begin{{tabular}}{{{column_format}}}\n")
 
     def _write_tabular_end(self, buf):
-        """
-        Write the end of a tabular environment or nested table/tabular
+        """Write the end of a tabular environment or nested table/tabular
         environment.
 
         Parameters
         ----------
-        buf : string or file handle
-            File path or object. If not specified, the result is returned as
-            a string.
-
+        buf :
+            
+
+        Returns
+        -------
+
+        
         """
         buf.write("\\bottomrule\n")
         buf.write("\\end{tabular}\n")
@@ -323,19 +396,20 @@
             pass
 
     def _write_longtable_begin(self, buf, column_format: str):
-        """
-        Write the beginning of a longtable environment including caption and
+        """Write the beginning of a longtable environment including caption and
         label if provided by user.
 
         Parameters
         ----------
-        buf : string or file handle
-            File path or object. If not specified, the result is returned as
-            a string.
-        column_format : str
-            The columns format as specified in `LaTeX table format
-            <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g 'rcl'
-            for 3 columns
+        buf :
+            
+        column_format: str :
+            
+
+        Returns
+        -------
+
+        
         """
         buf.write(f"\\begin{{longtable}}{{{column_format}}}\n")
 
@@ -359,14 +433,16 @@
 
     @staticmethod
     def _write_longtable_end(buf):
-        """
-        Write the end of a longtable environment.
-
-        Parameters
-        ----------
-        buf : string or file handle
-            File path or object. If not specified, the result is returned as
-            a string.
-
+        """Write the end of a longtable environment.
+
+        Parameters
+        ----------
+        buf :
+            
+
+        Returns
+        -------
+
+        
         """
         buf.write("\\end{longtable}\n")
