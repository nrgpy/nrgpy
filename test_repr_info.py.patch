# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/frame/test_repr_info.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/frame/test_repr_info.py
@@ -19,7 +19,9 @@
 
 
 class TestDataFrameReprInfoEtc:
+    """ """
     def test_repr_empty(self):
+        """ """
         # empty
         repr(DataFrame())
 
@@ -28,6 +30,17 @@
         repr(frame)
 
     def test_repr_mixed(self, float_string_frame):
+        """
+
+        Parameters
+        ----------
+        float_string_frame :
+            
+
+        Returns
+        -------
+
+        """
         buf = StringIO()
 
         # mixed
@@ -36,6 +49,7 @@
 
     @pytest.mark.slow
     def test_repr_mixed_big(self):
+        """ """
         # big mixed
         biggie = DataFrame(
             {"A": np.random.randn(200), "B": tm.makeStringIndex(200)}, index=range(200)
@@ -46,6 +60,17 @@
         repr(biggie)
 
     def test_repr(self, float_frame):
+        """
+
+        Parameters
+        ----------
+        float_frame :
+            
+
+        Returns
+        -------
+
+        """
         buf = StringIO()
 
         # small one
@@ -71,6 +96,7 @@
         assert "a\n" not in repr(df)
 
     def test_repr_dimensions(self):
+        """ """
         df = DataFrame([[1, 2], [3, 4]])
         with option_context("display.show_dimensions", True):
             assert "2 rows x 2 columns" in repr(df)
@@ -83,11 +109,23 @@
 
     @pytest.mark.slow
     def test_repr_big(self):
+        """ """
         # big one
         biggie = DataFrame(np.zeros((200, 4)), columns=range(4), index=range(200))
         repr(biggie)
 
     def test_repr_unsortable(self, float_frame):
+        """
+
+        Parameters
+        ----------
+        float_frame :
+            
+
+        Returns
+        -------
+
+        """
         # columns are not sortable
 
         warn_filters = warnings.filters
@@ -118,6 +156,7 @@
         warnings.filters = warn_filters
 
     def test_repr_unicode(self):
+        """ """
         uval = "\u03c3\u03c3\u03c3\u03c3"
 
         df = DataFrame({"A": [uval, uval]})
@@ -131,14 +170,17 @@
         assert result.split("\n")[0].rstrip() == ex_top
 
     def test_unicode_string_with_unicode(self):
+        """ """
         df = DataFrame({"A": ["\u05d0"]})
         str(df)
 
     def test_repr_unicode_columns(self):
+        """ """
         df = DataFrame({"\u05d0": [1, 2, 3], "\u05d1": [4, 5, 6], "c": [7, 8, 9]})
         repr(df.columns)  # should not raise UnicodeDecodeError
 
     def test_str_to_bytes_raises(self):
+        """ """
         # GH 26447
         df = DataFrame({"A": ["abc"]})
         msg = "^'str' object cannot be interpreted as an integer$"
@@ -146,10 +188,12 @@
             bytes(df)
 
     def test_very_wide_info_repr(self):
+        """ """
         df = DataFrame(np.random.randn(10, 20), columns=tm.rands_array(10, 20))
         repr(df)
 
     def test_repr_column_name_unicode_truncation_bug(self):
+        """ """
         # #1906
         df = DataFrame(
             {
@@ -171,15 +215,20 @@
             assert "StringCol" in repr(df)
 
     def test_latex_repr(self):
-        result = r"""\begin{tabular}{llll}
-\toprule
-{} &         0 &  1 &  2 \\
-\midrule
-0 &  $\alpha$ &  b &  c \\
-1 &         1 &  2 &  3 \\
-\bottomrule
-\end{tabular}
-"""
+        """result = r"""\begin{tabular}{llll}
+        \toprule
+        {} & 0 &  1 &  2 \\
+        \midrule
+        0 &  $\alpha$ &  b &  c \\
+        1 & 1 &  2 &  3 \\
+        \bottomrule
+        \end{tabular}
+
+        Parameters
+        ----------
+
+        Returns
+        -------
         with option_context("display.latex.escape", False, "display.latex.repr", True):
             df = DataFrame([[r"$\alpha$", "b", "c"], [1, 2, 3]])
             assert result == df._repr_latex_()
@@ -188,6 +237,7 @@
         assert df._repr_latex_() is None
 
     def test_repr_categorical_dates_periods(self):
+        """ """
         # normal DataFrame
         dt = date_range("2011-01-01 09:00", freq="H", periods=5, tz="US/Eastern")
         p = period_range("2011-01", freq="M", periods=5)
@@ -210,11 +260,27 @@
         [[Series, "0    NaT\ndtype: object"], [DataFrame, "     0\n0  NaT"]],
     )
     def test_repr_np_nat_with_object(self, arg, box, expected):
+        """
+
+        Parameters
+        ----------
+        arg :
+            
+        box :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # GH 25445
         result = repr(box([arg("NaT")], dtype=object))
         assert result == expected
 
     def test_frame_datetime64_pre1900_repr(self):
+        """ """
         df = DataFrame({"year": date_range("1/1/1700", periods=50, freq="A-DEC")})
         # it works!
         repr(df)
