# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/formats/test_printing.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/formats/test_printing.py
@@ -10,6 +10,7 @@
 
 
 def test_adjoin():
+    """ """
     data = [["a", "b", "c"], ["dd", "ee", "ff"], ["ggg", "hhh", "iii"]]
     expected = "a  dd  ggg\nb  ee  hhh\nc  ff  iii"
 
@@ -19,6 +20,7 @@
 
 
 def test_repr_binary_type():
+    """ """
     import string
 
     letters = string.ascii_letters
@@ -34,7 +36,9 @@
 
 
 class TestFormattBase:
+    """ """
     def test_adjoin(self):
+        """ """
         data = [["a", "b", "c"], ["dd", "ee", "ff"], ["ggg", "hhh", "iii"]]
         expected = "a  dd  ggg\nb  ee  hhh\nc  ff  iii"
 
@@ -43,6 +47,7 @@
         assert adjoined == expected
 
     def test_adjoin_unicode(self):
+        """ """
         data = [["あ", "b", "c"], ["dd", "ええ", "ff"], ["ggg", "hhh", "いいい"]]
         expected = "あ  dd  ggg\nb  ええ  hhh\nc  ff  いいい"
         adjoined = printing.adjoin(2, *data)
@@ -73,9 +78,25 @@
         assert adj.len(cols[2]) == 26
 
     def test_justify(self):
+        """ """
         adj = fmt.EastAsianTextAdjustment()
 
         def just(x, *args, **kwargs):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+            *args :
+                
+            **kwargs :
+                
+
+            Returns
+            -------
+
+            """
             # wrapper to test single str
             return adj.justify([x], *args, **kwargs)[0]
 
@@ -95,6 +116,7 @@
         assert just("パンダ", 10, mode="right") == "    パンダ"
 
     def test_east_asian_len(self):
+        """ """
         adj = fmt.EastAsianTextAdjustment()
 
         assert adj.len("abc") == 3
@@ -106,6 +128,7 @@
         assert adj.len("ﾊﾟﾝﾀﾞpanda") == 10
 
     def test_ambiguous_width(self):
+        """ """
         adj = fmt.EastAsianTextAdjustment()
         assert adj.len("¡¡ab") == 4
 
@@ -120,8 +143,10 @@
 
 
 class TestTableSchemaRepr:
+    """ """
     @classmethod
     def setup_class(cls):
+        """ """
         pytest.importorskip("IPython")
 
         from IPython.core.interactiveshell import InteractiveShell
@@ -129,6 +154,7 @@
         cls.display_formatter = InteractiveShell.instance().display_formatter
 
     def test_publishes(self):
+        """ """
 
         df = pd.DataFrame({"A": [1, 2]})
         objects = [df["A"], df, df]  # dataframe / series
@@ -157,6 +183,7 @@
         assert set(formatted[0].keys()) == expected
 
     def test_publishes_not_implemented(self):
+        """ """
         # column MultiIndex
         # GH 15996
         midx = pd.MultiIndex.from_product([["A", "B"], ["a", "b", "c"]])
@@ -171,6 +198,7 @@
         assert set(formatted[0].keys()) == expected
 
     def test_config_on(self):
+        """ """
         df = pd.DataFrame({"A": [1, 2]})
         with pd.option_context("display.html.table_schema", True):
             result = df._repr_data_resource_()
@@ -178,6 +206,7 @@
         assert result is not None
 
     def test_config_default_off(self):
+        """ """
         df = pd.DataFrame({"A": [1, 2]})
         with pd.option_context("display.html.table_schema", False):
             result = df._repr_data_resource_()
@@ -185,6 +214,7 @@
         assert result is None
 
     def test_enable_data_resource_formatter(self):
+        """ """
         # GH 10491
         formatters = self.display_formatter.formatters
         mimetype = "application/vnd.dataresource+json"
