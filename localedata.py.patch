# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/babel/localedata.py
+++ b/..//venv/lib/python3.8/site-packages/babel/localedata.py
@@ -26,9 +26,18 @@
 
 def normalize_locale(name):
     """Normalize a locale ID by stripping spaces and apply proper casing.
-
+    
     Returns the normalized locale ID string or `None` if the ID is not
     recognized.
+
+    Parameters
+    ----------
+    name :
+        
+
+    Returns
+    -------
+
     """
     if not name or not isinstance(name, string_types):
         return None
@@ -40,10 +49,17 @@
 
 def exists(name):
     """Check whether locale data is available for the given locale.
-
+    
     Returns `True` if it exists, `False` otherwise.
 
-    :param name: the locale identifier string
+    Parameters
+    ----------
+    name :
+        the locale identifier string
+
+    Returns
+    -------
+
     """
     if not name or not isinstance(name, string_types):
         return False
@@ -54,17 +70,25 @@
 
 
 def locale_identifiers():
-    """Return a list of all locale identifiers for which locale data is
-    available.
-
-    This data is cached after the first invocation in `locale_identifiers.cache`.
-
-    Removing the `locale_identifiers.cache` attribute or setting it to `None`
-    will cause this function to re-read the list from disk.
-
-    .. versionadded:: 0.8.1
-
-    :return: a list of locale identifiers (strings)
+    """
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+    type
+        available.
+        
+        This data is cached after the first invocation in `locale_identifiers.cache`.
+        
+        Removing the `locale_identifiers.cache` attribute or setting it to `None`
+        will cause this function to re-read the list from disk.
+        
+        .. versionadded:: 0.8.1
+        
+        :return: a list of locale identifiers (strings)
+
     """
     data = getattr(locale_identifiers, 'cache', None)
     if data is None:
@@ -79,28 +103,36 @@
 
 def load(name, merge_inherited=True):
     """Load the locale data for the given locale.
-
+    
     The locale data is a dictionary that contains much of the data defined by
     the Common Locale Data Repository (CLDR). This data is stored as a
     collection of pickle files inside the ``babel`` package.
+    
+    
+    Note that the results are cached, and subsequent requests for the same
+    locale return the same dictionary:
+
+    Parameters
+    ----------
+    name :
+        the locale identifier string (or "root")
+    merge_inherited :
+        whether the inherited data should be merged into
+        the data of the requested locale
+        :raise `IOError`: if no locale data file is found for the given locale
+        identifer, or one of the locales it inherits from (Default value = True)
+
+    Returns
+    -------
 
     >>> d = load('en_US')
     >>> d['languages']['sv']
     u'Swedish'
-
-    Note that the results are cached, and subsequent requests for the same
-    locale return the same dictionary:
-
+    
     >>> d1 = load('en_US')
     >>> d2 = load('en_US')
     >>> d1 is d2
     True
-
-    :param name: the locale identifier string (or "root")
-    :param merge_inherited: whether the inherited data should be merged into
-                            the data of the requested locale
-    :raise `IOError`: if no locale data file is found for the given locale
-                      identifer, or one of the locales it inherits from
     """
     _cache_lock.acquire()
     try:
@@ -135,13 +167,20 @@
     """Merge the data from `dict2` into the `dict1` dictionary, making copies
     of nested dictionaries.
 
+    Parameters
+    ----------
+    dict1 :
+        the dictionary to merge into
+    dict2 :
+        the dictionary containing the data that should be merged
+
+    Returns
+    -------
+
     >>> d = {1: 'foo', 3: 'baz'}
     >>> merge(d, {1: 'Foo', 2: 'Bar'})
     >>> sorted(d.items())
     [(1, 'Foo'), (2, 'Bar'), (3, 'baz')]
-
-    :param dict1: the dictionary to merge into
-    :param dict2: the dictionary containing the data that should be merged
     """
     for key, val2 in dict2.items():
         if val2 is not None:
@@ -166,9 +205,16 @@
 
 class Alias(object):
     """Representation of an alias in the locale data.
-
+    
     An alias is a value that refers to some other part of the locale data,
     as specified by the `keys`.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, keys):
@@ -179,12 +225,18 @@
 
     def resolve(self, data):
         """Resolve the alias based on the given data.
-
+        
         This is done recursively, so if one alias resolves to a second alias,
         that second alias will also be resolved.
 
-        :param data: the locale data
-        :type data: `dict`
+        Parameters
+        ----------
+        data : dict`
+            the locale data
+
+        Returns
+        -------
+
         """
         base = data
         for key in self.keys:
@@ -200,6 +252,13 @@
 class LocaleDataDict(abc.MutableMapping):
     """Dictionary wrapper that automatically resolves aliases to the actual
     values.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, data, base=None):
@@ -235,4 +294,5 @@
         del self._data[key]
 
     def copy(self):
+        """ """
         return LocaleDataDict(self._data.copy(), base=self.base)
