# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/matlib.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/matlib.py
@@ -29,23 +29,24 @@
     shape : int or tuple of int
         Shape of the empty matrix.
     dtype : data-type, optional
-        Desired output data-type.
+        Desired output data-type. (Default value = None)
     order : {'C', 'F'}, optional
         Whether to store multi-dimensional data in row-major
         (C-style) or column-major (Fortran-style) order in
-        memory.
+        memory. (Default value = 'C')
+
+    Returns
+    -------
 
     See Also
     --------
     empty_like, zeros
-
     Notes
     -----
     `empty`, unlike `zeros`, does not set the matrix values to zero,
     and may therefore be marginally faster.  On the other hand, it requires
     the user to manually set all the values in the array, and should be
     used with caution.
-
     Examples
     --------
     >>> import numpy.matlib
@@ -55,14 +56,12 @@
     >>> np.matlib.empty((2, 2), dtype=int)
     matrix([[ 6600475,        0], # random
             [ 6586976, 22740995]])
-
     """
     return ndarray.__new__(matrix, shape, dtype, order=order)
 
 def ones(shape, dtype=None, order='C'):
-    """
-    Matrix of ones.
-
+    """Matrix of ones.
+    
     Return a matrix of given shape and type, filled with ones.
 
     Parameters
@@ -84,29 +83,25 @@
     --------
     ones : Array of ones.
     matlib.zeros : Zero matrix.
-
     Notes
     -----
     If `shape` has length one i.e. ``(N,)``, or is a scalar ``N``,
     `out` becomes a single row matrix of shape ``(1,N)``.
-
     Examples
     --------
     >>> np.matlib.ones((2,3))
     matrix([[1.,  1.,  1.],
             [1.,  1.,  1.]])
-
+    
     >>> np.matlib.ones(2)
     matrix([[1.,  1.]])
-
     """
     a = ndarray.__new__(matrix, shape, dtype, order=order)
     a.fill(1)
     return a
 
 def zeros(shape, dtype=None, order='C'):
-    """
-    Return a matrix of given shape and type, filled with zeros.
+    """Return a matrix of given shape and type, filled with zeros.
 
     Parameters
     ----------
@@ -127,30 +122,26 @@
     --------
     numpy.zeros : Equivalent array function.
     matlib.ones : Return a matrix of ones.
-
     Notes
     -----
     If `shape` has length one i.e. ``(N,)``, or is a scalar ``N``,
     `out` becomes a single row matrix of shape ``(1,N)``.
-
     Examples
     --------
     >>> import numpy.matlib
     >>> np.matlib.zeros((2, 3))
     matrix([[0.,  0.,  0.],
             [0.,  0.,  0.]])
-
+    
     >>> np.matlib.zeros(2)
     matrix([[0.,  0.]])
-
     """
     a = ndarray.__new__(matrix, shape, dtype, order=order)
     a.fill(0)
     return a
 
 def identity(n,dtype=None):
-    """
-    Returns the square identity matrix of given size.
+    """Returns the square identity matrix of given size.
 
     Parameters
     ----------
@@ -169,7 +160,6 @@
     --------
     numpy.identity : Equivalent array function.
     matlib.eye : More general matrix identity function.
-
     Examples
     --------
     >>> import numpy.matlib
@@ -177,7 +167,6 @@
     matrix([[1, 0, 0],
             [0, 1, 0],
             [0, 0, 1]])
-
     """
     a = array([1]+n*[0], dtype=dtype)
     b = empty((n, n), dtype=dtype)
@@ -185,8 +174,7 @@
     return b
 
 def eye(n,M=None, k=0, dtype=float, order='C'):
-    """
-    Return a matrix with ones on the diagonal and zeros elsewhere.
+    """Return a matrix with ones on the diagonal and zeros elsewhere.
 
     Parameters
     ----------
@@ -197,14 +185,13 @@
     k : int, optional
         Index of the diagonal: 0 refers to the main diagonal,
         a positive value refers to an upper diagonal,
-        and a negative value to a lower diagonal.
+        and a negative value to a lower diagonal. (Default value = 0)
     dtype : dtype, optional
-        Data-type of the returned matrix.
+        Data-type of the returned matrix. (Default value = float)
     order : {'C', 'F'}, optional
         Whether the output should be stored in row-major (C-style) or
         column-major (Fortran-style) order in memory.
-
-        .. versionadded:: 1.14.0
+        .. versionadded:: 1.14.0 (Default value = 'C')
 
     Returns
     -------
@@ -216,7 +203,6 @@
     --------
     numpy.eye : Equivalent array function.
     identity : Square identity matrix.
-
     Examples
     --------
     >>> import numpy.matlib
@@ -224,14 +210,12 @@
     matrix([[0.,  1.,  0.],
             [0.,  0.,  1.],
             [0.,  0.,  0.]])
-
     """
     return asmatrix(np.eye(n, M=M, k=k, dtype=dtype, order=order))
 
 def rand(*args):
-    """
-    Return a matrix of random values with given shape.
-
+    """Return a matrix of random values with given shape.
+    
     Create a matrix of the given shape and propagate it with
     random samples from a uniform distribution over ``[0, 1)``.
 
@@ -242,6 +226,8 @@
         If given as N integers, each integer specifies the size of one
         dimension.
         If given as a tuple, this tuple gives the complete shape.
+    *args :
+        
 
     Returns
     -------
@@ -251,9 +237,10 @@
     See Also
     --------
     randn, numpy.random.RandomState.rand
-
-    Examples
-    --------
+    Examples
+    --------
+    
+    If the first argument is a tuple, other arguments are ignored:
     >>> np.random.seed(123)
     >>> import numpy.matlib
     >>> np.matlib.rand(2, 3)
@@ -262,22 +249,18 @@
     >>> np.matlib.rand((2, 3))
     matrix([[0.9807642 , 0.68482974, 0.4809319 ],
             [0.39211752, 0.34317802, 0.72904971]])
-
-    If the first argument is a tuple, other arguments are ignored:
-
+    
     >>> np.matlib.rand((2, 3), 4)
     matrix([[0.43857224, 0.0596779 , 0.39804426],
             [0.73799541, 0.18249173, 0.17545176]])
-
     """
     if isinstance(args[0], tuple):
         args = args[0]
     return asmatrix(np.random.rand(*args))
 
 def randn(*args):
-    """
-    Return a random matrix with data from the "standard normal" distribution.
-
+    """Return a random matrix with data from the "standard normal" distribution.
+    
     `randn` generates a matrix filled with random floats sampled from a
     univariate "normal" (Gaussian) distribution of mean 0 and variance 1.
 
@@ -287,6 +270,8 @@
         Shape of the output.
         If given as N integers, each integer specifies the size of one
         dimension. If given as a tuple, this tuple gives the complete shape.
+    *args :
+        
 
     Returns
     -------
@@ -297,15 +282,15 @@
     See Also
     --------
     rand, numpy.random.RandomState.randn
-
     Notes
     -----
     For random samples from :math:`N(\\mu, \\sigma^2)`, use:
-
+    
     ``sigma * np.matlib.randn(...) + mu``
-
-    Examples
-    --------
+    Examples
+    --------
+    
+    Two-by-four matrix of samples from :math:`N(3, 6.25)`:
     >>> np.random.seed(123)
     >>> import numpy.matlib
     >>> np.matlib.randn(1)
@@ -313,21 +298,17 @@
     >>> np.matlib.randn(1, 2, 3)
     matrix([[ 0.99734545,  0.2829785 , -1.50629471],
             [-0.57860025,  1.65143654, -2.42667924]])
-
-    Two-by-four matrix of samples from :math:`N(3, 6.25)`:
-
+    
     >>> 2.5 * np.matlib.randn((2, 4)) + 3
     matrix([[1.92771843, 6.16484065, 0.83314899, 1.30278462],
             [2.76322758, 6.72847407, 1.40274501, 1.8900451 ]])
-
     """
     if isinstance(args[0], tuple):
         args = args[0]
     return asmatrix(np.random.randn(*args))
 
 def repmat(a, m, n):
-    """
-    Repeat a 0-D to 2-D array or matrix MxN times.
+    """Repeat a 0-D to 2-D array or matrix MxN times.
 
     Parameters
     ----------
@@ -335,6 +316,10 @@
         The array or matrix to be repeated.
     m, n : int
         The number of times `a` is repeated along the first and second axes.
+    m :
+        
+    n :
+        
 
     Returns
     -------
@@ -348,19 +333,18 @@
     >>> np.matlib.repmat(a0, 2, 3)
     array([[1, 1, 1],
            [1, 1, 1]])
-
+    
     >>> a1 = np.arange(4)
     >>> np.matlib.repmat(a1, 2, 2)
     array([[0, 1, 2, 3, 0, 1, 2, 3],
            [0, 1, 2, 3, 0, 1, 2, 3]])
-
+    
     >>> a2 = np.asmatrix(np.arange(6).reshape(2, 3))
     >>> np.matlib.repmat(a2, 2, 3)
     matrix([[0, 1, 2, 0, 1, 2, 0, 1, 2],
             [3, 4, 5, 3, 4, 5, 3, 4, 5],
             [0, 1, 2, 0, 1, 2, 0, 1, 2],
             [3, 4, 5, 3, 4, 5, 3, 4, 5]])
-
     """
     a = asanyarray(a)
     ndim = a.ndim
