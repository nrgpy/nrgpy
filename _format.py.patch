# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jsonschema/_format.py
+++ b/..//venv/lib/python3.8/site-packages/jsonschema/_format.py
@@ -8,26 +8,31 @@
 
 
 class FormatChecker(object):
-    """
-    A ``format`` property checker.
-
+    """A ``format`` property checker.
+    
     JSON Schema does not mandate that the ``format`` property actually do any
     validation. If validation is desired however, instances of this class can
     be hooked into validators to enable format validation.
-
+    
     `FormatChecker` objects always return ``True`` when asked about
     formats that they do not know how to validate.
-
+    
     To check a custom format using a function that takes an instance and
-    returns a ``bool``, use the `FormatChecker.checks` or
-    `FormatChecker.cls_checks` decorators.
-
-    Arguments:
-
-        formats (~collections.Iterable):
-
-            The known formats to validate. This argument can be used to
-            limit which formats will be used during validation.
+
+    Parameters
+    ----------
+    formats :
+        collections
+    The :
+        known formats to validate
+    limit :
+        which formats will be used during validation
+
+    Returns
+    -------
+    type
+        `FormatChecker.cls_checks` decorators.
+
     """
 
     checkers = {}
@@ -42,26 +47,47 @@
         return "<FormatChecker checkers={}>".format(sorted(self.checkers))
 
     def checks(self, format, raises=()):
-        """
-        Register a decorated function as validating a new format.
-
-        Arguments:
-
-            format (str):
-
-                The format that the decorated function will check.
-
-            raises (Exception):
-
-                The exception(s) raised by the decorated function when an
-                invalid instance is found.
-
-                The exception object will be accessible as the
-                `jsonschema.exceptions.ValidationError.cause` attribute of the
-                resulting validation error.
+        """Register a decorated function as validating a new format.
+
+        Parameters
+        ----------
+        format :
+            str
+        The :
+            format that the decorated function will check
+        raises :
+             (Default value = ())
+
+        Returns
+        -------
+
+        Raises
+        ------
+        The
+            exception
+        invalid
+            instance is found
+        The
+            exception object will be accessible as the
+        jsonschema.exceptions.ValidationError.cause
+            attribute of the
+        resulting
+            validation error
+
         """
 
         def _checks(func):
+            """
+
+            Parameters
+            ----------
+            func :
+                
+
+            Returns
+            -------
+
+            """
             self.checkers[format] = (func, raises)
             return func
         return _checks
@@ -69,23 +95,27 @@
     cls_checks = classmethod(checks)
 
     def check(self, instance, format):
-        """
-        Check whether the instance conforms to the given format.
-
-        Arguments:
-
-            instance (*any primitive type*, i.e. str, number, bool):
-
-                The instance to check
-
-            format (str):
-
-                The format that instance should conform to
-
-
-        Raises:
-
-            FormatError: if the instance does not conform to ``format``
+        """Check whether the instance conforms to the given format.
+
+        Parameters
+        ----------
+        instance :
+            any primitive type
+        The :
+            instance to check
+        format :
+            str
+        The :
+            format that instance should conform to
+
+        Returns
+        -------
+
+        Raises
+        ------
+        FormatError
+            if the instance does not conform to
+
         """
 
         if format not in self.checkers:
@@ -103,22 +133,24 @@
             )
 
     def conforms(self, instance, format):
-        """
-        Check whether the instance conforms to the given format.
-
-        Arguments:
-
-            instance (*any primitive type*, i.e. str, number, bool):
-
-                The instance to check
-
-            format (str):
-
-                The format that instance should conform to
-
-        Returns:
-
+        """Check whether the instance conforms to the given format.
+
+        Parameters
+        ----------
+        instance :
+            any primitive type
+        The :
+            instance to check
+        format :
+            str
+        The :
+            format that instance should conform to
+
+        Returns
+        -------
+        type
             bool: whether it conformed
+
         """
 
         try:
@@ -151,12 +183,44 @@
     draft7=None,
     raises=(),
 ):
+    """
+
+    Parameters
+    ----------
+    name :
+         (Default value = None)
+    draft3 :
+         (Default value = None)
+    draft4 :
+         (Default value = None)
+    draft6 :
+         (Default value = None)
+    draft7 :
+         (Default value = None)
+    raises :
+         (Default value = ())
+
+    Returns
+    -------
+
+    """
     draft3 = draft3 or name
     draft4 = draft4 or name
     draft6 = draft6 or name
     draft7 = draft7 or name
 
     def wrap(func):
+        """
+
+        Parameters
+        ----------
+        func :
+            
+
+        Returns
+        -------
+
+        """
         if draft3:
             func = _draft_checkers["draft3"].checks(draft3, raises)(func)
         if draft4:
@@ -179,6 +243,17 @@
 @_checks_drafts(name="idn-email")
 @_checks_drafts(name="email")
 def is_email(instance):
+    """
+
+    Parameters
+    ----------
+    instance :
+        
+
+    Returns
+    -------
+
+    """
     if not isinstance(instance, str_types):
         return True
     return "@" in instance
@@ -191,6 +266,17 @@
     draft3="ip-address", draft4="ipv4", draft6="ipv4", draft7="ipv4",
 )
 def is_ipv4(instance):
+    """
+
+    Parameters
+    ----------
+    instance :
+        
+
+    Returns
+    -------
+
+    """
     if not isinstance(instance, str_types):
         return True
     if not _ipv4_re.match(instance):
@@ -205,6 +291,17 @@
         name="ipv6", raises=(socket.error, struct.error, ValueError),
     )
     def is_ipv6(instance):
+        """
+
+        Parameters
+        ----------
+        instance :
+            
+
+        Returns
+        -------
+
+        """
         if not isinstance(instance, str_types):
             return True
         return socket.inet_pton(socket.AF_INET6, instance)
@@ -220,6 +317,17 @@
     draft7="hostname",
 )
 def is_host_name(instance):
+    """
+
+    Parameters
+    ----------
+    instance :
+        
+
+    Returns
+    -------
+
+    """
     if not isinstance(instance, str_types):
         return True
     if not _host_name_re.match(instance):
@@ -239,6 +347,17 @@
 else:
     @_checks_drafts(draft7="idn-hostname", raises=idna.IDNAError)
     def is_idn_host_name(instance):
+        """
+
+        Parameters
+        ----------
+        instance :
+            
+
+        Returns
+        -------
+
+        """
         if not isinstance(instance, str_types):
             return True
         idna.encode(instance)
@@ -255,6 +374,17 @@
     else:
         @_checks_drafts(name="uri")
         def is_uri(instance):
+            """
+
+            Parameters
+            ----------
+            instance :
+                
+
+            Returns
+            -------
+
+            """
             if not isinstance(instance, str_types):
                 return True
             return validate_rfc3986(instance, rule="URI")
@@ -265,6 +395,17 @@
             raises=ValueError,
         )
         def is_uri_reference(instance):
+            """
+
+            Parameters
+            ----------
+            instance :
+                
+
+            Returns
+            -------
+
+            """
             if not isinstance(instance, str_types):
                 return True
             return validate_rfc3986(instance, rule="URI_reference")
@@ -272,18 +413,51 @@
 else:
     @_checks_drafts(draft7="iri", raises=ValueError)
     def is_iri(instance):
+        """
+
+        Parameters
+        ----------
+        instance :
+            
+
+        Returns
+        -------
+
+        """
         if not isinstance(instance, str_types):
             return True
         return rfc3987.parse(instance, rule="IRI")
 
     @_checks_drafts(draft7="iri-reference", raises=ValueError)
     def is_iri_reference(instance):
+        """
+
+        Parameters
+        ----------
+        instance :
+            
+
+        Returns
+        -------
+
+        """
         if not isinstance(instance, str_types):
             return True
         return rfc3987.parse(instance, rule="IRI_reference")
 
     @_checks_drafts(name="uri", raises=ValueError)
     def is_uri(instance):
+        """
+
+        Parameters
+        ----------
+        instance :
+            
+
+        Returns
+        -------
+
+        """
         if not isinstance(instance, str_types):
             return True
         return rfc3987.parse(instance, rule="URI")
@@ -294,6 +468,17 @@
         raises=ValueError,
     )
     def is_uri_reference(instance):
+        """
+
+        Parameters
+        ----------
+        instance :
+            
+
+        Returns
+        -------
+
+        """
         if not isinstance(instance, str_types):
             return True
         return rfc3987.parse(instance, rule="URI_reference")
@@ -310,12 +495,34 @@
 if validate_rfc3339:
     @_checks_drafts(name="date-time")
     def is_datetime(instance):
+        """
+
+        Parameters
+        ----------
+        instance :
+            
+
+        Returns
+        -------
+
+        """
         if not isinstance(instance, str_types):
             return True
         return validate_rfc3339(instance)
 
     @_checks_drafts(draft7="time")
     def is_time(instance):
+        """
+
+        Parameters
+        ----------
+        instance :
+            
+
+        Returns
+        -------
+
+        """
         if not isinstance(instance, str_types):
             return True
         return is_datetime("1970-01-01T" + instance)
@@ -323,6 +530,17 @@
 
 @_checks_drafts(name="regex", raises=re.error)
 def is_regex(instance):
+    """
+
+    Parameters
+    ----------
+    instance :
+        
+
+    Returns
+    -------
+
+    """
     if not isinstance(instance, str_types):
         return True
     return re.compile(instance)
@@ -330,6 +548,17 @@
 
 @_checks_drafts(draft3="date", draft7="date", raises=ValueError)
 def is_date(instance):
+    """
+
+    Parameters
+    ----------
+    instance :
+        
+
+    Returns
+    -------
+
+    """
     if not isinstance(instance, str_types):
         return True
     return datetime.datetime.strptime(instance, "%Y-%m-%d")
@@ -337,6 +566,17 @@
 
 @_checks_drafts(draft3="time", raises=ValueError)
 def is_draft3_time(instance):
+    """
+
+    Parameters
+    ----------
+    instance :
+        
+
+    Returns
+    -------
+
+    """
     if not isinstance(instance, str_types):
         return True
     return datetime.datetime.strptime(instance, "%H:%M:%S")
@@ -348,10 +588,32 @@
     pass
 else:
     def is_css_color_code(instance):
+        """
+
+        Parameters
+        ----------
+        instance :
+            
+
+        Returns
+        -------
+
+        """
         return webcolors.normalize_hex(instance)
 
     @_checks_drafts(draft3="color", raises=(ValueError, TypeError))
     def is_css21_color(instance):
+        """
+
+        Parameters
+        ----------
+        instance :
+            
+
+        Returns
+        -------
+
+        """
         if (
             not isinstance(instance, str_types) or
             instance.lower() in webcolors.css21_names_to_hex
@@ -360,6 +622,17 @@
         return is_css_color_code(instance)
 
     def is_css3_color(instance):
+        """
+
+        Parameters
+        ----------
+        instance :
+            
+
+        Returns
+        -------
+
+        """
         if instance.lower() in webcolors.css3_names_to_hex:
             return True
         return is_css_color_code(instance)
@@ -376,6 +649,17 @@
         raises=jsonpointer.JsonPointerException,
     )
     def is_json_pointer(instance):
+        """
+
+        Parameters
+        ----------
+        instance :
+            
+
+        Returns
+        -------
+
+        """
         if not isinstance(instance, str_types):
             return True
         return jsonpointer.JsonPointer(instance)
@@ -389,6 +673,17 @@
         raises=jsonpointer.JsonPointerException,
     )
     def is_relative_json_pointer(instance):
+        """
+
+        Parameters
+        ----------
+        instance :
+            
+
+        Returns
+        -------
+
+        """
         # Definition taken from:
         # https://tools.ietf.org/html/draft-handrews-relative-json-pointer-01#section-3
         if not isinstance(instance, str_types):
@@ -421,5 +716,18 @@
         instance,
         template_validator=uritemplate.Validator().force_balanced_braces(),
     ):
+        """
+
+        Parameters
+        ----------
+        instance :
+            
+        template_validator :
+             (Default value = uritemplate.Validator().force_balanced_braces())
+
+        Returns
+        -------
+
+        """
         template = uritemplate.URITemplate(instance)
         return template_validator.validate(template)
