# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/test_gbq.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/test_gbq.py
@@ -25,26 +25,31 @@
 
 
 def _skip_if_no_project_id():
+    """ """
     if not _get_project_id():
         pytest.skip("Cannot run integration tests without a project id")
 
 
 def _skip_if_no_private_key_path():
+    """ """
     if not _get_private_key_path():
         pytest.skip("Cannot run integration tests without a private key json file path")
 
 
 def _in_travis_environment():
+    """ """
     return "TRAVIS_BUILD_DIR" in os.environ and "GBQ_PROJECT_ID" in os.environ
 
 
 def _get_project_id():
+    """ """
     if _in_travis_environment():
         return os.environ.get("GBQ_PROJECT_ID")
     return PROJECT_ID or os.environ.get("GBQ_PROJECT_ID")
 
 
 def _get_private_key_path():
+    """ """
     if _in_travis_environment():
         return os.path.join(
             *[os.environ.get("TRAVIS_BUILD_DIR"), "ci", "travis_gbq.json"]
@@ -57,22 +62,46 @@
 
 
 def _get_credentials():
+    """ """
     private_key_path = _get_private_key_path()
     if private_key_path:
         return service_account.Credentials.from_service_account_file(private_key_path)
 
 
 def _get_client():
+    """ """
     project_id = _get_project_id()
     credentials = _get_credentials()
     return bigquery.Client(project=project_id, credentials=credentials)
 
 
 def generate_rand_str(length: int = 10) -> str:
+    """
+
+    Parameters
+    ----------
+    length: int :
+         (Default value = 10)
+
+    Returns
+    -------
+
+    """
     return "".join(random.choices(string.ascii_lowercase, k=length))
 
 
 def make_mixed_dataframe_v2(test_size):
+    """
+
+    Parameters
+    ----------
+    test_size :
+        
+
+    Returns
+    -------
+
+    """
     # create df to test for all BQ datatypes except RECORD
     bools = np.random.randint(2, size=(1, test_size)).astype(bool)
     flts = np.random.randn(1, test_size)
@@ -92,9 +121,33 @@
 
 
 def test_read_gbq_without_deprecated_kwargs(monkeypatch):
+    """
+
+    Parameters
+    ----------
+    monkeypatch :
+        
+
+    Returns
+    -------
+
+    """
     captured_kwargs = {}
 
     def mock_read_gbq(sql, **kwargs):
+        """
+
+        Parameters
+        ----------
+        sql :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         captured_kwargs.update(kwargs)
         return DataFrame([[1.0]])
 
@@ -106,9 +159,33 @@
 
 
 def test_read_gbq_with_new_kwargs(monkeypatch):
+    """
+
+    Parameters
+    ----------
+    monkeypatch :
+        
+
+    Returns
+    -------
+
+    """
     captured_kwargs = {}
 
     def mock_read_gbq(sql, **kwargs):
+        """
+
+        Parameters
+        ----------
+        sql :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         captured_kwargs.update(kwargs)
         return DataFrame([[1.0]])
 
@@ -120,9 +197,33 @@
 
 
 def test_read_gbq_without_new_kwargs(monkeypatch):
+    """
+
+    Parameters
+    ----------
+    monkeypatch :
+        
+
+    Returns
+    -------
+
+    """
     captured_kwargs = {}
 
     def mock_read_gbq(sql, **kwargs):
+        """
+
+        Parameters
+        ----------
+        sql :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         captured_kwargs.update(kwargs)
         return DataFrame([[1.0]])
 
@@ -135,10 +236,36 @@
 
 @pytest.mark.parametrize("progress_bar", [None, "foo"])
 def test_read_gbq_progress_bar_type_kwarg(monkeypatch, progress_bar):
+    """
+
+    Parameters
+    ----------
+    monkeypatch :
+        
+    progress_bar :
+        
+
+    Returns
+    -------
+
+    """
     # GH 29857
     captured_kwargs = {}
 
     def mock_read_gbq(sql, **kwargs):
+        """
+
+        Parameters
+        ----------
+        sql :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         captured_kwargs.update(kwargs)
         return DataFrame([[1.0]])
 
@@ -149,8 +276,10 @@
 
 @pytest.mark.single
 class TestToGBQIntegrationWithServiceAccountKeyPath:
+    """ """
     @pytest.fixture()
     def gbq_dataset(self):
+        """ """
         # Setup Dataset
         _skip_if_no_project_id()
         _skip_if_no_private_key_path()
@@ -171,6 +300,17 @@
         self.client.delete_dataset(self.dataset, delete_contents=True)
 
     def test_roundtrip(self, gbq_dataset):
+        """
+
+        Parameters
+        ----------
+        gbq_dataset :
+            
+
+        Returns
+        -------
+
+        """
         destination_table = gbq_dataset
 
         test_size = 20001
@@ -202,6 +342,23 @@
     def test_gbq_if_exists(
         self, if_exists, expected_num_rows, expectation, gbq_dataset
     ):
+        """
+
+        Parameters
+        ----------
+        if_exists :
+            
+        expected_num_rows :
+            
+        expectation :
+            
+        gbq_dataset :
+            
+
+        Returns
+        -------
+
+        """
         # GH 29598
         destination_table = gbq_dataset
 
