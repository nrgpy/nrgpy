# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/formats/test_style.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/formats/test_style.py
@@ -16,7 +16,19 @@
 
 
 class TestStyler:
+    """ """
     def setup_method(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         np.random.seed(24)
         self.s = DataFrame({"A": np.random.permutation(range(6))})
         self.df = DataFrame({"A": [0, 1], "B": np.random.randn(2)})
@@ -24,6 +36,19 @@
         self.g = lambda x: x
 
         def h(x, foo="bar"):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+            foo :
+                 (Default value = "bar")
+
+            Returns
+            -------
+
+            """
             return pd.Series(f"color: {foo}", index=x.index, name=x.name)
 
         self.h = h
@@ -37,18 +62,22 @@
         ]
 
     def test_init_non_pandas(self):
+        """ """
         msg = "``data`` must be a Series or DataFrame"
         with pytest.raises(TypeError, match=msg):
             Styler([1, 2, 3])
 
     def test_init_series(self):
+        """ """
         result = Styler(pd.Series([1, 2]))
         assert result.data.ndim == 2
 
     def test_repr_html_ok(self):
+        """ """
         self.styler._repr_html_()
 
     def test_repr_html_mathjax(self):
+        """ """
         # gh-19824
         assert "tex2jax_ignore" not in self.styler._repr_html_()
 
@@ -56,11 +85,13 @@
             assert "tex2jax_ignore" in self.styler._repr_html_()
 
     def test_update_ctx(self):
+        """ """
         self.styler._update_ctx(self.attrs)
         expected = {(0, 0): ["color: red"], (1, 0): ["color: blue"]}
         assert self.styler.ctx == expected
 
     def test_update_ctx_flatten_multi(self):
+        """ """
         attrs = DataFrame({"A": ["color: red; foo: bar", "color: blue; foo: baz"]})
         self.styler._update_ctx(attrs)
         expected = {
@@ -70,6 +101,7 @@
         assert self.styler.ctx == expected
 
     def test_update_ctx_flatten_multi_traliing_semi(self):
+        """ """
         attrs = DataFrame({"A": ["color: red; foo: bar;", "color: blue; foo: baz;"]})
         self.styler._update_ctx(attrs)
         expected = {
@@ -79,6 +111,7 @@
         assert self.styler.ctx == expected
 
     def test_copy(self):
+        """ """
         s2 = copy.copy(self.styler)
         assert self.styler is not s2
         assert self.styler.ctx is s2.ctx  # shallow
@@ -90,6 +123,7 @@
         assert self.styler._todo == s2._todo
 
     def test_deepcopy(self):
+        """ """
         s2 = copy.deepcopy(self.styler)
         assert self.styler is not s2
         assert self.styler.ctx is not s2.ctx
@@ -102,6 +136,7 @@
         assert self.styler._todo != s2._todo
 
     def test_clear(self):
+        """ """
         s = self.df.style.highlight_max()._compute()
         assert len(s.ctx) > 0
         assert len(s._todo) > 0
@@ -110,6 +145,7 @@
         assert len(s._todo) == 0
 
     def test_render(self):
+        """ """
         df = pd.DataFrame({"A": [0, 1]})
         style = lambda x: pd.Series(["color: red", "color: blue"], name=x.name)
         s = Styler(df, uuid="AB").apply(style)
@@ -117,6 +153,7 @@
         # it worked?
 
     def test_render_empty_dfs(self):
+        """ """
         empty_df = DataFrame()
         es = Styler(empty_df)
         es.render()
@@ -127,6 +164,7 @@
         # No IndexError raised?
 
     def test_render_double(self):
+        """ """
         df = pd.DataFrame({"A": [0, 1]})
         style = lambda x: pd.Series(
             ["color: red; border: 1px", "color: blue; border: 2px"], name=x.name
@@ -136,6 +174,7 @@
         # it worked?
 
     def test_set_properties(self):
+        """ """
         df = pd.DataFrame({"A": [0, 1]})
         result = df.style.set_properties(color="white", size="10px")._compute().ctx
         # order is deterministic
@@ -146,6 +185,7 @@
             assert sorted(v1) == sorted(v2)
 
     def test_set_properties_subset(self):
+        """ """
         df = pd.DataFrame({"A": [0, 1]})
         result = (
             df.style.set_properties(subset=pd.IndexSlice[0, "A"], color="white")
@@ -156,6 +196,7 @@
         assert result == expected
 
     def test_empty_index_name_doesnt_display(self):
+        """ """
         # https://github.com/pandas-dev/pandas/pull/12090#issuecomment-180695902
         df = pd.DataFrame({"A": [1, 2], "B": [3, 4], "C": [5, 6]})
         result = df.style._translate()
@@ -196,6 +237,7 @@
         assert result["head"] == expected
 
     def test_index_name(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/11655
         df = pd.DataFrame({"A": [1, 2], "B": [3, 4], "C": [5, 6]})
         result = df.set_index("A").style._translate()
@@ -234,6 +276,7 @@
         assert result["head"] == expected
 
     def test_multiindex_name(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/11655
         df = pd.DataFrame({"A": [1, 2], "B": [3, 4], "C": [5, 6]})
         result = df.set_index(["A", "B"]).style._translate()
@@ -272,12 +315,14 @@
         assert result["head"] == expected
 
     def test_numeric_columns(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/12125
         # smoke test for _translate
         df = pd.DataFrame({0: [1, 2, 3]})
         df.style._translate()
 
     def test_apply_axis(self):
+        """ """
         df = pd.DataFrame({"A": [0, 0], "B": [1, 1]})
         f = lambda x: [f"val: {x.max()}" for v in x]
         result = df.style.apply(f, axis=1)
@@ -306,6 +351,7 @@
         assert result.ctx == expected
 
     def test_apply_subset(self):
+        """ """
         axes = [0, 1]
         slices = [
             pd.IndexSlice[:],
@@ -331,7 +377,19 @@
                 assert result == expected
 
     def test_applymap_subset(self):
+        """ """
         def f(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return "foo: bar"
 
         slices = [
@@ -354,13 +412,22 @@
             assert result == expected
 
     def test_applymap_subset_multiindex(self):
+        """ """
         # GH 19861
         # Smoke test for applymap
         def color_negative_red(val):
-            """
-            Takes a scalar and returns a string with
+            """Takes a scalar and returns a string with
             the css property `'color: red'` for negative
             strings, black otherwise.
+
+            Parameters
+            ----------
+            val :
+                
+
+            Returns
+            -------
+
             """
             color = "red" if val < 0 else "black"
             return f"color: {color}"
@@ -378,6 +445,7 @@
         (df.style.applymap(color_negative_red, subset=idx[:, idx["b", "d"]]).render())
 
     def test_applymap_subset_multiindex_code(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/25858
         # Checks styler.applymap works with multindex when codes are provided
         codes = np.array([[0, 0, 1, 1], [0, 1, 0, 1]])
@@ -390,6 +458,17 @@
         pct_subset = pd.IndexSlice[:, pd.IndexSlice[:, "%":"%"]]
 
         def color_negative_red(val):
+            """
+
+            Parameters
+            ----------
+            val :
+                
+
+            Returns
+            -------
+
+            """
             color = "red" if val < 0 else "black"
             return f"color: {color}"
 
@@ -397,8 +476,20 @@
         df.style.applymap(color_negative_red, subset=pct_subset)
 
     def test_where_with_one_style(self):
+        """ """
         # GH 17474
         def f(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return x > 0.5
 
         style1 = "foo: bar"
@@ -413,8 +504,20 @@
         assert result == expected
 
     def test_where_subset(self):
+        """ """
         # GH 17474
         def f(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return x > 0.5
 
         style1 = "foo: bar"
@@ -442,14 +545,37 @@
             assert result == expected
 
     def test_where_subset_compare_with_applymap(self):
+        """ """
         # GH 17474
         def f(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return x > 0.5
 
         style1 = "foo: bar"
         style2 = "baz: foo"
 
         def g(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return style1 if f(x) else style2
 
         slices = [
@@ -468,6 +594,7 @@
             assert result == expected
 
     def test_empty(self):
+        """ """
         df = pd.DataFrame({"A": [1, 0]})
         s = df.style
         s.ctx = {(0, 0): ["color: red"], (1, 0): [""]}
@@ -480,6 +607,7 @@
         assert result == expected
 
     def test_duplicate(self):
+        """ """
         df = pd.DataFrame({"A": [1, 0]})
         s = df.style
         s.ctx = {(0, 0): ["color: red"], (1, 0): ["color: red"]}
@@ -491,6 +619,7 @@
         assert result == expected
 
     def test_bar_align_left(self):
+        """ """
         df = pd.DataFrame({"A": [0, 1, 2]})
         result = df.style.bar()._compute().ctx
         expected = {
@@ -534,6 +663,7 @@
         assert result == expected
 
     def test_bar_align_left_0points(self):
+        """ """
         df = pd.DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
         result = df.style.bar()._compute().ctx
         expected = {
@@ -620,6 +750,7 @@
         assert result == expected
 
     def test_bar_align_mid_pos_and_neg(self):
+        """ """
         df = pd.DataFrame({"A": [-10, 0, 20, 90]})
 
         result = df.style.bar(align="mid", color=["#d65f5f", "#5fba7d"])._compute().ctx
@@ -652,6 +783,7 @@
         assert result == expected
 
     def test_bar_align_mid_all_pos(self):
+        """ """
         df = pd.DataFrame({"A": [10, 20, 50, 100]})
 
         result = df.style.bar(align="mid", color=["#d65f5f", "#5fba7d"])._compute().ctx
@@ -686,6 +818,7 @@
         assert result == expected
 
     def test_bar_align_mid_all_neg(self):
+        """ """
         df = pd.DataFrame({"A": [-100, -60, -30, -20]})
 
         result = df.style.bar(align="mid", color=["#d65f5f", "#5fba7d"])._compute().ctx
@@ -725,6 +858,7 @@
         assert result == expected
 
     def test_bar_align_zero_pos_and_neg(self):
+        """ """
         # See https://github.com/pandas-dev/pandas/pull/14757
         df = pd.DataFrame({"A": [-10, 0, 20, 90]})
 
@@ -760,6 +894,7 @@
         assert result == expected
 
     def test_bar_align_left_axis_none(self):
+        """ """
         df = pd.DataFrame({"A": [0, 1], "B": [2, 4]})
         result = df.style.bar(axis=None)._compute().ctx
         expected = {
@@ -786,6 +921,7 @@
         assert result == expected
 
     def test_bar_align_zero_axis_none(self):
+        """ """
         df = pd.DataFrame({"A": [0, 1], "B": [-2, 4]})
         result = df.style.bar(align="zero", axis=None)._compute().ctx
         expected = {
@@ -815,6 +951,7 @@
         assert result == expected
 
     def test_bar_align_mid_axis_none(self):
+        """ """
         df = pd.DataFrame({"A": [0, 1], "B": [-2, 4]})
         result = df.style.bar(align="mid", axis=None)._compute().ctx
         expected = {
@@ -843,6 +980,7 @@
         assert result == expected
 
     def test_bar_align_mid_vmin(self):
+        """ """
         df = pd.DataFrame({"A": [0, 1], "B": [-2, 4]})
         result = df.style.bar(align="mid", axis=None, vmin=-6)._compute().ctx
         expected = {
@@ -872,6 +1010,7 @@
         assert result == expected
 
     def test_bar_align_mid_vmax(self):
+        """ """
         df = pd.DataFrame({"A": [0, 1], "B": [-2, 4]})
         result = df.style.bar(align="mid", axis=None, vmax=8)._compute().ctx
         expected = {
@@ -900,6 +1039,7 @@
         assert result == expected
 
     def test_bar_align_mid_vmin_vmax_wide(self):
+        """ """
         df = pd.DataFrame({"A": [0, 1], "B": [-2, 4]})
         result = df.style.bar(align="mid", axis=None, vmin=-3, vmax=7)._compute().ctx
         expected = {
@@ -929,6 +1069,7 @@
         assert result == expected
 
     def test_bar_align_mid_vmin_vmax_clipping(self):
+        """ """
         df = pd.DataFrame({"A": [0, 1], "B": [-2, 4]})
         result = df.style.bar(align="mid", axis=None, vmin=-1, vmax=3)._compute().ctx
         expected = {
@@ -957,6 +1098,7 @@
         assert result == expected
 
     def test_bar_align_mid_nans(self):
+        """ """
         df = pd.DataFrame({"A": [1, None], "B": [-1, 3]})
         result = df.style.bar(align="mid", axis=None)._compute().ctx
         expected = {
@@ -984,6 +1126,7 @@
         assert result == expected
 
     def test_bar_align_zero_nans(self):
+        """ """
         df = pd.DataFrame({"A": [1, None], "B": [-1, 2]})
         result = df.style.bar(align="zero", axis=None)._compute().ctx
         expected = {
@@ -1012,12 +1155,14 @@
         assert result == expected
 
     def test_bar_bad_align_raises(self):
+        """ """
         df = pd.DataFrame({"A": [-100, -60, -30, -20]})
         msg = "`align` must be one of {'left', 'zero',' mid'}"
         with pytest.raises(ValueError, match=msg):
             df.style.bar(align="poorly", color=["#d65f5f", "#5fba7d"])
 
     def test_format_with_na_rep(self):
+        """ """
         # GH 21527 28358
         df = pd.DataFrame([[None, None], [1.1, 1.2]], columns=["A", "B"])
 
@@ -1036,6 +1181,7 @@
         assert ctx["body"][1][2]["display_value"] == "120.00%"
 
     def test_init_with_na_rep(self):
+        """ """
         # GH 21527 28358
         df = pd.DataFrame([[None, None], [1.1, 1.2]], columns=["A", "B"])
 
@@ -1044,6 +1190,7 @@
         assert ctx["body"][0][2]["display_value"] == "NA"
 
     def test_set_na_rep(self):
+        """ """
         # GH 21527 28358
         df = pd.DataFrame([[None, None], [1.1, 1.2]], columns=["A", "B"])
 
@@ -1060,6 +1207,7 @@
         assert ctx["body"][0][2]["display_value"] == "-"
 
     def test_format_non_numeric_na(self):
+        """ """
         # GH 21527 28358
         df = pd.DataFrame(
             {
@@ -1081,6 +1229,7 @@
         assert ctx["body"][1][2]["display_value"] == "-"
 
     def test_format_with_bad_na_rep(self):
+        """ """
         # GH 21527 28358
         df = pd.DataFrame([[None, None], [1.1, 1.2]], columns=["A", "B"])
         msg = "Expected a string, got -1 instead"
@@ -1088,12 +1237,24 @@
             df.style.format(None, na_rep=-1)
 
     def test_highlight_null(self, null_color="red"):
+        """
+
+        Parameters
+        ----------
+        null_color :
+             (Default value = "red")
+
+        Returns
+        -------
+
+        """
         df = pd.DataFrame({"A": [0, np.nan]})
         result = df.style.highlight_null()._compute().ctx
         expected = {(1, 0): ["background-color: red"]}
         assert result == expected
 
     def test_highlight_null_subset(self):
+        """ """
         # GH 31345
         df = pd.DataFrame({"A": [0, np.nan], "B": [0, np.nan]})
         result = (
@@ -1109,6 +1270,7 @@
         assert result == expected
 
     def test_nonunique_raises(self):
+        """ """
         df = pd.DataFrame([[1, 2]], columns=["A", "A"])
         msg = "style is not supported for non-unique indices."
         with pytest.raises(ValueError, match=msg):
@@ -1118,6 +1280,7 @@
             Styler(df)
 
     def test_caption(self):
+        """ """
         styler = Styler(self.df, caption="foo")
         result = styler.render()
         assert all(["caption" in result, "foo" in result])
@@ -1128,6 +1291,7 @@
         assert styler.caption == "baz"
 
     def test_uuid(self):
+        """ """
         styler = Styler(self.df, uuid="abc123")
         result = styler.render()
         assert "abc123" in result
@@ -1138,6 +1302,7 @@
         assert result.uuid == "aaa"
 
     def test_unique_id(self):
+        """ """
         # See https://github.com/pandas-dev/pandas/issues/16780
         df = pd.DataFrame({"a": [1, 3, 5, 6], "b": [2, 4, 12, 21]})
         result = df.style.render(uuid="test")
@@ -1146,6 +1311,7 @@
         assert np.unique(ids).size == len(ids)
 
     def test_table_styles(self):
+        """ """
         style = [{"selector": "th", "props": [("foo", "bar")]}]
         styler = Styler(self.df, table_styles=style)
         result = " ".join(styler.render().split())
@@ -1157,6 +1323,7 @@
         assert styler.table_styles == style
 
     def test_table_attributes(self):
+        """ """
         attributes = 'class="foo" data-bar'
         styler = Styler(self.df, table_attributes=attributes)
         result = styler.render()
@@ -1166,6 +1333,7 @@
         assert 'class="foo" data-bar' in result
 
     def test_precision(self):
+        """ """
         with pd.option_context("display.precision", 10):
             s = Styler(self.df)
         assert s.precision == 10
@@ -1177,7 +1345,19 @@
         assert s.precision == 4
 
     def test_apply_none(self):
+        """ """
         def f(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return pd.DataFrame(
                 np.where(x == x.max(), "color: red", ""),
                 index=x.index,
@@ -1188,6 +1368,7 @@
         assert result[(1, 1)] == ["color: red"]
 
     def test_trim(self):
+        """ """
         result = self.df.style.render()  # trim=True
         assert result.count("#") == 0
 
@@ -1195,6 +1376,7 @@
         assert result.count("#") == len(self.df.columns)
 
     def test_highlight_max(self):
+        """ """
         df = pd.DataFrame([[1, 2], [3, 4]], columns=["A", "B"])
         # max(df) = min(-df)
         for max_ in [True, False]:
@@ -1235,6 +1417,7 @@
         expected = {(0, 0): ["background-color: yellow"]}
 
     def test_export(self):
+        """ """
         f = lambda x: "color: red" if x > 0 else "color: blue"
         g = lambda x, z: f"color: {z}" if x > 0 else f"color: {z}"
         style1 = self.styler
@@ -1246,6 +1429,7 @@
         style2.render()
 
     def test_display_format(self):
+        """ """
         df = pd.DataFrame(np.random.random(size=(2, 2)))
         ctx = df.style.format("{:0.1f}")._translate()
 
@@ -1256,6 +1440,7 @@
         assert len(ctx["body"][0][1]["display_value"].lstrip("-")) <= 3
 
     def test_display_format_raises(self):
+        """ """
         df = pd.DataFrame(np.random.randn(2, 2))
         msg = "Expected a template string or callable, got 5 instead"
         with pytest.raises(TypeError, match=msg):
@@ -1266,6 +1451,7 @@
             df.style.format(True)
 
     def test_display_set_precision(self):
+        """ """
         # Issue #13257
         df = pd.DataFrame(data=[[1.0, 2.0090], [3.2121, 4.566]], columns=["a", "b"])
         s = Styler(df)
@@ -1293,6 +1479,7 @@
         assert ctx["body"][1][2]["display_value"] == "4.566"
 
     def test_display_subset(self):
+        """ """
         df = pd.DataFrame([[0.1234, 0.1234], [1.1234, 1.1234]], columns=["a", "b"])
         ctx = df.style.format(
             {"a": "{:0.1f}", "b": "{0:.2%}"}, subset=pd.IndexSlice[0, :]
@@ -1324,6 +1511,7 @@
         assert ctx["body"][1][2]["display_value"] == raw_11
 
     def test_display_dict(self):
+        """ """
         df = pd.DataFrame([[0.1234, 0.1234], [1.1234, 1.1234]], columns=["a", "b"])
         ctx = df.style.format({"a": "{:0.1f}", "b": "{0:.2%}"})._translate()
         assert ctx["body"][0][1]["display_value"] == "0.1"
@@ -1334,6 +1522,7 @@
         assert ctx["body"][0][3]["display_value"] == "AAA"
 
     def test_bad_apply_shape(self):
+        """ """
         df = pd.DataFrame([[1, 2], [3, 4]])
         msg = "returned the wrong shape"
         with pytest.raises(ValueError, match=msg):
@@ -1353,7 +1542,19 @@
             df.style._apply(lambda x: ["", "", ""], axis=1)
 
     def test_apply_bad_return(self):
+        """ """
         def f(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return ""
 
         df = pd.DataFrame([[1, 2], [3, 4]])
@@ -1362,7 +1563,19 @@
             df.style._apply(f, axis=None)
 
     def test_apply_bad_labels(self):
+        """ """
         def f(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return pd.DataFrame(index=[1, 2], columns=["a", "b"])
 
         df = pd.DataFrame([[1, 2], [3, 4]])
@@ -1371,6 +1584,7 @@
             df.style._apply(f, axis=None)
 
     def test_get_level_lengths(self):
+        """ """
         index = pd.MultiIndex.from_product([["a", "b"], [0, 1, 2]])
         expected = {
             (0, 0): 3,
@@ -1386,6 +1600,7 @@
         tm.assert_dict_equal(result, expected)
 
     def test_get_level_lengths_un_sorted(self):
+        """ """
         index = pd.MultiIndex.from_arrays([[1, 1, 2, 1], ["a", "b", "b", "d"]])
         expected = {
             (0, 0): 2,
@@ -1400,6 +1615,7 @@
         tm.assert_dict_equal(result, expected)
 
     def test_mi_sparse(self):
+        """ """
         df = pd.DataFrame(
             {"A": [1, 2]}, index=pd.MultiIndex.from_arrays([["a", "a"], [0, 1]])
         )
@@ -1466,6 +1682,7 @@
         assert head == expected
 
     def test_mi_sparse_disabled(self):
+        """ """
         with pd.option_context("display.multi_sparse", False):
             df = pd.DataFrame(
                 {"A": [1, 2]}, index=pd.MultiIndex.from_arrays([["a", "a"], [0, 1]])
@@ -1476,6 +1693,7 @@
             assert "attributes" not in row[0]
 
     def test_mi_sparse_index_names(self):
+        """ """
         df = pd.DataFrame(
             {"A": [1, 2]},
             index=pd.MultiIndex.from_arrays(
@@ -1493,6 +1711,7 @@
         assert head == expected
 
     def test_mi_sparse_column_names(self):
+        """ """
         df = pd.DataFrame(
             np.arange(16).reshape(4, 4),
             index=pd.MultiIndex.from_arrays(
@@ -1552,6 +1771,7 @@
         assert head == expected
 
     def test_hide_single_index(self):
+        """ """
         # GH 14194
         # single unnamed index
         ctx = self.df.style._translate()
@@ -1573,6 +1793,7 @@
         assert not ctx4["head"][0][0]["is_visible"]
 
     def test_hide_multiindex(self):
+        """ """
         # GH 14194
         df = pd.DataFrame(
             {"A": [1, 2]},
@@ -1597,6 +1818,7 @@
         assert not ctx2["head"][0][1]["is_visible"]
 
     def test_hide_columns_single_level(self):
+        """ """
         # GH 14194
         # test hiding single column
         ctx = self.df.style._translate()
@@ -1620,6 +1842,7 @@
         assert not ctx["body"][1][2]["is_visible"]  # col B, row 1
 
     def test_hide_columns_mult_levels(self):
+        """ """
         # GH 14194
         # setup dataframe with multiple column levels and indices
         i1 = pd.MultiIndex.from_arrays(
@@ -1668,7 +1891,23 @@
         assert ctx["body"][1][2]["display_value"] == 3
 
     def test_pipe(self):
+        """ """
         def set_caption_from_template(styler, a, b):
+            """
+
+            Parameters
+            ----------
+            styler :
+                
+            a :
+                
+            b :
+                
+
+            Returns
+            -------
+
+            """
             return styler.set_caption(f"Dataframe with a = {a} and b = {b}")
 
         styler = self.df.style.pipe(set_caption_from_template, "A", b="B")
@@ -1676,6 +1915,21 @@
 
         # Test with an argument that is a (callable, keyword_name) pair.
         def f(a, b, styler):
+            """
+
+            Parameters
+            ----------
+            a :
+                
+            b :
+                
+            styler :
+                
+
+            Returns
+            -------
+
+            """
             return (a, b, styler)
 
         styler = self.df.style
@@ -1683,6 +1937,7 @@
         assert result == (1, 2, styler)
 
     def test_no_cell_ids(self):
+        """ """
         # GH 35588
         # GH 35663
         df = pd.DataFrame(data=[[0]])
@@ -1694,7 +1949,9 @@
 
 @td.skip_if_no_mpl
 class TestStylerMatplotlibDep:
+    """ """
     def test_background_gradient(self):
+        """ """
         df = pd.DataFrame([[1, 2], [2, 4]], columns=["A", "B"])
 
         for c_map in [None, "YlOrRd"]:
@@ -1729,12 +1986,36 @@
         ],
     )
     def test_text_color_threshold(self, c_map, expected):
+        """
+
+        Parameters
+        ----------
+        c_map :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         df = pd.DataFrame([1, 2], columns=["A"])
         result = df.style.background_gradient(cmap=c_map)._compute().ctx
         assert result == expected
 
     @pytest.mark.parametrize("text_color_threshold", [1.1, "1", -1, [2, 2]])
     def test_text_color_threshold_raises(self, text_color_threshold):
+        """
+
+        Parameters
+        ----------
+        text_color_threshold :
+            
+
+        Returns
+        -------
+
+        """
         df = pd.DataFrame([[1, 2], [2, 4]], columns=["A", "B"])
         msg = "`text_color_threshold` must be a value from 0 to 1."
         with pytest.raises(ValueError, match=msg):
@@ -1744,6 +2025,7 @@
 
     @td.skip_if_no_mpl
     def test_background_gradient_axis(self):
+        """ """
         df = pd.DataFrame([[1, 2], [2, 4]], columns=["A", "B"])
 
         low = ["background-color: #f7fbff", "color: #000000"]
@@ -1768,6 +2050,7 @@
         assert result[(1, 1)] == high
 
     def test_background_gradient_vmin_vmax(self):
+        """ """
         # GH 12145
         df = pd.DataFrame(range(5))
         ctx = df.style.background_gradient(vmin=1, vmax=3)._compute().ctx
@@ -1775,6 +2058,7 @@
         assert ctx[(4, 0)] == ctx[(3, 0)]
 
     def test_background_gradient_int64(self):
+        """ """
         # GH 28869
         df1 = pd.Series(range(3)).to_frame()
         df2 = pd.Series(range(3), dtype="Int64").to_frame()
@@ -1786,6 +2070,7 @@
 
 
 def test_block_names():
+    """ """
     # catch accidental removal of a block
     expected = {
         "before_style",
@@ -1811,6 +2096,17 @@
 
 
 def test_from_custom_template(tmpdir):
+    """
+
+    Parameters
+    ----------
+    tmpdir :
+        
+
+    Returns
+    -------
+
+    """
     p = tmpdir.mkdir("templates").join("myhtml.tpl")
     p.write(
         textwrap.dedent(
