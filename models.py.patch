# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/requests/models.py
+++ b/..//venv/lib/python3.8/site-packages/requests/models.py
@@ -58,6 +58,7 @@
 
 
 class RequestEncodingMixin(object):
+    """ """
     @property
     def path_url(self):
         """Build the path URL to use."""
@@ -82,10 +83,19 @@
     @staticmethod
     def _encode_params(data):
         """Encode parameters in a piece of data.
-
+        
         Will successfully encode parameters when passed as a dict or a list of
         2-tuples. Order is retained if data is a list of 2-tuples but arbitrary
         if parameters are supplied as a dict.
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
         """
 
         if isinstance(data, (str, bytes)):
@@ -109,12 +119,23 @@
     @staticmethod
     def _encode_files(files, data):
         """Build the body for a multipart/form-data request.
-
+        
         Will successfully encode files when passed as a dict or a list of
         tuples. Order is retained if data is a list of tuples but arbitrary
         if parameters are supplied as a dict.
         The tuples may be 2-tuples (filename, fileobj), 3-tuples (filename, fileobj, contentype)
         or 4-tuples (filename, fileobj, contentype, custom_headers).
+
+        Parameters
+        ----------
+        files :
+            
+        data :
+            
+
+        Returns
+        -------
+
         """
         if (not files):
             raise ValueError("Files must be provided.")
@@ -172,8 +193,21 @@
 
 
 class RequestHooksMixin(object):
+    """ """
     def register_hook(self, event, hook):
-        """Properly register a hook."""
+        """Properly register a hook.
+
+        Parameters
+        ----------
+        event :
+            
+        hook :
+            
+
+        Returns
+        -------
+
+        """
 
         if event not in self.hooks:
             raise ValueError('Unsupported event specified, with event name "%s"' % (event))
@@ -186,6 +220,17 @@
     def deregister_hook(self, event, hook):
         """Deregister a previously registered hook.
         Returns True if the hook existed, False if not.
+
+        Parameters
+        ----------
+        event :
+            
+        hook :
+            
+
+        Returns
+        -------
+
         """
 
         try:
@@ -197,27 +242,42 @@
 
 class Request(RequestHooksMixin):
     """A user-created :class:`Request <Request>` object.
-
+    
     Used to prepare a :class:`PreparedRequest <PreparedRequest>`, which is sent to the server.
 
-    :param method: HTTP method to use.
-    :param url: URL to send.
-    :param headers: dictionary of headers to send.
-    :param files: dictionary of {filename: fileobject} files to multipart upload.
-    :param data: the body to attach to the request. If a dictionary or
+    Parameters
+    ----------
+    method :
+        HTTP method to use.
+    url :
+        URL to send.
+    headers :
+        dictionary of headers to send.
+    files :
+        dictionary of {filename: fileobject} files to multipart upload.
+    data :
+        the body to attach to the request. If a dictionary or
         list of tuples ``[(key, value)]`` is provided, form-encoding will
         take place.
-    :param json: json for the body to attach to the request (if files or data is not specified).
-    :param params: URL parameters to append to the URL. If a dictionary or
+    json :
+        json for the body to attach to the request (if files or data is not specified).
+    params :
+        URL parameters to append to the URL. If a dictionary or
         list of tuples ``[(key, value)]`` is provided, form-encoding will
         take place.
-    :param auth: Auth handler or (user, pass) tuple.
-    :param cookies: dictionary or CookieJar of cookies to attach to this request.
-    :param hooks: dictionary of callback hooks, for internal usage.
-
-    Usage::
-
-      >>> import requests
+    auth :
+        Auth handler or (user, pass) tuple.
+    cookies :
+        dictionary or CookieJar of cookies to attach to this request.
+    hooks :
+        dictionary of callback hooks, for internal usage.
+        
+        Usage::
+
+    Returns
+    -------
+
+    >>> import requests
       >>> req = requests.Request('GET', 'https://httpbin.org/get')
       >>> req.prepare()
       <PreparedRequest [GET]>
@@ -272,19 +332,25 @@
 class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
     """The fully mutable :class:`PreparedRequest <PreparedRequest>` object,
     containing the exact bytes that will be sent to the server.
-
+    
     Instances are generated from a :class:`Request <Request>` object, and
     should not be instantiated manually; doing so may produce undesirable
     effects.
-
+    
     Usage::
 
-      >>> import requests
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    >>> import requests
       >>> req = requests.Request('GET', 'https://httpbin.org/get')
       >>> r = req.prepare()
       >>> r
       <PreparedRequest [GET]>
-
+    
       >>> s = requests.Session()
       >>> s.send(r)
       <Response [200]>
@@ -310,7 +376,35 @@
     def prepare(self,
             method=None, url=None, headers=None, files=None, data=None,
             params=None, auth=None, cookies=None, hooks=None, json=None):
-        """Prepares the entire request with the given parameters."""
+        """Prepares the entire request with the given parameters.
+
+        Parameters
+        ----------
+        method :
+             (Default value = None)
+        url :
+             (Default value = None)
+        headers :
+             (Default value = None)
+        files :
+             (Default value = None)
+        data :
+             (Default value = None)
+        params :
+             (Default value = None)
+        auth :
+             (Default value = None)
+        cookies :
+             (Default value = None)
+        hooks :
+             (Default value = None)
+        json :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
 
         self.prepare_method(method)
         self.prepare_url(url, params)
@@ -329,6 +423,7 @@
         return '<PreparedRequest [%s]>' % (self.method)
 
     def copy(self):
+        """ """
         p = PreparedRequest()
         p.method = self.method
         p.url = self.url
@@ -340,13 +435,34 @@
         return p
 
     def prepare_method(self, method):
-        """Prepares the given HTTP method."""
+        """Prepares the given HTTP method.
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         self.method = method
         if self.method is not None:
             self.method = to_native_string(self.method.upper())
 
     @staticmethod
     def _get_idna_encoded_host(host):
+        """
+
+        Parameters
+        ----------
+        host :
+            
+
+        Returns
+        -------
+
+        """
         import idna
 
         try:
@@ -356,7 +472,19 @@
         return host
 
     def prepare_url(self, url, params):
-        """Prepares the given HTTP URL."""
+        """Prepares the given HTTP URL.
+
+        Parameters
+        ----------
+        url :
+            
+        params :
+            
+
+        Returns
+        -------
+
+        """
         #: Accept objects that have string representations.
         #: We're unable to blindly call unicode/str functions
         #: as this will include the bytestring indicator (b'')
@@ -442,7 +570,17 @@
         self.url = url
 
     def prepare_headers(self, headers):
-        """Prepares the given HTTP headers."""
+        """Prepares the given HTTP headers.
+
+        Parameters
+        ----------
+        headers :
+            
+
+        Returns
+        -------
+
+        """
 
         self.headers = CaseInsensitiveDict()
         if headers:
@@ -453,7 +591,21 @@
                 self.headers[to_native_string(name)] = value
 
     def prepare_body(self, data, files, json=None):
-        """Prepares the given HTTP body data."""
+        """Prepares the given HTTP body data.
+
+        Parameters
+        ----------
+        data :
+            
+        files :
+            
+        json :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
 
         # Check if file, fo, generator, iterator.
         # If not, run through normal process.
@@ -522,7 +674,17 @@
         self.body = body
 
     def prepare_content_length(self, body):
-        """Prepare Content-Length header based on request method and body"""
+        """Prepare Content-Length header based on request method and body
+
+        Parameters
+        ----------
+        body :
+            
+
+        Returns
+        -------
+
+        """
         if body is not None:
             length = super_len(body)
             if length:
@@ -535,7 +697,19 @@
             self.headers['Content-Length'] = '0'
 
     def prepare_auth(self, auth, url=''):
-        """Prepares the given HTTP auth data."""
+        """Prepares the given HTTP auth data.
+
+        Parameters
+        ----------
+        auth :
+            
+        url :
+             (Default value = '')
+
+        Returns
+        -------
+
+        """
 
         # If no Auth is explicitly provided, extract it from the URL first.
         if auth is None:
@@ -558,7 +732,7 @@
 
     def prepare_cookies(self, cookies):
         """Prepares the given HTTP cookie data.
-
+        
         This function eventually generates a ``Cookie`` header from the
         given cookies using cookielib. Due to cookielib's design, the header
         will not be regenerated if it already exists, meaning this function
@@ -566,6 +740,15 @@
         :class:`PreparedRequest <PreparedRequest>` object. Any subsequent calls
         to ``prepare_cookies`` will have no actual effect, unless the "Cookie"
         header is removed beforehand.
+
+        Parameters
+        ----------
+        cookies :
+            
+
+        Returns
+        -------
+
         """
         if isinstance(cookies, cookielib.CookieJar):
             self._cookies = cookies
@@ -577,7 +760,17 @@
             self.headers['Cookie'] = cookie_header
 
     def prepare_hooks(self, hooks):
-        """Prepares the given hooks."""
+        """Prepares the given hooks.
+
+        Parameters
+        ----------
+        hooks :
+            
+
+        Returns
+        -------
+
+        """
         # hooks can be passed as None to the prepare method and to this
         # method. To prevent iterating over None, simply use an empty list
         # if hooks is False-y
@@ -589,6 +782,13 @@
 class Response(object):
     """The :class:`Response <Response>` object, which contains a
     server's response to an HTTP request.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     __attrs__ = [
@@ -695,11 +895,18 @@
     @property
     def ok(self):
         """Returns True if :attr:`status_code` is less than 400, False if not.
-
+        
         This attribute checks if the status code of the response is between
         400 and 600 to see if there was a client error or a server error. If
         the status code is between 200 and 400, this will return True. This
         is **not** a check to see if the response code is ``200 OK``.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         try:
             self.raise_for_status()
@@ -711,6 +918,13 @@
     def is_redirect(self):
         """True if this Response is a well-formed HTTP redirect that could have
         been processed automatically (by :meth:`Session.resolve_redirects`).
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         return ('location' in self.headers and self.status_code in REDIRECT_STATI)
 
@@ -734,19 +948,30 @@
         request, this avoids reading the content at once into memory for
         large responses.  The chunk size is the number of bytes it should
         read into memory.  This is not necessarily the length of each item
-        returned as decoding can take place.
-
-        chunk_size must be of type int or None. A value of None will
-        function differently depending on the value of `stream`.
-        stream=True will read data as it arrives in whatever size the
-        chunks are received. If stream=False, data is returned as
-        a single chunk.
-
-        If decode_unicode is True, content will be decoded using the best
-        available encoding based on the response.
+
+        Parameters
+        ----------
+        chunk_size :
+             (Default value = 1)
+        decode_unicode :
+             (Default value = False)
+
+        Returns
+        -------
+        type
+            chunk_size must be of type int or None. A value of None will
+            function differently depending on the value of `stream`.
+            stream=True will read data as it arrives in whatever size the
+            chunks are received. If stream=False, data is returned as
+            a single chunk.
+            
+            If decode_unicode is True, content will be decoded using the best
+            available encoding based on the response.
+
         """
 
         def generate():
+            """ """
             # Special case for urllib3.
             if hasattr(self.raw, 'stream'):
                 try:
@@ -788,8 +1013,21 @@
         """Iterates over the response data, one line at a time.  When
         stream=True is set on the request, this avoids reading the
         content at once into memory for large responses.
-
+        
         .. note:: This method is not reentrant safe.
+
+        Parameters
+        ----------
+        chunk_size :
+             (Default value = ITER_CHUNK_SIZE)
+        decode_unicode :
+             (Default value = False)
+        delimiter :
+             (Default value = None)
+
+        Returns
+        -------
+
         """
 
         pending = None
@@ -838,14 +1076,21 @@
     @property
     def text(self):
         """Content of the response, in unicode.
-
+        
         If Response.encoding is None, encoding will be guessed using
         ``chardet``.
-
+        
         The encoding of the response content is determined based solely on HTTP
         headers, following RFC 2616 to the letter. If you can take advantage of
         non-HTTP knowledge to make a better guess at the encoding, you should
         set ``r.encoding`` appropriately before accessing this property.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
 
         # Try charset from content-type
@@ -874,11 +1119,20 @@
         return content
 
     def json(self, **kwargs):
-        r"""Returns the json-encoded content of a response, if any.
-
-        :param \*\*kwargs: Optional arguments that ``json.loads`` takes.
-        :raises ValueError: If the response body does not contain valid json.
-        """
+        """r"""Returns the json-encoded content of a response, if any.
+
+        Parameters
+        ----------
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        Raises
+        ------
+        ValueError
+            If the response body does not contain valid json.
 
         if not self.encoding and self.content and len(self.content) > 3:
             # No encoding set. JSON RFC 4627 section 3 states we should expect
@@ -945,8 +1199,15 @@
     def close(self):
         """Releases the connection back to the pool. Once this method has been
         called the underlying ``raw`` object must not be accessed again.
-
+        
         *Note: Should not normally need to be called explicitly.*
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         if not self._content_consumed:
             self.raw.close()
