# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_umath_complex.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_umath_complex.py
@@ -30,7 +30,9 @@
 
 
 class TestCexp:
+    """ """
     def test_simple(self):
+        """ """
         check = check_complex_value
         f = np.exp
 
@@ -42,6 +44,7 @@
 
     @platform_skip
     def test_special_values(self):
+        """ """
         # C99: Section G 6.3.1
 
         check = check_complex_value
@@ -70,6 +73,17 @@
 
         # cexp(-inf + inf i) is +-0 +- 0i (signs unspecified)
         def _check_ninf_inf(dummy):
+            """
+
+            Parameters
+            ----------
+            dummy :
+                
+
+            Returns
+            -------
+
+            """
             msgform = "cexp(-inf, inf) is (%f, %f), expected (+-0, +-0)"
             with np.errstate(invalid='ignore'):
                 z = f(np.array(complex(-np.inf, np.inf)))
@@ -80,6 +94,17 @@
 
         # cexp(inf + inf i) is +-inf + NaNi and raised invalid FPU ex.
         def _check_inf_inf(dummy):
+            """
+
+            Parameters
+            ----------
+            dummy :
+                
+
+            Returns
+            -------
+
+            """
             msgform = "cexp(inf, inf) is (%f, %f), expected (+-inf, nan)"
             with np.errstate(invalid='ignore'):
                 z = f(np.array(complex(np.inf, np.inf)))
@@ -90,6 +115,17 @@
 
         # cexp(-inf + nan i) is +-0 +- 0i
         def _check_ninf_nan(dummy):
+            """
+
+            Parameters
+            ----------
+            dummy :
+                
+
+            Returns
+            -------
+
+            """
             msgform = "cexp(-inf, nan) is (%f, %f), expected (+-0, +-0)"
             with np.errstate(invalid='ignore'):
                 z = f(np.array(complex(-np.inf, np.nan)))
@@ -100,6 +136,17 @@
 
         # cexp(inf + nan i) is +-inf + nan
         def _check_inf_nan(dummy):
+            """
+
+            Parameters
+            ----------
+            dummy :
+                
+
+            Returns
+            -------
+
+            """
             msgform = "cexp(-inf, nan) is (%f, %f), expected (+-inf, nan)"
             with np.errstate(invalid='ignore'):
                 z = f(np.array(complex(np.inf, np.nan)))
@@ -122,6 +169,7 @@
     # TODO This can be xfail when the generator functions are got rid of.
     @pytest.mark.skip(reason="cexp(nan + 0I) is wrong on most platforms")
     def test_special_values2(self):
+        """ """
         # XXX: most implementations get it wrong here (including glibc <= 2.10)
         # cexp(nan + 0i) is nan + 0i
         check = check_complex_value
@@ -130,7 +178,9 @@
         check(f, np.nan, 0, np.nan, 0)
 
 class TestClog:
+    """ """
     def test_simple(self):
+        """ """
         x = np.array([1+0j, 1+2j])
         y_r = np.log(np.abs(x)) + 1j * np.angle(x)
         y = np.log(x)
@@ -140,6 +190,7 @@
     @platform_skip
     @pytest.mark.skipif(platform.machine() == "armv5tel", reason="See gh-413.")
     def test_special_values(self):
+        """ """
         xl = []
         yl = []
 
@@ -275,8 +326,10 @@
 
 
 class TestCsqrt:
+    """ """
 
     def test_simple(self):
+        """ """
         # sqrt(1)
         check_complex_value(np.sqrt, 1, 0, 1, 0)
 
@@ -289,9 +342,21 @@
         check_complex_value(np.sqrt, -1, 0, 0, 1)
 
     def test_simple_conjugate(self):
+        """ """
         ref = np.conj(np.sqrt(complex(1, 1)))
 
         def f(z):
+            """
+
+            Parameters
+            ----------
+            z :
+                
+
+            Returns
+            -------
+
+            """
             return np.sqrt(np.conj(z))
 
         check_complex_value(f, 1, 1, ref.real, ref.imag, False)
@@ -301,6 +366,7 @@
 
     @platform_skip
     def test_special_values(self):
+        """ """
         # C99: Sec G 6.4.2
 
         check = check_complex_value
@@ -333,6 +399,17 @@
 
         # csqrt(-inf + nani) is nan +- infi (both +i infi are valid)
         def _check_ninf_nan(dummy):
+            """
+
+            Parameters
+            ----------
+            dummy :
+                
+
+            Returns
+            -------
+
+            """
             msgform = "csqrt(-inf, nan) is (%f, %f), expected (nan, +-inf)"
             z = np.sqrt(np.array(complex(-np.inf, np.nan)))
             #Fixme: ugly workaround for isinf bug.
@@ -355,13 +432,17 @@
         # cuts first)
 
 class TestCpow:
+    """ """
     def setup(self):
+        """ """
         self.olderr = np.seterr(invalid='ignore')
 
     def teardown(self):
+        """ """
         np.seterr(**self.olderr)
 
     def test_simple(self):
+        """ """
         x = np.array([1+1j, 0+2j, 1+2j, np.inf, np.nan])
         y_r = x ** 2
         y = np.power(x, 2)
@@ -369,6 +450,7 @@
             assert_almost_equal(y[i], y_r[i])
 
     def test_scalar(self):
+        """ """
         x = np.array([1, 1j,         2,  2.5+.37j, np.inf, np.nan])
         y = np.array([1, 1j, -0.5+1.5j, -0.5+1.5j,      2,      3])
         lx = list(range(len(x)))
@@ -382,6 +464,7 @@
             assert_almost_equal(n_r[i], p_r[i], err_msg='Loop %d\n' % i)
 
     def test_array(self):
+        """ """
         x = np.array([1, 1j,         2,  2.5+.37j, np.inf, np.nan])
         y = np.array([1, 1j, -0.5+1.5j, -0.5+1.5j,      2,      3])
         lx = list(range(len(x)))
@@ -395,13 +478,17 @@
             assert_almost_equal(n_r[i], p_r[i], err_msg='Loop %d\n' % i)
 
 class TestCabs:
+    """ """
     def setup(self):
+        """ """
         self.olderr = np.seterr(invalid='ignore')
 
     def teardown(self):
+        """ """
         np.seterr(**self.olderr)
 
     def test_simple(self):
+        """ """
         x = np.array([1+1j, 0+2j, 1+2j, np.inf, np.nan])
         y_r = np.array([np.sqrt(2.), 2, np.sqrt(5), np.inf, np.nan])
         y = np.abs(x)
@@ -409,6 +496,7 @@
             assert_almost_equal(y[i], y_r[i])
 
     def test_fabs(self):
+        """ """
         # Test that np.abs(x +- 0j) == np.abs(x) (as mandated by C99 for cabs)
         x = np.array([1+0j], dtype=complex)
         assert_array_equal(np.abs(x), np.real(x))
@@ -423,6 +511,7 @@
         assert_array_equal(np.abs(x), np.real(x))
 
     def test_cabs_inf_nan(self):
+        """ """
         x, y = [], []
 
         # cabs(+-nan + nani) returns nan
@@ -446,9 +535,33 @@
 
         # cabs(conj(z)) == conj(cabs(z)) (= cabs(z))
         def f(a):
+            """
+
+            Parameters
+            ----------
+            a :
+                
+
+            Returns
+            -------
+
+            """
             return np.abs(np.conj(a))
 
         def g(a, b):
+            """
+
+            Parameters
+            ----------
+            a :
+                
+            b :
+                
+
+            Returns
+            -------
+
+            """
             return np.abs(complex(a, b))
 
         xa = np.array(x, dtype=complex)
@@ -457,7 +570,9 @@
             check_real_value(f, x[i], y[i], ref)
 
 class TestCarg:
+    """ """
     def test_simple(self):
+        """ """
         check_real_value(ncu._arg, 1, 0, 0, False)
         check_real_value(ncu._arg, 0, 1, 0.5*np.pi, False)
 
@@ -468,6 +583,7 @@
     @pytest.mark.skip(
         reason="Complex arithmetic with signed zero fails on most platforms")
     def test_zero(self):
+        """ """
         # carg(-0 +- 0i) returns +- pi
         check_real_value(ncu._arg, np.NZERO, np.PZERO,  np.pi, False)
         check_real_value(ncu._arg, np.NZERO, np.NZERO, -np.pi, False)
@@ -496,6 +612,7 @@
     #    _check_branch_cut(ncu._arg, -1, 1j, -1, 1)
 
     def test_special_values(self):
+        """ """
         # carg(-np.inf +- yi) returns +-pi for finite y > 0
         check_real_value(ncu._arg, -np.inf,  1,  np.pi, False)
         check_real_value(ncu._arg, -np.inf, -1, -np.pi, False)
@@ -525,6 +642,25 @@
 
 
 def check_real_value(f, x1, y1, x, exact=True):
+    """
+
+    Parameters
+    ----------
+    f :
+        
+    x1 :
+        
+    y1 :
+        
+    x :
+        
+    exact :
+         (Default value = True)
+
+    Returns
+    -------
+
+    """
     z1 = np.array([complex(x1, y1)])
     if exact:
         assert_equal(f(z1), x)
@@ -533,6 +669,27 @@
 
 
 def check_complex_value(f, x1, y1, x2, y2, exact=True):
+    """
+
+    Parameters
+    ----------
+    f :
+        
+    x1 :
+        
+    y1 :
+        
+    x2 :
+        
+    y2 :
+        
+    exact :
+         (Default value = True)
+
+    Returns
+    -------
+
+    """
     z1 = np.array([complex(x1, y1)])
     z2 = complex(x2, y2)
     with np.errstate(invalid='ignore'):
@@ -542,9 +699,23 @@
             assert_almost_equal(f(z1), z2)
 
 class TestSpecialComplexAVX(object):
+    """ """
     @pytest.mark.parametrize("stride", [-4,-2,-1,1,2,4])
     @pytest.mark.parametrize("astype", [np.complex64, np.complex128])
     def test_array(self, stride, astype):
+        """
+
+        Parameters
+        ----------
+        stride :
+            
+        astype :
+            
+
+        Returns
+        -------
+
+        """
         arr = np.array([np.complex(np.nan , np.nan),
                         np.complex(np.nan , np.inf),
                         np.complex(np.inf , np.nan),
@@ -569,22 +740,54 @@
             assert_equal(np.square(arr[::stride]), sq_true[::stride])
 
 class TestComplexAbsoluteAVX(object):
+    """ """
     @pytest.mark.parametrize("arraysize", [1,2,3,4,5,6,7,8,9,10,11,13,15,17,18,19])
     @pytest.mark.parametrize("stride", [-4,-3,-2,-1,1,2,3,4])
     @pytest.mark.parametrize("astype", [np.complex64, np.complex128])
     # test to ensure masking and strides work as intended in the AVX implementation
     def test_array(self, arraysize, stride, astype):
+        """
+
+        Parameters
+        ----------
+        arraysize :
+            
+        stride :
+            
+        astype :
+            
+
+        Returns
+        -------
+
+        """
         arr = np.ones(arraysize, dtype=astype)
         abs_true = np.ones(arraysize, dtype=arr.real.dtype)
         assert_equal(np.abs(arr[::stride]), abs_true[::stride])
 
 # Testcase taken as is from https://github.com/numpy/numpy/issues/16660
 class TestComplexAbsoluteMixedDTypes(object):
+    """ """
     @pytest.mark.parametrize("stride", [-4,-3,-2,-1,1,2,3,4])
     @pytest.mark.parametrize("astype", [np.complex64, np.complex128])
     @pytest.mark.parametrize("func", ['abs', 'square', 'conjugate'])
     
     def test_array(self, stride, astype, func):
+        """
+
+        Parameters
+        ----------
+        stride :
+            
+        astype :
+            
+        func :
+            
+
+        Returns
+        -------
+
+        """
         dtype = [('template_id', '<i8'), ('bank_chisq','<f4'),
                  ('bank_chisq_dof','<i8'), ('chisq', '<f4'), ('chisq_dof','<i8'),
                  ('cont_chisq', '<f4'), ('psd_var_val', '<f4'), ('sg_chisq','<f4'),
