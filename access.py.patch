# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jedi/inference/compiled/access.py
+++ b/..//venv/lib/python3.8/site-packages/jedi/inference/compiled/access.py
@@ -79,6 +79,21 @@
 
 
 def safe_getattr(obj, name, default=_sentinel):
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+    name :
+        
+    default :
+         (Default value = _sentinel)
+
+    Returns
+    -------
+
+    """
     try:
         attr, is_get_descriptor = getattr_static(obj, name)
     except AttributeError:
@@ -105,7 +120,19 @@
 
 
 def shorten_repr(func):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
+    """
     def wrapper(self):
+        """ """
         r = func(self)
         if len(r) > 50:
             r = r[:50] + '..'
@@ -114,10 +141,38 @@
 
 
 def create_access(inference_state, obj):
+    """
+
+    Parameters
+    ----------
+    inference_state :
+        
+    obj :
+        
+
+    Returns
+    -------
+
+    """
     return inference_state.compiled_subprocess.get_or_create_access_handle(obj)
 
 
 def load_module(inference_state, dotted_name, sys_path):
+    """
+
+    Parameters
+    ----------
+    inference_state :
+        
+    dotted_name :
+        
+    sys_path :
+        
+
+    Returns
+    -------
+
+    """
     temp, sys.path = sys.path, sys_path
     try:
         __import__(dotted_name)
@@ -141,6 +196,7 @@
 
 
 class AccessPath(object):
+    """ """
     def __init__(self, accesses):
         self.accesses = accesses
 
@@ -155,15 +211,50 @@
 
 
 def create_access_path(inference_state, obj):
+    """
+
+    Parameters
+    ----------
+    inference_state :
+        
+    obj :
+        
+
+    Returns
+    -------
+
+    """
     access = create_access(inference_state, obj)
     return AccessPath(access.get_access_path_tuples())
 
 
 def _force_unicode_decorator(func):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
+    """
     return lambda *args, **kwargs: force_unicode(func(*args, **kwargs))
 
 
 def get_api_type(obj):
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+
+    Returns
+    -------
+
+    """
     if inspect.isclass(obj):
         return u'class'
     elif inspect.ismodule(obj):
@@ -176,6 +267,7 @@
 
 
 class DirectObjectAccess(object):
+    """ """
     def __init__(self, inference_state, obj):
         self._inference_state = inference_state
         self._obj = obj
@@ -184,24 +276,50 @@
         return '%s(%s)' % (self.__class__.__name__, self.get_repr())
 
     def _create_access(self, obj):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+
+        Returns
+        -------
+
+        """
         return create_access(self._inference_state, obj)
 
     def _create_access_path(self, obj):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+
+        Returns
+        -------
+
+        """
         return create_access_path(self._inference_state, obj)
 
     def py__bool__(self):
+        """ """
         return bool(self._obj)
 
     def py__file__(self):
+        """ """
         try:
             return self._obj.__file__
         except AttributeError:
             return None
 
     def py__doc__(self):
+        """ """
         return force_unicode(inspect.getdoc(self._obj)) or u''
 
     def py__name__(self):
+        """ """
         if not _is_class_instance(self._obj) or \
                 inspect.ismethoddescriptor(self._obj):  # slots
             cls = self._obj
@@ -219,14 +337,27 @@
             return None
 
     def py__mro__accesses(self):
+        """ """
         return tuple(self._create_access_path(cls) for cls in self._obj.__mro__[1:])
 
     def py__getitem__all_values(self):
+        """ """
         if isinstance(self._obj, dict):
             return [self._create_access_path(v) for v in self._obj.values()]
         return self.py__iter__list()
 
     def py__simple_getitem__(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         if type(self._obj) not in ALLOWED_GETITEM_TYPES:
             # Get rid of side effects, we won't call custom `__getitem__`s.
             return None
@@ -234,6 +365,7 @@
         return self._create_access_path(self._obj[index])
 
     def py__iter__list(self):
+        """ """
         if not hasattr(self._obj, '__getitem__'):
             return None
 
@@ -250,12 +382,15 @@
         return lst
 
     def py__class__(self):
+        """ """
         return self._create_access_path(self._obj.__class__)
 
     def py__bases__(self):
+        """ """
         return [self._create_access_path(base) for base in self._obj.__bases__]
 
     def py__path__(self):
+        """ """
         paths = getattr(self._obj, '__path__', None)
         # Avoid some weird hacks that would just fail, because they cannot be
         # used by pickle.
@@ -267,6 +402,7 @@
     @_force_unicode_decorator
     @shorten_repr
     def get_repr(self):
+        """ """
         builtins = 'builtins', '__builtin__'
 
         if inspect.ismodule(self._obj):
@@ -285,22 +421,39 @@
         return object.__repr__(self._obj)
 
     def is_class(self):
+        """ """
         return inspect.isclass(self._obj)
 
     def is_function(self):
+        """ """
         return inspect.isfunction(self._obj) or inspect.ismethod(self._obj)
 
     def is_module(self):
+        """ """
         return inspect.ismodule(self._obj)
 
     def is_instance(self):
+        """ """
         return _is_class_instance(self._obj)
 
     def ismethoddescriptor(self):
+        """ """
         return inspect.ismethoddescriptor(self._obj)
 
     def get_qualified_names(self):
+        """ """
         def try_to_get_name(obj):
+            """
+
+            Parameters
+            ----------
+            obj :
+                
+
+            Returns
+            -------
+
+            """
             return getattr(obj, '__qualname__', getattr(obj, '__name__', None))
 
         if self.is_module():
@@ -313,9 +466,11 @@
         return tuple(force_unicode(n) for n in name.split('.'))
 
     def dir(self):
+        """ """
         return list(map(force_unicode, dir(self._obj)))
 
     def has_iter(self):
+        """ """
         try:
             iter(self._obj)
             return True
@@ -323,6 +478,19 @@
             return False
 
     def is_allowed_getattr(self, name, unsafe=False):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+        unsafe :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         # TODO this API is ugly.
         if unsafe:
             # Unsafe is mostly used to check for __getattr__/__getattribute__.
@@ -351,6 +519,19 @@
         return True, False
 
     def getattr_paths(self, name, default=_sentinel):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+        default :
+             (Default value = _sentinel)
+
+        Returns
+        -------
+
+        """
         try:
             # Make sure no warnings are printed here, this is autocompletion,
             # warnings should not be shown. See also GH #1383.
@@ -396,20 +577,25 @@
         return [self._create_access(module), access]
 
     def get_safe_value(self):
+        """ """
         if type(self._obj) in (bool, bytes, float, int, str, unicode, slice) or self._obj is None:
             return self._obj
         raise ValueError("Object is type %s and not simple" % type(self._obj))
 
     def get_api_type(self):
+        """ """
         return get_api_type(self._obj)
 
     def get_array_type(self):
+        """ """
         if isinstance(self._obj, dict):
             return 'dict'
         return None
 
     def get_key_paths(self):
+        """ """
         def iter_partial_keys():
+            """ """
             # We could use list(keys()), but that might take a lot more memory.
             for (i, k) in enumerate(self._obj.keys()):
                 # Limit key listing at some point. This is artificial, but this
@@ -421,11 +607,14 @@
         return [self._create_access_path(k) for k in iter_partial_keys()]
 
     def get_access_path_tuples(self):
+        """ """
         accesses = [create_access(self._inference_state, o) for o in self._get_objects_path()]
         return [(access.py__name__(), access) for access in accesses]
 
     def _get_objects_path(self):
+        """ """
         def get():
+            """ """
             obj = self._obj
             yield obj
             try:
@@ -456,14 +645,25 @@
         return list(reversed(list(get())))
 
     def execute_operation(self, other_access_handle, operator):
+        """
+
+        Parameters
+        ----------
+        other_access_handle :
+            
+        operator :
+            
+
+        Returns
+        -------
+
+        """
         other_access = other_access_handle.access
         op = _OPERATORS[operator]
         return self._create_access_path(op(self._obj, other_access._obj))
 
     def get_annotation_name_and_args(self):
-        """
-        Returns Tuple[Optional[str], Tuple[AccessPath, ...]]
-        """
+        """Returns Tuple[Optional[str], Tuple[AccessPath, ...]]"""
         if sys.version_info < (3, 5):
             return None, ()
 
@@ -482,14 +682,27 @@
         return name, tuple(self._create_access_path(arg) for arg in args)
 
     def needs_type_completions(self):
+        """ """
         return inspect.isclass(self._obj) and self._obj != type
 
     def _annotation_to_str(self, annotation):
+        """
+
+        Parameters
+        ----------
+        annotation :
+            
+
+        Returns
+        -------
+
+        """
         if py_version < 30:
             return ''
         return inspect.formatannotation(annotation)
 
     def get_signature_params(self):
+        """ """
         return [
             SignatureParam(
                 name=p.name,
@@ -504,6 +717,7 @@
         ]
 
     def _get_signature(self):
+        """ """
         obj = self._obj
         if py_version < 33:
             raise ValueError("inspect.signature was introduced in 3.3")
@@ -516,6 +730,7 @@
             raise ValueError
 
     def get_return_annotation(self):
+        """ """
         try:
             o = self._obj.__annotations__.get('return')
         except AttributeError:
@@ -538,12 +753,19 @@
         return self._create_access_path(o)
 
     def negate(self):
+        """ """
         return self._create_access_path(-self._obj)
 
     def get_dir_infos(self):
-        """
-        Used to return a couple of infos that are needed when accessing the sub
+        """Used to return a couple of infos that are needed when accessing the sub
         objects of an objects
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         tuples = dict(
             (force_unicode(name), self.is_allowed_getattr(name))
@@ -553,7 +775,17 @@
 
 
 def _is_class_instance(obj):
-    """Like inspect.* methods."""
+    """Like inspect.* methods.
+
+    Parameters
+    ----------
+    obj :
+        
+
+    Returns
+    -------
+
+    """
     try:
         cls = obj.__class__
     except AttributeError:
