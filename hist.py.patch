# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/plotting/_matplotlib/hist.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/plotting/_matplotlib/hist.py
@@ -10,6 +10,7 @@
 
 
 class HistPlot(LinePlot):
+    """ """
     _kind = "hist"
 
     def __init__(self, data, bins=10, bottom=0, **kwargs):
@@ -19,6 +20,7 @@
         MPLPlot.__init__(self, data, **kwargs)
 
     def _args_adjust(self):
+        """ """
         if is_integer(self.bins):
             # create common bin edge
             values = self.data._convert(datetime=True)._get_numeric_data()
@@ -44,6 +46,31 @@
         stacking_id=None,
         **kwds,
     ):
+        """
+
+        Parameters
+        ----------
+        ax :
+            
+        y :
+            
+        style :
+             (Default value = None)
+        bins :
+             (Default value = None)
+        bottom :
+             (Default value = 0)
+        column_num :
+             (Default value = 0)
+        stacking_id :
+             (Default value = None)
+        **kwds :
+            
+
+        Returns
+        -------
+
+        """
         if column_num == 0:
             cls._initialize_stacker(ax, stacking_id, len(bins) - 1)
         y = y[~isna(y)]
@@ -56,6 +83,7 @@
         return patches
 
     def _make_plot(self):
+        """ """
         colors = self._get_colors()
         stacking_id = self._get_stacking_id()
 
@@ -84,13 +112,38 @@
             self._add_legend_handle(artists[0], label, index=i)
 
     def _make_plot_keywords(self, kwds, y):
-        """merge BoxPlot/KdePlot properties to passed kwds"""
+        """merge BoxPlot/KdePlot properties to passed kwds
+
+        Parameters
+        ----------
+        kwds :
+            
+        y :
+            
+
+        Returns
+        -------
+
+        """
         # y is required for KdePlot
         kwds["bottom"] = self.bottom
         kwds["bins"] = self.bins
         return kwds
 
     def _post_plot_logic(self, ax, data):
+        """
+
+        Parameters
+        ----------
+        ax :
+            
+        data :
+            
+
+        Returns
+        -------
+
+        """
         if self.orientation == "horizontal":
             ax.set_xlabel("Frequency")
         else:
@@ -98,6 +151,7 @@
 
     @property
     def orientation(self):
+        """ """
         if self.kwds.get("orientation", None) == "horizontal":
             return "horizontal"
         else:
@@ -105,6 +159,7 @@
 
 
 class KdePlot(HistPlot):
+    """ """
     _kind = "kde"
     orientation = "vertical"
 
@@ -114,9 +169,21 @@
         self.ind = ind
 
     def _args_adjust(self):
+        """ """
         pass
 
     def _get_ind(self, y):
+        """
+
+        Parameters
+        ----------
+        y :
+            
+
+        Returns
+        -------
+
+        """
         if self.ind is None:
             # np.nanmax() and np.nanmin() ignores the missing values
             sample_range = np.nanmax(y) - np.nanmin(y)
@@ -148,6 +215,31 @@
         stacking_id=None,
         **kwds,
     ):
+        """
+
+        Parameters
+        ----------
+        ax :
+            
+        y :
+            
+        style :
+             (Default value = None)
+        bw_method :
+             (Default value = None)
+        ind :
+             (Default value = None)
+        column_num :
+             (Default value = None)
+        stacking_id :
+             (Default value = None)
+        **kwds :
+            
+
+        Returns
+        -------
+
+        """
         from scipy.stats import gaussian_kde
 
         y = remove_na_arraylike(y)
@@ -158,11 +250,37 @@
         return lines
 
     def _make_plot_keywords(self, kwds, y):
+        """
+
+        Parameters
+        ----------
+        kwds :
+            
+        y :
+            
+
+        Returns
+        -------
+
+        """
         kwds["bw_method"] = self.bw_method
         kwds["ind"] = self._get_ind(y)
         return kwds
 
     def _post_plot_logic(self, ax, data):
+        """
+
+        Parameters
+        ----------
+        ax :
+            
+        data :
+            
+
+        Returns
+        -------
+
+        """
         ax.set_ylabel("Density")
 
 
@@ -180,6 +298,39 @@
     ax=None,
     **kwargs,
 ):
+    """
+
+    Parameters
+    ----------
+    plotf :
+        
+    data :
+        
+    column :
+         (Default value = None)
+    by :
+         (Default value = None)
+    numeric_only :
+         (Default value = True)
+    figsize :
+         (Default value = None)
+    sharex :
+         (Default value = True)
+    sharey :
+         (Default value = True)
+    layout :
+         (Default value = None)
+    rot :
+         (Default value = 0)
+    ax :
+         (Default value = None)
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
 
     if figsize == "default":
         # allowed to specify mpl default with 'default'
@@ -228,28 +379,51 @@
     legend=False,
     **kwargs,
 ):
-    """
-    Grouped histogram
+    """Grouped histogram
 
     Parameters
     ----------
     data : Series/DataFrame
+        
     column : object, optional
+         (Default value = None)
     by : object, optional
+         (Default value = None)
     ax : axes, optional
+         (Default value = None)
     bins : int, default 50
+         (Default value = 50)
     figsize : tuple, optional
+         (Default value = None)
     layout : optional
+         (Default value = None)
     sharex : bool, default False
+         (Default value = False)
     sharey : bool, default False
+         (Default value = False)
     rot : int, default 90
+         (Default value = 90)
     grid : bool, default True
-    legend: : bool, default False
+         (Default value = True)
+    legend : : bool, default False
+         (Default value = False)
     kwargs : dict, keyword arguments passed to matplotlib.Axes.hist
+        
+    xlabelsize :
+         (Default value = None)
+    xrot :
+         (Default value = None)
+    ylabelsize :
+         (Default value = None)
+    yrot :
+         (Default value = None)
+    **kwargs :
+        
 
     Returns
     -------
-    collection of Matplotlib Axes
+
+    
     """
     if legend:
         assert "label" not in kwargs
@@ -261,6 +435,19 @@
             kwargs["label"] = column
 
     def plot_group(group, ax):
+        """
+
+        Parameters
+        ----------
+        group :
+            
+        ax :
+            
+
+        Returns
+        -------
+
+        """
         ax.hist(group.dropna().values, bins=bins, **kwargs)
         if legend:
             ax.legend()
@@ -305,6 +492,37 @@
     legend: bool = False,
     **kwds,
 ):
+    """
+
+    Parameters
+    ----------
+    by :
+         (Default value = None)
+    ax :
+         (Default value = None)
+    grid :
+         (Default value = True)
+    xlabelsize :
+         (Default value = None)
+    xrot :
+         (Default value = None)
+    ylabelsize :
+         (Default value = None)
+    yrot :
+         (Default value = None)
+    figsize :
+         (Default value = None)
+    bins :
+         (Default value = 10)
+    legend: bool :
+         (Default value = False)
+    **kwds :
+        
+
+    Returns
+    -------
+
+    """
     import matplotlib.pyplot as plt
 
     if legend and "label" in kwds:
@@ -381,6 +599,47 @@
     legend: bool = False,
     **kwds,
 ):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+    column :
+         (Default value = None)
+    by :
+         (Default value = None)
+    grid :
+         (Default value = True)
+    xlabelsize :
+         (Default value = None)
+    xrot :
+         (Default value = None)
+    ylabelsize :
+         (Default value = None)
+    yrot :
+         (Default value = None)
+    ax :
+         (Default value = None)
+    sharex :
+         (Default value = False)
+    sharey :
+         (Default value = False)
+    figsize :
+         (Default value = None)
+    layout :
+         (Default value = None)
+    bins :
+         (Default value = 10)
+    legend: bool :
+         (Default value = False)
+    **kwds :
+        
+
+    Returns
+    -------
+
+    """
     if legend and "label" in kwds:
         raise ValueError("Cannot use both legend and label")
     if by is not None:
