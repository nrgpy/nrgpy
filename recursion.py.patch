# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jedi/inference/recursion.py
+++ b/..//venv/lib/python3.8/site-packages/jedi/inference/recursion.py
@@ -51,15 +51,26 @@
 
 
 class RecursionDetector(object):
+    """ """
     def __init__(self):
         self.pushed_nodes = []
 
 
 @contextmanager
 def execution_allowed(inference_state, node):
-    """
-    A decorator to detect recursions in statements. In a recursion a statement
+    """A decorator to detect recursions in statements. In a recursion a statement
     at the same place, in the same module may not be executed two times.
+
+    Parameters
+    ----------
+    inference_state :
+        
+    node :
+        
+
+    Returns
+    -------
+
     """
     pushed_nodes = inference_state.recursion_detector.pushed_nodes
 
@@ -76,8 +87,41 @@
 
 
 def execution_recursion_decorator(default=NO_VALUES):
+    """
+
+    Parameters
+    ----------
+    default :
+         (Default value = NO_VALUES)
+
+    Returns
+    -------
+
+    """
     def decorator(func):
+        """
+
+        Parameters
+        ----------
+        func :
+            
+
+        Returns
+        -------
+
+        """
         def wrapper(self, **kwargs):
+            """
+
+            Parameters
+            ----------
+            **kwargs :
+                
+
+            Returns
+            -------
+
+            """
             detector = self.inference_state.execution_recursion_detector
             limit_reached = detector.push_execution(self)
             try:
@@ -93,9 +137,7 @@
 
 
 class ExecutionRecursionDetector(object):
-    """
-    Catches recursions of executions.
-    """
+    """Catches recursions of executions."""
     def __init__(self, inference_state):
         self._inference_state = inference_state
 
@@ -105,10 +147,22 @@
         self._execution_count = 0
 
     def pop_execution(self):
+        """ """
         self._parent_execution_funcs.pop()
         self._recursion_level -= 1
 
     def push_execution(self, execution):
+        """
+
+        Parameters
+        ----------
+        execution :
+            
+
+        Returns
+        -------
+
+        """
         funcdef = execution.tree_node
 
         # These two will be undone in pop_execution.
