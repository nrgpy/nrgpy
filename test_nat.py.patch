# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/scalar/test_nat.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/scalar/test_nat.py
@@ -36,6 +36,19 @@
     ],
 )
 def test_nat_fields(nat, idx):
+    """
+
+    Parameters
+    ----------
+    nat :
+        
+    idx :
+        
+
+    Returns
+    -------
+
+    """
 
     for field in idx._field_ops:
         # weekday is a property of DTI, but a method
@@ -59,6 +72,7 @@
 
 
 def test_nat_vector_field_access():
+    """ """
     idx = DatetimeIndex(["1/1/2000", None, None, "1/4/2000"])
 
     for field in DatetimeIndex._field_ops:
@@ -98,12 +112,38 @@
 @pytest.mark.parametrize("klass", [Timestamp, Timedelta, Period])
 @pytest.mark.parametrize("value", [None, np.nan, iNaT, float("nan"), NaT, "NaT", "nat"])
 def test_identity(klass, value):
+    """
+
+    Parameters
+    ----------
+    klass :
+        
+    value :
+        
+
+    Returns
+    -------
+
+    """
     assert klass(value) is NaT
 
 
 @pytest.mark.parametrize("klass", [Timestamp, Timedelta, Period])
 @pytest.mark.parametrize("value", ["", "nat", "NAT", None, np.nan])
 def test_equality(klass, value):
+    """
+
+    Parameters
+    ----------
+    klass :
+        
+    value :
+        
+
+    Returns
+    -------
+
+    """
     if klass is Period and value == "":
         pytest.skip("Period cannot parse empty string")
 
@@ -114,6 +154,21 @@
 @pytest.mark.parametrize("method", ["round", "floor", "ceil"])
 @pytest.mark.parametrize("freq", ["s", "5s", "min", "5min", "h", "5h"])
 def test_round_nat(klass, method, freq):
+    """
+
+    Parameters
+    ----------
+    klass :
+        
+    method :
+        
+    freq :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-14940
     ts = klass("nat")
 
@@ -154,6 +209,17 @@
     ],
 )
 def test_nat_methods_raise(method):
+    """
+
+    Parameters
+    ----------
+    method :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-9513, gh-17329
     msg = f"NaTType does not support {method}"
 
@@ -163,6 +229,17 @@
 
 @pytest.mark.parametrize("method", ["weekday", "isoweekday"])
 def test_nat_methods_nan(method):
+    """
+
+    Parameters
+    ----------
+    method :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-9513, gh-17329
     assert np.isnan(getattr(NaT, method)())
 
@@ -171,6 +248,17 @@
     "method", ["date", "now", "replace", "today", "tz_convert", "tz_localize"]
 )
 def test_nat_methods_nat(method):
+    """
+
+    Parameters
+    ----------
+    method :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-8254, gh-9513, gh-17329
     assert getattr(NaT, method)() is NaT
 
@@ -179,6 +267,17 @@
     "get_nat", [lambda x: NaT, lambda x: Timedelta(x), lambda x: Timestamp(x)]
 )
 def test_nat_iso_format(get_nat):
+    """
+
+    Parameters
+    ----------
+    get_nat :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-12300
     assert get_nat("NaT").isoformat() == "NaT"
 
@@ -202,6 +301,19 @@
     ],
 )
 def test_missing_public_nat_methods(klass, expected):
+    """
+
+    Parameters
+    ----------
+    klass :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-17327
     #
     # NaT should have *most* of the Timestamp and Timedelta methods.
@@ -217,19 +329,19 @@
 
 
 def _get_overlap_public_nat_methods(klass, as_tuple=False):
-    """
-    Get overlapping public methods between NaT and another class.
+    """Get overlapping public methods between NaT and another class.
 
     Parameters
     ----------
     klass : type
         The class to compare with NaT
     as_tuple : bool, default False
-        Whether to return a list of tuples of the form (klass, method).
-
-    Returns
-    -------
-    overlap : list
+        Whether to return a list of tuples of the form (klass, method). (Default value = False)
+
+    Returns
+    -------
+
+    
     """
     nat_names = dir(NaT)
     klass_names = dir(klass)
@@ -302,6 +414,19 @@
     ],
 )
 def test_overlap_public_nat_methods(klass, expected):
+    """
+
+    Parameters
+    ----------
+    klass :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-17327
     #
     # NaT should have *most* of the Timestamp and Timedelta methods.
@@ -327,6 +452,17 @@
     ),
 )
 def test_nat_doc_strings(compare):
+    """
+
+    Parameters
+    ----------
+    compare :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-17327
     #
     # The docstrings for overlapping methods should match.
@@ -367,6 +503,21 @@
     ],
 )
 def test_nat_arithmetic_scalar(op_name, value, val_type):
+    """
+
+    Parameters
+    ----------
+    op_name :
+        
+    value :
+        
+    val_type :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-6873
     invalid_ops = {
         "scalar": {"right_div_left"},
@@ -427,6 +578,19 @@
     "val,expected", [(np.nan, NaT), (NaT, np.nan), (np.timedelta64("NaT"), np.nan)]
 )
 def test_nat_rfloordiv_timedelta(val, expected):
+    """
+
+    Parameters
+    ----------
+    val :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-#18846
     #
     # See also test_timedelta.TestTimedeltaArithmetic.test_floordiv
@@ -449,6 +613,19 @@
     ],
 )
 def test_nat_arithmetic_index(op_name, value):
+    """
+
+    Parameters
+    ----------
+    op_name :
+        
+    value :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-11718
     exp_name = "x"
     exp_data = [NaT] * 2
@@ -472,6 +649,19 @@
 )
 @pytest.mark.parametrize("box", [TimedeltaIndex, Series, TimedeltaArray._from_sequence])
 def test_nat_arithmetic_td64_vector(op_name, box):
+    """
+
+    Parameters
+    ----------
+    op_name :
+        
+    box :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-19124
     vec = box(["1 day", "2 day"], dtype="timedelta64[ns]")
     box_nat = box([NaT, NaT], dtype="timedelta64[ns]")
@@ -492,6 +682,21 @@
     ],
 )
 def test_nat_arithmetic_ndarray(dtype, op, out_dtype):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+    op :
+        
+    out_dtype :
+        
+
+    Returns
+    -------
+
+    """
     other = np.arange(10).astype(dtype)
     result = op(NaT, other)
 
@@ -501,11 +706,13 @@
 
 
 def test_nat_pinned_docstrings():
+    """ """
     # see gh-17327
     assert NaT.ctime.__doc__ == datetime.ctime.__doc__
 
 
 def test_to_numpy_alias():
+    """ """
     # GH 24653: alias .to_numpy() for scalars
     expected = NaT.to_datetime64()
     result = NaT.to_numpy()
@@ -515,6 +722,19 @@
 
 @pytest.mark.parametrize("other", [Timedelta(0), Timestamp(0)])
 def test_nat_comparisons(compare_operators_no_eq_ne, other):
+    """
+
+    Parameters
+    ----------
+    compare_operators_no_eq_ne :
+        
+    other :
+        
+
+    Returns
+    -------
+
+    """
     # GH 26039
     assert getattr(NaT, compare_operators_no_eq_ne)(other) is False
     assert getattr(other, compare_operators_no_eq_ne)(NaT) is False
@@ -550,12 +770,24 @@
     ],
 )
 def test_nat_addsub_tdlike_scalar(obj):
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+
+    Returns
+    -------
+
+    """
     assert NaT + obj is NaT
     assert obj + NaT is NaT
     assert NaT - obj is NaT
 
 
 def test_pickle():
+    """ """
     # GH#4606
     p = tm.round_trip_pickle(NaT)
     assert p is NaT
