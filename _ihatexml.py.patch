# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/bleach/_vendor/html5lib/_ihatexml.py
+++ b/..//venv/lib/python3.8/site-packages/bleach/_vendor/html5lib/_ihatexml.py
@@ -101,6 +101,17 @@
 
 
 def charStringToList(chars):
+    """
+
+    Parameters
+    ----------
+    chars :
+        
+
+    Returns
+    -------
+
+    """
     charRanges = [item.strip() for item in chars.split(" | ")]
     rv = []
     for item in charRanges:
@@ -122,6 +133,17 @@
 
 
 def normaliseCharList(charList):
+    """
+
+    Parameters
+    ----------
+    charList :
+        
+
+    Returns
+    -------
+
+    """
     charList = sorted(charList)
     for item in charList:
         assert item[1] >= item[0]
@@ -142,6 +164,17 @@
 
 
 def missingRanges(charList):
+    """
+
+    Parameters
+    ----------
+    charList :
+        
+
+    Returns
+    -------
+
+    """
     rv = []
     if charList[0] != 0:
         rv.append([0, charList[0][0] - 1])
@@ -153,6 +186,17 @@
 
 
 def listToRegexpStr(charList):
+    """
+
+    Parameters
+    ----------
+    charList :
+        
+
+    Returns
+    -------
+
+    """
     rv = []
     for item in charList:
         if item[0] == item[1]:
@@ -164,10 +208,32 @@
 
 
 def hexToInt(hex_str):
+    """
+
+    Parameters
+    ----------
+    hex_str :
+        
+
+    Returns
+    -------
+
+    """
     return int(hex_str, 16)
 
 
 def escapeRegexp(string):
+    """
+
+    Parameters
+    ----------
+    string :
+        
+
+    Returns
+    -------
+
+    """
     specialCharacters = (".", "^", "$", "*", "+", "?", "{", "}",
                          "[", "]", "|", "(", ")", "-")
     for char in specialCharacters:
@@ -185,6 +251,7 @@
 
 
 class InfosetFilter(object):
+    """ """
     replacementRegexp = re.compile(r"U[\dA-F]{5,5}")
 
     def __init__(self,
@@ -208,6 +275,19 @@
         self.replaceCache = {}
 
     def coerceAttribute(self, name, namespace=None):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+        namespace :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if self.dropXmlnsLocalName and name.startswith("xmlns:"):
             warnings.warn("Attributes cannot begin with xmlns", DataLossWarning)
             return None
@@ -219,9 +299,31 @@
             return self.toXmlName(name)
 
     def coerceElement(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         return self.toXmlName(name)
 
     def coerceComment(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         if self.preventDoubleDashComments:
             while "--" in data:
                 warnings.warn("Comments cannot contain adjacent dashes", DataLossWarning)
@@ -232,6 +334,17 @@
         return data
 
     def coerceCharacters(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         if self.replaceFormFeedCharacters:
             for _ in range(data.count("\x0C")):
                 warnings.warn("Text cannot contain U+000C", DataLossWarning)
@@ -240,6 +353,17 @@
         return data
 
     def coercePubid(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         dataOutput = data
         for char in nonPubidCharRegexp.findall(data):
             warnings.warn("Coercing non-XML pubid", DataLossWarning)
@@ -251,6 +375,17 @@
         return dataOutput
 
     def toXmlName(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         nameFirst = name[0]
         nameRest = name[1:]
         m = nonXmlNameFirstBMPRegexp.match(nameFirst)
@@ -269,6 +404,17 @@
         return nameFirstOutput + nameRestOutput
 
     def getReplacementCharacter(self, char):
+        """
+
+        Parameters
+        ----------
+        char :
+            
+
+        Returns
+        -------
+
+        """
         if char in self.replaceCache:
             replacement = self.replaceCache[char]
         else:
@@ -276,14 +422,47 @@
         return replacement
 
     def fromXmlName(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         for item in set(self.replacementRegexp.findall(name)):
             name = name.replace(item, self.unescapeChar(item))
         return name
 
     def escapeChar(self, char):
+        """
+
+        Parameters
+        ----------
+        char :
+            
+
+        Returns
+        -------
+
+        """
         replacement = "U%05X" % ord(char)
         self.replaceCache[char] = replacement
         return replacement
 
     def unescapeChar(self, charcode):
+        """
+
+        Parameters
+        ----------
+        charcode :
+            
+
+        Returns
+        -------
+
+        """
         return chr(int(charcode[1:], 16))
