# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/lib/tests/test_pretty.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/lib/tests/test_pretty.py
@@ -20,9 +20,23 @@
 
 
 class MyList(object):
+    """ """
     def __init__(self, content):
         self.content = content
     def _repr_pretty_(self, p, cycle):
+        """
+
+        Parameters
+        ----------
+        p :
+            
+        cycle :
+            
+
+        Returns
+        -------
+
+        """
         if cycle:
             p.text("MyList(...)")
         else:
@@ -37,38 +51,86 @@
 
 
 class MyDict(dict):
+    """ """
     def _repr_pretty_(self, p, cycle):
+        """
+
+        Parameters
+        ----------
+        p :
+            
+        cycle :
+            
+
+        Returns
+        -------
+
+        """
         p.text("MyDict(...)")
 
 class MyObj(object):
+    """ """
     def somemethod(self):
+        """ """
         pass
 
 
 class Dummy1(object):
+    """ """
     def _repr_pretty_(self, p, cycle):
+        """
+
+        Parameters
+        ----------
+        p :
+            
+        cycle :
+            
+
+        Returns
+        -------
+
+        """
         p.text("Dummy1(...)")
 
 class Dummy2(Dummy1):
+    """ """
     _repr_pretty_ = None
 
 class NoModule(object):
+    """ """
     pass
 
 NoModule.__module__ = None
 
 class Breaking(object):
+    """ """
     def _repr_pretty_(self, p, cycle):
+        """
+
+        Parameters
+        ----------
+        p :
+            
+        cycle :
+            
+
+        Returns
+        -------
+
+        """
         with p.group(4,"TG: ",":"):
             p.text("Breaking(")
             p.break_()
             p.text(")")
 
 class BreakingRepr(object):
+    """ """
     def __repr__(self):
         return "Breaking(\n)"
 
 class BadRepr(object):
+    """ """
     
     def __repr__(self):
         return 1/0
@@ -84,9 +146,15 @@
 
 
 def test_dispatch():
-    """
-    Test correct dispatching: The _repr_pretty_ method for MyDict
+    """Test correct dispatching: The _repr_pretty_ method for MyDict
     must be found before the registered printer for dict.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     gotoutput = pretty.pretty(MyDict())
     expectedoutput = "MyDict(...)"
@@ -95,9 +163,15 @@
 
 
 def test_callability_checking():
-    """
-    Test that the _repr_pretty_ method is tested for callability and skipped if
+    """Test that the _repr_pretty_ method is tested for callability and skipped if
     not.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     gotoutput = pretty.pretty(Dummy2())
     expectedoutput = "Dummy1(...)"
@@ -106,9 +180,7 @@
 
 
 def test_sets():
-    """
-    Test that set and frozenset use Python 3 formatting.
-    """
+    """Test that set and frozenset use Python 3 formatting."""
     objects = [set(), frozenset(), set([1]), frozenset([1]), set([1, 2]),
         frozenset([1, 2]), set([-1, -2, -3])]
     expected = ['set()', 'frozenset()', '{1}', 'frozenset({1})', '{1, 2}',
@@ -120,32 +192,24 @@
 
 @skip_without('xxlimited')
 def test_pprint_heap_allocated_type():
-    """
-    Test that pprint works for heap allocated types.
-    """
+    """Test that pprint works for heap allocated types."""
     import xxlimited
     output = pretty.pretty(xxlimited.Null)
     nt.assert_equal(output, 'xxlimited.Null')
 
 def test_pprint_nomod():
-    """
-    Test that pprint works for classes with no __module__.
-    """
+    """Test that pprint works for classes with no __module__."""
     output = pretty.pretty(NoModule)
     nt.assert_equal(output, 'NoModule')
     
 def test_pprint_break():
-    """
-    Test that p.break_ produces expected output
-    """
+    """Test that p.break_ produces expected output"""
     output = pretty.pretty(Breaking())
     expected = "TG: Breaking(\n    ):"
     nt.assert_equal(output, expected)
 
 def test_pprint_break_repr():
-    """
-    Test that p.break_ is used in repr
-    """
+    """Test that p.break_ is used in repr"""
     output = pretty.pretty([[BreakingRepr()]])
     expected = "[[Breaking(\n  )]]"
     nt.assert_equal(output, expected)
@@ -160,10 +224,12 @@
         pretty.pretty(BadRepr())
 
 class BadException(Exception):
+    """ """
     def __str__(self):
         return -1
 
 class ReallyBadRepr(object):
+    """ """
     __module__ = 1
     @property
     def __class__(self):
@@ -173,19 +239,24 @@
         raise BadException()
 
 def test_really_bad_repr():
+    """ """
     with nt.assert_raises(BadException):
         pretty.pretty(ReallyBadRepr())
 
 
 class SA(object):
+    """ """
     pass
 
 class SB(SA):
+    """ """
     pass
 
 class TestsPretty(unittest.TestCase):
+    """ """
 
     def test_super_repr(self):
+        """ """
         # "<super: module_name.SA, None>"
         output = pretty.pretty(super(SA))
         self.assertRegex(output, r"<super: \S+.SA, None>")
@@ -197,35 +268,41 @@
 
 
     def test_long_list(self):
+        """ """
         lis = list(range(10000))
         p = pretty.pretty(lis)
         last2 = p.rsplit('\n', 2)[-2:]
         self.assertEqual(last2, [' 999,', ' ...]'])
 
     def test_long_set(self):
+        """ """
         s = set(range(10000))
         p = pretty.pretty(s)
         last2 = p.rsplit('\n', 2)[-2:]
         self.assertEqual(last2, [' 999,', ' ...}'])
 
     def test_long_tuple(self):
+        """ """
         tup = tuple(range(10000))
         p = pretty.pretty(tup)
         last2 = p.rsplit('\n', 2)[-2:]
         self.assertEqual(last2, [' 999,', ' ...)'])
 
     def test_long_dict(self):
+        """ """
         d = { n:n for n in range(10000) }
         p = pretty.pretty(d)
         last2 = p.rsplit('\n', 2)[-2:]
         self.assertEqual(last2, [' 999: 999,', ' ...}'])
 
     def test_unbound_method(self):
+        """ """
         output = pretty.pretty(MyObj.somemethod)
         self.assertIn('MyObj.somemethod', output)
 
 
 class MetaClass(type):
+    """ """
     def __new__(cls, name):
         return type.__new__(cls, name, (object,), {'name': name})
 
@@ -237,15 +314,18 @@
 
 
 def test_metaclass_repr():
+    """ """
     output = pretty.pretty(ClassWithMeta)
     nt.assert_equal(output, "[CUSTOM REPR FOR CLASS ClassWithMeta]")
 
 
 def test_unicode_repr():
+    """ """
     u = u"üniçodé"
     ustr = u
     
     class C(object):
+        """ """
         def __repr__(self):
             return ustr
     
@@ -257,7 +337,23 @@
 
 
 def test_basic_class():
+    """ """
     def type_pprint_wrapper(obj, p, cycle):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+        p :
+            
+        cycle :
+            
+
+        Returns
+        -------
+
+        """
         if obj is MyObj:
             type_pprint_wrapper.called = True
         return pretty._type_pprint(obj, p, cycle)
@@ -275,6 +371,7 @@
 
 
 def test_collections_defaultdict():
+    """ """
     # Create defaultdicts with cycles
     a = defaultdict()
     a.default_factory = a
@@ -295,6 +392,7 @@
 
 
 def test_collections_ordereddict():
+    """ """
     # Create OrderedDict with cycle
     a = OrderedDict()
     a['key'] = a
@@ -319,6 +417,7 @@
 
 
 def test_collections_deque():
+    """ """
     # Create deque with cycle
     a = deque()
     a.append(a)
@@ -352,7 +451,9 @@
         nt.assert_equal(pretty.pretty(obj), expected)
 
 def test_collections_counter():
+    """ """
     class MyCounter(Counter):
+        """ """
         pass
     cases = [
         (Counter(), 'Counter()'),
@@ -363,6 +464,7 @@
         nt.assert_equal(pretty.pretty(obj), expected)
 
 def test_mappingproxy():
+    """ """
     MP = types.MappingProxyType
     underlying_dict = {}
     mp_recursive = MP(underlying_dict)
@@ -408,6 +510,7 @@
 
 
 def test_simplenamespace():
+    """ """
     SN = types.SimpleNamespace
 
     sn_recursive = SN()
@@ -428,6 +531,7 @@
 
 
 def test_pretty_environ():
+    """ """
     dict_repr = pretty.pretty(dict(os.environ))
     # reindent to align with 'environ' prefix
     dict_indented = dict_repr.replace('\n', '\n' + (' ' * len('environ')))
@@ -436,6 +540,7 @@
 
 
 def test_function_pretty():
+    """ """
     "Test pretty print of function"
     # posixpath is a pure python module, its interface is consistent
     # across Python distributions
@@ -444,6 +549,17 @@
  
     # custom function
     def meaning_of_life(question=None):
+        """
+
+        Parameters
+        ----------
+        question :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if question:
             return 42
         return "Don't panic"
@@ -452,6 +568,7 @@
 
 
 class OrderedCounter(Counter, OrderedDict):
+    """ """
     'Counter that remembers the order elements are first encountered'
 
     def __repr__(self):
@@ -461,6 +578,7 @@
         return self.__class__, (OrderedDict(self),)
 
 class MySet(set):  # Override repr of a basic type
+    """ """
     def __repr__(self):
         return 'mine'
 
