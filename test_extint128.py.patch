# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_extint128.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_extint128.py
@@ -42,14 +42,23 @@
 
 @contextlib.contextmanager
 def exc_iter(*args):
+    """Iterate over Cartesian product of *args, and if an exception is raised,
+    add information of the current iterate.
+
+    Parameters
+    ----------
+    *args :
+        
+
+    Returns
+    -------
+
     """
-    Iterate over Cartesian product of *args, and if an exception is raised,
-    add information of the current iterate.
-    """
 
     value = [None]
 
     def iterate():
+        """ """
         for v in itertools.product(*args):
             value[0] = v
             yield v
@@ -64,6 +73,7 @@
 
 
 def test_safe_binop():
+    """ """
     # Test checked arithmetic routines
 
     ops = [
@@ -87,6 +97,7 @@
 
 
 def test_to_128():
+    """ """
     with exc_iter(INT64_VALUES) as it:
         for a, in it:
             b = mt.extint_to_128(a)
@@ -95,6 +106,7 @@
 
 
 def test_to_64():
+    """ """
     with exc_iter(INT128_VALUES) as it:
         for a, in it:
             if not (INT64_MIN <= a <= INT64_MAX):
@@ -106,6 +118,7 @@
 
 
 def test_mul_64_64():
+    """ """
     with exc_iter(INT64_VALUES, INT64_VALUES) as it:
         for a, b in it:
             c = a * b
@@ -115,6 +128,7 @@
 
 
 def test_add_128():
+    """ """
     with exc_iter(INT128_VALUES, INT128_VALUES) as it:
         for a, b in it:
             c = a + b
@@ -127,6 +141,7 @@
 
 
 def test_sub_128():
+    """ """
     with exc_iter(INT128_VALUES, INT128_VALUES) as it:
         for a, b in it:
             c = a - b
@@ -139,6 +154,7 @@
 
 
 def test_neg_128():
+    """ """
     with exc_iter(INT128_VALUES) as it:
         for a, in it:
             b = -a
@@ -148,6 +164,7 @@
 
 
 def test_shl_128():
+    """ """
     with exc_iter(INT128_VALUES) as it:
         for a, in it:
             if a < 0:
@@ -160,6 +177,7 @@
 
 
 def test_shr_128():
+    """ """
     with exc_iter(INT128_VALUES) as it:
         for a, in it:
             if a < 0:
@@ -172,6 +190,7 @@
 
 
 def test_gt_128():
+    """ """
     with exc_iter(INT128_VALUES, INT128_VALUES) as it:
         for a, b in it:
             c = a > b
@@ -182,6 +201,7 @@
 
 @pytest.mark.slow
 def test_divmod_128_64():
+    """ """
     with exc_iter(INT128_VALUES, INT64_POS_VALUES) as it:
         for a, b in it:
             if a >= 0:
@@ -200,6 +220,7 @@
 
 
 def test_floordiv_128_64():
+    """ """
     with exc_iter(INT128_VALUES, INT64_POS_VALUES) as it:
         for a, b in it:
             c = a // b
@@ -210,6 +231,7 @@
 
 
 def test_ceildiv_128_64():
+    """ """
     with exc_iter(INT128_VALUES, INT64_POS_VALUES) as it:
         for a, b in it:
             c = (a + b - 1) // b
