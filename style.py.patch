# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/io/formats/style.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/io/formats/style.py
@@ -53,6 +53,17 @@
 
 @contextmanager
 def _mpl(func: Callable):
+    """
+
+    Parameters
+    ----------
+    func: Callable :
+        
+
+    Returns
+    -------
+
+    """
     if has_mpl:
         yield plt, colors
     else:
@@ -60,8 +71,7 @@
 
 
 class Styler:
-    """
-    Helps style a DataFrame or Series according to the data with HTML and CSS.
+    """Helps style a DataFrame or Series according to the data with HTML and CSS.
 
     Parameters
     ----------
@@ -86,46 +96,46 @@
     na_rep : str, optional
         Representation for missing values.
         If ``na_rep`` is None, no special formatting is applied.
-
         .. versionadded:: 1.0.0
+
+    Returns
+    -------
 
     Attributes
     ----------
     env : Jinja2 jinja2.Environment
     template : Jinja2 Template
     loader : Jinja2 Loader
-
     See Also
     --------
     DataFrame.style : Return a Styler object containing methods for building
         a styled HTML representation for the DataFrame.
-
     Notes
     -----
     Most styling will be done by passing style functions into
     ``Styler.apply`` or ``Styler.applymap``. Style functions should
     return values with strings containing CSS ``'attr: value'`` that will
     be applied to the indicated cells.
-
+    
     If using in the Jupyter notebook, Styler has defined a ``_repr_html_``
     to automatically render itself. Otherwise call Styler.render to get
     the generated HTML.
-
+    
     CSS classes are attached to the generated HTML
-
+    
     * Index and Column names include ``index_name`` and ``level<k>``
       where `k` is its level in a MultiIndex
     * Index label cells include
-
+    
       * ``row_heading``
       * ``row<n>`` where `n` is the numeric position of the row
       * ``level<k>`` where `k` is the level in a MultiIndex
-
+    
     * Column label cells include
       * ``col_heading``
       * ``col<n>`` where `n` is the numeric position of the column
       * ``level<k>`` where `k` is the level in a MultiIndex
-
+    
     * Blank cells include ``blank``
     * Data cells include ``data``
     """
@@ -174,6 +184,17 @@
         # display_funcs maps (row, col) -> formatting function
 
         def default_display_func(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             if self.na_rep is not None and pd.isna(x):
                 return self.na_rep
             elif is_float(x):
@@ -187,9 +208,7 @@
         ] = defaultdict(lambda: default_display_func)
 
     def _repr_html_(self) -> str:
-        """
-        Hooks into Jupyter notebook rich display system.
-        """
+        """Hooks into Jupyter notebook rich display system."""
         return self.render()
 
     @doc(NDFrame.to_excel, klass="Styler")
@@ -212,6 +231,53 @@
         verbose: bool = True,
         freeze_panes: Optional[Tuple[int, int]] = None,
     ) -> None:
+        """
+
+        Parameters
+        ----------
+        excel_writer :
+            
+        sheet_name: str :
+             (Default value = "Sheet1")
+        na_rep: str :
+             (Default value = "")
+        float_format: Optional[str] :
+             (Default value = None)
+        columns: Optional[Sequence[Label]] :
+             (Default value = None)
+        header: Union[Sequence[Label] :
+            
+        bool] :
+             (Default value = True)
+        index: bool :
+             (Default value = True)
+        index_label: Optional[Union[Label :
+            
+        Sequence[Label]]] :
+             (Default value = None)
+        startrow: int :
+             (Default value = 0)
+        startcol: int :
+             (Default value = 0)
+        engine: Optional[str] :
+             (Default value = None)
+        merge_cells: bool :
+             (Default value = True)
+        encoding: Optional[str] :
+             (Default value = None)
+        inf_rep: str :
+             (Default value = "inf")
+        verbose: bool :
+             (Default value = True)
+        freeze_panes: Optional[Tuple[int :
+            
+        int]] :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
 
         from pandas.io.formats.excel import ExcelFormatter
 
@@ -236,9 +302,15 @@
         )
 
     def _translate(self):
-        """
-        Convert the DataFrame in `self.data` and the attrs from `_build_styles`
+        """Convert the DataFrame in `self.data` and the attrs from `_build_styles`
         into a dictionary of {head, body, uuid, cellstyle}.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         table_styles = self.table_styles or []
         caption = self.caption
@@ -256,6 +328,17 @@
         BLANK_VALUE = ""
 
         def format_attr(pair):
+            """
+
+            Parameters
+            ----------
+            pair :
+                
+
+            Returns
+            -------
+
+            """
             return f"{pair['key']}={pair['value']}"
 
         # for sparsifying a MultiIndex
@@ -429,8 +512,7 @@
         )
 
     def format(self, formatter, subset=None, na_rep: Optional[str] = None) -> "Styler":
-        """
-        Format the text display value of cells.
+        """Format the text display value of cells.
 
         Parameters
         ----------
@@ -438,28 +520,29 @@
             If ``formatter`` is None, the default formatter is used.
         subset : IndexSlice
             An argument to ``DataFrame.loc`` that restricts which elements
-            ``formatter`` is applied to.
+            ``formatter`` is applied to. (Default value = None)
         na_rep : str, optional
             Representation for missing values.
             If ``na_rep`` is None, no special formatting is applied.
-
             .. versionadded:: 1.0.0
+        na_rep: Optional[str] :
+             (Default value = None)
 
         Returns
         -------
         self : Styler
+            
 
         Notes
         -----
         ``formatter`` is either an ``a`` or a dict ``{column name: a}`` where
         ``a`` is one of
-
+        
         - str: this will be wrapped in: ``a.format(x)``
         - callable: called with the value of an individual cell
-
+        
         The default display value for numeric values is the "general" (``g``)
         format with ``pd.options.display.precision`` precision.
-
         Examples
         --------
         >>> df = pd.DataFrame(np.random.randn(4, 2), columns=['a', 'b'])
@@ -500,12 +583,11 @@
         return self
 
     def render(self, **kwargs) -> str:
-        """
-        Render the built up styles to HTML.
-
-        Parameters
-        ----------
-        **kwargs
+        """Render the built up styles to HTML.
+
+        Parameters
+        ----------
+        **kwargs :
             Any additional keyword arguments are passed
             through to ``self.template.render``.
             This is useful when you need to provide
@@ -523,11 +605,11 @@
         last item in a Notebook cell. When calling ``Styler.render()``
         directly, wrap the result in ``IPython.display.HTML`` to view
         the rendered HTML in the notebook.
-
+        
         Pandas uses the following keys in render. Arguments passed
         in ``**kwargs`` take precedence, so think carefully if you want
         to override them:
-
+        
         * head
         * cellstyle
         * body
@@ -549,17 +631,19 @@
         return self.template.render(**d)
 
     def _update_ctx(self, attrs: DataFrame) -> None:
-        """
-        Update the state of the Styler.
-
+        """Update the state of the Styler.
+        
         Collects a mapping of {index_label: ['<property>: <value>']}.
 
         Parameters
         ----------
-        attrs : DataFrame
-            should contain strings of '<property>: <value>;<prop2>: <val2>'
-            Whitespace shouldn't matter and the final trailing ';' shouldn't
-            matter.
+        attrs: DataFrame :
+            
+
+        Returns
+        -------
+
+        
         """
         coli = {k: i for i, k in enumerate(self.columns)}
         rowi = {k: i for i, k in enumerate(self.index)}
@@ -577,6 +661,17 @@
                     self.ctx[(i, j)].append(pair)
 
     def _copy(self, deepcopy: bool = False) -> "Styler":
+        """
+
+        Parameters
+        ----------
+        deepcopy: bool :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         styler = Styler(
             self.data,
             precision=self.precision,
@@ -603,22 +698,34 @@
         return self._copy(deepcopy=True)
 
     def clear(self) -> None:
-        """
-        Reset the styler, removing any previously applied styles.
-
+        """Reset the styler, removing any previously applied styles.
+        
         Returns None.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         self.ctx.clear()
         self._todo = []
 
     def _compute(self):
-        """
-        Execute the style functions built up in `self._todo`.
-
+        """Execute the style functions built up in `self._todo`.
+        
         Relies on the conventions that all style functions go through
         .apply or .applymap. The append styles to apply as tuples of
-
+        
         (application method, *args, **kwargs)
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         r = self
         for func, args, kwargs in self._todo:
@@ -632,6 +739,25 @@
         subset=None,
         **kwargs,
     ) -> "Styler":
+        """
+
+        Parameters
+        ----------
+        func: Callable[... :
+            
+        "Styler"] :
+            
+        axis: Optional[Axis] :
+             (Default value = 0)
+        subset :
+             (Default value = None)
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         subset = slice(None) if subset is None else subset
         subset = _non_reducing_slice(subset)
         data = self.data.loc[subset]
@@ -671,9 +797,8 @@
         subset=None,
         **kwargs,
     ) -> "Styler":
-        """
-        Apply a function column-wise, row-wise, or table-wise.
-
+        """Apply a function column-wise, row-wise, or table-wise.
+        
         Updates the HTML representation with the result.
 
         Parameters
@@ -689,24 +814,30 @@
             with ``axis=None``.
         subset : IndexSlice
             A valid indexer to limit ``data`` to *before* applying the
-            function. Consider using a pandas.IndexSlice.
+            function. Consider using a pandas.IndexSlice. (Default value = None)
         **kwargs : dict
             Pass along to ``func``.
+        func: Callable[... :
+            
+        "Styler"] :
+            
+        axis: Optional[Axis] :
+             (Default value = 0)
 
         Returns
         -------
         self : Styler
+            
 
         Notes
         -----
         The output shape of ``func`` should match the input, i.e. if
         ``x`` is the input row, column, or table (depending on ``axis``),
         then ``func(x).shape == x.shape`` should be true.
-
+        
         This is similar to ``DataFrame.apply``, except that ``axis=None``
         applies the function to the entire DataFrame at once,
         rather than column-wise or row-wise.
-
         Examples
         --------
         >>> def highlight_max(x):
@@ -722,6 +853,21 @@
         return self
 
     def _applymap(self, func: Callable, subset=None, **kwargs) -> "Styler":
+        """
+
+        Parameters
+        ----------
+        func: Callable :
+            
+        subset :
+             (Default value = None)
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         func = partial(func, **kwargs)  # applymap doesn't take kwargs?
         if subset is None:
             subset = pd.IndexSlice[:]
@@ -731,9 +877,8 @@
         return self
 
     def applymap(self, func: Callable, subset=None, **kwargs) -> "Styler":
-        """
-        Apply a function elementwise.
-
+        """Apply a function elementwise.
+        
         Updates the HTML representation with the result.
 
         Parameters
@@ -742,13 +887,16 @@
             ``func`` should take a scalar and return a scalar.
         subset : IndexSlice
             A valid indexer to limit ``data`` to *before* applying the
-            function. Consider using a pandas.IndexSlice.
+            function. Consider using a pandas.IndexSlice. (Default value = None)
         **kwargs : dict
             Pass along to ``func``.
+        func: Callable :
+            
 
         Returns
         -------
         self : Styler
+            
 
         See Also
         --------
@@ -767,9 +915,8 @@
         subset=None,
         **kwargs,
     ) -> "Styler":
-        """
-        Apply a function elementwise.
-
+        """Apply a function elementwise.
+        
         Updates the HTML representation with a style which is
         selected in accordance with the return value of a function.
 
@@ -783,13 +930,20 @@
             Applied when ``cond`` returns false.
         subset : IndexSlice
             A valid indexer to limit ``data`` to *before* applying the
-            function. Consider using a pandas.IndexSlice.
+            function. Consider using a pandas.IndexSlice. (Default value = None)
         **kwargs : dict
             Pass along to ``cond``.
+        cond: Callable :
+            
+        value: str :
+            
+        other: Optional[str] :
+             (Default value = None)
 
         Returns
         -------
         self : Styler
+            
 
         See Also
         --------
@@ -803,34 +957,40 @@
         )
 
     def set_precision(self, precision: int) -> "Styler":
-        """
-        Set the precision used to render.
+        """Set the precision used to render.
 
         Parameters
         ----------
         precision : int
-
-        Returns
-        -------
-        self : Styler
+            
+        precision: int :
+            
+
+        Returns
+        -------
+
+        
         """
         self.precision = precision
         return self
 
     def set_table_attributes(self, attributes: str) -> "Styler":
-        """
-        Set the table attributes.
-
+        """Set the table attributes.
+        
         These are the items that show up in the opening ``<table>`` tag
         in addition to to automatic (by default) id.
 
         Parameters
         ----------
         attributes : str
+            
+        attributes: str :
+            
 
         Returns
         -------
         self : Styler
+            
 
         Examples
         --------
@@ -842,14 +1002,17 @@
         return self
 
     def export(self) -> List[Tuple[Callable, Tuple, Dict]]:
-        """
-        Export the styles to applied to the current Styler.
-
+        """Export the styles to applied to the current Styler.
+        
         Can be applied to a second style with ``Styler.use``.
 
+        Parameters
+        ----------
+
         Returns
         -------
         styles : list
+            
 
         See Also
         --------
@@ -858,19 +1021,25 @@
         return self._todo
 
     def use(self, styles: List[Tuple[Callable, Tuple, Dict]]) -> "Styler":
-        """
-        Set the styles on the current Styler.
-
+        """Set the styles on the current Styler.
+        
         Possibly uses styles from ``Styler.export``.
 
         Parameters
         ----------
         styles : list
             List of style functions.
+        styles: List[Tuple[Callable :
+            
+        Tuple :
+            
+        Dict]] :
+            
 
         Returns
         -------
         self : Styler
+            
 
         See Also
         --------
@@ -880,39 +1049,44 @@
         return self
 
     def set_uuid(self, uuid: str) -> "Styler":
-        """
-        Set the uuid for a Styler.
+        """Set the uuid for a Styler.
 
         Parameters
         ----------
         uuid : str
-
-        Returns
-        -------
-        self : Styler
+            
+        uuid: str :
+            
+
+        Returns
+        -------
+
+        
         """
         self.uuid = uuid
         return self
 
     def set_caption(self, caption: str) -> "Styler":
-        """
-        Set the caption on a Styler.
+        """Set the caption on a Styler.
 
         Parameters
         ----------
         caption : str
-
-        Returns
-        -------
-        self : Styler
+            
+        caption: str :
+            
+
+        Returns
+        -------
+
+        
         """
         self.caption = caption
         return self
 
     def set_table_styles(self, table_styles) -> "Styler":
-        """
-        Set the table styles on a Styler.
-
+        """Set the table styles on a Styler.
+        
         These are placed in a ``<style>`` tag before the generated HTML table.
 
         Parameters
@@ -927,6 +1101,7 @@
         Returns
         -------
         self : Styler
+            
 
         Examples
         --------
@@ -940,39 +1115,44 @@
         return self
 
     def set_na_rep(self, na_rep: str) -> "Styler":
-        """
-        Set the missing data representation on a Styler.
-
+        """Set the missing data representation on a Styler.
+        
         .. versionadded:: 1.0.0
 
         Parameters
         ----------
         na_rep : str
-
-        Returns
-        -------
-        self : Styler
+            
+        na_rep: str :
+            
+
+        Returns
+        -------
+
+        
         """
         self.na_rep = na_rep
         return self
 
     def hide_index(self) -> "Styler":
-        """
-        Hide any indices from rendering.
-
+        """Hide any indices from rendering.
+        
         .. versionadded:: 0.23.0
 
-        Returns
-        -------
-        self : Styler
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        
         """
         self.hidden_index = True
         return self
 
     def hide_columns(self, subset) -> "Styler":
-        """
-        Hide columns from rendering.
-
+        """Hide columns from rendering.
+        
         .. versionadded:: 0.23.0
 
         Parameters
@@ -983,7 +1163,8 @@
 
         Returns
         -------
-        self : Styler
+
+        
         """
         subset = _non_reducing_slice(subset)
         hidden_df = self.data.loc[subset]
@@ -996,6 +1177,19 @@
 
     @staticmethod
     def _highlight_null(v, null_color: str) -> str:
+        """
+
+        Parameters
+        ----------
+        v :
+            
+        null_color: str :
+            
+
+        Returns
+        -------
+
+        """
         return f"background-color: {null_color}" if pd.isna(v) else ""
 
     def highlight_null(
@@ -1003,20 +1197,26 @@
         null_color: str = "red",
         subset: Optional[Union[Label, Sequence[Label]]] = None,
     ) -> "Styler":
-        """
-        Shade the background ``null_color`` for missing values.
+        """Shade the background ``null_color`` for missing values.
 
         Parameters
         ----------
         null_color : str, default 'red'
+            
         subset : label or list of labels, default None
             A valid slice for ``data`` to limit the style application to.
-
             .. versionadded:: 1.1.0
-
-        Returns
-        -------
-        self : Styler
+        null_color: str :
+             (Default value = "red")
+        subset: Optional[Union[Label :
+            
+        Sequence[Label]]] :
+             (Default value = None)
+
+        Returns
+        -------
+
+        
         """
         self.applymap(self._highlight_null, null_color=null_color, subset=subset)
         return self
@@ -1032,16 +1232,15 @@
         vmin: Optional[float] = None,
         vmax: Optional[float] = None,
     ) -> "Styler":
-        """
-        Color the background in a gradient style.
-
+        """Color the background in a gradient style.
+        
         The background color is determined according
         to the data in each column (optionally row). Requires matplotlib.
 
         Parameters
         ----------
         cmap : str or colormap
-            Matplotlib colormap.
+            Matplotlib colormap. (Default value = "PuBu")
         low : float
             Compress the range by the low.
         high : float
@@ -1051,29 +1250,37 @@
             (``axis=1`` or ``'columns'``), or to the entire DataFrame at once
             with ``axis=None``.
         subset : IndexSlice
-            A valid slice for ``data`` to limit the style application to.
+            A valid slice for ``data`` to limit the style application to. (Default value = None)
         text_color_threshold : float or int
             Luminance threshold for determining text color. Facilitates text
             visibility across varying background colors. From 0 to 1.
             0 = all text is dark colored, 1 = all text is light colored.
-
             .. versionadded:: 0.24.0
-
         vmin : float, optional
             Minimum data value that corresponds to colormap minimum value.
             When None (default): the minimum value of the data will be used.
-
             .. versionadded:: 1.0.0
-
         vmax : float, optional
             Maximum data value that corresponds to colormap maximum value.
             When None (default): the maximum value of the data will be used.
-
             .. versionadded:: 1.0.0
+        low: float :
+             (Default value = 0)
+        high: float :
+             (Default value = 0)
+        axis: Optional[Axis] :
+             (Default value = 0)
+        text_color_threshold: float :
+             (Default value = 0.408)
+        vmin: Optional[float] :
+             (Default value = None)
+        vmax: Optional[float] :
+             (Default value = None)
 
         Returns
         -------
         self : Styler
+            
 
         Raises
         ------
@@ -1112,8 +1319,28 @@
         vmin: Optional[float] = None,
         vmax: Optional[float] = None,
     ):
-        """
-        Color background in a range according to the data.
+        """Color background in a range according to the data.
+
+        Parameters
+        ----------
+        s :
+            
+        cmap :
+             (Default value = "PuBu")
+        low: float :
+             (Default value = 0)
+        high: float :
+             (Default value = 0)
+        text_color_threshold: float :
+             (Default value = 0.408)
+        vmin: Optional[float] :
+             (Default value = None)
+        vmax: Optional[float] :
+             (Default value = None)
+
+        Returns
+        -------
+
         """
         if (
             not isinstance(text_color_threshold, (float, int))
@@ -1133,20 +1360,22 @@
             rgbas = plt.cm.get_cmap(cmap)(norm(s.to_numpy(dtype=float)))
 
             def relative_luminance(rgba) -> float:
-                """
-                Calculate relative luminance of a color.
-
+                """Calculate relative luminance of a color.
+                
                 The calculation adheres to the W3C standards
                 (https://www.w3.org/WAI/GL/wiki/Relative_luminance)
 
                 Parameters
                 ----------
                 color : rgb or rgba tuple
+                    
+                rgba :
+                    
 
                 Returns
                 -------
-                float
-                    The relative luminance as a value from 0 to 1
+
+                
                 """
                 r, g, b = (
                     x / 12.92 if x <= 0.03928 else ((x + 0.055) / 1.055 ** 2.4)
@@ -1155,6 +1384,17 @@
                 return 0.2126 * r + 0.7152 * g + 0.0722 * b
 
             def css(rgba) -> str:
+                """
+
+                Parameters
+                ----------
+                rgba :
+                    
+
+                Returns
+                -------
+
+                """
                 dark = relative_luminance(rgba) < text_color_threshold
                 text_color = "#f1f1f1" if dark else "#000000"
                 return f"background-color: {colors.rgb2hex(rgba)};color: {text_color};"
@@ -1169,19 +1409,19 @@
                 )
 
     def set_properties(self, subset=None, **kwargs) -> "Styler":
-        """
-        Method to set one or more non-data dependent properties or each cell.
+        """Method to set one or more non-data dependent properties or each cell.
 
         Parameters
         ----------
         subset : IndexSlice
-            A valid slice for ``data`` to limit the style application to.
+            A valid slice for ``data`` to limit the style application to. (Default value = None)
         **kwargs : dict
             A dictionary of property, value pairs to be set for each cell.
 
         Returns
         -------
         self : Styler
+            
 
         Examples
         --------
@@ -1202,8 +1442,26 @@
         vmin: Optional[float] = None,
         vmax: Optional[float] = None,
     ):
-        """
-        Draw bar chart in dataframe cells.
+        """Draw bar chart in dataframe cells.
+
+        Parameters
+        ----------
+        s :
+            
+        align: str :
+            
+        colors: List[str] :
+            
+        width: float :
+             (Default value = 100)
+        vmin: Optional[float] :
+             (Default value = None)
+        vmax: Optional[float] :
+             (Default value = None)
+
+        Returns
+        -------
+
         """
         # Get input value range.
         smin = np.nanmin(s.to_numpy()) if vmin is None else vmin
@@ -1220,8 +1478,20 @@
         zero = -width * smin / (smax - smin + 1e-12)
 
         def css_bar(start: float, end: float, color: str) -> str:
-            """
-            Generate CSS code to draw a bar from start to end.
+            """Generate CSS code to draw a bar from start to end.
+
+            Parameters
+            ----------
+            start: float :
+                
+            end: float :
+                
+            color: str :
+                
+
+            Returns
+            -------
+
             """
             css = "width: 10em; height: 80%;"
             if end > start:
@@ -1233,6 +1503,17 @@
             return css
 
         def css(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             if pd.isna(x):
                 return ""
 
@@ -1263,13 +1544,12 @@
         vmin: Optional[float] = None,
         vmax: Optional[float] = None,
     ) -> "Styler":
-        """
-        Draw bar chart in the cell backgrounds.
+        """Draw bar chart in the cell backgrounds.
 
         Parameters
         ----------
         subset : IndexSlice, optional
-            A valid slice for `data` to limit the style application to.
+            A valid slice for `data` to limit the style application to. (Default value = None)
         axis : {0 or 'index', 1 or 'columns', None}, default 0
             Apply to each column (``axis=0`` or ``'index'``), to each row
             (``axis=1`` or ``'columns'``), or to the entire DataFrame at once
@@ -1278,35 +1558,42 @@
             If a str is passed, the color is the same for both
             negative and positive numbers. If 2-tuple/list is used, the
             first element is the color_negative and the second is the
-            color_positive (eg: ['#d65f5f', '#5fba7d']).
+            color_positive (eg: ['#d65f5f', '#5fba7d']). (Default value = "#d65f5f")
         width : float, default 100
             A number between 0 or 100. The largest value will cover `width`
             percent of the cell's width.
         align : {'left', 'zero',' mid'}, default 'left'
             How to align the bars with the cells.
-
             - 'left' : the min value starts at the left of the cell.
             - 'zero' : a value of zero is located at the center of the cell.
             - 'mid' : the center of the cell is at (max-min)/2, or
-              if values are all negative (positive) the zero is aligned
-              at the right (left) of the cell.
+            if values are all negative (positive) the zero is aligned
+            at the right (left) of the cell.
         vmin : float, optional
             Minimum bar value, defining the left hand limit
             of the bar drawing range, lower values are clipped to `vmin`.
             When None (default): the minimum value of the data will be used.
-
             .. versionadded:: 0.24.0
-
         vmax : float, optional
             Maximum bar value, defining the right hand limit
             of the bar drawing range, higher values are clipped to `vmax`.
             When None (default): the maximum value of the data will be used.
-
             .. versionadded:: 0.24.0
-
-        Returns
-        -------
-        self : Styler
+        axis: Optional[Axis] :
+             (Default value = 0)
+        width: float :
+             (Default value = 100)
+        align: str :
+             (Default value = "left")
+        vmin: Optional[float] :
+             (Default value = None)
+        vmax: Optional[float] :
+             (Default value = None)
+
+        Returns
+        -------
+
+        
         """
         if align not in ("left", "zero", "mid"):
             raise ValueError("`align` must be one of {'left', 'zero',' mid'}")
@@ -1340,44 +1627,54 @@
     def highlight_max(
         self, subset=None, color: str = "yellow", axis: Optional[Axis] = 0
     ) -> "Styler":
-        """
-        Highlight the maximum by shading the background.
+        """Highlight the maximum by shading the background.
 
         Parameters
         ----------
         subset : IndexSlice, default None
-            A valid slice for ``data`` to limit the style application to.
+            A valid slice for ``data`` to limit the style application to. (Default value = None)
         color : str, default 'yellow'
+            
         axis : {0 or 'index', 1 or 'columns', None}, default 0
             Apply to each column (``axis=0`` or ``'index'``), to each row
             (``axis=1`` or ``'columns'``), or to the entire DataFrame at once
             with ``axis=None``.
-
-        Returns
-        -------
-        self : Styler
+        color: str :
+             (Default value = "yellow")
+        axis: Optional[Axis] :
+             (Default value = 0)
+
+        Returns
+        -------
+
+        
         """
         return self._highlight_handler(subset=subset, color=color, axis=axis, max_=True)
 
     def highlight_min(
         self, subset=None, color: str = "yellow", axis: Optional[Axis] = 0
     ) -> "Styler":
-        """
-        Highlight the minimum by shading the background.
+        """Highlight the minimum by shading the background.
 
         Parameters
         ----------
         subset : IndexSlice, default None
-            A valid slice for ``data`` to limit the style application to.
+            A valid slice for ``data`` to limit the style application to. (Default value = None)
         color : str, default 'yellow'
+            
         axis : {0 or 'index', 1 or 'columns', None}, default 0
             Apply to each column (``axis=0`` or ``'index'``), to each row
             (``axis=1`` or ``'columns'``), or to the entire DataFrame at once
             with ``axis=None``.
-
-        Returns
-        -------
-        self : Styler
+        color: str :
+             (Default value = "yellow")
+        axis: Optional[Axis] :
+             (Default value = 0)
+
+        Returns
+        -------
+
+        
         """
         return self._highlight_handler(
             subset=subset, color=color, axis=axis, max_=False
@@ -1390,6 +1687,23 @@
         axis: Optional[Axis] = None,
         max_: bool = True,
     ) -> "Styler":
+        """
+
+        Parameters
+        ----------
+        subset :
+             (Default value = None)
+        color: str :
+             (Default value = "yellow")
+        axis: Optional[Axis] :
+             (Default value = None)
+        max_: bool :
+             (Default value = True)
+
+        Returns
+        -------
+
+        """
         subset = _non_reducing_slice(_maybe_numeric_slice(self.data, subset))
         self.apply(
             self._highlight_extrema, color=color, axis=axis, subset=subset, max_=max_
@@ -1400,8 +1714,20 @@
     def _highlight_extrema(
         data: FrameOrSeries, color: str = "yellow", max_: bool = True
     ):
-        """
-        Highlight the min or max in a Series or DataFrame.
+        """Highlight the min or max in a Series or DataFrame.
+
+        Parameters
+        ----------
+        data: FrameOrSeries :
+            
+        color: str :
+             (Default value = "yellow")
+        max_: bool :
+             (Default value = True)
+
+        Returns
+        -------
+
         """
         attr = f"background-color: {color}"
 
@@ -1419,9 +1745,8 @@
 
     @classmethod
     def from_custom_template(cls, searchpath, name):
-        """
-        Factory function for creating a subclass of ``Styler``.
-
+        """Factory function for creating a subclass of ``Styler``.
+        
         Uses a custom template and Jinja environment.
 
         Parameters
@@ -1433,21 +1758,21 @@
 
         Returns
         -------
-        MyStyler : subclass of Styler
-            Has the correct ``env`` and ``template`` class attributes set.
+
+        
         """
         loader = jinja2.ChoiceLoader([jinja2.FileSystemLoader(searchpath), cls.loader])
 
         class MyStyler(cls):
+            """ """
             env = jinja2.Environment(loader=loader)
             template = env.get_template(name)
 
         return MyStyler
 
     def pipe(self, func: Callable, *args, **kwargs):
-        """
-        Apply ``func(self, *args, **kwargs)``, and return the result.
-
+        """Apply ``func(self, *args, **kwargs)``, and return the result.
+        
         .. versionadded:: 0.24.0
 
         Parameters
@@ -1460,10 +1785,12 @@
             Arguments passed to `func`.
         **kwargs : optional
             A dictionary of keyword arguments passed into ``func``.
-
-        Returns
-        -------
-        object :
+        func: Callable :
+            
+
+        Returns
+        -------
+        object : 
             The value returned by ``func``.
 
         See Also
@@ -1471,41 +1798,39 @@
         DataFrame.pipe : Analogous method for DataFrame.
         Styler.apply : Apply a function row-wise, column-wise, or table-wise to
             modify the dataframe's styling.
-
         Notes
         -----
         Like :meth:`DataFrame.pipe`, this method can simplify the
         application of several user-defined functions to a styler.  Instead
         of writing:
-
+        
         .. code-block:: python
-
+        
             f(g(df.style.set_precision(3), arg1=a), arg2=b, arg3=c)
-
+        
         users can write:
-
+        
         .. code-block:: python
-
+        
             (df.style.set_precision(3)
                .pipe(g, arg1=a)
                .pipe(f, arg2=b, arg3=c))
-
+        
         In particular, this allows users to define functions that take a
         styler object, along with other parameters, and return the styler after
         making styling changes (such as calling :meth:`Styler.apply` or
         :meth:`Styler.set_properties`).  Using ``.pipe``, these user-defined
         style "transformations" can be interleaved with calls to the built-in
         Styler interface.
-
         Examples
         --------
+        
+        The user-defined ``format_conversion`` function above can be called
+        within a sequence of other style modifications:
         >>> def format_conversion(styler):
         ...     return (styler.set_properties(**{'text-align': 'right'})
         ...                   .format({'conversion': '{:.1%}'}))
-
-        The user-defined ``format_conversion`` function above can be called
-        within a sequence of other style modifications:
-
+        
         >>> df = pd.DataFrame({'trial': list(range(5)),
         ...                    'conversion': [0.75, 0.85, np.nan, 0.7, 0.72]})
         >>> (df.style
@@ -1517,20 +1842,42 @@
 
 
 def _is_visible(idx_row, idx_col, lengths) -> bool:
-    """
-    Index -> {(idx_row, idx_col): bool}).
+    """Index -> {(idx_row, idx_col): bool}).
+
+    Parameters
+    ----------
+    idx_row :
+        
+    idx_col :
+        
+    lengths :
+        
+
+    Returns
+    -------
+
     """
     return (idx_col, idx_row) in lengths
 
 
 def _get_level_lengths(index, hidden_elements=None):
-    """
-    Given an index, find the level length for each element.
-
+    """Given an index, find the level length for each element.
+    
     Optional argument is a list of index positions which
     should not be visible.
-
+    
     Result is a dictionary of (level, initial_position): span
+
+    Parameters
+    ----------
+    index :
+        
+    hidden_elements :
+         (Default value = None)
+
+    Returns
+    -------
+
     """
     if isinstance(index, pd.MultiIndex):
         levels = index.format(sparsify=lib.no_default, adjoin=False)
@@ -1572,6 +1919,21 @@
 def _maybe_wrap_formatter(
     formatter: Union[Callable, str], na_rep: Optional[str]
 ) -> Callable:
+    """
+
+    Parameters
+    ----------
+    formatter: Union[Callable :
+        
+    str] :
+        
+    na_rep: Optional[str] :
+        
+
+    Returns
+    -------
+
+    """
     if isinstance(formatter, str):
         formatter_func = lambda x: formatter.format(x)
     elif callable(formatter):
