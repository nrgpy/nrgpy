# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/io/json/_normalize.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/io/json/_normalize.py
@@ -16,8 +16,16 @@
 
 
 def convert_to_line_delimits(s):
-    """
-    Helper function that converts JSON lists to line delimited JSON.
+    """Helper function that converts JSON lists to line delimited JSON.
+
+    Parameters
+    ----------
+    s :
+        
+
+    Returns
+    -------
+
     """
     # Determine we have a JSON list to turn to lines otherwise just return the
     # json object, only lists can
@@ -35,30 +43,38 @@
     level: int = 0,
     max_level: Optional[int] = None,
 ):
-    """
-    A simplified json_normalize
-
+    """A simplified json_normalize
+    
     Converts a nested dict into a flat dict ("record"), unlike json_normalize,
     it does not attempt to extract a subset of the data.
 
     Parameters
     ----------
     ds : dict or list of dicts
-    prefix: the prefix, optional, default: ""
+        
+    prefix : the prefix, optional, default: ""
+        
     sep : str, default '.'
         Nested records will generate names separated by sep,
         e.g., for sep='.', { 'foo' : { 'bar' : 0 } } -> foo.bar
-    level: int, optional, default: 0
+    level : int, optional, default: 0
         The number of levels in the json string.
-
-    max_level: int, optional, default: None
+    max_level : int, optional, default: None
         The max depth to normalize.
-
         .. versionadded:: 0.25.0
+    prefix: str :
+         (Default value = "")
+    sep: str :
+         (Default value = ".")
+    level: int :
+         (Default value = 0)
+    max_level: Optional[int] :
+         (Default value = None)
 
     Returns
     -------
     d - dict or list of dicts, matching `ds`
+        
 
     Examples
     --------
@@ -119,8 +135,7 @@
     sep: str = ".",
     max_level: Optional[int] = None,
 ) -> "DataFrame":
-    """
-    Normalize semi-structured JSON data into a flat table.
+    """Normalize semi-structured JSON data into a flat table.
 
     Parameters
     ----------
@@ -139,27 +154,59 @@
         path to records is ['foo', 'bar'].
     errors : {'raise', 'ignore'}, default 'raise'
         Configures error handling.
-
         * 'ignore' : will ignore KeyError if keys listed in meta are not
-          always present.
+        always present.
         * 'raise' : will raise KeyError if keys listed in meta are not
-          always present.
+        always present.
     sep : str, default '.'
         Nested records will generate names separated by sep.
         e.g., for sep='.', {'foo': {'bar': 0}} -> foo.bar.
     max_level : int, default None
         Max number of levels(depth of dict) to normalize.
         if None, normalizes all levels.
-
         .. versionadded:: 0.25.0
+    data: Union[Dict :
+        
+    List[Dict]] :
+        
+    record_path: Optional[Union[str :
+        
+    List]] :
+         (Default value = None)
+    meta: Optional[Union[str :
+        
+    List[Union[str :
+        
+    List[str]]]]] :
+         (Default value = None)
+    meta_prefix: Optional[str] :
+         (Default value = None)
+    record_prefix: Optional[str] :
+         (Default value = None)
+    errors: str :
+         (Default value = "raise")
+    sep: str :
+         (Default value = ".")
+    max_level: Optional[int] :
+         (Default value = None)
 
     Returns
     -------
     frame : DataFrame
+        
     Normalize semi-structured JSON data into a flat table.
+        
 
     Examples
     --------
+    
+    
+    Normalizes nested data up to level 1.
+    
+    
+    
+    
+    Returns normalized data with columns prefixed with the given string.
     >>> data = [{'id': 1, 'name': {'first': 'Coleen', 'last': 'Volk'}},
     ...         {'name': {'given': 'Mose', 'family': 'Regner'}},
     ...         {'id': 2, 'name': 'Faye Raker'}]
@@ -168,7 +215,7 @@
     0  1.0         NaN         NaN     Coleen        NaN      Volk
     1  NaN         NaN      Regner        NaN       Mose       NaN
     2  2.0  Faye Raker         NaN        NaN        NaN       NaN
-
+    
     >>> data = [{'id': 1,
     ...          'name': "Cole Volk",
     ...          'fitness': {'height': 130, 'weight': 60}},
@@ -181,9 +228,7 @@
     0   {'height': 130, 'weight': 60}  1.0   Cole Volk
     1   {'height': 130, 'weight': 60}  NaN    Mose Reg
     2   {'height': 130, 'weight': 60}  2.0  Faye Raker
-
-    Normalizes nested data up to level 1.
-
+    
     >>> data = [{'id': 1,
     ...          'name': "Cole Volk",
     ...          'fitness': {'height': 130, 'weight': 60}},
@@ -196,7 +241,7 @@
     0   130              60          1.0    Cole Volk
     1   130              60          NaN    Mose Reg
     2   130              60          2.0    Faye Raker
-
+    
     >>> data = [{'state': 'Florida',
     ...          'shortname': 'FL',
     ...          'info': {'governor': 'Rick Scott'},
@@ -217,20 +262,34 @@
     2  Palm Beach       60000   Florida    FL    Rick Scott
     3      Summit        1234   Ohio       OH    John Kasich
     4    Cuyahoga        1337   Ohio       OH    John Kasich
-
+    
     >>> data = {'A': [1, 2]}
     >>> json_normalize(data, 'A', record_prefix='Prefix.')
         Prefix.0
     0          1
     1          2
-
-    Returns normalized data with columns prefixed with the given string.
     """
 
     def _pull_field(
         js: Dict[str, Any], spec: Union[List, str]
     ) -> Union[Scalar, Iterable]:
-        """Internal function to pull field"""
+        """Internal function to pull field
+
+        Parameters
+        ----------
+        js: Dict[str :
+            
+        Any] :
+            
+        spec: Union[List :
+            
+        str] :
+            
+
+        Returns
+        -------
+
+        """
         result = js
         if isinstance(spec, list):
             for field in spec:
@@ -240,10 +299,24 @@
         return result
 
     def _pull_records(js: Dict[str, Any], spec: Union[List, str]) -> List:
-        """
-        Internal function to pull field for records, and similar to
+        """Internal function to pull field for records, and similar to
         _pull_field, but require to return list. And will raise error
         if has non iterable value.
+
+        Parameters
+        ----------
+        js: Dict[str :
+            
+        Any] :
+            
+        spec: Union[List :
+            
+        str] :
+            
+
+        Returns
+        -------
+
         """
         result = _pull_field(js, spec)
 
@@ -295,6 +368,23 @@
     meta_keys = [sep.join(val) for val in _meta]
 
     def _recursive_extract(data, path, seen_meta, level=0):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        path :
+            
+        seen_meta :
+            
+        level :
+             (Default value = 0)
+
+        Returns
+        -------
+
+        """
         if isinstance(data, dict):
             data = [data]
         if len(path) > 1:
