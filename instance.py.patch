# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jedi/inference/value/instance.py
+++ b/..//venv/lib/python3.8/site-packages/jedi/inference/value/instance.py
@@ -24,24 +24,41 @@
 
 
 class InstanceExecutedParamName(ParamName):
+    """ """
     def __init__(self, instance, function_value, tree_name):
         super(InstanceExecutedParamName, self).__init__(
             function_value, tree_name, arguments=None)
         self._instance = instance
 
     def infer(self):
+        """ """
         return ValueSet([self._instance])
 
     def matches_signature(self):
+        """ """
         return True
 
 
 class AnonymousMethodExecutionFilter(AnonymousFunctionExecutionFilter):
+    """ """
     def __init__(self, instance, *args, **kwargs):
         super(AnonymousMethodExecutionFilter, self).__init__(*args, **kwargs)
         self._instance = instance
 
     def _convert_param(self, param, name):
+        """
+
+        Parameters
+        ----------
+        param :
+            
+        name :
+            
+
+        Returns
+        -------
+
+        """
         if param.position_index == 0:
             if function_is_classmethod(self._function_value.tree_node):
                 return InstanceExecutedParamName(
@@ -59,11 +76,25 @@
 
 
 class AnonymousMethodExecutionContext(BaseFunctionExecutionContext):
+    """ """
     def __init__(self, instance, value):
         super(AnonymousMethodExecutionContext, self).__init__(value)
         self.instance = instance
 
     def get_filters(self, until_position=None, origin_scope=None):
+        """
+
+        Parameters
+        ----------
+        until_position :
+             (Default value = None)
+        origin_scope :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         yield AnonymousMethodExecutionFilter(
             self.instance, self, self._value,
             until_position=until_position,
@@ -71,6 +102,7 @@
         )
 
     def get_param_names(self):
+        """ """
         param_names = list(self._value.get_param_names())
         # set the self name
         param_names[0] = InstanceExecutedParamName(
@@ -82,12 +114,14 @@
 
 
 class MethodExecutionContext(FunctionExecutionContext):
+    """ """
     def __init__(self, instance, *args, **kwargs):
         super(MethodExecutionContext, self).__init__(*args, **kwargs)
         self.instance = instance
 
 
 class AbstractInstanceValue(Value):
+    """ """
     api_type = u'instance'
 
     def __init__(self, inference_state, parent_context, class_value):
@@ -97,40 +131,82 @@
         self.class_value = class_value
 
     def is_instance(self):
+        """ """
         return True
 
     def get_qualified_names(self):
+        """ """
         return self.class_value.get_qualified_names()
 
     def get_annotated_class_object(self):
+        """ """
         return self.class_value  # This is the default.
 
     def py__class__(self):
+        """ """
         return self.class_value
 
     def py__bool__(self):
+        """ """
         # Signalize that we don't know about the bool type.
         return None
 
     @abstractproperty
     def name(self):
+        """ """
         raise NotImplementedError
 
     def get_signatures(self):
+        """ """
         call_funcs = self.py__getattribute__('__call__').py__get__(self, self.class_value)
         return [s.bind(self) for s in call_funcs.get_signatures()]
 
     def get_function_slot_names(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         # Searches for Python functions in classes.
         return []
 
     def execute_function_slots(self, names, *inferred_args):
+        """
+
+        Parameters
+        ----------
+        names :
+            
+        *inferred_args :
+            
+
+        Returns
+        -------
+
+        """
         return ValueSet.from_sets(
             name.infer().execute_with_values(*inferred_args)
             for name in names
         )
 
     def get_type_hint(self, add_class_info=True):
+        """
+
+        Parameters
+        ----------
+        add_class_info :
+             (Default value = True)
+
+        Returns
+        -------
+
+        """
         return self.py__name__()
 
     def __repr__(self):
@@ -138,6 +214,7 @@
 
 
 class CompiledInstance(AbstractInstanceValue):
+    """ """
     # This is not really a compiled class, it's just an instance from a
     # compiled class.
     def __init__(self, inference_state, parent_context, class_value, arguments):
@@ -146,6 +223,19 @@
         self._arguments = arguments
 
     def get_filters(self, origin_scope=None, include_self_names=True):
+        """
+
+        Parameters
+        ----------
+        origin_scope :
+             (Default value = None)
+        include_self_names :
+             (Default value = True)
+
+        Returns
+        -------
+
+        """
         class_value = self.get_annotated_class_object()
         class_filters = class_value.get_filters(
             origin_scope=origin_scope,
@@ -156,15 +246,19 @@
 
     @property
     def name(self):
+        """ """
         return compiled.CompiledValueName(self, self.class_value.name.string_name)
 
     def is_stub(self):
+        """ """
         return False
 
 
 class _BaseTreeInstance(AbstractInstanceValue):
+    """ """
     @property
     def array_type(self):
+        """ """
         name = self.class_value.py__name__()
         if name in ['list', 'set', 'dict'] \
                 and self.parent_context.get_root_context().is_builtins_module():
@@ -173,9 +267,23 @@
 
     @property
     def name(self):
+        """ """
         return ValueName(self, self.class_value.name.tree_name)
 
     def get_filters(self, origin_scope=None, include_self_names=True):
+        """
+
+        Parameters
+        ----------
+        origin_scope :
+             (Default value = None)
+        include_self_names :
+             (Default value = True)
+
+        Returns
+        -------
+
+        """
         class_value = self.get_annotated_class_object()
         if include_self_names:
             for cls in class_value.py__mro__():
@@ -200,6 +308,19 @@
 
     @inference_state_method_cache()
     def create_instance_context(self, class_context, node):
+        """
+
+        Parameters
+        ----------
+        class_context :
+            
+        node :
+            
+
+        Returns
+        -------
+
+        """
         new = node
         while True:
             func_node = new
@@ -215,11 +336,19 @@
         return context.create_context(node)
 
     def py__getattribute__alternatives(self, string_name):
-        '''
-        Since nothing was inferred, now check the __getattr__ and
+        """Since nothing was inferred, now check the __getattr__ and
         __getattribute__ methods. Stubs don't need to be checked, because
         they don't contain any logic.
-        '''
+
+        Parameters
+        ----------
+        string_name :
+            
+
+        Returns
+        -------
+
+        """
         if self.is_stub():
             return NO_VALUES
 
@@ -239,6 +368,19 @@
         return self.execute_function_slots(names, name)
 
     def py__getitem__(self, index_value_set, contextualized_node):
+        """
+
+        Parameters
+        ----------
+        index_value_set :
+            
+        contextualized_node :
+            
+
+        Returns
+        -------
+
+        """
         names = self.get_function_slot_names(u'__getitem__')
         if not names:
             return super(_BaseTreeInstance, self).py__getitem__(
@@ -250,17 +392,40 @@
         return ValueSet.from_sets(name.infer().execute(args) for name in names)
 
     def py__iter__(self, contextualized_node=None):
+        """
+
+        Parameters
+        ----------
+        contextualized_node :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         iter_slot_names = self.get_function_slot_names(u'__iter__')
         if not iter_slot_names:
             return super(_BaseTreeInstance, self).py__iter__(contextualized_node)
 
         def iterate():
+            """ """
             for generator in self.execute_function_slots(iter_slot_names):
                 for lazy_value in generator.py__next__(contextualized_node):
                     yield lazy_value
         return iterate()
 
     def py__next__(self, contextualized_node=None):
+        """
+
+        Parameters
+        ----------
+        contextualized_node :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         # `__next__` logic.
         if self.inference_state.environment.version_info.major == 2:
             name = u'next'
@@ -275,6 +440,17 @@
             debug.warning('Instance has no __next__ function in %s.', self)
 
     def py__call__(self, arguments):
+        """
+
+        Parameters
+        ----------
+        arguments :
+            
+
+        Returns
+        -------
+
+        """
         names = self.get_function_slot_names(u'__call__')
         if not names:
             # Means the Instance is not callable.
@@ -283,8 +459,18 @@
         return ValueSet.from_sets(name.infer().execute(arguments) for name in names)
 
     def py__get__(self, instance, class_value):
-        """
-        obj may be None.
+        """obj may be None.
+
+        Parameters
+        ----------
+        instance :
+            
+        class_value :
+            
+
+        Returns
+        -------
+
         """
         # Arguments in __get__ descriptors are obj, class.
         # `method` is the new parent of the array, don't know if that's good.
@@ -302,6 +488,17 @@
             return ValueSet([self])
 
     def get_function_slot_names(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         # Python classes don't look at the dictionary of the instance when
         # looking up `__call__`. This is something that has to do with Python's
         # internal slot system (note: not __slots__, but C slots).
@@ -313,6 +510,7 @@
 
 
 class TreeInstance(_BaseTreeInstance):
+    """ """
     def __init__(self, inference_state, parent_context, class_value, arguments):
         # I don't think that dynamic append lookups should happen here. That
         # sounds more like something that should go to py__iter__.
@@ -330,6 +528,7 @@
     # to itself.
     @inference_state_method_cache(default=None)
     def _get_annotated_class_object(self):
+        """ """
         from jedi.inference.gradual.annotation import py__annotations__, \
             infer_type_vars_for_execution
 
@@ -355,9 +554,11 @@
         return None
 
     def get_annotated_class_object(self):
+        """ """
         return self._get_annotated_class_object() or self.class_value
 
     def get_key_values(self):
+        """ """
         values = NO_VALUES
         if self.array_type == 'dict':
             for i, (key, instance) in enumerate(self._arguments.unpack()):
@@ -376,6 +577,17 @@
         return values
 
     def py__simple_getitem__(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         if self.array_type == 'dict':
             # Logic for dict({'foo': bar}) and dict(foo=bar)
             # reversed, because:
@@ -404,10 +616,12 @@
 
 
 class AnonymousInstance(_BaseTreeInstance):
+    """ """
     _arguments = None
 
 
 class CompiledInstanceName(compiled.CompiledName):
+    """ """
     def __init__(self, inference_state, instance, klass, name):
         parent_value = klass.parent_context.get_value()
         assert parent_value is not None, "How? Please reproduce and report"
@@ -421,6 +635,7 @@
 
     @iterator_to_value_set
     def infer(self):
+        """ """
         for result_value in self._class_member_name.infer():
             if result_value.api_type == 'function':
                 yield CompiledBoundMethod(result_value)
@@ -429,17 +644,41 @@
 
 
 class CompiledInstanceClassFilter(AbstractFilter):
+    """ """
     def __init__(self, instance, f):
         self._instance = instance
         self._class_filter = f
 
     def get(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         return self._convert(self._class_filter.get(name))
 
     def values(self):
+        """ """
         return self._convert(self._class_filter.values())
 
     def _convert(self, names):
+        """
+
+        Parameters
+        ----------
+        names :
+            
+
+        Returns
+        -------
+
+        """
         klass = self._class_filter.compiled_value
         return [
             CompiledInstanceName(self._instance.inference_state, self._instance, klass, n)
@@ -448,30 +687,56 @@
 
 
 class BoundMethod(FunctionMixin, ValueWrapper):
+    """ """
     def __init__(self, instance, class_context, function):
         super(BoundMethod, self).__init__(function)
         self.instance = instance
         self._class_context = class_context
 
     def is_bound_method(self):
+        """ """
         return True
 
     @property
     def name(self):
+        """ """
         return FunctionNameInClass(
             self._class_context,
             super(BoundMethod, self).name
         )
 
     def py__class__(self):
+        """ """
         c, = values_from_qualified_names(self.inference_state, u'types', u'MethodType')
         return c
 
     def _get_arguments(self, arguments):
+        """
+
+        Parameters
+        ----------
+        arguments :
+            
+
+        Returns
+        -------
+
+        """
         assert arguments is not None
         return InstanceArguments(self.instance, arguments)
 
     def _as_context(self, arguments=None):
+        """
+
+        Parameters
+        ----------
+        arguments :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if arguments is None:
             return AnonymousMethodExecutionContext(self.instance, self)
 
@@ -479,6 +744,17 @@
         return MethodExecutionContext(self.instance, self, arguments)
 
     def py__call__(self, arguments):
+        """
+
+        Parameters
+        ----------
+        arguments :
+            
+
+        Returns
+        -------
+
+        """
         if isinstance(self._wrapped_value, OverloadedFunctionValue):
             return self._wrapped_value.py__call__(self._get_arguments(arguments))
 
@@ -486,12 +762,14 @@
         return function_execution.infer()
 
     def get_signature_functions(self):
+        """ """
         return [
             BoundMethod(self.instance, self._class_context, f)
             for f in self._wrapped_value.get_signature_functions()
         ]
 
     def get_signatures(self):
+        """ """
         return [sig.bind(self) for sig in super(BoundMethod, self).get_signatures()]
 
     def __repr__(self):
@@ -499,17 +777,18 @@
 
 
 class CompiledBoundMethod(ValueWrapper):
+    """ """
     def is_bound_method(self):
+        """ """
         return True
 
     def get_signatures(self):
+        """ """
         return [sig.bind(self) for sig in self._wrapped_value.get_signatures()]
 
 
 class SelfName(TreeNameDefinition):
-    """
-    This name calculates the parent_context lazily.
-    """
+    """This name calculates the parent_context lazily."""
     def __init__(self, instance, class_context, tree_name):
         self._instance = instance
         self.class_context = class_context
@@ -517,47 +796,82 @@
 
     @property
     def parent_context(self):
+        """ """
         return self._instance.create_instance_context(self.class_context, self.tree_name)
 
     def get_defining_qualified_value(self):
+        """ """
         return self._instance
 
 
 class LazyInstanceClassName(NameWrapper):
+    """ """
     def __init__(self, instance, class_member_name):
         super(LazyInstanceClassName, self).__init__(class_member_name)
         self._instance = instance
 
     @iterator_to_value_set
     def infer(self):
+        """ """
         for result_value in self._wrapped_name.infer():
             for c in result_value.py__get__(self._instance, self._instance.py__class__()):
                 yield c
 
     def get_signatures(self):
+        """ """
         return self.infer().get_signatures()
 
     def get_defining_qualified_value(self):
+        """ """
         return self._instance
 
 
 class InstanceClassFilter(AbstractFilter):
-    """
-    This filter is special in that it uses the class filter and wraps the
+    """This filter is special in that it uses the class filter and wraps the
     resulting names in LazyInstanceClassName. The idea is that the class name
     filtering can be very flexible and always be reflected in instances.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     def __init__(self, instance, class_filter):
         self._instance = instance
         self._class_filter = class_filter
 
     def get(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         return self._convert(self._class_filter.get(name))
 
     def values(self):
+        """ """
         return self._convert(self._class_filter.values())
 
     def _convert(self, names):
+        """
+
+        Parameters
+        ----------
+        names :
+            
+
+        Returns
+        -------
+
+        """
         return [
             LazyInstanceClassName(self._instance, n)
             for n in names
@@ -568,9 +882,7 @@
 
 
 class SelfAttributeFilter(ClassFilter):
-    """
-    This class basically filters all the use cases where `self.*` was assigned.
-    """
+    """This class basically filters all the use cases where `self.*` was assigned."""
     def __init__(self, instance, instance_class, node_context, origin_scope):
         super(SelfAttributeFilter, self).__init__(
             class_value=instance_class,
@@ -581,11 +893,33 @@
         self._instance = instance
 
     def _filter(self, names):
+        """
+
+        Parameters
+        ----------
+        names :
+            
+
+        Returns
+        -------
+
+        """
         start, end = self._parser_scope.start_pos, self._parser_scope.end_pos
         names = [n for n in names if start < n.start_pos < end]
         return self._filter_self_names(names)
 
     def _filter_self_names(self, names):
+        """
+
+        Parameters
+        ----------
+        names :
+            
+
+        Returns
+        -------
+
+        """
         for name in names:
             trailer = name.parent
             if trailer.type == 'trailer' \
@@ -598,6 +932,19 @@
                         yield name
 
     def _is_in_right_scope(self, self_name, name):
+        """
+
+        Parameters
+        ----------
+        self_name :
+            
+        name :
+            
+
+        Returns
+        -------
+
+        """
         self_context = self._node_context.create_context(self_name)
         names = self_context.goto(self_name, position=self_name.start_pos)
         return any(
@@ -608,18 +955,52 @@
         )
 
     def _convert_names(self, names):
+        """
+
+        Parameters
+        ----------
+        names :
+            
+
+        Returns
+        -------
+
+        """
         return [SelfName(self._instance, self._node_context, name) for name in names]
 
     def _check_flows(self, names):
+        """
+
+        Parameters
+        ----------
+        names :
+            
+
+        Returns
+        -------
+
+        """
         return names
 
 
 class InstanceArguments(TreeArgumentsWrapper):
+    """ """
     def __init__(self, instance, arguments):
         super(InstanceArguments, self).__init__(arguments)
         self.instance = instance
 
     def unpack(self, func=None):
+        """
+
+        Parameters
+        ----------
+        func :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         yield None, LazyKnownValue(self.instance)
         for values in self._wrapped_arguments.unpack(func):
             yield values
