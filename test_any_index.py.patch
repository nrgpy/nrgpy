# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/test_any_index.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/test_any_index.py
@@ -9,23 +9,67 @@
 
 
 def test_boolean_context_compat(index):
+    """
+
+    Parameters
+    ----------
+    index :
+        
+
+    Returns
+    -------
+
+    """
     with pytest.raises(ValueError, match="The truth value of a"):
         if index:
             pass
 
 
 def test_sort(index):
+    """
+
+    Parameters
+    ----------
+    index :
+        
+
+    Returns
+    -------
+
+    """
     msg = "cannot sort an Index object in-place, use sort_values instead"
     with pytest.raises(TypeError, match=msg):
         index.sort()
 
 
 def test_hash_error(index):
+    """
+
+    Parameters
+    ----------
+    index :
+        
+
+    Returns
+    -------
+
+    """
     with pytest.raises(TypeError, match=f"unhashable type: '{type(index).__name__}'"):
         hash(index)
 
 
 def test_mutability(index):
+    """
+
+    Parameters
+    ----------
+    index :
+        
+
+    Returns
+    -------
+
+    """
     if not len(index):
         return
     msg = "Index does not support mutable operations"
@@ -34,13 +78,36 @@
 
 
 def test_wrong_number_names(index):
+    """
+
+    Parameters
+    ----------
+    index :
+        
+
+    Returns
+    -------
+
+    """
     names = index.nlevels * ["apple", "banana", "carrot"]
     with pytest.raises(ValueError, match="^Length"):
         index.names = names
 
 
 class TestConversion:
+    """ """
     def test_to_series(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         # assert that we are creating a copy of the index
 
         ser = index.to_series()
@@ -49,6 +116,17 @@
         assert ser.name == index.name
 
     def test_to_series_with_arguments(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         # GH#18699
 
         # index kwarg
@@ -66,11 +144,34 @@
         assert ser.name != index.name
 
     def test_tolist_matches_list(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         assert index.tolist() == list(index)
 
 
 class TestRoundTrips:
+    """ """
     def test_pickle_roundtrip(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         result = tm.round_trip_pickle(index)
         tm.assert_index_equal(result, index)
         if result.nlevels > 1:
@@ -79,12 +180,36 @@
 
 
 class TestIndexing:
+    """ """
     def test_slice_keeps_name(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         assert index.name == index[1:].name
 
 
 class TestRendering:
+    """ """
     def test_str(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         # test the string repr
         index.name = "foo"
         assert "'foo'" in str(index)
