# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/utils/tests/test_tokenutil.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/utils/tests/test_tokenutil.py
@@ -7,6 +7,21 @@
 from IPython.utils.tokenutil import token_at_cursor, line_at_cursor
 
 def expect_token(expected, cell, cursor_pos):
+    """
+
+    Parameters
+    ----------
+    expected :
+        
+    cell :
+        
+    cursor_pos :
+        
+
+    Returns
+    -------
+
+    """
     token = token_at_cursor(cell, cursor_pos)
     offset = 0
     for line in cell.splitlines():
@@ -22,11 +37,13 @@
     )
 
 def test_simple(): 
+    """ """
     cell = "foo"
     for i in range(len(cell)):
         expect_token("foo", cell, i)
 
 def test_function():
+    """ """
     cell = "foo(a=5, b='10')"
     expected = 'foo'
     # up to `foo(|a=`
@@ -40,6 +57,7 @@
         expect_token("foo", cell, i)
 
 def test_multiline():
+    """ """
     cell = '\n'.join([
         'a = 5',
         'b = hello("string", there)'
@@ -54,6 +72,7 @@
         expect_token(expected, cell, i)
 
 def test_multiline_token():
+    """ """
     cell = '\n'.join([
         '"""\n\nxxxxxxxxxx\n\n"""',
         '5, """',
@@ -73,6 +92,7 @@
         expect_token(expected, cell, i)
 
 def test_nested_call():
+    """ """
     cell = "foo(bar(a=5), b=10)"
     expected = 'foo'
     start = cell.index('bar') + 1
@@ -88,6 +108,7 @@
         expect_token(expected, cell, i)
 
 def test_attrs():
+    """ """
     cell = "a = obj.attr.subattr"
     expected = 'obj'
     idx = cell.find('obj') + 1
@@ -103,6 +124,7 @@
         expect_token(expected, cell, i)
 
 def test_line_at_cursor():
+    """ """
     cell = ""
     (line, offset) = line_at_cursor(cell, cursor_pos=11)
     nt.assert_equal(line, "")
@@ -121,12 +143,17 @@
     nt.assert_equal(offset, 4)
 
 def test_multiline_statement():
-    cell = """a = (1,
+    """cell = """a = (1,
     3)
+    
+    int()
+    map()
 
-int()
-map()
-"""
+    Parameters
+    ----------
+
+    Returns
+    -------
     for c in range(16, 22):
         yield lambda cell, c: expect_token("int", cell, c), cell, c
     for c in range(22, 28):
