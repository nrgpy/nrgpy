# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpydoc/tests/test_docscrape.py
+++ b/..//venv/lib/python3.8/site-packages/numpydoc/tests/test_docscrape.py
@@ -166,20 +166,24 @@
 
 
 def test_signature():
+    """ """
     assert doc['Signature'].startswith('numpy.multivariate_normal(')
     assert doc['Signature'].endswith('spam=None)')
 
 
 def test_summary():
+    """ """
     assert doc['Summary'][0].startswith('Draw values')
     assert doc['Summary'][-1].endswith('covariance.')
 
 
 def test_extended_summary():
+    """ """
     assert doc['Extended Summary'][0].startswith('The multivariate normal')
 
 
 def test_parameters():
+    """ """
     assert len(doc['Parameters']) == 3
     names = [n for n, _, _ in doc['Parameters']]
     assert all(a == b for a, b in zip(names, ['mean', 'cov', 'shape']))
@@ -191,6 +195,7 @@
 
 
 def test_other_parameters():
+    """ """
     assert len(doc['Other Parameters']) == 1
     assert [n for n, _, _ in doc['Other Parameters']] == ['spam']
     arg, arg_type, desc = doc['Other Parameters'][0]
@@ -199,6 +204,7 @@
 
 
 def test_returns():
+    """ """
     assert len(doc['Returns']) == 3
     arg, arg_type, desc = doc['Returns'][0]
     assert arg == 'out'
@@ -219,6 +225,7 @@
 
 
 def test_yields():
+    """ """
     section = doc_yields['Yields']
     assert len(section) == 3
     truth = [('a', 'int', 'apples.'),
@@ -232,6 +239,7 @@
 
 
 def test_sent():
+    """ """
     section = doc_sent['Receives']
     assert len(section) == 2
     truth = [('b', 'int', 'bananas.'),
@@ -244,69 +252,84 @@
 
 
 def test_returnyield():
-    doc_text = """
-Test having returns and yields.
-
-Returns
--------
-int
-    The number of apples.
-
-Yields
-------
-a : int
-    The number of apples.
-b : int
-    The number of bananas.
-
-"""
+    """doc_text = """
+    Test having returns and yields.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
     assert_raises(ValueError, NumpyDocString, doc_text)
 
 
 def test_section_twice():
-    doc_text = """
-Test having a section Notes twice
-
-Notes
------
-See the next note for more information
-
-Notes
------
-That should break...
-"""
+    """doc_text = """
+    Test having a section Notes twice
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    Notes
+    -----
+    See the next note for more information
+    Notes
+    -----
+    That should break...
     assert_raises(ValueError, NumpyDocString, doc_text)
 
     # if we have a numpydoc object, we know where the error came from
     class Dummy:
-        """
-        Dummy class.
+        """Dummy class."""
+        def spam(self, a, b):
+            """Spam\n\nSpam spam.
+
+            Parameters
+            ----------
+            a :
+                
+            b :
+                
+
+            Returns
+            -------
+
+            """
+            pass
+
+        def ham(self, c, d):
+            """Cheese\n\nNo cheese.
+
+            Parameters
+            ----------
+            c :
+                
+            d :
+                
+
+            Returns
+            -------
+
+            """
+            pass
+
+    def dummy_func(arg):
+        """Dummy function.
+
+        Parameters
+        ----------
+        arg :
+            
+
+        Returns
+        -------
 
         Notes
         -----
         First note.
-
-        Notes
-        -----
-        Second note.
-
-        """
-        def spam(self, a, b):
-            """Spam\n\nSpam spam."""
-            pass
-
-        def ham(self, c, d):
-            """Cheese\n\nNo cheese."""
-            pass
-
-    def dummy_func(arg):
-        """
-        Dummy function.
-
-        Notes
-        -----
-        First note.
-
         Notes
         -----
         Second note.
@@ -328,28 +351,43 @@
 
 
 def test_notes():
+    """ """
     assert doc['Notes'][0].startswith('Instead')
     assert doc['Notes'][-1].endswith('definite.')
     assert len(doc['Notes']) == 17
 
 
 def test_references():
+    """ """
     assert doc['References'][0].startswith('..')
     assert doc['References'][-1].endswith('2001.')
 
 
 def test_examples():
+    """ """
     assert doc['Examples'][0].startswith('>>>')
     assert doc['Examples'][-1].endswith('True]')
 
 
 def test_index():
+    """ """
     assert doc['index']['default'] == 'random'
     assert len(doc['index']) == 2
     assert len(doc['index']['refguide']) == 2
 
 
 def _strip_blank_lines(s):
+    """
+
+    Parameters
+    ----------
+    s :
+        
+
+    Returns
+    -------
+
+    """
     "Remove leading, trailing and multiple blank lines"
     s = re.sub(r'^\s*\n', '', s)
     s = re.sub(r'\n\s*$', '', s)
@@ -358,6 +396,21 @@
 
 
 def line_by_line_compare(a, b, n_lines=None):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+    n_lines :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     a = textwrap.dedent(a)
     b = textwrap.dedent(b)
     a = [l.rstrip() for l in _strip_blank_lines(a).split('\n')][:n_lines]
@@ -368,6 +421,7 @@
 
 
 def test_str():
+    """ """
     # doc_txt has the order of Notes and See Also sections flipped.
     # This should be handled automatically, and so, one thing this test does
     # is to make sure that See Also precedes Notes in the output.
@@ -482,6 +536,7 @@
 
 
 def test_yield_str():
+    """ """
     line_by_line_compare(str(doc_yields),
 """Test generator
 
@@ -497,6 +552,7 @@
 
 
 def test_receives_str():
+    """ """
     line_by_line_compare(str(doc_sent),
 """Test generator
 
@@ -515,9 +571,15 @@
 
 
 def test_no_index_in_str():
-    assert "index" not in str(NumpyDocString("""Test idx
-
+    """assert "index" not in str(NumpyDocString("""Test idx
+    
     """))
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     assert "index" in str(NumpyDocString("""Test idx
 
@@ -531,6 +593,7 @@
     """))
 
 def test_sphinx_str():
+    """ """
     sphinx_doc = SphinxDocString(doc_txt)
     line_by_line_compare(str(sphinx_doc),
 """
@@ -651,6 +714,7 @@
 
 
 def test_sphinx_yields_str():
+    """ """
     sphinx_doc = SphinxDocString(doc_yields_txt)
     line_by_line_compare(str(sphinx_doc),
 """Test generator
@@ -681,6 +745,7 @@
 
 
 def test_parameters_without_extended_description():
+    """ """
     assert len(doc2['Parameters']) == 2
 
 
@@ -692,10 +757,26 @@
 
 
 def test_escape_stars():
+    """ """
     signature = str(doc3).split('\n')[0]
     assert signature == r'my_signature(\*params, \*\*kwds)'
 
     def my_func(a, b, **kwargs):
+        """
+
+        Parameters
+        ----------
+        a :
+            
+        b :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         pass
 
     fdoc = FunctionDoc(func=my_func)
@@ -709,6 +790,7 @@
 
 
 def test_empty_extended_summary():
+    """ """
     assert doc4['Extended Summary'] == []
 
 
@@ -729,6 +811,7 @@
 
 
 def test_raises():
+    """ """
     assert len(doc5['Raises']) == 1
     param = doc5['Raises'][0]
     assert param.name == ''
@@ -737,6 +820,7 @@
 
 
 def test_warns():
+    """ """
     assert len(doc5['Warns']) == 1
     param = doc5['Warns'][0]
     assert param.name == ''
@@ -745,6 +829,7 @@
 
 
 def test_see_also():
+    """ """
     doc6 = NumpyDocString(
     """
     z(x,theta)
@@ -800,6 +885,7 @@
 
 
 def test_see_also_parse_error():
+    """ """
     text = (
     """
     z(x,theta)
@@ -817,15 +903,9 @@
 
 
 def test_see_also_print():
+    """ """
     class Dummy:
-        """
-        See Also
-        --------
-        func_a, func_b
-        func_c : some relationship
-                 goes here
-        func_d
-        """
+        """ """
         pass
 
     s = str(FunctionDoc(Dummy, role='func'))
@@ -835,6 +915,7 @@
 
 
 def test_see_also_trailing_comma_warning():
+    """ """
     warnings.filterwarnings('error')
     with assert_warns(Warning, match='Unexpected comma or period after function list at index 43 of line .*'):
         NumpyDocString(
@@ -850,20 +931,32 @@
 
 
 def test_unknown_section():
-    doc_text = """
-Test having an unknown section
-
-Mope
-----
-This should be ignored and warned about
-"""
+    """doc_text = """
+    Test having an unknown section
+    
+    Mope
+    ----
+    This should be ignored and warned about
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     class BadSection:
         """Class with bad section.
-
+        
         Nope
         ----
         This class has a nope section.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         pass
 
@@ -890,19 +983,18 @@
 
 
 def test_empty_first_line():
+    """ """
     assert doc7['Summary'][0].startswith('Doc starts')
 
 
 def test_no_summary():
-    str(SphinxDocString("""
-    Parameters
-    ----------"""))
+    """str(SphinxDocString(""""""
 
 
 def test_unicode():
-    doc = SphinxDocString("""
+    """doc = SphinxDocString("""
     öäöäöäöäöåååå
-
+    
     öäöäöäööäååå
 
     Parameters
@@ -912,15 +1004,12 @@
 
     Returns
     -------
-    ååå : ööö
-        äää
-
-    """)
     assert isinstance(doc['Summary'][0], str)
     assert doc['Summary'][0] == 'öäöäöäöäöåååå'
 
 
 def test_plot_examples():
+    """ """
     cfg = dict(use_plots=True)
 
     doc = SphinxDocString("""
@@ -954,6 +1043,7 @@
 
 
 def test_use_blockquotes():
+    """ """
     cfg = dict(use_blockquotes=True)
     doc = SphinxDocString("""
     Parameters
@@ -994,17 +1084,39 @@
 
 
 def test_class_members():
+    """ """
 
     class Dummy:
-        """
-        Dummy class.
-
-        """
+        """Dummy class."""
         def spam(self, a, b):
-            """Spam\n\nSpam spam."""
+            """Spam\n\nSpam spam.
+
+            Parameters
+            ----------
+            a :
+                
+            b :
+                
+
+            Returns
+            -------
+
+            """
             pass
         def ham(self, c, d):
-            """Cheese\n\nNo cheese."""
+            """Cheese\n\nNo cheese.
+
+            Parameters
+            ----------
+            c :
+                
+            d :
+                
+
+            Returns
+            -------
+
+            """
             pass
         @property
         def spammity(self):
@@ -1035,16 +1147,37 @@
             assert 'Spammity index' in str(doc), str(doc)
 
     class SubDummy(Dummy):
-        """
-        Subclass of Dummy class.
-
-        """
+        """Subclass of Dummy class."""
         def ham(self, c, d):
-            """Cheese\n\nNo cheese.\nOverloaded Dummy.ham"""
+            """Cheese\n\nNo cheese.\nOverloaded Dummy.ham
+
+            Parameters
+            ----------
+            c :
+                
+            d :
+                
+
+            Returns
+            -------
+
+            """
             pass
 
         def bar(self, a, b):
-            """Bar\n\nNo bar"""
+            """Bar\n\nNo bar
+
+            Parameters
+            ----------
+            a :
+                
+            b :
+                
+
+            Returns
+            -------
+
+            """
             pass
 
     for cls in (ClassDoc, SphinxClassDoc):
@@ -1076,6 +1209,7 @@
 
 
 def test_duplicate_signature():
+    """ """
     # Duplicate function signatures occur e.g. in ufuncs, when the
     # automatic mechanism adds one, and a more detailed comes from the
     # docstring itself.
@@ -1132,6 +1266,7 @@
 
 
 def test_class_members_doc():
+    """ """
     doc = ClassDoc(None, class_doc_txt)
     line_by_line_compare(str(doc),
     """
@@ -1176,7 +1311,9 @@
 
 
 def test_class_members_doc_sphinx():
+    """ """
     class Foo:
+        """ """
         @property
         def an_attribute(self):
             """Test attribute"""
@@ -1184,16 +1321,26 @@
 
         @property
         def no_docstring(self):
+            """ """
             return None
 
         @property
         def no_docstring2(self):
+            """ """
             return None
 
         @property
         def multiline_sentence(self):
             """This is a
-            sentence. It spans multiple lines."""
+            sentence. It spans multiple lines.
+
+            Parameters
+            ----------
+
+            Returns
+            -------
+
+            """
             return None
 
         @property
@@ -1205,8 +1352,15 @@
         def no_period(self):
             """This does not have a period
             so we truncate its summary to the first linebreak
-
+            
             Apparently.
+
+            Parameters
+            ----------
+
+            Returns
+            -------
+
             """
             return None
 
@@ -1268,17 +1422,10 @@
 
 
 def test_class_attributes_as_member_list():
+    """ """
 
     class Foo:
-        """
-        Class docstring.
-
-        Attributes
-        ----------
-        an_attribute
-            Another description that is not used.
-
-        """
+        """Class docstring."""
         @property
         def an_attribute(self):
             """Test attribute"""
@@ -1305,6 +1452,7 @@
 
 
 def test_templated_sections():
+    """ """
     doc = SphinxClassDoc(None, class_doc_txt,
                          config={'template': jinja2.Template('{{examples}}\n{{parameters}}')})
     line_by_line_compare(str(doc),
@@ -1325,9 +1473,11 @@
 
 
 def test_nonstandard_property():
+    """ """
     # test discovery of a property that does not satisfy isinstace(.., property)
 
     class SpecialProperty:
+        """ """
 
         def __init__(self, axis=0, doc=""):
             self.axis = axis
@@ -1344,6 +1494,7 @@
             obj._set_axis(self.axis, value)
 
     class Dummy:
+        """ """
 
         attr = SpecialProperty(doc="test attribute")
 
@@ -1352,6 +1503,7 @@
 
 
 def test_args_and_kwargs():
+    """ """
     cfg = dict()
     doc = SphinxDocString("""
     Parameters
@@ -1377,6 +1529,7 @@
     """)
 
 def test_autoclass():
+    """ """
     cfg=dict(show_class_members=True,
              show_inherited_class_members=True)
     doc = SphinxClassDoc(str, '''
@@ -1454,11 +1607,13 @@
 
 
 def test_xref():
+    """ """
     xref_aliases = {
         'sequence': ':obj:`python:sequence`',
     }
 
     class Config():
+        """ """
         def __init__(self, a, b):
             self.numpydoc_xref_aliases = a
             self.numpydoc_xref_aliases_complete = b
