# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/io/excel/_util.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/io/excel/_util.py
@@ -6,14 +6,19 @@
 
 
 def register_writer(klass):
-    """
-    Add engine to the excel writer registry.io.excel.
-
+    """Add engine to the excel writer registry.io.excel.
+    
     You must use this method to integrate with ``to_excel``.
 
     Parameters
     ----------
-    klass : ExcelWriter
+    klass :
+        
+
+    Returns
+    -------
+
+    
     """
     if not callable(klass):
         raise ValueError("Can only register callables as engines")
@@ -22,8 +27,7 @@
 
 
 def _get_default_writer(ext):
-    """
-    Return the default writer for the given extension.
+    """Return the default writer for the given extension.
 
     Parameters
     ----------
@@ -32,8 +36,8 @@
 
     Returns
     -------
-    str
-        The default engine for the extension.
+
+    
     """
     _default_writers = {
         "xlsx": "openpyxl",
@@ -50,6 +54,17 @@
 
 
 def get_writer(engine_name):
+    """
+
+    Parameters
+    ----------
+    engine_name :
+        
+
+    Returns
+    -------
+
+    """
     try:
         return _writers[engine_name]
     except KeyError as err:
@@ -57,8 +72,7 @@
 
 
 def _excel2num(x):
-    """
-    Convert Excel column name like 'AB' to 0-based column index.
+    """Convert Excel column name like 'AB' to 0-based column index.
 
     Parameters
     ----------
@@ -70,10 +84,7 @@
     num : int
         The column index corresponding to the name.
 
-    Raises
-    ------
-    ValueError
-        Part of the Excel column name was invalid.
+    
     """
     index = 0
 
@@ -89,8 +100,7 @@
 
 
 def _range2cols(areas):
-    """
-    Convert comma separated list of column names and ranges to indices.
+    """Convert comma separated list of column names and ranges to indices.
 
     Parameters
     ----------
@@ -122,8 +132,7 @@
 
 
 def _maybe_convert_usecols(usecols):
-    """
-    Convert `usecols` into a compatible format for parsing in `parsers.py`.
+    """Convert `usecols` into a compatible format for parsing in `parsers.py`.
 
     Parameters
     ----------
@@ -132,8 +141,8 @@
 
     Returns
     -------
-    converted : object
-        The compatible format of `usecols`.
+
+    
     """
     if usecols is None:
         return usecols
@@ -151,6 +160,17 @@
 
 
 def _validate_freeze_panes(freeze_panes):
+    """
+
+    Parameters
+    ----------
+    freeze_panes :
+        
+
+    Returns
+    -------
+
+    """
     if freeze_panes is not None:
         if len(freeze_panes) == 2 and all(
             isinstance(item, int) for item in freeze_panes
@@ -168,6 +188,17 @@
 
 
 def _trim_excel_header(row):
+    """
+
+    Parameters
+    ----------
+    row :
+        
+
+    Returns
+    -------
+
+    """
     # trim header row so auto-index inference works
     # xlrd uses '' , openpyxl None
     while len(row) > 0 and (row[0] == "" or row[0] is None):
@@ -176,9 +207,8 @@
 
 
 def _fill_mi_header(row, control_row):
-    """
-    Forward fill blank entries in row but only inside the same parent index.
-
+    """Forward fill blank entries in row but only inside the same parent index.
+    
     Used for creating headers in Multiindex.
 
     Parameters
@@ -192,7 +222,8 @@
 
     Returns
     -------
-    Returns changed row and control_row
+
+    
     """
     last = row[0]
     for i in range(1, len(row)):
@@ -209,8 +240,7 @@
 
 
 def _pop_header_name(row, index_col):
-    """
-    Pop the header name for MultiIndex parsing.
+    """Pop the header name for MultiIndex parsing.
 
     Parameters
     ----------
@@ -221,10 +251,8 @@
 
     Returns
     -------
-    header_name : str
-        The extracted header name.
-    trimmed_row : list
-        The original data row with the header name removed.
+
+    
     """
     # Pop out header name and fill w/blank.
     i = index_col if not is_list_like(index_col) else max(index_col)
