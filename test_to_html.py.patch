# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/formats/test_to_html.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/formats/test_to_html.py
@@ -23,8 +23,7 @@
 
 
 def expected_html(datapath, name):
-    """
-    Read HTML file from formats data directory.
+    """Read HTML file from formats data directory.
 
     Parameters
     ----------
@@ -35,7 +34,8 @@
 
     Returns
     -------
-    str : contents of HTML file.
+
+    
     """
     filename = ".".join([name, "html"])
     filepath = datapath("io", "formats", "data", "html", filename)
@@ -46,7 +46,17 @@
 
 @pytest.fixture(params=["mixed", "empty"])
 def biggie_df_fixture(request):
-    """Fixture for a big mixed Dataframe and an empty Dataframe"""
+    """Fixture for a big mixed Dataframe and an empty Dataframe
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     if request.param == "mixed":
         df = DataFrame(
             {"A": np.random.randn(200), "B": tm.makeStringIndex(200)},
@@ -62,11 +72,33 @@
 
 @pytest.fixture(params=fmt._VALID_JUSTIFY_PARAMETERS)
 def justify(request):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     return request.param
 
 
 @pytest.mark.parametrize("col_space", [30, 50])
 def test_to_html_with_col_space(col_space):
+    """
+
+    Parameters
+    ----------
+    col_space :
+        
+
+    Returns
+    -------
+
+    """
     df = DataFrame(np.random.random(size=(1, 3)))
     # check that col_space affects HTML generation
     # and be very brittle about it.
@@ -79,6 +111,7 @@
 
 
 def test_to_html_with_column_specific_col_space_raises():
+    """ """
     df = DataFrame(np.random.random(size=(3, 3)), columns=["a", "b", "c"])
 
     msg = (
@@ -97,6 +130,7 @@
 
 
 def test_to_html_with_column_specific_col_space():
+    """ """
     df = DataFrame(np.random.random(size=(3, 3)), columns=["a", "b", "c"])
 
     result = df.to_html(col_space={"a": "2em", "b": 23})
@@ -113,6 +147,7 @@
 
 
 def test_to_html_with_empty_string_label():
+    """ """
     # GH 3547, to_html regards empty string labels as repeated labels
     data = {"c1": ["a", "b"], "c2": ["a", ""], "data": [1, 2]}
     df = DataFrame(data).set_index(["c1", "c2"])
@@ -128,12 +163,40 @@
     ],
 )
 def test_to_html_unicode(df, expected, datapath):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+    expected :
+        
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     expected = expected_html(datapath, expected)
     result = df.to_html()
     assert result == expected
 
 
 def test_to_html_encoding(float_frame, tmp_path):
+    """
+
+    Parameters
+    ----------
+    float_frame :
+        
+    tmp_path :
+        
+
+    Returns
+    -------
+
+    """
     # GH 28663
     path = tmp_path / "test.html"
     float_frame.to_html(path, encoding="gbk")
@@ -142,6 +205,17 @@
 
 
 def test_to_html_decimal(datapath):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     # GH 12031
     df = DataFrame({"A": [6.0, 3.1, 2.2]})
     result = df.to_html(decimal=",")
@@ -157,6 +231,23 @@
     ],
 )
 def test_to_html_escaped(kwargs, string, expected, datapath):
+    """
+
+    Parameters
+    ----------
+    kwargs :
+        
+    string :
+        
+    expected :
+        
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     a = "str<ing1 &amp;"
     b = "stri>ng2 &amp;"
 
@@ -168,6 +259,19 @@
 
 @pytest.mark.parametrize("index_is_named", [True, False])
 def test_to_html_multiindex_index_false(index_is_named, datapath):
+    """
+
+    Parameters
+    ----------
+    index_is_named :
+        
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     # GH 8452
     df = DataFrame(
         {"a": range(2), "b": range(3, 5), "c": range(5, 7), "d": range(3, 5)}
@@ -190,6 +294,21 @@
     ],
 )
 def test_to_html_multiindex_sparsify(multi_sparse, expected, datapath):
+    """
+
+    Parameters
+    ----------
+    multi_sparse :
+        
+    expected :
+        
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     index = MultiIndex.from_arrays([[0, 0, 1, 1], [0, 1, 0, 1]], names=["foo", None])
     df = DataFrame([[0, 1], [2, 3], [4, 5], [6, 7]], index=index)
     if expected.endswith("2"):
@@ -209,6 +328,21 @@
     ],
 )
 def test_to_html_multiindex_odd_even_truncate(max_rows, expected, datapath):
+    """
+
+    Parameters
+    ----------
+    max_rows :
+        
+    expected :
+        
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     # GH 14882 - Issue on truncation with odd length DataFrame
     index = MultiIndex.from_product(
         [[100, 200, 300], [10, 20, 30], [1, 2, 3, 4, 5, 6, 7]], names=["a", "b", "c"]
@@ -250,12 +384,30 @@
     ],
 )
 def test_to_html_formatters(df, formatters, expected, datapath):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+    formatters :
+        
+    expected :
+        
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     expected = expected_html(datapath, expected)
     result = df.to_html(formatters=formatters)
     assert result == expected
 
 
 def test_to_html_regression_GH6098():
+    """ """
     df = DataFrame(
         {
             "cl√©1": ["a", "a", "b", "b", "a"],
@@ -270,6 +422,17 @@
 
 
 def test_to_html_truncate(datapath):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     index = pd.date_range(start="20010101", freq="D", periods=20)
     df = DataFrame(index=index, columns=range(20))
     result = df.to_html(max_rows=8, max_cols=4)
@@ -279,6 +442,17 @@
 
 @pytest.mark.parametrize("size", [1, 5])
 def test_html_invalid_formatters_arg_raises(size):
+    """
+
+    Parameters
+    ----------
+    size :
+        
+
+    Returns
+    -------
+
+    """
     # issue-28469
     df = DataFrame(columns=["a", "b", "c"])
     msg = "Formatters length({}) should match DataFrame number of columns(3)"
@@ -287,6 +461,17 @@
 
 
 def test_to_html_truncate_formatter(datapath):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     # issue-25955
     data = [
         {"A": 1, "B": 2, "C": 3, "D": 4},
@@ -308,6 +493,21 @@
     [(True, "truncate_multi_index"), (False, "truncate_multi_index_sparse_off")],
 )
 def test_to_html_truncate_multi_index(sparsify, expected, datapath):
+    """
+
+    Parameters
+    ----------
+    sparsify :
+        
+    expected :
+        
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     arrays = [
         ["bar", "bar", "baz", "baz", "foo", "foo", "qux", "qux"],
         ["one", "two", "one", "two", "one", "two", "one", "two"],
@@ -328,6 +528,21 @@
     ],
 )
 def test_to_html_border(option, result, expected):
+    """
+
+    Parameters
+    ----------
+    option :
+        
+    result :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     df = DataFrame({"A": [1, 2]})
     if option is None:
         result = result(df)
@@ -340,6 +555,17 @@
 
 @pytest.mark.parametrize("biggie_df_fixture", ["mixed"], indirect=True)
 def test_to_html(biggie_df_fixture):
+    """
+
+    Parameters
+    ----------
+    biggie_df_fixture :
+        
+
+    Returns
+    -------
+
+    """
     # TODO: split this test
     df = biggie_df_fixture
     s = df.to_html()
@@ -360,11 +586,35 @@
 
 @pytest.mark.parametrize("biggie_df_fixture", ["empty"], indirect=True)
 def test_to_html_empty_dataframe(biggie_df_fixture):
+    """
+
+    Parameters
+    ----------
+    biggie_df_fixture :
+        
+
+    Returns
+    -------
+
+    """
     df = biggie_df_fixture
     df.to_html()
 
 
 def test_to_html_filename(biggie_df_fixture, tmpdir):
+    """
+
+    Parameters
+    ----------
+    biggie_df_fixture :
+        
+    tmpdir :
+        
+
+    Returns
+    -------
+
+    """
     df = biggie_df_fixture
     expected = df.to_html()
     path = tmpdir.join("test.html")
@@ -374,6 +624,7 @@
 
 
 def test_to_html_with_no_bold():
+    """ """
     df = DataFrame({"x": np.random.randn(5)})
     html = df.to_html(bold_rows=False)
     result = html[html.find("</thead>")]
@@ -381,6 +632,17 @@
 
 
 def test_to_html_columns_arg(float_frame):
+    """
+
+    Parameters
+    ----------
+    float_frame :
+        
+
+    Returns
+    -------
+
+    """
     result = float_frame.to_html(columns=["A"])
     assert "<th>B</th>" not in result
 
@@ -404,6 +666,23 @@
     ],
 )
 def test_to_html_multiindex(columns, justify, expected, datapath):
+    """
+
+    Parameters
+    ----------
+    columns :
+        
+    justify :
+        
+    expected :
+        
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     df = DataFrame([list("abcd"), list("efgh")], columns=columns)
     result = df.to_html(justify=justify)
     expected = expected_html(datapath, expected)
@@ -411,6 +690,19 @@
 
 
 def test_to_html_justify(justify, datapath):
+    """
+
+    Parameters
+    ----------
+    justify :
+        
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     df = DataFrame(
         {"A": [6, 30000, 2], "B": [1, 2, 70000], "C": [223442, 0, 1]},
         columns=["A", "B", "C"],
@@ -424,6 +716,17 @@
     "justify", ["super-right", "small-left", "noinherit", "tiny", "pandas"]
 )
 def test_to_html_invalid_justify(justify):
+    """
+
+    Parameters
+    ----------
+    justify :
+        
+
+    Returns
+    -------
+
+    """
     # GH 17527
     df = DataFrame()
     msg = "Invalid value for justify parameter"
@@ -433,6 +736,17 @@
 
 
 def test_to_html_index(datapath):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     # TODO: split this test
     index = ["foo", "bar", "baz"]
     df = DataFrame(
@@ -473,6 +787,19 @@
 
 @pytest.mark.parametrize("classes", ["sortable draggable", ["sortable", "draggable"]])
 def test_to_html_with_classes(classes, datapath):
+    """
+
+    Parameters
+    ----------
+    classes :
+        
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     df = DataFrame()
     expected = expected_html(datapath, "with_classes")
     result = df.to_html(classes=classes)
@@ -480,6 +807,17 @@
 
 
 def test_to_html_no_index_max_rows(datapath):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     # GH 14998
     df = DataFrame({"A": [1, 2, 3, 4]})
     result = df.to_html(index=False, max_rows=1)
@@ -488,6 +826,17 @@
 
 
 def test_to_html_multiindex_max_cols(datapath):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     # GH 6131
     index = MultiIndex(
         levels=[["ba", "bb", "bc"], ["ca", "cb", "cc"]],
@@ -509,6 +858,17 @@
 
 
 def test_to_html_multi_indexes_index_false(datapath):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     # GH 22579
     df = DataFrame(
         {"a": range(10), "b": range(10, 20), "c": range(10, 20), "d": range(10, 20)}
@@ -554,6 +914,31 @@
 def test_to_html_basic_alignment(
     datapath, row_index, row_type, column_index, column_type, index, header, index_names
 ):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+    row_index :
+        
+    row_type :
+        
+    column_index :
+        
+    column_type :
+        
+    index :
+        
+    header :
+        
+    index_names :
+        
+
+    Returns
+    -------
+
+    """
     # GH 22747, GH 22579
     df = DataFrame(np.zeros((2, 2), dtype=int), index=row_index, columns=column_index)
     result = df.to_html(index=index, header=header, index_names=index_names)
@@ -613,6 +998,31 @@
 def test_to_html_alignment_with_truncation(
     datapath, row_index, row_type, column_index, column_type, index, header, index_names
 ):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+    row_index :
+        
+    row_type :
+        
+    column_index :
+        
+    column_type :
+        
+    index :
+        
+    header :
+        
+    index_names :
+        
+
+    Returns
+    -------
+
+    """
     # GH 22747, GH 22579
     df = DataFrame(np.arange(64).reshape(8, 8), index=row_index, columns=column_index)
     result = df.to_html(
@@ -636,6 +1046,19 @@
 
 @pytest.mark.parametrize("index", [False, 0])
 def test_to_html_truncation_index_false_max_rows(datapath, index):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+    index :
+        
+
+    Returns
+    -------
+
+    """
     # GH 15019
     data = [
         [1.764052, 0.400157],
@@ -658,6 +1081,23 @@
 def test_to_html_truncation_index_false_max_cols(
     datapath, index, col_index_named, expected_output
 ):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+    index :
+        
+    col_index_named :
+        
+    expected_output :
+        
+
+    Returns
+    -------
+
+    """
     # GH 22783
     data = [
         [1.764052, 0.400157, 0.978738, 2.240893, 1.867558],
@@ -673,6 +1113,17 @@
 
 @pytest.mark.parametrize("notebook", [True, False])
 def test_to_html_notebook_has_style(notebook):
+    """
+
+    Parameters
+    ----------
+    notebook :
+        
+
+    Returns
+    -------
+
+    """
     df = DataFrame({"A": [1, 2, 3]})
     result = df.to_html(notebook=notebook)
 
@@ -687,6 +1138,7 @@
 
 
 def test_to_html_with_index_names_false():
+    """ """
     # GH 16493
     df = DataFrame({"A": [1, 2]}, index=Index(["a", "b"], name="myindexname"))
     result = df.to_html(index_names=False)
@@ -694,6 +1146,7 @@
 
 
 def test_to_html_with_id():
+    """ """
     # GH 8496
     df = DataFrame({"A": [1, 2]}, index=Index(["a", "b"], name="myindexname"))
     result = df.to_html(index_names=False, table_id="TEST_ID")
@@ -708,6 +1161,23 @@
     ],
 )
 def test_to_html_float_format_no_fixed_width(value, float_format, expected, datapath):
+    """
+
+    Parameters
+    ----------
+    value :
+        
+    float_format :
+        
+    expected :
+        
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     # GH 21625, GH 22270
     df = DataFrame({"x": [value]})
     expected = expected_html(datapath, expected)
@@ -720,6 +1190,21 @@
     [(True, "render_links_true"), (False, "render_links_false")],
 )
 def test_to_html_render_links(render_links, expected, datapath):
+    """
+
+    Parameters
+    ----------
+    render_links :
+        
+    expected :
+        
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     # GH 2679
     data = [
         [0, "https://pandas.pydata.org/?q1=a&q2=b", "pydata.org"],
@@ -741,6 +1226,21 @@
 )
 @pytest.mark.parametrize("max_colwidth", [10, 20, 50, 100])
 def test_ignore_display_max_colwidth(method, expected, max_colwidth):
+    """
+
+    Parameters
+    ----------
+    method :
+        
+    expected :
+        
+    max_colwidth :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-17004
     df = DataFrame([lorem_ipsum])
     with pd.option_context("display.max_colwidth", max_colwidth):
@@ -751,6 +1251,17 @@
 
 @pytest.mark.parametrize("classes", [True, 0])
 def test_to_html_invalid_classes_type(classes):
+    """
+
+    Parameters
+    ----------
+    classes :
+        
+
+    Returns
+    -------
+
+    """
     # GH 25608
     df = DataFrame()
     msg = "classes must be a string, list, or tuple"
@@ -760,6 +1271,7 @@
 
 
 def test_to_html_round_column_headers():
+    """ """
     # GH 17280
     df = DataFrame([1], columns=[0.55555])
     with pd.option_context("display.precision", 3):
@@ -771,6 +1283,17 @@
 
 @pytest.mark.parametrize("unit", ["100px", "10%", "5em", 150])
 def test_to_html_with_col_space_units(unit):
+    """
+
+    Parameters
+    ----------
+    unit :
+        
+
+    Returns
+    -------
+
+    """
     # GH 25941
     df = DataFrame(np.random.random(size=(1, 3)))
     result = df.to_html(col_space=unit)
@@ -784,6 +1307,17 @@
 
 
 def test_html_repr_min_rows_default(datapath):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     # gh-27991
 
     # default setting no truncation even if above min_rows
@@ -813,6 +1347,23 @@
     ],
 )
 def test_html_repr_min_rows(datapath, max_rows, min_rows, expected):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+    max_rows :
+        
+    min_rows :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     # gh-27991
 
     df = pd.DataFrame({"a": range(61)})
