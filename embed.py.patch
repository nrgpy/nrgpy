# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/terminal/embed.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/terminal/embed.py
@@ -28,6 +28,7 @@
 # This is an additional magic that is exposed in embedded shells.
 @magics_class
 class EmbeddedMagics(Magics):
+    """ """
 
     @line_magic
     @magic_arguments.magic_arguments()
@@ -39,27 +40,35 @@
                               help='Do not ask confirmation')
     def kill_embedded(self, parameter_s=''):
         """%kill_embedded : deactivate for good the current embedded IPython
-
+        
         This function (after asking for confirmation) sets an internal flag so
         that an embedded IPython will never activate again for the given call
         location. This is useful to permanently disable a shell that is being
         called inside a loop: once you've figured out what you needed from it,
         you may then kill it and the program will then continue to run without
         the interactive shell interfering again.
-
-
+        
+        
         Kill Instance Option:
-
+        
             If for some reasons you need to kill the location where the instance
             is created and not called, for example if you create a single
             instance in one place and debug in many locations, you can use the
             ``--instance`` option to kill this specific instance. Like for the
             ``call location`` killing an "instance" should work even if it is
             recreated within a loop.
-
+        
         .. note::
-
+        
             This was the default behavior before IPython 5.2
+
+        Parameters
+        ----------
+        parameter_s :
+             (Default value = '')
+
+        Returns
+        -------
 
         """
 
@@ -96,10 +105,22 @@
     @line_magic
     def exit_raise(self, parameter_s=''):
         """%exit_raise Make the current embedded kernel exit and raise and exception.
-
+        
         This function sets an internal flag so that an embedded IPython will
-        raise a `IPython.terminal.embed.KillEmbedded` Exception on exit, and then exit the current I. This is
-        useful to permanently exit a loop that create IPython embed instance.
+
+        Parameters
+        ----------
+        parameter_s :
+             (Default value = '')
+
+        Returns
+        -------
+
+        Raises
+        ------
+        useful
+            to permanently exit a loop that create IPython embed instance
+
         """
 
         self.shell.should_raise = True
@@ -108,6 +129,7 @@
 
 
 class InteractiveShellEmbed(TerminalInteractiveShell):
+    """ """
 
     dummy_mode = Bool(False)
     exit_msg = Unicode('')
@@ -127,6 +149,7 @@
 
     @property
     def embedded_active(self):
+        """ """
         return (self._call_location_id not in InteractiveShellEmbed._inactive_locations)\
             and (self._init_location_id not in InteractiveShellEmbed._inactive_locations)
 
@@ -136,6 +159,17 @@
 
     @embedded_active.setter
     def embedded_active(self, value):
+        """
+
+        Parameters
+        ----------
+        value :
+            
+
+        Returns
+        -------
+
+        """
         if value:
             InteractiveShellEmbed._inactive_locations.discard(
                 self._call_location_id)
@@ -165,12 +199,11 @@
                                              call_pdb=self.pdb)
 
     def init_sys_modules(self):
-        """
-        Explicitly overwrite :mod:`IPython.core.interactiveshell` to do nothing.
-        """
+        """Explicitly overwrite :mod:`IPython.core.interactiveshell` to do nothing."""
         pass
 
     def init_magics(self):
+        """ """
         super(InteractiveShellEmbed, self).init_magics()
         self.register_magics(EmbeddedMagics)
 
@@ -243,25 +276,23 @@
 
         Parameters
         ----------
-
-        local_ns, module
-          Working local namespace (a dict) and module (a module or similar
-          object). If given as None, they are automatically taken from the scope
-          where the shell was called, so that program variables become visible.
-
-        stack_depth : int
-          How many levels in the stack to go to looking for namespaces (when
-          local_ns or module is None). This allows an intermediate caller to
-          make sure that this function gets the namespace from the intended
-          level in the stack. By default (0) it will get its locals and globals
-          from the immediate caller.
-
-        compile_flags
-          A bit field identifying the __future__ features
-          that are enabled, as passed to the builtin :func:`compile` function.
-          If given as None, they are automatically taken from the scope where
-          the shell was called.
-
+        local_ns :
+             (Default value = None)
+        module :
+             (Default value = None)
+        stack_depth :
+             (Default value = 0)
+        display_banner :
+             (Default value = None)
+        global_ns :
+             (Default value = None)
+        compile_flags :
+             (Default value = None)
+
+        Returns
+        -------
+
+        
         """
         
         if (global_ns is not None) and (module is None):
@@ -336,18 +367,18 @@
 
 def embed(**kwargs):
     """Call this to embed IPython at the current point in your program.
-
+    
     The first invocation of this will create an :class:`InteractiveShellEmbed`
     instance and then call it.  Consecutive calls just call the already
     created instance.
-
+    
     If you don't want the kernel to initialize the namespace
     from the scope of the surrounding function,
     and/or you want to load full IPython configuration,
     you probably want `IPython.start_ipython()` instead.
-
+    
     Here is a simple example::
-
+    
         from IPython import embed
         a = 10
         b = 20
@@ -355,9 +386,18 @@
         c = 30
         d = 40
         embed()
-
+    
     Full customization can be done by passing a :class:`Config` in as the
     config argument.
+
+    Parameters
+    ----------
+    **kwargs :
+        
+
+    Returns
+    -------
+
     """
     config = kwargs.get('config')
     header = kwargs.pop('header', u'')
