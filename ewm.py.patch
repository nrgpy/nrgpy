# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/window/ewm.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/window/ewm.py
@@ -35,6 +35,23 @@
     halflife: Optional[float],
     alpha: Optional[float],
 ) -> float:
+    """
+
+    Parameters
+    ----------
+    comass: Optional[float] :
+        
+    span: Optional[float] :
+        
+    halflife: Optional[float] :
+        
+    alpha: Optional[float] :
+        
+
+    Returns
+    -------
+
+    """
     valid_count = common.count_not_none(comass, span, halflife, alpha)
     if valid_count > 1:
         raise ValueError("comass, span, halflife, and alpha are mutually exclusive")
@@ -63,11 +80,11 @@
 
 
 class ExponentialMovingWindow(_Rolling):
-    r"""
+    """r"""
     Provide exponential weighted (EW) functions.
-
+    
     Available EW functions: ``mean()``, ``var()``, ``std()``, ``corr()``, ``cov()``.
-
+    
     Exactly one parameter: ``com``, ``span``, ``halflife``, or ``alpha`` must be
     provided.
 
@@ -83,13 +100,10 @@
         Specify decay in terms of half-life,
         :math:`\alpha = 1 - \exp\left(-\ln(2) / halflife\right)`, for
         :math:`halflife > 0`.
-
         If ``times`` is specified, the time unit (str or timedelta) over which an
         observation decays to half its value. Only applicable to ``mean()``
         and halflife value will not apply to the other functions.
-
         .. versionadded:: 1.1.0
-
     alpha : float, optional
         Specify smoothing factor :math:`\alpha` directly,
         :math:`0 < \alpha \leq 1`.
@@ -99,52 +113,41 @@
     adjust : bool, default True
         Divide by decaying adjustment factor in beginning periods to account
         for imbalance in relative weightings (viewing EWMA as a moving average).
-
         - When ``adjust=True`` (default), the EW function is calculated using weights
-          :math:`w_i = (1 - \alpha)^i`. For example, the EW moving average of the series
-          [:math:`x_0, x_1, ..., x_t`] would be:
-
+        :math:`w_i = (1 - \alpha)^i`. For example, the EW moving average of the series
+        [:math:`x_0, x_1, ..., x_t`] would be:
         .. math::
-            y_t = \frac{x_t + (1 - \alpha)x_{t-1} + (1 - \alpha)^2 x_{t-2} + ... + (1 -
-            \alpha)^t x_0}{1 + (1 - \alpha) + (1 - \alpha)^2 + ... + (1 - \alpha)^t}
-
+        y_t = \frac{x_t + (1 - \alpha)x_{t-1} + (1 - \alpha)^2 x_{t-2} + ... + (1 -
+        \alpha)^t x_0}{1 + (1 - \alpha) + (1 - \alpha)^2 + ... + (1 - \alpha)^t}
         - When ``adjust=False``, the exponentially weighted function is calculated
-          recursively:
-
+        recursively:
         .. math::
-            \begin{split}
-                y_0 &= x_0\\
-                y_t &= (1 - \alpha) y_{t-1} + \alpha x_t,
-            \end{split}
+        \begin{split}
+        y_0 &= x_0\\
+        y_t &= (1 - \alpha) y_{t-1} + \alpha x_t,
+        \end{split}
     ignore_na : bool, default False
         Ignore missing values when calculating weights; specify ``True`` to reproduce
         pre-0.15.0 behavior.
-
         - When ``ignore_na=False`` (default), weights are based on absolute positions.
-          For example, the weights of :math:`x_0` and :math:`x_2` used in calculating
-          the final weighted average of [:math:`x_0`, None, :math:`x_2`] are
-          :math:`(1-\alpha)^2` and :math:`1` if ``adjust=True``, and
-          :math:`(1-\alpha)^2` and :math:`\alpha` if ``adjust=False``.
-
+        For example, the weights of :math:`x_0` and :math:`x_2` used in calculating
+        the final weighted average of [:math:`x_0`, None, :math:`x_2`] are
+        :math:`(1-\alpha)^2` and :math:`1` if ``adjust=True``, and
+        :math:`(1-\alpha)^2` and :math:`\alpha` if ``adjust=False``.
         - When ``ignore_na=True`` (reproducing pre-0.15.0 behavior), weights are based
-          on relative positions. For example, the weights of :math:`x_0` and :math:`x_2`
-          used in calculating the final weighted average of
-          [:math:`x_0`, None, :math:`x_2`] are :math:`1-\alpha` and :math:`1` if
-          ``adjust=True``, and :math:`1-\alpha` and :math:`\alpha` if ``adjust=False``.
+        on relative positions. For example, the weights of :math:`x_0` and :math:`x_2`
+        used in calculating the final weighted average of
+        [:math:`x_0`, None, :math:`x_2`] are :math:`1-\alpha` and :math:`1` if
+        ``adjust=True``, and :math:`1-\alpha` and :math:`\alpha` if ``adjust=False``.
     axis : {0, 1}, default 0
         The axis to use. The value 0 identifies the rows, and 1
         identifies the columns.
     times : str, np.ndarray, Series, default None
-
         .. versionadded:: 1.1.0
-
         Times corresponding to the observations. Must be monotonically increasing and
         ``datetime64[ns]`` dtype.
-
         If str, the name of the column in the DataFrame representing the times.
-
         If 1-D array like, a sequence with the same shape as the observations.
-
         Only applicable to ``mean()``.
 
     Returns
@@ -156,15 +159,16 @@
     --------
     rolling : Provides rolling window calculations.
     expanding : Provides expanding transformations.
-
     Notes
     -----
-
+    
     More details can be found at:
     :ref:`Exponentially weighted windows <stats.moments.exponentially_weighted>`.
-
     Examples
     --------
+    
+    
+    Specifying ``times`` with a timedelta ``halflife`` when computing mean.
     >>> df = pd.DataFrame({'B': [0, 1, 2, np.nan, 4]})
     >>> df
          B
@@ -173,7 +177,7 @@
     2  2.0
     3  NaN
     4  4.0
-
+    
     >>> df.ewm(com=0.5).mean()
               B
     0  0.000000
@@ -181,9 +185,7 @@
     2  1.615385
     3  1.615385
     4  3.670213
-
-    Specifying ``times`` with a timedelta ``halflife`` when computing mean.
-
+    
     >>> times = ['2020-01-01', '2020-01-03', '2020-01-10', '2020-01-15', '2020-01-17']
     >>> df.ewm(halflife='4 days', times=pd.DatetimeIndex(times)).mean()
               B
@@ -192,7 +194,6 @@
     2  1.523889
     3  1.523889
     4  3.233686
-    """
 
     _attributes = ["com", "min_periods", "adjust", "ignore_na", "axis"]
 
@@ -247,6 +248,7 @@
 
     @property
     def _constructor(self):
+        """ """
         return ExponentialMovingWindow
 
     _agg_see_also_doc = dedent(
@@ -285,22 +287,38 @@
         axis="",
     )
     def aggregate(self, func, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        func :
+            
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         return super().aggregate(func, *args, **kwargs)
 
     agg = aggregate
 
     def _apply(self, func):
-        """
-        Rolling statistical measure using supplied function. Designed to be
+        """Rolling statistical measure using supplied function. Designed to be
         used with passed-in Cython array-based functions.
 
         Parameters
         ----------
         func : str/callable to apply
-
-        Returns
-        -------
-        y : same type as input argument
+            
+
+        Returns
+        -------
+
+        
         """
         blocks, obj = self._create_blocks(self._selected_obj)
         block_list = list(blocks)
@@ -330,13 +348,19 @@
     @Substitution(name="ewm", func_name="mean")
     @Appender(_doc_template)
     def mean(self, *args, **kwargs):
-        """
-        Exponential weighted moving average.
-
-        Parameters
-        ----------
-        *args, **kwargs
-            Arguments and keyword arguments to be passed into func.
+        """Exponential weighted moving average.
+
+        Parameters
+        ----------
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        
         """
         nv.validate_window_func("mean", args, kwargs)
         if self.times is not None:
@@ -362,8 +386,20 @@
     @Appender(_doc_template)
     @Appender(_bias_template)
     def std(self, bias: bool = False, *args, **kwargs):
-        """
-        Exponential weighted moving stddev.
+        """Exponential weighted moving stddev.
+
+        Parameters
+        ----------
+        bias: bool :
+             (Default value = False)
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
         """
         nv.validate_window_func("std", args, kwargs)
         return zsqrt(self.var(bias=bias, **kwargs))
@@ -374,12 +410,35 @@
     @Appender(_doc_template)
     @Appender(_bias_template)
     def var(self, bias: bool = False, *args, **kwargs):
-        """
-        Exponential weighted moving variance.
+        """Exponential weighted moving variance.
+
+        Parameters
+        ----------
+        bias: bool :
+             (Default value = False)
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
         """
         nv.validate_window_func("var", args, kwargs)
 
         def f(arg):
+            """
+
+            Parameters
+            ----------
+            arg :
+                
+
+            Returns
+            -------
+
+            """
             return window_aggregations.ewmcov(
                 arg, arg, self.com, self.adjust, self.ignore_na, self.min_periods, bias,
             )
@@ -395,25 +454,25 @@
         bias: bool = False,
         **kwargs,
     ):
-        """
-        Exponential weighted sample covariance.
-
-        Parameters
-        ----------
-        other : Series, DataFrame, or ndarray, optional
-            If not supplied then will default to self and produce pairwise
-            output.
-        pairwise : bool, default None
-            If False then only matching columns between self and other will be
-            used and the output will be a DataFrame.
-            If True then all pairwise combinations will be calculated and the
-            output will be a MultiIndex DataFrame in the case of DataFrame
-            inputs. In the case of missing elements, only complete pairwise
-            observations will be used.
-        bias : bool, default False
-            Use a standard estimation bias correction.
-        **kwargs
-           Keyword arguments to be passed into func.
+        """Exponential weighted sample covariance.
+
+        Parameters
+        ----------
+        other: Optional[Union[np.ndarray :
+            
+        FrameOrSeries]] :
+             (Default value = None)
+        pairwise: Optional[bool] :
+             (Default value = None)
+        bias: bool :
+             (Default value = False)
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        
         """
         if other is None:
             other = self._selected_obj
@@ -422,6 +481,19 @@
         other = self._shallow_copy(other)
 
         def _get_cov(X, Y):
+            """
+
+            Parameters
+            ----------
+            X :
+                
+            Y :
+                
+
+            Returns
+            -------
+
+            """
             X = self._shallow_copy(X)
             Y = self._shallow_copy(Y)
             cov = window_aggregations.ewmcov(
@@ -447,23 +519,23 @@
         pairwise: Optional[bool] = None,
         **kwargs,
     ):
-        """
-        Exponential weighted sample correlation.
-
-        Parameters
-        ----------
-        other : Series, DataFrame, or ndarray, optional
-            If not supplied then will default to self and produce pairwise
-            output.
-        pairwise : bool, default None
-            If False then only matching columns between self and other will be
-            used and the output will be a DataFrame.
-            If True then all pairwise combinations will be calculated and the
-            output will be a MultiIndex DataFrame in the case of DataFrame
-            inputs. In the case of missing elements, only complete pairwise
-            observations will be used.
-        **kwargs
-           Keyword arguments to be passed into func.
+        """Exponential weighted sample correlation.
+
+        Parameters
+        ----------
+        other: Optional[Union[np.ndarray :
+            
+        FrameOrSeries]] :
+             (Default value = None)
+        pairwise: Optional[bool] :
+             (Default value = None)
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        
         """
         if other is None:
             other = self._selected_obj
@@ -472,10 +544,36 @@
         other = self._shallow_copy(other)
 
         def _get_corr(X, Y):
+            """
+
+            Parameters
+            ----------
+            X :
+                
+            Y :
+                
+
+            Returns
+            -------
+
+            """
             X = self._shallow_copy(X)
             Y = self._shallow_copy(Y)
 
             def _cov(x, y):
+                """
+
+                Parameters
+                ----------
+                x :
+                    
+                y :
+                    
+
+                Returns
+                -------
+
+                """
                 return window_aggregations.ewmcov(
                     x, y, self.com, self.adjust, self.ignore_na, self.min_periods, 1,
                 )
