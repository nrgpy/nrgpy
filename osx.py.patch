# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/terminal/pt_inputhooks/osx.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/terminal/pt_inputhooks/osx.py
@@ -21,17 +21,47 @@
 msg = objc.objc_msgSend
 
 def _utf8(s):
-    """ensure utf8 bytes"""
+    """ensure utf8 bytes
+
+    Parameters
+    ----------
+    s :
+        
+
+    Returns
+    -------
+
+    """
     if not isinstance(s, bytes):
         s = s.encode('utf8')
     return s
 
 def n(name):
-    """create a selector name (for ObjC methods)"""
+    """create a selector name (for ObjC methods)
+
+    Parameters
+    ----------
+    name :
+        
+
+    Returns
+    -------
+
+    """
     return objc.sel_registerName(_utf8(name))
 
 def C(classname):
-    """get an ObjC Class by name"""
+    """get an ObjC Class by name
+
+    Parameters
+    ----------
+    classname :
+        
+
+    Returns
+    -------
+
+    """
     return objc.objc_getClass(_utf8(classname))
 
 # end obj-c boilerplate from appnope
@@ -76,12 +106,22 @@
 
 
 def _NSApp():
-    """Return the global NSApplication instance (NSApp)"""
+    """ """
     return msg(C('NSApplication'), n('sharedApplication'))
 
 
 def _wake(NSApp):
-    """Wake the Application"""
+    """Wake the Application
+
+    Parameters
+    ----------
+    NSApp :
+        
+
+    Returns
+    -------
+
+    """
     event = msg(C('NSEvent'),
         n('otherEventWithType:location:modifierFlags:'
           'timestamp:windowNumber:context:subtype:data1:data2:'),
@@ -101,7 +141,21 @@
 _triggered = Event()
 
 def _input_callback(fdref, flags, info):
-    """Callback to fire when there's input to be read"""
+    """Callback to fire when there's input to be read
+
+    Parameters
+    ----------
+    fdref :
+        
+    flags :
+        
+    info :
+        
+
+    Returns
+    -------
+
+    """
     _triggered.set()
     CFFileDescriptorInvalidate(fdref)
     CFRelease(fdref)
@@ -114,7 +168,17 @@
 
 
 def _stop_on_read(fd):
-    """Register callback to stop eventloop when there's data on fd"""
+    """Register callback to stop eventloop when there's data on fd
+
+    Parameters
+    ----------
+    fd :
+        
+
+    Returns
+    -------
+
+    """
     _triggered.clear()
     fdref = CFFileDescriptorCreate(None, fd, False, _c_input_callback, None)
     CFFileDescriptorEnableCallBacks(fdref, kCFFileDescriptorReadCallBack)
@@ -125,7 +189,17 @@
 
 
 def inputhook(context):
-    """Inputhook for Cocoa (NSApp)"""
+    """Inputhook for Cocoa (NSApp)
+
+    Parameters
+    ----------
+    context :
+        
+
+    Returns
+    -------
+
+    """
     NSApp = _NSApp()
     _stop_on_read(context.fileno())
     msg(NSApp, n('run'))
