# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/arrays/_arrow_utils.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/arrays/_arrow_utils.py
@@ -10,20 +10,20 @@
 
 
 def pyarrow_array_to_numpy_and_mask(arr, dtype):
-    """
-    Convert a primitive pyarrow.Array to a numpy array and boolean mask based
+    """Convert a primitive pyarrow.Array to a numpy array and boolean mask based
     on the buffers of the Array.
 
     Parameters
     ----------
     arr : pyarrow.Array
+        
     dtype : numpy.dtype
+        
 
     Returns
     -------
-    (data, mask)
-        Tuple of two numpy arrays with the raw data (with specified dtype) and
-        a boolean mask (validity mask, so False means missing)
+
+    
     """
     buflist = arr.buffers()
     data = np.frombuffer(buflist[1], dtype=dtype)[arr.offset : arr.offset + len(arr)]
@@ -42,6 +42,7 @@
     # the pyarrow extension types are only available for pyarrow 0.15+
 
     class ArrowPeriodType(pyarrow.ExtensionType):
+        """ """
         def __init__(self, freq):
             # attributes need to be set first before calling
             # super init (as that calls serialize)
@@ -50,6 +51,7 @@
 
         @property
         def freq(self):
+            """ """
             return self._freq
 
         def __arrow_ext_serialize__(self):
@@ -71,6 +73,7 @@
             return hash((str(self), self.freq))
 
         def to_pandas_dtype(self):
+            """ """
             import pandas as pd
 
             return pd.PeriodDtype(freq=self.freq)
@@ -80,6 +83,7 @@
     pyarrow.register_extension_type(_period_type)
 
     class ArrowIntervalType(pyarrow.ExtensionType):
+        """ """
         def __init__(self, subtype, closed):
             # attributes need to be set first before calling
             # super init (as that calls serialize)
@@ -94,10 +98,12 @@
 
         @property
         def subtype(self):
+            """ """
             return self._subtype
 
         @property
         def closed(self):
+            """ """
             return self._closed
 
         def __arrow_ext_serialize__(self):
@@ -125,6 +131,7 @@
             return hash((str(self), str(self.subtype), self.closed))
 
         def to_pandas_dtype(self):
+            """ """
             import pandas as pd
 
             return pd.IntervalDtype(self.subtype.to_pandas_dtype())
