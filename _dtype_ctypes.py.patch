# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/_dtype_ctypes.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/_dtype_ctypes.py
@@ -5,8 +5,20 @@
 something like::
 
     def dtype_from_ctypes_type(t):
+        """
+
+        Parameters
+        ----------
+        t :
+            
+
+        Returns
+        -------
+
+        """
         # needed to ensure that the shape of `t` is within memoryview.format
         class DummyStruct(ctypes.Structure):
+            """ """
             _fields_ = [('a', t)]
 
         # empty to avoid memory allocation
@@ -30,10 +42,32 @@
 
 
 def _from_ctypes_array(t):
+    """
+
+    Parameters
+    ----------
+    t :
+        
+
+    Returns
+    -------
+
+    """
     return np.dtype((dtype_from_ctypes_type(t._type_), (t._length_,)))
 
 
 def _from_ctypes_structure(t):
+    """
+
+    Parameters
+    ----------
+    t :
+        
+
+    Returns
+    -------
+
+    """
     for item in t._fields_:
         if len(item) > 2:
             raise TypeError(
@@ -70,7 +104,17 @@
 
 def _from_ctypes_scalar(t):
     """
-    Return the dtype type with endianness included if it's the case
+
+    Parameters
+    ----------
+    t :
+        
+
+    Returns
+    -------
+    type
+        
+
     """
     if getattr(t, '__ctype_be__', None) is t:
         return np.dtype('>' + t._type_)
@@ -81,6 +125,17 @@
 
 
 def _from_ctypes_union(t):
+    """
+
+    Parameters
+    ----------
+    t :
+        
+
+    Returns
+    -------
+
+    """
     import ctypes
     formats = []
     offsets = []
@@ -98,8 +153,16 @@
 
 
 def dtype_from_ctypes_type(t):
-    """
-    Construct a dtype object from a ctypes type
+    """Construct a dtype object from a ctypes type
+
+    Parameters
+    ----------
+    t :
+        
+
+    Returns
+    -------
+
     """
     import _ctypes
     if issubclass(t, _ctypes.Array):
