# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/generic/test_series.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/generic/test_series.py
@@ -11,10 +11,12 @@
 
 
 class TestSeries(Generic):
+    """ """
     _typ = Series
     _comparator = lambda self, x, y: tm.assert_series_equal(x, y)
 
     def test_rename_mi(self):
+        """ """
         s = Series(
             [11, 21, 31],
             index=MultiIndex.from_tuples([("A", x) for x in ["a", "B", "c"]]),
@@ -23,6 +25,17 @@
 
     @pytest.mark.parametrize("func", ["rename_axis", "_set_axis_name"])
     def test_set_axis_name_mi(self, func):
+        """
+
+        Parameters
+        ----------
+        func :
+            
+
+        Returns
+        -------
+
+        """
         s = Series(
             [11, 21, 31],
             index=MultiIndex.from_tuples(
@@ -37,12 +50,14 @@
         assert result.index.names, ["L1", "L2"]
 
     def test_set_axis_name_raises(self):
+        """ """
         s = pd.Series([1])
         msg = "No axis named 1 for object type Series"
         with pytest.raises(ValueError, match=msg):
             s._set_axis_name(name="a", axis=1)
 
     def test_get_numeric_data_preserve_dtype(self):
+        """ """
 
         # get the numeric data
         o = Series([1, 2, 3])
@@ -68,6 +83,7 @@
         self._compare(result, expected)
 
     def test_nonzero_single_element(self):
+        """ """
 
         # allow single item via bool method
         s = Series([True])
@@ -105,6 +121,7 @@
                 s.bool()
 
     def test_metadata_propagation_indiv(self):
+        """ """
         # check that the metadata matches up on the resulting ops
 
         o = Series(range(3), range(3))
@@ -137,6 +154,21 @@
         o2.filename = "bar"
 
         def finalize(self, other, method=None, **kwargs):
+            """
+
+            Parameters
+            ----------
+            other :
+                
+            method :
+                 (Default value = None)
+            **kwargs :
+                
+
+            Returns
+            -------
+
+            """
             for name in self._metadata:
                 if method == "concat" and name == "filename":
                     value = "+".join(
@@ -160,6 +192,7 @@
 
 
 class TestSeries2:
+    """ """
     # Separating off because it doesnt rely on parent class
     @pytest.mark.parametrize(
         "s",
@@ -171,11 +204,35 @@
     )
     @pytest.mark.parametrize("shift_size", [0, 1, 2])
     def test_shift_always_copy(self, s, shift_size):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+        shift_size :
+            
+
+        Returns
+        -------
+
+        """
         # GH22397
         assert s.shift(shift_size) is not s
 
     @pytest.mark.parametrize("move_by_freq", [pd.Timedelta("1D"), pd.Timedelta("1M")])
     def test_datetime_shift_always_copy(self, move_by_freq):
+        """
+
+        Parameters
+        ----------
+        move_by_freq :
+            
+
+        Returns
+        -------
+
+        """
         # GH22397
         s = pd.Series(range(5), index=pd.date_range("2017", periods=5))
         assert s.shift(freq=move_by_freq) is not s
