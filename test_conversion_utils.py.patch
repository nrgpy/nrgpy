# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_conversion_utils.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_conversion_utils.py
@@ -10,16 +10,41 @@
 
 
 class StringConverterTestCase:
+    """ """
     allow_bytes = True
     case_insensitive = True
     exact_match = False
 
     def _check_value_error(self, val):
+        """
+
+        Parameters
+        ----------
+        val :
+            
+
+        Returns
+        -------
+
+        """
         pattern = r'\(got {}\)'.format(re.escape(repr(val)))
         with pytest.raises(ValueError, match=pattern) as exc:
             self.conv(val)
 
     def _check(self, val, expected):
+        """
+
+        Parameters
+        ----------
+        val :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         assert self.conv(val) == expected
 
         if self.allow_bytes:
@@ -47,6 +72,7 @@
                 self._check_value_error(val.upper())
 
     def test_wrong_type(self):
+        """ """
         # common cases which apply to all the below
         with pytest.raises(TypeError):
             self.conv({})
@@ -54,6 +80,7 @@
             self.conv([])
 
     def test_wrong_value(self):
+        """ """
         # nonsense strings
         self._check_value_error('')
         self._check_value_error('\N{greek small letter pi}')
@@ -67,9 +94,10 @@
 
 
 class TestByteorderConverter(StringConverterTestCase):
-    """ Tests of PyArray_ByteorderConverter """
+    """Tests of PyArray_ByteorderConverter"""
     conv = mt.run_byteorder_converter
     def test_valid(self):
+        """ """
         for s in ['big', '>']:
             self._check(s, 'NPY_BIG')
         for s in ['little', '<']:
@@ -83,9 +111,10 @@
 
 
 class TestSortkindConverter(StringConverterTestCase):
-    """ Tests of PyArray_SortkindConverter """
+    """Tests of PyArray_SortkindConverter"""
     conv = mt.run_sortkind_converter
     def test_valid(self):
+        """ """
         self._check('quick', 'NPY_QUICKSORT')
         self._check('heap', 'NPY_HEAPSORT')
         self._check('merge', 'NPY_STABLESORT')  # alias
@@ -93,33 +122,37 @@
 
 
 class TestSelectkindConverter(StringConverterTestCase):
-    """ Tests of PyArray_SelectkindConverter """
+    """Tests of PyArray_SelectkindConverter"""
     conv = mt.run_selectkind_converter
     case_insensitive = False
     exact_match = True
 
     def test_valid(self):
+        """ """
         self._check('introselect', 'NPY_INTROSELECT')
 
 
 class TestSearchsideConverter(StringConverterTestCase):
-    """ Tests of PyArray_SearchsideConverter """
+    """Tests of PyArray_SearchsideConverter"""
     conv = mt.run_searchside_converter
     def test_valid(self):
+        """ """
         self._check('left', 'NPY_SEARCHLEFT')
         self._check('right', 'NPY_SEARCHRIGHT')
 
 
 class TestOrderConverter(StringConverterTestCase):
-    """ Tests of PyArray_OrderConverter """
+    """Tests of PyArray_OrderConverter"""
     conv = mt.run_order_converter
     def test_valid(self):
+        """ """
         self._check('c', 'NPY_CORDER')
         self._check('f', 'NPY_FORTRANORDER')
         self._check('a', 'NPY_ANYORDER')
         self._check('k', 'NPY_KEEPORDER')
 
     def test_flatten_invalid_order(self):
+        """ """
         # invalid after gh-14596
         with pytest.raises(ValueError):
             self.conv('Z')
@@ -129,9 +162,10 @@
 
 
 class TestClipmodeConverter(StringConverterTestCase):
-    """ Tests of PyArray_ClipmodeConverter """
+    """Tests of PyArray_ClipmodeConverter"""
     conv = mt.run_clipmode_converter
     def test_valid(self):
+        """ """
         self._check('clip', 'NPY_CLIP')
         self._check('wrap', 'NPY_WRAP')
         self._check('raise', 'NPY_RAISE')
@@ -143,12 +177,13 @@
 
 
 class TestCastingConverter(StringConverterTestCase):
-    """ Tests of PyArray_CastingConverter """
+    """Tests of PyArray_CastingConverter"""
     conv = mt.run_casting_converter
     case_insensitive = False
     exact_match = True
 
     def test_valid(self):
+        """ """
         self._check("no", "NPY_NO_CASTING")
         self._check("equiv", "NPY_EQUIV_CASTING")
         self._check("safe", "NPY_SAFE_CASTING")
