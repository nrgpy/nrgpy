# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tornado/test/tcpserver_test.py
+++ b/..//venv/lib/python3.8/site-packages/tornado/test/tcpserver_test.py
@@ -14,13 +14,29 @@
 
 
 class TCPServerTest(AsyncTestCase):
+    """ """
     @gen_test
     def test_handle_stream_coroutine_logging(self):
+        """ """
         # handle_stream may be a coroutine and any exception in its
         # Future will be logged.
         class TestServer(TCPServer):
+            """ """
             @gen.coroutine
             def handle_stream(self, stream, address):
+                """
+
+                Parameters
+                ----------
+                stream :
+                    
+                address :
+                    
+
+                Returns
+                -------
+
+                """
                 yield stream.read_bytes(len(b"hello"))
                 stream.close()
                 1 / 0
@@ -44,9 +60,11 @@
 
     @gen_test
     def test_handle_stream_native_coroutine(self):
+        """ """
         # handle_stream may be a native coroutine.
 
         class TestServer(TCPServer):
+            """ """
             async def handle_stream(self, stream, address):
                 stream.write(b"data")
                 stream.close()
@@ -62,6 +80,7 @@
         client.close()
 
     def test_stop_twice(self):
+        """ """
         sock, port = bind_unused_port()
         server = TCPServer()
         server.add_socket(sock)
@@ -70,13 +89,28 @@
 
     @gen_test
     def test_stop_in_callback(self):
+        """ """
         # Issue #2069: calling server.stop() in a loop callback should not
         # raise EBADF when the loop handles other server connection
         # requests in the same loop iteration
 
         class TestServer(TCPServer):
+            """ """
             @gen.coroutine
             def handle_stream(self, stream, address):
+                """
+
+                Parameters
+                ----------
+                stream :
+                    
+                address :
+                    
+
+                Returns
+                -------
+
+                """
                 server.stop()  # type: ignore
                 yield stream.read_until_close()
 
@@ -90,6 +124,17 @@
 
         @gen.coroutine
         def connect(c):
+            """
+
+            Parameters
+            ----------
+            c :
+                
+
+            Returns
+            -------
+
+            """
             try:
                 yield c.connect(server_addr)
             except EnvironmentError:
@@ -117,12 +162,24 @@
 
 @skipIfNonUnix
 class TestMultiprocess(unittest.TestCase):
+    """ """
     # These tests verify that the two multiprocess examples from the
     # TCPServer docs work. Both tests start a server with three worker
     # processes, each of which prints its task id to stdout (a single
     # byte, so we don't have to worry about atomicity of the shared
     # stdout stream) and then exits.
     def run_subproc(self, code):
+        """
+
+        Parameters
+        ----------
+        code :
+            
+
+        Returns
+        -------
+
+        """
         proc = subprocess.Popen(
             sys.executable, stdin=subprocess.PIPE, stdout=subprocess.PIPE
         )
@@ -138,6 +195,7 @@
         return to_unicode(stdout)
 
     def test_single(self):
+        """ """
         # As a sanity check, run the single-process version through this test
         # harness too.
         code = textwrap.dedent(
@@ -155,6 +213,7 @@
         self.assertEqual("".join(sorted(out)), "012")
 
     def test_simple(self):
+        """ """
         code = textwrap.dedent(
             """
             from tornado.ioloop import IOLoop
@@ -172,6 +231,7 @@
         self.assertEqual("".join(sorted(out)), "012")
 
     def test_advanced(self):
+        """ """
         code = textwrap.dedent(
             """
             from tornado.ioloop import IOLoop
