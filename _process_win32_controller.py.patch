# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/utils/_process_win32_controller.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/utils/_process_win32_controller.py
@@ -23,11 +23,13 @@
 LPHANDLE = POINTER(HANDLE)
 ULONG_PTR = POINTER(ULONG)
 class SECURITY_ATTRIBUTES(ctypes.Structure):
+    """ """
     _fields_ = [("nLength", DWORD),
                 ("lpSecurityDescriptor", LPVOID),
                 ("bInheritHandle", BOOL)]
 LPSECURITY_ATTRIBUTES = POINTER(SECURITY_ATTRIBUTES)
 class STARTUPINFO(ctypes.Structure):
+    """ """
     _fields_ = [("cb", DWORD),
                 ("lpReserved", LPCWSTR),
                 ("lpDesktop", LPCWSTR),
@@ -48,6 +50,7 @@
                 ("hStdError", HANDLE)]
 LPSTARTUPINFO = POINTER(STARTUPINFO)
 class PROCESS_INFORMATION(ctypes.Structure):
+    """ """
     _fields_ = [("hProcess", HANDLE),
                 ("hThread", HANDLE),
                 ("dwProcessId", DWORD),
@@ -151,14 +154,20 @@
 
 class AvoidUNCPath(object):
     """A context manager to protect command execution from UNC paths.
-
+    
     In the Win32 API, commands can't be invoked with the cwd being a UNC path.
     This context manager temporarily changes directory to the 'C:' drive on
     entering, and restores the original working directory on exit.
-
+    
     The context manager returns the starting working directory *if* it made a
     change and None otherwise, so that users can apply the necessary adjustment
     to their system calls in the event of a change.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     Examples
     --------
@@ -188,14 +197,14 @@
 
 class Win32ShellCommandController(object):
     """Runs a shell command in a 'with' context.
-
+    
     This implementation is Win32-specific.
-
+    
     Example:
         # Runs the command interactively with default console stdin/stdout
         with ShellCommandController('python -i') as scc:
             scc.run()
-
+    
         # Runs the command using the provided functions for stdin/stdout
         def my_stdout_func(s):
             # print or save the string 's'
@@ -208,10 +217,16 @@
             # keep from blocking.
             else:
                 time.sleep(0.01)
-                return None
-      
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+    type
         with ShellCommandController('python -i') as scc:
-            scc.run(my_stdout_func, my_stdin_func)
+        scc.run(my_stdout_func, my_stdin_func)
+
     """
 
     def __init__(self, cmd, mergeout = True):
@@ -244,9 +259,18 @@
 
             def create_pipe(uninherit):
                 """Creates a Windows pipe, which consists of two handles.
-
+                
                 The 'uninherit' parameter controls which handle is not
                 inherited by the child process.
+
+                Parameters
+                ----------
+                uninherit :
+                    
+
+                Returns
+                -------
+
                 """
                 handles = HANDLE(), HANDLE()
                 if not CreatePipe(ctypes.byref(handles[0]),
@@ -323,6 +347,23 @@
         return self
 
     def _stdin_thread(self, handle, hprocess, func, stdout_func):
+        """
+
+        Parameters
+        ----------
+        handle :
+            
+        hprocess :
+            
+        func :
+            
+        stdout_func :
+            
+
+        Returns
+        -------
+
+        """
         exitCode = DWORD()
         bytesWritten = DWORD(0)
         while True:
@@ -373,6 +414,19 @@
                 data = data[bytesWritten.value:]
 
     def _stdout_thread(self, handle, func):
+        """
+
+        Parameters
+        ----------
+        handle :
+            
+        func :
+            
+
+        Returns
+        -------
+
+        """
         # Allocate the output buffer
         data = ctypes.create_string_buffer(4096)
         while True:
@@ -391,13 +445,26 @@
 
     def run(self, stdout_func = None, stdin_func = None, stderr_func = None):
         """Runs the process, using the provided functions for I/O.
-
+        
         The function stdin_func should return strings whenever a
         character or characters become available.
         The functions stdout_func and stderr_func are called whenever
         something is printed to stdout or stderr, respectively.
         These functions are called from different threads (but not
         concurrently, because of the GIL).
+
+        Parameters
+        ----------
+        stdout_func :
+             (Default value = None)
+        stdin_func :
+             (Default value = None)
+        stderr_func :
+             (Default value = None)
+
+        Returns
+        -------
+
         """
         if stdout_func is None and stdin_func is None and stderr_func is None:
             return self._run_stdio()
@@ -489,21 +556,48 @@
                 raise we
 
     def _stdout_raw(self, s):
-        """Writes the string to stdout"""
+        """Writes the string to stdout
+
+        Parameters
+        ----------
+        s :
+            
+
+        Returns
+        -------
+
+        """
         print(s, end='', file=sys.stdout)
         sys.stdout.flush()
 
     def _stderr_raw(self, s):
-        """Writes the string to stdout"""
+        """Writes the string to stdout
+
+        Parameters
+        ----------
+        s :
+            
+
+        Returns
+        -------
+
+        """
         print(s, end='', file=sys.stderr)
         sys.stderr.flush()
 
     def _run_stdio(self):
         """Runs the process using the system standard I/O.
-
+        
         IMPORTANT: stdin needs to be asynchronous, so the Python
                    sys.stdin object is not used. Instead,
                    msvcrt.kbhit/getwch are used asynchronously.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         # Disable Line and Echo mode
         #lpMode = DWORD()
@@ -545,19 +639,18 @@
 
 def system(cmd):
     """Win32 version of os.system() that works with network shares.
-
+    
     Note that this implementation returns None, as meant for use in IPython.
 
     Parameters
     ----------
     cmd : str
-      A command to be executed in the system shell.
+        A command to be executed in the system shell.
 
     Returns
     -------
-    None : we explicitly do NOT return the subprocess status code, as this
-    utility is meant to be used extensively in IPython, where any return value
-    would trigger :func:`sys.displayhook` calls.
+
+    
     """
     with AvoidUNCPath() as path:
         if path is not None:
