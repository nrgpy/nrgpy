# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/interval/test_interval_range.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/interval/test_interval_range.py
@@ -22,12 +22,41 @@
 
 @pytest.fixture(scope="class", params=[None, "foo"])
 def name(request):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     return request.param
 
 
 class TestIntervalRange:
+    """ """
     @pytest.mark.parametrize("freq, periods", [(1, 100), (2.5, 40), (5, 20), (25, 4)])
     def test_constructor_numeric(self, closed, name, freq, periods):
+        """
+
+        Parameters
+        ----------
+        closed :
+            
+        name :
+            
+        freq :
+            
+        periods :
+            
+
+        Returns
+        -------
+
+        """
         start, end = 0, 100
         breaks = np.arange(101, step=freq)
         expected = IntervalIndex.from_breaks(breaks, name=name, closed=closed)
@@ -61,6 +90,25 @@
         "freq, periods", [("D", 364), ("2D", 182), ("22D18H", 16), ("M", 11)]
     )
     def test_constructor_timestamp(self, closed, name, freq, periods, tz):
+        """
+
+        Parameters
+        ----------
+        closed :
+            
+        name :
+            
+        freq :
+            
+        periods :
+            
+        tz :
+            
+
+        Returns
+        -------
+
+        """
         start, end = Timestamp("20180101", tz=tz), Timestamp("20181231", tz=tz)
         breaks = date_range(start=start, end=end, freq=freq)
         expected = IntervalIndex.from_breaks(breaks, name=name, closed=closed)
@@ -96,6 +144,23 @@
         "freq, periods", [("D", 100), ("2D12H", 40), ("5D", 20), ("25D", 4)]
     )
     def test_constructor_timedelta(self, closed, name, freq, periods):
+        """
+
+        Parameters
+        ----------
+        closed :
+            
+        name :
+            
+        freq :
+            
+        periods :
+            
+
+        Returns
+        -------
+
+        """
         start, end = Timedelta("0 days"), Timedelta("100 days")
         breaks = timedelta_range(start=start, end=end, freq=freq)
         expected = IntervalIndex.from_breaks(breaks, name=name, closed=closed)
@@ -146,6 +211,23 @@
         ],
     )
     def test_early_truncation(self, start, end, freq, expected_endpoint):
+        """
+
+        Parameters
+        ----------
+        start :
+            
+        end :
+            
+        freq :
+            
+        expected_endpoint :
+            
+
+        Returns
+        -------
+
+        """
         # index truncates early if freq causes end to be skipped
         result = interval_range(start=start, end=end, freq=freq)
         result_endpoint = result.right[-1]
@@ -156,6 +238,21 @@
         [(0.5, None, None), (None, 4.5, None), (0.5, None, 1.5), (None, 6.5, 1.5)],
     )
     def test_no_invalid_float_truncation(self, start, end, freq):
+        """
+
+        Parameters
+        ----------
+        start :
+            
+        end :
+            
+        freq :
+            
+
+        Returns
+        -------
+
+        """
         # GH 21161
         if freq is None:
             breaks = [0.5, 1.5, 2.5, 3.5, 4.5]
@@ -182,6 +279,21 @@
         ],
     )
     def test_linspace_dst_transition(self, start, mid, end):
+        """
+
+        Parameters
+        ----------
+        start :
+            
+        mid :
+            
+        end :
+            
+
+        Returns
+        -------
+
+        """
         # GH 20976: linspace behavior defined from start/end/periods
         # accounts for the hour gained/lost during DST transition
         result = interval_range(start=start, end=end, periods=2)
@@ -192,6 +304,21 @@
     @pytest.mark.parametrize("end", [10, 10.0])
     @pytest.mark.parametrize("start", [0, 0.0])
     def test_float_subtype(self, start, end, freq):
+        """
+
+        Parameters
+        ----------
+        start :
+            
+        end :
+            
+        freq :
+            
+
+        Returns
+        -------
+
+        """
         # Has float subtype if any of start/end/freq are float, even if all
         # resulting endpoints can safely be upcast to integers
 
@@ -220,6 +347,7 @@
         assert result == expected
 
     def test_constructor_coverage(self):
+        """ """
         # float value for periods
         expected = interval_range(start=0, periods=10)
         result = interval_range(start=0, periods=10.5)
@@ -264,6 +392,7 @@
             tm.assert_index_equal(result, expected)
 
     def test_errors(self):
+        """ """
         # not enough params
         msg = (
             "Of the four parameters: start, end, periods, and freq, "
