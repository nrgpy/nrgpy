# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/requests_toolbelt/adapters/socket_options.py
+++ b/..//venv/lib/python3.8/site-packages/requests_toolbelt/adapters/socket_options.py
@@ -14,26 +14,32 @@
 
 class SocketOptionsAdapter(adapters.HTTPAdapter):
     """An adapter for requests that allows users to specify socket options.
-
+    
     Since version 2.4.0 of requests, it is possible to specify a custom list
     of socket options that need to be set before establishing the connection.
+    
+    Example usage::
+    
+    
+    You can also take advantage of the list of default options on this class
+    to keep using the original options in addition to your custom options. In
+    that case, ``opts`` might look like::
 
-    Example usage::
+    Parameters
+    ----------
 
-        >>> import socket
+    Returns
+    -------
+
+    >>> import socket
         >>> import requests
         >>> from requests_toolbelt.adapters import socket_options
         >>> s = requests.Session()
         >>> opts = [(socket.IPPROTO_TCP, socket.TCP_NODELAY, 0)]
         >>> adapter = socket_options.SocketOptionsAdapter(socket_options=opts)
         >>> s.mount('http://', adapter)
-
-    You can also take advantage of the list of default options on this class
-    to keep using the original options in addition to your custom options. In
-    that case, ``opts`` might look like::
-
+    
         >>> opts = socket_options.SocketOptionsAdapter.default_options + opts
-
     """
 
     if connection is not None:
@@ -57,6 +63,21 @@
         super(SocketOptionsAdapter, self).__init__(**kwargs)
 
     def init_poolmanager(self, connections, maxsize, block=False):
+        """
+
+        Parameters
+        ----------
+        connections :
+            
+        maxsize :
+            
+        block :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         if requests.__build__ >= 0x020400:
             # NOTE(Ian): Perhaps we should raise a warning
             self.poolmanager = poolmanager.PoolManager(
@@ -73,28 +94,33 @@
 
 class TCPKeepAliveAdapter(SocketOptionsAdapter):
     """An adapter for requests that turns on TCP Keep-Alive by default.
-
+    
     The adapter sets 4 socket options:
-
+    
     - ``SOL_SOCKET`` ``SO_KEEPALIVE`` - This turns on TCP Keep-Alive
     - ``IPPROTO_TCP`` ``TCP_KEEPINTVL`` 20 - Sets the keep alive interval
     - ``IPPROTO_TCP`` ``TCP_KEEPCNT`` 5 - Sets the number of keep alive probes
     - ``IPPROTO_TCP`` ``TCP_KEEPIDLE`` 60 - Sets the keep alive time if the
       socket library has the ``TCP_KEEPIDLE`` constant
-
+    
     The latter three can be overridden by keyword arguments (respectively):
-
+    
     - ``idle``
     - ``interval``
     - ``count``
-
+    
     You can use this adapter like so::
 
-       >>> from requests_toolbelt.adapters import socket_options
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    >>> from requests_toolbelt.adapters import socket_options
        >>> tcp = socket_options.TCPKeepAliveAdapter(idle=120, interval=10)
        >>> s = requests.Session()
        >>> s.mount('http://', tcp)
-
     """
 
     def __init__(self, **kwargs):
