# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/series/test_arithmetic.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/series/test_arithmetic.py
@@ -14,10 +14,22 @@
 
 
 def _permute(obj):
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+
+    Returns
+    -------
+
+    """
     return obj.take(np.random.permutation(len(obj)))
 
 
 class TestSeriesFlexArithmetic:
+    """ """
     @pytest.mark.parametrize(
         "ts",
         [
@@ -31,6 +43,19 @@
         "opname", ["add", "sub", "mul", "floordiv", "truediv", "pow"]
     )
     def test_flex_method_equivalence(self, opname, ts):
+        """
+
+        Parameters
+        ----------
+        opname :
+            
+        ts :
+            
+
+        Returns
+        -------
+
+        """
         # check that Series.{opname} behaves like Series.__{opname}__,
         tser = tm.makeTimeSeries().rename("ts")
 
@@ -51,12 +76,25 @@
             tm.assert_almost_equal(result, expected)
 
     def test_flex_method_subclass_metadata_preservation(self, all_arithmetic_operators):
+        """
+
+        Parameters
+        ----------
+        all_arithmetic_operators :
+            
+
+        Returns
+        -------
+
+        """
         # GH 13208
         class MySeries(Series):
+            """ """
             _metadata = ["x"]
 
             @property
             def _constructor(self):
+                """ """
                 return MySeries
 
         opname = all_arithmetic_operators
@@ -67,6 +105,7 @@
         assert result.x == 42
 
     def test_flex_add_scalar_fill_value(self):
+        """ """
         # GH12723
         s = Series([0, 1, np.nan, 3, 4, 5])
 
@@ -87,7 +126,41 @@
 
     @pytest.mark.parametrize("op, equiv_op, fv", pairings)
     def test_operators_combine(self, op, equiv_op, fv):
+        """
+
+        Parameters
+        ----------
+        op :
+            
+        equiv_op :
+            
+        fv :
+            
+
+        Returns
+        -------
+
+        """
         def _check_fill(meth, op, a, b, fill_value=0):
+            """
+
+            Parameters
+            ----------
+            meth :
+                
+            op :
+                
+            a :
+                
+            b :
+                
+            fill_value :
+                 (Default value = 0)
+
+            Returns
+            -------
+
+            """
             exp_index = a.index.union(b.index)
             a = a.reindex(exp_index)
             b = b.reindex(exp_index)
@@ -127,9 +200,11 @@
 
 
 class TestSeriesArithmetic:
+    """ """
     # Some of these may end up in tests/arithmetic, but are not yet sorted
 
     def test_add_series_with_period_index(self):
+        """ """
         rng = pd.period_range("1/1/2000", "1/1/2010", freq="A")
         ts = Series(np.random.randn(len(rng)), index=rng)
 
@@ -153,6 +228,21 @@
         ],
     )
     def test_string_addition(self, target_add, input_value, expected_value):
+        """
+
+        Parameters
+        ----------
+        target_add :
+            
+        input_value :
+            
+        expected_value :
+            
+
+        Returns
+        -------
+
+        """
         # GH28658 - ensure adding 'm' does not raise an error
         a = Series(input_value)
 
@@ -161,6 +251,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_divmod(self):
+        """ """
         # GH#25557
         a = Series([1, 1, 1, np.nan], index=["a", "b", "c", "d"])
         b = Series([2, np.nan, 1, np.nan], index=["a", "b", "d", "e"])
@@ -177,6 +268,17 @@
 
     @pytest.mark.parametrize("index", [None, range(9)])
     def test_series_integer_mod(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         # GH#24396
         s1 = Series(range(1, 10))
         s2 = Series("foo", index=index)
@@ -187,6 +289,7 @@
             s2 % s1
 
     def test_add_with_duplicate_index(self):
+        """ """
         # GH14227
         s1 = Series([1, 2], index=[1, 1])
         s2 = Series([10, 10], index=[1, 2])
@@ -195,6 +298,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_add_na_handling(self):
+        """ """
         from datetime import date
         from decimal import Decimal
 
@@ -208,6 +312,17 @@
         assert isna(result2[0])
 
     def test_add_corner_cases(self, datetime_series):
+        """
+
+        Parameters
+        ----------
+        datetime_series :
+            
+
+        Returns
+        -------
+
+        """
         empty = Series([], index=Index([]), dtype=np.float64)
 
         result = datetime_series + empty
@@ -234,11 +349,13 @@
         tm.assert_series_equal(added[:-5], expected)
 
     def test_mul_empty_int_corner_case(self):
+        """ """
         s1 = Series([], [], dtype=np.int32)
         s2 = Series({"x": 0.0})
         tm.assert_series_equal(s1 * s2, Series([np.nan], index=["x"]))
 
     def test_sub_datetimelike_align(self):
+        """ """
         # GH#7500
         # datetimelike ops need to align
         dt = Series(date_range("2012-1-1", periods=3, freq="D"))
@@ -260,7 +377,9 @@
 
 
 class TestSeriesFlexComparison:
+    """ """
     def test_comparison_flex_basic(self):
+        """ """
         left = pd.Series(np.random.randn(10))
         right = pd.Series(np.random.randn(10))
 
@@ -287,6 +406,7 @@
                 getattr(left, op)(right, axis=1)
 
     def test_comparison_flex_alignment(self):
+        """ """
         left = Series([1, 3, 2], index=list("abc"))
         right = Series([2, 2, 2], index=list("bcd"))
 
@@ -309,6 +429,7 @@
         tm.assert_series_equal(left.gt(right), exp)
 
     def test_comparison_flex_alignment_fill(self):
+        """ """
         left = Series([1, 3, 2], index=list("abc"))
         right = Series([2, 2, 2], index=list("bcd"))
 
@@ -332,7 +453,9 @@
 
 
 class TestSeriesComparison:
+    """ """
     def test_comparison_different_length(self):
+        """ """
         a = Series(["a", "b", "c"])
         b = Series(["b", "a"])
         msg = "only compare identically-labeled Series"
@@ -346,6 +469,17 @@
 
     @pytest.mark.parametrize("opname", ["eq", "ne", "gt", "lt", "ge", "le"])
     def test_ser_flex_cmp_return_dtypes(self, opname):
+        """
+
+        Parameters
+        ----------
+        opname :
+            
+
+        Returns
+        -------
+
+        """
         # GH#15115
         ser = Series([1, 3, 2], index=range(3))
         const = 2
@@ -355,6 +489,17 @@
 
     @pytest.mark.parametrize("opname", ["eq", "ne", "gt", "lt", "ge", "le"])
     def test_ser_flex_cmp_return_dtypes_empty(self, opname):
+        """
+
+        Parameters
+        ----------
+        opname :
+            
+
+        Returns
+        -------
+
+        """
         # GH#15115 empty Series case
         ser = Series([1, 3, 2], index=range(3))
         empty = ser.iloc[:0]
@@ -371,6 +516,19 @@
         "names", [(None, None, None), ("foo", "bar", None), ("baz", "baz", "baz")]
     )
     def test_ser_cmp_result_names(self, names, op):
+        """
+
+        Parameters
+        ----------
+        names :
+            
+        op :
+            
+
+        Returns
+        -------
+
+        """
         # datetime64 dtype
         dti = pd.date_range("1949-06-07 03:00:00", freq="H", periods=5, name=names[0])
         ser = Series(dti).rename(names[1])
@@ -407,6 +565,7 @@
             assert result.name == names[2]
 
     def test_comparisons(self):
+        """ """
         left = np.random.randn(10)
         right = np.random.randn(10)
         left[:3] = np.nan
@@ -430,6 +589,7 @@
     # Categorical Dtype Comparisons
 
     def test_categorical_comparisons(self):
+        """ """
         # GH#8938
         # allow equality comparisons
         a = Series(list("abc"), dtype="category")
@@ -486,6 +646,7 @@
             b > a
 
     def test_unequal_categorical_comparison_raises_type_error(self):
+        """ """
         # unequal comparison should raise for unordered cats
         cat = Series(Categorical(list("abc")))
         msg = "can only compare equality or not"
@@ -517,6 +678,7 @@
     # -----------------------------------------------------------------
 
     def test_comparison_tuples(self):
+        """ """
         # GH#11339
         # comparisons vs tuple
         s = Series([(1, 1), (1, 2)])
@@ -554,6 +716,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_comparison_operators_with_nas(self):
+        """ """
         ser = Series(bdate_range("1/1/2000", periods=10), dtype=object)
         ser[::2] = np.nan
 
@@ -581,12 +744,14 @@
             # tm.assert_series_equal(result, expected)
 
     def test_ne(self):
+        """ """
         ts = Series([3, 4, 5, 6, 7], [3, 4, 5, 6, 7], dtype=float)
         expected = [True, True, False, True, True]
         assert tm.equalContents(ts.index != 5, expected)
         assert tm.equalContents(~(ts.index == 5), expected)
 
     def test_comp_ops_df_compat(self):
+        """ """
         # GH 1134
         s1 = pd.Series([1, 2, 3], index=list("ABC"), name="x")
         s2 = pd.Series([2, 2, 2], index=list("ABD"), name="x")
@@ -617,6 +782,7 @@
                 left.to_frame() < right.to_frame()
 
     def test_compare_series_interval_keyword(self):
+        """ """
         # GH#25338
         s = Series(["IntervalA", "IntervalB", "IntervalC"])
         result = s == "IntervalA"
@@ -631,8 +797,10 @@
 
 
 class TestTimeSeriesArithmetic:
+    """ """
     # TODO: De-duplicate with test below
     def test_series_add_tz_mismatch_converts_to_utc_duplicate(self):
+        """ """
         rng = date_range("1/1/2011", periods=10, freq="H", tz="US/Eastern")
         ser = Series(np.random.randn(len(rng)), index=rng)
 
@@ -645,6 +813,7 @@
         assert result.index.tz is pytz.utc
 
     def test_series_add_tz_mismatch_converts_to_utc(self):
+        """ """
         rng = date_range("1/1/2011", periods=100, freq="H", tz="utc")
 
         perm = np.random.permutation(100)[:90]
@@ -667,6 +836,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_series_add_aware_naive_raises(self):
+        """ """
         rng = date_range("1/1/2011", periods=10, freq="H")
         ser = Series(np.random.randn(len(rng)), index=rng)
 
@@ -680,6 +850,7 @@
             ser_utc + ser
 
     def test_datetime_understood(self):
+        """ """
         # Ensures it doesn't fail to create the right series
         # reported in issue#16726
         series = pd.Series(pd.date_range("2012-01-01", periods=3))
