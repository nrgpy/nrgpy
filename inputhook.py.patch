# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/lib/inputhook.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/lib/inputhook.py
@@ -47,22 +47,29 @@
 #-----------------------------------------------------------------------------
 
 def _stdin_ready_posix():
-    """Return True if there's something to read on stdin (posix version)."""
+    """ """
     infds, outfds, erfds = select.select([sys.stdin],[],[],0)
     return bool(infds)
 
 def _stdin_ready_nt():
-    """Return True if there's something to read on stdin (nt version)."""
+    """ """
     return msvcrt.kbhit()
 
 def _stdin_ready_other():
-    """Return True, assuming there's something to read on stdin."""
+    """ """
     return True
 
 def _use_appnope():
     """Should we use appnope for dealing with OS X app nap?
-
+    
     Checks if we are on OS X 10.9 or greater.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     return sys.platform == 'darwin' and V(platform.mac_ver()[0]) >= V('10.9')
 
@@ -106,11 +113,18 @@
 
 class InputHookManager(object):
     """DEPRECATED since IPython 5.0
-
+    
     Manage PyOS_InputHook for different GUI toolkits.
-
+    
     This class installs various hooks under ``PyOSInputHook`` to handle
     GUI event loop integration.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     
     def __init__(self):
@@ -124,31 +138,38 @@
         self._reset()
 
     def _reset(self):
+        """ """
         self._callback_pyfunctype = None
         self._callback = None
         self._installed = False
         self._current_gui = None
 
     def get_pyos_inputhook(self):
-        """DEPRECATED since IPython 5.0
-
-        Return the current PyOS_InputHook as a ctypes.c_void_p."""
+        """DEPRECATED since IPython 5.0"""
         warn("`get_pyos_inputhook` is deprecated since IPython 5.0 and will be removed in future versions.",
                 DeprecationWarning, stacklevel=2)
         return ctypes.c_void_p.in_dll(ctypes.pythonapi,"PyOS_InputHook")
 
     def get_pyos_inputhook_as_func(self):
-        """DEPRECATED since IPython 5.0
-
-        Return the current PyOS_InputHook as a ctypes.PYFUNCYPE."""
+        """DEPRECATED since IPython 5.0"""
         warn("`get_pyos_inputhook_as_func` is deprecated since IPython 5.0 and will be removed in future versions.",
                 DeprecationWarning, stacklevel=2)
         return self.PYFUNC.in_dll(ctypes.pythonapi,"PyOS_InputHook")
 
     def set_inputhook(self, callback):
         """DEPRECATED since IPython 5.0
-
-        Set PyOS_InputHook to callback and return the previous one."""
+        
+        Set PyOS_InputHook to callback and return the previous one.
+
+        Parameters
+        ----------
+        callback :
+            
+
+        Returns
+        -------
+
+        """
         # On platforms with 'readline' support, it's all too likely to
         # have a KeyboardInterrupt signal delivered *even before* an
         # initial ``try:`` clause in the callback can be executed, so
@@ -165,17 +186,19 @@
 
     def clear_inputhook(self, app=None):
         """DEPRECATED since IPython 5.0
-
+        
         Set PyOS_InputHook to NULL and return the previous one.
 
         Parameters
         ----------
-        app : optional, ignored
-          This parameter is allowed only so that clear_inputhook() can be
-          called with a similar interface as all the ``enable_*`` methods.  But
-          the actual value of the parameter is ignored.  This uniform interface
-          makes it easier to have user-level entry points in the main IPython
-          app like :meth:`enable_gui`."""
+        app :
+             (Default value = None)
+
+        Returns
+        -------
+
+        
+        """
         warn("`clear_inputhook` is deprecated since IPython 5.0 and will be removed in future versions.",
                 DeprecationWarning, stacklevel=2)
         pyos_inputhook_ptr = self.get_pyos_inputhook()
@@ -187,9 +210,9 @@
 
     def clear_app_refs(self, gui=None):
         """DEPRECATED since IPython 5.0
-
+        
         Clear IPython's internal reference to an application instance.
-
+        
         Whenever we create an app for a user on qt4 or wx, we hold a
         reference to the app.  This is needed because in some cases bad things
         can happen if a user doesn't hold a reference themselves.  This
@@ -197,10 +220,13 @@
 
         Parameters
         ----------
-        gui : None or str
-            If None, clear all app references.  If ('wx', 'qt4') clear
-            the app for that toolkit.  References are not held for gtk or tk
-            as those toolkits don't have the notion of an app.
+        gui :
+             (Default value = None)
+
+        Returns
+        -------
+
+        
         """
         warn("`clear_app_refs` is deprecated since IPython 5.0 and will be removed in future versions.",
                 DeprecationWarning, stacklevel=2)
@@ -211,7 +237,7 @@
 
     def register(self, toolkitname, *aliases):
         """DEPRECATED since IPython 5.0
-
+        
         Register a class to provide the event loop for a given GUI.
         
         This is intended to be used as a class decorator. It should be passed
@@ -224,10 +250,22 @@
             class QtInputHook(InputHookBase):
                 def enable(self, app=None):
                     ...
+
+        Parameters
+        ----------
+        toolkitname :
+            
+        *aliases :
+            
+
+        Returns
+        -------
+
         """
         warn("`register` is deprecated since IPython 5.0 and will be removed in future versions.",
                 DeprecationWarning, stacklevel=2)
         def decorator(cls):
+            """ """
             if ctypes is not None:
                 inst = cls(self)
                 self.guihooks[toolkitname] = inst
@@ -237,18 +275,16 @@
         return decorator
 
     def current_gui(self):
-        """DEPRECATED since IPython 5.0
-
-        Return a string indicating the currently active GUI or None."""
+        """DEPRECATED since IPython 5.0"""
         warn("`current_gui` is deprecated since IPython 5.0 and will be removed in future versions.",
                 DeprecationWarning, stacklevel=2)
         return self._current_gui
 
     def enable_gui(self, gui=None, app=None):
         """DEPRECATED since IPython 5.0
-
+        
         Switch amongst GUI input hooks by name.
-
+        
         This is a higher level method than :meth:`set_inputhook` - it uses the
         GUI name to look up a registered object which enables the input hook
         for that GUI.
@@ -256,20 +292,18 @@
         Parameters
         ----------
         gui : optional, string or None
-          If None (or 'none'), clears input hook, otherwise it must be one
-          of the recognized GUI names (see ``GUI_*`` constants in module).
-
+            If None (or 'none'), clears input hook, otherwise it must be one
+            of the recognized GUI names (see ``GUI_*`` constants in module). (Default value = None)
         app : optional, existing application object.
-          For toolkits that have the concept of a global app, you can supply an
-          existing one.  If not given, the toolkit will be probed for one, and if
-          none is found, a new one will be created.  Note that GTK does not have
-          this concept, and passing an app if ``gui=="GTK"`` will raise an error.
-
-        Returns
-        -------
-        The output of the underlying gui switch routine, typically the actual
-        PyOS_InputHook wrapper object or the GUI toolkit app created, if there was
-        one.
+            For toolkits that have the concept of a global app, you can supply an
+            existing one.  If not given, the toolkit will be probed for one, and if
+            none is found, a new one will be created.  Note that GTK does not have
+            this concept, and passing an app if ``gui=="GTK"`` will raise an error. (Default value = None)
+
+        Returns
+        -------
+
+        
         """
         warn("`enable_gui` is deprecated since IPython 5.0 and will be removed in future versions.",
                 DeprecationWarning, stacklevel=2)
@@ -294,11 +328,18 @@
 
     def disable_gui(self):
         """DEPRECATED since IPython 5.0
-
+        
         Disable GUI event loop integration.
         
         If an application was registered, this sets its ``_in_event_loop``
         attribute to False. It then calls :meth:`clear_inputhook`.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         warn("`disable_gui` is deprecated since IPython 5.0 and will be removed in future versions.",
                 DeprecationWarning, stacklevel=2)
@@ -309,17 +350,25 @@
 
 class InputHookBase(object):
     """DEPRECATED since IPython 5.0
-
+    
     Base class for input hooks for specific toolkits.
     
     Subclasses should define an :meth:`enable` method with one argument, ``app``,
     which will either be an instance of the toolkit's application class, or None.
     They may also define a :meth:`disable` method with no arguments.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     def __init__(self, manager):
         self.manager = manager
 
     def disable(self):
+        """ """
         pass
 
 inputhook_manager = InputHookManager()
@@ -327,35 +376,58 @@
 @inputhook_manager.register('osx')
 class NullInputHook(InputHookBase):
     """DEPRECATED since IPython 5.0
-
-    A null inputhook that doesn't need to do anything"""
-    def enable(self, app=None):
+    
+    A null inputhook that doesn't need to do anything
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
+    def enable(self, app=None):
+        """
+
+        Parameters
+        ----------
+        app :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         warn("This function is deprecated since IPython 5.0 and will be removed in future versions.",
                 DeprecationWarning, stacklevel=2)
 
 @inputhook_manager.register('wx')
 class WxInputHook(InputHookBase):
-    def enable(self, app=None):
-        """DEPRECATED since IPython 5.0
-
+    """ """
+    def enable(self, app=None):
+        """DEPRECATED since IPython 5.0
+        
         Enable event loop integration with wxPython.
 
         Parameters
         ----------
         app : WX Application, optional.
             Running application to use.  If not given, we probe WX for an
-            existing application object, and create a new one if none is found.
+            existing application object, and create a new one if none is found. (Default value = None)
+
+        Returns
+        -------
 
         Notes
         -----
         This methods sets the ``PyOS_InputHook`` for wxPython, which allows
         the wxPython to integrate with terminal based applications like
         IPython.
-
+        
         If ``app`` is not given we probe for an existing one, and return it if
         found.  If no existing app is found, we create an :class:`wx.App` as
         follows::
-
+        
             import wx
             app = wx.App(redirect=False, clearSigInt=False)
         """
@@ -384,10 +456,17 @@
 
     def disable(self):
         """DEPRECATED since IPython 5.0
-
+        
         Disable event loop integration with wxPython.
-
+        
         This restores appnapp on OS X
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         warn("This function is deprecated since IPython 5.0 and will be removed in future versions.",
                 DeprecationWarning, stacklevel=2)
@@ -397,27 +476,31 @@
 
 @inputhook_manager.register('qt', 'qt4')
 class Qt4InputHook(InputHookBase):
-    def enable(self, app=None):
-        """DEPRECATED since IPython 5.0
-
+    """ """
+    def enable(self, app=None):
+        """DEPRECATED since IPython 5.0
+        
         Enable event loop integration with PyQt4.
-        
+
         Parameters
         ----------
         app : Qt Application, optional.
             Running application to use.  If not given, we probe Qt for an
-            existing application object, and create a new one if none is found.
+            existing application object, and create a new one if none is found. (Default value = None)
+
+        Returns
+        -------
 
         Notes
         -----
         This methods sets the PyOS_InputHook for PyQt4, which allows
         the PyQt4 to integrate with terminal based applications like
         IPython.
-
+        
         If ``app`` is not given we probe for an existing one, and return it if
         found.  If no existing app is found, we create an :class:`QApplication`
         as follows::
-
+        
             from PyQt4 import QtCore
             app = QtGui.QApplication(sys.argv)
         """
@@ -434,10 +517,17 @@
 
     def disable_qt4(self):
         """DEPRECATED since IPython 5.0
-
+        
         Disable event loop integration with PyQt4.
-
+        
         This restores appnapp on OS X
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         warn("This function is deprecated since IPython 5.0 and will be removed in future versions.",
                 DeprecationWarning, stacklevel=2)
@@ -448,7 +538,19 @@
 
 @inputhook_manager.register('qt5')
 class Qt5InputHook(Qt4InputHook):
-    def enable(self, app=None):
+    """ """
+    def enable(self, app=None):
+        """
+
+        Parameters
+        ----------
+        app :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         warn("This function is deprecated since IPython 5.0 and will be removed in future versions.",
                 DeprecationWarning, stacklevel=2)
         os.environ['QT_API'] = 'pyqt5'
@@ -457,17 +559,21 @@
 
 @inputhook_manager.register('gtk')
 class GtkInputHook(InputHookBase):
-    def enable(self, app=None):
-        """DEPRECATED since IPython 5.0
-
+    """ """
+    def enable(self, app=None):
+        """DEPRECATED since IPython 5.0
+        
         Enable event loop integration with PyGTK.
 
         Parameters
         ----------
         app : ignored
-           Ignored, it's only a placeholder to keep the call signature of all
-           gui activation methods consistent, which simplifies the logic of
-           supporting magics.
+            Ignored, it's only a placeholder to keep the call signature of all
+            gui activation methods consistent, which simplifies the logic of
+            supporting magics. (Default value = None)
+
+        Returns
+        -------
 
         Notes
         -----
@@ -488,16 +594,20 @@
 
 @inputhook_manager.register('tk')
 class TkInputHook(InputHookBase):
-    def enable(self, app=None):
-        """DEPRECATED since IPython 5.0
-
+    """ """
+    def enable(self, app=None):
+        """DEPRECATED since IPython 5.0
+        
         Enable event loop integration with Tk.
 
         Parameters
         ----------
         app : toplevel :class:`Tkinter.Tk` widget, optional.
             Running toplevel widget to use.  If not given, we probe Tk for an
-            existing one, and create a new one if none is found.
+            existing one, and create a new one if none is found. (Default value = None)
+
+        Returns
+        -------
 
         Notes
         -----
@@ -521,22 +631,25 @@
 
 @inputhook_manager.register('glut')
 class GlutInputHook(InputHookBase):
-    def enable(self, app=None):
-        """DEPRECATED since IPython 5.0
-
+    """ """
+    def enable(self, app=None):
+        """DEPRECATED since IPython 5.0
+        
         Enable event loop integration with GLUT.
 
         Parameters
         ----------
-
         app : ignored
             Ignored, it's only a placeholder to keep the call signature of all
             gui activation methods consistent, which simplifies the logic of
-            supporting magics.
+            supporting magics. (Default value = None)
+
+        Returns
+        -------
 
         Notes
         -----
-
+        
         This methods sets the PyOS_InputHook for GLUT, which allows the GLUT to
         integrate with terminal based applications like IPython. Due to GLUT
         limitations, it is currently not possible to start the event loop
@@ -577,12 +690,19 @@
 
     def disable(self):
         """DEPRECATED since IPython 5.0
-
+        
         Disable event loop integration with glut.
         
         This sets PyOS_InputHook to NULL and set the display function to a
         dummy one and set the timer to a dummy timer that will be triggered
         very far in the future.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         warn("This function is deprecated since IPython 5.0 and will be removed in future versions.",
                 DeprecationWarning, stacklevel=2)
@@ -595,24 +715,27 @@
 
 @inputhook_manager.register('pyglet')
 class PygletInputHook(InputHookBase):
-    def enable(self, app=None):
-        """DEPRECATED since IPython 5.0
-
+    """ """
+    def enable(self, app=None):
+        """DEPRECATED since IPython 5.0
+        
         Enable event loop integration with pyglet.
 
         Parameters
         ----------
         app : ignored
-           Ignored, it's only a placeholder to keep the call signature of all
-           gui activation methods consistent, which simplifies the logic of
-           supporting magics.
+            Ignored, it's only a placeholder to keep the call signature of all
+            gui activation methods consistent, which simplifies the logic of
+            supporting magics. (Default value = None)
+
+        Returns
+        -------
 
         Notes
         -----
         This methods sets the ``PyOS_InputHook`` for pyglet, which allows
         pyglet to integrate with terminal based applications like
         IPython.
-
         """
         warn("This function is deprecated since IPython 5.0 and will be removed in future versions.",
                 DeprecationWarning, stacklevel=2)
@@ -623,17 +746,21 @@
 
 @inputhook_manager.register('gtk3')
 class Gtk3InputHook(InputHookBase):
-    def enable(self, app=None):
-        """DEPRECATED since IPython 5.0
-
+    """ """
+    def enable(self, app=None):
+        """DEPRECATED since IPython 5.0
+        
         Enable event loop integration with Gtk3 (gir bindings).
 
         Parameters
         ----------
         app : ignored
-           Ignored, it's only a placeholder to keep the call signature of all
-           gui activation methods consistent, which simplifies the logic of
-           supporting magics.
+            Ignored, it's only a placeholder to keep the call signature of all
+            gui activation methods consistent, which simplifies the logic of
+            supporting magics. (Default value = None)
+
+        Returns
+        -------
 
         Notes
         -----
@@ -658,6 +785,7 @@
 
 
 def _deprecated_disable():
+    """ """
     warn("This function is deprecated since IPython 4.0 use disable_gui() instead",
             DeprecationWarning, stacklevel=2)
     inputhook_manager.disable_gui()
