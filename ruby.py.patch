# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pygments/lexers/ruby.py
+++ b/..//venv/lib/python3.8/site-packages/pygments/lexers/ruby.py
@@ -29,9 +29,7 @@
 
 
 class RubyLexer(ExtendedRegexLexer):
-    """
-    For `Ruby <http://www.ruby-lang.org>`_ source code.
-    """
+    """For `Ruby <http://www.ruby-lang.org>`_ source code."""
 
     name = 'Ruby'
     aliases = ['rb', 'ruby', 'duby']
@@ -42,6 +40,19 @@
     flags = re.DOTALL | re.MULTILINE
 
     def heredoc_callback(self, match, ctx):
+        """
+
+        Parameters
+        ----------
+        match :
+            
+        ctx :
+            
+
+        Returns
+        -------
+
+        """
         # okay, this is the hardest part of parsing Ruby...
         # match: 1 = <<[-~]?, 2 = quote? 3 = name 4 = quote? 5 = rest of line
 
@@ -86,7 +97,21 @@
             del heredocstack[:]
 
     def gen_rubystrings_rules():
+        """ """
         def intp_regex_callback(self, match, ctx):
+            """
+
+            Parameters
+            ----------
+            match :
+                
+            ctx :
+                
+
+            Returns
+            -------
+
+            """
             yield match.start(1), String.Regex, match.group(1)  # begin
             nctx = LexerContext(match.group(3), 0, ['interpolated-regex'])
             for i, t, v in self.get_tokens_unprocessed(context=nctx):
@@ -95,6 +120,19 @@
             ctx.pos = match.end()
 
         def intp_string_callback(self, match, ctx):
+            """
+
+            Parameters
+            ----------
+            match :
+                
+            ctx :
+                
+
+            Returns
+            -------
+
+            """
             yield match.start(1), String.Other, match.group(1)
             nctx = LexerContext(match.group(3), 0, ['interpolated-string'])
             for i, t, v in self.get_tokens_unprocessed(context=nctx):
@@ -384,20 +422,37 @@
     tokens.update(gen_rubystrings_rules())
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         return shebang_matches(text, r'ruby(1\.\d)?')
 
 
 class RubyConsoleLexer(Lexer):
-    """
-    For Ruby interactive console (**irb**) output like:
-
+    """For Ruby interactive console (**irb**) output like:
+    
     .. sourcecode:: rbcon
-
+    
         irb(main):001:0> a = 1
         => 1
         irb(main):002:0> puts a
         1
         => nil
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Ruby irb session'
     aliases = ['rbcon', 'irb']
@@ -407,6 +462,17 @@
                             r'|>> |\?> ')
 
     def get_tokens_unprocessed(self, text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         rblexer = RubyLexer(**self.options)
 
         curcode = ''
@@ -432,14 +498,20 @@
 
 
 class FancyLexer(RegexLexer):
-    """
-    Pygments Lexer For `Fancy <http://www.fancy-lang.org/>`_.
-
+    """Pygments Lexer For `Fancy <http://www.fancy-lang.org/>`_.
+    
     Fancy is a self-hosted, pure object-oriented, dynamic,
     class-based, concurrent general-purpose programming language
     running on Rubinius, the Ruby VM.
-
+    
     .. versionadded:: 1.5
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Fancy'
     filenames = ['*.fy', '*.fancypack']
