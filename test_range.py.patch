# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/ranges/test_range.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/ranges/test_range.py
@@ -17,6 +17,7 @@
 
 
 class TestRangeIndex(Numeric):
+    """ """
     _holder = RangeIndex
     _compat_props = ["shape", "ndim", "size"]
 
@@ -28,17 +29,31 @@
         ids=["index_inc", "index_dec"],
     )
     def index(self, request):
+        """
+
+        Parameters
+        ----------
+        request :
+            
+
+        Returns
+        -------
+
+        """
         return request.param
 
     def create_index(self) -> RangeIndex:
+        """ """
         return RangeIndex(start=0, stop=20, step=2)
 
     def test_can_hold_identifiers(self):
+        """ """
         idx = self.create_index()
         key = idx[0]
         assert idx._can_hold_identifiers_and_holds_name(key) is False
 
     def test_too_many_names(self):
+        """ """
         index = self.create_index()
         with pytest.raises(ValueError, match="^Length"):
             index.names = ["roger", "harold"]
@@ -53,6 +68,23 @@
         ],
     )
     def test_start_stop_step_attrs(self, index, start, stop, step):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+        start :
+            
+        stop :
+            
+        step :
+            
+
+        Returns
+        -------
+
+        """
         # GH 25710
         assert index.start == start
         assert index.stop == stop
@@ -60,12 +92,24 @@
 
     @pytest.mark.parametrize("attr_name", ["_start", "_stop", "_step"])
     def test_deprecated_start_stop_step_attrs(self, attr_name):
+        """
+
+        Parameters
+        ----------
+        attr_name :
+            
+
+        Returns
+        -------
+
+        """
         # GH 26581
         idx = self.create_index()
         with tm.assert_produces_warning(FutureWarning):
             getattr(idx, attr_name)
 
     def test_copy(self):
+        """ """
         i = RangeIndex(5, name="Foo")
         i_copy = i.copy()
         assert i_copy is not i
@@ -74,6 +118,7 @@
         assert i_copy.name == "Foo"
 
     def test_repr(self):
+        """ """
         i = RangeIndex(5, name="Foo")
         result = repr(i)
         expected = "RangeIndex(start=0, stop=5, step=1, name='Foo')"
@@ -91,6 +136,7 @@
         tm.assert_index_equal(result, i, exact=True)
 
     def test_insert(self):
+        """ """
 
         idx = RangeIndex(5, name="Foo")
         result = idx[1:4]
@@ -105,6 +151,7 @@
             tm.assert_index_equal(result, expected)
 
     def test_delete(self):
+        """ """
 
         idx = RangeIndex(5, name="Foo")
         expected = idx[1:].astype(int)
@@ -123,6 +170,7 @@
             result = idx.delete(len(idx))
 
     def test_view(self):
+        """ """
         i = RangeIndex(0, name="Foo")
         i_view = i.view()
         assert i_view.name == "Foo"
@@ -134,10 +182,12 @@
         tm.assert_index_equal(i, i_view)
 
     def test_dtype(self):
+        """ """
         index = self.create_index()
         assert index.dtype == np.int64
 
     def test_cached_data(self):
+        """ """
         # GH 26565, GH26617
         # Calling RangeIndex._data caches an int64 array of the same length at
         # self._cached_data. This test checks whether _cached_data has been set
@@ -192,6 +242,7 @@
         assert isinstance(idx._cached_data, np.ndarray)
 
     def test_is_monotonic(self):
+        """ """
         index = RangeIndex(0, 20, 2)
         assert index.is_monotonic is True
         assert index.is_monotonic_increasing is True
@@ -227,6 +278,7 @@
         assert index._is_strictly_monotonic_decreasing is True
 
     def test_equals_range(self):
+        """ """
         equiv_pairs = [
             (RangeIndex(0, 9, 2), RangeIndex(0, 10, 2)),
             (RangeIndex(0), RangeIndex(1, -1, 3)),
@@ -238,11 +290,13 @@
             assert right.equals(left)
 
     def test_logical_compat(self):
+        """ """
         idx = self.create_index()
         assert idx.all() == idx.values.all()
         assert idx.any() == idx.values.any()
 
     def test_identical(self):
+        """ """
         index = self.create_index()
         i = Index(index.copy())
         assert i.identical(index)
@@ -265,6 +319,7 @@
         assert not index.copy(dtype=object).identical(index.copy(dtype="int64"))
 
     def test_nbytes(self):
+        """ """
 
         # memory savings vs int index
         i = RangeIndex(0, 1000)
@@ -284,28 +339,48 @@
         ],
     )
     def test_cant_or_shouldnt_cast(self, start, stop, step):
+        """
+
+        Parameters
+        ----------
+        start :
+            
+        stop :
+            
+        step :
+            
+
+        Returns
+        -------
+
+        """
         msg = f"Wrong type {type(start)} for value {start}"
         with pytest.raises(TypeError, match=msg):
             RangeIndex(start, stop, step)
 
     def test_view_index(self):
+        """ """
         index = self.create_index()
         index.view(Index)
 
     def test_prevent_casting(self):
+        """ """
         index = self.create_index()
         result = index.astype("O")
         assert result.dtype == np.object_
 
     def test_repr_roundtrip(self):
+        """ """
         index = self.create_index()
         tm.assert_index_equal(eval(repr(index)), index)
 
     def test_slice_keep_name(self):
+        """ """
         idx = RangeIndex(1, 2, name="asdf")
         assert idx.name == idx[1:].name
 
     def test_explicit_conversions(self):
+        """ """
 
         # GH 8608
         # add/sub are overridden explicitly for Float/Int Index
@@ -331,10 +406,22 @@
         tm.assert_index_equal(result, expected)
 
     def test_has_duplicates(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         assert index.is_unique
         assert not index.has_duplicates
 
     def test_extended_gcd(self):
+        """ """
         index = self.create_index()
         result = index._extended_gcd(6, 10)
         assert result[0] == result[1] * 6 + result[2] * 10
@@ -345,6 +432,7 @@
         assert 2 == result[0]
 
     def test_min_fitting_element(self):
+        """ """
         result = RangeIndex(0, 20, 2)._min_fitting_element(1)
         assert 2 == result
 
@@ -363,6 +451,7 @@
         assert big_num == result
 
     def test_max_fitting_element(self):
+        """ """
         result = RangeIndex(0, 20, 2)._max_fitting_element(17)
         assert 16 == result
 
@@ -381,10 +470,12 @@
         assert big_num == result
 
     def test_pickle_compat_construction(self):
+        """ """
         # RangeIndex() is a valid constructor
         pass
 
     def test_slice_specialised(self):
+        """ """
         index = self.create_index()
         index.name = "foo"
 
@@ -441,6 +532,17 @@
 
     @pytest.mark.parametrize("step", set(range(-5, 6)) - {0})
     def test_len_specialised(self, step):
+        """
+
+        Parameters
+        ----------
+        step :
+            
+
+        Returns
+        -------
+
+        """
         # make sure that our len is the same as np.arange calc
         start, stop = (0, 5) if step > 0 else (5, 0)
 
@@ -475,10 +577,31 @@
         ]
     )
     def appends(self, request):
-        """Inputs and expected outputs for RangeIndex.append test"""
+        """Inputs and expected outputs for RangeIndex.append test
+
+        Parameters
+        ----------
+        request :
+            
+
+        Returns
+        -------
+
+        """
         return request.param
 
     def test_append(self, appends):
+        """
+
+        Parameters
+        ----------
+        appends :
+            
+
+        Returns
+        -------
+
+        """
         # GH16212
 
         indices, expected = appends
@@ -492,6 +615,7 @@
             tm.assert_index_equal(result2, expected, exact=True)
 
     def test_engineless_lookup(self):
+        """ """
         # GH 16685
         # Standard lookup on RangeIndex should not require the engine to be
         # created
@@ -514,6 +638,7 @@
         assert "_engine" not in idx._cache
 
     def test_format_empty(self):
+        """ """
         # GH35712
         empty_idx = self._holder(0)
         assert empty_idx.format() == []
