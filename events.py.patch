# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/events.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/events.py
@@ -23,8 +23,15 @@
     instances as an ``events`` attribute.
     
     .. note::
-
+    
        This API is experimental in IPython 2.0, and may be revised in future versions.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     def __init__(self, shell, available_events):
         """Initialise the :class:`CallbackManager`.
@@ -41,21 +48,19 @@
     
     def register(self, event, function):
         """Register a new event callback.
-        
+
         Parameters
         ----------
         event : str
-          The event for which to register this callback.
+            The event for which to register this callback.
         function : callable
-          A function to be called on the given event. It should take the same
-          parameters as the appropriate callback prototype.
-        
-        Raises
-        ------
-        TypeError
-          If ``function`` is not callable.
-        KeyError
-          If ``event`` is not one of the known events.
+            A function to be called on the given event. It should take the same
+            parameters as the appropriate callback prototype.
+
+        Returns
+        -------
+
+        
         """
         if not callable(function):
             raise TypeError('Need a callable, got %r' % function)
@@ -64,7 +69,19 @@
             self.callbacks[event].append(callback_proto.adapt(function))
     
     def unregister(self, event, function):
-        """Remove a callback from the given event."""
+        """Remove a callback from the given event.
+
+        Parameters
+        ----------
+        event :
+            
+        function :
+            
+
+        Returns
+        -------
+
+        """
         if function in self.callbacks[event]:
             return self.callbacks[event].remove(function)
 
@@ -83,6 +100,19 @@
         
         Any additional arguments are passed to all callbacks registered for this
         event. Exceptions raised by callbacks are caught, and a message printed.
+
+        Parameters
+        ----------
+        event :
+            
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
         """
         for func in self.callbacks[event][:]:
             try:
@@ -95,6 +125,17 @@
 available_events = {}
 
 def _define_event(callback_function):
+    """
+
+    Parameters
+    ----------
+    callback_function :
+        
+
+    Returns
+    -------
+
+    """
     callback_proto = callback_prototype(callback_function)
     available_events[callback_function.__name__] = callback_proto
     return callback_proto
@@ -112,6 +153,13 @@
     
     This includes comm and widget messages and silent execution, as well as user
     code cells.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     pass
 
@@ -121,8 +169,13 @@
 
     Parameters
     ----------
-    info : :class:`~IPython.core.interactiveshell.ExecutionInfo`
-      An object containing information used for the code execution.
+    info :
+        
+
+    Returns
+    -------
+
+    
     """
     pass
 
@@ -132,6 +185,13 @@
     
     This includes comm and widget messages and silent execution, as well as user
     code cells.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     pass
 
@@ -141,8 +201,13 @@
 
     Parameters
     ----------
-    result : :class:`~IPython.core.interactiveshell.ExecutionResult`
-      The object which will be returned as the execution result.
+    result :
+        
+
+    Returns
+    -------
+
+    
     """
     pass
 
@@ -152,10 +217,15 @@
     
     This is before extensions and startup scripts are loaded, so it can only be
     set by subclassing.
-    
-    Parameters
-    ----------
-    ip : :class:`~IPython.core.interactiveshell.InteractiveShell`
-      The newly initialised shell.
-    """
-    pass
+
+    Parameters
+    ----------
+    ip :
+        
+
+    Returns
+    -------
+
+    
+    """
+    pass
