# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/extension/base/reshaping.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/extension/base/reshaping.py
@@ -14,6 +14,19 @@
 
     @pytest.mark.parametrize("in_frame", [True, False])
     def test_concat(self, data, in_frame):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        in_frame :
+            
+
+        Returns
+        -------
+
+        """
         wrapped = pd.Series(data)
         if in_frame:
             wrapped = pd.DataFrame(wrapped)
@@ -31,6 +44,19 @@
 
     @pytest.mark.parametrize("in_frame", [True, False])
     def test_concat_all_na_block(self, data_missing, in_frame):
+        """
+
+        Parameters
+        ----------
+        data_missing :
+            
+        in_frame :
+            
+
+        Returns
+        -------
+
+        """
         valid_block = pd.Series(data_missing.take([1, 1]), index=[0, 1])
         na_block = pd.Series(data_missing.take([0, 0]), index=[2, 3])
         if in_frame:
@@ -45,6 +71,17 @@
             self.assert_series_equal(result, expected)
 
     def test_concat_mixed_dtypes(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # https://github.com/pandas-dev/pandas/issues/20762
         df1 = pd.DataFrame({"A": data[:3]})
         df2 = pd.DataFrame({"A": [1, 2, 3]})
@@ -71,6 +108,19 @@
         self.assert_series_equal(result, expected)
 
     def test_concat_columns(self, data, na_value):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        na_value :
+            
+
+        Returns
+        -------
+
+        """
         df1 = pd.DataFrame({"A": data[:3]})
         df2 = pd.DataFrame({"B": [1, 2, 3]})
 
@@ -95,6 +145,19 @@
         self.assert_frame_equal(result, expected)
 
     def test_concat_extension_arrays_copy_false(self, data, na_value):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        na_value :
+            
+
+        Returns
+        -------
+
+        """
         # GH 20756
         df1 = pd.DataFrame({"A": data[:3]})
         df2 = pd.DataFrame({"B": data[3:7]})
@@ -108,6 +171,17 @@
         self.assert_frame_equal(result, expected)
 
     def test_concat_with_reindex(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # GH-33027
         a = pd.DataFrame({"a": data[:5]})
         b = pd.DataFrame({"b": data[:5]})
@@ -121,6 +195,19 @@
         self.assert_frame_equal(result, expected)
 
     def test_align(self, data, na_value):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        na_value :
+            
+
+        Returns
+        -------
+
+        """
         a = data[:3]
         b = data[2:5]
         r1, r2 = pd.Series(a).align(pd.Series(b, index=[1, 2, 3]))
@@ -132,6 +219,19 @@
         self.assert_series_equal(r2, e2)
 
     def test_align_frame(self, data, na_value):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        na_value :
+            
+
+        Returns
+        -------
+
+        """
         a = data[:3]
         b = data[2:5]
         r1, r2 = pd.DataFrame({"A": a}).align(pd.DataFrame({"A": b}, index=[1, 2, 3]))
@@ -147,6 +247,19 @@
         self.assert_frame_equal(r2, e2)
 
     def test_align_series_frame(self, data, na_value):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        na_value :
+            
+
+        Returns
+        -------
+
+        """
         # https://github.com/pandas-dev/pandas/issues/20576
         ser = pd.Series(data, name="a")
         df = pd.DataFrame({"col": np.arange(len(ser) + 1)})
@@ -161,24 +274,70 @@
         self.assert_frame_equal(r2, df)
 
     def test_set_frame_expand_regular_with_extension(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         df = pd.DataFrame({"A": [1] * len(data)})
         df["B"] = data
         expected = pd.DataFrame({"A": [1] * len(data), "B": data})
         self.assert_frame_equal(df, expected)
 
     def test_set_frame_expand_extension_with_regular(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         df = pd.DataFrame({"A": data})
         df["B"] = [1] * len(data)
         expected = pd.DataFrame({"A": data, "B": [1] * len(data)})
         self.assert_frame_equal(df, expected)
 
     def test_set_frame_overwrite_object(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # https://github.com/pandas-dev/pandas/issues/20555
         df = pd.DataFrame({"A": [1] * len(data)}, dtype=object)
         df["A"] = data
         assert df.dtypes["A"] == data.dtype
 
     def test_merge(self, data, na_value):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        na_value :
+            
+
+        Returns
+        -------
+
+        """
         # GH-20743
         df1 = pd.DataFrame({"ext": data[:3], "int1": [1, 2, 3], "key": [0, 1, 2]})
         df2 = pd.DataFrame({"int2": [1, 2, 3, 4], "key": [0, 0, 1, 3]})
@@ -210,6 +369,17 @@
         self.assert_frame_equal(res, exp[["ext", "int1", "key", "int2"]])
 
     def test_merge_on_extension_array(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # GH 23020
         a, b = data[:2]
         key = type(data)._from_sequence([a, b], dtype=data.dtype)
@@ -225,6 +395,17 @@
         self.assert_frame_equal(result, expected)
 
     def test_merge_on_extension_array_duplicates(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # GH 23020
         a, b = data[:2]
         key = type(data)._from_sequence([a, b, a], dtype=data.dtype)
@@ -251,6 +432,19 @@
         ],
     )
     def test_stack(self, data, columns):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        columns :
+            
+
+        Returns
+        -------
+
+        """
         df = pd.DataFrame({"A": data[:5], "B": data[:5]})
         df.columns = columns
         result = df.stack()
@@ -289,6 +483,21 @@
     )
     @pytest.mark.parametrize("obj", ["series", "frame"])
     def test_unstack(self, data, index, obj):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        index :
+            
+        obj :
+            
+
+        Returns
+        -------
+
+        """
         data = data[: len(index)]
         if obj == "series":
             ser = pd.Series(data, index=index)
@@ -322,6 +531,17 @@
             self.assert_frame_equal(result, expected)
 
     def test_ravel(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # as long as EA is 1D-only, ravel is a no-op
         result = data.ravel()
         assert type(result) == type(data)
@@ -331,6 +551,17 @@
         assert data[0] == data[1]
 
     def test_transpose(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         df = pd.DataFrame({"A": data[:4], "B": data[:4]}, index=["a", "b", "c", "d"])
         result = df.T
         expected = pd.DataFrame(
