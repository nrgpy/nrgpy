# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tornado/test/queues_test.py
+++ b/..//venv/lib/python3.8/site-packages/tornado/test/queues_test.py
@@ -21,7 +21,9 @@
 
 
 class QueueBasicTest(AsyncTestCase):
+    """ """
     def test_repr_and_str(self):
+        """ """
         q = queues.Queue(maxsize=1)  # type: queues.Queue[None]
         self.assertIn(hex(id(q)), repr(q))
         self.assertNotIn(hex(id(q)), str(q))
@@ -45,6 +47,7 @@
             self.assertIn("tasks=2", q_str)
 
     def test_order(self):
+        """ """
         q = queues.Queue()  # type: queues.Queue[int]
         for i in [1, 3, 2]:
             q.put_nowait(i)
@@ -54,6 +57,7 @@
 
     @gen_test
     def test_maxsize(self):
+        """ """
         self.assertRaises(TypeError, queues.Queue, maxsize=None)
         self.assertRaises(ValueError, queues.Queue, maxsize=-1)
 
@@ -74,23 +78,28 @@
 
 
 class QueueGetTest(AsyncTestCase):
+    """ """
     @gen_test
     def test_blocking_get(self):
+        """ """
         q = queues.Queue()  # type: queues.Queue[int]
         q.put_nowait(0)
         self.assertEqual(0, (yield q.get()))
 
     def test_nonblocking_get(self):
+        """ """
         q = queues.Queue()  # type: queues.Queue[int]
         q.put_nowait(0)
         self.assertEqual(0, q.get_nowait())
 
     def test_nonblocking_get_exception(self):
+        """ """
         q = queues.Queue()  # type: queues.Queue[int]
         self.assertRaises(queues.QueueEmpty, q.get_nowait)
 
     @gen_test
     def test_get_with_putters(self):
+        """ """
         q = queues.Queue(1)  # type: queues.Queue[int]
         q.put_nowait(0)
         put = q.put(1)
@@ -99,6 +108,7 @@
 
     @gen_test
     def test_blocking_get_wait(self):
+        """ """
         q = queues.Queue()  # type: queues.Queue[int]
         q.put(0)
         self.io_loop.call_later(0.01, q.put_nowait, 1)
@@ -108,6 +118,7 @@
 
     @gen_test
     def test_get_timeout(self):
+        """ """
         q = queues.Queue()  # type: queues.Queue[int]
         get_timeout = q.get(timeout=timedelta(seconds=0.01))
         get = q.get()
@@ -119,6 +130,7 @@
 
     @gen_test
     def test_get_timeout_preempted(self):
+        """ """
         q = queues.Queue()  # type: queues.Queue[int]
         get = q.get(timeout=timedelta(seconds=0.01))
         q.put(0)
@@ -127,6 +139,7 @@
 
     @gen_test
     def test_get_clears_timed_out_putters(self):
+        """ """
         q = queues.Queue(1)  # type: queues.Queue[int]
         # First putter succeeds, remainder block.
         putters = [q.put(i, timedelta(seconds=0.01)) for i in range(10)]
@@ -143,6 +156,7 @@
 
     @gen_test
     def test_get_clears_timed_out_getters(self):
+        """ """
         q = queues.Queue()  # type: queues.Queue[int]
         getters = [
             asyncio.ensure_future(q.get(timedelta(seconds=0.01))) for _ in range(10)
@@ -159,6 +173,7 @@
 
     @gen_test
     def test_async_for(self):
+        """ """
         q = queues.Queue()  # type: queues.Queue[int]
         for i in range(5):
             q.put(i)
@@ -175,19 +190,23 @@
 
 
 class QueuePutTest(AsyncTestCase):
+    """ """
     @gen_test
     def test_blocking_put(self):
+        """ """
         q = queues.Queue()  # type: queues.Queue[int]
         q.put(0)
         self.assertEqual(0, q.get_nowait())
 
     def test_nonblocking_put_exception(self):
+        """ """
         q = queues.Queue(1)  # type: queues.Queue[int]
         q.put(0)
         self.assertRaises(queues.QueueFull, q.put_nowait, 1)
 
     @gen_test
     def test_put_with_getters(self):
+        """ """
         q = queues.Queue()  # type: queues.Queue[int]
         get0 = q.get()
         get1 = q.get()
@@ -198,6 +217,7 @@
 
     @gen_test
     def test_nonblocking_put_with_getters(self):
+        """ """
         q = queues.Queue()  # type: queues.Queue[int]
         get0 = q.get()
         get1 = q.get()
@@ -211,10 +231,12 @@
 
     @gen_test
     def test_blocking_put_wait(self):
+        """ """
         q = queues.Queue(1)  # type: queues.Queue[int]
         q.put_nowait(0)
 
         def get_and_discard():
+            """ """
             q.get()
 
         self.io_loop.call_later(0.01, get_and_discard)
@@ -225,6 +247,7 @@
 
     @gen_test
     def test_put_timeout(self):
+        """ """
         q = queues.Queue(1)  # type: queues.Queue[int]
         q.put_nowait(0)  # Now it's full.
         put_timeout = q.put(1, timeout=timedelta(seconds=0.01))
@@ -241,6 +264,7 @@
 
     @gen_test
     def test_put_timeout_preempted(self):
+        """ """
         q = queues.Queue(1)  # type: queues.Queue[int]
         q.put_nowait(0)
         put = q.put(1, timeout=timedelta(seconds=0.01))
@@ -250,6 +274,7 @@
 
     @gen_test
     def test_put_clears_timed_out_putters(self):
+        """ """
         q = queues.Queue(1)  # type: queues.Queue[int]
         # First putter succeeds, remainder block.
         putters = [q.put(i, timedelta(seconds=0.01)) for i in range(10)]
@@ -265,6 +290,7 @@
 
     @gen_test
     def test_put_clears_timed_out_getters(self):
+        """ """
         q = queues.Queue()  # type: queues.Queue[int]
         getters = [
             asyncio.ensure_future(q.get(timedelta(seconds=0.01))) for _ in range(10)
@@ -283,6 +309,7 @@
 
     @gen_test
     def test_float_maxsize(self):
+        """ """
         # If a float is passed for maxsize, a reasonable limit should
         # be enforced, instead of being treated as unlimited.
         # It happens to be rounded up.
@@ -308,14 +335,17 @@
 
 
 class QueueJoinTest(AsyncTestCase):
+    """ """
     queue_class = queues.Queue
 
     def test_task_done_underflow(self):
+        """ """
         q = self.queue_class()  # type: queues.Queue
         self.assertRaises(ValueError, q.task_done)
 
     @gen_test
     def test_task_done(self):
+        """ """
         q = self.queue_class()  # type: queues.Queue
         for i in range(100):
             q.put_nowait(i)
@@ -324,6 +354,7 @@
 
         @gen.coroutine
         def worker():
+            """ """
             while True:
                 item = yield q.get()
                 self.accumulator += item
@@ -338,6 +369,7 @@
 
     @gen_test
     def test_task_done_delay(self):
+        """ """
         # Verify it is task_done(), not get(), that unblocks join().
         q = self.queue_class()  # type: queues.Queue
         q.put_nowait(0)
@@ -352,12 +384,14 @@
 
     @gen_test
     def test_join_empty_queue(self):
+        """ """
         q = self.queue_class()  # type: queues.Queue
         yield q.join()
         yield q.join()
 
     @gen_test
     def test_join_timeout(self):
+        """ """
         q = self.queue_class()  # type: queues.Queue
         q.put(0)
         with self.assertRaises(TimeoutError):
@@ -365,10 +399,12 @@
 
 
 class PriorityQueueJoinTest(QueueJoinTest):
+    """ """
     queue_class = queues.PriorityQueue
 
     @gen_test
     def test_order(self):
+        """ """
         q = self.queue_class(maxsize=2)
         q.put_nowait((1, "a"))
         q.put_nowait((0, "b"))
@@ -383,10 +419,12 @@
 
 
 class LifoQueueJoinTest(QueueJoinTest):
+    """ """
     queue_class = queues.LifoQueue
 
     @gen_test
     def test_order(self):
+        """ """
         q = self.queue_class(maxsize=2)
         q.put_nowait(1)
         q.put_nowait(0)
@@ -401,8 +439,10 @@
 
 
 class ProducerConsumerTest(AsyncTestCase):
+    """ """
     @gen_test
     def test_producer_consumer(self):
+        """ """
         q = queues.Queue(maxsize=3)  # type: queues.Queue[int]
         history = []
 
@@ -412,12 +452,14 @@
         # items.
         @gen.coroutine
         def consumer():
+            """ """
             while True:
                 history.append((yield q.get()))
                 q.task_done()
 
         @gen.coroutine
         def producer():
+            """ """
             for item in range(10):
                 yield q.put(item)
 
