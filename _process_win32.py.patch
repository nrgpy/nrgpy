# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/utils/_process_win32.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/utils/_process_win32.py
@@ -36,14 +36,20 @@
 
 class AvoidUNCPath(object):
     """A context manager to protect command execution from UNC paths.
-
+    
     In the Win32 API, commands can't be invoked with the cwd being a UNC path.
     This context manager temporarily changes directory to the 'C:' drive on
     entering, and restores the original working directory on exit.
-
+    
     The context manager returns the starting working directory *if* it made a
     change and None otherwise, so that users can apply the necessary adjustment
     to their system calls in the event of a change.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     Examples
     --------
@@ -72,7 +78,17 @@
 
 
 def _find_cmd(cmd):
-    """Find the full path to a .bat or .exe using the win32api module."""
+    """Find the full path to a .bat or .exe using the win32api module.
+
+    Parameters
+    ----------
+    cmd :
+        
+
+    Returns
+    -------
+
+    """
     try:
         from win32api import SearchPath
     except ImportError:
@@ -93,15 +109,27 @@
 
 
 def _system_body(p):
-    """Callback for _system."""
+    """Callback for _system.
+
+    Parameters
+    ----------
+    p :
+        
+
+    Returns
+    -------
+
+    """
     enc = DEFAULT_ENCODING
 
     def stdout_read():
+        """ """
         for line in read_no_interrupt(p.stdout).splitlines():
             line = line.decode(enc, 'replace')
             print(line, file=sys.stdout)
 
     def stderr_read():
+        """ """
         for line in read_no_interrupt(p.stderr).splitlines():
             line = line.decode(enc, 'replace')
             print(line, file=sys.stderr)
@@ -122,17 +150,18 @@
 
 def system(cmd):
     """Win32 version of os.system() that works with network shares.
-
+    
     Note that this implementation returns None, as meant for use in IPython.
 
     Parameters
     ----------
     cmd : str or list
-      A command to be executed in the system shell.
-
-    Returns
-    -------
-    int : child process' exit code.
+        A command to be executed in the system shell.
+
+    Returns
+    -------
+
+    
     """
     # The controller provides interactivity with both
     # stdin and stdout
@@ -146,17 +175,18 @@
 
 def getoutput(cmd):
     """Return standard output of executing cmd in a shell.
-
+    
     Accepts the same arguments as os.system().
 
     Parameters
     ----------
     cmd : str or list
-      A command to be executed in the system shell.
-
-    Returns
-    -------
-    stdout : str
+        A command to be executed in the system shell.
+
+    Returns
+    -------
+
+    
     """
 
     with AvoidUNCPath() as path:
@@ -178,11 +208,24 @@
     
     def arg_split(commandline, posix=False, strict=True):
         """Split a command line's arguments in a shell-like manner.
-
+        
         This is a special version for windows that use a ctypes call to CommandLineToArgvW
         to do the argv splitting. The posix parameter is ignored.
         
         If strict=False, process_common.arg_split(...strict=False) is used instead.
+
+        Parameters
+        ----------
+        commandline :
+            
+        posix :
+             (Default value = False)
+        strict :
+             (Default value = True)
+
+        Returns
+        -------
+
         """
         #CommandLineToArgvW returns path to executable if called with empty string.
         if commandline.strip() == "":
@@ -200,6 +243,17 @@
     arg_split = py_arg_split
 
 def check_pid(pid):
+    """
+
+    Parameters
+    ----------
+    pid :
+        
+
+    Returns
+    -------
+
+    """
     # OpenProcess returns 0 if no such process (of ours) exists
     # positive int otherwise
     return bool(ctypes.windll.kernel32.OpenProcess(1,0,pid))
