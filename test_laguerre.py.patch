# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/polynomial/tests/test_laguerre.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/polynomial/tests/test_laguerre.py
@@ -22,28 +22,46 @@
 
 
 def trim(x):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+
+    Returns
+    -------
+
+    """
     return lag.lagtrim(x, tol=1e-6)
 
 
 class TestConstants:
+    """ """
 
     def test_lagdomain(self):
+        """ """
         assert_equal(lag.lagdomain, [0, 1])
 
     def test_lagzero(self):
+        """ """
         assert_equal(lag.lagzero, [0])
 
     def test_lagone(self):
+        """ """
         assert_equal(lag.lagone, [1])
 
     def test_lagx(self):
+        """ """
         assert_equal(lag.lagx, [1, -1])
 
 
 class TestArithmetic:
+    """ """
     x = np.linspace(-3, 3, 100)
 
     def test_lagadd(self):
+        """ """
         for i in range(5):
             for j in range(5):
                 msg = f"At i={i}, j={j}"
@@ -54,6 +72,7 @@
                 assert_equal(trim(res), trim(tgt), err_msg=msg)
 
     def test_lagsub(self):
+        """ """
         for i in range(5):
             for j in range(5):
                 msg = f"At i={i}, j={j}"
@@ -64,6 +83,7 @@
                 assert_equal(trim(res), trim(tgt), err_msg=msg)
 
     def test_lagmulx(self):
+        """ """
         assert_equal(lag.lagmulx([0]), [0])
         assert_equal(lag.lagmulx([1]), [1, -1])
         for i in range(1, 5):
@@ -72,6 +92,7 @@
             assert_almost_equal(lag.lagmulx(ser), tgt)
 
     def test_lagmul(self):
+        """ """
         # check values of result
         for i in range(5):
             pol1 = [0]*i + [1]
@@ -86,6 +107,7 @@
                 assert_almost_equal(val3, val1*val2, err_msg=msg)
 
     def test_lagdiv(self):
+        """ """
         for i in range(5):
             for j in range(5):
                 msg = f"At i={i}, j={j}"
@@ -97,6 +119,7 @@
                 assert_almost_equal(trim(res), trim(tgt), err_msg=msg)
 
     def test_lagpow(self):
+        """ """
         for i in range(5):
             for j in range(5):
                 msg = f"At i={i}, j={j}"
@@ -107,6 +130,7 @@
 
 
 class TestEvaluation:
+    """ """
     # coefficients of 1 + 2*x + 3*x**2
     c1d = np.array([9., -14., 6.])
     c2d = np.einsum('i,j->ij', c1d, c1d)
@@ -117,6 +141,7 @@
     y = polyval(x, [1., 2., 3.])
 
     def test_lagval(self):
+        """ """
         #check empty input
         assert_equal(lag.lagval([], [1]).size, 0)
 
@@ -138,6 +163,7 @@
             assert_equal(lag.lagval(x, [1, 0, 0]).shape, dims)
 
     def test_lagval2d(self):
+        """ """
         x1, x2, x3 = self.x
         y1, y2, y3 = self.y
 
@@ -155,6 +181,7 @@
         assert_(res.shape == (2, 3))
 
     def test_lagval3d(self):
+        """ """
         x1, x2, x3 = self.x
         y1, y2, y3 = self.y
 
@@ -172,6 +199,7 @@
         assert_(res.shape == (2, 3))
 
     def test_laggrid2d(self):
+        """ """
         x1, x2, x3 = self.x
         y1, y2, y3 = self.y
 
@@ -186,6 +214,7 @@
         assert_(res.shape == (2, 3)*2)
 
     def test_laggrid3d(self):
+        """ """
         x1, x2, x3 = self.x
         y1, y2, y3 = self.y
 
@@ -201,8 +230,10 @@
 
 
 class TestIntegral:
+    """ """
 
     def test_lagint(self):
+        """ """
         # check exceptions
         assert_raises(TypeError, lag.lagint, [0], .5)
         assert_raises(ValueError, lag.lagint, [0], -1)
@@ -286,6 +317,7 @@
                 assert_almost_equal(trim(res), trim(tgt))
 
     def test_lagint_axis(self):
+        """ """
         # check that axis keyword works
         c2d = np.random.random((3, 4))
 
@@ -303,8 +335,10 @@
 
 
 class TestDerivative:
+    """ """
 
     def test_lagder(self):
+        """ """
         # check exceptions
         assert_raises(TypeError, lag.lagder, [0], .5)
         assert_raises(ValueError, lag.lagder, [0], -1)
@@ -330,6 +364,7 @@
                 assert_almost_equal(trim(res), trim(tgt))
 
     def test_lagder_axis(self):
+        """ """
         # check that axis keyword works
         c2d = np.random.random((3, 4))
 
@@ -343,10 +378,12 @@
 
 
 class TestVander:
+    """ """
     # some random values in [-1, 1)
     x = np.random.random((3, 5))*2 - 1
 
     def test_lagvander(self):
+        """ """
         # check for 1d x
         x = np.arange(3)
         v = lag.lagvander(x, 3)
@@ -364,6 +401,7 @@
             assert_almost_equal(v[..., i], lag.lagval(x, coef))
 
     def test_lagvander2d(self):
+        """ """
         # also tests lagval2d for non-square coefficient array
         x1, x2, x3 = self.x
         c = np.random.random((2, 3))
@@ -377,6 +415,7 @@
         assert_(van.shape == (1, 5, 6))
 
     def test_lagvander3d(self):
+        """ """
         # also tests lagval3d for non-square coefficient array
         x1, x2, x3 = self.x
         c = np.random.random((2, 3, 4))
@@ -391,9 +430,22 @@
 
 
 class TestFitting:
+    """ """
 
     def test_lagfit(self):
+        """ """
         def f(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return x*(x - 1)*(x - 2)
 
         # Test exceptions
@@ -453,23 +505,29 @@
 
 
 class TestCompanion:
+    """ """
 
     def test_raises(self):
+        """ """
         assert_raises(ValueError, lag.lagcompanion, [])
         assert_raises(ValueError, lag.lagcompanion, [1])
 
     def test_dimensions(self):
+        """ """
         for i in range(1, 5):
             coef = [0]*i + [1]
             assert_(lag.lagcompanion(coef).shape == (i, i))
 
     def test_linear_root(self):
+        """ """
         assert_(lag.lagcompanion([1, 2])[0, 0] == 1.5)
 
 
 class TestGauss:
+    """ """
 
     def test_100(self):
+        """ """
         x, w = lag.laggauss(100)
 
         # test orthogonality. Note that the results need to be normalized,
@@ -487,8 +545,10 @@
 
 
 class TestMisc:
+    """ """
 
     def test_lagfromroots(self):
+        """ """
         res = lag.lagfromroots([])
         assert_almost_equal(trim(res), [1])
         for i in range(1, 5):
@@ -501,6 +561,7 @@
             assert_almost_equal(res, tgt)
 
     def test_lagroots(self):
+        """ """
         assert_almost_equal(lag.lagroots([1]), [])
         assert_almost_equal(lag.lagroots([0, 1]), [1])
         for i in range(2, 5):
@@ -509,6 +570,7 @@
             assert_almost_equal(trim(res), trim(tgt))
 
     def test_lagtrim(self):
+        """ """
         coef = [2, -1, 1, 0]
 
         # Test exceptions
@@ -520,17 +582,21 @@
         assert_equal(lag.lagtrim(coef, 2), [0])
 
     def test_lagline(self):
+        """ """
         assert_equal(lag.lagline(3, 4), [7, -4])
 
     def test_lag2poly(self):
+        """ """
         for i in range(7):
             assert_almost_equal(lag.lag2poly([0]*i + [1]), Llist[i])
 
     def test_poly2lag(self):
+        """ """
         for i in range(7):
             assert_almost_equal(lag.poly2lag(Llist[i]), [0]*i + [1])
 
     def test_weight(self):
+        """ """
         x = np.linspace(0, 10, 11)
         tgt = np.exp(-x)
         res = lag.lagweight(x)
