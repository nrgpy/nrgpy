# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/bleach/_vendor/html5lib/_inputstream.py
+++ b/..//venv/lib/python3.8/site-packages/bleach/_vendor/html5lib/_inputstream.py
@@ -50,9 +50,16 @@
 
 class BufferedStream(object):
     """Buffering for streams that do not have buffering of their own
-
+    
     The buffer is implemented as a list of chunks on the assumption that
     joining many strings will be slow since it is O(n**2)
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, stream):
@@ -61,6 +68,7 @@
         self.position = [-1, 0]  # chunk number, offset
 
     def tell(self):
+        """ """
         pos = 0
         for chunk in self.buffer[:self.position[0]]:
             pos += len(chunk)
@@ -68,6 +76,17 @@
         return pos
 
     def seek(self, pos):
+        """
+
+        Parameters
+        ----------
+        pos :
+            
+
+        Returns
+        -------
+
+        """
         assert pos <= self._bufferedBytes()
         offset = pos
         i = 0
@@ -77,6 +96,17 @@
         self.position = [i, offset]
 
     def read(self, bytes):
+        """
+
+        Parameters
+        ----------
+        bytes :
+            
+
+        Returns
+        -------
+
+        """
         if not self.buffer:
             return self._readStream(bytes)
         elif (self.position[0] == len(self.buffer) and
@@ -86,9 +116,21 @@
             return self._readFromBuffer(bytes)
 
     def _bufferedBytes(self):
+        """ """
         return sum([len(item) for item in self.buffer])
 
     def _readStream(self, bytes):
+        """
+
+        Parameters
+        ----------
+        bytes :
+            
+
+        Returns
+        -------
+
+        """
         data = self.stream.read(bytes)
         self.buffer.append(data)
         self.position[0] += 1
@@ -96,6 +138,17 @@
         return data
 
     def _readFromBuffer(self, bytes):
+        """
+
+        Parameters
+        ----------
+        bytes :
+            
+
+        Returns
+        -------
+
+        """
         remainingBytes = bytes
         rv = []
         bufferIndex = self.position[0]
@@ -123,6 +176,19 @@
 
 
 def HTMLInputStream(source, **kwargs):
+    """
+
+    Parameters
+    ----------
+    source :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     # Work around Python bug #20007: read(0) closes the connection.
     # http://bugs.python.org/issue20007
     if (isinstance(source, http_client.HTTPResponse) or
@@ -147,9 +213,15 @@
 
 class HTMLUnicodeInputStream(object):
     """Provides a unicode stream of characters to the HTMLTokenizer.
-
+    
     This class takes care of character encoding and removing or replacing
     incorrect byte-sequences and also provides column and line tracking.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     """
 
@@ -188,6 +260,7 @@
         self.reset()
 
     def reset(self):
+        """ """
         self.chunk = ""
         self.chunkSize = 0
         self.chunkOffset = 0
@@ -203,8 +276,16 @@
 
     def openStream(self, source):
         """Produces a file object from source.
-
+        
         source can be either a file object, local filename or a string.
+
+        Parameters
+        ----------
+        source :
+            
+
+        Returns
+        -------
 
         """
         # Already a file object
@@ -216,6 +297,17 @@
         return stream
 
     def _position(self, offset):
+        """
+
+        Parameters
+        ----------
+        offset :
+            
+
+        Returns
+        -------
+
+        """
         chunk = self.chunk
         nLines = chunk.count('\n', 0, offset)
         positionLine = self.prevNumLines + nLines
@@ -232,8 +324,15 @@
         return (line + 1, col)
 
     def char(self):
-        """ Read one character from the stream or queue if available. Return
+        """Read one character from the stream or queue if available. Return
             EOF when EOF is reached.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         # Read a new chunk from the input stream if necessary
         if self.chunkOffset >= self.chunkSize:
@@ -247,6 +346,17 @@
         return char
 
     def readChunk(self, chunkSize=None):
+        """
+
+        Parameters
+        ----------
+        chunkSize :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if chunkSize is None:
             chunkSize = self._defaultChunkSize
 
@@ -285,10 +395,32 @@
         return True
 
     def characterErrorsUCS4(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         for _ in range(len(invalid_unicode_re.findall(data))):
             self.errors.append("invalid-codepoint")
 
     def characterErrorsUCS2(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # Someone picked the wrong compile option
         # You lose
         skip = False
@@ -312,10 +444,21 @@
                 self.errors.append("invalid-codepoint")
 
     def charsUntil(self, characters, opposite=False):
-        """ Returns a string of characters from the stream up to but not
+        """Returns a string of characters from the stream up to but not
         including any character in 'characters' or EOF. 'characters' must be
         a container that supports the 'in' method and iteration over its
         characters.
+
+        Parameters
+        ----------
+        characters :
+            
+        opposite :
+             (Default value = False)
+
+        Returns
+        -------
+
         """
 
         # Use a cache of regexps to find the required characters
@@ -359,6 +502,17 @@
         return r
 
     def unget(self, char):
+        """
+
+        Parameters
+        ----------
+        char :
+            
+
+        Returns
+        -------
+
+        """
         # Only one character is allowed to be ungotten at once - it must
         # be consumed again before any further call to unget
         if char is not EOF:
@@ -377,9 +531,15 @@
 
 class HTMLBinaryInputStream(HTMLUnicodeInputStream):
     """Provides a unicode stream of characters to the HTMLTokenizer.
-
+    
     This class takes care of character encoding and removing or replacing
     incorrect byte-sequences and also provides column and line tracking.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     """
 
@@ -426,13 +586,22 @@
         self.reset()
 
     def reset(self):
+        """ """
         self.dataStream = self.charEncoding[0].codec_info.streamreader(self.rawStream, 'replace')
         HTMLUnicodeInputStream.reset(self)
 
     def openStream(self, source):
         """Produces a file object from source.
-
+        
         source can be either a file object, local filename or a string.
+
+        Parameters
+        ----------
+        source :
+            
+
+        Returns
+        -------
 
         """
         # Already a file object
@@ -449,6 +618,17 @@
         return stream
 
     def determineEncoding(self, chardet=True):
+        """
+
+        Parameters
+        ----------
+        chardet :
+             (Default value = True)
+
+        Returns
+        -------
+
+        """
         # BOMs take precedence over everything
         # This will also read past the BOM if present
         charEncoding = self.detectBOM(), "certain"
@@ -511,6 +691,17 @@
         return lookupEncoding("windows-1252"), "tentative"
 
     def changeEncoding(self, newEncoding):
+        """
+
+        Parameters
+        ----------
+        newEncoding :
+            
+
+        Returns
+        -------
+
+        """
         assert self.charEncoding[1] != "certain"
         newEncoding = lookupEncoding(newEncoding)
         if newEncoding is None:
@@ -529,7 +720,15 @@
     def detectBOM(self):
         """Attempts to detect at BOM at the start of the stream. If
         an encoding can be determined from the BOM return the name of the
-        encoding otherwise return None"""
+        encoding otherwise return None
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         bomDict = {
             codecs.BOM_UTF8: 'utf-8',
             codecs.BOM_UTF16_LE: 'utf-16le', codecs.BOM_UTF16_BE: 'utf-16be',
@@ -561,8 +760,7 @@
             return None
 
     def detectEncodingMeta(self):
-        """Report the encoding declared by the meta element
-        """
+        """Report the encoding declared by the meta element"""
         buffer = self.rawStream.read(self.numBytesMeta)
         assert isinstance(buffer, bytes)
         parser = EncodingParser(buffer)
@@ -578,7 +776,14 @@
 class EncodingBytes(bytes):
     """String-like object with an associated position and various extra methods
     If the position is ever greater than the string length then an exception is
-    raised"""
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
     def __new__(self, value):
         assert isinstance(value, bytes)
         return bytes.__new__(self, value.lower())
@@ -599,10 +804,12 @@
         return self[p:p + 1]
 
     def next(self):
+        """ """
         # Py2 compat
         return self.__next__()
 
     def previous(self):
+        """ """
         p = self._position
         if p >= len(self):
             raise StopIteration
@@ -612,11 +819,23 @@
         return self[p:p + 1]
 
     def setPosition(self, position):
+        """
+
+        Parameters
+        ----------
+        position :
+            
+
+        Returns
+        -------
+
+        """
         if self._position >= len(self):
             raise StopIteration
         self._position = position
 
     def getPosition(self):
+        """ """
         if self._position >= len(self):
             raise StopIteration
         if self._position >= 0:
@@ -627,12 +846,23 @@
     position = property(getPosition, setPosition)
 
     def getCurrentByte(self):
+        """ """
         return self[self.position:self.position + 1]
 
     currentByte = property(getCurrentByte)
 
     def skip(self, chars=spaceCharactersBytes):
-        """Skip past a list of characters"""
+        """Skip past a list of characters
+
+        Parameters
+        ----------
+        chars :
+             (Default value = spaceCharactersBytes)
+
+        Returns
+        -------
+
+        """
         p = self.position               # use property for the error-checking
         while p < len(self):
             c = self[p:p + 1]
@@ -644,6 +874,17 @@
         return None
 
     def skipUntil(self, chars):
+        """
+
+        Parameters
+        ----------
+        chars :
+            
+
+        Returns
+        -------
+
+        """
         p = self.position
         while p < len(self):
             c = self[p:p + 1]
@@ -657,7 +898,17 @@
     def matchBytes(self, bytes):
         """Look for a sequence of bytes at the start of a string. If the bytes
         are found return True and advance the position to the byte after the
-        match. Otherwise return False and leave the position alone"""
+        match. Otherwise return False and leave the position alone
+
+        Parameters
+        ----------
+        bytes :
+            
+
+        Returns
+        -------
+
+        """
         rv = self.startswith(bytes, self.position)
         if rv:
             self.position += len(bytes)
@@ -665,7 +916,17 @@
 
     def jumpTo(self, bytes):
         """Look for the next sequence of bytes matching a given sequence. If
-        a match is found advance the position to the last byte of the match"""
+        a match is found advance the position to the last byte of the match
+
+        Parameters
+        ----------
+        bytes :
+            
+
+        Returns
+        -------
+
+        """
         try:
             self._position = self.index(bytes, self.position) + len(bytes) - 1
         except ValueError:
@@ -682,6 +943,7 @@
         self.encoding = None
 
     def getEncoding(self):
+        """ """
         if b"<meta" not in self.data:
             return None
 
@@ -716,6 +978,7 @@
         return self.data.jumpTo(b"-->")
 
     def handleMeta(self):
+        """ """
         if self.data.currentByte not in spaceCharactersBytes:
             # if we have <meta not followed by a space so just keep going
             return True
@@ -752,13 +1015,26 @@
                                 pendingEncoding = codec
 
     def handlePossibleStartTag(self):
+        """ """
         return self.handlePossibleTag(False)
 
     def handlePossibleEndTag(self):
+        """ """
         next(self.data)
         return self.handlePossibleTag(True)
 
     def handlePossibleTag(self, endTag):
+        """
+
+        Parameters
+        ----------
+        endTag :
+            
+
+        Returns
+        -------
+
+        """
         data = self.data
         if data.currentByte not in asciiLettersBytes:
             # If the next byte is not an ascii letter either ignore this
@@ -782,11 +1058,21 @@
         return True
 
     def handleOther(self):
+        """ """
         return self.data.jumpTo(b">")
 
     def getAttribute(self):
-        """Return a name,value pair for the next attribute in the stream,
-        if one is found, or None"""
+        """
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+        type
+            if one is found, or None
+
+        """
         data = self.data
         # Step 1 (skip chars)
         c = data.skip(spaceCharactersBytes | frozenset([b"/"]))
@@ -862,11 +1148,13 @@
 
 
 class ContentAttrParser(object):
+    """ """
     def __init__(self, data):
         assert isinstance(data, bytes)
         self.data = data
 
     def parse(self):
+        """ """
         try:
             # Check if the attr name is charset
             # otherwise return
@@ -901,8 +1189,19 @@
 
 
 def lookupEncoding(encoding):
-    """Return the python codec name corresponding to an encoding or None if the
-    string doesn't correspond to a valid encoding."""
+    """
+
+    Parameters
+    ----------
+    encoding :
+        
+
+    Returns
+    -------
+    type
+        string doesn't correspond to a valid encoding.
+
+    """
     if isinstance(encoding, bytes):
         try:
             encoding = encoding.decode("ascii")
