# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/test_fsspec.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/test_fsspec.py
@@ -20,6 +20,7 @@
 
 @pytest.fixture
 def cleared_fs():
+    """ """
     fsspec = pytest.importorskip("fsspec")
 
     memfs = fsspec.filesystem("memory")
@@ -28,6 +29,17 @@
 
 
 def test_read_csv(cleared_fs):
+    """
+
+    Parameters
+    ----------
+    cleared_fs :
+        
+
+    Returns
+    -------
+
+    """
     from fsspec.implementations.memory import MemoryFile
 
     cleared_fs.store["test/test.csv"] = MemoryFile(data=text)
@@ -37,6 +49,19 @@
 
 
 def test_reasonable_error(monkeypatch, cleared_fs):
+    """
+
+    Parameters
+    ----------
+    monkeypatch :
+        
+    cleared_fs :
+        
+
+    Returns
+    -------
+
+    """
     from fsspec import registry
     from fsspec.registry import known_implementations
 
@@ -56,6 +81,17 @@
 
 
 def test_to_csv(cleared_fs):
+    """
+
+    Parameters
+    ----------
+    cleared_fs :
+        
+
+    Returns
+    -------
+
+    """
     df1.to_csv("memory://test/test.csv", index=True)
     df2 = read_csv("memory://test/test.csv", parse_dates=["dt"], index_col=0)
 
@@ -64,7 +100,19 @@
 
 @td.skip_if_no("fastparquet")
 def test_to_parquet_new_file(monkeypatch, cleared_fs):
-    """Regression test for writing to a not-yet-existent GCS Parquet file."""
+    """Regression test for writing to a not-yet-existent GCS Parquet file.
+
+    Parameters
+    ----------
+    monkeypatch :
+        
+    cleared_fs :
+        
+
+    Returns
+    -------
+
+    """
     df1.to_parquet(
         "memory://test/test.csv", index=True, engine="fastparquet", compression=None
     )
@@ -72,6 +120,19 @@
 
 @td.skip_if_no("s3fs")
 def test_from_s3_csv(s3_resource, tips_file):
+    """
+
+    Parameters
+    ----------
+    s3_resource :
+        
+    tips_file :
+        
+
+    Returns
+    -------
+
+    """
     tm.assert_equal(read_csv("s3://pandas-test/tips.csv"), read_csv(tips_file))
     # the following are decompressed by pandas, not fsspec
     tm.assert_equal(read_csv("s3://pandas-test/tips.csv.gz"), read_csv(tips_file))
@@ -81,6 +142,21 @@
 @pytest.mark.parametrize("protocol", ["s3", "s3a", "s3n"])
 @td.skip_if_no("s3fs")
 def test_s3_protocols(s3_resource, tips_file, protocol):
+    """
+
+    Parameters
+    ----------
+    s3_resource :
+        
+    tips_file :
+        
+    protocol :
+        
+
+    Returns
+    -------
+
+    """
     tm.assert_equal(
         read_csv("%s://pandas-test/tips.csv" % protocol), read_csv(tips_file)
     )
@@ -89,6 +165,17 @@
 @td.skip_if_no("s3fs")
 @td.skip_if_no("fastparquet")
 def test_s3_parquet(s3_resource):
+    """
+
+    Parameters
+    ----------
+    s3_resource :
+        
+
+    Returns
+    -------
+
+    """
     fn = "s3://pandas-test/test.parquet"
     df1.to_parquet(fn, index=False, engine="fastparquet", compression=None)
     df2 = read_parquet(fn, engine="fastparquet")
@@ -97,6 +184,7 @@
 
 @td.skip_if_installed("fsspec")
 def test_not_present_exception():
+    """ """
     with pytest.raises(ImportError) as e:
         read_csv("memory://test/test.csv")
         assert "fsspec library is required" in str(e.value)
