# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/polynomial/legendre.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/polynomial/legendre.py
@@ -98,9 +98,8 @@
 
 
 def poly2leg(pol):
-    """
-    Convert a polynomial to a Legendre series.
-
+    """Convert a polynomial to a Legendre series.
+    
     Convert an array representing the coefficients of a polynomial (relative
     to the "standard" basis) ordered from lowest degree to highest, to an
     array of the coefficients of the equivalent Legendre series, ordered
@@ -120,12 +119,10 @@
     See Also
     --------
     leg2poly
-
     Notes
     -----
     The easy way to do conversions between polynomial basis sets
     is to use the convert method of a class instance.
-
     Examples
     --------
     >>> from numpy import polynomial as P
@@ -135,7 +132,6 @@
     >>> c = P.Legendre(P.legendre.poly2leg(p.coef))
     >>> c
     Legendre([ 1.  ,  3.25,  1.  ,  0.75], domain=[-1,  1], window=[-1,  1]) # may vary
-
     """
     [pol] = pu.as_series([pol])
     deg = len(pol) - 1
@@ -146,9 +142,8 @@
 
 
 def leg2poly(c):
-    """
-    Convert a Legendre series to a polynomial.
-
+    """Convert a Legendre series to a polynomial.
+    
     Convert an array representing the coefficients of a Legendre series,
     ordered from lowest degree to highest, to an array of the coefficients
     of the equivalent polynomial (relative to the "standard" basis) ordered
@@ -170,12 +165,10 @@
     See Also
     --------
     poly2leg
-
     Notes
     -----
     The easy way to do conversions between polynomial basis sets
     is to use the convert method of a class instance.
-
     Examples
     --------
     >>> from numpy import polynomial as P
@@ -187,8 +180,6 @@
     Polynomial([-1. , -3.5,  3. ,  7.5], domain=[-1.,  1.], window=[-1.,  1.])
     >>> P.leg2poly(range(4))
     array([-1. , -3.5,  3. ,  7.5])
-
-
     """
     from .polynomial import polyadd, polysub, polymulx
 
@@ -225,15 +216,16 @@
 
 
 def legline(off, scl):
-    """
-    Legendre series whose graph is a straight line.
-
-
+    """Legendre series whose graph is a straight line.
 
     Parameters
     ----------
     off, scl : scalars
         The specified line is given by ``off + scl*x``.
+    off :
+        
+    scl :
+        
 
     Returns
     -------
@@ -244,7 +236,6 @@
     See Also
     --------
     polyline, chebline
-
     Examples
     --------
     >>> import numpy.polynomial.legendre as L
@@ -252,7 +243,6 @@
     array([3, 2])
     >>> L.legval(-3, L.legline(3,2)) # should be -3
     -3.0
-
     """
     if scl != 0:
         return np.array([off, scl])
@@ -261,23 +251,22 @@
 
 
 def legfromroots(roots):
-    """
-    Generate a Legendre series with given roots.
-
+    """Generate a Legendre series with given roots.
+    
     The function returns the coefficients of the polynomial
-
+    
     .. math:: p(x) = (x - r_0) * (x - r_1) * ... * (x - r_n),
-
+    
     in Legendre form, where the `r_n` are the roots specified in `roots`.
     If a zero has multiplicity n, then it must appear in `roots` n times.
     For instance, if 2 is a root of multiplicity three and 3 is a root of
     multiplicity 2, then `roots` looks something like [2, 2, 2, 3, 3]. The
     roots can appear in any order.
-
+    
     If the returned coefficients are `c`, then
-
+    
     .. math:: p(x) = c_0 + c_1 * L_1(x) + ... +  c_n * L_n(x)
-
+    
     The coefficient of the last term is not generally 1 for monic
     polynomials in Legendre form.
 
@@ -297,7 +286,6 @@
     See Also
     --------
     polyfromroots, chebfromroots, lagfromroots, hermfromroots, hermefromroots
-
     Examples
     --------
     >>> import numpy.polynomial.legendre as L
@@ -306,15 +294,13 @@
     >>> j = complex(0,1)
     >>> L.legfromroots((-j,j)) # x^2 + 1 relative to the standard basis
     array([ 1.33333333+0.j,  0.00000000+0.j,  0.66666667+0.j]) # may vary
-
     """
     return pu._fromroots(legline, legmul, roots)
 
 
 def legadd(c1, c2):
-    """
-    Add one Legendre series to another.
-
+    """Add one Legendre series to another.
+    
     Returns the sum of two Legendre series `c1` + `c2`.  The arguments
     are sequences of coefficients ordered from lowest order term to
     highest, i.e., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.
@@ -324,6 +310,10 @@
     c1, c2 : array_like
         1-D arrays of Legendre series coefficients ordered from low to
         high.
+    c1 :
+        
+    c2 :
+        
 
     Returns
     -------
@@ -333,14 +323,12 @@
     See Also
     --------
     legsub, legmulx, legmul, legdiv, legpow
-
     Notes
     -----
     Unlike multiplication, division, etc., the sum of two Legendre series
     is a Legendre series (without having to "reproject" the result onto
     the basis set) so addition, just like that of "standard" polynomials,
     is simply "component-wise."
-
     Examples
     --------
     >>> from numpy.polynomial import legendre as L
@@ -348,15 +336,13 @@
     >>> c2 = (3,2,1)
     >>> L.legadd(c1,c2)
     array([4.,  4.,  4.])
-
     """
     return pu._add(c1, c2)
 
 
 def legsub(c1, c2):
-    """
-    Subtract one Legendre series from another.
-
+    """Subtract one Legendre series from another.
+    
     Returns the difference of two Legendre series `c1` - `c2`.  The
     sequences of coefficients are from lowest order term to highest, i.e.,
     [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.
@@ -366,6 +352,10 @@
     c1, c2 : array_like
         1-D arrays of Legendre series coefficients ordered from low to
         high.
+    c1 :
+        
+    c2 :
+        
 
     Returns
     -------
@@ -375,14 +365,12 @@
     See Also
     --------
     legadd, legmulx, legmul, legdiv, legpow
-
     Notes
     -----
     Unlike multiplication, division, etc., the difference of two Legendre
     series is a Legendre series (without having to "reproject" the result
     onto the basis set) so subtraction, just like that of "standard"
     polynomials, is simply "component-wise."
-
     Examples
     --------
     >>> from numpy.polynomial import legendre as L
@@ -392,17 +380,15 @@
     array([-2.,  0.,  2.])
     >>> L.legsub(c2,c1) # -C.legsub(c1,c2)
     array([ 2.,  0., -2.])
-
     """
     return pu._sub(c1, c2)
 
 
 def legmulx(c):
     """Multiply a Legendre series by x.
-
+    
     Multiply the Legendre series `c` by x, where x is the independent
     variable.
-
 
     Parameters
     ----------
@@ -418,22 +404,19 @@
     See Also
     --------
     legadd, legmul, legmul, legdiv, legpow
-
     Notes
     -----
     The multiplication uses the recursion relationship for Legendre
     polynomials in the form
-
+    
     .. math::
-
+    
       xP_i(x) = ((i + 1)*P_{i + 1}(x) + i*P_{i - 1}(x))/(2i + 1)
-
     Examples
     --------
     >>> from numpy.polynomial import legendre as L
     >>> L.legmulx([1,2,3])
     array([ 0.66666667, 2.2, 1.33333333, 1.8]) # may vary
-
     """
     # c is a trimmed copy
     [c] = pu.as_series([c])
@@ -454,9 +437,8 @@
 
 
 def legmul(c1, c2):
-    """
-    Multiply one Legendre series by another.
-
+    """Multiply one Legendre series by another.
+    
     Returns the product of two Legendre series `c1` * `c2`.  The arguments
     are sequences of coefficients, from lowest order "term" to highest,
     e.g., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.
@@ -466,6 +448,10 @@
     c1, c2 : array_like
         1-D arrays of Legendre series coefficients ordered from low to
         high.
+    c1 :
+        
+    c2 :
+        
 
     Returns
     -------
@@ -475,7 +461,6 @@
     See Also
     --------
     legadd, legsub, legmulx, legdiv, legpow
-
     Notes
     -----
     In general, the (polynomial) product of two C-series results in terms
@@ -483,7 +468,6 @@
     the product as a Legendre series, it is necessary to "reproject" the
     product onto said basis set, which may produce "unintuitive" (but
     correct) results; see Examples section below.
-
     Examples
     --------
     >>> from numpy.polynomial import legendre as L
@@ -491,7 +475,6 @@
     >>> c2 = (3,2)
     >>> L.legmul(c1,c2) # multiplication requires "reprojection"
     array([  4.33333333,  10.4       ,  11.66666667,   3.6       ]) # may vary
-
     """
     # s1, s2 are trimmed copies
     [c1, c2] = pu.as_series([c1, c2])
@@ -522,9 +505,8 @@
 
 
 def legdiv(c1, c2):
-    """
-    Divide one Legendre series by another.
-
+    """Divide one Legendre series by another.
+    
     Returns the quotient-with-remainder of two Legendre series
     `c1` / `c2`.  The arguments are sequences of coefficients from lowest
     order "term" to highest, e.g., [1,2,3] represents the series
@@ -535,6 +517,10 @@
     c1, c2 : array_like
         1-D arrays of Legendre series coefficients ordered from low to
         high.
+    c1 :
+        
+    c2 :
+        
 
     Returns
     -------
@@ -545,7 +531,6 @@
     See Also
     --------
     legadd, legsub, legmulx, legmul, legpow
-
     Notes
     -----
     In general, the (polynomial) division of one Legendre series by another
@@ -554,7 +539,6 @@
     series, it is necessary to "reproject" the results onto the Legendre
     basis set, which may produce "unintuitive" (but correct) results; see
     Examples section below.
-
     Examples
     --------
     >>> from numpy.polynomial import legendre as L
@@ -565,14 +549,13 @@
     >>> c2 = (0,1,2,3)
     >>> L.legdiv(c2,c1) # neither "intuitive"
     (array([-0.07407407,  1.66666667]), array([-1.03703704, -2.51851852])) # may vary
-
     """
     return pu._div(legmul, c1, c2)
 
 
 def legpow(c, pow, maxpower=16):
     """Raise a Legendre series to a power.
-
+    
     Returns the Legendre series `c` raised to the power `pow`. The
     argument `c` is a sequence of coefficients ordered from low to high.
     i.e., [1,2,3] is the series  ``P_0 + 2*P_1 + 3*P_2.``
@@ -596,18 +579,15 @@
     See Also
     --------
     legadd, legsub, legmulx, legmul, legdiv
-
     Examples
     --------
-
     """
     return pu._pow(legmul, c, pow, maxpower)
 
 
 def legder(c, m=1, scl=1, axis=0):
-    """
-    Differentiate a Legendre series.
-
+    """Differentiate a Legendre series.
+    
     Returns the Legendre series coefficients `c` differentiated `m` times
     along `axis`.  At each iteration the result is multiplied by `scl` (the
     scaling factor is for use in a linear change of variable). The argument
@@ -631,7 +611,6 @@
         variable. (Default: 1)
     axis : int, optional
         Axis over which the derivative is taken. (Default: 0).
-
         .. versionadded:: 1.7.0
 
     Returns
@@ -642,14 +621,12 @@
     See Also
     --------
     legint
-
     Notes
     -----
     In general, the result of differentiating a Legendre series does not
     resemble the same operation on a power series. Thus the result of this
     function may be "unintuitive," albeit correct; see Examples section
     below.
-
     Examples
     --------
     >>> from numpy.polynomial import legendre as L
@@ -662,7 +639,6 @@
     array([ -6.,  -9., -20.])
     >>> L.legder(c, 2,-1)
     array([  9.,  60.])
-
     """
     c = np.array(c, ndmin=1, copy=True)
     if c.dtype.char in '?bBhHiIlLqQpP':
@@ -697,9 +673,8 @@
 
 
 def legint(c, m=1, k=[], lbnd=0, scl=1, axis=0):
-    """
-    Integrate a Legendre series.
-
+    """Integrate a Legendre series.
+    
     Returns the Legendre series coefficients `c` integrated `m` times from
     `lbnd` along `axis`. At each iteration the resulting series is
     **multiplied** by `scl` and an integration constant, `k`, is added.
@@ -733,7 +708,6 @@
         before the integration constant is added. (Default: 1)
     axis : int, optional
         Axis over which the integral is taken. (Default: 0).
-
         .. versionadded:: 1.7.0
 
     Returns
@@ -750,7 +724,6 @@
     See Also
     --------
     legder
-
     Notes
     -----
     Note that the result of each integration is *multiplied* by `scl`.
@@ -758,12 +731,11 @@
     variable :math:`u = ax + b` in an integral relative to `x`.  Then
     :math:`dx = du/a`, so one will need to set `scl` equal to
     :math:`1/a` - perhaps not what one would have first thought.
-
+    
     Also note that, in general, the result of integrating a C-series needs
     to be "reprojected" onto the C-series basis set.  Thus, typically,
     the result of this function is "unintuitive," albeit correct; see
     Examples section below.
-
     Examples
     --------
     >>> from numpy.polynomial import legendre as L
@@ -779,7 +751,6 @@
     array([ 7.33333333,  0.4       ,  0.66666667,  0.6       ]) # may vary
     >>> L.legint(c, scl=2)
     array([ 0.66666667,  0.8       ,  1.33333333,  1.2       ]) # may vary
-
     """
     c = np.array(c, ndmin=1, copy=True)
     if c.dtype.char in '?bBhHiIlLqQpP':
@@ -825,24 +796,23 @@
 
 
 def legval(x, c, tensor=True):
-    """
-    Evaluate a Legendre series at points x.
-
+    """Evaluate a Legendre series at points x.
+    
     If `c` is of length `n + 1`, this function returns the value:
-
+    
     .. math:: p(x) = c_0 * L_0(x) + c_1 * L_1(x) + ... + c_n * L_n(x)
-
+    
     The parameter `x` is converted to an array only if it is a tuple or a
     list, otherwise it is treated as a scalar. In either case, either `x`
     or its elements must support multiplication and addition both with
     themselves and with the elements of `c`.
-
+    
     If `c` is a 1-D array, then `p(x)` will have the same shape as `x`.  If
     `c` is multidimensional, then the shape of the result depends on the
     value of `tensor`. If `tensor` is true the shape will be c.shape[1:] +
     x.shape. If `tensor` is false the shape will be c.shape[1:]. Note that
     scalars have shape (,).
-
+    
     Trailing zeros in the coefficients will be used in the evaluation, so
     they should be avoided if efficiency is a concern.
 
@@ -866,7 +836,6 @@
         `c` is evaluated for every element of `x`. If False, `x` is broadcast
         over the columns of `c` for the evaluation.  This keyword is useful
         when `c` is multidimensional. The default value is True.
-
         .. versionadded:: 1.7.0
 
     Returns
@@ -877,14 +846,11 @@
     See Also
     --------
     legval2d, leggrid2d, legval3d, leggrid3d
-
     Notes
     -----
     The evaluation uses Clenshaw recursion, aka synthetic division.
-
     Examples
     --------
-
     """
     c = np.array(c, ndmin=1, copy=False)
     if c.dtype.char in '?bBhHiIlLqQpP':
@@ -913,19 +879,18 @@
 
 
 def legval2d(x, y, c):
-    """
-    Evaluate a 2-D Legendre series at points (x, y).
-
+    """Evaluate a 2-D Legendre series at points (x, y).
+    
     This function returns the values:
-
+    
     .. math:: p(x,y) = \\sum_{i,j} c_{i,j} * L_i(x) * L_j(y)
-
+    
     The parameters `x` and `y` are converted to arrays only if they are
     tuples or a lists, otherwise they are treated as a scalars and they
     must have the same shape after conversion. In either case, either `x`
     and `y` or their elements must support multiplication and addition both
     with themselves and with the elements of `c`.
-
+    
     If `c` is a 1-D array a one is implicitly appended to its shape to make
     it 2-D. The shape of the result will be c.shape[2:] + x.shape.
 
@@ -941,6 +906,10 @@
         of multi-degree i,j is contained in ``c[i,j]``. If `c` has
         dimension greater than two the remaining indices enumerate multiple
         sets of coefficients.
+    x :
+        
+    y :
+        
 
     Returns
     -------
@@ -951,33 +920,30 @@
     See Also
     --------
     legval, leggrid2d, legval3d, leggrid3d
-
-    Notes
-    -----
-
+    Notes
+    -----
+    
     .. versionadded:: 1.7.0
-
     """
     return pu._valnd(legval, c, x, y)
 
 
 def leggrid2d(x, y, c):
-    """
-    Evaluate a 2-D Legendre series on the Cartesian product of x and y.
-
+    """Evaluate a 2-D Legendre series on the Cartesian product of x and y.
+    
     This function returns the values:
-
+    
     .. math:: p(a,b) = \\sum_{i,j} c_{i,j} * L_i(a) * L_j(b)
-
+    
     where the points `(a, b)` consist of all pairs formed by taking
     `a` from `x` and `b` from `y`. The resulting points form a grid with
     `x` in the first dimension and `y` in the second.
-
+    
     The parameters `x` and `y` are converted to arrays only if they are
     tuples or a lists, otherwise they are treated as a scalars. In either
     case, either `x` and `y` or their elements must support multiplication
     and addition both with themselves and with the elements of `c`.
-
+    
     If `c` has fewer than two dimensions, ones are implicitly appended to
     its shape to make it 2-D. The shape of the result will be c.shape[2:] +
     x.shape + y.shape.
@@ -994,6 +960,10 @@
         multi-degree i,j is contained in `c[i,j]`. If `c` has dimension
         greater than two the remaining indices enumerate multiple sets of
         coefficients.
+    x :
+        
+    y :
+        
 
     Returns
     -------
@@ -1004,30 +974,27 @@
     See Also
     --------
     legval, legval2d, legval3d, leggrid3d
-
-    Notes
-    -----
-
+    Notes
+    -----
+    
     .. versionadded:: 1.7.0
-
     """
     return pu._gridnd(legval, c, x, y)
 
 
 def legval3d(x, y, z, c):
-    """
-    Evaluate a 3-D Legendre series at points (x, y, z).
-
+    """Evaluate a 3-D Legendre series at points (x, y, z).
+    
     This function returns the values:
-
+    
     .. math:: p(x,y,z) = \\sum_{i,j,k} c_{i,j,k} * L_i(x) * L_j(y) * L_k(z)
-
+    
     The parameters `x`, `y`, and `z` are converted to arrays only if
     they are tuples or a lists, otherwise they are treated as a scalars and
     they must have the same shape after conversion. In either case, either
     `x`, `y`, and `z` or their elements must support multiplication and
     addition both with themselves and with the elements of `c`.
-
+    
     If `c` has fewer than 3 dimensions, ones are implicitly appended to its
     shape to make it 3-D. The shape of the result will be c.shape[3:] +
     x.shape.
@@ -1045,6 +1012,12 @@
         multi-degree i,j,k is contained in ``c[i,j,k]``. If `c` has dimension
         greater than 3 the remaining indices enumerate multiple sets of
         coefficients.
+    x :
+        
+    y :
+        
+    z :
+        
 
     Returns
     -------
@@ -1055,35 +1028,32 @@
     See Also
     --------
     legval, legval2d, leggrid2d, leggrid3d
-
-    Notes
-    -----
-
+    Notes
+    -----
+    
     .. versionadded:: 1.7.0
-
     """
     return pu._valnd(legval, c, x, y, z)
 
 
 def leggrid3d(x, y, z, c):
-    """
-    Evaluate a 3-D Legendre series on the Cartesian product of x, y, and z.
-
+    """Evaluate a 3-D Legendre series on the Cartesian product of x, y, and z.
+    
     This function returns the values:
-
+    
     .. math:: p(a,b,c) = \\sum_{i,j,k} c_{i,j,k} * L_i(a) * L_j(b) * L_k(c)
-
+    
     where the points `(a, b, c)` consist of all triples formed by taking
     `a` from `x`, `b` from `y`, and `c` from `z`. The resulting points form
     a grid with `x` in the first dimension, `y` in the second, and `z` in
     the third.
-
+    
     The parameters `x`, `y`, and `z` are converted to arrays only if they
     are tuples or a lists, otherwise they are treated as a scalars. In
     either case, either `x`, `y`, and `z` or their elements must support
     multiplication and addition both with themselves and with the elements
     of `c`.
-
+    
     If `c` has fewer than three dimensions, ones are implicitly appended to
     its shape to make it 3-D. The shape of the result will be c.shape[3:] +
     x.shape + y.shape + z.shape.
@@ -1101,6 +1071,12 @@
         degree i,j are contained in ``c[i,j]``. If `c` has dimension
         greater than two the remaining indices enumerate multiple sets of
         coefficients.
+    x :
+        
+    y :
+        
+    z :
+        
 
     Returns
     -------
@@ -1111,27 +1087,25 @@
     See Also
     --------
     legval, legval2d, leggrid2d, legval3d
-
-    Notes
-    -----
-
+    Notes
+    -----
+    
     .. versionadded:: 1.7.0
-
     """
     return pu._gridnd(legval, c, x, y, z)
 
 
 def legvander(x, deg):
     """Pseudo-Vandermonde matrix of given degree.
-
+    
     Returns the pseudo-Vandermonde matrix of degree `deg` and sample points
     `x`. The pseudo-Vandermonde matrix is defined by
-
+    
     .. math:: V[..., i] = L_i(x)
-
+    
     where `0 <= i <= deg`. The leading indices of `V` index the elements of
     `x` and the last index is the degree of the Legendre polynomial.
-
+    
     If `c` is a 1-D array of coefficients of length `n + 1` and `V` is the
     array ``V = legvander(x, n)``, then ``np.dot(V, c)`` and
     ``legval(x, c)`` are the same up to roundoff. This equivalence is
@@ -1149,12 +1123,8 @@
 
     Returns
     -------
-    vander : ndarray
-        The pseudo-Vandermonde matrix. The shape of the returned matrix is
-        ``x.shape + (deg + 1,)``, where The last index is the degree of the
-        corresponding Legendre polynomial.  The dtype will be the same as
-        the converted `x`.
-
+
+    
     """
     ideg = pu._deprecate_as_int(deg, "deg")
     if ideg < 0:
@@ -1176,22 +1146,22 @@
 
 def legvander2d(x, y, deg):
     """Pseudo-Vandermonde matrix of given degrees.
-
+    
     Returns the pseudo-Vandermonde matrix of degrees `deg` and sample
     points `(x, y)`. The pseudo-Vandermonde matrix is defined by
-
+    
     .. math:: V[..., (deg[1] + 1)*i + j] = L_i(x) * L_j(y),
-
+    
     where `0 <= i <= deg[0]` and `0 <= j <= deg[1]`. The leading indices of
     `V` index the points `(x, y)` and the last index encodes the degrees of
     the Legendre polynomials.
-
+    
     If ``V = legvander2d(x, y, [xdeg, ydeg])``, then the columns of `V`
     correspond to the elements of a 2-D coefficient array `c` of shape
     (xdeg + 1, ydeg + 1) in the order
-
+    
     .. math:: c_{00}, c_{01}, c_{02} ... , c_{10}, c_{11}, c_{12} ...
-
+    
     and ``np.dot(V, c.flat)`` and ``legval2d(x, y, c)`` will be the same
     up to roundoff. This equivalence is useful both for least squares
     fitting and for the evaluation of a large number of 2-D Legendre
@@ -1206,6 +1176,10 @@
         1-D arrays.
     deg : list of ints
         List of maximum degrees of the form [x_deg, y_deg].
+    x :
+        
+    y :
+        
 
     Returns
     -------
@@ -1217,35 +1191,33 @@
     See Also
     --------
     legvander, legvander3d, legval2d, legval3d
-
-    Notes
-    -----
-
+    Notes
+    -----
+    
     .. versionadded:: 1.7.0
-
     """
     return pu._vander_nd_flat((legvander, legvander), (x, y), deg)
 
 
 def legvander3d(x, y, z, deg):
     """Pseudo-Vandermonde matrix of given degrees.
-
+    
     Returns the pseudo-Vandermonde matrix of degrees `deg` and sample
     points `(x, y, z)`. If `l, m, n` are the given degrees in `x, y, z`,
     then The pseudo-Vandermonde matrix is defined by
-
+    
     .. math:: V[..., (m+1)(n+1)i + (n+1)j + k] = L_i(x)*L_j(y)*L_k(z),
-
+    
     where `0 <= i <= l`, `0 <= j <= m`, and `0 <= j <= n`.  The leading
     indices of `V` index the points `(x, y, z)` and the last index encodes
     the degrees of the Legendre polynomials.
-
+    
     If ``V = legvander3d(x, y, z, [xdeg, ydeg, zdeg])``, then the columns
     of `V` correspond to the elements of a 3-D coefficient array `c` of
     shape (xdeg + 1, ydeg + 1, zdeg + 1) in the order
-
+    
     .. math:: c_{000}, c_{001}, c_{002},... , c_{010}, c_{011}, c_{012},...
-
+    
     and ``np.dot(V, c.flat)`` and ``legval3d(x, y, z, c)`` will be the
     same up to roundoff. This equivalence is useful both for least squares
     fitting and for the evaluation of a large number of 3-D Legendre
@@ -1260,6 +1232,12 @@
         arrays.
     deg : list of ints
         List of maximum degrees of the form [x_deg, y_deg, z_deg].
+    x :
+        
+    y :
+        
+    z :
+        
 
     Returns
     -------
@@ -1271,29 +1249,26 @@
     See Also
     --------
     legvander, legvander3d, legval2d, legval3d
-
-    Notes
-    -----
-
+    Notes
+    -----
+    
     .. versionadded:: 1.7.0
-
     """
     return pu._vander_nd_flat((legvander, legvander, legvander), (x, y, z), deg)
 
 
 def legfit(x, y, deg, rcond=None, full=False, w=None):
-    """
-    Least squares fit of Legendre series to data.
-
+    """Least squares fit of Legendre series to data.
+    
     Return the coefficients of a Legendre series of degree `deg` that is the
     least squares fit to the data values `y` given at points `x`. If `y` is
     1-D the returned coefficients will also be 1-D. If `y` is 2-D multiple
     fits are done, one for each column of `y`, and the resulting
     coefficients are stored in the corresponding columns of a 2-D return.
     The fitted polynomial(s) are in the form
-
+    
     .. math::  p(x) = c_0 + c_1 * L_1(x) + ... + c_n * L_n(x),
-
+    
     where `n` is `deg`.
 
     Parameters
@@ -1323,7 +1298,6 @@
         ``(x[i],y[i])`` to the fit is weighted by `w[i]`. Ideally the
         weights are chosen so that the errors of the products ``w[i]*y[i]``
         all have the same variance.  The default value is None.
-
         .. versionadded:: 1.5.0
 
     Returns
@@ -1334,26 +1308,21 @@
         column `k`. If `deg` is specified as a list, coefficients for
         terms not included in the fit are set equal to zero in the
         returned `coef`.
-
     [residuals, rank, singular_values, rcond] : list
         These values are only returned if `full` = True
-
         resid -- sum of squared residuals of the least squares fit
         rank -- the numerical rank of the scaled Vandermonde matrix
         sv -- singular values of the scaled Vandermonde matrix
         rcond -- value of `rcond`.
-
         For more details, see `linalg.lstsq`.
-
     Warns
-    -----
+        
+    -----
+        
     RankWarning
         The rank of the coefficient matrix in the least-squares fit is
         deficient. The warning is only raised if `full` = False.  The
         warnings can be turned off by
-
-        >>> import warnings
-        >>> warnings.simplefilter('ignore', np.RankWarning)
 
     See Also
     --------
@@ -1363,51 +1332,49 @@
     legweight : Legendre weight function (= 1).
     linalg.lstsq : Computes a least-squares fit from the matrix.
     scipy.interpolate.UnivariateSpline : Computes spline fits.
-
     Notes
     -----
     The solution is the coefficients of the Legendre series `p` that
     minimizes the sum of the weighted squared errors
-
+    
     .. math:: E = \\sum_j w_j^2 * |y_j - p(x_j)|^2,
-
+    
     where :math:`w_j` are the weights. This problem is solved by setting up
     as the (typically) overdetermined matrix equation
-
+    
     .. math:: V(x) * c = w * y,
-
+    
     where `V` is the weighted pseudo Vandermonde matrix of `x`, `c` are the
     coefficients to be solved for, `w` are the weights, and `y` are the
     observed values.  This equation is then solved using the singular value
     decomposition of `V`.
-
+    
     If some of the singular values of `V` are so small that they are
     neglected, then a `RankWarning` will be issued. This means that the
     coefficient values may be poorly determined. Using a lower order fit
     will usually get rid of the warning.  The `rcond` parameter can also be
     set to a value smaller than its default, but the resulting fit may be
     spurious and have large contributions from roundoff error.
-
+    
     Fits using Legendre series are usually better conditioned than fits
     using power series, but much can depend on the distribution of the
     sample points and the smoothness of the data. If the quality of the fit
     is inadequate splines may be a good alternative.
-
     References
     ----------
     .. [1] Wikipedia, "Curve fitting",
            https://en.wikipedia.org/wiki/Curve_fitting
-
     Examples
     --------
-
+    >>> import warnings
+        >>> warnings.simplefilter('ignore', np.RankWarning)
     """
     return pu._fit(legvander, x, y, deg, rcond, full, w)
 
 
 def legcompanion(c):
     """Return the scaled companion matrix of c.
-
+    
     The basis polynomials are scaled so that the companion matrix is
     symmetric when `c` is an Legendre basis polynomial. This provides
     better eigenvalue estimates than the unscaled case and for basis
@@ -1427,9 +1394,8 @@
 
     Notes
     -----
-
+    
     .. versionadded:: 1.7.0
-
     """
     # c is a trimmed copy
     [c] = pu.as_series([c])
@@ -1450,11 +1416,10 @@
 
 
 def legroots(c):
-    """
-    Compute the roots of a Legendre series.
-
+    """Compute the roots of a Legendre series.
+    
     Return the roots (a.k.a. "zeros") of the polynomial
-
+    
     .. math:: p(x) = \\sum_i c[i] * L_i(x).
 
     Parameters
@@ -1471,7 +1436,6 @@
     See Also
     --------
     polyroots, chebroots, lagroots, hermroots, hermeroots
-
     Notes
     -----
     The root estimates are obtained as the eigenvalues of the companion
@@ -1481,16 +1445,14 @@
     the value of the series near such points is relatively insensitive to
     errors in the roots. Isolated roots near the origin can be improved by
     a few iterations of Newton's method.
-
+    
     The Legendre series basis polynomials aren't powers of ``x`` so the
     results of this function may seem unintuitive.
-
     Examples
     --------
     >>> import numpy.polynomial.legendre as leg
     >>> leg.legroots((1, 2, 3, 4)) # 4L_3 + 3L_2 + 2L_1 + 1L_0, all real roots
     array([-0.85099543, -0.11407192,  0.51506735]) # may vary
-
     """
     # c is a trimmed copy
     [c] = pu.as_series([c])
@@ -1507,9 +1469,8 @@
 
 
 def leggauss(deg):
-    """
-    Gauss-Legendre quadrature.
-
+    """Gauss-Legendre quadrature.
+    
     Computes the sample points and weights for Gauss-Legendre quadrature.
     These sample points and weights will correctly integrate polynomials of
     degree :math:`2*deg - 1` or less over the interval :math:`[-1, 1]` with
@@ -1529,18 +1490,17 @@
 
     Notes
     -----
-
+    
     .. versionadded:: 1.7.0
-
+    
     The results have only been tested up to degree 100, higher degrees may
     be problematic. The weights are determined by using the fact that
-
+    
     .. math:: w_k = c / (L'_n(x_k) * L_{n-1}(x_k))
-
+    
     where :math:`c` is a constant independent of :math:`k` and :math:`x_k`
     is the k'th root of :math:`L_n`, and then scaling the results to get
     the right value when integrating 1.
-
     """
     ideg = pu._deprecate_as_int(deg, "deg")
     if ideg <= 0:
@@ -1575,9 +1535,8 @@
 
 
 def legweight(x):
-    """
-    Weight function of the Legendre polynomials.
-
+    """Weight function of the Legendre polynomials.
+    
     The weight function is :math:`1` and the interval of integration is
     :math:`[-1, 1]`. The Legendre polynomials are orthogonal, but not
     normalized, with respect to this weight function.
@@ -1585,18 +1544,17 @@
     Parameters
     ----------
     x : array_like
-       Values at which the weight function will be computed.
+        Values at which the weight function will be computed.
 
     Returns
     -------
     w : ndarray
-       The weight function at `x`.
-
-    Notes
-    -----
-
+        The weight function at `x`.
+
+    Notes
+    -----
+    
     .. versionadded:: 1.7.0
-
     """
     w = x*0.0 + 1.0
     return w
@@ -1607,25 +1565,18 @@
 
 class Legendre(ABCPolyBase):
     """A Legendre series class.
-
+    
     The Legendre class provides the standard Python numerical methods
     '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the
     attributes and methods listed in the `ABCPolyBase` documentation.
 
     Parameters
     ----------
-    coef : array_like
-        Legendre coefficients in order of increasing degree, i.e.,
-        ``(1, 2, 3)`` gives ``1*P_0(x) + 2*P_1(x) + 3*P_2(x)``.
-    domain : (2,) array_like, optional
-        Domain to use. The interval ``[domain[0], domain[1]]`` is mapped
-        to the interval ``[window[0], window[1]]`` by shifting and scaling.
-        The default value is [-1, 1].
-    window : (2,) array_like, optional
-        Window, see `domain` for its use. The default value is [-1, 1].
-
-        .. versionadded:: 1.6.0
-
+
+    Returns
+    -------
+
+    
     """
     # Virtual Functions
     _add = staticmethod(legadd)
