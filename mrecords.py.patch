# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/ma/mrecords.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/ma/mrecords.py
@@ -43,11 +43,20 @@
 
 
 def _checknames(descr, names=None):
-    """
-    Checks that field names ``descr`` are not reserved keywords.
-
+    """Checks that field names ``descr`` are not reserved keywords.
+    
     If this is the case, a default 'f%i' is substituted.  If the argument
     `names` is not None, updates the field names to valid names.
+
+    Parameters
+    ----------
+    descr :
+        
+    names :
+         (Default value = None)
+
+    Returns
+    -------
 
     """
     ndescr = len(descr)
@@ -77,6 +86,7 @@
 
 
 def _get_fieldmask(self):
+    """ """
     mdescr = [(n, '|b1') for n in self.dtype.names]
     fdmask = np.empty(self.shape, dtype=mdescr)
     fdmask.flat = tuple([False] * len(mdescr))
@@ -84,22 +94,7 @@
 
 
 class MaskedRecords(MaskedArray):
-    """
-
-    Attributes
-    ----------
-    _data : recarray
-        Underlying data, as a record array.
-    _mask : boolean array
-        Mask of the records. A record is masked when all its fields are
-        masked.
-    _fieldmask : boolean recarray
-        Record array of booleans, setting the mask of each individual field
-        of each record.
-    _fill_value : record
-        Filling values for each field.
-
-    """
+    """ """
 
     def __new__(cls, shape, dtype=None, buf=None, offset=0, strides=None,
                 formats=None, names=None, titles=None,
@@ -164,18 +159,12 @@
 
     @property
     def _data(self):
-        """
-        Returns the data as a recarray.
-
-        """
+        """Returns the data as a recarray."""
         return ndarray.view(self, recarray)
 
     @property
     def _fieldmask(self):
-        """
-        Alias to mask.
-
-        """
+        """Alias to mask."""
         return self._mask
 
     def __len__(self):
@@ -359,8 +348,17 @@
         return str("\n".join(reprstr))
 
     def view(self, dtype=None, type=None):
-        """
-        Returns a view of the mrecarray.
+        """Returns a view of the mrecarray.
+
+        Parameters
+        ----------
+        dtype :
+             (Default value = None)
+        type :
+             (Default value = None)
+
+        Returns
+        -------
 
         """
         # OK, basic copy-paste from MaskedArray.view.
@@ -400,35 +398,33 @@
         return output
 
     def harden_mask(self):
-        """
-        Forces the mask to hard.
-
-        """
+        """Forces the mask to hard."""
         self._hardmask = True
 
     def soften_mask(self):
-        """
-        Forces the mask to soft
-
-        """
+        """Forces the mask to soft"""
         self._hardmask = False
 
     def copy(self):
-        """
-        Returns a copy of the masked record.
-
-        """
+        """Returns a copy of the masked record."""
         copied = self._data.copy().view(type(self))
         copied._mask = self._mask.copy()
         return copied
 
     def tolist(self, fill_value=None):
         """
-        Return the data portion of the array as a list.
-
-        Data items are converted to the nearest compatible Python type.
-        Masked values are converted to fill_value. If fill_value is None,
-        the corresponding entries in the output list will be ``None``.
+
+        Parameters
+        ----------
+        fill_value :
+             (Default value = None)
+
+        Returns
+        -------
+        type
+            Data items are converted to the nearest compatible Python type.
+            Masked values are converted to fill_value. If fill_value is None,
+            the corresponding entries in the output list will be ``None``.
 
         """
         if fill_value is not None:
@@ -484,8 +480,21 @@
                 self.__getstate__())
 
 def _mrreconstruct(subtype, baseclass, baseshape, basetype,):
-    """
-    Build a new MaskedArray from the information stored in a pickle.
+    """Build a new MaskedArray from the information stored in a pickle.
+
+    Parameters
+    ----------
+    subtype :
+        
+    baseclass :
+        
+    baseshape :
+        
+    basetype :
+        
+
+    Returns
+    -------
 
     """
     _data = ndarray.__new__(baseclass, baseshape, basetype).view(subtype)
@@ -503,8 +512,7 @@
 def fromarrays(arraylist, dtype=None, shape=None, formats=None,
                names=None, titles=None, aligned=False, byteorder=None,
                fill_value=None):
-    """
-    Creates a mrecarray from a (flat) list of masked arrays.
+    """Creates a mrecarray from a (flat) list of masked arrays.
 
     Parameters
     ----------
@@ -513,23 +521,31 @@
         to a masked array if needed. If a 2D array is passed as argument, it is
         processed line by line
     dtype : {None, dtype}, optional
-        Data type descriptor.
+        Data type descriptor. (Default value = None)
     shape : {None, integer}, optional
         Number of records. If None, shape is defined from the shape of the
-        first array in the list.
+        first array in the list. (Default value = None)
     formats : {None, sequence}, optional
         Sequence of formats for each individual field. If None, the formats will
         be autodetected by inspecting the fields and selecting the highest dtype
-        possible.
+        possible. (Default value = None)
     names : {None, sequence}, optional
-        Sequence of the names of each field.
+        Sequence of the names of each field. (Default value = None)
     fill_value : {None, sequence}, optional
-        Sequence of data to be used as filling values.
+        Sequence of data to be used as filling values. (Default value = None)
+    titles :
+         (Default value = None)
+    aligned :
+         (Default value = False)
+    byteorder :
+         (Default value = None)
+
+    Returns
+    -------
 
     Notes
     -----
     Lists of tuples should be preferred over lists of lists for faster processing.
-
     """
     datalist = [getdata(x) for x in arraylist]
     masklist = [np.atleast_1d(getmaskarray(x)) for x in arraylist]
@@ -546,8 +562,7 @@
 def fromrecords(reclist, dtype=None, shape=None, formats=None, names=None,
                 titles=None, aligned=False, byteorder=None,
                 fill_value=None, mask=nomask):
-    """
-    Creates a MaskedRecords from a list of records.
+    """Creates a MaskedRecords from a list of records.
 
     Parameters
     ----------
@@ -556,25 +571,33 @@
         to a masked array if needed. If a 2D array is passed as argument, it is
         processed line by line
     dtype : {None, dtype}, optional
-        Data type descriptor.
+        Data type descriptor. (Default value = None)
     shape : {None,int}, optional
         Number of records. If None, ``shape`` is defined from the shape of the
-        first array in the list.
+        first array in the list. (Default value = None)
     formats : {None, sequence}, optional
         Sequence of formats for each individual field. If None, the formats will
         be autodetected by inspecting the fields and selecting the highest dtype
-        possible.
+        possible. (Default value = None)
     names : {None, sequence}, optional
-        Sequence of the names of each field.
+        Sequence of the names of each field. (Default value = None)
     fill_value : {None, sequence}, optional
-        Sequence of data to be used as filling values.
+        Sequence of data to be used as filling values. (Default value = None)
     mask : {nomask, sequence}, optional.
-        External mask to apply on the data.
+        External mask to apply on the data. (Default value = nomask)
+    titles :
+         (Default value = None)
+    aligned :
+         (Default value = False)
+    byteorder :
+         (Default value = None)
+
+    Returns
+    -------
 
     Notes
     -----
     Lists of tuples should be preferred over lists of lists for faster processing.
-
     """
     # Grab the initial _fieldmask, if needed:
     _mask = getattr(reclist, '_mask', None)
@@ -609,13 +632,20 @@
 
 
 def _guessvartypes(arr):
-    """
-    Tries to guess the dtypes of the str_ ndarray `arr`.
-
+    """Tries to guess the dtypes of the str_ ndarray `arr`.
+    
     Guesses by testing element-wise conversion. Returns a list of dtypes.
     The array is first converted to ndarray. If the array is 2D, the test
     is performed on the first line. An exception is raised if the file is
     3D or more.
+
+    Parameters
+    ----------
+    arr :
+        
+
+    Returns
+    -------
 
     """
     vartypes = []
@@ -646,8 +676,15 @@
 
 
 def openfile(fname):
-    """
-    Opens the file handle of file `fname`.
+    """Opens the file handle of file `fname`.
+
+    Parameters
+    ----------
+    fname :
+        
+
+    Returns
+    -------
 
     """
     # A file handle
@@ -667,29 +704,28 @@
 
 def fromtextfile(fname, delimitor=None, commentchar='#', missingchar='',
                  varnames=None, vartypes=None):
-    """
-    Creates a mrecarray from data stored in the file `filename`.
+    """Creates a mrecarray from data stored in the file `filename`.
 
     Parameters
     ----------
-    fname : {file name/handle}
-        Handle of an opened file.
-    delimitor : {None, string}, optional
-        Alphanumeric character used to separate columns in the file.
-        If None, any (group of) white spacestring(s) will be used.
-    commentchar : {'#', string}, optional
-        Alphanumeric character used to mark the start of a comment.
-    missingchar : {'', string}, optional
-        String indicating missing data, and used to create the masks.
-    varnames : {None, sequence}, optional
-        Sequence of the variable names. If None, a list will be created from
-        the first non empty line of the file.
-    vartypes : {None, sequence}, optional
-        Sequence of the variables dtypes. If None, it will be estimated from
-        the first non-commented line.
-
-
-    Ultra simple: the varnames are in the header, one line"""
+    fname :
+        
+    delimitor :
+         (Default value = None)
+    commentchar :
+         (Default value = '#')
+    missingchar :
+         (Default value = '')
+    varnames :
+         (Default value = None)
+    vartypes :
+         (Default value = None)
+
+    Returns
+    -------
+
+    
+    """
     # Try to open the file.
     ftext = openfile(fname)
 
@@ -735,10 +771,22 @@
 
 def addfield(mrecord, newfield, newfieldname=None):
     """Adds a new field to the masked record array
-
+    
     Uses `newfield` as data and `newfieldname` as name. If `newfieldname`
     is None, the new field name is set to 'fi', where `i` is the number of
     existing fields.
+
+    Parameters
+    ----------
+    mrecord :
+        
+    newfield :
+        
+    newfieldname :
+         (Default value = None)
+
+    Returns
+    -------
 
     """
     _data = mrecord._data
