# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test_recfunctions.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test_recfunctions.py
@@ -18,9 +18,11 @@
 
 
 class TestRecFunctions:
+    """ """
     # Misc tests
 
     def setup(self):
+        """ """
         x = np.array([1, 2, ])
         y = np.array([10, 20, 30])
         z = np.array([('A', 1.), ('B', 2.)],
@@ -30,6 +32,7 @@
         self.data = (w, x, y, z)
 
     def test_zip_descr(self):
+        """ """
         # Test zip_descr
         (w, x, y, z) = self.data
 
@@ -63,6 +66,7 @@
                                      ('b', [('ba', float), ('bb', int)])])]))
 
     def test_drop_fields(self):
+        """ """
         # Test drop_fields
         a = np.array([(1, (2, 3.0)), (4, (5, 6.0))],
                      dtype=[('a', int), ('b', [('ba', float), ('bb', int)])])
@@ -95,6 +99,7 @@
         assert_equal(test, control)
 
     def test_rename_fields(self):
+        """ """
         # Test rename fields
         a = np.array([(1, (2, [3.0, 30.])), (4, (5, [6.0, 60.]))],
                      dtype=[('a', int),
@@ -106,6 +111,7 @@
         assert_equal(test, control)
 
     def test_get_names(self):
+        """ """
         # Test get_names
         ndtype = np.dtype([('A', '|S3'), ('B', float)])
         test = get_names(ndtype)
@@ -124,6 +130,7 @@
         assert_equal(test, ())
 
     def test_get_names_flat(self):
+        """ """
         # Test get_names_flat
         ndtype = np.dtype([('A', '|S3'), ('B', float)])
         test = get_names_flat(ndtype)
@@ -142,6 +149,7 @@
         assert_equal(test, ())
 
     def test_get_fieldstructure(self):
+        """ """
         # Test get_fieldstructure
 
         # No nested fields
@@ -169,6 +177,7 @@
         assert_equal(test, {})
 
     def test_find_duplicates(self):
+        """ """
         # Test find_duplicates
         a = ma.array([(2, (2., 'B')), (1, (2., 'B')), (2, (2., 'B')),
                       (1, (1., 'B')), (2, (2., 'B')), (2, (2., 'C'))],
@@ -202,6 +211,7 @@
         assert_equal(test[0], a[test[-1]])
 
     def test_find_duplicates_ignoremask(self):
+        """ """
         # Test the ignoremask option of find_duplicates
         ndtype = [('a', int)]
         a = ma.array([1, 1, 1, 2, 2, 3, 3],
@@ -217,6 +227,7 @@
         assert_equal(test[0], a[test[-1]])
 
     def test_repack_fields(self):
+        """ """
         dt = np.dtype('u1,f4,i8', align=True)
         a = np.zeros(2, dtype=dt)
 
@@ -229,6 +240,7 @@
         assert_(repack_fields(dt).type is np.record)
 
     def test_structured_to_unstructured(self):
+        """ """
         a = np.zeros(4, dtype=[('a', 'i4'), ('b', 'f4,u2'), ('c', 'f4', 2)])
         out = structured_to_unstructured(a)
         assert_equal(out, np.zeros((4,5), dtype='f8'))
@@ -286,12 +298,49 @@
 
         # test nested combinations of subarrays and structured arrays, gh-13333
         def subarray(dt, shape):
+            """
+
+            Parameters
+            ----------
+            dt :
+                
+            shape :
+                
+
+            Returns
+            -------
+
+            """
             return np.dtype((dt, shape))
 
         def structured(*dts):
+            """
+
+            Parameters
+            ----------
+            *dts :
+                
+
+            Returns
+            -------
+
+            """
             return np.dtype([('x{}'.format(i), dt) for i, dt in enumerate(dts)])
 
         def inspect(dt, dtype=None):
+            """
+
+            Parameters
+            ----------
+            dt :
+                
+            dtype :
+                 (Default value = None)
+
+            Returns
+            -------
+
+            """
             arr = np.zeros((), dt)
             ret = structured_to_unstructured(arr, dtype=dtype)
             backarr = unstructured_to_structured(ret, dt)
@@ -319,6 +368,7 @@
                                            np.zeros((3,0), dtype=np.int32))
 
     def test_field_assignment_by_name(self):
+        """ """
         a = np.ones(2, dtype=[('a', 'i4'), ('b', 'f8'), ('c', 'u1')])
         newdt = [('b', 'f4'), ('c', 'u1')]
 
@@ -347,8 +397,10 @@
 
 
 class TestRecursiveFillFields:
+    """ """
     # Test recursive_fill_fields.
     def test_simple_flexible(self):
+        """ """
         # Test recursive_fill_fields on flexible-array
         a = np.array([(1, 10.), (2, 20.)], dtype=[('A', int), ('B', float)])
         b = np.zeros((3,), dtype=a.dtype)
@@ -358,6 +410,7 @@
         assert_equal(test, control)
 
     def test_masked_flexible(self):
+        """ """
         # Test recursive_fill_fields on masked flexible-array
         a = ma.array([(1, 10.), (2, 20.)], mask=[(0, 1), (1, 0)],
                      dtype=[('A', int), ('B', float)])
@@ -370,9 +423,11 @@
 
 
 class TestMergeArrays:
+    """ """
     # Test merge_arrays
 
     def setup(self):
+        """ """
         x = np.array([1, 2, ])
         y = np.array([10, 20, 30])
         z = np.array(
@@ -383,6 +438,7 @@
         self.data = (w, x, y, z)
 
     def test_solo(self):
+        """ """
         # Test merge_arrays on a single array.
         (_, x, _, z) = self.data
 
@@ -398,6 +454,7 @@
         assert_equal(test, z)
 
     def test_solo_w_flatten(self):
+        """ """
         # Test merge_arrays on a single array w & w/o flattening
         w = self.data[0]
         test = merge_arrays(w, flatten=False)
@@ -409,6 +466,7 @@
         assert_equal(test, control)
 
     def test_standard(self):
+        """ """
         # Test standard & standard
         # Test merge arrays
         (_, x, y, _) = self.data
@@ -425,6 +483,7 @@
         assert_equal(test.mask, control.mask)
 
     def test_flatten(self):
+        """ """
         # Test standard & flexible
         (_, x, _, z) = self.data
         test = merge_arrays((x, z), flatten=True)
@@ -439,6 +498,7 @@
         assert_equal(test, control)
 
     def test_flatten_wflexible(self):
+        """ """
         # Test flatten standard & nested
         (w, x, _, _) = self.data
         test = merge_arrays((x, w), flatten=True)
@@ -456,6 +516,7 @@
         assert_equal(test, control)
 
     def test_wmasked_arrays(self):
+        """ """
         # Test merge_arrays masked arrays
         (_, x, _, _) = self.data
         mx = ma.array([1, 2, 3], mask=[1, 0, 0])
@@ -469,6 +530,7 @@
         assert_(isinstance(test, MaskedRecords))
 
     def test_w_singlefield(self):
+        """ """
         # Test single field
         test = merge_arrays((np.array([1, 2]).view([('a', int)]),
                              np.array([10., 20., 30.])),)
@@ -478,6 +540,7 @@
         assert_equal(test, control)
 
     def test_w_shorter_flex(self):
+        """ """
         # Test merge_arrays w/ a shorter flexndarray.
         z = self.data[-1]
 
@@ -493,6 +556,7 @@
                  dtype=[('A', '|S3'), ('B', float), ('C', int)])
 
     def test_singlerecord(self):
+        """ """
         (_, x, y, z) = self.data
         test = merge_arrays((x[0], y[0], z[0]), usemask=False)
         control = np.array([(1, 10, ('A', 1))],
@@ -503,9 +567,11 @@
 
 
 class TestAppendFields:
+    """ """
     # Test append_fields
 
     def setup(self):
+        """ """
         x = np.array([1, 2, ])
         y = np.array([10, 20, 30])
         z = np.array(
@@ -515,6 +581,7 @@
         self.data = (w, x, y, z)
 
     def test_append_single(self):
+        """ """
         # Test simple case
         (_, x, _, _) = self.data
         test = append_fields(x, 'A', data=[10, 20, 30])
@@ -524,6 +591,7 @@
         assert_equal(test, control)
 
     def test_append_double(self):
+        """ """
         # Test simple case
         (_, x, _, _) = self.data
         test = append_fields(x, ('A', 'B'), data=[[10, 20, 30], [100, 200]])
@@ -533,6 +601,7 @@
         assert_equal(test, control)
 
     def test_append_on_flex(self):
+        """ """
         # Test append_fields on flexible type arrays
         z = self.data[-1]
         test = append_fields(z, 'C', data=[10, 20, 30])
@@ -542,6 +611,7 @@
         assert_equal(test, control)
 
     def test_append_on_nested(self):
+        """ """
         # Test append_fields on nested fields
         w = self.data[0]
         test = append_fields(w, 'C', data=[10, 20, 30])
@@ -557,8 +627,10 @@
 
 
 class TestStackArrays:
+    """ """
     # Test stack_arrays
     def setup(self):
+        """ """
         x = np.array([1, 2, ])
         y = np.array([10, 20, 30])
         z = np.array(
@@ -568,6 +640,7 @@
         self.data = (w, x, y, z)
 
     def test_solo(self):
+        """ """
         # Test stack_arrays on single arrays
         (_, x, _, _) = self.data
         test = stack_arrays((x,))
@@ -579,6 +652,7 @@
         assert_(test is x)
 
     def test_unnamed_fields(self):
+        """ """
         # Tests combinations of arrays w/o named fields
         (_, x, y, _) = self.data
 
@@ -595,6 +669,7 @@
         assert_equal(test, control)
 
     def test_unnamed_and_named_fields(self):
+        """ """
         # Test combination of arrays w/ & w/o named fields
         (_, x, _, z) = self.data
 
@@ -627,6 +702,7 @@
         assert_equal(test, control)
 
     def test_matching_named_fields(self):
+        """ """
         # Test combination of arrays w/ matching field names
         (_, x, _, z) = self.data
         zz = np.array([('a', 10., 100.), ('b', 20., 200.), ('c', 30., 300.)],
@@ -655,6 +731,7 @@
         assert_equal(test.mask, control.mask)
 
     def test_defaults(self):
+        """ """
         # Test defaults: no exception raised if keys of defaults are not fields.
         (_, _, _, z) = self.data
         zz = np.array([('a', 10., 100.), ('b', 20., 200.), ('c', 30., 300.)],
@@ -672,6 +749,7 @@
         assert_equal(test.mask, control.mask)
 
     def test_autoconversion(self):
+        """ """
         # Tests autoconversion
         adtype = [('A', int), ('B', bool), ('C', float)]
         a = ma.array([(1, 2, 3)], mask=[(0, 1, 0)], dtype=adtype)
@@ -686,6 +764,7 @@
             stack_arrays((a, b), autoconvert=False)
 
     def test_checktitles(self):
+        """ """
         # Test using titles in the field names
         adtype = [(('a', 'A'), int), (('b', 'B'), bool), (('c', 'C'), float)]
         a = ma.array([(1, 2, 3)], mask=[(0, 1, 0)], dtype=adtype)
@@ -698,6 +777,7 @@
         assert_equal(test.mask, control.mask)
 
     def test_subdtype(self):
+        """ """
         z = np.array([
             ('A', 1), ('B', 2)
         ], dtype=[('A', '|S3'), ('B', float, (1,))])
@@ -728,7 +808,9 @@
 
 
 class TestJoinBy:
+    """ """
     def setup(self):
+        """ """
         self.a = np.array(list(zip(np.arange(10), np.arange(50, 60),
                                    np.arange(100, 110))),
                           dtype=[('a', int), ('b', int), ('c', int)])
@@ -737,6 +819,7 @@
                           dtype=[('a', int), ('b', int), ('d', int)])
 
     def test_inner_join(self):
+        """ """
         # Basic test of join_by
         a, b = self.a, self.b
 
@@ -749,6 +832,7 @@
         assert_equal(test, control)
 
     def test_join(self):
+        """ """
         a, b = self.a, self.b
 
         # Fixme, this test is broken
@@ -769,6 +853,7 @@
                          ('c', int), ('d', int)])
 
     def test_join_subdtype(self):
+        """ """
         # tests the bug in https://stackoverflow.com/q/44769632/102441
         foo = np.array([(1,)],
                        dtype=[('key', int)])
@@ -778,6 +863,7 @@
         assert_equal(res, bar.view(ma.MaskedArray))
 
     def test_outer_join(self):
+        """ """
         a, b = self.a, self.b
 
         test = join_by(('a', 'b'), a, b, 'outer')
@@ -806,6 +892,7 @@
         assert_equal(test, control)
 
     def test_leftouter_join(self):
+        """ """
         a, b = self.a, self.b
 
         test = join_by(('a', 'b'), a, b, 'leftouter')
@@ -823,6 +910,7 @@
         assert_equal(test, control)
 
     def test_different_field_order(self):
+        """ """
         # gh-8940
         a = np.zeros(3, dtype=[('a', 'i4'), ('b', 'f4'), ('c', 'u1')])
         b = np.ones(3, dtype=[('c', 'u1'), ('b', 'f4'), ('a', 'i4')])
@@ -831,12 +919,14 @@
         assert_equal(j.dtype.names, ['b', 'c', 'a1', 'a2'])
 
     def test_duplicate_keys(self):
+        """ """
         a = np.zeros(3, dtype=[('a', 'i4'), ('b', 'f4'), ('c', 'u1')])
         b = np.ones(3, dtype=[('c', 'u1'), ('b', 'f4'), ('a', 'i4')])
         assert_raises(ValueError, join_by, ['a', 'b', 'b'], a, b)
 
     @pytest.mark.xfail(reason="See comment at gh-9343")
     def test_same_name_different_dtypes_key(self):
+        """ """
         a_dtype = np.dtype([('key', 'S5'), ('value', '<f4')])
         b_dtype = np.dtype([('key', 'S10'), ('value', '<f4')])
         expected_dtype = np.dtype([
@@ -849,6 +939,7 @@
         assert_equal(res.dtype, expected_dtype)
 
     def test_same_name_different_dtypes(self):
+        """ """
         # gh-9338
         a_dtype = np.dtype([('key', 'S10'), ('value', '<f4')])
         b_dtype = np.dtype([('key', 'S10'), ('value', '<f8')])
@@ -862,6 +953,7 @@
         assert_equal(res.dtype, expected_dtype)
 
     def test_subarray_key(self):
+        """ """
         a_dtype = np.dtype([('pos', int, 3), ('f', '<f4')])
         a = np.array([([1, 1, 1], np.pi), ([1, 2, 3], 0.0)], dtype=a_dtype)
 
@@ -876,6 +968,7 @@
         assert_equal(res, expected)
 
     def test_padded_dtype(self):
+        """ """
         dt = np.dtype('i1,f4', align=True)
         dt.names = ('k', 'v')
         assert_(len(dt.descr), 3)  # padding field is inserted
@@ -893,8 +986,10 @@
 
 
 class TestJoinBy2:
+    """ """
     @classmethod
     def setup(cls):
+        """ """
         cls.a = np.array(list(zip(np.arange(10), np.arange(50, 60),
                                   np.arange(100, 110))),
                          dtype=[('a', int), ('b', int), ('c', int)])
@@ -903,6 +998,7 @@
                          dtype=[('a', int), ('b', int), ('d', int)])
 
     def test_no_r1postfix(self):
+        """ """
         # Basic test of join_by no_r1postfix
         a, b = self.a, self.b
 
@@ -918,10 +1014,12 @@
         assert_equal(test, control)
 
     def test_no_postfix(self):
+        """ """
         assert_raises(ValueError, join_by, 'a', self.a, self.b,
                       r1postfix='', r2postfix='')
 
     def test_no_r2postfix(self):
+        """ """
         # Basic test of join_by no_r2postfix
         a, b = self.a, self.b
 
@@ -937,6 +1035,7 @@
         assert_equal(test, control)
 
     def test_two_keys_two_vars(self):
+        """ """
         a = np.array(list(zip(np.tile([10, 11], 5), np.repeat(np.arange(5), 2),
                               np.arange(50, 60), np.arange(10, 20))),
                      dtype=[('k', int), ('a', int), ('b', int), ('c', int)])
@@ -958,16 +1057,16 @@
         assert_equal(test, control)
 
 class TestAppendFieldsObj:
-    """
-    Test append_fields with arrays containing objects
-    """
+    """Test append_fields with arrays containing objects"""
     # https://github.com/numpy/numpy/issues/2346
 
     def setup(self):
+        """ """
         from datetime import date
         self.data = dict(obj=date(2000, 1, 1))
 
     def test_append_to_objects(self):
+        """ """
         "Test append_fields when the base array contains objects"
         obj = self.data['obj']
         x = np.array([(obj, 1.), (obj, 2.)],
