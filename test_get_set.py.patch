# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/multi/test_get_set.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/multi/test_get_set.py
@@ -7,6 +7,21 @@
 
 
 def assert_matching(actual, expected, check_dtype=False):
+    """
+
+    Parameters
+    ----------
+    actual :
+        
+    expected :
+        
+    check_dtype :
+         (Default value = False)
+
+    Returns
+    -------
+
+    """
     # avoid specifying internal representation
     # as much as possible
     assert len(actual) == len(expected)
@@ -17,6 +32,17 @@
 
 
 def test_get_level_number_integer(idx):
+    """
+
+    Parameters
+    ----------
+    idx :
+        
+
+    Returns
+    -------
+
+    """
     idx.names = [1, 0]
     assert idx._get_level_number(1) == 0
     assert idx._get_level_number(0) == 1
@@ -28,6 +54,19 @@
 
 
 def test_set_name_methods(idx, index_names):
+    """
+
+    Parameters
+    ----------
+    idx :
+        
+    index_names :
+        
+
+    Returns
+    -------
+
+    """
     # so long as these are synonyms, we don't need to test set_names
     assert idx.rename == idx.set_names
     new_names = [name + "SUFFIX" for name in index_names]
@@ -62,6 +101,17 @@
 
 
 def test_set_levels_codes_directly(idx):
+    """
+
+    Parameters
+    ----------
+    idx :
+        
+
+    Returns
+    -------
+
+    """
     # setting levels/codes directly raises AttributeError
 
     levels = idx.levels
@@ -81,6 +131,17 @@
 
 
 def test_set_levels(idx):
+    """
+
+    Parameters
+    ----------
+    idx :
+        
+
+    Returns
+    -------
+
+    """
     # side note - you probably wouldn't want to use levels and codes
     # directly like this - but it is possible.
     levels = idx.levels
@@ -153,6 +214,17 @@
 
 
 def test_set_codes(idx):
+    """
+
+    Parameters
+    ----------
+    idx :
+        
+
+    Returns
+    -------
+
+    """
     # side note - you probably wouldn't want to use levels and codes
     # directly like this - but it is possible.
     codes = idx.codes
@@ -222,6 +294,17 @@
 
 
 def test_set_levels_codes_names_bad_input(idx):
+    """
+
+    Parameters
+    ----------
+    idx :
+        
+
+    Returns
+    -------
+
+    """
     levels, codes = idx.levels, idx.codes
     names = idx.names
 
@@ -270,6 +353,17 @@
 
 @pytest.mark.parametrize("inplace", [True, False])
 def test_set_names_with_nlevel_1(inplace):
+    """
+
+    Parameters
+    ----------
+    inplace :
+        
+
+    Returns
+    -------
+
+    """
     # GH 21149
     # Ensure that .set_names for MultiIndex with
     # nlevels == 1 does not raise any errors
@@ -285,6 +379,17 @@
 
 @pytest.mark.parametrize("ordered", [True, False])
 def test_set_levels_categorical(ordered):
+    """
+
+    Parameters
+    ----------
+    ordered :
+        
+
+    Returns
+    -------
+
+    """
     # GH13854
     index = MultiIndex.from_arrays([list("xyzx"), [0, 1, 2, 3]])
 
@@ -301,6 +406,7 @@
 
 
 def test_set_value_keeps_names():
+    """ """
     # motivating example from #3742
     lev1 = ["hans", "hans", "hans", "grethe", "grethe", "grethe"]
     lev2 = ["1", "2", "3"] * 2
@@ -317,6 +423,7 @@
 
 
 def test_set_levels_with_iterable():
+    """ """
     # GH23273
     sizes = [1, 2, 3]
     colors = ["black"] * 3
