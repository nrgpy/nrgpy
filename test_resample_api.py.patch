# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/resample/test_resample_api.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/resample/test_resample_api.py
@@ -17,10 +17,12 @@
 
 @pytest.fixture
 def test_frame():
+    """ """
     return _test_frame.copy()
 
 
 def test_str():
+    """ """
 
     r = test_series.resample("H")
     assert (
@@ -36,6 +38,7 @@
 
 
 def test_api():
+    """ """
 
     r = test_series.resample("H")
     result = r.mean()
@@ -49,6 +52,7 @@
 
 
 def test_groupby_resample_api():
+    """ """
 
     # GH 12448
     # .groupby(...).resample(...) hitting warnings
@@ -73,6 +77,7 @@
 
 
 def test_groupby_resample_on_api():
+    """ """
 
     # GH 15021
     # .groupby(...).resample(on=...) results in an unexpected
@@ -92,6 +97,17 @@
 
 
 def test_pipe(test_frame):
+    """
+
+    Parameters
+    ----------
+    test_frame :
+        
+
+    Returns
+    -------
+
+    """
     # GH17905
 
     # series
@@ -108,6 +124,17 @@
 
 
 def test_getitem(test_frame):
+    """
+
+    Parameters
+    ----------
+    test_frame :
+        
+
+    Returns
+    -------
+
+    """
 
     r = test_frame.resample("H")
     tm.assert_index_equal(r._selected_obj.columns, test_frame.columns)
@@ -125,6 +152,19 @@
 
 @pytest.mark.parametrize("key", [["D"], ["A", "D"]])
 def test_select_bad_cols(key, test_frame):
+    """
+
+    Parameters
+    ----------
+    key :
+        
+    test_frame :
+        
+
+    Returns
+    -------
+
+    """
     g = test_frame.resample("H")
     # 'A' should not be referenced as a bad column...
     # will have to rethink regex if you change message!
@@ -134,12 +174,24 @@
 
 
 def test_attribute_access(test_frame):
+    """
+
+    Parameters
+    ----------
+    test_frame :
+        
+
+    Returns
+    -------
+
+    """
 
     r = test_frame.resample("H")
     tm.assert_series_equal(r.A.sum(), r["A"].sum())
 
 
 def test_api_compat_before_use():
+    """ """
 
     # make sure that we are setting the binner
     # on these attributes
@@ -157,6 +209,17 @@
 
 
 def tests_skip_nuisance(test_frame):
+    """
+
+    Parameters
+    ----------
+    test_frame :
+        
+
+    Returns
+    -------
+
+    """
 
     df = test_frame
     df["D"] = "foo"
@@ -171,6 +234,7 @@
 
 
 def test_downsample_but_actually_upsampling():
+    """ """
 
     # this is reindex / asfreq
     rng = pd.date_range("1/1/2012", periods=100, freq="S")
@@ -184,6 +248,7 @@
 
 
 def test_combined_up_downsampling_of_irregular():
+    """ """
 
     # since we are really doing an operation like this
     # ts2.resample('2s').mean().ffill()
@@ -240,6 +305,7 @@
 
 
 def test_transform():
+    """ """
 
     r = test_series.resample("20min")
     expected = test_series.groupby(pd.Grouper(freq="20min")).transform("mean")
@@ -248,6 +314,7 @@
 
 
 def test_fillna():
+    """ """
 
     # need to upsample here
     rng = pd.date_range("1/1/2012", periods=10, freq="2S")
@@ -271,6 +338,7 @@
 
 
 def test_apply_without_aggregation():
+    """ """
 
     # both resample and groupby should work w/o aggregation
     r = test_series.resample("20min")
@@ -282,6 +350,7 @@
 
 
 def test_agg_consistency():
+    """ """
 
     # make sure that we are consistent across
     # similar aggregations with and w/o selection list
@@ -303,6 +372,7 @@
 
 
 def test_agg():
+    """ """
     # test with all three Resampler apis and TimeGrouper
 
     np.random.seed(1234)
@@ -390,6 +460,7 @@
 
 
 def test_agg_misc():
+    """ """
     # test with all three Resampler apis and TimeGrouper
 
     np.random.seed(1234)
@@ -465,6 +536,7 @@
 
 
 def test_agg_nested_dicts():
+    """ """
 
     np.random.seed(1234)
     index = date_range(datetime(2005, 1, 1), datetime(2005, 1, 10), freq="D")
@@ -500,6 +572,7 @@
 
 
 def test_try_aggregate_non_existing_column():
+    """ """
     # GH 16766
     data = [
         {"dt": datetime(2017, 6, 1, 0), "x": 1.0, "y": 2.0},
@@ -515,6 +588,7 @@
 
 
 def test_selection_api_validation():
+    """ """
     # GH 13500
     index = date_range(datetime(2005, 1, 1), datetime(2005, 1, 10), freq="D")
 
@@ -567,6 +641,17 @@
     "col_name", ["t2", "t2x", "t2q", "T_2M", "t2p", "t2m", "t2m1", "T2M"]
 )
 def test_agg_with_datetime_index_list_agg_func(col_name):
+    """
+
+    Parameters
+    ----------
+    col_name :
+        
+
+    Returns
+    -------
+
+    """
     # GH 22660
     # The parametrized column names would get converted to dates by our
     # date parser. Some would result in OutOfBoundsError (ValueError) while
@@ -591,6 +676,7 @@
 
 
 def test_resample_agg_readonly():
+    """ """
     # GH#31710 cython needs to allow readonly data
     index = pd.date_range("2020-01-01", "2020-01-02", freq="1h")
     arr = np.zeros_like(index)
