# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pexpect/screen.py
+++ b/..//venv/lib/python3.8/site-packages/pexpect/screen.py
@@ -59,7 +59,21 @@
 
 def constrain (n, min, max):
 
-    '''This returns a number, n constrained to the min and max bounds. '''
+    """This returns a number, n constrained to the min and max bounds.
+
+    Parameters
+    ----------
+    n :
+        
+    min :
+        
+    max :
+        
+
+    Returns
+    -------
+
+    """
 
     if n < min:
         return min
@@ -68,12 +82,12 @@
     return n
 
 class screen:
-    '''This object maintains the state of a virtual text screen as a
+    """This object maintains the state of a virtual text screen as a
     rectangular array. This maintains a virtual cursor position and handles
     scrolling as characters are added. This supports most of the methods needed
     by an ANSI text screen. Row and column indexes are 1-based (not zero-based,
     like arrays).
-
+    
     Characters are represented internally using unicode. Methods that accept
     input characters, when passed 'bytes' (which in Python 2 is equivalent to
     'str'), convert them from the encoding specified in the 'encoding'
@@ -81,7 +95,14 @@
     unicode strings, with the exception of __str__() under Python 2. Passing
     ``encoding=None`` limits the API to only accept unicode input, so passing
     bytes in will raise :exc:`TypeError`.
-    '''
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
     def __init__(self, r=24, c=80, encoding='latin-1', encoding_errors='replace'):
         '''This initializes a blank screen of the given dimensions.'''
 
@@ -102,8 +123,18 @@
         self.w = [ [SPACE] * self.cols for _ in range(self.rows)]
 
     def _decode(self, s):
-        '''This converts from the external coding system (as passed to
-        the constructor) to the internal one (unicode). '''
+        """This converts from the external coding system (as passed to
+        the constructor) to the internal one (unicode).
+
+        Parameters
+        ----------
+        s :
+            
+
+        Returns
+        -------
+
+        """
         if self.decoder is not None:
             return self.decoder.decode(s)
         else:
@@ -111,9 +142,17 @@
                             "so it does not handle bytes.")
 
     def _unicode(self):
-        '''This returns a printable representation of the screen as a unicode
+        """This returns a printable representation of the screen as a unicode
         string (which, under Python 3.x, is the same as 'str'). The end of each
-        screen line is terminated by a newline.'''
+        screen line is terminated by a newline.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
 
         return u'\n'.join ([ u''.join(c) for c in self.w ])
 
@@ -129,21 +168,48 @@
             return self._unicode().encode(encoding, 'replace')
 
     def dump (self):
-        '''This returns a copy of the screen as a unicode string. This is similar to
+        """This returns a copy of the screen as a unicode string. This is similar to
         __str__/__unicode__ except that lines are not terminated with line
-        feeds.'''
+        feeds.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
 
         return u''.join ([ u''.join(c) for c in self.w ])
 
     def pretty (self):
-        '''This returns a copy of the screen as a unicode string with an ASCII
+        """This returns a copy of the screen as a unicode string with an ASCII
         text box around the screen border. This is similar to
-        __str__/__unicode__ except that it adds a box.'''
+        __str__/__unicode__ except that it adds a box.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
 
         top_bot = u'+' + u'-'*self.cols + u'+\n'
         return top_bot + u'\n'.join([u'|'+line+u'|' for line in unicode(self).split(u'\n')]) + u'\n' + top_bot
 
     def fill (self, ch=SPACE):
+        """
+
+        Parameters
+        ----------
+        ch :
+             (Default value = SPACE)
+
+        Returns
+        -------
+
+        """
 
         if isinstance(ch, bytes):
             ch = self._decode(ch)
@@ -151,6 +217,25 @@
         self.fill_region (1,1,self.rows,self.cols, ch)
 
     def fill_region (self, rs,cs, re,ce, ch=SPACE):
+        """
+
+        Parameters
+        ----------
+        rs :
+            
+        cs :
+            
+        re :
+            
+        ce :
+            
+        ch :
+             (Default value = SPACE)
+
+        Returns
+        -------
+
+        """
 
         if isinstance(ch, bytes):
             ch = self._decode(ch)
@@ -168,14 +253,12 @@
                 self.put_abs (r,c,ch)
 
     def cr (self):
-        '''This moves the cursor to the beginning (col 1) of the current row.
-        '''
+        """This moves the cursor to the beginning (col 1) of the current row."""
 
         self.cursor_home (self.cur_r, 1)
 
     def lf (self):
-        '''This moves the cursor down with scrolling.
-        '''
+        """This moves the cursor down with scrolling."""
 
         old_r = self.cur_r
         self.cursor_down()
@@ -184,21 +267,41 @@
             self.erase_line()
 
     def crlf (self):
-        '''This advances the cursor with CRLF properties.
+        """This advances the cursor with CRLF properties.
         The cursor will line wrap and the screen may scroll.
-        '''
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
 
         self.cr ()
         self.lf ()
 
     def newline (self):
-        '''This is an alias for crlf().
-        '''
+        """This is an alias for crlf()."""
 
         self.crlf()
 
     def put_abs (self, r, c, ch):
-        '''Screen array starts at 1 index.'''
+        """Screen array starts at 1 index.
+
+        Parameters
+        ----------
+        r :
+            
+        c :
+            
+        ch :
+            
+
+        Returns
+        -------
+
+        """
 
         r = constrain (r, 1, self.rows)
         c = constrain (c, 1, self.cols)
@@ -209,8 +312,17 @@
         self.w[r-1][c-1] = ch
 
     def put (self, ch):
-        '''This puts a characters at the current cursor position.
-        '''
+        """This puts a characters at the current cursor position.
+
+        Parameters
+        ----------
+        ch :
+            
+
+        Returns
+        -------
+
+        """
 
         if isinstance(ch, bytes):
             ch = self._decode(ch)
@@ -218,10 +330,23 @@
         self.put_abs (self.cur_r, self.cur_c, ch)
 
     def insert_abs (self, r, c, ch):
-        '''This inserts a character at (r,c). Everything under
+        """This inserts a character at (r,c). Everything under
         and to the right is shifted right one character.
         The last character of the line is lost.
-        '''
+
+        Parameters
+        ----------
+        r :
+            
+        c :
+            
+        ch :
+            
+
+        Returns
+        -------
+
+        """
 
         if isinstance(ch, bytes):
             ch = self._decode(ch)
@@ -233,6 +358,17 @@
         self.put_abs (r,c,ch)
 
     def insert (self, ch):
+        """
+
+        Parameters
+        ----------
+        ch :
+            
+
+        Returns
+        -------
+
+        """
 
         if isinstance(ch, bytes):
             ch = self._decode(ch)
@@ -240,18 +376,47 @@
         self.insert_abs (self.cur_r, self.cur_c, ch)
 
     def get_abs (self, r, c):
+        """
+
+        Parameters
+        ----------
+        r :
+            
+        c :
+            
+
+        Returns
+        -------
+
+        """
 
         r = constrain (r, 1, self.rows)
         c = constrain (c, 1, self.cols)
         return self.w[r-1][c-1]
 
     def get (self):
+        """ """
 
         self.get_abs (self.cur_r, self.cur_c)
 
     def get_region (self, rs,cs, re,ce):
-        '''This returns a list of lines representing the region.
-        '''
+        """This returns a list of lines representing the region.
+
+        Parameters
+        ----------
+        rs :
+            
+        cs :
+            
+        re :
+            
+        ce :
+            
+
+        Returns
+        -------
+
+        """
 
         rs = constrain (rs, 1, self.rows)
         re = constrain (re, 1, self.rows)
@@ -271,39 +436,106 @@
         return sc
 
     def cursor_constrain (self):
-        '''This keeps the cursor within the screen area.
-        '''
+        """This keeps the cursor within the screen area."""
 
         self.cur_r = constrain (self.cur_r, 1, self.rows)
         self.cur_c = constrain (self.cur_c, 1, self.cols)
 
     def cursor_home (self, r=1, c=1): # <ESC>[{ROW};{COLUMN}H
+        """
+
+        Parameters
+        ----------
+        r :
+             (Default value = 1)
+        c :
+             (Default value = 1)
+
+        Returns
+        -------
+
+        """
 
         self.cur_r = r
         self.cur_c = c
         self.cursor_constrain ()
 
     def cursor_back (self,count=1): # <ESC>[{COUNT}D (not confused with down)
+        """
+
+        Parameters
+        ----------
+        count :
+             (Default value = 1): # <ESC>[{COUNT}D (not confused with down)
+
+        Returns
+        -------
+
+        """
 
         self.cur_c = self.cur_c - count
         self.cursor_constrain ()
 
     def cursor_down (self,count=1): # <ESC>[{COUNT}B (not confused with back)
+        """
+
+        Parameters
+        ----------
+        count :
+             (Default value = 1): # <ESC>[{COUNT}B (not confused with back)
+
+        Returns
+        -------
+
+        """
 
         self.cur_r = self.cur_r + count
         self.cursor_constrain ()
 
     def cursor_forward (self,count=1): # <ESC>[{COUNT}C
+        """
+
+        Parameters
+        ----------
+        count :
+             (Default value = 1)
+
+        Returns
+        -------
+
+        """
 
         self.cur_c = self.cur_c + count
         self.cursor_constrain ()
 
     def cursor_up (self,count=1): # <ESC>[{COUNT}A
+        """
+
+        Parameters
+        ----------
+        count :
+             (Default value = 1)
+
+        Returns
+        -------
+
+        """
 
         self.cur_r = self.cur_r - count
         self.cursor_constrain ()
 
     def cursor_up_reverse (self): # <ESC> M   (called RI -- Reverse Index)
+        """
+
+        Parameters
+        ----------
+        self): # <ESC> M   (called RI -- Reverse Index :
+            
+
+        Returns
+        -------
+
+        """
 
         old_r = self.cur_r
         self.cursor_up()
@@ -311,33 +543,45 @@
             self.scroll_up()
 
     def cursor_force_position (self, r, c): # <ESC>[{ROW};{COLUMN}f
-        '''Identical to Cursor Home.'''
+        """Identical to Cursor Home.
+
+        Parameters
+        ----------
+        r :
+            
+        c :
+            
+
+        Returns
+        -------
+
+        """
 
         self.cursor_home (r, c)
 
     def cursor_save (self): # <ESC>[s
-        '''Save current cursor position.'''
+        """Save current cursor position."""
 
         self.cursor_save_attrs()
 
     def cursor_unsave (self): # <ESC>[u
-        '''Restores cursor position after a Save Cursor.'''
+        """Restores cursor position after a Save Cursor."""
 
         self.cursor_restore_attrs()
 
     def cursor_save_attrs (self): # <ESC>7
-        '''Save current cursor position.'''
+        """Save current cursor position."""
 
         self.cur_saved_r = self.cur_r
         self.cur_saved_c = self.cur_c
 
     def cursor_restore_attrs (self): # <ESC>8
-        '''Restores cursor position after a Save Cursor.'''
+        """Restores cursor position after a Save Cursor."""
 
         self.cursor_home (self.cur_saved_r, self.cur_saved_c)
 
     def scroll_constrain (self):
-        '''This keeps the scroll region within the screen region.'''
+        """This keeps the scroll region within the screen region."""
 
         if self.scroll_row_start <= 0:
             self.scroll_row_start = 1
@@ -345,20 +589,32 @@
             self.scroll_row_end = self.rows
 
     def scroll_screen (self): # <ESC>[r
-        '''Enable scrolling for entire display.'''
+        """Enable scrolling for entire display."""
 
         self.scroll_row_start = 1
         self.scroll_row_end = self.rows
 
     def scroll_screen_rows (self, rs, re): # <ESC>[{start};{end}r
-        '''Enable scrolling from row {start} to row {end}.'''
+        """Enable scrolling from row {start} to row {end}.
+
+        Parameters
+        ----------
+        rs :
+            
+        re :
+            
+
+        Returns
+        -------
+
+        """
 
         self.scroll_row_start = rs
         self.scroll_row_end = re
         self.scroll_constrain()
 
     def scroll_down (self): # <ESC>D
-        '''Scroll display down one line.'''
+        """Scroll display down one line."""
 
         # Screen is indexed from 1, but arrays are indexed from 0.
         s = self.scroll_row_start - 1
@@ -366,7 +622,7 @@
         self.w[s+1:e+1] = copy.deepcopy(self.w[s:e])
 
     def scroll_up (self): # <ESC>M
-        '''Scroll display up one line.'''
+        """Scroll display up one line."""
 
         # Screen is indexed from 1, but arrays are indexed from 0.
         s = self.scroll_row_start - 1
@@ -374,53 +630,85 @@
         self.w[s:e] = copy.deepcopy(self.w[s+1:e+1])
 
     def erase_end_of_line (self): # <ESC>[0K -or- <ESC>[K
-        '''Erases from the current cursor position to the end of the current
-        line.'''
+        """Erases from the current cursor position to the end of the current
+        line.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
 
         self.fill_region (self.cur_r, self.cur_c, self.cur_r, self.cols)
 
     def erase_start_of_line (self): # <ESC>[1K
-        '''Erases from the current cursor position to the start of the current
-        line.'''
+        """Erases from the current cursor position to the start of the current
+        line.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
 
         self.fill_region (self.cur_r, 1, self.cur_r, self.cur_c)
 
     def erase_line (self): # <ESC>[2K
-        '''Erases the entire current line.'''
+        """Erases the entire current line."""
 
         self.fill_region (self.cur_r, 1, self.cur_r, self.cols)
 
     def erase_down (self): # <ESC>[0J -or- <ESC>[J
-        '''Erases the screen from the current line down to the bottom of the
-        screen.'''
+        """Erases the screen from the current line down to the bottom of the
+        screen.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
 
         self.erase_end_of_line ()
         self.fill_region (self.cur_r + 1, 1, self.rows, self.cols)
 
     def erase_up (self): # <ESC>[1J
-        '''Erases the screen from the current line up to the top of the
-        screen.'''
+        """Erases the screen from the current line up to the top of the
+        screen.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
 
         self.erase_start_of_line ()
         self.fill_region (self.cur_r-1, 1, 1, self.cols)
 
     def erase_screen (self): # <ESC>[2J
-        '''Erases the screen with the background color.'''
+        """Erases the screen with the background color."""
 
         self.fill ()
 
     def set_tab (self): # <ESC>H
-        '''Sets a tab at the current position.'''
+        """Sets a tab at the current position."""
 
         pass
 
     def clear_tab (self): # <ESC>[g
-        '''Clears tab at the current position.'''
+        """Clears tab at the current position."""
 
         pass
 
     def clear_all_tabs (self): # <ESC>[3g
-        '''Clears all tabs.'''
+        """Clears all tabs."""
 
         pass
 
