# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/generic/test_label_or_level_utils.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/generic/test_label_or_level_utils.py
@@ -9,13 +9,25 @@
 # ========
 @pytest.fixture
 def df():
-    """DataFrame with columns 'L1', 'L2', and 'L3' """
+    """DataFrame with columns 'L1', 'L2', and 'L3'"""
     return pd.DataFrame({"L1": [1, 2, 3], "L2": [11, 12, 13], "L3": ["A", "B", "C"]})
 
 
 @pytest.fixture(params=[[], ["L1"], ["L1", "L2"], ["L1", "L2", "L3"]])
 def df_levels(request, df):
-    """DataFrame with columns or index levels 'L1', 'L2', and 'L3' """
+    """DataFrame with columns or index levels 'L1', 'L2', and 'L3'
+
+    Parameters
+    ----------
+    request :
+        
+    df :
+        
+
+    Returns
+    -------
+
+    """
     levels = request.param
 
     if levels:
@@ -26,7 +38,17 @@
 
 @pytest.fixture
 def df_ambig(df):
-    """DataFrame with levels 'L1' and 'L2' and labels 'L1' and 'L3' """
+    """DataFrame with levels 'L1' and 'L2' and labels 'L1' and 'L3'
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
     df = df.set_index(["L1", "L2"])
 
     df["L1"] = df["L3"]
@@ -36,7 +58,17 @@
 
 @pytest.fixture
 def df_duplabels(df):
-    """DataFrame with level 'L1' and labels 'L2', 'L3', and 'L2' """
+    """DataFrame with level 'L1' and labels 'L2', 'L3', and 'L2'
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
     df = df.set_index(["L1"])
     df = pd.concat([df, df["L2"]], axis=1)
 
@@ -46,12 +78,38 @@
 # Test is label/level reference
 # =============================
 def get_labels_levels(df_levels):
+    """
+
+    Parameters
+    ----------
+    df_levels :
+        
+
+    Returns
+    -------
+
+    """
     expected_labels = list(df_levels.columns)
     expected_levels = [name for name in df_levels.index.names if name is not None]
     return expected_labels, expected_levels
 
 
 def assert_label_reference(frame, labels, axis):
+    """
+
+    Parameters
+    ----------
+    frame :
+        
+    labels :
+        
+    axis :
+        
+
+    Returns
+    -------
+
+    """
     for label in labels:
         assert frame._is_label_reference(label, axis=axis)
         assert not frame._is_level_reference(label, axis=axis)
@@ -59,6 +117,21 @@
 
 
 def assert_level_reference(frame, levels, axis):
+    """
+
+    Parameters
+    ----------
+    frame :
+        
+    levels :
+        
+    axis :
+        
+
+    Returns
+    -------
+
+    """
     for level in levels:
         assert frame._is_level_reference(level, axis=axis)
         assert not frame._is_label_reference(level, axis=axis)
@@ -68,6 +141,19 @@
 # DataFrame
 # ---------
 def test_is_level_or_label_reference_df_simple(df_levels, axis):
+    """
+
+    Parameters
+    ----------
+    df_levels :
+        
+    axis :
+        
+
+    Returns
+    -------
+
+    """
 
     # Compute expected labels and levels
     expected_labels, expected_levels = get_labels_levels(df_levels)
@@ -82,6 +168,19 @@
 
 
 def test_is_level_reference_df_ambig(df_ambig, axis):
+    """
+
+    Parameters
+    ----------
+    df_ambig :
+        
+    axis :
+        
+
+    Returns
+    -------
+
+    """
 
     # Transpose frame if axis == 1
     if axis in {1, "columns"}:
@@ -102,6 +201,17 @@
 # Series
 # ------
 def test_is_level_reference_series_simple_axis0(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
 
     # Make series with L1 as index
     s = df.set_index("L1").L2
@@ -115,6 +225,17 @@
 
 
 def test_is_level_reference_series_axis1_error(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
 
     # Make series with L1 as index
     s = df.set_index("L1").L2
@@ -129,6 +250,19 @@
 # DataFrame
 # ---------
 def test_check_label_or_level_ambiguity_df(df_ambig, axis):
+    """
+
+    Parameters
+    ----------
+    df_ambig :
+        
+    axis :
+        
+
+    Returns
+    -------
+
+    """
 
     # Transpose frame if axis == 1
     if axis in {1, "columns"}:
@@ -154,6 +288,17 @@
 # Series
 # ------
 def test_check_label_or_level_ambiguity_series(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
 
     # A series has no columns and therefore references are never ambiguous
 
@@ -170,6 +315,17 @@
 
 
 def test_check_label_or_level_ambiguity_series_axis1_error(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
 
     # Make series with L1 as index
     s = df.set_index("L1").L2
@@ -181,6 +337,21 @@
 # Test _get_label_or_level_values
 # ===============================
 def assert_label_values(frame, labels, axis):
+    """
+
+    Parameters
+    ----------
+    frame :
+        
+    labels :
+        
+    axis :
+        
+
+    Returns
+    -------
+
+    """
     for label in labels:
         if axis in {0, "index"}:
             expected = frame[label]._values
@@ -192,6 +363,21 @@
 
 
 def assert_level_values(frame, levels, axis):
+    """
+
+    Parameters
+    ----------
+    frame :
+        
+    levels :
+        
+    axis :
+        
+
+    Returns
+    -------
+
+    """
     for level in levels:
         if axis in {0, "index"}:
             expected = frame.index.get_level_values(level=level)._values
@@ -205,6 +391,19 @@
 # DataFrame
 # ---------
 def test_get_label_or_level_values_df_simple(df_levels, axis):
+    """
+
+    Parameters
+    ----------
+    df_levels :
+        
+    axis :
+        
+
+    Returns
+    -------
+
+    """
 
     # Compute expected labels and levels
     expected_labels, expected_levels = get_labels_levels(df_levels)
@@ -219,6 +418,19 @@
 
 
 def test_get_label_or_level_values_df_ambig(df_ambig, axis):
+    """
+
+    Parameters
+    ----------
+    df_ambig :
+        
+    axis :
+        
+
+    Returns
+    -------
+
+    """
 
     # Transpose frame if axis == 1
     if axis in {1, "columns"}:
@@ -232,6 +444,19 @@
 
 
 def test_get_label_or_level_values_df_duplabels(df_duplabels, axis):
+    """
+
+    Parameters
+    ----------
+    df_duplabels :
+        
+    axis :
+        
+
+    Returns
+    -------
+
+    """
 
     # Transpose frame if axis == 1
     if axis in {1, "columns"}:
@@ -256,6 +481,17 @@
 # Series
 # ------
 def test_get_label_or_level_values_series_axis0(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
 
     # Make series with L1 as index
     s = df.set_index("L1").L2
@@ -267,6 +503,17 @@
 
 
 def test_get_label_or_level_values_series_axis1_error(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
 
     # Make series with L1 as index
     s = df.set_index("L1").L2
@@ -278,6 +525,21 @@
 # Test _drop_labels_or_levels
 # ===========================
 def assert_labels_dropped(frame, labels, axis):
+    """
+
+    Parameters
+    ----------
+    frame :
+        
+    labels :
+        
+    axis :
+        
+
+    Returns
+    -------
+
+    """
     for label in labels:
         df_dropped = frame._drop_labels_or_levels(label, axis=axis)
 
@@ -290,6 +552,21 @@
 
 
 def assert_levels_dropped(frame, levels, axis):
+    """
+
+    Parameters
+    ----------
+    frame :
+        
+    levels :
+        
+    axis :
+        
+
+    Returns
+    -------
+
+    """
     for level in levels:
         df_dropped = frame._drop_labels_or_levels(level, axis=axis)
 
@@ -304,6 +581,19 @@
 # DataFrame
 # ---------
 def test_drop_labels_or_levels_df(df_levels, axis):
+    """
+
+    Parameters
+    ----------
+    df_levels :
+        
+    axis :
+        
+
+    Returns
+    -------
+
+    """
 
     # Compute expected labels and levels
     expected_labels, expected_levels = get_labels_levels(df_levels)
@@ -323,6 +613,17 @@
 # Series
 # ------
 def test_drop_labels_or_levels_series(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
 
     # Make series with L1 as index
     s = df.set_index("L1").L2
