# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tseries/holiday.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tseries/holiday.py
@@ -13,9 +13,17 @@
 
 
 def next_monday(dt):
-    """
-    If holiday falls on Saturday, use following Monday instead;
+    """If holiday falls on Saturday, use following Monday instead;
     if holiday falls on Sunday, use Monday instead
+
+    Parameters
+    ----------
+    dt :
+        
+
+    Returns
+    -------
+
     """
     if dt.weekday() == 5:
         return dt + timedelta(2)
@@ -25,11 +33,19 @@
 
 
 def next_monday_or_tuesday(dt):
-    """
-    For second holiday of two adjacent ones!
+    """For second holiday of two adjacent ones!
     If holiday falls on Saturday, use following Monday instead;
     if holiday falls on Sunday or Monday, use following Tuesday instead
     (because Monday is already taken by adjacent holiday on the day before)
+
+    Parameters
+    ----------
+    dt :
+        
+
+    Returns
+    -------
+
     """
     dow = dt.weekday()
     if dow == 5 or dow == 6:
@@ -40,8 +56,16 @@
 
 
 def previous_friday(dt):
-    """
-    If holiday falls on Saturday or Sunday, use previous Friday instead.
+    """If holiday falls on Saturday or Sunday, use previous Friday instead.
+
+    Parameters
+    ----------
+    dt :
+        
+
+    Returns
+    -------
+
     """
     if dt.weekday() == 5:
         return dt - timedelta(1)
@@ -51,8 +75,16 @@
 
 
 def sunday_to_monday(dt):
-    """
-    If holiday falls on Sunday, use day thereafter (Monday) instead.
+    """If holiday falls on Sunday, use day thereafter (Monday) instead.
+
+    Parameters
+    ----------
+    dt :
+        
+
+    Returns
+    -------
+
     """
     if dt.weekday() == 6:
         return dt + timedelta(1)
@@ -60,10 +92,18 @@
 
 
 def weekend_to_monday(dt):
-    """
-    If holiday falls on Sunday or Saturday,
+    """If holiday falls on Sunday or Saturday,
     use day thereafter (Monday) instead.
     Needed for holidays such as Christmas observation in Europe
+
+    Parameters
+    ----------
+    dt :
+        
+
+    Returns
+    -------
+
     """
     if dt.weekday() == 6:
         return dt + timedelta(1)
@@ -73,9 +113,17 @@
 
 
 def nearest_workday(dt):
-    """
-    If holiday falls on Saturday, use day before (Friday) instead;
+    """If holiday falls on Saturday, use day before (Friday) instead;
     if holiday falls on Sunday, use day thereafter (Monday) instead.
+
+    Parameters
+    ----------
+    dt :
+        
+
+    Returns
+    -------
+
     """
     if dt.weekday() == 5:
         return dt - timedelta(1)
@@ -85,8 +133,16 @@
 
 
 def next_workday(dt):
-    """
-    returns next weekday used for observances
+    """returns next weekday used for observances
+
+    Parameters
+    ----------
+    dt :
+        
+
+    Returns
+    -------
+
     """
     dt += timedelta(days=1)
     while dt.weekday() > 4:
@@ -96,8 +152,16 @@
 
 
 def previous_workday(dt):
-    """
-    returns previous weekday used for observances
+    """returns previous weekday used for observances
+
+    Parameters
+    ----------
+    dt :
+        
+
+    Returns
+    -------
+
     """
     dt -= timedelta(days=1)
     while dt.weekday() > 4:
@@ -107,24 +171,46 @@
 
 
 def before_nearest_workday(dt):
-    """
-    returns previous workday after nearest workday
+    """returns previous workday after nearest workday
+
+    Parameters
+    ----------
+    dt :
+        
+
+    Returns
+    -------
+
     """
     return previous_workday(nearest_workday(dt))
 
 
 def after_nearest_workday(dt):
-    """
-    returns next workday after nearest workday
+    """returns next workday after nearest workday
     needed for Boxing day or multiple holidays in a series
+
+    Parameters
+    ----------
+    dt :
+        
+
+    Returns
+    -------
+
     """
     return next_workday(nearest_workday(dt))
 
 
 class Holiday:
-    """
-    Class that defines a holiday with start/end dates and rules
+    """Class that defines a holiday with start/end dates and rules
     for observance.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(
@@ -150,6 +236,7 @@
         observance: function
             computes when holiday is given a pandas Timestamp
         days_of_week:
+                    """ """
             provide a tuple of days e.g  (0,1,2,3,) for Monday Through Thursday
             Monday=0,..,Sunday=6
 
@@ -218,16 +305,21 @@
         return repr
 
     def dates(self, start_date, end_date, return_name=False):
-        """
-        Calculate holidays observed between start date and end date
-
-        Parameters
-        ----------
-        start_date : starting date, datetime-like, optional
-        end_date : ending date, datetime-like, optional
-        return_name : bool, optional, default=False
-            If True, return a series that has dates and holiday names.
-            False will only return dates.
+        """Calculate holidays observed between start date and end date
+
+        Parameters
+        ----------
+        start_date :
+            
+        end_date :
+            
+        return_name :
+             (Default value = False)
+
+        Returns
+        -------
+
+        
         """
         start_date = Timestamp(start_date)
         end_date = Timestamp(end_date)
@@ -265,13 +357,22 @@
         return holiday_dates
 
     def _reference_dates(self, start_date, end_date):
-        """
-        Get reference dates for the holiday.
-
-        Return reference dates for the holiday also returning the year
-        prior to the start_date and year following the end_date.  This ensures
-        that any offsets to be applied will yield the holidays within
-        the passed in dates.
+        """Get reference dates for the holiday.
+
+        Parameters
+        ----------
+        start_date :
+            
+        end_date :
+            
+
+        Returns
+        -------
+        type
+            prior to the start_date and year following the end_date.  This ensures
+            that any offsets to be applied will yield the holidays within
+            the passed in dates.
+
         """
         if self.start_date is not None:
             start_date = self.start_date.tz_localize(start_date.tz)
@@ -298,8 +399,7 @@
         return dates
 
     def _apply_rule(self, dates):
-        """
-        Apply the given offset/observance to a DatetimeIndex of dates.
+        """Apply the given offset/observance to a DatetimeIndex of dates.
 
         Parameters
         ----------
@@ -308,7 +408,8 @@
 
         Returns
         -------
-        Dates with rules applied
+
+        
         """
         if self.observance is not None:
             return dates.map(lambda d: self.observance(d))
@@ -332,6 +433,7 @@
 
 
 def register(cls):
+    """ """
     try:
         name = cls.name
     except AttributeError:
@@ -340,18 +442,23 @@
 
 
 def get_calendar(name):
-    """
-    Return an instance of a calendar based on its name.
-
-    Parameters
-    ----------
-    name : str
-        Calendar name to return an instance of
+    """Return an instance of a calendar based on its name.
+
+    Parameters
+    ----------
+    name :
+        
+
+    Returns
+    -------
+
+    
     """
     return holiday_calendars[name]()
 
 
 class HolidayCalendarMetaClass(type):
+    """ """
     def __new__(cls, clsname, bases, attrs):
         calendar_class = super().__new__(cls, clsname, bases, attrs)
         register(calendar_class)
@@ -359,9 +466,7 @@
 
 
 class AbstractHolidayCalendar(metaclass=HolidayCalendarMetaClass):
-    """
-    Abstract interface to create holidays following certain rules.
-    """
+    """Abstract interface to create holidays following certain rules."""
 
     rules: List[Holiday] = []
     start_date = Timestamp(datetime(1970, 1, 1))
@@ -389,6 +494,17 @@
             self.rules = rules
 
     def rule_from_name(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         for rule in self.rules:
             if rule.name == name:
                 return rule
@@ -396,20 +512,22 @@
         return None
 
     def holidays(self, start=None, end=None, return_name=False):
-        """
-        Returns a curve with holidays between start_date and end_date
+        """Returns a curve with holidays between start_date and end_date
 
         Parameters
         ----------
         start : starting date, datetime-like, optional
+             (Default value = None)
         end : ending date, datetime-like, optional
+             (Default value = None)
         return_name : bool, optional
             If True, return a series that has dates and holiday names.
-            False will only return a DatetimeIndex of dates.
+            False will only return a DatetimeIndex of dates. (Default value = False)
 
         Returns
         -------
-            DatetimeIndex of holidays
+
+        
         """
         if self.rules is None:
             raise Exception(
@@ -446,17 +564,21 @@
 
     @staticmethod
     def merge_class(base, other):
-        """
-        Merge holiday calendars together. The base calendar
+        """Merge holiday calendars together. The base calendar
         will take precedence to other. The merge will be done
         based on each holiday's name.
 
         Parameters
         ----------
-        base : AbstractHolidayCalendar
-          instance/subclass or array of Holiday objects
-        other : AbstractHolidayCalendar
-          instance/subclass or array of Holiday objects
+        base :
+            
+        other :
+            
+
+        Returns
+        -------
+
+        
         """
         try:
             other = other.rules
@@ -480,16 +602,21 @@
         return list(other_holidays.values())
 
     def merge(self, other, inplace=False):
-        """
-        Merge holiday calendars together.  The caller's class
+        """Merge holiday calendars together.  The caller's class
         rules take precedence.  The merge will be done
         based on each holiday's name.
 
         Parameters
         ----------
-        other : holiday calendar
-        inplace : bool (default=False)
-            If True set rule_table to holidays, else return array of Holidays
+        other :
+            
+        inplace :
+             (Default value = False)
+
+        Returns
+        -------
+
+        
         """
         holidays = self.merge_class(self, other)
         if inplace:
@@ -524,10 +651,16 @@
 
 
 class USFederalHolidayCalendar(AbstractHolidayCalendar):
-    """
-    US Federal Government Holiday Calendar based on rules specified by:
+    """US Federal Government Holiday Calendar based on rules specified by:
     https://www.opm.gov/policy-data-oversight/
        snow-dismissal-procedures/federal-holidays/
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     rules = [
@@ -545,6 +678,23 @@
 
 
 def HolidayCalendarFactory(name, base, other, base_class=AbstractHolidayCalendar):
+    """
+
+    Parameters
+    ----------
+    name :
+        
+    base :
+        
+    other :
+        
+    base_class :
+         (Default value = AbstractHolidayCalendar)
+
+    Returns
+    -------
+
+    """
     rules = AbstractHolidayCalendar.merge_class(base, other)
     calendar_class = type(name, (base_class,), {"rules": rules, "name": name})
     return calendar_class
