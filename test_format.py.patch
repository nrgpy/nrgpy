# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/formats/test_format.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/formats/test_format.py
@@ -45,17 +45,35 @@
 
 @pytest.fixture(params=["string", "pathlike", "buffer"])
 def filepath_or_buffer_id(request):
-    """
-    A fixture yielding test ids for filepath_or_buffer testing.
+    """A fixture yielding test ids for filepath_or_buffer testing.
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
     """
     return request.param
 
 
 @pytest.fixture
 def filepath_or_buffer(filepath_or_buffer_id, tmp_path):
-    """
-    A fixture yielding a string representing a filepath, a path-like object
+    """A fixture yielding a string representing a filepath, a path-like object
     and a StringIO buffer. Also checks that buffer is not closed.
+
+    Parameters
+    ----------
+    filepath_or_buffer_id :
+        
+    tmp_path :
+        
+
+    Returns
+    -------
+
     """
     if filepath_or_buffer_id == "buffer":
         buf = StringIO()
@@ -73,11 +91,34 @@
 def assert_filepath_or_buffer_equals(
     filepath_or_buffer, filepath_or_buffer_id, encoding
 ):
+    """Assertion helper for checking filepath_or_buffer.
+
+    Parameters
+    ----------
+    filepath_or_buffer :
+        
+    filepath_or_buffer_id :
+        
+    encoding :
+        
+
+    Returns
+    -------
+
     """
-    Assertion helper for checking filepath_or_buffer.
-    """
 
     def _assert_filepath_or_buffer_equals(expected):
+        """
+
+        Parameters
+        ----------
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         if filepath_or_buffer_id == "string":
             with open(filepath_or_buffer, encoding=encoding) as f:
                 result = f.read()
@@ -91,11 +132,23 @@
 
 
 def curpath():
+    """ """
     pth, _ = os.path.split(os.path.abspath(__file__))
     return pth
 
 
 def has_info_repr(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
     r = repr(df)
     c1 = r.split("\n")[0].startswith("<class")
     c2 = r.split("\n")[0].startswith(r"&lt;class")  # _repr_html_
@@ -103,6 +156,17 @@
 
 
 def has_non_verbose_info_repr(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
     has_info = has_info_repr(df)
     r = repr(df)
 
@@ -117,6 +181,17 @@
 
 
 def has_horizontally_truncated_repr(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
     try:  # Check header row
         fst_line = np.array(repr(df).splitlines()[0].split())
         cand_col = np.where(fst_line == "...")[0][0]
@@ -131,6 +206,17 @@
 
 
 def has_vertically_truncated_repr(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
     r = repr(df)
     only_dot_row = False
     for row in r.splitlines():
@@ -140,14 +226,47 @@
 
 
 def has_truncated_repr(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
     return has_horizontally_truncated_repr(df) or has_vertically_truncated_repr(df)
 
 
 def has_doubly_truncated_repr(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
     return has_horizontally_truncated_repr(df) and has_vertically_truncated_repr(df)
 
 
 def has_expanded_repr(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
     r = repr(df)
     for line in r.split("\n"):
         if line.endswith("\\"):
@@ -157,7 +276,9 @@
 
 @pytest.mark.filterwarnings("ignore::FutureWarning:.*format")
 class TestDataFrameFormatting:
+    """ """
     def test_repr_embedded_ndarray(self):
+        """ """
         arr = np.empty(10, dtype=[("err", object)])
         for i in range(len(arr)):
             arr["err"][i] = np.random.randn(i)
@@ -168,6 +289,17 @@
         df.to_string()
 
     def test_eng_float_formatter(self, float_frame):
+        """
+
+        Parameters
+        ----------
+        float_frame :
+            
+
+        Returns
+        -------
+
+        """
         df = float_frame
         df.loc[5] = 0
 
@@ -182,11 +314,25 @@
         tm.reset_display_options()
 
     def test_show_null_counts(self):
+        """ """
 
         df = DataFrame(1, columns=range(10), index=range(10))
         df.iloc[1, 1] = np.nan
 
         def check(null_counts, result):
+            """
+
+            Parameters
+            ----------
+            null_counts :
+                
+            result :
+                
+
+            Returns
+            -------
+
+            """
             buf = StringIO()
             df.info(buf=buf, null_counts=null_counts)
             assert ("non-null" in buf.getvalue()) is result
@@ -204,6 +350,7 @@
             check(False, False)
 
     def test_repr_tuples(self):
+        """ """
         buf = StringIO()
 
         df = DataFrame({"tups": list(zip(range(10), range(10)))})
@@ -211,6 +358,7 @@
         df.to_string(col_space=10, buf=buf)
 
     def test_repr_truncation(self):
+        """ """
         max_len = 20
         with option_context("display.max_colwidth", max_len):
             df = DataFrame(
@@ -240,6 +388,7 @@
             assert "..." not in repr(df)
 
     def test_repr_deprecation_negative_int(self):
+        """ """
         # FIXME: remove in future version after deprecation cycle
         # Non-regression test for:
         # https://github.com/pandas-dev/pandas/issues/31532
@@ -249,6 +398,7 @@
         set_option("display.max_colwidth", width)
 
     def test_repr_chop_threshold(self):
+        """ """
         df = DataFrame([[0.1, 0.5], [0.5, -0.1]])
         pd.reset_option("display.chop_threshold")  # default None
         assert repr(df) == "     0    1\n0  0.1  0.5\n1  0.5 -0.1"
@@ -263,6 +413,7 @@
             assert repr(df) == "     0    1\n0  0.1  0.5\n1  0.5 -0.1"
 
     def test_repr_chop_threshold_column_below(self):
+        """ """
         # GH 6839: validation case
 
         df = pd.DataFrame([[10, 20, 30, 40], [8e-10, -1e-11, 2e-9, -2e-11]]).T
@@ -295,6 +446,7 @@
             )
 
     def test_repr_obeys_max_seq_limit(self):
+        """ """
         with option_context("display.max_seq_items", 2000):
             assert len(printing.pprint_thing(list(range(1000)))) > 1000
 
@@ -302,9 +454,11 @@
             assert len(printing.pprint_thing(list(range(1000)))) < 100
 
     def test_repr_set(self):
+        """ """
         assert printing.pprint_thing({1}) == "{1}"
 
     def test_repr_is_valid_construction_code(self):
+        """ """
         # for the case of Index, where the repr is traditional rather than
         # stylized
         idx = Index(["a", "b"])
@@ -312,6 +466,7 @@
         tm.assert_series_equal(Series(res), Series(idx))
 
     def test_repr_should_return_str(self):
+        """ """
         # https://docs.python.org/3/reference/datamodel.html#object.__repr__
         # "...The return value must be a string object."
 
@@ -324,11 +479,13 @@
         assert type(df.__repr__()) == str  # both py2 / 3
 
     def test_repr_no_backslash(self):
+        """ """
         with option_context("mode.sim_interactive", True):
             df = DataFrame(np.random.randn(10, 4))
             assert "\\" not in repr(df)
 
     def test_expand_frame_repr(self):
+        """ """
         df_small = DataFrame("hello", index=[0], columns=[0])
         df_wide = DataFrame("hello", index=[0], columns=range(10))
         df_tall = DataFrame("hello", index=range(30), columns=range(5))
@@ -361,6 +518,7 @@
                     assert not has_expanded_repr(df_tall)
 
     def test_repr_non_interactive(self):
+        """ """
         # in non interactive mode, there can be no dependency on the
         # result of terminal auto size detection
         df = DataFrame("hello", index=range(1000), columns=range(5))
@@ -372,6 +530,17 @@
             assert not has_expanded_repr(df)
 
     def test_repr_truncates_terminal_size(self, monkeypatch):
+        """
+
+        Parameters
+        ----------
+        monkeypatch :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-21180
 
         terminal_size = (118, 96)
@@ -403,6 +572,17 @@
         assert df2.columns[0] in result.split("\n")[0]
 
     def test_repr_truncates_terminal_size_full(self, monkeypatch):
+        """
+
+        Parameters
+        ----------
+        monkeypatch :
+            
+
+        Returns
+        -------
+
+        """
         # GH 22984 ensure entire window is filled
         terminal_size = (80, 24)
         df = pd.DataFrame(np.random.rand(1, 7))
@@ -413,6 +593,7 @@
         assert "..." not in str(df)
 
     def test_repr_truncation_column_size(self):
+        """ """
         # dataframe with last column very wide -> check it is not used to
         # determine size of truncation (...) column
         df = pd.DataFrame(
@@ -428,11 +609,23 @@
         assert "    ...    " not in str(df)
 
     def test_repr_max_columns_max_rows(self):
+        """ """
         term_width, term_height = get_terminal_size()
         if term_width < 10 or term_height < 10:
             pytest.skip(f"terminal size too small, {term_width} x {term_height}")
 
         def mkframe(n):
+            """
+
+            Parameters
+            ----------
+            n :
+                
+
+            Returns
+            -------
+
+            """
             index = [f"{i:05d}" for i in range(n)]
             return DataFrame(0, index, index)
 
@@ -473,6 +666,7 @@
                 assert has_expanded_repr(df)
 
     def test_repr_min_rows(self):
+        """ """
         df = pd.DataFrame({"a": range(20)})
 
         # default setting no truncation even if above min_rows
@@ -508,6 +702,7 @@
             assert ".." not in df._repr_html_()
 
     def test_str_max_colwidth(self):
+        """ """
         # GH 7856
         df = pd.DataFrame(
             [
@@ -534,6 +729,7 @@
             )
 
     def test_to_string_truncate(self):
+        """ """
         # GH 9784 - dont truncate when calling DataFrame.to_string
         df = pd.DataFrame(
             [
@@ -573,6 +769,7 @@
         )
 
     def test_auto_detect(self):
+        """ """
         term_width, term_height = get_terminal_size()
         fac = 1.05  # Arbitrary large factor to exceed term width
         cols = range(int(term_width * fac))
@@ -602,6 +799,7 @@
                     assert has_horizontally_truncated_repr(df)
 
     def test_to_string_repr_unicode(self):
+        """ """
         buf = StringIO()
 
         unicode_values = ["\u03c3"] * 10
@@ -633,6 +831,17 @@
             sys.stdin = _stdin
 
     def test_to_string_unicode_columns(self, float_frame):
+        """
+
+        Parameters
+        ----------
+        float_frame :
+            
+
+        Returns
+        -------
+
+        """
         df = DataFrame({"\u03c3": np.arange(10.0)})
 
         buf = StringIO()
@@ -647,6 +856,7 @@
         assert isinstance(result, str)
 
     def test_to_string_utf8_columns(self):
+        """ """
         n = "\u05d0".encode("utf-8")
 
         with option_context("display.max_rows", 1):
@@ -654,16 +864,19 @@
             repr(df)
 
     def test_to_string_unicode_two(self):
+        """ """
         dm = DataFrame({"c/\u03c3": []})
         buf = StringIO()
         dm.to_string(buf)
 
     def test_to_string_unicode_three(self):
+        """ """
         dm = DataFrame(["\xc2"])
         buf = StringIO()
         dm.to_string(buf)
 
     def test_to_string_with_formatters(self):
+        """ """
         df = DataFrame(
             {
                 "int": [1, 2, 3],
@@ -689,10 +902,22 @@
         assert result == result2
 
     def test_to_string_with_datetime64_monthformatter(self):
+        """ """
         months = [datetime(2016, 1, 1), datetime(2016, 2, 2)]
         x = DataFrame({"months": months})
 
         def format_func(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return x.strftime("%Y-%m")
 
         result = x.to_string(formatters={"months": format_func})
@@ -700,6 +925,7 @@
         assert result.strip() == expected
 
     def test_to_string_with_datetime64_hourformatter(self):
+        """ """
 
         x = DataFrame(
             {
@@ -710,6 +936,17 @@
         )
 
         def format_func(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return x.strftime("%H:%M")
 
         result = x.to_string(formatters={"hod": format_func})
@@ -717,11 +954,13 @@
         assert result.strip() == expected
 
     def test_to_string_with_formatters_unicode(self):
+        """ """
         df = DataFrame({"c/\u03c3": [1, 2, 3]})
         result = df.to_string(formatters={"c/\u03c3": str})
         assert result == "  c/\u03c3\n" + "0   1\n1   2\n2   3"
 
     def test_east_asian_unicode_false(self):
+        """ """
         # not aligned properly because of east asian width
 
         # mid col
@@ -859,6 +1098,7 @@
             assert repr(df) == expected
 
     def test_east_asian_unicode_true(self):
+        """ """
         # Enable Unicode option -----------------------------------------
         with option_context("display.unicode.east_asian_width", True):
 
@@ -1022,6 +1262,7 @@
             assert repr(df) == expected
 
     def test_to_string_buffer_all_unicode(self):
+        """ """
         buf = StringIO()
 
         empty = DataFrame({"c/\u03c3": Series(dtype=object)})
@@ -1034,6 +1275,7 @@
         buf.getvalue()
 
     def test_to_string_with_col_space(self):
+        """ """
         df = DataFrame(np.random.random(size=(1, 3)))
         c10 = len(df.to_string(col_space=10).split("\n")[1])
         c20 = len(df.to_string(col_space=20).split("\n")[1])
@@ -1048,6 +1290,7 @@
         assert len(with_header_row1) == len(no_header)
 
     def test_to_string_with_column_specific_col_space_raises(self):
+        """ """
         df = DataFrame(np.random.random(size=(3, 3)), columns=["a", "b", "c"])
 
         msg = (
@@ -1065,6 +1308,7 @@
             df.to_string(col_space={"a": "foo", "b": 23, "d": 34})
 
     def test_to_string_with_column_specific_col_space(self):
+        """ """
         df = DataFrame(np.random.random(size=(3, 3)), columns=["a", "b", "c"])
 
         result = df.to_string(col_space={"a": 10, "b": 11, "c": 12})
@@ -1075,6 +1319,7 @@
         assert len(result.split("\n")[1]) == (3 + 1 + 10 + 11 + 12)
 
     def test_to_string_truncate_indices(self):
+        """ """
         for index in [
             tm.makeStringIndex,
             tm.makeUnicodeIndex,
@@ -1106,6 +1351,7 @@
                                     assert not has_doubly_truncated_repr(df)
 
     def test_to_string_truncate_multilevel(self):
+        """ """
         arrays = [
             ["bar", "bar", "baz", "baz", "foo", "foo", "qux", "qux"],
             ["one", "two", "one", "two", "one", "two", "one", "two"],
@@ -1115,6 +1361,7 @@
             assert has_doubly_truncated_repr(df)
 
     def test_truncate_with_different_dtypes(self):
+        """ """
 
         # 11594, 12045
         # when truncated the dtypes of the splits can differ
@@ -1141,6 +1388,7 @@
             assert "NaN" not in result
 
     def test_truncate_with_different_dtypes_multiindex(self):
+        """ """
         # GH#13000
         df = DataFrame({"Vals": range(100)})
         frame = pd.concat([df], keys=["Sweep"], names=["Sweep", "Index"])
@@ -1150,6 +1398,7 @@
         assert result.startswith(result2)
 
     def test_datetimelike_frame(self):
+        """ """
 
         # GH 12211
         df = DataFrame(
@@ -1219,6 +1468,17 @@
         ],
     )
     def test_datetimeindex_highprecision(self, start_date):
+        """
+
+        Parameters
+        ----------
+        start_date :
+            
+
+        Returns
+        -------
+
+        """
         # GH19030
         # Check that high-precision time values for the end of day are
         # included in repr for DatetimeIndex
@@ -1232,27 +1492,42 @@
         assert start_date in result
 
     def test_nonunicode_nonascii_alignment(self):
+        """ """
         df = DataFrame([["aa\xc3\xa4\xc3\xa4", 1], ["bbbb", 2]])
         rep_str = df.to_string()
         lines = rep_str.split("\n")
         assert len(lines[1]) == len(lines[2])
 
     def test_unicode_problem_decoding_as_ascii(self):
+        """ """
         dm = DataFrame({"c/\u03c3": Series({"test": np.nan})})
         str(dm.to_string())
 
     def test_string_repr_encoding(self, datapath):
+        """
+
+        Parameters
+        ----------
+        datapath :
+            
+
+        Returns
+        -------
+
+        """
         filepath = datapath("io", "parser", "data", "unicode_series.csv")
         df = pd.read_csv(filepath, header=None, encoding="latin1")
         repr(df)
         repr(df[1])
 
     def test_repr_corner(self):
+        """ """
         # representing infs poses no problems
         df = DataFrame({"foo": [-np.inf, np.inf]})
         repr(df)
 
     def test_frame_info_encoding(self):
+        """ """
         index = ["'Til There Was You (1997)", "ldum klaka (Cold Fever) (1994)"]
         fmt.set_option("display.max_rows", 1)
         df = DataFrame(columns=["a", "b", "c"], index=index)
@@ -1261,6 +1536,7 @@
         fmt.set_option("display.max_rows", 200)
 
     def test_wide_repr(self):
+        """ """
         with option_context(
             "mode.sim_interactive",
             True,
@@ -1286,6 +1562,7 @@
         reset_option("display.expand_frame_repr")
 
     def test_wide_repr_wide_columns(self):
+        """ """
         with option_context("mode.sim_interactive", True, "display.max_columns", 20):
             df = DataFrame(
                 np.random.randn(5, 3), columns=["a" * 90, "b" * 90, "c" * 90]
@@ -1295,6 +1572,7 @@
             assert len(rep_str.splitlines()) == 20
 
     def test_wide_repr_named(self):
+        """ """
         with option_context("mode.sim_interactive", True, "display.max_columns", 20):
             max_cols = get_option("display.max_columns")
             df = DataFrame(tm.rands_array(25, size=(10, max_cols - 1)))
@@ -1316,6 +1594,7 @@
         reset_option("display.expand_frame_repr")
 
     def test_wide_repr_multiindex(self):
+        """ """
         with option_context("mode.sim_interactive", True, "display.max_columns", 20):
             midx = MultiIndex.from_arrays(tm.rands_array(5, size=(2, 10)))
             max_cols = get_option("display.max_columns")
@@ -1337,6 +1616,7 @@
         reset_option("display.expand_frame_repr")
 
     def test_wide_repr_multiindex_cols(self):
+        """ """
         with option_context("mode.sim_interactive", True, "display.max_columns", 20):
             max_cols = get_option("display.max_columns")
             midx = MultiIndex.from_arrays(tm.rands_array(5, size=(2, 10)))
@@ -1358,6 +1638,7 @@
         reset_option("display.expand_frame_repr")
 
     def test_wide_repr_unicode(self):
+        """ """
         with option_context("mode.sim_interactive", True, "display.max_columns", 20):
             max_cols = 20
             df = DataFrame(tm.rands_array(25, size=(10, max_cols - 1)))
@@ -1374,6 +1655,7 @@
         reset_option("display.expand_frame_repr")
 
     def test_wide_repr_wide_long_columns(self):
+        """ """
         with option_context("mode.sim_interactive", True):
             df = DataFrame({"a": ["a" * 30, "b" * 30], "b": ["c" * 70, "d" * 80]})
 
@@ -1382,6 +1664,7 @@
             assert "ddddd" in result
 
     def test_long_series(self):
+        """ """
         n = 1000
         s = Series(
             np.random.randint(-50, 50, n),
@@ -1396,6 +1679,7 @@
         assert nmatches == 1
 
     def test_index_with_nan(self):
+        """ """
         #  GH 2850
         df = DataFrame(
             {
@@ -1473,6 +1757,7 @@
         assert result == expected
 
     def test_to_string(self):
+        """ """
 
         # big mixed
         biggie = DataFrame(
@@ -1520,6 +1805,7 @@
         frame.to_string()
 
     def test_to_string_no_header(self):
+        """ """
         df = DataFrame({"x": [1, 2, 3], "y": [4, 5, 6]})
 
         df_s = df.to_string(header=False)
@@ -1528,6 +1814,7 @@
         assert df_s == expected
 
     def test_to_string_specified_header(self):
+        """ """
         df = DataFrame({"x": [1, 2, 3], "y": [4, 5, 6]})
 
         df_s = df.to_string(header=["X", "Y"])
@@ -1540,6 +1827,7 @@
             df.to_string(header=["X"])
 
     def test_to_string_no_index(self):
+        """ """
         # GH 16839, GH 13032
         df = DataFrame({"x": [11, 22], "y": [33, -44], "z": ["AAA", "   "]})
 
@@ -1553,6 +1841,7 @@
         assert df_s == expected
 
     def test_to_string_line_width_no_index(self):
+        """ """
         # GH 13998, GH 22505
         df = DataFrame({"x": [1, 2, 3], "y": [4, 5, 6]})
 
@@ -1576,6 +1865,7 @@
         assert df_s == expected
 
     def test_to_string_float_formatting(self):
+        """ """
         tm.reset_display_options()
         fmt.set_option(
             "display.precision",
@@ -1627,6 +1917,7 @@
         assert df_s == expected
 
     def test_to_string_float_format_no_fixed_width(self):
+        """ """
 
         # GH 21625
         df = DataFrame({"x": [0.19999]})
@@ -1639,6 +1930,7 @@
         assert df.to_string(float_format="%.0f") == expected
 
     def test_to_string_small_float_values(self):
+        """ """
         df = DataFrame({"a": [1.5, 1e-17, -5.5e-7]})
 
         result = df.to_string()
@@ -1665,6 +1957,7 @@
         expected = "   0\n0  0\n1  0\n2 -0"
 
     def test_to_string_float_index(self):
+        """ """
         index = Index([1.5, 2, 3, 4, 5])
         df = DataFrame(np.arange(5), index=index)
 
@@ -1673,6 +1966,7 @@
         assert result == expected
 
     def test_to_string_complex_float_formatting(self):
+        """ """
         # GH #25514, 25745
         with pd.option_context("display.precision", 5):
             df = DataFrame(
@@ -1695,6 +1989,7 @@
             assert result == expected
 
     def test_to_string_ascii_error(self):
+        """ """
         data = [
             (
                 "0  ",
@@ -1709,6 +2004,7 @@
         repr(df)
 
     def test_to_string_int_formatting(self):
+        """ """
         df = DataFrame({"x": [-15, 20, 25, -35]})
         assert issubclass(df["x"].dtype.type, np.integer)
 
@@ -1717,6 +2013,7 @@
         assert output == expected
 
     def test_to_string_index_formatter(self):
+        """ """
         df = DataFrame([range(5), range(5, 10), range(10, 15)])
 
         rs = df.to_string(formatters={"__index__": lambda x: "abc"[x]})
@@ -1731,6 +2028,7 @@
         assert rs == xp
 
     def test_to_string_left_justify_cols(self):
+        """ """
         tm.reset_display_options()
         df = DataFrame({"x": [3234, 0.253]})
         df_s = df.to_string(justify="left")
@@ -1738,6 +2036,7 @@
         assert df_s == expected
 
     def test_to_string_format_na(self):
+        """ """
         tm.reset_display_options()
         df = DataFrame(
             {
@@ -1776,6 +2075,7 @@
         assert result == expected
 
     def test_to_string_format_inf(self):
+        """ """
         # Issue #24861
         tm.reset_display_options()
         df = DataFrame(
@@ -1817,17 +2117,20 @@
         assert result == expected
 
     def test_to_string_decimal(self):
+        """ """
         # Issue #23614
         df = DataFrame({"A": [6.0, 3.1, 2.2]})
         expected = "     A\n0  6,0\n1  3,1\n2  2,2"
         assert df.to_string(decimal=",") == expected
 
     def test_to_string_line_width(self):
+        """ """
         df = DataFrame(123, index=range(10, 15), columns=range(30))
         s = df.to_string(line_width=80)
         assert max(len(l) for l in s.split("\n")) == 80
 
     def test_show_dimensions(self):
+        """ """
         df = DataFrame(123, index=range(10, 15), columns=range(30))
 
         with option_context(
@@ -1888,6 +2191,17 @@
             assert "5 rows" not in df._repr_html_()
 
     def test_repr_html(self, float_frame):
+        """
+
+        Parameters
+        ----------
+        float_frame :
+            
+
+        Returns
+        -------
+
+        """
         df = float_frame
         df._repr_html_()
 
@@ -1908,6 +2222,7 @@
         tm.reset_display_options()
 
     def test_repr_html_mathjax(self):
+        """ """
         df = DataFrame([[1, 2], [3, 4]])
         assert "tex2jax_ignore" not in df._repr_html_()
 
@@ -1915,6 +2230,7 @@
             assert "tex2jax_ignore" in df._repr_html_()
 
     def test_repr_html_wide(self):
+        """ """
         max_cols = 20
         df = DataFrame(tm.rands_array(25, size=(10, max_cols - 1)))
         with option_context("display.max_rows", 60, "display.max_columns", 20):
@@ -1925,6 +2241,7 @@
             assert "..." in wide_df._repr_html_()
 
     def test_repr_html_wide_multiindex_cols(self):
+        """ """
         max_cols = 20
 
         mcols = MultiIndex.from_product(
@@ -1942,6 +2259,7 @@
             assert "..." in df._repr_html_()
 
     def test_repr_html_long(self):
+        """ """
         with option_context("display.max_rows", 60):
             max_rows = get_option("display.max_rows")
             h = max_rows - 1
@@ -1959,6 +2277,7 @@
             assert "2 columns" in long_repr
 
     def test_repr_html_float(self):
+        """ """
         with option_context("display.max_rows", 60):
 
             max_rows = get_option("display.max_rows")
@@ -1989,6 +2308,7 @@
             assert "2 columns" in long_repr
 
     def test_repr_html_long_multiindex(self):
+        """ """
         max_rows = 60
         max_L1 = max_rows // 2
 
@@ -2008,6 +2328,7 @@
         assert "..." in long_repr
 
     def test_repr_html_long_and_wide(self):
+        """ """
         max_cols = 20
         max_rows = 60
 
@@ -2022,6 +2343,7 @@
             assert "..." in df._repr_html_()
 
     def test_info_repr(self):
+        """ """
         # GH#21746 For tests inside a terminal (i.e. not CI) we need to detect
         # the terminal size to ensure that we try to print something "too big"
         term_width, term_height = get_terminal_size()
@@ -2045,6 +2367,7 @@
             assert has_info_repr(df)
 
     def test_info_repr_max_cols(self):
+        """ """
         # GH #6939
         df = DataFrame(np.random.randn(10, 5))
         with option_context(
@@ -2071,6 +2394,7 @@
         # fmt.set_option('display.max_info_columns', 4)  # exceeded
 
     def test_info_repr_html(self):
+        """ """
         max_rows = 60
         max_cols = 20
         # Long
@@ -2090,9 +2414,21 @@
             assert "&lt;class" in df._repr_html_()
 
     def test_fake_qtconsole_repr_html(self, float_frame):
+        """
+
+        Parameters
+        ----------
+        float_frame :
+            
+
+        Returns
+        -------
+
+        """
         df = float_frame
 
         def get_ipython():
+            """ """
             return {"config": {"KernelApp": {"parent_appname": "ipython-qtconsole"}}}
 
         repstr = df._repr_html_()
@@ -2105,11 +2441,10 @@
         tm.reset_display_options()
 
     def test_pprint_pathological_object(self):
-        """
-        If the test fails, it at least won't hang.
-        """
+        """If the test fails, it at least won't hang."""
 
         class A:
+            """ """
             def __getitem__(self, key):
                 return 3  # obviously simplified
 
@@ -2117,6 +2452,7 @@
         repr(df)  # just don't die
 
     def test_float_trim_zeros(self):
+        """ """
         vals = [
             2.08430917305e10,
             3.52205017305e10,
@@ -2135,6 +2471,7 @@
             skip = False
 
     def test_dict_entries(self):
+        """ """
         df = DataFrame({"A": [{"a": 1, "b": 2}]})
 
         val = df.to_string()
@@ -2142,6 +2479,7 @@
         assert "'b': 2" in val
 
     def test_categorical_columns(self):
+        """ """
         # GH35439
         data = [[4, 2], [3, 2], [4, 3]]
         cols = ["aaaaaaaaa", "b"]
@@ -2151,6 +2489,7 @@
         assert df.to_string() == df_cat_cols.to_string()
 
     def test_period(self):
+        """ """
         # GH 12615
         df = pd.DataFrame(
             {
@@ -2175,6 +2514,7 @@
 
 
 def gen_series_formatting():
+    """ """
     s1 = pd.Series(["a"] * 100)
     s2 = pd.Series(["ab"] * 100)
     s3 = pd.Series(["a", "ab", "abc", "abcd", "abcde", "abcdef"])
@@ -2184,10 +2524,23 @@
 
 
 class TestSeriesFormatting:
+    """ """
     def setup_method(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         self.ts = tm.makeTimeSeries()
 
     def test_repr_unicode(self):
+        """ """
         s = Series(["\u03c3"] * 10)
         repr(s)
 
@@ -2196,6 +2549,7 @@
         repr(a)
 
     def test_to_string(self):
+        """ """
         buf = StringIO()
 
         s = self.ts.to_string()
@@ -2226,6 +2580,7 @@
         assert last_line == (f"Freq: B, Name: foo, Length: {len(cp)}, dtype: float64")
 
     def test_freq_name_separation(self):
+        """ """
         s = Series(
             np.random.randn(10), index=date_range("1/1/2000", periods=10), name=0
         )
@@ -2234,6 +2589,7 @@
         assert "Freq: D, Name: 0" in result
 
     def test_to_string_mixed(self):
+        """ """
         s = Series(["foo", np.nan, -1.23, 4.56])
         result = s.to_string()
         expected = "0     foo\n" + "1     NaN\n" + "2   -1.23\n" + "3    4.56"
@@ -2251,6 +2607,7 @@
         assert result == expected
 
     def test_to_string_float_na_spacing(self):
+        """ """
         s = Series([0.0, 1.5678, 2.0, -3.0, 4.0])
         s[::2] = np.nan
 
@@ -2265,6 +2622,7 @@
         assert result == expected
 
     def test_to_string_without_index(self):
+        """ """
         # GH 11729 Test index=False option
         s = Series([1, 2, 3, 4])
         result = s.to_string(index=False)
@@ -2272,11 +2630,13 @@
         assert result == expected
 
     def test_unicode_name_in_footer(self):
+        """ """
         s = Series([1, 2], name="\u05e2\u05d1\u05e8\u05d9\u05ea")
         sf = fmt.SeriesFormatter(s, name="\u05e2\u05d1\u05e8\u05d9\u05ea")
         sf._get_footer()  # should not raise exception
 
     def test_east_asian_unicode_series(self):
+        """ """
         # not aligned properly because of east asian width
 
         # unicode index
@@ -2468,6 +2828,7 @@
             assert repr(s) == expected
 
     def test_float_trim_zeros(self):
+        """ """
         vals = [
             2.08430917305e10,
             3.52205017305e10,
@@ -2484,6 +2845,7 @@
                 assert "+10" in line
 
     def test_datetimeindex(self):
+        """ """
 
         index = date_range("20130102", periods=6)
         s = Series(1, index=index)
@@ -2512,6 +2874,17 @@
         ],
     )
     def test_datetimeindex_highprecision(self, start_date):
+        """
+
+        Parameters
+        ----------
+        start_date :
+            
+
+        Returns
+        -------
+
+        """
         # GH19030
         # Check that high-precision time values for the end of day are
         # included in repr for DatetimeIndex
@@ -2525,6 +2898,7 @@
         assert start_date in result
 
     def test_timedelta64(self):
+        """ """
 
         from datetime import datetime, timedelta
 
@@ -2585,6 +2959,7 @@
         assert result == "0   1 days\n1   2 days\n2   3 days"
 
     def test_mixed_datetime64(self):
+        """ """
         df = DataFrame({"A": [1, 2], "B": ["2012-01-01", "2012-01-02"]})
         df["B"] = pd.to_datetime(df.B)
 
@@ -2592,6 +2967,7 @@
         assert "2012-01-01" in result
 
     def test_period(self):
+        """ """
         # GH 12615
         index = pd.period_range("2013-01", periods=6, freq="M")
         s = Series(np.arange(6, dtype="int64"), index=index)
@@ -2633,6 +3009,7 @@
         assert str(s) == exp
 
     def test_max_multi_index_display(self):
+        """ """
         # GH 7101
 
         # doc example (indexing.rst)
@@ -2673,6 +3050,7 @@
 
     # Make sure #8532 is fixed
     def test_consistent_format(self):
+        """ """
         s = pd.Series([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.9999, 1, 1] * 10)
         with option_context("display.max_rows", 10, "display.show_dimensions", False):
             res = repr(s)
@@ -2685,6 +3063,17 @@
         assert res == exp
 
     def chck_ncols(self, s):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+
+        Returns
+        -------
+
+        """
         with option_context("display.max_rows", 10):
             res = repr(s)
         lines = res.split("\n")
@@ -2695,6 +3084,7 @@
         assert ncolsizes == 1
 
     def test_format_explicit(self):
+        """ """
         test_sers = gen_series_formatting()
         with option_context("display.max_rows", 4, "display.show_dimensions", False):
             res = repr(test_sers["onel"])
@@ -2717,11 +3107,13 @@
             assert exp == res
 
     def test_ncols(self):
+        """ """
         test_sers = gen_series_formatting()
         for s in test_sers.values():
             self.chck_ncols(s)
 
     def test_max_rows_eq_one(self):
+        """ """
         s = Series(range(10), dtype="int64")
         with option_context("display.max_rows", 1):
             strrepr = repr(s).split("\n")
@@ -2733,7 +3125,19 @@
         assert exp2 == res2
 
     def test_truncate_ndots(self):
+        """ """
         def getndots(s):
+            """
+
+            Parameters
+            ----------
+            s :
+                
+
+            Returns
+            -------
+
+            """
             return len(re.match(r"[^\.]*(\.*)", s).groups()[0])
 
         s = Series([0, 2, 3, 6])
@@ -2747,6 +3151,7 @@
         assert getndots(strrepr) == 3
 
     def test_show_dimensions(self):
+        """ """
         # gh-7117
         s = Series(range(5))
 
@@ -2762,6 +3167,7 @@
             assert "Length" not in repr(s)
 
     def test_repr_min_rows(self):
+        """ """
         s = pd.Series(range(20))
 
         # default setting no truncation even if above min_rows
@@ -2790,6 +3196,7 @@
             assert ".." not in repr(s)
 
     def test_to_string_name(self):
+        """ """
         s = Series(range(100), dtype="int64")
         s.name = "myser"
         res = s.to_string(max_rows=2, name=True)
@@ -2800,6 +3207,7 @@
         assert res == exp
 
     def test_to_string_dtype(self):
+        """ """
         s = Series(range(100), dtype="int64")
         res = s.to_string(max_rows=2, dtype=True)
         exp = "0      0\n      ..\n99    99\ndtype: int64"
@@ -2809,24 +3217,28 @@
         assert res == exp
 
     def test_to_string_length(self):
+        """ """
         s = Series(range(100), dtype="int64")
         res = s.to_string(max_rows=2, length=True)
         exp = "0      0\n      ..\n99    99\nLength: 100"
         assert res == exp
 
     def test_to_string_na_rep(self):
+        """ """
         s = pd.Series(index=range(100), dtype=np.float64)
         res = s.to_string(na_rep="foo", max_rows=2)
         exp = "0    foo\n      ..\n99   foo"
         assert res == exp
 
     def test_to_string_float_format(self):
+        """ """
         s = pd.Series(range(10), dtype="float64")
         res = s.to_string(float_format=lambda x: f"{x:2.1f}", max_rows=2)
         exp = "0   0.0\n     ..\n9   9.0"
         assert res == exp
 
     def test_to_string_header(self):
+        """ """
         s = pd.Series(range(10), dtype="int64")
         s.index.name = "foo"
         res = s.to_string(header=True, max_rows=2)
@@ -2837,6 +3249,7 @@
         assert res == exp
 
     def test_to_string_multindex_header(self):
+        """ """
         # GH 16718
         df = pd.DataFrame({"a": [0], "b": [1], "c": [2], "d": [3]}).set_index(
             ["a", "b"]
@@ -2847,7 +3260,9 @@
 
 
 class TestGenericArrayFormatter:
+    """ """
     def test_1d_array(self):
+        """ """
         # GenericArrayFormatter is used on types for which there isn't a dedicated
         # formatter. np.bool_ is one of those types.
         obj = fmt.GenericArrayFormatter(np.array([True, False]))
@@ -2858,6 +3273,7 @@
         assert res[1] == " False"
 
     def test_2d_array(self):
+        """ """
         obj = fmt.GenericArrayFormatter(np.array([[True, False], [False, True]]))
         res = obj.get_result()
         assert len(res) == 2
@@ -2865,6 +3281,7 @@
         assert res[1] == " [False, True]"
 
     def test_3d_array(self):
+        """ """
         obj = fmt.GenericArrayFormatter(
             np.array([[[True, True], [False, False]], [[False, True], [True, False]]])
         )
@@ -2874,19 +3291,24 @@
         assert res[1] == " [[False, True], [True, False]]"
 
     def test_2d_extension_type(self):
+        """ """
         # GH 33770
 
         # Define a stub extension type with just enough code to run Series.__repr__()
         class DtypeStub(pd.api.extensions.ExtensionDtype):
+            """ """
             @property
             def type(self):
+                """ """
                 return np.ndarray
 
             @property
             def name(self):
+                """ """
                 return "DtypeStub"
 
         class ExtTypeStub(pd.api.extensions.ExtensionArray):
+            """ """
             def __len__(self):
                 return 2
 
@@ -2895,6 +3317,7 @@
 
             @property
             def dtype(self):
+                """ """
                 return DtypeStub()
 
         series = pd.Series(ExtTypeStub())
@@ -2904,22 +3327,27 @@
 
 
 def _three_digit_exp():
+    """ """
     return f"{1.7e8:.4g}" == "1.7e+008"
 
 
 class TestFloatArrayFormatter:
+    """ """
     def test_misc(self):
+        """ """
         obj = fmt.FloatArrayFormatter(np.array([], dtype=np.float64))
         result = obj.get_result()
         assert len(result) == 0
 
     def test_format(self):
+        """ """
         obj = fmt.FloatArrayFormatter(np.array([12, 0], dtype=np.float64))
         result = obj.get_result()
         assert result[0] == " 12.0"
         assert result[1] == "  0.0"
 
     def test_output_display_precision_trailing_zeroes(self):
+        """ """
         # Issue #20359: trimming zeros while there is no decimal point
 
         # Happens when display precision is set to zero
@@ -2929,6 +3357,7 @@
             assert str(s) == expected_output
 
     def test_output_significant_digits(self):
+        """ """
         # Issue #9764
 
         # In case default display precision changes:
@@ -3002,6 +3431,7 @@
                 assert str(d[start:stop]) == v
 
     def test_too_long(self):
+        """ """
         # GH 10451
         with pd.option_context("display.precision", 4):
             # need both a number > 1e6 and something that normally formats to
@@ -3015,7 +3445,9 @@
 
 
 class TestRepr_timedelta64:
+    """ """
     def test_none(self):
+        """ """
         delta_1d = pd.to_timedelta(1, unit="D")
         delta_0d = pd.to_timedelta(0, unit="D")
         delta_1s = pd.to_timedelta(1, unit="s")
@@ -3033,6 +3465,7 @@
         assert drepr(-delta_1d + delta_500ms) == "-1 days +00:00:00.500000"
 
     def test_sub_day(self):
+        """ """
         delta_1d = pd.to_timedelta(1, unit="D")
         delta_0d = pd.to_timedelta(0, unit="D")
         delta_1s = pd.to_timedelta(1, unit="s")
@@ -3050,6 +3483,7 @@
         assert drepr(-delta_1d + delta_500ms) == "-1 days +00:00:00.500000"
 
     def test_long(self):
+        """ """
         delta_1d = pd.to_timedelta(1, unit="D")
         delta_0d = pd.to_timedelta(0, unit="D")
         delta_1s = pd.to_timedelta(1, unit="s")
@@ -3067,6 +3501,7 @@
         assert drepr(-delta_1d + delta_500ms) == "-1 days +00:00:00.500000"
 
     def test_all(self):
+        """ """
         delta_1d = pd.to_timedelta(1, unit="D")
         delta_0d = pd.to_timedelta(0, unit="D")
         delta_1ns = pd.to_timedelta(1, unit="ns")
@@ -3080,7 +3515,9 @@
 
 
 class TestTimedelta64Formatter:
+    """ """
     def test_days(self):
+        """ """
         x = pd.to_timedelta(list(range(5)) + [pd.NaT], unit="D")
         result = fmt.Timedelta64Formatter(x, box=True).get_result()
         assert result[0].strip() == "'0 days'"
@@ -3097,24 +3534,28 @@
         assert result[0].strip() == "1 days"
 
     def test_days_neg(self):
+        """ """
         x = pd.to_timedelta(list(range(5)) + [pd.NaT], unit="D")
         result = fmt.Timedelta64Formatter(-x, box=True).get_result()
         assert result[0].strip() == "'0 days'"
         assert result[1].strip() == "'-1 days'"
 
     def test_subdays(self):
+        """ """
         y = pd.to_timedelta(list(range(5)) + [pd.NaT], unit="s")
         result = fmt.Timedelta64Formatter(y, box=True).get_result()
         assert result[0].strip() == "'0 days 00:00:00'"
         assert result[1].strip() == "'0 days 00:00:01'"
 
     def test_subdays_neg(self):
+        """ """
         y = pd.to_timedelta(list(range(5)) + [pd.NaT], unit="s")
         result = fmt.Timedelta64Formatter(-y, box=True).get_result()
         assert result[0].strip() == "'0 days 00:00:00'"
         assert result[1].strip() == "'-1 days +23:59:59'"
 
     def test_zero(self):
+        """ """
         x = pd.to_timedelta(list(range(1)) + [pd.NaT], unit="D")
         result = fmt.Timedelta64Formatter(x, box=True).get_result()
         assert result[0].strip() == "'0 days'"
@@ -3125,24 +3566,29 @@
 
 
 class TestDatetime64Formatter:
+    """ """
     def test_mixed(self):
+        """ """
         x = Series([datetime(2013, 1, 1), datetime(2013, 1, 1, 12), pd.NaT])
         result = fmt.Datetime64Formatter(x).get_result()
         assert result[0].strip() == "2013-01-01 00:00:00"
         assert result[1].strip() == "2013-01-01 12:00:00"
 
     def test_dates(self):
+        """ """
         x = Series([datetime(2013, 1, 1), datetime(2013, 1, 2), pd.NaT])
         result = fmt.Datetime64Formatter(x).get_result()
         assert result[0].strip() == "2013-01-01"
         assert result[1].strip() == "2013-01-02"
 
     def test_date_nanos(self):
+        """ """
         x = Series([Timestamp(200)])
         result = fmt.Datetime64Formatter(x).get_result()
         assert result[0].strip() == "1970-01-01 00:00:00.000000200"
 
     def test_dates_display(self):
+        """ """
 
         # 10170
         # make sure that we are consistently display date formatting
@@ -3182,9 +3628,21 @@
         assert result[4].strip() == "2013-01-01 09:00:00.000000004"
 
     def test_datetime64formatter_yearmonth(self):
+        """ """
         x = Series([datetime(2016, 1, 1), datetime(2016, 2, 2)])
 
         def format_func(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return x.strftime("%Y-%m")
 
         formatter = fmt.Datetime64Formatter(x, formatter=format_func)
@@ -3192,12 +3650,24 @@
         assert result == ["2016-01", "2016-02"]
 
     def test_datetime64formatter_hoursecond(self):
+        """ """
 
         x = Series(
             pd.to_datetime(["10:10:10.100", "12:12:12.120"], format="%H:%M:%S.%f")
         )
 
         def format_func(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return x.strftime("%H:%M")
 
         formatter = fmt.Datetime64Formatter(x, formatter=format_func)
@@ -3206,25 +3676,32 @@
 
 
 class TestNaTFormatting:
+    """ """
     def test_repr(self):
+        """ """
         assert repr(pd.NaT) == "NaT"
 
     def test_str(self):
+        """ """
         assert str(pd.NaT) == "NaT"
 
 
 class TestDatetimeIndexFormat:
+    """ """
     def test_datetime(self):
+        """ """
         formatted = pd.to_datetime([datetime(2003, 1, 1, 12), pd.NaT]).format()
         assert formatted[0] == "2003-01-01 12:00:00"
         assert formatted[1] == "NaT"
 
     def test_date(self):
+        """ """
         formatted = pd.to_datetime([datetime(2003, 1, 1), pd.NaT]).format()
         assert formatted[0] == "2003-01-01"
         assert formatted[1] == "NaT"
 
     def test_date_tz(self):
+        """ """
         formatted = pd.to_datetime([datetime(2013, 1, 1)], utc=True).format()
         assert formatted[0] == "2013-01-01 00:00:00+00:00"
 
@@ -3232,6 +3709,7 @@
         assert formatted[0] == "2013-01-01 00:00:00+00:00"
 
     def test_date_explicit_date_format(self):
+        """ """
         formatted = pd.to_datetime([datetime(2003, 2, 1), pd.NaT]).format(
             date_format="%m-%d-%Y", na_rep="UT"
         )
@@ -3240,12 +3718,15 @@
 
 
 class TestDatetimeIndexUnicode:
+    """ """
     def test_dates(self):
+        """ """
         text = str(pd.to_datetime([datetime(2013, 1, 1), datetime(2014, 1, 1)]))
         assert "['2013-01-01'," in text
         assert ", '2014-01-01']" in text
 
     def test_mixed(self):
+        """ """
         text = str(
             pd.to_datetime(
                 [datetime(2013, 1, 1), datetime(2014, 1, 1, 12), datetime(2014, 1, 1)]
@@ -3256,7 +3737,9 @@
 
 
 class TestStringRepTimestamp:
+    """ """
     def test_no_tz(self):
+        """ """
         dt_date = datetime(2013, 1, 2)
         assert str(dt_date) == str(Timestamp(dt_date))
 
@@ -3273,6 +3756,7 @@
         assert str(ts_nanos_micros) == "1970-01-01 00:00:00.000001200"
 
     def test_tz_pytz(self):
+        """ """
         dt_date = datetime(2013, 1, 2, tzinfo=pytz.utc)
         assert str(dt_date) == str(Timestamp(dt_date))
 
@@ -3283,6 +3767,7 @@
         assert str(dt_datetime_us) == str(Timestamp(dt_datetime_us))
 
     def test_tz_dateutil(self):
+        """ """
         utc = dateutil.tz.tzutc()
 
         dt_date = datetime(2013, 1, 2, tzinfo=utc)
@@ -3295,11 +3780,13 @@
         assert str(dt_datetime_us) == str(Timestamp(dt_datetime_us))
 
     def test_nat_representations(self):
+        """ """
         for f in (str, repr, methodcaller("isoformat")):
             assert f(pd.NaT) == "NaT"
 
 
 def test_format_percentiles():
+    """ """
     result = fmt.format_percentiles([0.01999, 0.02001, 0.5, 0.666666, 0.9999])
     expected = ["1.999%", "2.001%", "50%", "66.667%", "99.99%"]
     assert result == expected
@@ -3320,6 +3807,7 @@
 
 
 def test_format_percentiles_integer_idx():
+    """ """
     # Issue #26660
     result = fmt.format_percentiles(np.linspace(0, 1, 10 + 1))
     expected = [
@@ -3339,6 +3827,17 @@
 
 
 def test_repr_html_ipython_config(ip):
+    """
+
+    Parameters
+    ----------
+    ip :
+        
+
+    Returns
+    -------
+
+    """
     code = textwrap.dedent(
         """\
     import pandas as pd
@@ -3367,6 +3866,27 @@
     data,
     filepath_or_buffer_id,
 ):
+    """
+
+    Parameters
+    ----------
+    method :
+        
+    filepath_or_buffer :
+        
+    assert_filepath_or_buffer_equals :
+        
+    encoding :
+        
+    data :
+        
+    filepath_or_buffer_id :
+        
+
+    Returns
+    -------
+
+    """
     df = DataFrame([data])
 
     if filepath_or_buffer_id not in ["string", "pathlike"] and encoding is not None:
@@ -3386,6 +3906,19 @@
 
 @pytest.mark.parametrize("method", ["to_string", "to_html", "to_latex"])
 def test_filepath_or_buffer_bad_arg_raises(float_frame, method):
+    """
+
+    Parameters
+    ----------
+    float_frame :
+        
+    method :
+        
+
+    Returns
+    -------
+
+    """
     msg = "buf is not a file name and it has no write method"
     with pytest.raises(TypeError, match=msg):
         getattr(float_frame, method)(buf=object())
