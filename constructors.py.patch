# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/extension/base/constructors.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/extension/base/constructors.py
@@ -8,7 +8,19 @@
 
 
 class BaseConstructorsTests(BaseExtensionTests):
+    """ """
     def test_from_sequence_from_cls(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         result = type(data)._from_sequence(data, dtype=data.dtype)
         self.assert_extension_array_equal(result, data)
 
@@ -17,11 +29,33 @@
         self.assert_extension_array_equal(result, data)
 
     def test_array_from_scalars(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         scalars = [data[0], data[1], data[2]]
         result = data._from_sequence(scalars)
         assert isinstance(result, type(data))
 
     def test_series_constructor(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         result = pd.Series(data)
         assert result.dtype == data.dtype
         assert len(result) == len(data)
@@ -34,6 +68,19 @@
         assert isinstance(result2._mgr.blocks[0], ExtensionBlock)
 
     def test_series_constructor_no_data_with_index(self, dtype, na_value):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+        na_value :
+            
+
+        Returns
+        -------
+
+        """
         result = pd.Series(index=[1, 2, 3], dtype=dtype)
         expected = pd.Series([na_value] * 3, index=[1, 2, 3], dtype=dtype)
         self.assert_series_equal(result, expected)
@@ -44,11 +91,37 @@
         self.assert_series_equal(result, expected)
 
     def test_series_constructor_scalar_na_with_index(self, dtype, na_value):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+        na_value :
+            
+
+        Returns
+        -------
+
+        """
         result = pd.Series(na_value, index=[1, 2, 3], dtype=dtype)
         expected = pd.Series([na_value] * 3, index=[1, 2, 3], dtype=dtype)
         self.assert_series_equal(result, expected)
 
     def test_series_constructor_scalar_with_index(self, data, dtype):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         scalar = data[0]
         result = pd.Series(scalar, index=[1, 2, 3], dtype=dtype)
         expected = pd.Series([scalar] * 3, index=[1, 2, 3], dtype=dtype)
@@ -60,6 +133,19 @@
 
     @pytest.mark.parametrize("from_series", [True, False])
     def test_dataframe_constructor_from_dict(self, data, from_series):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        from_series :
+            
+
+        Returns
+        -------
+
+        """
         if from_series:
             data = pd.Series(data)
         result = pd.DataFrame({"A": data})
@@ -68,17 +154,50 @@
         assert isinstance(result._mgr.blocks[0], ExtensionBlock)
 
     def test_dataframe_from_series(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         result = pd.DataFrame(pd.Series(data))
         assert result.dtypes[0] == data.dtype
         assert result.shape == (len(data), 1)
         assert isinstance(result._mgr.blocks[0], ExtensionBlock)
 
     def test_series_given_mismatched_index_raises(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         msg = "Length of passed values is 3, index implies 5"
         with pytest.raises(ValueError, match=msg):
             pd.Series(data[:3], index=[0, 1, 2, 3, 4])
 
     def test_from_dtype(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # construct from our dtype & string dtype
         dtype = data.dtype
 
@@ -99,17 +218,50 @@
         self.assert_frame_equal(result, expected)
 
     def test_pandas_array(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # pd.array(extension_array) should be idempotent...
         result = pd.array(data)
         self.assert_extension_array_equal(result, data)
 
     def test_pandas_array_dtype(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # ... but specifying dtype will override idempotency
         result = pd.array(data, dtype=np.dtype(object))
         expected = pd.arrays.PandasArray(np.asarray(data, dtype=object))
         self.assert_equal(result, expected)
 
     def test_construct_empty_dataframe(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         # GH 33623
         result = pd.DataFrame(columns=["a"], dtype=dtype)
         expected = pd.DataFrame(
