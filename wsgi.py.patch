# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tornado/wsgi.py
+++ b/..//venv/lib/python3.8/site-packages/tornado/wsgi.py
@@ -49,15 +49,26 @@
 # This function is like those in the tornado.escape module, but defined
 # here to minimize the temptation to use it in non-wsgi contexts.
 def to_wsgi_str(s: bytes) -> str:
+    """
+
+    Parameters
+    ----------
+    s: bytes :
+        
+
+    Returns
+    -------
+
+    """
     assert isinstance(s, bytes)
     return s.decode("latin1")
 
 
 class WSGIContainer(object):
-    r"""Makes a WSGI-compatible function runnable on Tornado's HTTP server.
-
+    """r"""Makes a WSGI-compatible function runnable on Tornado's HTTP server.
+    
     .. warning::
-
+    
        WSGI is a *synchronous* interface, while Tornado's concurrency model
        is based on single-threaded asynchronous execution.  This means that
        running a WSGI app with Tornado's `WSGIContainer` is *less scalable*
@@ -65,28 +76,32 @@
        ``gunicorn`` or ``uwsgi``.  Use `WSGIContainer` only when there are
        benefits to combining Tornado and WSGI in the same process that
        outweigh the reduced scalability.
-
+    
     Wrap a WSGI function in a `WSGIContainer` and pass it to `.HTTPServer` to
     run it. For example::
-
+    
         def simple_app(environ, start_response):
             status = "200 OK"
             response_headers = [("Content-type", "text/plain")]
             start_response(status, response_headers)
-            return ["Hello world!\n"]
-
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+    type
         container = tornado.wsgi.WSGIContainer(simple_app)
         http_server = tornado.httpserver.HTTPServer(container)
         http_server.listen(8888)
         tornado.ioloop.IOLoop.current().start()
-
-    This class is intended to let other frameworks (Django, web.py, etc)
-    run on the Tornado HTTP server and I/O loop.
-
-    The `tornado.web.FallbackHandler` class is often useful for mixing
-    Tornado and WSGI apps in the same server.  See
-    https://github.com/bdarnell/django-tornado-demo for a complete example.
-    """
+        
+        This class is intended to let other frameworks (Django, web.py, etc)
+        run on the Tornado HTTP server and I/O loop.
+        
+        The `tornado.web.FallbackHandler` class is often useful for mixing
+        Tornado and WSGI apps in the same server.  See
+        https://github.com/bdarnell/django-tornado-demo for a complete example.
 
     def __init__(self, wsgi_application: "WSGIAppType") -> None:
         self.wsgi_application = wsgi_application
@@ -106,6 +121,29 @@
                 ]
             ] = None,
         ) -> Callable[[bytes], Any]:
+            """
+
+            Parameters
+            ----------
+            status: str :
+                
+            headers: List[Tuple[str :
+                
+            str]] :
+                
+            exc_info: Optional[Tuple["Optional[Type[BaseException]]" :
+                
+            Optional[BaseException] :
+                
+            Optional[TracebackType] :
+                
+            ]] :
+                 (Default value = None)
+
+            Returns
+            -------
+
+            """
             data["status"] = status
             data["headers"] = headers
             return response.append
@@ -147,6 +185,15 @@
     @staticmethod
     def environ(request: httputil.HTTPServerRequest) -> Dict[Text, Any]:
         """Converts a `tornado.httputil.HTTPServerRequest` to a WSGI environment.
+
+        Parameters
+        ----------
+        request: httputil.HTTPServerRequest :
+            
+
+        Returns
+        -------
+
         """
         hostport = request.host.split(":")
         if len(hostport) == 2:
@@ -183,6 +230,19 @@
         return environ
 
     def _log(self, status_code: int, request: httputil.HTTPServerRequest) -> None:
+        """
+
+        Parameters
+        ----------
+        status_code: int :
+            
+        request: httputil.HTTPServerRequest :
+            
+
+        Returns
+        -------
+
+        """
         if status_code < 400:
             log_method = access_log.info
         elif status_code < 500:
