# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/lib/stride_tricks.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/lib/stride_tricks.py
@@ -14,6 +14,13 @@
 class DummyArray:
     """Dummy object that just exists to hang __array_interface__ dictionaries
     and possibly keep alive a reference to a base array.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, interface, base=None):
@@ -22,6 +29,19 @@
 
 
 def _maybe_view_as_subclass(original_array, new_array):
+    """
+
+    Parameters
+    ----------
+    original_array :
+        
+    new_array :
+        
+
+    Returns
+    -------
+
+    """
     if type(original_array) is not type(new_array):
         # if input was an ndarray subclass and subclasses were OK,
         # then view the result as that subclass.
@@ -35,9 +55,8 @@
 
 
 def as_strided(x, shape=None, strides=None, subok=False, writeable=True):
-    """
-    Create a view into the array with the given shape and strides.
-
+    """Create a view into the array with the given shape and strides.
+    
     .. warning:: This function has to be used with extreme care, see notes.
 
     Parameters
@@ -50,24 +69,22 @@
         The strides of the new array. Defaults to ``x.strides``.
     subok : bool, optional
         .. versionadded:: 1.10
-
-        If True, subclasses are preserved.
+        If True, subclasses are preserved. (Default value = False)
     writeable : bool, optional
         .. versionadded:: 1.12
-
         If set to False, the returned array will always be readonly.
         Otherwise it will be writable if the original array was. It
-        is advisable to set this to False if possible (see Notes).
+        is advisable to set this to False if possible (see Notes). (Default value = True)
 
     Returns
     -------
     view : ndarray
+        
 
     See also
     --------
     broadcast_to: broadcast an array to a given shape.
     reshape : reshape an array.
-
     Notes
     -----
     ``as_strided`` creates a view into the array given the exact strides
@@ -77,7 +94,7 @@
     It is advisable to always use the original ``x.strides`` when
     calculating new strides to avoid reliance on a contiguous memory
     layout.
-
+    
     Furthermore, arrays created with this function often contain self
     overlapping memory, so that two elements are identical.
     Vectorized write operations on such arrays will typically be
@@ -86,7 +103,7 @@
     Since writing to these arrays has to be tested and done with great
     care, you may want to use ``writeable=False`` to avoid accidental write
     operations.
-
+    
     For these reasons it is advisable to avoid ``as_strided`` when
     possible.
     """
@@ -112,6 +129,23 @@
 
 
 def _broadcast_to(array, shape, subok, readonly):
+    """
+
+    Parameters
+    ----------
+    array :
+        
+    shape :
+        
+    subok :
+        
+    readonly :
+        
+
+    Returns
+    -------
+
+    """
     shape = tuple(shape) if np.iterable(shape) else (shape,)
     array = np.array(array, copy=False, subok=subok)
     if not shape and array.shape:
@@ -135,6 +169,21 @@
 
 
 def _broadcast_to_dispatcher(array, shape, subok=None):
+    """
+
+    Parameters
+    ----------
+    array :
+        
+    shape :
+        
+    subok :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (array,)
 
 
@@ -168,7 +217,6 @@
     Notes
     -----
     .. versionadded:: 1.10.0
-
     Examples
     --------
     >>> x = np.array([1, 2, 3])
@@ -183,6 +231,15 @@
 def _broadcast_shape(*args):
     """Returns the shape of the arrays that would result from broadcasting the
     supplied arrays against each other.
+
+    Parameters
+    ----------
+    *args :
+        
+
+    Returns
+    -------
+
     """
     # use the old-iterator because np.nditer does not handle size 0 arrays
     # consistently
@@ -198,22 +255,35 @@
 
 
 def _broadcast_arrays_dispatcher(*args, subok=None):
+    """
+
+    Parameters
+    ----------
+    *args :
+        
+    subok :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return args
 
 
 @array_function_dispatch(_broadcast_arrays_dispatcher, module='numpy')
 def broadcast_arrays(*args, subok=False):
-    """
-    Broadcast any number of arrays against each other.
+    """Broadcast any number of arrays against each other.
 
     Parameters
     ----------
     `*args` : array_likes
         The arrays to broadcast.
-
     subok : bool, optional
         If True, then sub-classes will be passed-through, otherwise
         the returned arrays will be forced to be a base-class array (default).
+    *args :
+        
 
     Returns
     -------
@@ -224,29 +294,27 @@
         to write to the arrays, make copies first. While you can set the
         ``writable`` flag True, writing to a single output value may end up
         changing more than one location in the output array.
-
         .. deprecated:: 1.17
-            The output is currently marked so that if written to, a deprecation
-            warning will be emitted. A future version will set the
-            ``writable`` flag False so writing to it will raise an error.
+        The output is currently marked so that if written to, a deprecation
+        warning will be emitted. A future version will set the
+        ``writable`` flag False so writing to it will raise an error.
 
     Examples
     --------
+    
+    Here is a useful idiom for getting contiguous copies instead of
+    non-contiguous views.
     >>> x = np.array([[1,2,3]])
     >>> y = np.array([[4],[5]])
     >>> np.broadcast_arrays(x, y)
     [array([[1, 2, 3],
            [1, 2, 3]]), array([[4, 4, 4],
            [5, 5, 5]])]
-
-    Here is a useful idiom for getting contiguous copies instead of
-    non-contiguous views.
-
+    
     >>> [np.array(a) for a in np.broadcast_arrays(x, y)]
     [array([[1, 2, 3],
            [1, 2, 3]]), array([[4, 4, 4],
            [5, 5, 5]])]
-
     """
     # nditer is not used here to avoid the limit of 32 arrays.
     # Otherwise, something like the following one-liner would suffice:
