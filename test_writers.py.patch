# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/excel/test_writers.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/excel/test_writers.py
@@ -24,8 +24,16 @@
 
 @pytest.fixture
 def path(ext):
-    """
-    Fixture to open file for use in each test case.
+    """Fixture to open file for use in each test case.
+
+    Parameters
+    ----------
+    ext :
+        
+
+    Returns
+    -------
+
     """
     with tm.ensure_clean(ext) as file_path:
         yield file_path
@@ -33,13 +41,23 @@
 
 @pytest.fixture
 def set_engine(engine, ext):
-    """
-    Fixture to set engine for use in each test case.
-
+    """Fixture to set engine for use in each test case.
+    
     Rather than requiring `engine=...` to be provided explicitly as an
     argument in each test, this fixture sets a global option to dictate
     which engine should be used to write Excel files. After executing
     the test it rolls back said change to the global option.
+
+    Parameters
+    ----------
+    engine :
+        
+    ext :
+        
+
+    Returns
+    -------
+
     """
     option_name = f"io.excel.{ext.strip('.')}.writer"
     prev_engine = get_option(option_name)
@@ -61,11 +79,27 @@
     ],
 )
 class TestRoundTrip:
+    """ """
     @pytest.mark.parametrize(
         "header,expected",
         [(None, DataFrame([np.nan] * 4)), (0, DataFrame({"Unnamed: 0": [np.nan] * 3}))],
     )
     def test_read_one_empty_col_no_header(self, ext, header, expected):
+        """
+
+        Parameters
+        ----------
+        ext :
+            
+        header :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # xref gh-12292
         filename = "no_header"
         df = pd.DataFrame([["", 1, 100], ["", 2, 200], ["", 3, 300], ["", 4, 400]])
@@ -83,6 +117,21 @@
         [(None, DataFrame([0] + [np.nan] * 4)), (0, DataFrame([np.nan] * 4))],
     )
     def test_read_one_empty_col_with_header(self, ext, header, expected):
+        """
+
+        Parameters
+        ----------
+        ext :
+            
+        header :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         filename = "with_header"
         df = pd.DataFrame([["", 1, 100], ["", 2, 200], ["", 3, 300], ["", 4, 400]])
 
@@ -95,6 +144,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_set_column_names_in_parameter(self, ext):
+        """
+
+        Parameters
+        ----------
+        ext :
+            
+
+        Returns
+        -------
+
+        """
         # GH 12870 : pass down column names associated with
         # keyword argument names
         refdf = pd.DataFrame([[1, "foo"], [2, "bar"], [3, "baz"]], columns=["a", "b"])
@@ -121,11 +181,33 @@
             tm.assert_frame_equal(xlsdf_with_head, refdf)
 
     def test_creating_and_reading_multiple_sheets(self, ext):
+        """
+
+        Parameters
+        ----------
+        ext :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-9450
         #
         # Test reading multiple sheets, from a runtime
         # created Excel file with multiple sheets.
         def tdf(col_sheet_name):
+            """
+
+            Parameters
+            ----------
+            col_sheet_name :
+                
+
+            Returns
+            -------
+
+            """
             d, i = [11, 22, 33], [1, 2, 3]
             return DataFrame(d, i, columns=[col_sheet_name])
 
@@ -145,6 +227,17 @@
                 tm.assert_frame_equal(dfs[s], dfs_returned[s])
 
     def test_read_excel_multiindex_empty_level(self, ext):
+        """
+
+        Parameters
+        ----------
+        ext :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-12453
         with tm.ensure_clean(ext) as path:
             df = DataFrame(
@@ -198,6 +291,25 @@
     def test_excel_multindex_roundtrip(
         self, ext, c_idx_names, r_idx_names, c_idx_levels, r_idx_levels
     ):
+        """
+
+        Parameters
+        ----------
+        ext :
+            
+        c_idx_names :
+            
+        r_idx_names :
+            
+        c_idx_levels :
+            
+        r_idx_levels :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-4679
         with tm.ensure_clean(ext) as pth:
             if c_idx_levels == 1 and c_idx_names:
@@ -241,6 +353,17 @@
             tm.assert_frame_equal(df, act, check_names=check_names)
 
     def test_read_excel_parse_dates(self, ext):
+        """
+
+        Parameters
+        ----------
+        ext :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-11544, gh-12051
         df = DataFrame(
             {"col": [1, 2, 3], "date_strings": pd.date_range("2012-01-01", periods=3)}
@@ -264,6 +387,17 @@
             tm.assert_frame_equal(df, res)
 
     def test_multiindex_interval_datetimes(self, ext):
+        """
+
+        Parameters
+        ----------
+        ext :
+            
+
+        Returns
+        -------
+
+        """
         # GH 30986
         midx = pd.MultiIndex.from_arrays(
             [
@@ -320,7 +454,19 @@
 )
 @pytest.mark.usefixtures("set_engine")
 class TestExcelWriter:
+    """ """
     def test_excel_sheet_size(self, path):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
 
         # GH 26080
         breaking_row_count = 2 ** 20 + 1
@@ -339,6 +485,19 @@
             col_df.to_excel(path)
 
     def test_excel_sheet_by_name_raise(self, path, engine):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+        engine :
+            
+
+        Returns
+        -------
+
+        """
         gt = DataFrame(np.random.randn(10, 2))
         gt.to_excel(path)
 
@@ -359,6 +518,19 @@
                 pd.read_excel(xl, sheet_name="0")
 
     def test_excel_writer_context_manager(self, frame, path):
+        """
+
+        Parameters
+        ----------
+        frame :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         with ExcelWriter(path) as writer:
             frame.to_excel(writer, "Data1")
             frame2 = frame.copy()
@@ -373,6 +545,19 @@
             tm.assert_frame_equal(found_df2, frame2)
 
     def test_roundtrip(self, frame, path):
+        """
+
+        Parameters
+        ----------
+        frame :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         frame = frame.copy()
         frame["A"][:5] = np.nan
 
@@ -422,6 +607,19 @@
         tm.assert_frame_equal(s.to_frame(), recons)
 
     def test_mixed(self, frame, path):
+        """
+
+        Parameters
+        ----------
+        frame :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         mixed_frame = frame.copy()
         mixed_frame["foo"] = "bar"
 
@@ -431,6 +629,19 @@
         tm.assert_frame_equal(mixed_frame, recons)
 
     def test_ts_frame(self, tsframe, path):
+        """
+
+        Parameters
+        ----------
+        tsframe :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         df = tsframe
 
         # freq doesnt round-trip
@@ -444,6 +655,19 @@
         tm.assert_frame_equal(df, recons)
 
     def test_basics_with_nan(self, frame, path):
+        """
+
+        Parameters
+        ----------
+        frame :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         frame = frame.copy()
         frame["A"][:5] = np.nan
         frame.to_excel(path, "test1")
@@ -453,6 +677,19 @@
 
     @pytest.mark.parametrize("np_type", [np.int8, np.int16, np.int32, np.int64])
     def test_int_types(self, np_type, path):
+        """
+
+        Parameters
+        ----------
+        np_type :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # Test np.int values read come back as int
         # (rather than float which is Excel's format).
         df = DataFrame(np.random.randint(-10, 10, size=(10, 2)), dtype=np_type)
@@ -478,6 +715,19 @@
 
     @pytest.mark.parametrize("np_type", [np.float16, np.float32, np.float64])
     def test_float_types(self, np_type, path):
+        """
+
+        Parameters
+        ----------
+        np_type :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # Test np.float values read come back as float.
         df = DataFrame(np.random.random_sample(10), dtype=np_type)
         df.to_excel(path, "test1")
@@ -489,6 +739,19 @@
 
     @pytest.mark.parametrize("np_type", [np.bool8, np.bool_])
     def test_bool_types(self, np_type, path):
+        """
+
+        Parameters
+        ----------
+        np_type :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # Test np.bool values read come back as float.
         df = DataFrame([1, 0, True, False], dtype=np_type)
         df.to_excel(path, "test1")
@@ -499,6 +762,17 @@
         tm.assert_frame_equal(df, recons)
 
     def test_inf_roundtrip(self, path):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
         df = DataFrame([(1, np.inf), (2, 3), (5, -np.inf)])
         df.to_excel(path, "test1")
 
@@ -508,6 +782,21 @@
         tm.assert_frame_equal(df, recons)
 
     def test_sheets(self, frame, tsframe, path):
+        """
+
+        Parameters
+        ----------
+        frame :
+            
+        tsframe :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
 
         # freq doesnt round-trip
         index = pd.DatetimeIndex(np.asarray(tsframe.index), freq=None)
@@ -536,6 +825,19 @@
         assert "test2" == reader.sheet_names[1]
 
     def test_colaliases(self, frame, path):
+        """
+
+        Parameters
+        ----------
+        frame :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         frame = frame.copy()
         frame["A"][:5] = np.nan
 
@@ -554,6 +856,21 @@
         tm.assert_frame_equal(xp, rs)
 
     def test_roundtrip_indexlabels(self, merge_cells, frame, path):
+        """
+
+        Parameters
+        ----------
+        merge_cells :
+            
+        frame :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         frame = frame.copy()
         frame["A"][:5] = np.nan
 
@@ -605,6 +922,19 @@
         tm.assert_frame_equal(df, recons)
 
     def test_excel_roundtrip_indexname(self, merge_cells, path):
+        """
+
+        Parameters
+        ----------
+        merge_cells :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         df = DataFrame(np.random.randn(10, 4))
         df.index.name = "foo"
 
@@ -617,6 +947,21 @@
         assert result.index.name == "foo"
 
     def test_excel_roundtrip_datetime(self, merge_cells, tsframe, path):
+        """
+
+        Parameters
+        ----------
+        merge_cells :
+            
+        tsframe :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # datetime.date, not sure what to test here exactly
 
         # freq does not round-trip
@@ -634,6 +979,21 @@
         tm.assert_frame_equal(tsframe, recons)
 
     def test_excel_date_datetime_format(self, engine, ext, path):
+        """
+
+        Parameters
+        ----------
+        engine :
+            
+        ext :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-4133
         #
         # Excel output format strings
@@ -681,6 +1041,17 @@
             tm.assert_frame_equal(rs2, df_expected)
 
     def test_to_excel_interval_no_labels(self, path):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-19242
         #
         # Test writing Interval without labels.
@@ -697,6 +1068,17 @@
         tm.assert_frame_equal(expected, recons)
 
     def test_to_excel_interval_labels(self, path):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-19242
         #
         # Test writing Interval with labels.
@@ -715,6 +1097,17 @@
         tm.assert_frame_equal(expected, recons)
 
     def test_to_excel_timedelta(self, path):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-19242, gh-9155
         #
         # Test writing timedelta to xls.
@@ -735,6 +1128,19 @@
         tm.assert_frame_equal(expected, recons)
 
     def test_to_excel_periodindex(self, tsframe, path):
+        """
+
+        Parameters
+        ----------
+        tsframe :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         xp = tsframe.resample("M", kind="period").mean()
 
         xp.to_excel(path, "sht1")
@@ -744,6 +1150,21 @@
         tm.assert_frame_equal(xp, rs.to_period("M"))
 
     def test_to_excel_multiindex(self, merge_cells, frame, path):
+        """
+
+        Parameters
+        ----------
+        merge_cells :
+            
+        frame :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         arrays = np.arange(len(frame.index) * 2).reshape(2, -1)
         new_index = MultiIndex.from_arrays(arrays, names=["first", "second"])
         frame.index = new_index
@@ -759,6 +1180,19 @@
 
     # GH13511
     def test_to_excel_multiindex_nan_label(self, merge_cells, path):
+        """
+
+        Parameters
+        ----------
+        merge_cells :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         df = pd.DataFrame(
             {"A": [None, 2, 3], "B": [10, 20, 30], "C": np.random.sample(3)}
         )
@@ -772,6 +1206,21 @@
     # sure they are handled correctly for either setting of
     # merge_cells
     def test_to_excel_multiindex_cols(self, merge_cells, frame, path):
+        """
+
+        Parameters
+        ----------
+        merge_cells :
+            
+        frame :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         arrays = np.arange(len(frame.index) * 2).reshape(2, -1)
         new_index = MultiIndex.from_arrays(arrays, names=["first", "second"])
         frame.index = new_index
@@ -792,6 +1241,21 @@
         tm.assert_frame_equal(frame, df)
 
     def test_to_excel_multiindex_dates(self, merge_cells, tsframe, path):
+        """
+
+        Parameters
+        ----------
+        merge_cells :
+            
+        tsframe :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # try multiindex with dates
         new_index = [tsframe.index, np.arange(len(tsframe.index))]
         tsframe.index = MultiIndex.from_arrays(new_index)
@@ -805,6 +1269,17 @@
         assert recons.index.names == ("time", "foo")
 
     def test_to_excel_multiindex_no_write_index(self, path):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # Test writing and re-reading a MI without the index. GH 5616.
 
         # Initial non-MI frame.
@@ -826,6 +1301,17 @@
         tm.assert_frame_equal(frame1, frame3)
 
     def test_to_excel_float_format(self, path):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
         df = DataFrame(
             [[0.123456, 0.234567, 0.567567], [12.32112, 123123.2, 321321.2]],
             index=["A", "B"],
@@ -844,6 +1330,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_to_excel_output_encoding(self, ext):
+        """
+
+        Parameters
+        ----------
+        ext :
+            
+
+        Returns
+        -------
+
+        """
         # Avoid mixed inferred_type.
         df = DataFrame(
             [["\u0192", "\u0193", "\u0194"], ["\u0195", "\u0196", "\u0197"]],
@@ -857,6 +1354,19 @@
             tm.assert_frame_equal(result, df)
 
     def test_to_excel_unicode_filename(self, ext, path):
+        """
+
+        Parameters
+        ----------
+        ext :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         with tm.ensure_clean("\u0192u." + ext) as filename:
             try:
                 f = open(filename, "wb")
@@ -989,7 +1499,43 @@
     def test_excel_010_hemstring(
         self, merge_cells, c_idx_nlevels, r_idx_nlevels, use_headers, path
     ):
+        """
+
+        Parameters
+        ----------
+        merge_cells :
+            
+        c_idx_nlevels :
+            
+        r_idx_nlevels :
+            
+        use_headers :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         def roundtrip(data, header=True, parser_hdr=0, index=True):
+            """
+
+            Parameters
+            ----------
+            data :
+                
+            header :
+                 (Default value = True)
+            parser_hdr :
+                 (Default value = 0)
+            index :
+                 (Default value = True)
+
+            Returns
+            -------
+
+            """
             data.to_excel(path, header=header, merge_cells=merge_cells, index=index)
 
             xf = ExcelFile(path)
@@ -1037,6 +1583,17 @@
                     assert res.iloc[r, c] is not np.nan
 
     def test_duplicated_columns(self, path):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-5235
         df = DataFrame([[1, 2, 3], [1, 2, 3], [1, 2, 3]], columns=["A", "B", "B"])
         df.to_excel(path, "test1")
@@ -1076,6 +1633,17 @@
             pd.read_excel(path, sheet_name="test1", header=None, mangle_dupe_cols=False)
 
     def test_swapped_columns(self, path):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # Test for issue #5427.
         write_frame = DataFrame({"A": [1, 1, 1], "B": [2, 2, 2]})
         write_frame.to_excel(path, "test1", columns=["B", "A"])
@@ -1086,6 +1654,17 @@
         tm.assert_series_equal(write_frame["B"], read_frame["B"])
 
     def test_invalid_columns(self, path):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-10982
         write_frame = DataFrame({"A": [1, 1, 1], "B": [2, 2, 2]})
 
@@ -1105,6 +1684,21 @@
         ],
     )
     def test_write_subset_columns(self, path, to_excel_index, read_excel_index_col):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+        to_excel_index :
+            
+        read_excel_index_col :
+            
+
+        Returns
+        -------
+
+        """
         # GH 31677
         write_frame = DataFrame({"A": [1, 1, 1], "B": [2, 2, 2], "C": [3, 3, 3]})
         write_frame.to_excel(
@@ -1119,6 +1713,17 @@
         tm.assert_frame_equal(expected, read_frame)
 
     def test_comment_arg(self, path):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-18735
         #
         # Test the comment argument functionality to pd.read_excel.
@@ -1138,6 +1743,17 @@
         tm.assert_frame_equal(result1, result2)
 
     def test_comment_default(self, path):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # Re issue #18735
         # Test the comment argument default to pd.read_excel
 
@@ -1151,6 +1767,17 @@
         tm.assert_frame_equal(result1, result2)
 
     def test_comment_used(self, path):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-18735
         #
         # Test the comment argument is working as expected when used.
@@ -1165,6 +1792,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_comment_empty_line(self, path):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # Re issue #18735
         # Test that pd.read_excel ignores commented lines at the end of file
 
@@ -1177,6 +1815,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_datetimes(self, path):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
 
         # Test writing and reading datetimes. For issue #9139. (xref #9185)
         datetimes = [
@@ -1200,6 +1849,17 @@
         tm.assert_series_equal(write_frame["A"], read_frame["A"])
 
     def test_bytes_io(self, engine):
+        """
+
+        Parameters
+        ----------
+        engine :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-7074
         bio = BytesIO()
         df = DataFrame(np.random.randn(10, 2))
@@ -1214,6 +1874,17 @@
         tm.assert_frame_equal(df, reread_df)
 
     def test_write_lists_dict(self, path):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-8188.
         df = DataFrame(
             {
@@ -1232,6 +1903,17 @@
         tm.assert_frame_equal(read, expected)
 
     def test_render_as_column_name(self, path):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-34331
         df = DataFrame({"render": [1, 2], "data": [3, 4]})
         df.to_excel(path, "Sheet1")
@@ -1240,6 +1922,17 @@
         tm.assert_frame_equal(read, expected)
 
     def test_true_and_false_value_options(self, path):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-13347
         df = pd.DataFrame([["foo", "bar"]], columns=["col1", "col2"])
         expected = df.replace({"foo": True, "bar": False})
@@ -1251,6 +1944,17 @@
         tm.assert_frame_equal(read_frame, expected)
 
     def test_freeze_panes(self, path):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-15160
         expected = DataFrame([[1, 2], [3, 4]], columns=["col1", "col2"])
         expected.to_excel(path, "Sheet1", freeze_panes=(1, 1))
@@ -1259,6 +1963,19 @@
         tm.assert_frame_equal(result, expected)
 
     def test_path_path_lib(self, engine, ext):
+        """
+
+        Parameters
+        ----------
+        engine :
+            
+        ext :
+            
+
+        Returns
+        -------
+
+        """
         df = tm.makeDataFrame()
         writer = partial(df.to_excel, engine=engine)
 
@@ -1267,6 +1984,19 @@
         tm.assert_frame_equal(result, df)
 
     def test_path_local_path(self, engine, ext):
+        """
+
+        Parameters
+        ----------
+        engine :
+            
+        ext :
+            
+
+        Returns
+        -------
+
+        """
         df = tm.makeDataFrame()
         writer = partial(df.to_excel, engine=engine)
 
@@ -1275,6 +2005,19 @@
         tm.assert_frame_equal(result, df)
 
     def test_merged_cell_custom_objects(self, merge_cells, path):
+        """
+
+        Parameters
+        ----------
+        merge_cells :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # see GH-27006
         mi = MultiIndex.from_tuples(
             [
@@ -1296,6 +2039,21 @@
 
     @pytest.mark.parametrize("dtype", [None, object])
     def test_raise_when_saving_timezones(self, dtype, tz_aware_fixture, path):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+        tz_aware_fixture :
+            
+        path :
+            
+
+        Returns
+        -------
+
+        """
         # GH 27008, GH 7056
         tz = tz_aware_fixture
         data = pd.Timestamp("2019", tz=tz)
@@ -1310,6 +2068,7 @@
 
 
 class TestExcelWriterEngineTests:
+    """ """
     @pytest.mark.parametrize(
         "klass,ext",
         [
@@ -1319,6 +2078,19 @@
         ],
     )
     def test_ExcelWriter_dispatch(self, klass, ext):
+        """
+
+        Parameters
+        ----------
+        klass :
+            
+        ext :
+            
+
+        Returns
+        -------
+
+        """
         with tm.ensure_clean(ext) as path:
             writer = ExcelWriter(path)
             if ext == ".xlsx" and td.safe_import("xlsxwriter"):
@@ -1328,27 +2100,55 @@
                 assert isinstance(writer, klass)
 
     def test_ExcelWriter_dispatch_raises(self):
+        """ """
         with pytest.raises(ValueError, match="No engine"):
             ExcelWriter("nothing")
 
     def test_register_writer(self):
+        """ """
         # some awkward mocking to test out dispatch and such actually works
         called_save = []
         called_write_cells = []
 
         class DummyClass(ExcelWriter):
+            """ """
             called_save = False
             called_write_cells = False
             supported_extensions = ["xlsx", "xls"]
             engine = "dummy"
 
             def save(self):
+                """ """
                 called_save.append(True)
 
             def write_cells(self, *args, **kwargs):
+                """
+
+                Parameters
+                ----------
+                *args :
+                    
+                **kwargs :
+                    
+
+                Returns
+                -------
+
+                """
                 called_write_cells.append(True)
 
         def check_called(func):
+            """
+
+            Parameters
+            ----------
+            func :
+                
+
+            Returns
+            -------
+
+            """
             func()
             assert len(called_save) >= 1
             assert len(called_write_cells) >= 1
@@ -1367,7 +2167,9 @@
 @td.skip_if_no("xlrd")
 @td.skip_if_no("openpyxl")
 class TestFSPath:
+    """ """
     def test_excelfile_fspath(self):
+        """ """
         with tm.ensure_clean("foo.xlsx") as path:
             df = DataFrame({"A": [1, 2]})
             df.to_excel(path)
@@ -1376,6 +2178,7 @@
             assert result == path
 
     def test_excelwriter_fspath(self):
+        """ """
         with tm.ensure_clean("foo.xlsx") as path:
             writer = ExcelWriter(path)
             assert os.fspath(writer) == str(path)
