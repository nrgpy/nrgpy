# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/polynomial/hermite.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/polynomial/hermite.py
@@ -94,11 +94,10 @@
 
 
 def poly2herm(pol):
-    """
-    poly2herm(pol)
-
+    """poly2herm(pol)
+    
     Convert a polynomial to a Hermite series.
-
+    
     Convert an array representing the coefficients of a polynomial (relative
     to the "standard" basis) ordered from lowest degree to highest, to an
     array of the coefficients of the equivalent Hermite series, ordered
@@ -118,18 +117,15 @@
     See Also
     --------
     herm2poly
-
     Notes
     -----
     The easy way to do conversions between polynomial basis sets
     is to use the convert method of a class instance.
-
     Examples
     --------
     >>> from numpy.polynomial.hermite import poly2herm
     >>> poly2herm(np.arange(4))
     array([1.   ,  2.75 ,  0.5  ,  0.375])
-
     """
     [pol] = pu.as_series([pol])
     deg = len(pol) - 1
@@ -140,9 +136,8 @@
 
 
 def herm2poly(c):
-    """
-    Convert a Hermite series to a polynomial.
-
+    """Convert a Hermite series to a polynomial.
+    
     Convert an array representing the coefficients of a Hermite series,
     ordered from lowest degree to highest, to an array of the coefficients
     of the equivalent polynomial (relative to the "standard" basis) ordered
@@ -164,18 +159,15 @@
     See Also
     --------
     poly2herm
-
     Notes
     -----
     The easy way to do conversions between polynomial basis sets
     is to use the convert method of a class instance.
-
     Examples
     --------
     >>> from numpy.polynomial.hermite import herm2poly
     >>> herm2poly([ 1.   ,  2.75 ,  0.5  ,  0.375])
     array([0., 1., 2., 3.])
-
     """
     from .polynomial import polyadd, polysub, polymulx
 
@@ -215,15 +207,16 @@
 
 
 def hermline(off, scl):
-    """
-    Hermite series whose graph is a straight line.
-
-
+    """Hermite series whose graph is a straight line.
 
     Parameters
     ----------
     off, scl : scalars
         The specified line is given by ``off + scl*x``.
+    off :
+        
+    scl :
+        
 
     Returns
     -------
@@ -234,7 +227,6 @@
     See Also
     --------
     polyline, chebline
-
     Examples
     --------
     >>> from numpy.polynomial.hermite import hermline, hermval
@@ -242,7 +234,6 @@
     3.0
     >>> hermval(1,hermline(3, 2))
     5.0
-
     """
     if scl != 0:
         return np.array([off, scl/2])
@@ -251,23 +242,22 @@
 
 
 def hermfromroots(roots):
-    """
-    Generate a Hermite series with given roots.
-
+    """Generate a Hermite series with given roots.
+    
     The function returns the coefficients of the polynomial
-
+    
     .. math:: p(x) = (x - r_0) * (x - r_1) * ... * (x - r_n),
-
+    
     in Hermite form, where the `r_n` are the roots specified in `roots`.
     If a zero has multiplicity n, then it must appear in `roots` n times.
     For instance, if 2 is a root of multiplicity three and 3 is a root of
     multiplicity 2, then `roots` looks something like [2, 2, 2, 3, 3]. The
     roots can appear in any order.
-
+    
     If the returned coefficients are `c`, then
-
+    
     .. math:: p(x) = c_0 + c_1 * H_1(x) + ... +  c_n * H_n(x)
-
+    
     The coefficient of the last term is not generally 1 for monic
     polynomials in Hermite form.
 
@@ -287,7 +277,6 @@
     See Also
     --------
     polyfromroots, legfromroots, lagfromroots, chebfromroots, hermefromroots
-
     Examples
     --------
     >>> from numpy.polynomial.hermite import hermfromroots, hermval
@@ -297,15 +286,13 @@
     >>> coef = hermfromroots((-1j, 1j))
     >>> hermval((-1j, 1j), coef)
     array([0.+0.j, 0.+0.j])
-
     """
     return pu._fromroots(hermline, hermmul, roots)
 
 
 def hermadd(c1, c2):
-    """
-    Add one Hermite series to another.
-
+    """Add one Hermite series to another.
+    
     Returns the sum of two Hermite series `c1` + `c2`.  The arguments
     are sequences of coefficients ordered from lowest order term to
     highest, i.e., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.
@@ -315,6 +302,10 @@
     c1, c2 : array_like
         1-D arrays of Hermite series coefficients ordered from low to
         high.
+    c1 :
+        
+    c2 :
+        
 
     Returns
     -------
@@ -324,28 +315,24 @@
     See Also
     --------
     hermsub, hermmulx, hermmul, hermdiv, hermpow
-
     Notes
     -----
     Unlike multiplication, division, etc., the sum of two Hermite series
     is a Hermite series (without having to "reproject" the result onto
     the basis set) so addition, just like that of "standard" polynomials,
     is simply "component-wise."
-
     Examples
     --------
     >>> from numpy.polynomial.hermite import hermadd
     >>> hermadd([1, 2, 3], [1, 2, 3, 4])
     array([2., 4., 6., 4.])
-
     """
     return pu._add(c1, c2)
 
 
 def hermsub(c1, c2):
-    """
-    Subtract one Hermite series from another.
-
+    """Subtract one Hermite series from another.
+    
     Returns the difference of two Hermite series `c1` - `c2`.  The
     sequences of coefficients are from lowest order term to highest, i.e.,
     [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.
@@ -355,6 +342,10 @@
     c1, c2 : array_like
         1-D arrays of Hermite series coefficients ordered from low to
         high.
+    c1 :
+        
+    c2 :
+        
 
     Returns
     -------
@@ -364,30 +355,26 @@
     See Also
     --------
     hermadd, hermmulx, hermmul, hermdiv, hermpow
-
     Notes
     -----
     Unlike multiplication, division, etc., the difference of two Hermite
     series is a Hermite series (without having to "reproject" the result
     onto the basis set) so subtraction, just like that of "standard"
     polynomials, is simply "component-wise."
-
     Examples
     --------
     >>> from numpy.polynomial.hermite import hermsub
     >>> hermsub([1, 2, 3, 4], [1, 2, 3])
     array([0.,  0.,  0.,  4.])
-
     """
     return pu._sub(c1, c2)
 
 
 def hermmulx(c):
     """Multiply a Hermite series by x.
-
+    
     Multiply the Hermite series `c` by x, where x is the independent
     variable.
-
 
     Parameters
     ----------
@@ -403,22 +390,19 @@
     See Also
     --------
     hermadd, hermsub, hermmul, hermdiv, hermpow
-
     Notes
     -----
     The multiplication uses the recursion relationship for Hermite
     polynomials in the form
-
+    
     .. math::
-
+    
     xP_i(x) = (P_{i + 1}(x)/2 + i*P_{i - 1}(x))
-
     Examples
     --------
     >>> from numpy.polynomial.hermite import hermmulx
     >>> hermmulx([1, 2, 3])
     array([2. , 6.5, 1. , 1.5])
-
     """
     # c is a trimmed copy
     [c] = pu.as_series([c])
@@ -436,9 +420,8 @@
 
 
 def hermmul(c1, c2):
-    """
-    Multiply one Hermite series by another.
-
+    """Multiply one Hermite series by another.
+    
     Returns the product of two Hermite series `c1` * `c2`.  The arguments
     are sequences of coefficients, from lowest order "term" to highest,
     e.g., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.
@@ -448,6 +431,10 @@
     c1, c2 : array_like
         1-D arrays of Hermite series coefficients ordered from low to
         high.
+    c1 :
+        
+    c2 :
+        
 
     Returns
     -------
@@ -457,7 +444,6 @@
     See Also
     --------
     hermadd, hermsub, hermmulx, hermdiv, hermpow
-
     Notes
     -----
     In general, the (polynomial) product of two C-series results in terms
@@ -465,13 +451,11 @@
     the product as a Hermite series, it is necessary to "reproject" the
     product onto said basis set, which may produce "unintuitive" (but
     correct) results; see Examples section below.
-
     Examples
     --------
     >>> from numpy.polynomial.hermite import hermmul
     >>> hermmul([1, 2, 3], [0, 1, 2])
     array([52.,  29.,  52.,   7.,   6.])
-
     """
     # s1, s2 are trimmed copies
     [c1, c2] = pu.as_series([c1, c2])
@@ -502,9 +486,8 @@
 
 
 def hermdiv(c1, c2):
-    """
-    Divide one Hermite series by another.
-
+    """Divide one Hermite series by another.
+    
     Returns the quotient-with-remainder of two Hermite series
     `c1` / `c2`.  The arguments are sequences of coefficients from lowest
     order "term" to highest, e.g., [1,2,3] represents the series
@@ -515,6 +498,10 @@
     c1, c2 : array_like
         1-D arrays of Hermite series coefficients ordered from low to
         high.
+    c1 :
+        
+    c2 :
+        
 
     Returns
     -------
@@ -525,7 +512,6 @@
     See Also
     --------
     hermadd, hermsub, hermmulx, hermmul, hermpow
-
     Notes
     -----
     In general, the (polynomial) division of one Hermite series by another
@@ -534,7 +520,6 @@
     series, it is necessary to "reproject" the results onto the Hermite
     basis set, which may produce "unintuitive" (but correct) results; see
     Examples section below.
-
     Examples
     --------
     >>> from numpy.polynomial.hermite import hermdiv
@@ -544,14 +529,13 @@
     (array([1., 2., 3.]), array([2., 2.]))
     >>> hermdiv([ 53.,  30.,  52.,   7.,   6.], [0, 1, 2])
     (array([1., 2., 3.]), array([1., 1.]))
-
     """
     return pu._div(hermmul, c1, c2)
 
 
 def hermpow(c, pow, maxpower=16):
     """Raise a Hermite series to a power.
-
+    
     Returns the Hermite series `c` raised to the power `pow`. The
     argument `c` is a sequence of coefficients ordered from low to high.
     i.e., [1,2,3] is the series  ``P_0 + 2*P_1 + 3*P_2.``
@@ -575,21 +559,18 @@
     See Also
     --------
     hermadd, hermsub, hermmulx, hermmul, hermdiv
-
     Examples
     --------
     >>> from numpy.polynomial.hermite import hermpow
     >>> hermpow([1, 2, 3], 2)
     array([81.,  52.,  82.,  12.,   9.])
-
     """
     return pu._pow(hermmul, c, pow, maxpower)
 
 
 def hermder(c, m=1, scl=1, axis=0):
-    """
-    Differentiate a Hermite series.
-
+    """Differentiate a Hermite series.
+    
     Returns the Hermite series coefficients `c` differentiated `m` times
     along `axis`.  At each iteration the result is multiplied by `scl` (the
     scaling factor is for use in a linear change of variable). The argument
@@ -613,7 +594,6 @@
         variable. (Default: 1)
     axis : int, optional
         Axis over which the derivative is taken. (Default: 0).
-
         .. versionadded:: 1.7.0
 
     Returns
@@ -624,14 +604,12 @@
     See Also
     --------
     hermint
-
     Notes
     -----
     In general, the result of differentiating a Hermite series does not
     resemble the same operation on a power series. Thus the result of this
     function may be "unintuitive," albeit correct; see Examples section
     below.
-
     Examples
     --------
     >>> from numpy.polynomial.hermite import hermder
@@ -639,7 +617,6 @@
     array([1., 2., 3.])
     >>> hermder([-0.5,  1./2.,  1./8.,  1./12.,  1./16.], m=2)
     array([1., 2., 3.])
-
     """
     c = np.array(c, ndmin=1, copy=True)
     if c.dtype.char in '?bBhHiIlLqQpP':
@@ -670,9 +647,8 @@
 
 
 def hermint(c, m=1, k=[], lbnd=0, scl=1, axis=0):
-    """
-    Integrate a Hermite series.
-
+    """Integrate a Hermite series.
+    
     Returns the Hermite series coefficients `c` integrated `m` times from
     `lbnd` along `axis`. At each iteration the resulting series is
     **multiplied** by `scl` and an integration constant, `k`, is added.
@@ -706,7 +682,6 @@
         before the integration constant is added. (Default: 1)
     axis : int, optional
         Axis over which the integral is taken. (Default: 0).
-
         .. versionadded:: 1.7.0
 
     Returns
@@ -723,7 +698,6 @@
     See Also
     --------
     hermder
-
     Notes
     -----
     Note that the result of each integration is *multiplied* by `scl`.
@@ -731,12 +705,11 @@
     variable :math:`u = ax + b` in an integral relative to `x`.  Then
     :math:`dx = du/a`, so one will need to set `scl` equal to
     :math:`1/a` - perhaps not what one would have first thought.
-
+    
     Also note that, in general, the result of integrating a C-series needs
     to be "reprojected" onto the C-series basis set.  Thus, typically,
     the result of this function is "unintuitive," albeit correct; see
     Examples section below.
-
     Examples
     --------
     >>> from numpy.polynomial.hermite import hermint
@@ -750,7 +723,6 @@
     array([-2. ,  0.5,  0.5,  0.5])
     >>> hermint([1,2,3], m=2, k=[1,2], lbnd=-1)
     array([ 1.66666667, -0.5       ,  0.125     ,  0.08333333,  0.0625    ]) # may vary
-
     """
     c = np.array(c, ndmin=1, copy=True)
     if c.dtype.char in '?bBhHiIlLqQpP':
@@ -792,24 +764,23 @@
 
 
 def hermval(x, c, tensor=True):
-    """
-    Evaluate an Hermite series at points x.
-
+    """Evaluate an Hermite series at points x.
+    
     If `c` is of length `n + 1`, this function returns the value:
-
+    
     .. math:: p(x) = c_0 * H_0(x) + c_1 * H_1(x) + ... + c_n * H_n(x)
-
+    
     The parameter `x` is converted to an array only if it is a tuple or a
     list, otherwise it is treated as a scalar. In either case, either `x`
     or its elements must support multiplication and addition both with
     themselves and with the elements of `c`.
-
+    
     If `c` is a 1-D array, then `p(x)` will have the same shape as `x`.  If
     `c` is multidimensional, then the shape of the result depends on the
     value of `tensor`. If `tensor` is true the shape will be c.shape[1:] +
     x.shape. If `tensor` is false the shape will be c.shape[1:]. Note that
     scalars have shape (,).
-
+    
     Trailing zeros in the coefficients will be used in the evaluation, so
     they should be avoided if efficiency is a concern.
 
@@ -833,7 +804,6 @@
         `c` is evaluated for every element of `x`. If False, `x` is broadcast
         over the columns of `c` for the evaluation.  This keyword is useful
         when `c` is multidimensional. The default value is True.
-
         .. versionadded:: 1.7.0
 
     Returns
@@ -844,11 +814,9 @@
     See Also
     --------
     hermval2d, hermgrid2d, hermval3d, hermgrid3d
-
     Notes
     -----
     The evaluation uses Clenshaw recursion, aka synthetic division.
-
     Examples
     --------
     >>> from numpy.polynomial.hermite import hermval
@@ -858,7 +826,6 @@
     >>> hermval([[1,2],[3,4]], coef)
     array([[ 11.,   51.],
            [115.,  203.]])
-
     """
     c = np.array(c, ndmin=1, copy=False)
     if c.dtype.char in '?bBhHiIlLqQpP':
@@ -888,19 +855,18 @@
 
 
 def hermval2d(x, y, c):
-    """
-    Evaluate a 2-D Hermite series at points (x, y).
-
+    """Evaluate a 2-D Hermite series at points (x, y).
+    
     This function returns the values:
-
+    
     .. math:: p(x,y) = \\sum_{i,j} c_{i,j} * H_i(x) * H_j(y)
-
+    
     The parameters `x` and `y` are converted to arrays only if they are
     tuples or a lists, otherwise they are treated as a scalars and they
     must have the same shape after conversion. In either case, either `x`
     and `y` or their elements must support multiplication and addition both
     with themselves and with the elements of `c`.
-
+    
     If `c` is a 1-D array a one is implicitly appended to its shape to make
     it 2-D. The shape of the result will be c.shape[2:] + x.shape.
 
@@ -916,6 +882,10 @@
         of multi-degree i,j is contained in ``c[i,j]``. If `c` has
         dimension greater than two the remaining indices enumerate multiple
         sets of coefficients.
+    x :
+        
+    y :
+        
 
     Returns
     -------
@@ -926,33 +896,30 @@
     See Also
     --------
     hermval, hermgrid2d, hermval3d, hermgrid3d
-
-    Notes
-    -----
-
+    Notes
+    -----
+    
     .. versionadded:: 1.7.0
-
     """
     return pu._valnd(hermval, c, x, y)
 
 
 def hermgrid2d(x, y, c):
-    """
-    Evaluate a 2-D Hermite series on the Cartesian product of x and y.
-
+    """Evaluate a 2-D Hermite series on the Cartesian product of x and y.
+    
     This function returns the values:
-
+    
     .. math:: p(a,b) = \\sum_{i,j} c_{i,j} * H_i(a) * H_j(b)
-
+    
     where the points `(a, b)` consist of all pairs formed by taking
     `a` from `x` and `b` from `y`. The resulting points form a grid with
     `x` in the first dimension and `y` in the second.
-
+    
     The parameters `x` and `y` are converted to arrays only if they are
     tuples or a lists, otherwise they are treated as a scalars. In either
     case, either `x` and `y` or their elements must support multiplication
     and addition both with themselves and with the elements of `c`.
-
+    
     If `c` has fewer than two dimensions, ones are implicitly appended to
     its shape to make it 2-D. The shape of the result will be c.shape[2:] +
     x.shape.
@@ -969,6 +936,10 @@
         degree i,j are contained in ``c[i,j]``. If `c` has dimension
         greater than two the remaining indices enumerate multiple sets of
         coefficients.
+    x :
+        
+    y :
+        
 
     Returns
     -------
@@ -979,30 +950,27 @@
     See Also
     --------
     hermval, hermval2d, hermval3d, hermgrid3d
-
-    Notes
-    -----
-
+    Notes
+    -----
+    
     .. versionadded:: 1.7.0
-
     """
     return pu._gridnd(hermval, c, x, y)
 
 
 def hermval3d(x, y, z, c):
-    """
-    Evaluate a 3-D Hermite series at points (x, y, z).
-
+    """Evaluate a 3-D Hermite series at points (x, y, z).
+    
     This function returns the values:
-
+    
     .. math:: p(x,y,z) = \\sum_{i,j,k} c_{i,j,k} * H_i(x) * H_j(y) * H_k(z)
-
+    
     The parameters `x`, `y`, and `z` are converted to arrays only if
     they are tuples or a lists, otherwise they are treated as a scalars and
     they must have the same shape after conversion. In either case, either
     `x`, `y`, and `z` or their elements must support multiplication and
     addition both with themselves and with the elements of `c`.
-
+    
     If `c` has fewer than 3 dimensions, ones are implicitly appended to its
     shape to make it 3-D. The shape of the result will be c.shape[3:] +
     x.shape.
@@ -1020,6 +988,12 @@
         multi-degree i,j,k is contained in ``c[i,j,k]``. If `c` has dimension
         greater than 3 the remaining indices enumerate multiple sets of
         coefficients.
+    x :
+        
+    y :
+        
+    z :
+        
 
     Returns
     -------
@@ -1030,35 +1004,32 @@
     See Also
     --------
     hermval, hermval2d, hermgrid2d, hermgrid3d
-
-    Notes
-    -----
-
+    Notes
+    -----
+    
     .. versionadded:: 1.7.0
-
     """
     return pu._valnd(hermval, c, x, y, z)
 
 
 def hermgrid3d(x, y, z, c):
-    """
-    Evaluate a 3-D Hermite series on the Cartesian product of x, y, and z.
-
+    """Evaluate a 3-D Hermite series on the Cartesian product of x, y, and z.
+    
     This function returns the values:
-
+    
     .. math:: p(a,b,c) = \\sum_{i,j,k} c_{i,j,k} * H_i(a) * H_j(b) * H_k(c)
-
+    
     where the points `(a, b, c)` consist of all triples formed by taking
     `a` from `x`, `b` from `y`, and `c` from `z`. The resulting points form
     a grid with `x` in the first dimension, `y` in the second, and `z` in
     the third.
-
+    
     The parameters `x`, `y`, and `z` are converted to arrays only if they
     are tuples or a lists, otherwise they are treated as a scalars. In
     either case, either `x`, `y`, and `z` or their elements must support
     multiplication and addition both with themselves and with the elements
     of `c`.
-
+    
     If `c` has fewer than three dimensions, ones are implicitly appended to
     its shape to make it 3-D. The shape of the result will be c.shape[3:] +
     x.shape + y.shape + z.shape.
@@ -1076,6 +1047,12 @@
         degree i,j are contained in ``c[i,j]``. If `c` has dimension
         greater than two the remaining indices enumerate multiple sets of
         coefficients.
+    x :
+        
+    y :
+        
+    z :
+        
 
     Returns
     -------
@@ -1086,27 +1063,25 @@
     See Also
     --------
     hermval, hermval2d, hermgrid2d, hermval3d
-
-    Notes
-    -----
-
+    Notes
+    -----
+    
     .. versionadded:: 1.7.0
-
     """
     return pu._gridnd(hermval, c, x, y, z)
 
 
 def hermvander(x, deg):
     """Pseudo-Vandermonde matrix of given degree.
-
+    
     Returns the pseudo-Vandermonde matrix of degree `deg` and sample points
     `x`. The pseudo-Vandermonde matrix is defined by
-
+    
     .. math:: V[..., i] = H_i(x),
-
+    
     where `0 <= i <= deg`. The leading indices of `V` index the elements of
     `x` and the last index is the degree of the Hermite polynomial.
-
+    
     If `c` is a 1-D array of coefficients of length `n + 1` and `V` is the
     array ``V = hermvander(x, n)``, then ``np.dot(V, c)`` and
     ``hermval(x, c)`` are the same up to roundoff. This equivalence is
@@ -1138,7 +1113,6 @@
     array([[ 1., -2.,  2.,  4.],
            [ 1.,  0., -2., -0.],
            [ 1.,  2.,  2., -4.]])
-
     """
     ideg = pu._deprecate_as_int(deg, "deg")
     if ideg < 0:
@@ -1159,22 +1133,22 @@
 
 def hermvander2d(x, y, deg):
     """Pseudo-Vandermonde matrix of given degrees.
-
+    
     Returns the pseudo-Vandermonde matrix of degrees `deg` and sample
     points `(x, y)`. The pseudo-Vandermonde matrix is defined by
-
+    
     .. math:: V[..., (deg[1] + 1)*i + j] = H_i(x) * H_j(y),
-
+    
     where `0 <= i <= deg[0]` and `0 <= j <= deg[1]`. The leading indices of
     `V` index the points `(x, y)` and the last index encodes the degrees of
     the Hermite polynomials.
-
+    
     If ``V = hermvander2d(x, y, [xdeg, ydeg])``, then the columns of `V`
     correspond to the elements of a 2-D coefficient array `c` of shape
     (xdeg + 1, ydeg + 1) in the order
-
+    
     .. math:: c_{00}, c_{01}, c_{02} ... , c_{10}, c_{11}, c_{12} ...
-
+    
     and ``np.dot(V, c.flat)`` and ``hermval2d(x, y, c)`` will be the same
     up to roundoff. This equivalence is useful both for least squares
     fitting and for the evaluation of a large number of 2-D Hermite
@@ -1189,6 +1163,10 @@
         arrays.
     deg : list of ints
         List of maximum degrees of the form [x_deg, y_deg].
+    x :
+        
+    y :
+        
 
     Returns
     -------
@@ -1200,35 +1178,33 @@
     See Also
     --------
     hermvander, hermvander3d, hermval2d, hermval3d
-
-    Notes
-    -----
-
+    Notes
+    -----
+    
     .. versionadded:: 1.7.0
-
     """
     return pu._vander_nd_flat((hermvander, hermvander), (x, y), deg)
 
 
 def hermvander3d(x, y, z, deg):
     """Pseudo-Vandermonde matrix of given degrees.
-
+    
     Returns the pseudo-Vandermonde matrix of degrees `deg` and sample
     points `(x, y, z)`. If `l, m, n` are the given degrees in `x, y, z`,
     then The pseudo-Vandermonde matrix is defined by
-
+    
     .. math:: V[..., (m+1)(n+1)i + (n+1)j + k] = H_i(x)*H_j(y)*H_k(z),
-
+    
     where `0 <= i <= l`, `0 <= j <= m`, and `0 <= j <= n`.  The leading
     indices of `V` index the points `(x, y, z)` and the last index encodes
     the degrees of the Hermite polynomials.
-
+    
     If ``V = hermvander3d(x, y, z, [xdeg, ydeg, zdeg])``, then the columns
     of `V` correspond to the elements of a 3-D coefficient array `c` of
     shape (xdeg + 1, ydeg + 1, zdeg + 1) in the order
-
+    
     .. math:: c_{000}, c_{001}, c_{002},... , c_{010}, c_{011}, c_{012},...
-
+    
     and  ``np.dot(V, c.flat)`` and ``hermval3d(x, y, z, c)`` will be the
     same up to roundoff. This equivalence is useful both for least squares
     fitting and for the evaluation of a large number of 3-D Hermite
@@ -1243,6 +1219,12 @@
         arrays.
     deg : list of ints
         List of maximum degrees of the form [x_deg, y_deg, z_deg].
+    x :
+        
+    y :
+        
+    z :
+        
 
     Returns
     -------
@@ -1254,29 +1236,26 @@
     See Also
     --------
     hermvander, hermvander3d, hermval2d, hermval3d
-
-    Notes
-    -----
-
+    Notes
+    -----
+    
     .. versionadded:: 1.7.0
-
     """
     return pu._vander_nd_flat((hermvander, hermvander, hermvander), (x, y, z), deg)
 
 
 def hermfit(x, y, deg, rcond=None, full=False, w=None):
-    """
-    Least squares fit of Hermite series to data.
-
+    """Least squares fit of Hermite series to data.
+    
     Return the coefficients of a Hermite series of degree `deg` that is the
     least squares fit to the data values `y` given at points `x`. If `y` is
     1-D the returned coefficients will also be 1-D. If `y` is 2-D multiple
     fits are done, one for each column of `y`, and the resulting
     coefficients are stored in the corresponding columns of a 2-D return.
     The fitted polynomial(s) are in the form
-
+    
     .. math::  p(x) = c_0 + c_1 * H_1(x) + ... + c_n * H_n(x),
-
+    
     where `n` is `deg`.
 
     Parameters
@@ -1313,26 +1292,21 @@
         Hermite coefficients ordered from low to high. If `y` was 2-D,
         the coefficients for the data in column k  of `y` are in column
         `k`.
-
     [residuals, rank, singular_values, rcond] : list
         These values are only returned if `full` = True
-
         resid -- sum of squared residuals of the least squares fit
         rank -- the numerical rank of the scaled Vandermonde matrix
         sv -- singular values of the scaled Vandermonde matrix
         rcond -- value of `rcond`.
-
         For more details, see `linalg.lstsq`.
-
     Warns
-    -----
+        
+    -----
+        
     RankWarning
         The rank of the coefficient matrix in the least-squares fit is
         deficient. The warning is only raised if `full` = False.  The
         warnings can be turned off by
-
-        >>> import warnings
-        >>> warnings.simplefilter('ignore', np.RankWarning)
 
     See Also
     --------
@@ -1342,58 +1316,57 @@
     hermweight : Hermite weight function
     linalg.lstsq : Computes a least-squares fit from the matrix.
     scipy.interpolate.UnivariateSpline : Computes spline fits.
-
     Notes
     -----
     The solution is the coefficients of the Hermite series `p` that
     minimizes the sum of the weighted squared errors
-
+    
     .. math:: E = \\sum_j w_j^2 * |y_j - p(x_j)|^2,
-
+    
     where the :math:`w_j` are the weights. This problem is solved by
     setting up the (typically) overdetermined matrix equation
-
+    
     .. math:: V(x) * c = w * y,
-
+    
     where `V` is the weighted pseudo Vandermonde matrix of `x`, `c` are the
     coefficients to be solved for, `w` are the weights, `y` are the
     observed values.  This equation is then solved using the singular value
     decomposition of `V`.
-
+    
     If some of the singular values of `V` are so small that they are
     neglected, then a `RankWarning` will be issued. This means that the
     coefficient values may be poorly determined. Using a lower order fit
     will usually get rid of the warning.  The `rcond` parameter can also be
     set to a value smaller than its default, but the resulting fit may be
     spurious and have large contributions from roundoff error.
-
+    
     Fits using Hermite series are probably most useful when the data can be
     approximated by ``sqrt(w(x)) * p(x)``, where `w(x)` is the Hermite
     weight. In that case the weight ``sqrt(w(x[i]))`` should be used
     together with data values ``y[i]/sqrt(w(x[i]))``. The weight function is
     available as `hermweight`.
-
     References
     ----------
     .. [1] Wikipedia, "Curve fitting",
            https://en.wikipedia.org/wiki/Curve_fitting
-
     Examples
     --------
+    >>> import warnings
+        >>> warnings.simplefilter('ignore', np.RankWarning)
+    
     >>> from numpy.polynomial.hermite import hermfit, hermval
     >>> x = np.linspace(-10, 10)
     >>> err = np.random.randn(len(x))/10
     >>> y = hermval(x, [1, 2, 3]) + err
     >>> hermfit(x, y, 2)
     array([1.0218, 1.9986, 2.9999]) # may vary
-
     """
     return pu._fit(hermvander, x, y, deg, rcond, full, w)
 
 
 def hermcompanion(c):
     """Return the scaled companion matrix of c.
-
+    
     The basis polynomials are scaled so that the companion matrix is
     symmetric when `c` is an Hermite basis polynomial. This provides
     better eigenvalue estimates than the unscaled case and for basis
@@ -1413,9 +1386,8 @@
 
     Notes
     -----
-
+    
     .. versionadded:: 1.7.0
-
     """
     # c is a trimmed copy
     [c] = pu.as_series([c])
@@ -1437,11 +1409,10 @@
 
 
 def hermroots(c):
-    """
-    Compute the roots of a Hermite series.
-
+    """Compute the roots of a Hermite series.
+    
     Return the roots (a.k.a. "zeros") of the polynomial
-
+    
     .. math:: p(x) = \\sum_i c[i] * H_i(x).
 
     Parameters
@@ -1458,7 +1429,6 @@
     See Also
     --------
     polyroots, legroots, lagroots, chebroots, hermeroots
-
     Notes
     -----
     The root estimates are obtained as the eigenvalues of the companion
@@ -1468,10 +1438,9 @@
     errors as the value of the series near such points is relatively
     insensitive to errors in the roots. Isolated roots near the origin can
     be improved by a few iterations of Newton's method.
-
+    
     The Hermite series basis polynomials aren't powers of `x` so the
     results of this function may seem unintuitive.
-
     Examples
     --------
     >>> from numpy.polynomial.hermite import hermroots, hermfromroots
@@ -1480,7 +1449,6 @@
     array([0.   ,  0.25 ,  0.   ,  0.125])
     >>> hermroots(coef)
     array([-1.00000000e+00, -1.38777878e-17,  1.00000000e+00])
-
     """
     # c is a trimmed copy
     [c] = pu.as_series([c])
@@ -1497,12 +1465,10 @@
 
 
 def _normed_hermite_n(x, n):
-    """
-    Evaluate a normalized Hermite polynomial.
-
+    """Evaluate a normalized Hermite polynomial.
+    
     Compute the value of the normalized Hermite polynomial of degree ``n``
     at the points ``x``.
-
 
     Parameters
     ----------
@@ -1519,11 +1485,10 @@
     Notes
     -----
     .. versionadded:: 1.10.0
-
+    
     This function is needed for finding the Gauss points and integration
     weights for high degrees. The values of the standard Hermite functions
     overflow when n >= 207.
-
     """
     if n == 0:
         return np.full(x.shape, 1/np.sqrt(np.sqrt(np.pi)))
@@ -1540,9 +1505,8 @@
 
 
 def hermgauss(deg):
-    """
-    Gauss-Hermite quadrature.
-
+    """Gauss-Hermite quadrature.
+    
     Computes the sample points and weights for Gauss-Hermite quadrature.
     These sample points and weights will correctly integrate polynomials of
     degree :math:`2*deg - 1` or less over the interval :math:`[-\\inf, \\inf]`
@@ -1562,18 +1526,17 @@
 
     Notes
     -----
-
+    
     .. versionadded:: 1.7.0
-
+    
     The results have only been tested up to degree 100, higher degrees may
     be problematic. The weights are determined by using the fact that
-
+    
     .. math:: w_k = c / (H'_n(x_k) * H_{n-1}(x_k))
-
+    
     where :math:`c` is a constant independent of :math:`k` and :math:`x_k`
     is the k'th root of :math:`H_n`, and then scaling the results to get
     the right value when integrating 1.
-
     """
     ideg = pu._deprecate_as_int(deg, "deg")
     if ideg <= 0:
@@ -1607,9 +1570,8 @@
 
 
 def hermweight(x):
-    """
-    Weight function of the Hermite polynomials.
-
+    """Weight function of the Hermite polynomials.
+    
     The weight function is :math:`\\exp(-x^2)` and the interval of
     integration is :math:`[-\\inf, \\inf]`. the Hermite polynomials are
     orthogonal, but not normalized, with respect to this weight function.
@@ -1617,18 +1579,17 @@
     Parameters
     ----------
     x : array_like
-       Values at which the weight function will be computed.
+        Values at which the weight function will be computed.
 
     Returns
     -------
     w : ndarray
-       The weight function at `x`.
-
-    Notes
-    -----
-
+        The weight function at `x`.
+
+    Notes
+    -----
+    
     .. versionadded:: 1.7.0
-
     """
     w = np.exp(-x**2)
     return w
@@ -1640,25 +1601,18 @@
 
 class Hermite(ABCPolyBase):
     """An Hermite series class.
-
+    
     The Hermite class provides the standard Python numerical methods
     '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the
     attributes and methods listed in the `ABCPolyBase` documentation.
 
     Parameters
     ----------
-    coef : array_like
-        Hermite coefficients in order of increasing degree, i.e,
-        ``(1, 2, 3)`` gives ``1*H_0(x) + 2*H_1(X) + 3*H_2(x)``.
-    domain : (2,) array_like, optional
-        Domain to use. The interval ``[domain[0], domain[1]]`` is mapped
-        to the interval ``[window[0], window[1]]`` by shifting and scaling.
-        The default value is [-1, 1].
-    window : (2,) array_like, optional
-        Window, see `domain` for its use. The default value is [-1, 1].
-
-        .. versionadded:: 1.6.0
-
+
+    Returns
+    -------
+
+    
     """
     # Virtual Functions
     _add = staticmethod(hermadd)
