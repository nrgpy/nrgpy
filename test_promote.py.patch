# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/dtypes/cast/test_promote.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/dtypes/cast/test_promote.py
@@ -44,9 +44,8 @@
     ]
 )
 def any_numpy_dtype_reduced(request):
-    """
-    Parameterized fixture for numpy dtypes, reduced from any_numpy_dtype.
-
+    """Parameterized fixture for numpy dtypes, reduced from any_numpy_dtype.
+    
     * bool
     * 'int32'
     * 'uint64'
@@ -59,28 +58,37 @@
     * str
     * bytes
     * object
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
     """
     return request.param
 
 
 def _check_promote(dtype, fill_value, expected_dtype, exp_val_for_scalar=None):
-    """
-    Auxiliary function to unify testing of scalar/array promotion.
-
-    Parameters
-    ----------
-    dtype : dtype
-        The value to pass on as the first argument to maybe_promote.
-    fill_value : scalar
-        The value to pass on as the second argument to maybe_promote as
-        a scalar.
-    expected_dtype : dtype
-        The expected dtype returned by maybe_promote (by design this is the
-        same regardless of whether fill_value was passed as a scalar or in an
-        array!).
-    exp_val_for_scalar : scalar
-        The expected value for the (potentially upcast) fill_value returned by
-        maybe_promote.
+    """Auxiliary function to unify testing of scalar/array promotion.
+
+    Parameters
+    ----------
+    dtype :
+        
+    fill_value :
+        
+    expected_dtype :
+        
+    exp_val_for_scalar :
+         (Default value = None)
+
+    Returns
+    -------
+
+    
     """
     assert is_scalar(fill_value)
 
@@ -95,6 +103,19 @@
 
 
 def _assert_match(result_fill_value, expected_fill_value):
+    """
+
+    Parameters
+    ----------
+    result_fill_value :
+        
+    expected_fill_value :
+        
+
+    Returns
+    -------
+
+    """
     # GH#23982/25425 require the same type in addition to equality/NA-ness
     res_type = type(result_fill_value)
     ex_type = type(expected_fill_value)
@@ -227,6 +248,21 @@
     ],
 )
 def test_maybe_promote_int_with_int(dtype, fill_value, expected_dtype):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+    fill_value :
+        
+    expected_dtype :
+        
+
+    Returns
+    -------
+
+    """
     dtype = np.dtype(dtype)
     expected_dtype = np.dtype(expected_dtype)
 
@@ -237,6 +273,19 @@
 
 
 def test_maybe_promote_int_with_float(any_int_dtype, float_dtype):
+    """
+
+    Parameters
+    ----------
+    any_int_dtype :
+        
+    float_dtype :
+        
+
+    Returns
+    -------
+
+    """
     dtype = np.dtype(any_int_dtype)
     fill_dtype = np.dtype(float_dtype)
 
@@ -252,6 +301,19 @@
 
 
 def test_maybe_promote_float_with_int(float_dtype, any_int_dtype):
+    """
+
+    Parameters
+    ----------
+    float_dtype :
+        
+    any_int_dtype :
+        
+
+    Returns
+    -------
+
+    """
 
     dtype = np.dtype(float_dtype)
     fill_dtype = np.dtype(any_int_dtype)
@@ -294,6 +356,21 @@
     ],
 )
 def test_maybe_promote_float_with_float(dtype, fill_value, expected_dtype):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+    fill_value :
+        
+    expected_dtype :
+        
+
+    Returns
+    -------
+
+    """
 
     dtype = np.dtype(dtype)
     expected_dtype = np.dtype(expected_dtype)
@@ -305,6 +382,17 @@
 
 
 def test_maybe_promote_bool_with_any(any_numpy_dtype_reduced):
+    """
+
+    Parameters
+    ----------
+    any_numpy_dtype_reduced :
+        
+
+    Returns
+    -------
+
+    """
     dtype = np.dtype(bool)
     fill_dtype = np.dtype(any_numpy_dtype_reduced)
 
@@ -319,6 +407,17 @@
 
 
 def test_maybe_promote_any_with_bool(any_numpy_dtype_reduced):
+    """
+
+    Parameters
+    ----------
+    any_numpy_dtype_reduced :
+        
+
+    Returns
+    -------
+
+    """
     dtype = np.dtype(any_numpy_dtype_reduced)
     fill_value = True
 
@@ -331,6 +430,19 @@
 
 
 def test_maybe_promote_bytes_with_any(bytes_dtype, any_numpy_dtype_reduced):
+    """
+
+    Parameters
+    ----------
+    bytes_dtype :
+        
+    any_numpy_dtype_reduced :
+        
+
+    Returns
+    -------
+
+    """
     dtype = np.dtype(bytes_dtype)
     fill_dtype = np.dtype(any_numpy_dtype_reduced)
 
@@ -345,6 +457,19 @@
 
 
 def test_maybe_promote_any_with_bytes(any_numpy_dtype_reduced, bytes_dtype):
+    """
+
+    Parameters
+    ----------
+    any_numpy_dtype_reduced :
+        
+    bytes_dtype :
+        
+
+    Returns
+    -------
+
+    """
     dtype = np.dtype(any_numpy_dtype_reduced)
 
     # create array of given dtype
@@ -359,6 +484,19 @@
 
 
 def test_maybe_promote_datetime64_with_any(datetime64_dtype, any_numpy_dtype_reduced):
+    """
+
+    Parameters
+    ----------
+    datetime64_dtype :
+        
+    any_numpy_dtype_reduced :
+        
+
+    Returns
+    -------
+
+    """
     dtype = np.dtype(datetime64_dtype)
     fill_dtype = np.dtype(any_numpy_dtype_reduced)
 
@@ -390,6 +528,21 @@
 def test_maybe_promote_any_with_datetime64(
     any_numpy_dtype_reduced, datetime64_dtype, fill_value
 ):
+    """
+
+    Parameters
+    ----------
+    any_numpy_dtype_reduced :
+        
+    datetime64_dtype :
+        
+    fill_value :
+        
+
+    Returns
+    -------
+
+    """
     dtype = np.dtype(any_numpy_dtype_reduced)
 
     # filling datetime with anything but datetime casts to object
@@ -407,6 +560,19 @@
 def test_maybe_promote_datetimetz_with_any_numpy_dtype(
     tz_aware_fixture, any_numpy_dtype_reduced
 ):
+    """
+
+    Parameters
+    ----------
+    tz_aware_fixture :
+        
+    any_numpy_dtype_reduced :
+        
+
+    Returns
+    -------
+
+    """
     dtype = DatetimeTZDtype(tz=tz_aware_fixture)
     fill_dtype = np.dtype(any_numpy_dtype_reduced)
 
@@ -421,6 +587,19 @@
 
 
 def test_maybe_promote_datetimetz_with_datetimetz(tz_aware_fixture, tz_aware_fixture2):
+    """
+
+    Parameters
+    ----------
+    tz_aware_fixture :
+        
+    tz_aware_fixture2 :
+        
+
+    Returns
+    -------
+
+    """
     dtype = DatetimeTZDtype(tz=tz_aware_fixture)
     fill_dtype = DatetimeTZDtype(tz=tz_aware_fixture2)
 
@@ -439,6 +618,19 @@
 
 @pytest.mark.parametrize("fill_value", [None, np.nan, NaT])
 def test_maybe_promote_datetimetz_with_na(tz_aware_fixture, fill_value):
+    """
+
+    Parameters
+    ----------
+    tz_aware_fixture :
+        
+    fill_value :
+        
+
+    Returns
+    -------
+
+    """
 
     dtype = DatetimeTZDtype(tz=tz_aware_fixture)
 
@@ -461,6 +653,21 @@
 def test_maybe_promote_any_numpy_dtype_with_datetimetz(
     any_numpy_dtype_reduced, tz_aware_fixture, fill_value
 ):
+    """
+
+    Parameters
+    ----------
+    any_numpy_dtype_reduced :
+        
+    tz_aware_fixture :
+        
+    fill_value :
+        
+
+    Returns
+    -------
+
+    """
     dtype = np.dtype(any_numpy_dtype_reduced)
     fill_dtype = DatetimeTZDtype(tz=tz_aware_fixture)
 
@@ -474,6 +681,19 @@
 
 
 def test_maybe_promote_timedelta64_with_any(timedelta64_dtype, any_numpy_dtype_reduced):
+    """
+
+    Parameters
+    ----------
+    timedelta64_dtype :
+        
+    any_numpy_dtype_reduced :
+        
+
+    Returns
+    -------
+
+    """
     dtype = np.dtype(timedelta64_dtype)
     fill_dtype = np.dtype(any_numpy_dtype_reduced)
 
@@ -500,6 +720,21 @@
 def test_maybe_promote_any_with_timedelta64(
     any_numpy_dtype_reduced, timedelta64_dtype, fill_value
 ):
+    """
+
+    Parameters
+    ----------
+    any_numpy_dtype_reduced :
+        
+    timedelta64_dtype :
+        
+    fill_value :
+        
+
+    Returns
+    -------
+
+    """
     dtype = np.dtype(any_numpy_dtype_reduced)
 
     # filling anything but timedelta with timedelta casts to object
@@ -515,6 +750,19 @@
 
 
 def test_maybe_promote_string_with_any(string_dtype, any_numpy_dtype_reduced):
+    """
+
+    Parameters
+    ----------
+    string_dtype :
+        
+    any_numpy_dtype_reduced :
+        
+
+    Returns
+    -------
+
+    """
     dtype = np.dtype(string_dtype)
     fill_dtype = np.dtype(any_numpy_dtype_reduced)
 
@@ -529,6 +777,19 @@
 
 
 def test_maybe_promote_any_with_string(any_numpy_dtype_reduced, string_dtype):
+    """
+
+    Parameters
+    ----------
+    any_numpy_dtype_reduced :
+        
+    string_dtype :
+        
+
+    Returns
+    -------
+
+    """
     dtype = np.dtype(any_numpy_dtype_reduced)
 
     # create array of given dtype
@@ -542,6 +803,19 @@
 
 
 def test_maybe_promote_object_with_any(object_dtype, any_numpy_dtype_reduced):
+    """
+
+    Parameters
+    ----------
+    object_dtype :
+        
+    any_numpy_dtype_reduced :
+        
+
+    Returns
+    -------
+
+    """
     dtype = np.dtype(object_dtype)
     fill_dtype = np.dtype(any_numpy_dtype_reduced)
 
@@ -556,6 +830,19 @@
 
 
 def test_maybe_promote_any_with_object(any_numpy_dtype_reduced, object_dtype):
+    """
+
+    Parameters
+    ----------
+    any_numpy_dtype_reduced :
+        
+    object_dtype :
+        
+
+    Returns
+    -------
+
+    """
     dtype = np.dtype(any_numpy_dtype_reduced)
 
     # create array of object dtype from a scalar value (i.e. passing
@@ -571,6 +858,19 @@
 
 @pytest.mark.parametrize("fill_value", [None, np.nan, NaT])
 def test_maybe_promote_any_numpy_dtype_with_na(any_numpy_dtype_reduced, fill_value):
+    """
+
+    Parameters
+    ----------
+    any_numpy_dtype_reduced :
+        
+    fill_value :
+        
+
+    Returns
+    -------
+
+    """
     dtype = np.dtype(any_numpy_dtype_reduced)
 
     if is_integer_dtype(dtype) and fill_value is not NaT:
@@ -604,6 +904,19 @@
 
 @pytest.mark.parametrize("dim", [0, 2, 3])
 def test_maybe_promote_dimensions(any_numpy_dtype_reduced, dim):
+    """
+
+    Parameters
+    ----------
+    any_numpy_dtype_reduced :
+        
+    dim :
+        
+
+    Returns
+    -------
+
+    """
     dtype = np.dtype(any_numpy_dtype_reduced)
 
     # create 0-dim array of given dtype; casts "1" to correct dtype
