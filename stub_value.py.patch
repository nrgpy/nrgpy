# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jedi/inference/gradual/stub_value.py
+++ b/..//venv/lib/python3.8/site-packages/jedi/inference/gradual/stub_value.py
@@ -7,6 +7,7 @@
 
 
 class StubModuleValue(ModuleValue):
+    """ """
     _module_name_class = StubModuleName
 
     def __init__(self, non_stub_value_set, *args, **kwargs):
@@ -14,13 +15,20 @@
         self.non_stub_value_set = non_stub_value_set
 
     def is_stub(self):
+        """ """
         return True
 
     def sub_modules_dict(self):
-        """
-        We have to overwrite this, because it's possible to have stubs that
+        """We have to overwrite this, because it's possible to have stubs that
         don't have code for all the child modules. At the time of writing this
         there are for example no stubs for `json.tool`.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         names = {}
         for value in self.non_stub_value_set:
@@ -34,12 +42,34 @@
         return names
 
     def _get_stub_filters(self, origin_scope):
+        """
+
+        Parameters
+        ----------
+        origin_scope :
+            
+
+        Returns
+        -------
+
+        """
         return [StubFilter(
             parent_context=self.as_context(),
             origin_scope=origin_scope
         )] + list(self.iter_star_filters())
 
     def get_filters(self, origin_scope=None):
+        """
+
+        Parameters
+        ----------
+        origin_scope :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         filters = super(StubModuleValue, self).get_filters(origin_scope)
         next(filters, None)  # Ignore the first filter and replace it with our own
         stub_filters = self._get_stub_filters(origin_scope=origin_scope)
@@ -50,18 +80,47 @@
             yield f
 
     def _as_context(self):
+        """ """
         return StubModuleContext(self)
 
 
 class StubModuleContext(ModuleContext):
+    """ """
     def get_filters(self, until_position=None, origin_scope=None):
+        """
+
+        Parameters
+        ----------
+        until_position :
+             (Default value = None)
+        origin_scope :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         # Make sure to ignore the position, because positions are not relevant
         # for stubs.
         return super(StubModuleContext, self).get_filters(origin_scope=origin_scope)
 
 
 class TypingModuleWrapper(StubModuleValue):
+    """ """
     def get_filters(self, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         filters = super(TypingModuleWrapper, self).get_filters(*args, **kwargs)
         f = next(filters, None)
         assert f is not None
@@ -70,11 +129,26 @@
             yield f
 
     def _as_context(self):
+        """ """
         return TypingModuleContext(self)
 
 
 class TypingModuleContext(ModuleContext):
+    """ """
     def get_filters(self, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         filters = super(TypingModuleContext, self).get_filters(*args, **kwargs)
         yield TypingModuleFilterWrapper(next(filters, None))
         for f in filters:
@@ -82,9 +156,21 @@
 
 
 class StubFilter(ParserTreeFilter):
+    """ """
     name_class = StubName
 
     def _is_name_reachable(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         if not super(StubFilter, self)._is_name_reachable(name):
             return False
 
@@ -102,4 +188,5 @@
 
 
 class VersionInfo(ValueWrapper):
+    """ """
     pass
