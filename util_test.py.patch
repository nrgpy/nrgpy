# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tornado/test/util_test.py
+++ b/..//venv/lib/python3.8/site-packages/tornado/test/util_test.py
@@ -25,11 +25,14 @@
 
 
 class RaiseExcInfoTest(unittest.TestCase):
+    """ """
     def test_two_arg_exception(self):
+        """ """
         # This test would fail on python 3 if raise_exc_info were simply
         # a three-argument raise statement, because TwoArgException
         # doesn't have a "copy constructor"
         class TwoArgException(Exception):
+            """ """
             def __init__(self, a, b):
                 super().__init__()
                 self.a, self.b = a, b
@@ -46,58 +49,120 @@
 
 
 class TestConfigurable(Configurable):
+    """ """
     @classmethod
     def configurable_base(cls):
+        """ """
         return TestConfigurable
 
     @classmethod
     def configurable_default(cls):
+        """ """
         return TestConfig1
 
 
 class TestConfig1(TestConfigurable):
+    """ """
     def initialize(self, pos_arg=None, a=None):
+        """
+
+        Parameters
+        ----------
+        pos_arg :
+             (Default value = None)
+        a :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         self.a = a
         self.pos_arg = pos_arg
 
 
 class TestConfig2(TestConfigurable):
+    """ """
     def initialize(self, pos_arg=None, b=None):
+        """
+
+        Parameters
+        ----------
+        pos_arg :
+             (Default value = None)
+        b :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         self.b = b
         self.pos_arg = pos_arg
 
 
 class TestConfig3(TestConfigurable):
+    """ """
     # TestConfig3 is a configuration option that is itself configurable.
     @classmethod
     def configurable_base(cls):
+        """ """
         return TestConfig3
 
     @classmethod
     def configurable_default(cls):
+        """ """
         return TestConfig3A
 
 
 class TestConfig3A(TestConfig3):
+    """ """
     def initialize(self, a=None):
+        """
+
+        Parameters
+        ----------
+        a :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         self.a = a
 
 
 class TestConfig3B(TestConfig3):
+    """ """
     def initialize(self, b=None):
+        """
+
+        Parameters
+        ----------
+        b :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         self.b = b
 
 
 class ConfigurableTest(unittest.TestCase):
+    """ """
     def setUp(self):
+        """ """
         self.saved = TestConfigurable._save_configuration()
         self.saved3 = TestConfig3._save_configuration()
 
     def tearDown(self):
+        """ """
         TestConfigurable._restore_configuration(self.saved)
         TestConfig3._restore_configuration(self.saved3)
 
     def checkSubclasses(self):
+        """ """
         # no matter how the class is configured, it should always be
         # possible to instantiate the subclasses directly
         self.assertIsInstance(TestConfig1(), TestConfig1)
@@ -109,6 +174,7 @@
         self.assertEqual(obj2.b, 2)
 
     def test_default(self):
+        """ """
         # In these tests we combine a typing.cast to satisfy mypy with
         # a runtime type-assertion. Without the cast, mypy would only
         # let us access attributes of the base class.
@@ -123,6 +189,7 @@
         self.checkSubclasses()
 
     def test_config_class(self):
+        """ """
         TestConfigurable.configure(TestConfig2)
         obj = cast(TestConfig2, TestConfigurable())
         self.assertIsInstance(obj, TestConfig2)
@@ -135,6 +202,7 @@
         self.checkSubclasses()
 
     def test_config_str(self):
+        """ """
         TestConfigurable.configure("tornado.test.util_test.TestConfig2")
         obj = cast(TestConfig2, TestConfigurable())
         self.assertIsInstance(obj, TestConfig2)
@@ -147,6 +215,7 @@
         self.checkSubclasses()
 
     def test_config_args(self):
+        """ """
         TestConfigurable.configure(None, a=3)
         obj = cast(TestConfig1, TestConfigurable())
         self.assertIsInstance(obj, TestConfig1)
@@ -163,6 +232,7 @@
         self.assertIs(obj.a, None)
 
     def test_config_class_args(self):
+        """ """
         TestConfigurable.configure(TestConfig2, b=5)
         obj = cast(TestConfig2, TestConfigurable())
         self.assertIsInstance(obj, TestConfig2)
@@ -179,6 +249,7 @@
         self.assertIs(obj.b, None)
 
     def test_config_multi_level(self):
+        """ """
         TestConfigurable.configure(TestConfig3, a=1)
         obj = cast(TestConfig3A, TestConfigurable())
         self.assertIsInstance(obj, TestConfig3A)
@@ -191,6 +262,7 @@
         self.assertEqual(obj2.b, 2)
 
     def test_config_inner_level(self):
+        """ """
         # The inner level can be used even when the outer level
         # doesn't point to it.
         obj = TestConfig3()
@@ -213,15 +285,19 @@
 
 
 class UnicodeLiteralTest(unittest.TestCase):
+    """ """
     def test_unicode_escapes(self):
+        """ """
         self.assertEqual(utf8(u"\u00e9"), b"\xc3\xa9")
 
 
 class ExecInTest(unittest.TestCase):
+    """ """
     # TODO(bdarnell): make a version of this test for one of the new
     # future imports available in python 3.
     @unittest.skip("no testable future imports")
     def test_no_inherit_future(self):
+        """ """
         # This file has from __future__ import print_function...
         f = StringIO()
         print("hello", file=f)
@@ -231,13 +307,33 @@
 
 
 class ArgReplacerTest(unittest.TestCase):
+    """ """
     def setUp(self):
+        """ """
         def function(x, y, callback=None, z=None):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+            y :
+                
+            callback :
+                 (Default value = None)
+            z :
+                 (Default value = None)
+
+            Returns
+            -------
+
+            """
             pass
 
         self.replacer = ArgReplacer(function, "callback")
 
     def test_omitted(self):
+        """ """
         args = (1, 2)
         kwargs = dict()  # type: Dict[str, Any]
         self.assertIs(self.replacer.get_old_value(args, kwargs), None)
@@ -247,6 +343,7 @@
         )
 
     def test_position(self):
+        """ """
         args = (1, 2, "old", 3)
         kwargs = dict()  # type: Dict[str, Any]
         self.assertEqual(self.replacer.get_old_value(args, kwargs), "old")
@@ -256,6 +353,7 @@
         )
 
     def test_keyword(self):
+        """ """
         args = (1,)
         kwargs = dict(y=2, callback="old", z=3)
         self.assertEqual(self.replacer.get_old_value(args, kwargs), "old")
@@ -266,22 +364,29 @@
 
 
 class TimedeltaToSecondsTest(unittest.TestCase):
+    """ """
     def test_timedelta_to_seconds(self):
+        """ """
         time_delta = datetime.timedelta(hours=1)
         self.assertEqual(timedelta_to_seconds(time_delta), 3600.0)
 
 
 class ImportObjectTest(unittest.TestCase):
+    """ """
     def test_import_member(self):
+        """ """
         self.assertIs(import_object("tornado.escape.utf8"), utf8)
 
     def test_import_member_unicode(self):
+        """ """
         self.assertIs(import_object(u"tornado.escape.utf8"), utf8)
 
     def test_import_module(self):
+        """ """
         self.assertIs(import_object("tornado.escape"), tornado.escape)
 
     def test_import_module_unicode(self):
+        """ """
         # The internal implementation of __import__ differs depending on
         # whether the thing being imported is a module or not.
         # This variant requires a byte string in python 2.
@@ -289,12 +394,15 @@
 
 
 class ReUnescapeTest(unittest.TestCase):
+    """ """
     def test_re_unescape(self):
+        """ """
         test_strings = ("/favicon.ico", "index.html", "Hello, World!", "!$@#%;")
         for string in test_strings:
             self.assertEqual(string, re_unescape(re.escape(string)))
 
     def test_re_unescape_raises_error_on_invalid_input(self):
+        """ """
         with self.assertRaises(ValueError):
             re_unescape("\\d")
         with self.assertRaises(ValueError):
@@ -304,5 +412,7 @@
 
 
 class IsFinalizingTest(unittest.TestCase):
+    """ """
     def test_basic(self):
+        """ """
         self.assertFalse(is_finalizing())
