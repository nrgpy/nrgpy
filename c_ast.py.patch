# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pycparser/c_ast.py
+++ b/..//venv/lib/python3.8/site-packages/pycparser/c_ast.py
@@ -19,8 +19,16 @@
 import sys
 
 def _repr(obj):
-    """
-    Get the representation of an object, with dedicated pprint-like format for lists.
+    """Get the representation of an object, with dedicated pprint-like format for lists.
+
+    Parameters
+    ----------
+    obj :
+        
+
+    Returns
+    -------
+
     """
     if isinstance(obj, list):
         return '[' + (',\n '.join((_repr(e).replace('\n', '\n ') for e in obj))) + '\n]'
@@ -28,6 +36,7 @@
         return repr(obj) 
 
 class Node(object):
+    """ """
     __slots__ = ()
     """ Abstract base class for AST nodes.
     """
@@ -51,31 +60,49 @@
         return result
 
     def children(self):
-        """ A sequence of all children that are Nodes
-        """
+        """A sequence of all children that are Nodes"""
         pass
 
     def show(self, buf=sys.stdout, offset=0, attrnames=False, nodenames=False, showcoord=False, _my_node_name=None):
-        """ Pretty print the Node and all its attributes and
+        """Pretty print the Node and all its attributes and
             children (recursively) to a buffer.
-
+        
             buf:
                 Open IO buffer into which the Node is printed.
-
+        
             offset:
                 Initial offset (amount of leading spaces)
-
+        
             attrnames:
                 True if you want to see the attribute names in
                 name=value pairs. False to only see the values.
-
+        
             nodenames:
                 True if you want to see the actual node names
                 within their parents.
-
+        
             showcoord:
                 Do you want the coordinates of each Node to be
                 displayed.
+
+        Parameters
+        ----------
+        buf :
+             (Default value = sys.stdout)
+        offset :
+             (Default value = 0)
+        attrnames :
+             (Default value = False)
+        nodenames :
+             (Default value = False)
+        showcoord :
+             (Default value = False)
+        _my_node_name :
+             (Default value = None)
+
+        Returns
+        -------
+
         """
         lead = ' ' * offset
         if nodenames and _my_node_name is not None:
@@ -107,28 +134,28 @@
 
 
 class NodeVisitor(object):
-    """ A base NodeVisitor class for visiting c_ast nodes.
+    """A base NodeVisitor class for visiting c_ast nodes.
         Subclass it and define your own visit_XXX methods, where
         XXX is the class name you want to visit with these
         methods.
-
+    
         For example:
-
+    
         class ConstantVisitor(NodeVisitor):
             def __init__(self):
                 self.values = []
-
+    
             def visit_Constant(self, node):
                 self.values.append(node.value)
-
+    
         Creates a list of values of all the constant nodes
         encountered below the given node. To use it:
-
+    
         cv = ConstantVisitor()
         cv.visit(node)
-
+    
         Notes:
-
+    
         *   generic_visit() will be called for AST nodes for which
             no visit_XXX method was defined.
         *   The children of nodes for which a visit_XXX was
@@ -138,12 +165,28 @@
                 NodeVisitor.generic_visit(self, node)
         *   Modeled after Python's own AST visiting facilities
             (the ast module of Python 3.0)
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     _method_cache = None
 
     def visit(self, node):
-        """ Visit a node.
+        """Visit a node.
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
         """
 
         if self._method_cache is None:
@@ -158,13 +201,23 @@
         return visitor(node)
 
     def generic_visit(self, node):
-        """ Called if no explicit visitor function exists for a
+        """Called if no explicit visitor function exists for a
             node. Implements preorder visiting of the node.
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
         """
         for c in node:
             self.visit(c)
 
 class ArrayDecl(Node):
+    """ """
     __slots__ = ('type', 'dim', 'dim_quals', 'coord', '__weakref__')
     def __init__(self, type, dim, dim_quals, coord=None):
         self.type = type
@@ -173,6 +226,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.type is not None: nodelist.append(("type", self.type))
         if self.dim is not None: nodelist.append(("dim", self.dim))
@@ -187,6 +241,7 @@
     attr_names = ('dim_quals', )
 
 class ArrayRef(Node):
+    """ """
     __slots__ = ('name', 'subscript', 'coord', '__weakref__')
     def __init__(self, name, subscript, coord=None):
         self.name = name
@@ -194,6 +249,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.name is not None: nodelist.append(("name", self.name))
         if self.subscript is not None: nodelist.append(("subscript", self.subscript))
@@ -208,6 +264,7 @@
     attr_names = ()
 
 class Assignment(Node):
+    """ """
     __slots__ = ('op', 'lvalue', 'rvalue', 'coord', '__weakref__')
     def __init__(self, op, lvalue, rvalue, coord=None):
         self.op = op
@@ -216,6 +273,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.lvalue is not None: nodelist.append(("lvalue", self.lvalue))
         if self.rvalue is not None: nodelist.append(("rvalue", self.rvalue))
@@ -230,6 +288,7 @@
     attr_names = ('op', )
 
 class BinaryOp(Node):
+    """ """
     __slots__ = ('op', 'left', 'right', 'coord', '__weakref__')
     def __init__(self, op, left, right, coord=None):
         self.op = op
@@ -238,6 +297,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.left is not None: nodelist.append(("left", self.left))
         if self.right is not None: nodelist.append(("right", self.right))
@@ -252,11 +312,13 @@
     attr_names = ('op', )
 
 class Break(Node):
+    """ """
     __slots__ = ('coord', '__weakref__')
     def __init__(self, coord=None):
         self.coord = coord
 
     def children(self):
+        """ """
         return ()
 
     def __iter__(self):
@@ -266,6 +328,7 @@
     attr_names = ()
 
 class Case(Node):
+    """ """
     __slots__ = ('expr', 'stmts', 'coord', '__weakref__')
     def __init__(self, expr, stmts, coord=None):
         self.expr = expr
@@ -273,6 +336,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.expr is not None: nodelist.append(("expr", self.expr))
         for i, child in enumerate(self.stmts or []):
@@ -288,6 +352,7 @@
     attr_names = ()
 
 class Cast(Node):
+    """ """
     __slots__ = ('to_type', 'expr', 'coord', '__weakref__')
     def __init__(self, to_type, expr, coord=None):
         self.to_type = to_type
@@ -295,6 +360,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.to_type is not None: nodelist.append(("to_type", self.to_type))
         if self.expr is not None: nodelist.append(("expr", self.expr))
@@ -309,12 +375,14 @@
     attr_names = ()
 
 class Compound(Node):
+    """ """
     __slots__ = ('block_items', 'coord', '__weakref__')
     def __init__(self, block_items, coord=None):
         self.block_items = block_items
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         for i, child in enumerate(self.block_items or []):
             nodelist.append(("block_items[%d]" % i, child))
@@ -327,6 +395,7 @@
     attr_names = ()
 
 class CompoundLiteral(Node):
+    """ """
     __slots__ = ('type', 'init', 'coord', '__weakref__')
     def __init__(self, type, init, coord=None):
         self.type = type
@@ -334,6 +403,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.type is not None: nodelist.append(("type", self.type))
         if self.init is not None: nodelist.append(("init", self.init))
@@ -348,6 +418,7 @@
     attr_names = ()
 
 class Constant(Node):
+    """ """
     __slots__ = ('type', 'value', 'coord', '__weakref__')
     def __init__(self, type, value, coord=None):
         self.type = type
@@ -355,6 +426,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         return tuple(nodelist)
 
@@ -365,11 +437,13 @@
     attr_names = ('type', 'value', )
 
 class Continue(Node):
+    """ """
     __slots__ = ('coord', '__weakref__')
     def __init__(self, coord=None):
         self.coord = coord
 
     def children(self):
+        """ """
         return ()
 
     def __iter__(self):
@@ -379,6 +453,7 @@
     attr_names = ()
 
 class Decl(Node):
+    """ """
     __slots__ = ('name', 'quals', 'storage', 'funcspec', 'type', 'init', 'bitsize', 'coord', '__weakref__')
     def __init__(self, name, quals, storage, funcspec, type, init, bitsize, coord=None):
         self.name = name
@@ -391,6 +466,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.type is not None: nodelist.append(("type", self.type))
         if self.init is not None: nodelist.append(("init", self.init))
@@ -408,12 +484,14 @@
     attr_names = ('name', 'quals', 'storage', 'funcspec', )
 
 class DeclList(Node):
+    """ """
     __slots__ = ('decls', 'coord', '__weakref__')
     def __init__(self, decls, coord=None):
         self.decls = decls
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         for i, child in enumerate(self.decls or []):
             nodelist.append(("decls[%d]" % i, child))
@@ -426,12 +504,14 @@
     attr_names = ()
 
 class Default(Node):
+    """ """
     __slots__ = ('stmts', 'coord', '__weakref__')
     def __init__(self, stmts, coord=None):
         self.stmts = stmts
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         for i, child in enumerate(self.stmts or []):
             nodelist.append(("stmts[%d]" % i, child))
@@ -444,6 +524,7 @@
     attr_names = ()
 
 class DoWhile(Node):
+    """ """
     __slots__ = ('cond', 'stmt', 'coord', '__weakref__')
     def __init__(self, cond, stmt, coord=None):
         self.cond = cond
@@ -451,6 +532,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.cond is not None: nodelist.append(("cond", self.cond))
         if self.stmt is not None: nodelist.append(("stmt", self.stmt))
@@ -465,11 +547,13 @@
     attr_names = ()
 
 class EllipsisParam(Node):
+    """ """
     __slots__ = ('coord', '__weakref__')
     def __init__(self, coord=None):
         self.coord = coord
 
     def children(self):
+        """ """
         return ()
 
     def __iter__(self):
@@ -479,11 +563,13 @@
     attr_names = ()
 
 class EmptyStatement(Node):
+    """ """
     __slots__ = ('coord', '__weakref__')
     def __init__(self, coord=None):
         self.coord = coord
 
     def children(self):
+        """ """
         return ()
 
     def __iter__(self):
@@ -493,6 +579,7 @@
     attr_names = ()
 
 class Enum(Node):
+    """ """
     __slots__ = ('name', 'values', 'coord', '__weakref__')
     def __init__(self, name, values, coord=None):
         self.name = name
@@ -500,6 +587,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.values is not None: nodelist.append(("values", self.values))
         return tuple(nodelist)
@@ -511,6 +599,7 @@
     attr_names = ('name', )
 
 class Enumerator(Node):
+    """ """
     __slots__ = ('name', 'value', 'coord', '__weakref__')
     def __init__(self, name, value, coord=None):
         self.name = name
@@ -518,6 +607,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.value is not None: nodelist.append(("value", self.value))
         return tuple(nodelist)
@@ -529,12 +619,14 @@
     attr_names = ('name', )
 
 class EnumeratorList(Node):
+    """ """
     __slots__ = ('enumerators', 'coord', '__weakref__')
     def __init__(self, enumerators, coord=None):
         self.enumerators = enumerators
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         for i, child in enumerate(self.enumerators or []):
             nodelist.append(("enumerators[%d]" % i, child))
@@ -547,12 +639,14 @@
     attr_names = ()
 
 class ExprList(Node):
+    """ """
     __slots__ = ('exprs', 'coord', '__weakref__')
     def __init__(self, exprs, coord=None):
         self.exprs = exprs
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         for i, child in enumerate(self.exprs or []):
             nodelist.append(("exprs[%d]" % i, child))
@@ -565,12 +659,14 @@
     attr_names = ()
 
 class FileAST(Node):
+    """ """
     __slots__ = ('ext', 'coord', '__weakref__')
     def __init__(self, ext, coord=None):
         self.ext = ext
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         for i, child in enumerate(self.ext or []):
             nodelist.append(("ext[%d]" % i, child))
@@ -583,6 +679,7 @@
     attr_names = ()
 
 class For(Node):
+    """ """
     __slots__ = ('init', 'cond', 'next', 'stmt', 'coord', '__weakref__')
     def __init__(self, init, cond, next, stmt, coord=None):
         self.init = init
@@ -592,6 +689,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.init is not None: nodelist.append(("init", self.init))
         if self.cond is not None: nodelist.append(("cond", self.cond))
@@ -612,6 +710,7 @@
     attr_names = ()
 
 class FuncCall(Node):
+    """ """
     __slots__ = ('name', 'args', 'coord', '__weakref__')
     def __init__(self, name, args, coord=None):
         self.name = name
@@ -619,6 +718,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.name is not None: nodelist.append(("name", self.name))
         if self.args is not None: nodelist.append(("args", self.args))
@@ -633,6 +733,7 @@
     attr_names = ()
 
 class FuncDecl(Node):
+    """ """
     __slots__ = ('args', 'type', 'coord', '__weakref__')
     def __init__(self, args, type, coord=None):
         self.args = args
@@ -640,6 +741,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.args is not None: nodelist.append(("args", self.args))
         if self.type is not None: nodelist.append(("type", self.type))
@@ -654,6 +756,7 @@
     attr_names = ()
 
 class FuncDef(Node):
+    """ """
     __slots__ = ('decl', 'param_decls', 'body', 'coord', '__weakref__')
     def __init__(self, decl, param_decls, body, coord=None):
         self.decl = decl
@@ -662,6 +765,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.decl is not None: nodelist.append(("decl", self.decl))
         if self.body is not None: nodelist.append(("body", self.body))
@@ -680,12 +784,14 @@
     attr_names = ()
 
 class Goto(Node):
+    """ """
     __slots__ = ('name', 'coord', '__weakref__')
     def __init__(self, name, coord=None):
         self.name = name
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         return tuple(nodelist)
 
@@ -696,12 +802,14 @@
     attr_names = ('name', )
 
 class ID(Node):
+    """ """
     __slots__ = ('name', 'coord', '__weakref__')
     def __init__(self, name, coord=None):
         self.name = name
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         return tuple(nodelist)
 
@@ -712,12 +820,14 @@
     attr_names = ('name', )
 
 class IdentifierType(Node):
+    """ """
     __slots__ = ('names', 'coord', '__weakref__')
     def __init__(self, names, coord=None):
         self.names = names
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         return tuple(nodelist)
 
@@ -728,6 +838,7 @@
     attr_names = ('names', )
 
 class If(Node):
+    """ """
     __slots__ = ('cond', 'iftrue', 'iffalse', 'coord', '__weakref__')
     def __init__(self, cond, iftrue, iffalse, coord=None):
         self.cond = cond
@@ -736,6 +847,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.cond is not None: nodelist.append(("cond", self.cond))
         if self.iftrue is not None: nodelist.append(("iftrue", self.iftrue))
@@ -753,12 +865,14 @@
     attr_names = ()
 
 class InitList(Node):
+    """ """
     __slots__ = ('exprs', 'coord', '__weakref__')
     def __init__(self, exprs, coord=None):
         self.exprs = exprs
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         for i, child in enumerate(self.exprs or []):
             nodelist.append(("exprs[%d]" % i, child))
@@ -771,6 +885,7 @@
     attr_names = ()
 
 class Label(Node):
+    """ """
     __slots__ = ('name', 'stmt', 'coord', '__weakref__')
     def __init__(self, name, stmt, coord=None):
         self.name = name
@@ -778,6 +893,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.stmt is not None: nodelist.append(("stmt", self.stmt))
         return tuple(nodelist)
@@ -789,6 +905,7 @@
     attr_names = ('name', )
 
 class NamedInitializer(Node):
+    """ """
     __slots__ = ('name', 'expr', 'coord', '__weakref__')
     def __init__(self, name, expr, coord=None):
         self.name = name
@@ -796,6 +913,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.expr is not None: nodelist.append(("expr", self.expr))
         for i, child in enumerate(self.name or []):
@@ -811,12 +929,14 @@
     attr_names = ()
 
 class ParamList(Node):
+    """ """
     __slots__ = ('params', 'coord', '__weakref__')
     def __init__(self, params, coord=None):
         self.params = params
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         for i, child in enumerate(self.params or []):
             nodelist.append(("params[%d]" % i, child))
@@ -829,6 +949,7 @@
     attr_names = ()
 
 class PtrDecl(Node):
+    """ """
     __slots__ = ('quals', 'type', 'coord', '__weakref__')
     def __init__(self, quals, type, coord=None):
         self.quals = quals
@@ -836,6 +957,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.type is not None: nodelist.append(("type", self.type))
         return tuple(nodelist)
@@ -847,12 +969,14 @@
     attr_names = ('quals', )
 
 class Return(Node):
+    """ """
     __slots__ = ('expr', 'coord', '__weakref__')
     def __init__(self, expr, coord=None):
         self.expr = expr
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.expr is not None: nodelist.append(("expr", self.expr))
         return tuple(nodelist)
@@ -864,6 +988,7 @@
     attr_names = ()
 
 class Struct(Node):
+    """ """
     __slots__ = ('name', 'decls', 'coord', '__weakref__')
     def __init__(self, name, decls, coord=None):
         self.name = name
@@ -871,6 +996,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         for i, child in enumerate(self.decls or []):
             nodelist.append(("decls[%d]" % i, child))
@@ -883,6 +1009,7 @@
     attr_names = ('name', )
 
 class StructRef(Node):
+    """ """
     __slots__ = ('name', 'type', 'field', 'coord', '__weakref__')
     def __init__(self, name, type, field, coord=None):
         self.name = name
@@ -891,6 +1018,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.name is not None: nodelist.append(("name", self.name))
         if self.field is not None: nodelist.append(("field", self.field))
@@ -905,6 +1033,7 @@
     attr_names = ('type', )
 
 class Switch(Node):
+    """ """
     __slots__ = ('cond', 'stmt', 'coord', '__weakref__')
     def __init__(self, cond, stmt, coord=None):
         self.cond = cond
@@ -912,6 +1041,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.cond is not None: nodelist.append(("cond", self.cond))
         if self.stmt is not None: nodelist.append(("stmt", self.stmt))
@@ -926,6 +1056,7 @@
     attr_names = ()
 
 class TernaryOp(Node):
+    """ """
     __slots__ = ('cond', 'iftrue', 'iffalse', 'coord', '__weakref__')
     def __init__(self, cond, iftrue, iffalse, coord=None):
         self.cond = cond
@@ -934,6 +1065,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.cond is not None: nodelist.append(("cond", self.cond))
         if self.iftrue is not None: nodelist.append(("iftrue", self.iftrue))
@@ -951,6 +1083,7 @@
     attr_names = ()
 
 class TypeDecl(Node):
+    """ """
     __slots__ = ('declname', 'quals', 'type', 'coord', '__weakref__')
     def __init__(self, declname, quals, type, coord=None):
         self.declname = declname
@@ -959,6 +1092,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.type is not None: nodelist.append(("type", self.type))
         return tuple(nodelist)
@@ -970,6 +1104,7 @@
     attr_names = ('declname', 'quals', )
 
 class Typedef(Node):
+    """ """
     __slots__ = ('name', 'quals', 'storage', 'type', 'coord', '__weakref__')
     def __init__(self, name, quals, storage, type, coord=None):
         self.name = name
@@ -979,6 +1114,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.type is not None: nodelist.append(("type", self.type))
         return tuple(nodelist)
@@ -990,6 +1126,7 @@
     attr_names = ('name', 'quals', 'storage', )
 
 class Typename(Node):
+    """ """
     __slots__ = ('name', 'quals', 'type', 'coord', '__weakref__')
     def __init__(self, name, quals, type, coord=None):
         self.name = name
@@ -998,6 +1135,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.type is not None: nodelist.append(("type", self.type))
         return tuple(nodelist)
@@ -1009,6 +1147,7 @@
     attr_names = ('name', 'quals', )
 
 class UnaryOp(Node):
+    """ """
     __slots__ = ('op', 'expr', 'coord', '__weakref__')
     def __init__(self, op, expr, coord=None):
         self.op = op
@@ -1016,6 +1155,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.expr is not None: nodelist.append(("expr", self.expr))
         return tuple(nodelist)
@@ -1027,6 +1167,7 @@
     attr_names = ('op', )
 
 class Union(Node):
+    """ """
     __slots__ = ('name', 'decls', 'coord', '__weakref__')
     def __init__(self, name, decls, coord=None):
         self.name = name
@@ -1034,6 +1175,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         for i, child in enumerate(self.decls or []):
             nodelist.append(("decls[%d]" % i, child))
@@ -1046,6 +1188,7 @@
     attr_names = ('name', )
 
 class While(Node):
+    """ """
     __slots__ = ('cond', 'stmt', 'coord', '__weakref__')
     def __init__(self, cond, stmt, coord=None):
         self.cond = cond
@@ -1053,6 +1196,7 @@
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         if self.cond is not None: nodelist.append(("cond", self.cond))
         if self.stmt is not None: nodelist.append(("stmt", self.stmt))
@@ -1067,12 +1211,14 @@
     attr_names = ()
 
 class Pragma(Node):
+    """ """
     __slots__ = ('string', 'coord', '__weakref__')
     def __init__(self, string, coord=None):
         self.string = string
         self.coord = coord
 
     def children(self):
+        """ """
         nodelist = []
         return tuple(nodelist)
 
