# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/groupby/aggregate/test_other.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/groupby/aggregate/test_other.py
@@ -25,6 +25,7 @@
 
 
 def test_agg_api():
+    """ """
     # GH 6337
     # https://stackoverflow.com/questions/21706030/pandas-groupby-agg-function-column-dtype-error
     # different api for agg when passed custom function with mixed frame
@@ -40,6 +41,17 @@
     grouped = df.groupby("key1")
 
     def peak_to_peak(arr):
+        """
+
+        Parameters
+        ----------
+        arr :
+            
+
+        Returns
+        -------
+
+        """
         return arr.max() - arr.min()
 
     expected = grouped.agg([peak_to_peak])
@@ -49,6 +61,7 @@
 
 
 def test_agg_datetimes_mixed():
+    """ """
     data = [[1, "2012-01-01", 1.0], [2, "2012-01-02", 2.0], [3, None, 3.0]]
 
     df1 = DataFrame(
@@ -86,6 +99,7 @@
 
 
 def test_agg_period_index():
+    """ """
     prng = period_range("2012-1-1", freq="M", periods=3)
     df = DataFrame(np.random.randn(3, 2), index=prng)
     rs = df.groupby(level=0).sum()
@@ -101,6 +115,7 @@
 
 
 def test_agg_dict_parameter_cast_result_dtypes():
+    """ """
     # GH 12821
 
     df = DataFrame(
@@ -139,6 +154,7 @@
 
 
 def test_agg_cast_results_dtypes():
+    """ """
     # similar to GH12821
     # xref #11444
     u = [dt.datetime(2015, x + 1, 1) for x in range(12)]
@@ -151,6 +167,7 @@
 
 
 def test_aggregate_float64_no_int64():
+    """ """
     # see gh-11199
     df = DataFrame({"a": [1, 2, 3, 4, 5], "b": [1, 2, 2, 4, 5], "c": [1, 2, 3, 4, 5]})
 
@@ -168,6 +185,7 @@
 
 
 def test_aggregate_api_consistency():
+    """ """
     # GH 9052
     # make sure that the aggregates via dict
     # are consistent
@@ -215,6 +233,7 @@
 
 
 def test_agg_dict_renaming_deprecation():
+    """ """
     # 15931
     df = pd.DataFrame({"A": [1, 1, 1, 2, 2], "B": range(5), "C": range(5)})
 
@@ -234,6 +253,7 @@
 
 
 def test_agg_compat():
+    """ """
     # GH 12334
     df = DataFrame(
         {
@@ -255,6 +275,7 @@
 
 
 def test_agg_nested_dicts():
+    """ """
     # API change for disallowing these types of nested dicts
     df = DataFrame(
         {
@@ -284,9 +305,21 @@
 
 
 def test_agg_item_by_item_raise_typeerror():
+    """ """
     df = DataFrame(np.random.randint(10, size=(20, 10)))
 
     def raiseException(df):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+
+        Returns
+        -------
+
+        """
         pprint_thing("----------------------------------------")
         pprint_thing(df.to_string())
         raise TypeError("test")
@@ -296,6 +329,7 @@
 
 
 def test_series_agg_multikey():
+    """ """
     ts = tm.makeTimeSeries()
     grouped = ts.groupby([lambda x: x.year, lambda x: x.month])
 
@@ -305,6 +339,7 @@
 
 
 def test_series_agg_multi_pure_python():
+    """ """
     data = DataFrame(
         {
             "A": [
@@ -353,6 +388,17 @@
     )
 
     def bad(x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         assert len(x.values.base) > 0
         return "foo"
 
@@ -362,9 +408,21 @@
 
 
 def test_agg_consistency():
+    """ """
     # agg with ([]) and () not consistent
     # GH 6715
     def P1(a):
+        """
+
+        Parameters
+        ----------
+        a :
+            
+
+        Returns
+        -------
+
+        """
         return np.percentile(a.dropna(), q=1)
 
     df = DataFrame(
@@ -390,10 +448,12 @@
 
 
 def test_agg_callables():
+    """ """
     # GH 7929
     df = DataFrame({"foo": [1, 2], "bar": [3, 4]}).astype(np.int64)
 
     class fn_class:
+        """ """
         def __call__(self, x):
             return sum(x)
 
@@ -413,6 +473,7 @@
 
 
 def test_agg_over_numpy_arrays():
+    """ """
     # GH 3788
     df = pd.DataFrame(
         [
@@ -435,6 +496,7 @@
 
 
 def test_agg_tzaware_non_datetime_result():
+    """ """
     # discussed in GH#29589, fixed in GH#29641, operating on tzaware values
     #  with function that is not dtype-preserving
     dti = pd.date_range("2012-01-01", periods=4, tz="UTC")
@@ -460,6 +522,7 @@
 
 
 def test_agg_timezone_round_trip():
+    """ """
     # GH 15426
     ts = pd.Timestamp("2016-01-01 12:00:00", tz="US/Pacific")
     df = pd.DataFrame(
@@ -496,6 +559,7 @@
 
 
 def test_sum_uint64_overflow():
+    """ """
     # see gh-14758
     # Convert to uint64 and don't overflow
     df = pd.DataFrame([[1, 2], [3, 4], [5, 6]], dtype=object)
@@ -530,6 +594,19 @@
     ],
 )
 def test_agg_structs_dataframe(structure, expected):
+    """
+
+    Parameters
+    ----------
+    structure :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     df = pd.DataFrame(
         {"A": [1, 1, 1, 3, 3, 3], "B": [1, 1, 1, 4, 4, 4], "C": [1, 1, 1, 3, 4, 4]}
     )
@@ -549,6 +626,19 @@
     ],
 )
 def test_agg_structs_series(structure, expected):
+    """
+
+    Parameters
+    ----------
+    structure :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     # Issue #18079
     df = pd.DataFrame(
         {"A": [1, 1, 1, 3, 3, 3], "B": [1, 1, 1, 4, 4, 4], "C": [1, 1, 1, 3, 4, 4]}
@@ -560,6 +650,17 @@
 
 
 def test_agg_category_nansum(observed):
+    """
+
+    Parameters
+    ----------
+    observed :
+        
+
+    Returns
+    -------
+
+    """
     categories = ["a", "b", "c"]
     df = pd.DataFrame(
         {"A": pd.Categorical(["a", "a", "b"], categories=categories), "B": [1, 2, 3]}
@@ -576,6 +677,7 @@
 
 
 def test_agg_list_like_func():
+    """ """
     # GH 18473
     df = pd.DataFrame(
         {"A": [str(x) for x in range(3)], "B": [str(x) for x in range(3)]}
@@ -589,6 +691,7 @@
 
 
 def test_agg_lambda_with_timezone():
+    """ """
     # GH 23683
     df = pd.DataFrame(
         {
@@ -622,6 +725,17 @@
     ],
 )
 def test_groupby_agg_err_catching(err_cls):
+    """
+
+    Parameters
+    ----------
+    err_cls :
+        
+
+    Returns
+    -------
+
+    """
     # make sure we suppress anything other than TypeError or AssertionError
     #  in _python_agg_general
 
@@ -636,6 +750,17 @@
     expected = pd.Series(to_decimal([data[0], data[3]]))
 
     def weird_func(x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         # weird function that raise something other than TypeError or IndexError
         #  in _python_agg_general
         if len(x) == 0:
