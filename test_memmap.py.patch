# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_memmap.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_memmap.py
@@ -15,7 +15,9 @@
     )
 
 class TestMemmap:
+    """ """
     def setup(self):
+        """ """
         self.tmpfp = NamedTemporaryFile(prefix='mmap')
         self.tempdir = mkdtemp()
         self.shape = (3, 4)
@@ -24,10 +26,12 @@
         self.data.resize(self.shape)
 
     def teardown(self):
+        """ """
         self.tmpfp.close()
         shutil.rmtree(self.tempdir)
 
     def test_roundtrip(self):
+        """ """
         # Write data to file
         fp = memmap(self.tmpfp, dtype=self.dtype, mode='w+',
                     shape=self.shape)
@@ -42,6 +46,7 @@
         assert_equal(newfp.flags.writeable, False)
 
     def test_open_with_filename(self):
+        """ """
         tmpname = mktemp('', 'mmap', dir=self.tempdir)
         fp = memmap(tmpname, dtype=self.dtype, mode='w+',
                        shape=self.shape)
@@ -49,11 +54,13 @@
         del fp
 
     def test_unnamed_file(self):
+        """ """
         with TemporaryFile() as f:
             fp = memmap(f, dtype=self.dtype, shape=self.shape)
             del fp
 
     def test_attributes(self):
+        """ """
         offset = 1
         mode = "w+"
         fp = memmap(self.tmpfp, dtype=self.dtype, mode=mode,
@@ -63,6 +70,7 @@
         del fp
 
     def test_filename(self):
+        """ """
         tmpname = mktemp('', 'mmap', dir=self.tempdir)
         fp = memmap(tmpname, dtype=self.dtype, mode='w+',
                        shape=self.shape)
@@ -75,6 +83,7 @@
         del fp
 
     def test_path(self):
+        """ """
         tmpname = mktemp('', 'mmap', dir=self.tempdir)
         fp = memmap(Path(tmpname), dtype=self.dtype, mode='w+',
                        shape=self.shape)
@@ -90,6 +99,7 @@
         del fp
 
     def test_filename_fileobj(self):
+        """ """
         fp = memmap(self.tmpfp, dtype=self.dtype, mode="w+",
                     shape=self.shape)
         assert_equal(fp.filename, self.tmpfp.name)
@@ -97,6 +107,7 @@
     @pytest.mark.skipif(sys.platform == 'gnu0',
                         reason="Known to fail on hurd")
     def test_flush(self):
+        """ """
         fp = memmap(self.tmpfp, dtype=self.dtype, mode='w+',
                     shape=self.shape)
         fp[:] = self.data[:]
@@ -104,6 +115,7 @@
         fp.flush()
 
     def test_del(self):
+        """ """
         # Make sure a view does not delete the underlying mmap
         fp_base = memmap(self.tmpfp, dtype=self.dtype, mode='w+',
                     shape=self.shape)
@@ -118,6 +130,7 @@
         assert_equal(fp_base[0], 6)
 
     def test_arithmetic_drops_references(self):
+        """ """
         fp = memmap(self.tmpfp, dtype=self.dtype, mode='w+',
                     shape=self.shape)
         tmp = (fp + 10)
@@ -125,6 +138,7 @@
             assert_(tmp._mmap is not fp._mmap)
 
     def test_indexing_drops_references(self):
+        """ """
         fp = memmap(self.tmpfp, dtype=self.dtype, mode='w+',
                     shape=self.shape)
         tmp = fp[(1, 2), (2, 3)]
@@ -132,11 +146,13 @@
             assert_(tmp._mmap is not fp._mmap)
 
     def test_slicing_keeps_references(self):
+        """ """
         fp = memmap(self.tmpfp, dtype=self.dtype, mode='w+',
                     shape=self.shape)
         assert_(fp[:2, :2]._mmap is fp._mmap)
 
     def test_view(self):
+        """ """
         fp = memmap(self.tmpfp, dtype=self.dtype, shape=self.shape)
         new1 = fp.view()
         new2 = new1.view()
@@ -146,6 +162,7 @@
         assert_(new_array.base is fp)
 
     def test_ufunc_return_ndarray(self):
+        """ """
         fp = memmap(self.tmpfp, dtype=self.dtype, shape=self.shape)
         fp[:] = self.data
 
@@ -170,6 +187,7 @@
         assert(fp.__class__ is memmap)
 
     def test_getitem(self):
+        """ """
         fp = memmap(self.tmpfp, dtype=self.dtype, shape=self.shape)
         fp[:] = self.data
 
@@ -178,7 +196,9 @@
         assert_(fp[[0, 1]].__class__ is ndarray)
 
     def test_memmap_subclass(self):
+        """ """
         class MemmapSubClass(memmap):
+            """ """
             pass
 
         fp = MemmapSubClass(self.tmpfp, dtype=self.dtype, shape=self.shape)
@@ -192,17 +212,20 @@
         assert(fp[[0, 1]].__class__ is MemmapSubClass)
 
     def test_mmap_offset_greater_than_allocation_granularity(self):
+        """ """
         size = 5 * mmap.ALLOCATIONGRANULARITY
         offset = mmap.ALLOCATIONGRANULARITY + 1
         fp = memmap(self.tmpfp, shape=size, mode='w+', offset=offset)
         assert_(fp.offset == offset)
 
     def test_no_shape(self):
+        """ """
         self.tmpfp.write(b'a'*16)
         mm = memmap(self.tmpfp, dtype='float64')
         assert_equal(mm.shape, (2,))
 
     def test_empty_array(self):
+        """ """
         # gh-12653
         with pytest.raises(ValueError, match='empty file'):
             memmap(self.tmpfp, shape=(0,4), mode='w+')
