# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/frame/methods/test_filter.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/frame/methods/test_filter.py
@@ -7,7 +7,21 @@
 
 
 class TestDataFrameFilter:
+    """ """
     def test_filter(self, float_frame, float_string_frame):
+        """
+
+        Parameters
+        ----------
+        float_frame :
+            
+        float_string_frame :
+            
+
+        Returns
+        -------
+
+        """
         # Items
         filtered = float_frame.filter(["A", "B", "E"])
         assert len(filtered.columns) == 2
@@ -80,6 +94,17 @@
         assert "C" in filtered
 
     def test_filter_regex_search(self, float_frame):
+        """
+
+        Parameters
+        ----------
+        float_frame :
+            
+
+        Returns
+        -------
+
+        """
         fcopy = float_frame.copy()
         fcopy["AA"] = 1
 
@@ -106,6 +131,19 @@
         ],
     )
     def test_filter_unicode(self, name, expected):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # GH13101
         df = DataFrame({"a": [1, 2], "„ÅÇ": [3, 4]})
 
@@ -114,6 +152,17 @@
 
     @pytest.mark.parametrize("name", ["a", "a"])
     def test_filter_bytestring(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         # GH13101
         df = DataFrame({b"a": [1, 2], b"b": [3, 4]})
         expected = DataFrame({b"a": [1, 2]})
@@ -122,6 +171,7 @@
         tm.assert_frame_equal(df.filter(regex=name), expected)
 
     def test_filter_corner(self):
+        """ """
         empty = DataFrame()
 
         result = empty.filter([])
@@ -131,6 +181,7 @@
         tm.assert_frame_equal(result, empty)
 
     def test_filter_regex_non_string(self):
+        """ """
         # GH#5798 trying to filter on non-string columns should drop,
         #  not raise
         df = pd.DataFrame(np.random.random((3, 2)), columns=["STRING", 123])
