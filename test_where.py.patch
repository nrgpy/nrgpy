# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/series/indexing/test_where.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/series/indexing/test_where.py
@@ -9,6 +9,17 @@
 
 
 def test_where_unsafe_int(sint_dtype):
+    """
+
+    Parameters
+    ----------
+    sint_dtype :
+        
+
+    Returns
+    -------
+
+    """
     s = Series(np.arange(10), dtype=sint_dtype)
     mask = s < 5
 
@@ -19,6 +30,17 @@
 
 
 def test_where_unsafe_float(float_dtype):
+    """
+
+    Parameters
+    ----------
+    float_dtype :
+        
+
+    Returns
+    -------
+
+    """
     s = Series(np.arange(10), dtype=float_dtype)
     mask = s < 5
 
@@ -41,6 +63,19 @@
     ],
 )
 def test_where_unsafe_upcast(dtype, expected_dtype):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+    expected_dtype :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-9743
     s = Series(np.arange(10), dtype=dtype)
     values = [2.5, 3.5, 4.5, 5.5, 6.5]
@@ -51,6 +86,7 @@
 
 
 def test_where_unsafe():
+    """ """
     # see gh-9731
     s = Series(np.arange(10), dtype="int64")
     values = [2.5, 3.5, 4.5, 5.5]
@@ -106,6 +142,7 @@
 
 
 def test_where():
+    """ """
     s = Series(np.random.randn(5))
     cond = s > 0
 
@@ -135,6 +172,7 @@
 
 
 def test_where_error():
+    """ """
     s = Series(np.random.randn(5))
     cond = s > 0
 
@@ -164,6 +202,17 @@
 
 @pytest.mark.parametrize("klass", [list, tuple, np.array, Series])
 def test_where_array_like(klass):
+    """
+
+    Parameters
+    ----------
+    klass :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-15414
     s = Series([1, 2, 3])
     cond = [False, True, True]
@@ -183,6 +232,17 @@
     ],
 )
 def test_where_invalid_input(cond):
+    """
+
+    Parameters
+    ----------
+    cond :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-15414: only boolean arrays accepted
     s = Series([1, 2, 3])
     msg = "Boolean array expected for the condition"
@@ -196,6 +256,7 @@
 
 
 def test_where_ndframe_align():
+    """ """
     msg = "Array conditional must be same shape as self"
     s = Series([1, 2, 3])
 
@@ -219,6 +280,7 @@
 
 
 def test_where_setitem_invalid():
+    """ """
     # GH 2702
     # make sure correct exceptions are raised on invalid list assignment
 
@@ -288,6 +350,23 @@
     "box", [lambda x: np.array([x]), lambda x: [x], lambda x: (x,)]
 )
 def test_broadcast(size, mask, item, box):
+    """
+
+    Parameters
+    ----------
+    size :
+        
+    mask :
+        
+    item :
+        
+    box :
+        
+
+    Returns
+    -------
+
+    """
     selection = np.resize(mask, size)
 
     data = np.arange(size, dtype=float)
@@ -312,6 +391,7 @@
 
 
 def test_where_inplace():
+    """ """
     s = Series(np.random.randn(5))
     cond = s > 0
 
@@ -327,6 +407,7 @@
 
 
 def test_where_dups():
+    """ """
     # GH 4550
     # where crashes with dups in index
     s1 = Series(list(range(3)))
@@ -348,6 +429,7 @@
 
 
 def test_where_numeric_with_string():
+    """ """
     # GH 9280
     s = pd.Series([1, 2, 3])
     w = s.where(s > 1, "X")
@@ -374,6 +456,7 @@
 
 
 def test_where_timedelta_coerce():
+    """ """
     s = Series([1, 2], dtype="timedelta64[ns]")
     expected = Series([10, 10])
     mask = np.array([False, False])
@@ -396,6 +479,7 @@
 
 
 def test_where_datetime_conversion():
+    """ """
     s = Series(date_range("20130102", periods=2))
     expected = Series([10, 10])
     mask = np.array([False, False])
@@ -425,6 +509,17 @@
 
 
 def test_where_dt_tz_values(tz_naive_fixture):
+    """
+
+    Parameters
+    ----------
+    tz_naive_fixture :
+        
+
+    Returns
+    -------
+
+    """
     ser1 = pd.Series(
         pd.DatetimeIndex(["20150101", "20150102", "20150103"], tz=tz_naive_fixture)
     )
@@ -440,6 +535,7 @@
 
 
 def test_where_sparse():
+    """ """
     # GH#17198 make sure we dont get an AttributeError for sp_index
     ser = pd.Series(pd.arrays.SparseArray([1, 2]))
     result = ser.where(ser >= 2, 0)
@@ -448,6 +544,7 @@
 
 
 def test_where_empty_series_and_empty_cond_having_non_bool_dtypes():
+    """ """
     # https://github.com/pandas-dev/pandas/issues/34592
     ser = Series([], dtype=float)
     result = ser.where([])
