# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/requests_toolbelt/adapters/appengine.py
+++ b/..//venv/lib/python3.8/site-packages/requests_toolbelt/adapters/appengine.py
@@ -45,12 +45,19 @@
 
 class AppEngineMROHack(adapters.HTTPAdapter):
     """Resolves infinite recursion when monkeypatching.
-
+    
     This works by injecting itself as the base class of both the
     :class:`AppEngineAdapter` and Requests' default HTTPAdapter, which needs to
     be done because default HTTPAdapter's MRO is recompiled when we
     monkeypatch, at which point this class becomes HTTPAdapter's base class.
     In addition, we use an instantiation flag to avoid infinite recursion.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     _initialized = False
 
@@ -62,13 +69,20 @@
 
 class AppEngineAdapter(AppEngineMROHack, adapters.HTTPAdapter):
     """The transport adapter for Requests to use urllib3's GAE support.
-
+    
     Implements Requests's HTTPAdapter API.
-
+    
     When deploying to Google's App Engine service, some of Requests'
     functionality is broken. There is underlying support for GAE in urllib3.
     This functionality, however, is opt-in and needs to be enabled explicitly
     for Requests to be able to use it.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     __attrs__ = adapters.HTTPAdapter.__attrs__ + ['_validate_certificate']
@@ -79,22 +93,44 @@
         super(AppEngineAdapter, self).__init__(*args, **kwargs)
 
     def init_poolmanager(self, connections, maxsize, block=False):
+        """
+
+        Parameters
+        ----------
+        connections :
+            
+        maxsize :
+            
+        block :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         self.poolmanager = _AppEnginePoolManager(self._validate_certificate)
 
 
 class InsecureAppEngineAdapter(AppEngineAdapter):
     """An always-insecure GAE adapter for Requests.
-
+    
     This is a variant of the the transport adapter for Requests to use
     urllib3's GAE support that does not validate certificates. Use with
     caution!
-
+    
     .. note::
         The ``validate_certificate`` keyword argument will not be honored here
         and is not part of the signature because we always force it to
         ``False``.
-
+    
     See :class:`AppEngineAdapter` for further details.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, *args, **kwargs):
@@ -110,11 +146,18 @@
 
 class _AppEnginePoolManager(object):
     """Implements urllib3's PoolManager API expected by requests.
-
+    
     While a real PoolManager map hostnames to reusable Connections,
     AppEngine has no concept of a reusable connection to a host.
     So instead, this class constructs a small Connection per request,
     that is returned to the Adapter and used to access the URL.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, validate_certificate=True):
@@ -122,21 +165,40 @@
             validate_certificate=validate_certificate)
 
     def connection_from_url(self, url):
+        """
+
+        Parameters
+        ----------
+        url :
+            
+
+        Returns
+        -------
+
+        """
         return _AppEngineConnection(self.appengine_manager, url)
 
     def clear(self):
+        """ """
         pass
 
 
 class _AppEngineConnection(object):
     """Implements urllib3's HTTPConnectionPool API's urlopen().
-
+    
     This Connection's urlopen() is called with a host-relative path,
     so in order to properly support opening the URL, we need to store
     the full URL when this Connection is constructed from the PoolManager.
-
+    
     This code wraps AppEngineManager.urlopen(), which exposes a different
     API than in the original urllib3 urlopen(), and thus needs this adapter.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, appengine_manager, url):
@@ -147,6 +209,37 @@
                 redirect=True, assert_same_host=True,
                 timeout=timeout.Timeout.DEFAULT_TIMEOUT,
                 pool_timeout=None, release_conn=None, **response_kw):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+        url :
+            
+        body :
+             (Default value = None)
+        headers :
+             (Default value = None)
+        retries :
+             (Default value = None)
+        redirect :
+             (Default value = True)
+        assert_same_host :
+             (Default value = True)
+        timeout :
+             (Default value = timeout.Timeout.DEFAULT_TIMEOUT)
+        pool_timeout :
+             (Default value = None)
+        release_conn :
+             (Default value = None)
+        **response_kw :
+            
+
+        Returns
+        -------
+
+        """
         # This function's url argument is a host-relative URL,
         # but the AppEngineManager expects an absolute URL.
         # So we saved out the self.url when the AppEngineConnection
@@ -174,15 +267,24 @@
 
 def monkeypatch(validate_certificate=True):
     """Sets up all Sessions to use AppEngineAdapter by default.
-
+    
     If you don't want to deal with configuring your own Sessions,
     or if you use libraries that use requests directly (ie requests.post),
     then you may prefer to monkeypatch and auto-configure all Sessions.
-
+    
     .. warning: :
-
+    
         If ``validate_certificate`` is ``False``, certification validation will
         effectively be disabled for all requests.
+
+    Parameters
+    ----------
+    validate_certificate :
+         (Default value = True)
+
+    Returns
+    -------
+
     """
     _check_version()
     # HACK: We should consider modifying urllib3 to support this cleanly,
@@ -197,6 +299,7 @@
 
 
 def _check_version():
+    """ """
     if gaecontrib is None:
         raise exc.VersionMismatchError(
             "The toolbelt requires at least Requests 2.10.0 to be "
