# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/fft/helper.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/fft/helper.py
@@ -14,14 +14,26 @@
 
 
 def _fftshift_dispatcher(x, axes=None):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+    axes :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (x,)
 
 
 @array_function_dispatch(_fftshift_dispatcher, module='numpy.fft')
 def fftshift(x, axes=None):
-    """
-    Shift the zero-frequency component to the center of the spectrum.
-
+    """Shift the zero-frequency component to the center of the spectrum.
+    
     This function swaps half-spaces for all axes listed (defaults to all).
     Note that ``y[0]`` is the Nyquist component only if ``len(x)`` is even.
 
@@ -40,17 +52,16 @@
     See Also
     --------
     ifftshift : The inverse of `fftshift`.
-
-    Examples
-    --------
+    Examples
+    --------
+    
+    Shift the zero-frequency component only along the second axis:
     >>> freqs = np.fft.fftfreq(10, 0.1)
     >>> freqs
     array([ 0.,  1.,  2., ..., -3., -2., -1.])
     >>> np.fft.fftshift(freqs)
     array([-5., -4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.])
-
-    Shift the zero-frequency component only along the second axis:
-
+    
     >>> freqs = np.fft.fftfreq(9, d=1./9).reshape(3, 3)
     >>> freqs
     array([[ 0.,  1.,  2.],
@@ -60,7 +71,6 @@
     array([[ 2.,  0.,  1.],
            [-4.,  3.,  4.],
            [-1., -3., -2.]])
-
     """
     x = asarray(x)
     if axes is None:
@@ -76,8 +86,7 @@
 
 @array_function_dispatch(_fftshift_dispatcher, module='numpy.fft')
 def ifftshift(x, axes=None):
-    """
-    The inverse of `fftshift`. Although identical for even-length `x`, the
+    """The inverse of `fftshift`. Although identical for even-length `x`, the
     functions differ by one sample for odd-length `x`.
 
     Parameters
@@ -95,7 +104,6 @@
     See Also
     --------
     fftshift : Shift zero-frequency component to the center of the spectrum.
-
     Examples
     --------
     >>> freqs = np.fft.fftfreq(9, d=1./9).reshape(3, 3)
@@ -107,7 +115,6 @@
     array([[ 0.,  1.,  2.],
            [ 3.,  4., -4.],
            [-3., -2., -1.]])
-
     """
     x = asarray(x)
     if axes is None:
@@ -123,15 +130,14 @@
 
 @set_module('numpy.fft')
 def fftfreq(n, d=1.0):
-    """
-    Return the Discrete Fourier Transform sample frequencies.
-
+    """Return the Discrete Fourier Transform sample frequencies.
+    
     The returned float array `f` contains the frequency bin centers in cycles
     per unit of the sample spacing (with zero at the start).  For instance, if
     the sample spacing is in seconds, then the frequency unit is cycles/second.
-
+    
     Given a window length `n` and a sample spacing `d`::
-
+    
       f = [0, 1, ...,   n/2-1,     -n/2, ..., -1] / (d*n)   if n is even
       f = [0, 1, ..., (n-1)/2, -(n-1)/2, ..., -1] / (d*n)   if n is odd
 
@@ -156,7 +162,6 @@
     >>> freq = np.fft.fftfreq(n, d=timestep)
     >>> freq
     array([ 0.  ,  1.25,  2.5 , ..., -3.75, -2.5 , -1.25])
-
     """
     if not isinstance(n, integer_types):
         raise ValueError("n should be an integer")
@@ -172,19 +177,18 @@
 
 @set_module('numpy.fft')
 def rfftfreq(n, d=1.0):
-    """
-    Return the Discrete Fourier Transform sample frequencies
+    """Return the Discrete Fourier Transform sample frequencies
     (for usage with rfft, irfft).
-
+    
     The returned float array `f` contains the frequency bin centers in cycles
     per unit of the sample spacing (with zero at the start).  For instance, if
     the sample spacing is in seconds, then the frequency unit is cycles/second.
-
+    
     Given a window length `n` and a sample spacing `d`::
-
+    
       f = [0, 1, ...,     n/2-1,     n/2] / (d*n)   if n is even
       f = [0, 1, ..., (n-1)/2-1, (n-1)/2] / (d*n)   if n is odd
-
+    
     Unlike `fftfreq` (but like `scipy.fftpack.rfftfreq`)
     the Nyquist frequency component is considered to be positive.
 
@@ -212,7 +216,6 @@
     >>> freq = np.fft.rfftfreq(n, d=1./sample_rate)
     >>> freq
     array([  0.,  10.,  20.,  30.,  40.,  50.])
-
     """
     if not isinstance(n, integer_types):
         raise ValueError("n should be an integer")
