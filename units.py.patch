# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/babel/units.py
+++ b/..//venv/lib/python3.8/site-packages/babel/units.py
@@ -6,31 +6,40 @@
 
 
 class UnknownUnitError(ValueError):
+    """ """
     def __init__(self, unit, locale):
         ValueError.__init__(self, "%s is not a known unit in %s" % (unit, locale))
 
 
 def get_unit_name(measurement_unit, length='long', locale=LC_NUMERIC):
-    """
-    Get the display name for a measurement unit in the given locale.
+    """Get the display name for a measurement unit in the given locale.
+    
+    
+    Unknown units will raise exceptions:
+
+    Parameters
+    ----------
+    measurement_unit :
+        the code of a measurement unit.
+        Known units can be found in the CLDR Unit Validity XML file:
+        https://unicode.org/repos/cldr/tags/latest/common/validity/unit.xml
+    length :
+        short", "long" or "narrow" (Default value = 'long')
+    locale :
+        the `Locale` object or locale identifier (Default value = LC_NUMERIC)
+
+    Returns
+    -------
+    type
+        The unit display name, or None.
 
     >>> get_unit_name("radian", locale="en")
     'radians'
-
-    Unknown units will raise exceptions:
-
+    
     >>> get_unit_name("battery", locale="fi")
     Traceback (most recent call last):
         ...
     UnknownUnitError: battery/long is not a known unit/length in fi
-
-    :param measurement_unit: the code of a measurement unit.
-                             Known units can be found in the CLDR Unit Validity XML file:
-                             https://unicode.org/repos/cldr/tags/latest/common/validity/unit.xml
-
-    :param length: "short", "long" or "narrow"
-    :param locale: the `Locale` object or locale identifier
-    :return: The unit display name, or None.
     """
     locale = Locale.parse(locale)
     unit = _find_unit_pattern(measurement_unit, locale=locale)
@@ -40,21 +49,30 @@
 
 
 def _find_unit_pattern(unit_id, locale=LC_NUMERIC):
-    """
-    Expand an unit into a qualified form.
-
+    """Expand an unit into a qualified form.
+    
     Known units can be found in the CLDR Unit Validity XML file:
     https://unicode.org/repos/cldr/tags/latest/common/validity/unit.xml
+    
+    
+    Unknown values will return None.
+
+    Parameters
+    ----------
+    unit_id :
+        the code of a measurement unit.
+    locale :
+         (Default value = LC_NUMERIC)
+
+    Returns
+    -------
+    type
+        A key to the `unit_patterns` mapping, or None.
 
     >>> _find_unit_pattern("radian", locale="en")
     'angle-radian'
-
-    Unknown values will return None.
-
+    
     >>> _find_unit_pattern("horse", locale="en")
-
-    :param unit_id: the code of a measurement unit.
-    :return: A key to the `unit_patterns` mapping, or None.
     """
     locale = Locale.parse(locale)
     unit_patterns = locale._data["unit_patterns"]
@@ -67,9 +85,37 @@
 
 def format_unit(value, measurement_unit, length='long', format=None, locale=LC_NUMERIC):
     """Format a value of a given unit.
-
+    
     Values are formatted according to the locale's usual pluralization rules
     and number formats.
+    
+    
+    Number formats may be overridden with the ``format`` parameter.
+    
+    
+    The locale's usual pluralization rules are respected.
+    
+    
+    
+    .. versionadded:: 2.2.0
+
+    Parameters
+    ----------
+    value :
+        the value to format. If this is a string, no number formatting will be attempted.
+    measurement_unit :
+        the code of a measurement unit.
+        Known units can be found in the CLDR Unit Validity XML file:
+        https://unicode.org/repos/cldr/tags/latest/common/validity/unit.xml
+    length :
+        short", "long" or "narrow" (Default value = 'long')
+    format :
+        An optional format, as accepted by `format_decimal`. (Default value = None)
+    locale :
+        the `Locale` object or locale identifier (Default value = LC_NUMERIC)
+
+    Returns
+    -------
 
     >>> format_unit(12, 'length-meter', locale='ro_RO')
     u'12 metri'
@@ -79,15 +125,11 @@
     u'1\\xa0200 millimeter kvikks\\xf8lv'
     >>> format_unit(270, 'ton', locale='en')
     u'270 tons'
-
-    Number formats may be overridden with the ``format`` parameter.
-
+    
     >>> from babel._compat import decimal
     >>> format_unit(decimal.Decimal("-42.774"), 'temperature-celsius', 'short', format='#.0', locale='fr')
     u'-42,8\\u202f\\xb0C'
-
-    The locale's usual pluralization rules are respected.
-
+    
     >>> format_unit(1, 'length-meter', locale='ro_RO')
     u'1 metru'
     >>> format_unit(0, 'length-mile', locale='cy')
@@ -96,21 +138,11 @@
     u'1 filltir'
     >>> format_unit(3, 'length-mile', locale='cy')
     u'3 milltir'
-
+    
     >>> format_unit(15, 'length-horse', locale='fi')
     Traceback (most recent call last):
         ...
     UnknownUnitError: length-horse is not a known unit in fi
-
-    .. versionadded:: 2.2.0
-
-    :param value: the value to format. If this is a string, no number formatting will be attempted.
-    :param measurement_unit: the code of a measurement unit.
-                             Known units can be found in the CLDR Unit Validity XML file:
-                             https://unicode.org/repos/cldr/tags/latest/common/validity/unit.xml
-    :param length: "short", "long" or "narrow"
-    :param format: An optional format, as accepted by `format_decimal`.
-    :param locale: the `Locale` object or locale identifier
     """
     locale = Locale.parse(locale)
 
@@ -138,28 +170,37 @@
 
 
 def _find_compound_unit(numerator_unit, denominator_unit, locale=LC_NUMERIC):
-    """
-    Find a predefined compound unit pattern.
-
+    """Find a predefined compound unit pattern.
+    
     Used internally by format_compound_unit.
+    
+    
+    
+    If no predefined compound pattern can be found, `None` is returned.
+
+    Parameters
+    ----------
+    numerator_unit :
+        The numerator unit's identifier
+    denominator_unit :
+        The denominator unit's identifier
+    locale :
+        the `Locale` object or locale identifier (Default value = LC_NUMERIC)
+
+    Returns
+    -------
+    str|None
+        A key to the `unit_patterns` mapping, or None.
 
     >>> _find_compound_unit("kilometer", "hour", locale="en")
     'speed-kilometer-per-hour'
-
+    
     >>> _find_compound_unit("mile", "gallon", locale="en")
     'consumption-mile-per-gallon'
-
-    If no predefined compound pattern can be found, `None` is returned.
-
+    
     >>> _find_compound_unit("gallon", "mile", locale="en")
-
+    
     >>> _find_compound_unit("horse", "purple", locale="en")
-
-    :param numerator_unit: The numerator unit's identifier
-    :param denominator_unit: The denominator unit's identifier
-    :param locale: the `Locale` object or locale identifier
-    :return: A key to the `unit_patterns` mapping, or None.
-    :rtype: str|None
     """
     locale = Locale.parse(locale)
 
@@ -190,49 +231,69 @@
     denominator_value=1, denominator_unit=None,
     length='long', format=None, locale=LC_NUMERIC
 ):
-    """
-    Format a compound number value, i.e. "kilometers per hour" or similar.
-
+    """Format a compound number value, i.e. "kilometers per hour" or similar.
+    
     Both unit specifiers are optional to allow for formatting of arbitrary values still according
     to the locale's general "per" formatting specifier.
+    
+    
+    
+    
+    
+    
+    
+    
+    
+    See https://www.unicode.org/reports/tr35/tr35-general.html#perUnitPatterns
+
+    Parameters
+    ----------
+    numerator_value :
+        The numerator value. This may be a string,
+        in which case it is considered preformatted and the unit is ignored.
+    numerator_unit :
+        The numerator unit. See `format_unit`. (Default value = None)
+    denominator_value :
+        The denominator value. This may be a string,
+        in which case it is considered preformatted and the unit is ignored. (Default value = 1)
+    denominator_unit :
+        The denominator unit. See `format_unit`. (Default value = None)
+    length :
+        The formatting length. "short", "long" or "narrow" (Default value = 'long')
+    format :
+        An optional format, as accepted by `format_decimal`. (Default value = None)
+    locale :
+        the `Locale` object or locale identifier (Default value = LC_NUMERIC)
+
+    Returns
+    -------
+    type
+        A formatted compound value.
 
     >>> format_compound_unit(7, denominator_value=11, length="short", locale="pt")
     '7/11'
-
+    
     >>> format_compound_unit(150, "kilometer", denominator_unit="hour", locale="sv")
     '150 kilometer per timme'
-
+    
     >>> format_compound_unit(150, "kilowatt", denominator_unit="year", locale="fi")
     '150 kilowattia / vuosi'
-
+    
     >>> format_compound_unit(32.5, "ton", 15, denominator_unit="hour", locale="en")
     '32.5 tons per 15 hours'
-
+    
     >>> format_compound_unit(160, denominator_unit="square-meter", locale="fr")
     '160 par m\\xe8tre carr\\xe9'
-
+    
     >>> format_compound_unit(4, "meter", "ratakisko", length="short", locale="fi")
     '4 m/ratakisko'
-
+    
     >>> format_compound_unit(35, "minute", denominator_unit="fathom", locale="sv")
     '35 minuter per famn'
-
+    
     >>> from babel.numbers import format_currency
     >>> format_compound_unit(format_currency(35, "JPY", locale="de"), denominator_unit="liter", locale="de")
     '35\\xa0\\xa5 pro Liter'
-
-    See https://www.unicode.org/reports/tr35/tr35-general.html#perUnitPatterns
-
-    :param numerator_value: The numerator value. This may be a string,
-                            in which case it is considered preformatted and the unit is ignored.
-    :param numerator_unit: The numerator unit. See `format_unit`.
-    :param denominator_value: The denominator value. This may be a string,
-                              in which case it is considered preformatted and the unit is ignored.
-    :param denominator_unit: The denominator unit. See `format_unit`.
-    :param length: The formatting length. "short", "long" or "narrow"
-    :param format: An optional format, as accepted by `format_decimal`.
-    :param locale: the `Locale` object or locale identifier
-    :return: A formatted compound value.
     """
     locale = Locale.parse(locale)
 
