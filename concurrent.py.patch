# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tqdm/contrib/concurrent.py
+++ b/..//venv/lib/python3.8/site-packages/tqdm/contrib/concurrent.py
@@ -9,7 +9,19 @@
     from operator import length_hint
 except ImportError:
     def length_hint(it, default=0):
-        """Returns `len(it)`, falling back to `default`"""
+        """Returns `len(it)`, falling back to `default`
+
+        Parameters
+        ----------
+        it :
+            
+        default :
+             (Default value = 0)
+
+        Returns
+        -------
+
+        """
         try:
             return len(it)
         except TypeError:
@@ -21,6 +33,7 @@
         from multiprocessing import cpu_count
     except ImportError:
         def cpu_count():
+            """ """
             return 4
 import sys
 __author__ = {"github.com/": ["casperdcl"]}
@@ -29,7 +42,19 @@
 
 @contextmanager
 def ensure_lock(tqdm_class, lock_name=""):
-    """get (create if necessary) and then restore `tqdm_class`'s lock"""
+    """get (create if necessary) and then restore `tqdm_class`'s lock
+
+    Parameters
+    ----------
+    tqdm_class :
+        
+    lock_name :
+         (Default value = "")
+
+    Returns
+    -------
+
+    """
     old_lock = getattr(tqdm_class, '_lock', None)  # don't create a new lock
     lock = old_lock or tqdm_class.get_lock()  # maybe create a new lock
     lock = getattr(lock, lock_name, lock)  # maybe subtype
@@ -42,15 +67,23 @@
 
 
 def _executor_map(PoolExecutor, fn, *iterables, **tqdm_kwargs):
-    """
-    Implementation of `thread_map` and `process_map`.
+    """Implementation of `thread_map` and `process_map`.
 
     Parameters
     ----------
-    tqdm_class  : [default: tqdm.auto.tqdm].
-    max_workers  : [default: min(32, cpu_count() + 4)].
-    chunksize  : [default: 1].
-    lock_name  : [default: "":str].
+    PoolExecutor :
+        
+    fn :
+        
+    *iterables :
+        
+    **tqdm_kwargs :
+        
+
+    Returns
+    -------
+
+    
     """
     kwargs = tqdm_kwargs.copy()
     if "total" not in kwargs:
@@ -74,41 +107,44 @@
 
 
 def thread_map(fn, *iterables, **tqdm_kwargs):
-    """
-    Equivalent of `list(map(fn, *iterables))`
+    """Equivalent of `list(map(fn, *iterables))`
     driven by `concurrent.futures.ThreadPoolExecutor`.
 
     Parameters
     ----------
-    tqdm_class  : optional
-        `tqdm` class to use for bars [default: tqdm.auto.tqdm].
-    max_workers  : int, optional
-        Maximum number of workers to spawn; passed to
-        `concurrent.futures.ThreadPoolExecutor.__init__`.
-        [default: max(32, cpu_count() + 4)].
+    fn :
+        
+    *iterables :
+        
+    **tqdm_kwargs :
+        
+
+    Returns
+    -------
+
+    
     """
     from concurrent.futures import ThreadPoolExecutor
     return _executor_map(ThreadPoolExecutor, fn, *iterables, **tqdm_kwargs)
 
 
 def process_map(fn, *iterables, **tqdm_kwargs):
-    """
-    Equivalent of `list(map(fn, *iterables))`
+    """Equivalent of `list(map(fn, *iterables))`
     driven by `concurrent.futures.ProcessPoolExecutor`.
 
     Parameters
     ----------
-    tqdm_class  : optional
-        `tqdm` class to use for bars [default: tqdm.auto.tqdm].
-    max_workers  : int, optional
-        Maximum number of workers to spawn; passed to
-        `concurrent.futures.ProcessPoolExecutor.__init__`.
-        [default: min(32, cpu_count() + 4)].
-    chunksize  : int, optional
-        Size of chunks sent to worker processes; passed to
-        `concurrent.futures.ProcessPoolExecutor.map`. [default: 1].
-    lock_name  : str, optional
-        Member of `tqdm_class.get_lock()` to use [default: mp_lock].
+    fn :
+        
+    *iterables :
+        
+    **tqdm_kwargs :
+        
+
+    Returns
+    -------
+
+    
     """
     from concurrent.futures import ProcessPoolExecutor
     if iterables and "chunksize" not in tqdm_kwargs:
