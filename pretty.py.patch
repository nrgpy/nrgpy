# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/lib/pretty.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/lib/pretty.py
@@ -30,16 +30,44 @@
 pretty printer passed::
 
     class MyObject(object):
+        """ """
 
         def _repr_pretty_(self, p, cycle):
+            """
+
+            Parameters
+            ----------
+            p :
+                
+            cycle :
+                
+
+            Returns
+            -------
+
+            """
             ...
 
 Here is an example implementation of a `_repr_pretty_` method for a list
 subclass::
 
     class MyList(list):
+        """ """
 
         def _repr_pretty_(self, p, cycle):
+            """
+
+            Parameters
+            ----------
+            p :
+                
+            cycle :
+                
+
+            Returns
+            -------
+
+            """
             if cycle:
                 p.text('MyList(...)')
             else:
@@ -101,9 +129,22 @@
 
 def _safe_getattr(obj, attr, default=None):
     """Safe version of getattr.
-
+    
     Same as getattr, but will return ``default`` on any Exception,
     rather than raising.
+
+    Parameters
+    ----------
+    obj :
+        
+    attr :
+        
+    default :
+         (Default value = None)
+
+    Returns
+    -------
+
     """
     try:
         return getattr(obj, attr, default)
@@ -112,6 +153,7 @@
 
 @undoc
 class CUnicodeIO(StringIO):
+    """ """
     def __init__(self, *args, **kwargs):
         super().__init__(*args, **kwargs)
         warn(("CUnicodeIO is deprecated since IPython 6.0. "
@@ -119,10 +161,18 @@
              DeprecationWarning, stacklevel=2)
 
 def _sorted_for_pprint(items):
-    """
-    Sort the given items for pretty printing. Since some predictable
+    """Sort the given items for pretty printing. Since some predictable
     sorting is better than no sorting at all, we sort on the string
     representation if normal sorting fails.
+
+    Parameters
+    ----------
+    items :
+        
+
+    Returns
+    -------
+
     """
     items = list(items)
     try:
@@ -134,8 +184,24 @@
             return items
 
 def pretty(obj, verbose=False, max_width=79, newline='\n', max_seq_length=MAX_SEQ_LENGTH):
-    """
-    Pretty print the object's representation.
+    """Pretty print the object's representation.
+
+    Parameters
+    ----------
+    obj :
+        
+    verbose :
+         (Default value = False)
+    max_width :
+         (Default value = 79)
+    newline :
+         (Default value = '\n')
+    max_seq_length :
+         (Default value = MAX_SEQ_LENGTH)
+
+    Returns
+    -------
+
     """
     stream = StringIO()
     printer = RepresentationPrinter(stream, verbose, max_width, newline, max_seq_length=max_seq_length)
@@ -145,8 +211,24 @@
 
 
 def pprint(obj, verbose=False, max_width=79, newline='\n', max_seq_length=MAX_SEQ_LENGTH):
-    """
-    Like `pretty` but print to stdout.
+    """Like `pretty` but print to stdout.
+
+    Parameters
+    ----------
+    obj :
+        
+    verbose :
+         (Default value = False)
+    max_width :
+         (Default value = 79)
+    newline :
+         (Default value = '\n')
+    max_seq_length :
+         (Default value = MAX_SEQ_LENGTH)
+
+    Returns
+    -------
+
     """
     printer = RepresentationPrinter(sys.stdout, verbose, max_width, newline, max_seq_length=max_seq_length)
     printer.pretty(obj)
@@ -155,10 +237,21 @@
     sys.stdout.flush()
 
 class _PrettyPrinterBase(object):
+    """ """
 
     @contextmanager
     def indent(self, indent):
-        """with statement support for indenting/dedenting."""
+        """with statement support for indenting/dedenting.
+
+        Parameters
+        ----------
+        indent :
+            
+
+        Returns
+        -------
+
+        """
         self.indentation += indent
         try:
             yield
@@ -167,7 +260,21 @@
 
     @contextmanager
     def group(self, indent=0, open='', close=''):
-        """like begin_group / end_group but for the with statement."""
+        """like begin_group / end_group but for the with statement.
+
+        Parameters
+        ----------
+        indent :
+             (Default value = 0)
+        open :
+             (Default value = '')
+        close :
+             (Default value = '')
+
+        Returns
+        -------
+
+        """
         self.begin_group(indent, open)
         try:
             yield
@@ -175,11 +282,17 @@
             self.end_group(indent, close)
 
 class PrettyPrinter(_PrettyPrinterBase):
-    """
-    Baseclass for the `RepresentationPrinter` prettyprinter that is used to
+    """Baseclass for the `RepresentationPrinter` prettyprinter that is used to
     generate pretty reprs of objects.  Contrary to the `RepresentationPrinter`
     this printer knows nothing about the default pprinters or the `_repr_pretty_`
     callback method.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, output, max_width=79, newline='\n', max_seq_length=MAX_SEQ_LENGTH):
@@ -197,6 +310,17 @@
         self.indentation = 0
 
     def _break_one_group(self, group):
+        """
+
+        Parameters
+        ----------
+        group :
+            
+
+        Returns
+        -------
+
+        """
         while group.breakables:
             x = self.buffer.popleft()
             self.output_width = x.output(self.output, self.output_width)
@@ -207,6 +331,7 @@
             self.buffer_width -= x.width
 
     def _break_outer_groups(self):
+        """ """
         while self.max_width < self.output_width + self.buffer_width:
             group = self.group_queue.deq()
             if not group:
@@ -214,7 +339,17 @@
             self._break_one_group(group)
 
     def text(self, obj):
-        """Add literal text to the output."""
+        """Add literal text to the output.
+
+        Parameters
+        ----------
+        obj :
+            
+
+        Returns
+        -------
+
+        """
         width = len(obj)
         if self.buffer:
             text = self.buffer[-1]
@@ -229,10 +364,18 @@
             self.output_width += width
 
     def breakable(self, sep=' '):
-        """
-        Add a breakable separator to the output.  This does not mean that it
+        """Add a breakable separator to the output.  This does not mean that it
         will automatically break here.  If no breaking on this position takes
         place the `sep` is inserted which default to one space.
+
+        Parameters
+        ----------
+        sep :
+             (Default value = ' ')
+
+        Returns
+        -------
+
         """
         width = len(sep)
         group = self.group_stack[-1]
@@ -248,9 +391,7 @@
             self._break_outer_groups()
 
     def break_(self):
-        """
-        Explicitly insert a newline into the output, maintaining correct indentation.
-        """
+        """Explicitly insert a newline into the output, maintaining correct indentation."""
         group = self.group_queue.deq()
         if group:
             self._break_one_group(group)
@@ -262,11 +403,20 @@
 
 
     def begin_group(self, indent=0, open=''):
-        """
-        Begin a group.
+        """Begin a group.
         The first parameter specifies the indentation for the next line (usually
         the width of the opening text), the second the opening text.  All
-        parameters are optional.
+
+        Parameters
+        ----------
+        indent :
+             (Default value = 0)
+        open :
+             (Default value = '')
+
+        Returns
+        -------
+
         """
         if open:
             self.text(open)
@@ -276,7 +426,17 @@
         self.indentation += indent
 
     def _enumerate(self, seq):
-        """like enumerate, but with an upper limit on the number of items"""
+        """like enumerate, but with an upper limit on the number of items
+
+        Parameters
+        ----------
+        seq :
+            
+
+        Returns
+        -------
+
+        """
         for idx, x in enumerate(seq):
             if self.max_seq_length and idx >= self.max_seq_length:
                 self.text(',')
@@ -286,7 +446,19 @@
             yield idx, x
 
     def end_group(self, dedent=0, close=''):
-        """End a group. See `begin_group` for more details."""
+        """End a group. See `begin_group` for more details.
+
+        Parameters
+        ----------
+        dedent :
+             (Default value = 0)
+        close :
+             (Default value = '')
+
+        Returns
+        -------
+
+        """
         self.indentation -= dedent
         group = self.group_stack.pop()
         if not group.breakables:
@@ -303,8 +475,17 @@
 
 
 def _get_mro(obj_class):
-    """ Get a reasonable method resolution order of a class and its superclasses
+    """Get a reasonable method resolution order of a class and its superclasses
     for both old-style and new-style classes.
+
+    Parameters
+    ----------
+    obj_class :
+        
+
+    Returns
+    -------
+
     """
     if not hasattr(obj_class, '__mro__'):
         # Old-style class. Mix in object to make a fake new-style class.
@@ -322,18 +503,24 @@
 
 
 class RepresentationPrinter(PrettyPrinter):
-    """
-    Special pretty printer that has a `pretty` method that calls the pretty
+    """Special pretty printer that has a `pretty` method that calls the pretty
     printer for a python object.
-
+    
     This class stores processing data on `self` so you must *never* use
     this class in a threaded environment.  Always lock it or reinstanciate
     it.
-
+    
     Instances also have a verbose flag callbacks can access to control their
     output.  For example the default instance repr prints all attributes and
     methods that are not prefixed by an underscore if the printer is in
     verbose mode.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, output, verbose=False, max_width=79, newline='\n',
@@ -354,7 +541,17 @@
         self.deferred_pprinters = deferred_pprinters
 
     def pretty(self, obj):
-        """Pretty print the given object."""
+        """Pretty print the given object.
+
+        Parameters
+        ----------
+        obj :
+            
+
+        Returns
+        -------
+
+        """
         obj_id = id(obj)
         cycle = obj_id in self.stack
         self.stack.append(obj_id)
@@ -399,12 +596,18 @@
             self.stack.pop()
 
     def _in_deferred_types(self, cls):
-        """
-        Check if the given class is specified in the deferred type registry.
-
+        """Check if the given class is specified in the deferred type registry.
+        
         Returns the printer from the registry if it exists, and None if the
         class is not in the registry. Successful matches will be moved to the
         regular type registry for future use.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         mod = _safe_getattr(cls, '__module__', None)
         name = _safe_getattr(cls, '__name__', None)
@@ -418,28 +621,70 @@
 
 
 class Printable(object):
+    """ """
 
     def output(self, stream, output_width):
+        """
+
+        Parameters
+        ----------
+        stream :
+            
+        output_width :
+            
+
+        Returns
+        -------
+
+        """
         return output_width
 
 
 class Text(Printable):
+    """ """
 
     def __init__(self):
         self.objs = []
         self.width = 0
 
     def output(self, stream, output_width):
+        """
+
+        Parameters
+        ----------
+        stream :
+            
+        output_width :
+            
+
+        Returns
+        -------
+
+        """
         for obj in self.objs:
             stream.write(obj)
         return output_width + self.width
 
     def add(self, obj, width):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+        width :
+            
+
+        Returns
+        -------
+
+        """
         self.objs.append(obj)
         self.width += width
 
 
 class Breakable(Printable):
+    """ """
 
     def __init__(self, seq, width, pretty):
         self.obj = seq
@@ -450,6 +695,19 @@
         self.group.breakables.append(self)
 
     def output(self, stream, output_width):
+        """
+
+        Parameters
+        ----------
+        stream :
+            
+        output_width :
+            
+
+        Returns
+        -------
+
+        """
         self.group.breakables.popleft()
         if self.group.want_break:
             stream.write(self.pretty.newline)
@@ -462,6 +720,7 @@
 
 
 class Group(Printable):
+    """ """
 
     def __init__(self, depth):
         self.depth = depth
@@ -470,6 +729,7 @@
 
 
 class GroupQueue(object):
+    """ """
 
     def __init__(self, *groups):
         self.queue = []
@@ -477,12 +737,24 @@
             self.enq(group)
 
     def enq(self, group):
+        """
+
+        Parameters
+        ----------
+        group :
+            
+
+        Returns
+        -------
+
+        """
         depth = group.depth
         while depth > len(self.queue) - 1:
             self.queue.append([])
         self.queue[depth].append(group)
 
     def deq(self):
+        """ """
         for stack in self.queue:
             for idx, group in enumerate(reversed(stack)):
                 if group.breakables:
@@ -494,6 +766,17 @@
             del stack[:]
 
     def remove(self, group):
+        """
+
+        Parameters
+        ----------
+        group :
+            
+
+        Returns
+        -------
+
+        """
         try:
             self.queue[group.depth].remove(group)
         except ValueError:
@@ -501,9 +784,21 @@
 
 
 def _default_pprint(obj, p, cycle):
-    """
-    The default print function.  Used if an object does not provide one and
+    """The default print function.  Used if an object does not provide one and
     it's none of the builtin objects.
+
+    Parameters
+    ----------
+    obj :
+        
+    p :
+        
+    cycle :
+        
+
+    Returns
+    -------
+
     """
     klass = _safe_getattr(obj, '__class__', None) or type(obj)
     if _safe_getattr(klass, '__repr__', None) is not object.__repr__:
@@ -539,11 +834,36 @@
 
 
 def _seq_pprinter_factory(start, end):
-    """
-    Factory that returns a pprint function useful for sequences.  Used by
+    """Factory that returns a pprint function useful for sequences.  Used by
     the default pprint for tuples, dicts, and lists.
+
+    Parameters
+    ----------
+    start :
+        
+    end :
+        
+
+    Returns
+    -------
+
     """
     def inner(obj, p, cycle):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+        p :
+            
+        cycle :
+            
+
+        Returns
+        -------
+
+        """
         if cycle:
             return p.text(start + '...' + end)
         step = len(start)
@@ -561,10 +881,35 @@
 
 
 def _set_pprinter_factory(start, end):
-    """
-    Factory that returns a pprint function useful for sets and frozensets.
+    """Factory that returns a pprint function useful for sets and frozensets.
+
+    Parameters
+    ----------
+    start :
+        
+    end :
+        
+
+    Returns
+    -------
+
     """
     def inner(obj, p, cycle):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+        p :
+            
+        cycle :
+            
+
+        Returns
+        -------
+
+        """
         if cycle:
             return p.text(start + '...' + end)
         if len(obj) == 0:
@@ -588,11 +933,36 @@
 
 
 def _dict_pprinter_factory(start, end):
-    """
-    Factory that returns a pprint function used by the default pprint of
+    """Factory that returns a pprint function used by the default pprint of
     dicts and dict proxies.
+
+    Parameters
+    ----------
+    start :
+        
+    end :
+        
+
+    Returns
+    -------
+
     """
     def inner(obj, p, cycle):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+        p :
+            
+        cycle :
+            
+
+        Returns
+        -------
+
+        """
         if cycle:
             return p.text('{...}')
         step = len(start)
@@ -610,7 +980,21 @@
 
 
 def _super_pprint(obj, p, cycle):
-    """The pprint for the super type."""
+    """The pprint for the super type.
+
+    Parameters
+    ----------
+    obj :
+        
+    p :
+        
+    cycle :
+        
+
+    Returns
+    -------
+
+    """
     p.begin_group(8, '<super: ')
     p.pretty(obj.__thisclass__)
     p.text(',')
@@ -624,7 +1008,21 @@
 
 
 def _re_pattern_pprint(obj, p, cycle):
-    """The pprint function for regular expression patterns."""
+    """The pprint function for regular expression patterns.
+
+    Parameters
+    ----------
+    obj :
+        
+    p :
+        
+    cycle :
+        
+
+    Returns
+    -------
+
+    """
     p.text('re.compile(')
     pattern = repr(obj.pattern)
     if pattern[:1] in 'uU':
@@ -649,7 +1047,21 @@
 
 
 def _types_simplenamespace_pprint(obj, p, cycle):
-    """The pprint function for types.SimpleNamespace."""
+    """The pprint function for types.SimpleNamespace.
+
+    Parameters
+    ----------
+    obj :
+        
+    p :
+        
+    cycle :
+        
+
+    Returns
+    -------
+
+    """
     name = 'namespace'
     with p.group(len(name) + 1, name + '(', ')'):
         if cycle:
@@ -665,7 +1077,21 @@
 
 
 def _type_pprint(obj, p, cycle):
-    """The pprint for classes and types."""
+    """The pprint for classes and types.
+
+    Parameters
+    ----------
+    obj :
+        
+    p :
+        
+    cycle :
+        
+
+    Returns
+    -------
+
+    """
     # Heap allocated types might not have the module attribute,
     # and others may set it to None.
 
@@ -695,7 +1121,21 @@
 
 
 def _repr_pprint(obj, p, cycle):
-    """A pprint that just redirects to the normal repr function."""
+    """A pprint that just redirects to the normal repr function.
+
+    Parameters
+    ----------
+    obj :
+        
+    p :
+        
+    cycle :
+        
+
+    Returns
+    -------
+
+    """
     # Find newlines and replace them with p.break_()
     output = repr(obj)
     lines = output.splitlines()
@@ -707,7 +1147,21 @@
 
 
 def _function_pprint(obj, p, cycle):
-    """Base pprint for all functions and builtin functions."""
+    """Base pprint for all functions and builtin functions.
+
+    Parameters
+    ----------
+    obj :
+        
+    p :
+        
+    cycle :
+        
+
+    Returns
+    -------
+
+    """
     name = _safe_getattr(obj, '__qualname__', obj.__name__)
     mod = obj.__module__
     if mod and mod not in ('__builtin__', 'builtins', 'exceptions'):
@@ -720,7 +1174,21 @@
 
 
 def _exception_pprint(obj, p, cycle):
-    """Base pprint for all exceptions."""
+    """Base pprint for all exceptions.
+
+    Parameters
+    ----------
+    obj :
+        
+    p :
+        
+    cycle :
+        
+
+    Returns
+    -------
+
+    """
     name = getattr(obj.__class__, '__qualname__', obj.__class__.__name__)
     if obj.__class__.__module__ not in ('exceptions', 'builtins'):
         name = '%s.%s' % (obj.__class__.__module__, name)
@@ -789,8 +1257,18 @@
 }
 
 def for_type(typ, func):
-    """
-    Add a pretty printer for a given type.
+    """Add a pretty printer for a given type.
+
+    Parameters
+    ----------
+    typ :
+        
+    func :
+        
+
+    Returns
+    -------
+
     """
     oldfunc = _type_pprinters.get(typ, None)
     if func is not None:
@@ -799,9 +1277,21 @@
     return oldfunc
 
 def for_type_by_name(type_module, type_name, func):
-    """
-    Add a pretty printer for a type specified by the module and name of a type
+    """Add a pretty printer for a type specified by the module and name of a type
     rather than the type object itself.
+
+    Parameters
+    ----------
+    type_module :
+        
+    type_name :
+        
+    func :
+        
+
+    Returns
+    -------
+
     """
     key = (type_module, type_name)
     oldfunc = _deferred_type_pprinters.get(key, None)
@@ -817,6 +1307,21 @@
 
 
 def _defaultdict_pprint(obj, p, cycle):
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+    p :
+        
+    cycle :
+        
+
+    Returns
+    -------
+
+    """
     name = obj.__class__.__name__
     with p.group(len(name) + 1, name + '(', ')'):
         if cycle:
@@ -828,6 +1333,21 @@
             p.pretty(dict(obj))
 
 def _ordereddict_pprint(obj, p, cycle):
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+    p :
+        
+    cycle :
+        
+
+    Returns
+    -------
+
+    """
     name = obj.__class__.__name__
     with p.group(len(name) + 1, name + '(', ')'):
         if cycle:
@@ -836,6 +1356,21 @@
             p.pretty(list(obj.items()))
 
 def _deque_pprint(obj, p, cycle):
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+    p :
+        
+    cycle :
+        
+
+    Returns
+    -------
+
+    """
     name = obj.__class__.__name__
     with p.group(len(name) + 1, name + '(', ')'):
         if cycle:
@@ -845,6 +1380,21 @@
 
 
 def _counter_pprint(obj, p, cycle):
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+    p :
+        
+    cycle :
+        
+
+    Returns
+    -------
+
+    """
     name = obj.__class__.__name__
     with p.group(len(name) + 1, name + '(', ')'):
         if cycle:
@@ -860,6 +1410,7 @@
 if __name__ == '__main__':
     from random import randrange
     class Foo(object):
+        """ """
         def __init__(self):
             self.foo = 1
             self.bar = re.compile(r'\s+')
@@ -868,6 +1419,7 @@
             self.list = ["blub", "blah", self]
 
         def get_foo(self):
+            """ """
             print("foo")
 
     pprint(Foo(), verbose=True)
