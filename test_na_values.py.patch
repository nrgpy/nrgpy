# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/parser/test_na_values.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/parser/test_na_values.py
@@ -14,6 +14,17 @@
 
 
 def test_string_nas(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """A,B,C
 a,b,c
@@ -29,6 +40,17 @@
 
 
 def test_detect_string_na(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """A,B
 foo,bar
@@ -70,6 +92,21 @@
     ],
 )
 def test_non_string_na_values(all_parsers, data, na_values):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    data :
+        
+    na_values :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-3611: with an odd float format, we can't match
     # the string "999.0" exactly but still need float matching
     parser = all_parsers
@@ -80,6 +117,17 @@
 
 
 def test_default_na_values(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     _NA_VALUES = {
         "-1.#IND",
         "1.#QNAN",
@@ -106,6 +154,19 @@
     nv = len(_NA_VALUES)
 
     def f(i, v):
+        """
+
+        Parameters
+        ----------
+        i :
+            
+        v :
+            
+
+        Returns
+        -------
+
+        """
         if i == 0:
             buf = ""
         elif i > 0:
@@ -128,6 +189,19 @@
 
 @pytest.mark.parametrize("na_values", ["baz", ["baz"]])
 def test_custom_na_values(all_parsers, na_values):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    na_values :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """A,B,C
 ignore,this,row
@@ -143,10 +217,18 @@
 
 
 def test_bool_na_values(all_parsers):
-    data = """A,B,C
-True,False,True
-NA,True,False
-False,NA,True"""
+    """data = """A,B,C
+    True,False,True
+    NA,True,False
+    False,NA,True
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
     parser = all_parsers
     result = parser.read_csv(StringIO(data))
     expected = DataFrame(
@@ -160,11 +242,19 @@
 
 
 def test_na_value_dict(all_parsers):
-    data = """A,B,C
-foo,bar,NA
-bar,foo,foo
-foo,bar,NA
-bar,foo,foo"""
+    """data = """A,B,C
+    foo,bar,NA
+    bar,foo,foo
+    foo,bar,NA
+    bar,foo,foo
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
     parser = all_parsers
     df = parser.read_csv(StringIO(data), na_values={"A": ["foo"], "B": ["bar"]})
     expected = DataFrame(
@@ -201,10 +291,21 @@
     ],
 )
 def test_na_value_dict_multi_index(all_parsers, index_col, expected):
-    data = """\
-a,b,c,d
-0,NA,1,5
-"""
+    """data = """\
+    a,b,c,d
+    0,NA,1,5
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    index_col :
+        
+    expected :
+        
+
+    Returns
+    -------
     parser = all_parsers
     result = parser.read_csv(StringIO(data), na_values=set(), index_col=index_col)
     tm.assert_frame_equal(result, expected)
@@ -256,22 +357,44 @@
     ],
 )
 def test_na_values_keep_default(all_parsers, kwargs, expected):
-    data = """\
-A,B,C
-a,1,one
-b,2,two
-,3,three
-d,4,nan
-e,5,five
-nan,6,
-g,7,seven
-"""
+    """data = """\
+    A,B,C
+    a,1,one
+    b,2,two
+    ,3,three
+    d,4,nan
+    e,5,five
+    nan,6,
+    g,7,seven
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    kwargs :
+        
+    expected :
+        
+
+    Returns
+    -------
     parser = all_parsers
     result = parser.read_csv(StringIO(data), **kwargs)
     tm.assert_frame_equal(result, expected)
 
 
 def test_no_na_values_no_keep_default(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-4318: passing na_values=None and
     # keep_default_na=False yields 'None" as a na_value
     data = """\
@@ -298,6 +421,17 @@
 
 
 def test_no_keep_default_na_dict_na_values(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-19227
     data = "a,b\n,2"
     parser = all_parsers
@@ -309,6 +443,17 @@
 
 
 def test_no_keep_default_na_dict_na_scalar_values(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-19227
     #
     # Scalar values shouldn't cause the parsing to crash or fail.
@@ -321,6 +466,19 @@
 
 @pytest.mark.parametrize("col_zero_na_values", [113125, "113125"])
 def test_no_keep_default_na_dict_na_values_diff_reprs(all_parsers, col_zero_na_values):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    col_zero_na_values :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-19227
     data = """\
 113125,"blah","/blaha",kjsdkj,412.166,225.874,214.008
@@ -356,12 +514,23 @@
     ],
 )
 def test_na_values_na_filter_override(all_parsers, na_filter, row_data):
-    data = """\
-A,B
-1,A
-nan,B
-3,C
-"""
+    """data = """\
+    A,B
+    1,A
+    nan,B
+    3,C
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    na_filter :
+        
+    row_data :
+        
+
+    Returns
+    -------
     parser = all_parsers
     result = parser.read_csv(StringIO(data), na_values=["B"], na_filter=na_filter)
 
@@ -370,6 +539,17 @@
 
 
 def test_na_trailing_columns(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """Date,Currency,Symbol,Type,Units,UnitPrice,Cost,Tax
 2012-03-14,USD,AAPL,BUY,1000
@@ -404,6 +584,21 @@
     ],
 )
 def test_na_values_scalar(all_parsers, na_values, row_data):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    na_values :
+        
+    row_data :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-12224
     parser = all_parsers
     names = ["a", "b"]
@@ -415,6 +610,17 @@
 
 
 def test_na_values_dict_aliasing(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     na_values = {"a": 2, "b": 1}
     na_values_copy = na_values.copy()
@@ -430,6 +636,17 @@
 
 
 def test_na_values_dict_col_index(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-14203
     data = "a\nfoo\n1"
     parser = all_parsers
@@ -453,6 +670,23 @@
     ],
 )
 def test_na_values_uint64(all_parsers, data, kwargs, expected):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    data :
+        
+    kwargs :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-14983
     parser = all_parsers
     result = parser.read_csv(StringIO(data), header=None, **kwargs)
@@ -460,6 +694,17 @@
 
 
 def test_empty_na_values_no_default_with_index(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-15835
     data = "a,1\nb,2"
     parser = all_parsers
@@ -473,6 +718,21 @@
     "na_filter,index_data", [(False, ["", "5"]), (True, [np.nan, 5.0])]
 )
 def test_no_na_filter_on_index(all_parsers, na_filter, index_data):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    na_filter :
+        
+    index_data :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-5239
     #
     # Don't parse NA-values in index unless na_filter=True
@@ -485,6 +745,17 @@
 
 
 def test_inf_na_values_with_int_index(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-17128
     parser = all_parsers
     data = "idx,col1,col2\n1,3,4\n2,inf,-inf"
@@ -499,6 +770,19 @@
 
 @pytest.mark.parametrize("na_filter", [True, False])
 def test_na_values_with_dtype_str_and_na_filter(all_parsers, na_filter):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    na_filter :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-20377
     parser = all_parsers
     data = "a,b,c\n1,,3\n4,5,6"
@@ -524,6 +808,21 @@
     ],
 )
 def test_cast_NA_to_bool_raises_error(all_parsers, data, na_values):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    data :
+        
+    na_values :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     msg = (
         "(Bool column has NA values in column [0a])|"
@@ -541,6 +840,17 @@
 
 
 def test_str_nan_dropped(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-21131
     parser = all_parsers
 
