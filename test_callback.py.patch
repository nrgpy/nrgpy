# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/f2py/tests/test_callback.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/f2py/tests/test_callback.py
@@ -9,85 +9,102 @@
 
 
 class TestF77Callback(util.F2PyTest):
-    code = """
+    """code = """
        subroutine t(fun,a)
        integer a
-cf2py  intent(out) a
+    cf2py  intent(out) a
        external fun
        call fun(a)
        end
-
+    
        subroutine func(a)
-cf2py  intent(in,out) a
+    cf2py  intent(in,out) a
        integer a
        a = a + 11
        end
-
+    
        subroutine func0(a)
-cf2py  intent(out) a
+    cf2py  intent(out) a
        integer a
        a = 11
        end
-
+    
        subroutine t2(a)
-cf2py  intent(callback) fun
-       integer a
-cf2py  intent(out) a
+    cf2py  intent(callback) fun
+       integer a
+    cf2py  intent(out) a
        external fun
        call fun(a)
        end
-
+    
        subroutine string_callback(callback, a)
        external callback
        double precision callback
        double precision a
        character*1 r
-cf2py  intent(out) a
+    cf2py  intent(out) a
        r = 'r'
        a = callback(r)
        end
-
+    
        subroutine string_callback_array(callback, cu, lencu, a)
        external callback
        integer callback
        integer lencu
        character*8 cu(lencu)
        integer a
-cf2py  intent(out) a
-
+    cf2py  intent(out) a
+    
        a = callback(cu, lencu)
        end
-    """
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     @pytest.mark.parametrize('name', 't,t2'.split(','))
     def test_all(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         self.check_function(name)
 
     @pytest.mark.xfail(IS_PYPY,
                        reason="PyPy cannot modify tp_doc after PyType_Ready")
     def test_docstring(self):
-        expected = textwrap.dedent("""\
+        """expected = textwrap.dedent("""\
         a = t(fun,[fun_extra_args])
-
+        
         Wrapper for ``t``.
 
         Parameters
         ----------
         fun : call-back function
+            
+
+        Returns
+        -------
+        a : int
+            
 
         Other Parameters
         ----------------
         fun_extra_args : input tuple, optional
             Default: ()
-
-        Returns
-        -------
-        a : int
-
         Notes
         -----
         Call-back functions::
-
+        
           def fun(): return a
           Return objects:
             a : int
@@ -95,6 +112,17 @@
         assert_equal(self.module.t.__doc__, expected)
 
     def check_function(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         t = getattr(self.module, name)
         r = t(lambda: 4)
         assert_(r == 4, repr(r))
@@ -117,11 +145,13 @@
         assert_(r == 11, repr(r))
 
         class A:
+            """ """
 
             def __call__(self):
                 return 7
 
             def mth(self):
+                """ """
                 return 9
         a = A()
         r = t(a)
@@ -132,8 +162,20 @@
     @pytest.mark.skipif(sys.platform=='win32',
                         reason='Fails with MinGW64 Gfortran (Issue #9673)')
     def test_string_callback(self):
+        """ """
 
         def callback(code):
+            """
+
+            Parameters
+            ----------
+            code :
+                
+
+            Returns
+            -------
+
+            """
             if code == 'r':
                 return 0
             else:
@@ -146,10 +188,24 @@
     @pytest.mark.skipif(sys.platform=='win32',
                         reason='Fails with MinGW64 Gfortran (Issue #9673)')
     def test_string_callback_array(self):
+        """ """
         # See gh-10027
         cu = np.zeros((1, 8), 'S1')
 
         def callback(cu, lencu):
+            """
+
+            Parameters
+            ----------
+            cu :
+                
+            lencu :
+                
+
+            Returns
+            -------
+
+            """
             if cu.shape != (lencu, 8):
                 return 1
             if cu.dtype != 'S1':
