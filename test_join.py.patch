# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/numeric/test_join.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/numeric/test_join.py
@@ -6,7 +6,9 @@
 
 
 class TestJoinInt64Index:
+    """ """
     def test_join_non_unique(self):
+        """ """
         left = Index([4, 4, 3, 3])
 
         joined, lidx, ridx = left.join(left, return_indexers=True)
@@ -21,6 +23,7 @@
         tm.assert_numpy_array_equal(ridx, exp_ridx)
 
     def test_join_inner(self):
+        """ """
         index = Int64Index(range(0, 20, 2))
         other = Int64Index([7, 12, 25, 1, 2, 5])
         other_mono = Int64Index([1, 2, 5, 7, 12, 25])
@@ -57,6 +60,7 @@
         tm.assert_numpy_array_equal(ridx, eridx)
 
     def test_join_left(self):
+        """ """
         index = Int64Index(range(0, 20, 2))
         other = Int64Index([7, 12, 25, 1, 2, 5])
         other_mono = Int64Index([1, 2, 5, 7, 12, 25])
@@ -91,6 +95,7 @@
         tm.assert_numpy_array_equal(ridx, eridx)
 
     def test_join_right(self):
+        """ """
         index = Int64Index(range(0, 20, 2))
         other = Int64Index([7, 12, 25, 1, 2, 5])
         other_mono = Int64Index([1, 2, 5, 7, 12, 25])
@@ -126,6 +131,7 @@
         tm.assert_numpy_array_equal(ridx, eridx)
 
     def test_join_non_int_index(self):
+        """ """
         index = Int64Index(range(0, 20, 2))
         other = Index([3, 6, 7, 8, 10], dtype=object)
 
@@ -154,6 +160,7 @@
         tm.assert_index_equal(right2, index.astype(object))
 
     def test_join_outer(self):
+        """ """
         index = Int64Index(range(0, 20, 2))
         other = Int64Index([7, 12, 25, 1, 2, 5])
         other_mono = Int64Index([1, 2, 5, 7, 12, 25])
@@ -191,13 +198,26 @@
 
 
 class TestJoinUInt64Index:
+    """ """
     @pytest.fixture
     def index_large(self):
+        """ """
         # large values used in TestUInt64Index where no compat needed with Int64/Float64
         large = [2 ** 63, 2 ** 63 + 10, 2 ** 63 + 15, 2 ** 63 + 20, 2 ** 63 + 25]
         return UInt64Index(large)
 
     def test_join_inner(self, index_large):
+        """
+
+        Parameters
+        ----------
+        index_large :
+            
+
+        Returns
+        -------
+
+        """
         other = UInt64Index(2 ** 63 + np.array([7, 12, 25, 1, 2, 10], dtype="uint64"))
         other_mono = UInt64Index(
             2 ** 63 + np.array([1, 2, 7, 10, 12, 25], dtype="uint64")
@@ -238,6 +258,17 @@
         tm.assert_numpy_array_equal(ridx, eridx)
 
     def test_join_left(self, index_large):
+        """
+
+        Parameters
+        ----------
+        index_large :
+            
+
+        Returns
+        -------
+
+        """
         other = UInt64Index(2 ** 63 + np.array([7, 12, 25, 1, 2, 10], dtype="uint64"))
         other_mono = UInt64Index(
             2 ** 63 + np.array([1, 2, 7, 10, 12, 25], dtype="uint64")
@@ -277,6 +308,17 @@
         tm.assert_numpy_array_equal(ridx, eridx)
 
     def test_join_right(self, index_large):
+        """
+
+        Parameters
+        ----------
+        index_large :
+            
+
+        Returns
+        -------
+
+        """
         other = UInt64Index(2 ** 63 + np.array([7, 12, 25, 1, 2, 10], dtype="uint64"))
         other_mono = UInt64Index(
             2 ** 63 + np.array([1, 2, 7, 10, 12, 25], dtype="uint64")
@@ -319,6 +361,17 @@
         tm.assert_numpy_array_equal(ridx, eridx)
 
     def test_join_non_int_index(self, index_large):
+        """
+
+        Parameters
+        ----------
+        index_large :
+            
+
+        Returns
+        -------
+
+        """
         other = Index(
             2 ** 63 + np.array([1, 5, 7, 10, 20], dtype="uint64"), dtype=object
         )
@@ -350,6 +403,17 @@
         tm.assert_index_equal(right2, index_large.astype(object))
 
     def test_join_outer(self, index_large):
+        """
+
+        Parameters
+        ----------
+        index_large :
+            
+
+        Returns
+        -------
+
+        """
         other = UInt64Index(2 ** 63 + np.array([7, 12, 25, 1, 2, 10], dtype="uint64"))
         other_mono = UInt64Index(
             2 ** 63 + np.array([1, 2, 7, 10, 12, 25], dtype="uint64")
