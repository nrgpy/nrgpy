# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/window/test_rolling.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/window/test_rolling.py
@@ -13,6 +13,7 @@
 
 
 def test_doc_string():
+    """ """
 
     df = DataFrame({"B": [0, 1, 2, np.nan, 4]})
     df
@@ -21,6 +22,17 @@
 
 
 def test_constructor(which):
+    """
+
+    Parameters
+    ----------
+    which :
+        
+
+    Returns
+    -------
+
+    """
     # GH 12669
 
     c = which.rolling
@@ -59,6 +71,17 @@
 
 @td.skip_if_no_scipy
 def test_constructor_with_win_type(which):
+    """
+
+    Parameters
+    ----------
+    which :
+        
+
+    Returns
+    -------
+
+    """
     # GH 13383
     c = which.rolling
 
@@ -70,6 +93,17 @@
 
 @pytest.mark.parametrize("window", [timedelta(days=3), pd.Timedelta(days=3)])
 def test_constructor_with_timedelta_window(window):
+    """
+
+    Parameters
+    ----------
+    window :
+        
+
+    Returns
+    -------
+
+    """
     # GH 15440
     n = 10
     df = DataFrame(
@@ -89,6 +123,19 @@
 
 @pytest.mark.parametrize("window", [timedelta(days=3), pd.Timedelta(days=3), "3D"])
 def test_constructor_timedelta_window_and_minperiods(window, raw):
+    """
+
+    Parameters
+    ----------
+    window :
+        
+    raw :
+        
+
+    Returns
+    -------
+
+    """
     # GH 15305
     n = 10
     df = DataFrame(
@@ -106,6 +153,17 @@
 
 @pytest.mark.parametrize("method", ["std", "mean", "sum", "max", "min", "var"])
 def test_numpy_compat(method):
+    """
+
+    Parameters
+    ----------
+    method :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-12811
     r = Rolling(Series([2, 4, 6]), window=2)
 
@@ -118,6 +176,7 @@
 
 
 def test_closed():
+    """ """
     df = DataFrame({"A": [0, 1, 2, 3, 4]})
     # closed only allowed for datetimelike
 
@@ -129,6 +188,19 @@
 
 @pytest.mark.parametrize("closed", ["neither", "left"])
 def test_closed_empty(closed, arithmetic_win_operators):
+    """
+
+    Parameters
+    ----------
+    closed :
+        
+    arithmetic_win_operators :
+        
+
+    Returns
+    -------
+
+    """
     # GH 26005
     func_name = arithmetic_win_operators
     ser = pd.Series(
@@ -143,6 +215,17 @@
 
 @pytest.mark.parametrize("func", ["min", "max"])
 def test_closed_one_entry(func):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
+    """
     # GH24718
     ser = pd.Series(data=[2], index=pd.date_range("2000", periods=1))
     result = getattr(ser.rolling("10D", closed="left"), func)()
@@ -151,6 +234,17 @@
 
 @pytest.mark.parametrize("func", ["min", "max"])
 def test_closed_one_entry_groupby(func):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
+    """
     # GH24718
     ser = pd.DataFrame(
         data={"A": [1, 1, 2], "B": [3, 2, 1]}, index=pd.date_range("2000", periods=3),
@@ -180,6 +274,23 @@
     ],
 )
 def test_closed_min_max_datetime(input_dtype, func, closed, expected):
+    """
+
+    Parameters
+    ----------
+    input_dtype :
+        
+    func :
+        
+    closed :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-21704
     ser = pd.Series(
         data=np.arange(10).astype(input_dtype), index=pd.date_range("2000", periods=10),
@@ -191,6 +302,7 @@
 
 
 def test_closed_uneven():
+    """ """
     # see gh-21704
     ser = pd.Series(data=np.arange(10), index=pd.date_range("2000", periods=10))
 
@@ -215,6 +327,21 @@
     ],
 )
 def test_closed_min_max_minp(func, closed, expected):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+    closed :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-21704
     ser = pd.Series(data=np.arange(10), index=pd.date_range("2000", periods=10))
     ser[ser.index[-3:]] = np.nan
@@ -233,6 +360,19 @@
     ],
 )
 def test_closed_median_quantile(closed, expected):
+    """
+
+    Parameters
+    ----------
+    closed :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     # GH 26005
     ser = pd.Series(data=np.arange(10), index=pd.date_range("2000", periods=10))
     roll = ser.rolling("3D", closed=closed)
@@ -247,6 +387,17 @@
 
 @pytest.mark.parametrize("roller", ["1s", 1])
 def tests_empty_df_rolling(roller):
+    """
+
+    Parameters
+    ----------
+    roller :
+        
+
+    Returns
+    -------
+
+    """
     # GH 15819 Verifies that datetime and integer rolling windows can be
     # applied to empty DataFrames
     expected = DataFrame()
@@ -261,6 +412,7 @@
 
 
 def test_empty_window_median_quantile():
+    """ """
     # GH 26005
     expected = pd.Series([np.nan, np.nan, np.nan])
     roll = pd.Series(np.arange(3)).rolling(0)
@@ -273,6 +425,7 @@
 
 
 def test_missing_minp_zero():
+    """ """
     # https://github.com/pandas-dev/pandas/pull/18921
     # minp=0
     x = pd.Series([np.nan])
@@ -287,6 +440,7 @@
 
 
 def test_missing_minp_zero_variable():
+    """ """
     # https://github.com/pandas-dev/pandas/pull/18921
     x = pd.Series(
         [np.nan] * 4,
@@ -300,6 +454,7 @@
 
 
 def test_multi_index_names():
+    """ """
 
     # GH 16789, 16825
     cols = pd.MultiIndex.from_product([["A", "B"], ["C", "D", "E"]], names=["1", "2"])
@@ -311,6 +466,17 @@
 
 
 def test_rolling_axis_sum(axis_frame):
+    """
+
+    Parameters
+    ----------
+    axis_frame :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-23372.
     df = DataFrame(np.ones((10, 20)))
     axis = df._get_axis_number(axis_frame)
@@ -326,6 +492,17 @@
 
 
 def test_rolling_axis_count(axis_frame):
+    """
+
+    Parameters
+    ----------
+    axis_frame :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-26055
     df = DataFrame({"x": range(3), "y": range(3)})
 
@@ -341,6 +518,7 @@
 
 
 def test_readonly_array():
+    """ """
     # GH-27766
     arr = np.array([1, 3, np.nan, 3, 5])
     arr.setflags(write=False)
@@ -350,6 +528,19 @@
 
 
 def test_rolling_datetime(axis_frame, tz_naive_fixture):
+    """
+
+    Parameters
+    ----------
+    axis_frame :
+        
+    tz_naive_fixture :
+        
+
+    Returns
+    -------
+
+    """
     # GH-28192
     tz = tz_naive_fixture
     df = pd.DataFrame(
@@ -375,6 +566,7 @@
 
 
 def test_rolling_window_as_string():
+    """ """
     # see gh-22590
     date_today = datetime.now()
     days = pd.date_range(date_today, date_today + timedelta(365), freq="D")
@@ -434,6 +626,7 @@
 
 
 def test_min_periods1():
+    """ """
     # GH#6795
     df = pd.DataFrame([0, 1, 2, 1, 0], columns=["a"])
     result = df["a"].rolling(3, center=True, min_periods=1).max()
@@ -443,6 +636,17 @@
 
 @pytest.mark.parametrize("constructor", [Series, DataFrame])
 def test_rolling_count_with_min_periods(constructor):
+    """
+
+    Parameters
+    ----------
+    constructor :
+        
+
+    Returns
+    -------
+
+    """
     # GH 26996
     result = constructor(range(5)).rolling(3, min_periods=3).count()
     expected = constructor([np.nan, np.nan, 3.0, 3.0, 3.0])
@@ -451,6 +655,17 @@
 
 @pytest.mark.parametrize("constructor", [Series, DataFrame])
 def test_rolling_count_default_min_periods_with_null_values(constructor):
+    """
+
+    Parameters
+    ----------
+    constructor :
+        
+
+    Returns
+    -------
+
+    """
     # GH 26996
     values = [1, 2, 3, np.nan, 4, 5, 6]
     expected_counts = [1.0, 2.0, 3.0, 2.0, 2.0, 2.0, 3.0]
@@ -529,6 +744,23 @@
     ],
 )
 def test_iter_rolling_dataframe(df, expected, window, min_periods):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+    expected :
+        
+    window :
+        
+    min_periods :
+        
+
+    Returns
+    -------
+
+    """
     # GH 11704
     expected = [DataFrame(values, index=index) for (values, index) in expected]
 
@@ -568,6 +800,19 @@
     ],
 )
 def test_iter_rolling_on_dataframe(expected, window):
+    """
+
+    Parameters
+    ----------
+    expected :
+        
+    window :
+        
+
+    Returns
+    -------
+
+    """
     # GH 11704
     df = DataFrame(
         {
@@ -606,6 +851,23 @@
     ],
 )
 def test_iter_rolling_series(ser, expected, window, min_periods):
+    """
+
+    Parameters
+    ----------
+    ser :
+        
+    expected :
+        
+    window :
+        
+    min_periods :
+        
+
+    Returns
+    -------
+
+    """
     # GH 11704
     expected = [Series(values, index=index) for (values, index) in expected]
 
@@ -654,6 +916,21 @@
     ],
 )
 def test_iter_rolling_datetime(expected, expected_index, window):
+    """
+
+    Parameters
+    ----------
+    expected :
+        
+    expected_index :
+        
+    window :
+        
+
+    Returns
+    -------
+
+    """
     # GH 11704
     ser = Series(range(5), index=date_range(start="2020-01-01", periods=5, freq="D"))
 
@@ -683,9 +960,35 @@
     ],
 )
 def test_rolling_positional_argument(grouping, _index, raw):
+    """
+
+    Parameters
+    ----------
+    grouping :
+        
+    _index :
+        
+    raw :
+        
+
+    Returns
+    -------
+
+    """
     # GH 34605
 
     def scaled_sum(*args):
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+
+        Returns
+        -------
+
+        """
         if len(args) < 2:
             raise ValueError("The function needs two arguments")
         array, scale = args
