# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/arrays/boolean/test_logical.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/arrays/boolean/test_logical.py
@@ -10,7 +10,19 @@
 
 
 class TestLogicalOps(BaseOpsUtil):
+    """ """
     def test_numpy_scalars_ok(self, all_logical_operators):
+        """
+
+        Parameters
+        ----------
+        all_logical_operators :
+            
+
+        Returns
+        -------
+
+        """
         a = pd.array([True, False, None], dtype="boolean")
         op = getattr(a, all_logical_operators)
 
@@ -18,6 +30,17 @@
         tm.assert_extension_array_equal(op(False), op(np.bool_(False)))
 
     def get_op_from_name(self, op_name):
+        """
+
+        Parameters
+        ----------
+        op_name :
+            
+
+        Returns
+        -------
+
+        """
         short_opname = op_name.strip("_")
         short_opname = short_opname if "xor" in short_opname else short_opname + "_"
         try:
@@ -30,6 +53,17 @@
         return op
 
     def test_empty_ok(self, all_logical_operators):
+        """
+
+        Parameters
+        ----------
+        all_logical_operators :
+            
+
+        Returns
+        -------
+
+        """
         a = pd.array([], dtype="boolean")
         op_name = all_logical_operators
         result = getattr(a, op_name)(True)
@@ -44,6 +78,17 @@
         # tm.assert_extension_array_equal(a, result)
 
     def test_logical_length_mismatch_raises(self, all_logical_operators):
+        """
+
+        Parameters
+        ----------
+        all_logical_operators :
+            
+
+        Returns
+        -------
+
+        """
         op_name = all_logical_operators
         a = pd.array([True, False, None], dtype="boolean")
         msg = "Lengths must match to compare"
@@ -58,6 +103,17 @@
             getattr(a, op_name)(pd.array([True, False], dtype="boolean"))
 
     def test_logical_nan_raises(self, all_logical_operators):
+        """
+
+        Parameters
+        ----------
+        all_logical_operators :
+            
+
+        Returns
+        -------
+
+        """
         op_name = all_logical_operators
         a = pd.array([True, False, None], dtype="boolean")
         msg = "Got float instead"
@@ -67,11 +123,25 @@
 
     @pytest.mark.parametrize("other", ["a", 1])
     def test_non_bool_or_na_other_raises(self, other, all_logical_operators):
+        """
+
+        Parameters
+        ----------
+        other :
+            
+        all_logical_operators :
+            
+
+        Returns
+        -------
+
+        """
         a = pd.array([True, False], dtype="boolean")
         with pytest.raises(TypeError, match=str(type(other).__name__)):
             getattr(a, all_logical_operators)(other)
 
     def test_kleene_or(self):
+        """ """
         # A clear test of behavior.
         a = pd.array([True] * 3 + [False] * 3 + [None] * 3, dtype="boolean")
         b = pd.array([True, False, None] * 3, dtype="boolean")
@@ -103,6 +173,19 @@
         ],
     )
     def test_kleene_or_scalar(self, other, expected):
+        """
+
+        Parameters
+        ----------
+        other :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # TODO: test True & False
         a = pd.array([True, False, None], dtype="boolean")
         result = a | other
@@ -118,6 +201,7 @@
         )
 
     def test_kleene_and(self):
+        """ """
         # A clear test of behavior.
         a = pd.array([True] * 3 + [False] * 3 + [None] * 3, dtype="boolean")
         b = pd.array([True, False, None] * 3, dtype="boolean")
@@ -149,6 +233,19 @@
         ],
     )
     def test_kleene_and_scalar(self, other, expected):
+        """
+
+        Parameters
+        ----------
+        other :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         a = pd.array([True, False, None], dtype="boolean")
         result = a & other
         expected = pd.array(expected, dtype="boolean")
@@ -163,6 +260,7 @@
         )
 
     def test_kleene_xor(self):
+        """ """
         a = pd.array([True] * 3 + [False] * 3 + [None] * 3, dtype="boolean")
         b = pd.array([True, False, None] * 3, dtype="boolean")
         result = a ^ b
@@ -192,6 +290,19 @@
         ],
     )
     def test_kleene_xor_scalar(self, other, expected):
+        """
+
+        Parameters
+        ----------
+        other :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         a = pd.array([True, False, None], dtype="boolean")
         result = a ^ other
         expected = pd.array(expected, dtype="boolean")
@@ -209,6 +320,19 @@
         "other", [True, False, pd.NA, [True, False, None] * 3],
     )
     def test_no_masked_assumptions(self, other, all_logical_operators):
+        """
+
+        Parameters
+        ----------
+        other :
+            
+        all_logical_operators :
+            
+
+        Returns
+        -------
+
+        """
         # The logical operations should not assume that masked values are False!
         a = pd.arrays.BooleanArray(
             np.array([True, True, True, False, False, False, True, False, True]),
