# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/requests/adapters.py
+++ b/..//venv/lib/python3.8/site-packages/requests/adapters.py
@@ -44,6 +44,19 @@
     from urllib3.contrib.socks import SOCKSProxyManager
 except ImportError:
     def SOCKSProxyManager(*args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         raise InvalidSchema("Missing dependencies for SOCKS support.")
 
 DEFAULT_POOLBLOCK = False
@@ -62,17 +75,28 @@
              cert=None, proxies=None):
         """Sends PreparedRequest object. Returns Response object.
 
-        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.
-        :param stream: (optional) Whether to stream the request content.
-        :param timeout: (optional) How long to wait for the server to send
+        Parameters
+        ----------
+        request :
+            The :class:`PreparedRequest <PreparedRequest>` being sent.
+        stream :
+            optional) Whether to stream the request content. (Default value = False)
+        timeout : float or tuple
+            optional) How long to wait for the server to send
             data before giving up, as a float, or a :ref:`(connect timeout,
-            read timeout) <timeouts>` tuple.
-        :type timeout: float or tuple
-        :param verify: (optional) Either a boolean, in which case it controls whether we verify
+            read timeout) <timeouts>` tuple. (Default value = None)
+        verify :
+            optional) Either a boolean, in which case it controls whether we verify
             the server's TLS certificate, or a string, in which case it must be a path
-            to a CA bundle to use
-        :param cert: (optional) Any user-provided SSL certificate to be trusted.
-        :param proxies: (optional) The proxies dictionary to apply to the request.
+            to a CA bundle to use (Default value = True)
+        cert :
+            optional) Any user-provided SSL certificate to be trusted. (Default value = None)
+        proxies :
+            optional) The proxies dictionary to apply to the request. (Default value = None)
+
+        Returns
+        -------
+
         """
         raise NotImplementedError
 
@@ -83,26 +107,35 @@
 
 class HTTPAdapter(BaseAdapter):
     """The built-in HTTP Adapter for urllib3.
-
+    
     Provides a general-case interface for Requests sessions to contact HTTP and
     HTTPS urls by implementing the Transport Adapter interface. This class will
     usually be created by the :class:`Session <Session>` class under the
     covers.
 
-    :param pool_connections: The number of urllib3 connection pools to cache.
-    :param pool_maxsize: The maximum number of connections to save in the pool.
-    :param max_retries: The maximum number of retries each connection
+    Parameters
+    ----------
+    pool_connections :
+        The number of urllib3 connection pools to cache.
+    pool_maxsize :
+        The maximum number of connections to save in the pool.
+    max_retries :
+        The maximum number of retries each connection
         should attempt. Note, this applies only to failed DNS lookups, socket
         connections and connection timeouts, never to requests where data has
         made it to the server. By default, Requests does not retry failed
         connections. If you need granular control over the conditions under
         which we retry a request, import urllib3's ``Retry`` class and pass
         that instead.
-    :param pool_block: Whether the connection pool should block for connections.
-
-    Usage::
-
-      >>> import requests
+    pool_block :
+        Whether the connection pool should block for connections.
+        
+        Usage::
+
+    Returns
+    -------
+
+    >>> import requests
       >>> s = requests.Session()
       >>> a = requests.adapters.HTTPAdapter(max_retries=3)
       >>> s.mount('http://', a)
@@ -145,15 +178,27 @@
 
     def init_poolmanager(self, connections, maxsize, block=DEFAULT_POOLBLOCK, **pool_kwargs):
         """Initializes a urllib3 PoolManager.
-
+        
         This method should not be called from user code, and is only
         exposed for use when subclassing the
         :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.
 
-        :param connections: The number of urllib3 connection pools to cache.
-        :param maxsize: The maximum number of connections to save in the pool.
-        :param block: Block when no free connections are available.
-        :param pool_kwargs: Extra keyword arguments used to initialize the Pool Manager.
+        Parameters
+        ----------
+        connections :
+            The number of urllib3 connection pools to cache.
+        maxsize :
+            The maximum number of connections to save in the pool.
+        block :
+            Block when no free connections are available. (Default value = DEFAULT_POOLBLOCK)
+        pool_kwargs :
+            Extra keyword arguments used to initialize the Pool Manager.
+        **pool_kwargs :
+            
+
+        Returns
+        -------
+
         """
         # save these values for pickling
         self._pool_connections = connections
@@ -165,15 +210,25 @@
 
     def proxy_manager_for(self, proxy, **proxy_kwargs):
         """Return urllib3 ProxyManager for the given proxy.
-
+        
         This method should not be called from user code, and is only
         exposed for use when subclassing the
         :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.
 
-        :param proxy: The proxy to return a urllib3 ProxyManager for.
-        :param proxy_kwargs: Extra keyword arguments used to configure the Proxy Manager.
-        :returns: ProxyManager
-        :rtype: urllib3.ProxyManager
+        Parameters
+        ----------
+        proxy :
+            The proxy to return a urllib3 ProxyManager for.
+        proxy_kwargs :
+            Extra keyword arguments used to configure the Proxy Manager.
+        **proxy_kwargs :
+            
+
+        Returns
+        -------
+        urllib3.ProxyManager
+            ProxyManager
+
         """
         if proxy in self.proxy_manager:
             manager = self.proxy_manager[proxy]
@@ -205,12 +260,22 @@
         code, and is only exposed for use when subclassing the
         :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.
 
-        :param conn: The urllib3 connection object associated with the cert.
-        :param url: The requested URL.
-        :param verify: Either a boolean, in which case it controls whether we verify
+        Parameters
+        ----------
+        conn :
+            The urllib3 connection object associated with the cert.
+        url :
+            The requested URL.
+        verify :
+            Either a boolean, in which case it controls whether we verify
             the server's TLS certificate, or a string, in which case it must be a path
             to a CA bundle to use
-        :param cert: The SSL certificate to verify.
+        cert :
+            The SSL certificate to verify.
+
+        Returns
+        -------
+
         """
         if url.lower().startswith('https') and verify:
 
@@ -258,9 +323,16 @@
         for use when subclassing the
         :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`
 
-        :param req: The :class:`PreparedRequest <PreparedRequest>` used to generate the response.
-        :param resp: The urllib3 response object.
-        :rtype: requests.Response
+        Parameters
+        ----------
+        req :
+            The :class:`PreparedRequest <PreparedRequest>` used to generate the response.
+        resp :
+            The urllib3 response object.
+
+        Returns
+        -------
+
         """
         response = Response()
 
@@ -294,9 +366,16 @@
         called from user code, and is only exposed for use when subclassing the
         :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.
 
-        :param url: The URL to connect to.
-        :param proxies: (optional) A Requests-style dictionary of proxies used on this request.
-        :rtype: urllib3.ConnectionPool
+        Parameters
+        ----------
+        url :
+            The URL to connect to.
+        proxies :
+            optional) A Requests-style dictionary of proxies used on this request. (Default value = None)
+
+        Returns
+        -------
+
         """
         proxy = select_proxy(url, proxies)
 
@@ -318,9 +397,16 @@
 
     def close(self):
         """Disposes of any internal state.
-
+        
         Currently, this closes the PoolManager and any active ProxyManager,
         which closes any pooled connections.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         self.poolmanager.clear()
         for proxy in self.proxy_manager.values():
@@ -328,17 +414,24 @@
 
     def request_url(self, request, proxies):
         """Obtain the url to use when making the final request.
-
+        
         If the message is being sent through a HTTP proxy, the full URL has to
         be used. Otherwise, we should only use the path portion of the URL.
-
+        
         This should not be called from user code, and is only exposed for use
         when subclassing the
         :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.
 
-        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.
-        :param proxies: A dictionary of schemes or schemes and hosts to proxy URLs.
-        :rtype: str
+        Parameters
+        ----------
+        request :
+            The :class:`PreparedRequest <PreparedRequest>` being sent.
+        proxies :
+            A dictionary of schemes or schemes and hosts to proxy URLs.
+
+        Returns
+        -------
+
         """
         proxy = select_proxy(request.url, proxies)
         scheme = urlparse(request.url).scheme
@@ -359,13 +452,23 @@
         """Add any headers needed by the connection. As of v2.0 this does
         nothing by default, but is left for overriding by users that subclass
         the :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.
-
+        
         This should not be called from user code, and is only exposed for use
         when subclassing the
         :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.
 
-        :param request: The :class:`PreparedRequest <PreparedRequest>` to add headers to.
-        :param kwargs: The keyword arguments from the call to send().
+        Parameters
+        ----------
+        request :
+            The :class:`PreparedRequest <PreparedRequest>` to add headers to.
+        kwargs :
+            The keyword arguments from the call to send().
+        **kwargs :
+            
+
+        Returns
+        -------
+
         """
         pass
 
@@ -374,13 +477,19 @@
         through a proxy. This works with urllib3 magic to ensure that they are
         correctly sent to the proxy, rather than in a tunnelled request if
         CONNECT is being used.
-
+        
         This should not be called from user code, and is only exposed for use
         when subclassing the
         :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.
 
-        :param proxy: The url of the proxy being used for this request.
-        :rtype: dict
+        Parameters
+        ----------
+        proxy :
+            The url of the proxy being used for this request.
+
+        Returns
+        -------
+
         """
         headers = {}
         username, password = get_auth_from_url(proxy)
@@ -394,18 +503,28 @@
     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
         """Sends PreparedRequest object. Returns Response object.
 
-        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.
-        :param stream: (optional) Whether to stream the request content.
-        :param timeout: (optional) How long to wait for the server to send
+        Parameters
+        ----------
+        request :
+            The :class:`PreparedRequest <PreparedRequest>` being sent.
+        stream :
+            optional) Whether to stream the request content. (Default value = False)
+        timeout : float or tuple or urllib3 Timeout object
+            optional) How long to wait for the server to send
             data before giving up, as a float, or a :ref:`(connect timeout,
-            read timeout) <timeouts>` tuple.
-        :type timeout: float or tuple or urllib3 Timeout object
-        :param verify: (optional) Either a boolean, in which case it controls whether
+            read timeout) <timeouts>` tuple. (Default value = None)
+        verify :
+            optional) Either a boolean, in which case it controls whether
             we verify the server's TLS certificate, or a string, in which case it
-            must be a path to a CA bundle to use
-        :param cert: (optional) Any user-provided SSL certificate to be trusted.
-        :param proxies: (optional) The proxies dictionary to apply to the request.
-        :rtype: requests.Response
+            must be a path to a CA bundle to use (Default value = True)
+        cert :
+            optional) Any user-provided SSL certificate to be trusted. (Default value = None)
+        proxies :
+            optional) The proxies dictionary to apply to the request. (Default value = None)
+
+        Returns
+        -------
+
         """
 
         try:
