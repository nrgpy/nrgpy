# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/parso/_compatibility.py
+++ b/..//venv/lib/python3.8/site-packages/parso/_compatibility.py
@@ -16,7 +16,19 @@
 
 
 def use_metaclass(meta, *bases):
-    """ Create a class with a metaclass. """
+    """Create a class with a metaclass.
+
+    Parameters
+    ----------
+    meta :
+        
+    *bases :
+        
+
+    Returns
+    -------
+
+    """
     if not bases:
         bases = (object,)
     return meta("HackClass", bases, {})
@@ -35,6 +47,15 @@
     Written because Python2 repr always implicitly casts to a string, so we
     have to cast back to a unicode (and we know that we always deal with valid
     unicode, because we check that in the beginning).
+
+    Parameters
+    ----------
+    string :
+        
+
+    Returns
+    -------
+
     """
     if sys.version_info.major >= 3:
         return str(string)
@@ -59,11 +80,21 @@
 
 
 def utf8_repr(func):
-    """
-    ``__repr__`` methods in Python 2 don't allow unicode objects to be
-    returned. Therefore cast them to utf-8 bytes in this decorator.
+    """``__repr__`` methods in Python 2 don't allow unicode objects to be
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+    type
+        
+
     """
     def wrapper(self):
+        """ """
         result = func(self)
         if isinstance(result, unicode):
             return result.encode('utf-8')
@@ -82,6 +113,7 @@
     scandir for the information we need.
     """
     class _DirEntry:
+        """ """
 
         def __init__(self, name, basepath):
             self.name = name
@@ -89,13 +121,26 @@
 
         @property
         def path(self):
+            """ """
             return os.path.join(self.basepath, self.name)
 
         def stat(self):
+            """ """
             # won't follow symlinks
             return os.lstat(os.path.join(self.basepath, self.name))
 
     def scandir(dir):
+        """
+
+        Parameters
+        ----------
+        dir :
+            
+
+        Returns
+        -------
+
+        """
         return [_DirEntry(name, dir) for name in os.listdir(dir)]
 else:
     from os import scandir
