# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/computation/align.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/computation/align.py
@@ -21,6 +21,17 @@
 def _align_core_single_unary_op(
     term,
 ) -> Tuple[Union[partial, Type[FrameOrSeries]], Optional[Dict[str, int]]]:
+    """
+
+    Parameters
+    ----------
+    term :
+        
+
+    Returns
+    -------
+
+    """
 
     typ: Union[partial, Type[FrameOrSeries]]
     axes: Optional[Dict[str, int]] = None
@@ -38,20 +49,63 @@
 def _zip_axes_from_type(
     typ: Type[FrameOrSeries], new_axes: Sequence[int]
 ) -> Dict[str, int]:
+    """
+
+    Parameters
+    ----------
+    typ: Type[FrameOrSeries] :
+        
+    new_axes: Sequence[int] :
+        
+
+    Returns
+    -------
+
+    """
     axes = {name: new_axes[i] for i, name in enumerate(typ._AXIS_ORDERS)}
     return axes
 
 
 def _any_pandas_objects(terms) -> bool:
-    """
-    Check a sequence of terms for instances of PandasObject.
+    """Check a sequence of terms for instances of PandasObject.
+
+    Parameters
+    ----------
+    terms :
+        
+
+    Returns
+    -------
+
     """
     return any(isinstance(term.value, PandasObject) for term in terms)
 
 
 def _filter_special_cases(f):
+    """
+
+    Parameters
+    ----------
+    f :
+        
+
+    Returns
+    -------
+
+    """
     @wraps(f)
     def wrapper(terms):
+        """
+
+        Parameters
+        ----------
+        terms :
+            
+
+        Returns
+        -------
+
+        """
         # single unary operand
         if len(terms) == 1:
             return _align_core_single_unary_op(terms[0])
@@ -69,6 +123,17 @@
 
 @_filter_special_cases
 def _align_core(terms):
+    """
+
+    Parameters
+    ----------
+    terms :
+        
+
+    Returns
+    -------
+
+    """
     term_index = [i for i, term in enumerate(terms) if hasattr(term.value, "axes")]
     term_dims = [terms[i].value.ndim for i in term_index]
 
@@ -126,8 +191,16 @@
 
 
 def align_terms(terms):
-    """
-    Align a set of terms.
+    """Align a set of terms.
+
+    Parameters
+    ----------
+    terms :
+        
+
+    Returns
+    -------
+
     """
     try:
         # flatten the parse tree (a nested list, really)
@@ -149,8 +222,7 @@
 
 
 def reconstruct_object(typ, obj, axes, dtype):
-    """
-    Reconstruct an object given its type, raw value, and possibly empty
+    """Reconstruct an object given its type, raw value, and possibly empty
     (None) axes.
 
     Parameters
@@ -161,12 +233,13 @@
         The value to use in the type constructor
     axes : dict
         The axes to use to construct the resulting pandas object
-
-    Returns
-    -------
-    ret : typ
-        An object of type ``typ`` with the value `obj` and possible axes
-        `axes`.
+    dtype :
+        
+
+    Returns
+    -------
+
+    
     """
     try:
         typ = typ.type
