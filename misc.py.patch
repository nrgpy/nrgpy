# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/plotting/_matplotlib/misc.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/plotting/_matplotlib/misc.py
@@ -24,6 +24,37 @@
     range_padding=0.05,
     **kwds,
 ):
+    """
+
+    Parameters
+    ----------
+    frame :
+        
+    alpha :
+         (Default value = 0.5)
+    figsize :
+         (Default value = None)
+    ax :
+         (Default value = None)
+    grid :
+         (Default value = False)
+    diagonal :
+         (Default value = "hist")
+    marker :
+         (Default value = ".")
+    density_kwds :
+         (Default value = None)
+    hist_kwds :
+         (Default value = None)
+    range_padding :
+         (Default value = 0.05)
+    **kwds :
+        
+
+    Returns
+    -------
+
+    """
     df = frame._get_numeric_data()
     n = df.columns.size
     naxes = n * n
@@ -109,15 +140,58 @@
 
 
 def _get_marker_compat(marker):
+    """
+
+    Parameters
+    ----------
+    marker :
+        
+
+    Returns
+    -------
+
+    """
     if marker not in mlines.lineMarkers:
         return "o"
     return marker
 
 
 def radviz(frame, class_column, ax=None, color=None, colormap=None, **kwds):
+    """
+
+    Parameters
+    ----------
+    frame :
+        
+    class_column :
+        
+    ax :
+         (Default value = None)
+    color :
+         (Default value = None)
+    colormap :
+         (Default value = None)
+    **kwds :
+        
+
+    Returns
+    -------
+
+    """
     import matplotlib.pyplot as plt
 
     def normalize(series):
+        """
+
+        Parameters
+        ----------
+        series :
+            
+
+        Returns
+        -------
+
+        """
         a = min(series)
         b = max(series)
         return (series - a) / (b - a)
@@ -199,10 +273,55 @@
 def andrews_curves(
     frame, class_column, ax=None, samples=200, color=None, colormap=None, **kwds
 ):
+    """
+
+    Parameters
+    ----------
+    frame :
+        
+    class_column :
+        
+    ax :
+         (Default value = None)
+    samples :
+         (Default value = 200)
+    color :
+         (Default value = None)
+    colormap :
+         (Default value = None)
+    **kwds :
+        
+
+    Returns
+    -------
+
+    """
     import matplotlib.pyplot as plt
 
     def function(amplitudes):
+        """
+
+        Parameters
+        ----------
+        amplitudes :
+            
+
+        Returns
+        -------
+
+        """
         def f(t):
+            """
+
+            Parameters
+            ----------
+            t :
+                
+
+            Returns
+            -------
+
+            """
             x1 = amplitudes[0]
             result = x1 / np.sqrt(2.0)
 
@@ -257,6 +376,25 @@
 
 
 def bootstrap_plot(series, fig=None, size=50, samples=500, **kwds):
+    """
+
+    Parameters
+    ----------
+    series :
+        
+    fig :
+         (Default value = None)
+    size :
+         (Default value = 50)
+    samples :
+         (Default value = 500)
+    **kwds :
+        
+
+    Returns
+    -------
+
+    """
 
     import matplotlib.pyplot as plt
 
@@ -319,6 +457,39 @@
     sort_labels=False,
     **kwds,
 ):
+    """
+
+    Parameters
+    ----------
+    frame :
+        
+    class_column :
+        
+    cols :
+         (Default value = None)
+    ax :
+         (Default value = None)
+    color :
+         (Default value = None)
+    use_columns :
+         (Default value = False)
+    xticks :
+         (Default value = None)
+    colormap :
+         (Default value = None)
+    axvlines :
+         (Default value = True)
+    axvlines_kwds :
+         (Default value = None)
+    sort_labels :
+         (Default value = False)
+    **kwds :
+        
+
+    Returns
+    -------
+
+    """
     import matplotlib.pyplot as plt
 
     if axvlines_kwds is None:
@@ -386,6 +557,23 @@
 
 
 def lag_plot(series, lag=1, ax=None, **kwds):
+    """
+
+    Parameters
+    ----------
+    series :
+        
+    lag :
+         (Default value = 1)
+    ax :
+         (Default value = None)
+    **kwds :
+        
+
+    Returns
+    -------
+
+    """
     # workaround because `c='b'` is hardcoded in matplotlib's scatter method
     import matplotlib.pyplot as plt
 
@@ -403,6 +591,21 @@
 
 
 def autocorrelation_plot(series, ax=None, **kwds):
+    """
+
+    Parameters
+    ----------
+    series :
+        
+    ax :
+         (Default value = None)
+    **kwds :
+        
+
+    Returns
+    -------
+
+    """
     import matplotlib.pyplot as plt
 
     n = len(series)
@@ -413,6 +616,17 @@
     c0 = np.sum((data - mean) ** 2) / float(n)
 
     def r(h):
+        """
+
+        Parameters
+        ----------
+        h :
+            
+
+        Returns
+        -------
+
+        """
         return ((data[: n - h] - mean) * (data[h:] - mean)).sum() / float(n) / c0
 
     x = np.arange(n) + 1
