# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/plotting/_misc.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/plotting/_misc.py
@@ -4,22 +4,27 @@
 
 
 def table(ax, data, rowLabels=None, colLabels=None, **kwargs):
-    """
-    Helper function to convert DataFrame and Series to matplotlib.table.
+    """Helper function to convert DataFrame and Series to matplotlib.table.
 
     Parameters
     ----------
     ax : Matplotlib axes object
+        
     data : DataFrame or Series
         Data for table contents.
-    **kwargs
+    **kwargs :
         Keyword arguments to be passed to matplotlib.table.table.
         If `rowLabels` or `colLabels` is not specified, data index or column
         name will be used.
-
-    Returns
-    -------
-    matplotlib table object
+    rowLabels :
+         (Default value = None)
+    colLabels :
+         (Default value = None)
+
+    Returns
+    -------
+
+    
     """
     plot_backend = _get_plot_backend("matplotlib")
     return plot_backend.table(
@@ -28,12 +33,11 @@
 
 
 def register():
-    """
-    Register pandas formatters and converters with matplotlib.
-
+    """Register pandas formatters and converters with matplotlib.
+    
     This function modifies the global ``matplotlib.units.registry``
     dictionary. pandas adds custom converters for
-
+    
     * pd.Timestamp
     * pd.Period
     * np.datetime64
@@ -41,6 +45,12 @@
     * datetime.date
     * datetime.time
 
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     See Also
     --------
     deregister_matplotlib_converters : Remove pandas formatters and converters.
@@ -50,15 +60,20 @@
 
 
 def deregister():
-    """
-    Remove pandas formatters and converters.
-
+    """Remove pandas formatters and converters.
+    
     Removes the custom converters added by :func:`register`. This
     attempts to set the state of the registry back to the state before
     pandas registered its own units. Converters for pandas' own types like
     Timestamp and Period are removed completely. Converters for types
     pandas overwrites, like ``datetime.datetime``, are restored to their
     original value.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     See Also
     --------
@@ -82,32 +97,33 @@
     range_padding=0.05,
     **kwargs,
 ):
-    """
-    Draw a matrix of scatter plots.
+    """Draw a matrix of scatter plots.
 
     Parameters
     ----------
     frame : DataFrame
+        
     alpha : float, optional
-        Amount of transparency applied.
+        Amount of transparency applied. (Default value = 0.5)
     figsize : (float,float), optional
-        A tuple (width, height) in inches.
+        A tuple (width, height) in inches. (Default value = None)
     ax : Matplotlib axis object, optional
+         (Default value = None)
     grid : bool, optional
-        Setting this to True will show the grid.
+        Setting this to True will show the grid. (Default value = False)
     diagonal : {'hist', 'kde'}
         Pick between 'kde' and 'hist' for either Kernel Density Estimation or
-        Histogram plot in the diagonal.
+        Histogram plot in the diagonal. (Default value = "hist")
     marker : str, optional
         Matplotlib marker type, default '.'.
     density_kwds : keywords
-        Keyword arguments to be passed to kernel density estimate plot.
+        Keyword arguments to be passed to kernel density estimate plot. (Default value = None)
     hist_kwds : keywords
-        Keyword arguments to be passed to hist function.
+        Keyword arguments to be passed to hist function. (Default value = None)
     range_padding : float, default 0.05
         Relative extension of axis range in x and y with respect to
-        (x_max - x_min) or (y_max - y_min).
-    **kwargs
+        (x_max - x_min) or (y_max - y_min). (Default value = 0.05)
+    **kwargs :
         Keyword arguments to be passed to scatter function.
 
     Returns
@@ -117,11 +133,10 @@
 
     Examples
     --------
-
-    .. plot::
-        :context: close-figs
-
-        >>> df = pd.DataFrame(np.random.randn(1000, 4), columns=['A','B','C','D'])
+    
+    .. plot::
+        :context: close-figs
+    >>> df = pd.DataFrame(np.random.randn(1000, 4), columns=['A','B','C','D'])
         >>> pd.plotting.scatter_matrix(df, alpha=0.2)
     """
     plot_backend = _get_plot_backend("matplotlib")
@@ -141,18 +156,17 @@
 
 
 def radviz(frame, class_column, ax=None, color=None, colormap=None, **kwds):
-    """
-    Plot a multidimensional dataset in 2D.
-
+    """Plot a multidimensional dataset in 2D.
+    
     Each Series in the DataFrame is represented as a evenly distributed
     slice on a circle. Each data point is rendered in the circle according to
     the value on each Series. Highly correlated `Series` in the `DataFrame`
     are placed closer on the unit circle.
-
+    
     RadViz allow to project a N-dimensional data set into a 2D space where the
     influence of each dimension can be interpreted as a balance between the
     influence of all dimensions.
-
+    
     More info available at the `original article
     <https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.135.889>`_
     describing RadViz.
@@ -164,30 +178,29 @@
     class_column : str
         Column name containing the name of the data point category.
     ax : :class:`matplotlib.axes.Axes`, optional
-        A plot instance to which to add the information.
+        A plot instance to which to add the information. (Default value = None)
     color : list[str] or tuple[str], optional
-        Assign a color to each category. Example: ['blue', 'green'].
+        Assign a color to each category. Example: ['blue', 'green']. (Default value = None)
     colormap : str or :class:`matplotlib.colors.Colormap`, default None
         Colormap to select colors from. If string, load colormap with that
-        name from matplotlib.
-    **kwds
+        name from matplotlib. (Default value = None)
+    **kwds :
         Options to pass to matplotlib scatter plotting method.
 
     Returns
     -------
-    class:`matplotlib.axes.Axes`
+    class : `matplotlib.axes.Axes`
+        
 
     See Also
     --------
     plotting.andrews_curves : Plot clustering visualization.
-
-    Examples
-    --------
-
-    .. plot::
-        :context: close-figs
-
-        >>> df = pd.DataFrame(
+    Examples
+    --------
+    
+    .. plot::
+        :context: close-figs
+    >>> df = pd.DataFrame(
         ...     {
         ...         'SepalLength': [6.5, 7.7, 5.1, 5.8, 7.6, 5.0, 5.4, 4.6, 6.7, 4.6],
         ...         'SepalWidth': [3.0, 3.8, 3.8, 2.7, 3.0, 2.3, 3.0, 3.2, 3.3, 3.6],
@@ -223,15 +236,14 @@
 def andrews_curves(
     frame, class_column, ax=None, samples=200, color=None, colormap=None, **kwargs
 ):
-    """
-    Generate a matplotlib plot of Andrews curves, for visualising clusters of
+    """Generate a matplotlib plot of Andrews curves, for visualising clusters of
     multivariate data.
-
+    
     Andrews curves have the functional form:
-
+    
     f(t) = x_1/sqrt(2) + x_2 sin(t) + x_3 cos(t) +
            x_4 sin(2t) + x_5 cos(2t) + ...
-
+    
     Where x coefficients correspond to the values of each dimension and t is
     linearly spaced between -pi and +pi. Each row of frame then corresponds to
     a single curve.
@@ -241,27 +253,30 @@
     frame : DataFrame
         Data to be plotted, preferably normalized to (0.0, 1.0).
     class_column : Name of the column containing class names
+        
     ax : matplotlib axes object, default None
+         (Default value = None)
     samples : Number of points to plot in each curve
+         (Default value = 200)
     color : list or tuple, optional
-        Colors to use for the different classes.
+        Colors to use for the different classes. (Default value = None)
     colormap : str or matplotlib colormap object, default None
         Colormap to select colors from. If string, load colormap with that name
-        from matplotlib.
-    **kwargs
+        from matplotlib. (Default value = None)
+    **kwargs :
         Options to pass to matplotlib plotting method.
 
     Returns
     -------
-    class:`matplotlip.axis.Axes`
-
-    Examples
-    --------
-
-    .. plot::
-        :context: close-figs
-
-        >>> df = pd.read_csv(
+    class : `matplotlip.axis.Axes`
+        
+
+    Examples
+    --------
+    
+    .. plot::
+        :context: close-figs
+    >>> df = pd.read_csv(
         ...     'https://raw.github.com/pandas-dev/'
         ...     'pandas/master/pandas/tests/io/data/csv/iris.csv'
         ... )
@@ -280,14 +295,13 @@
 
 
 def bootstrap_plot(series, fig=None, size=50, samples=500, **kwds):
-    """
-    Bootstrap plot on mean, median and mid-range statistics.
-
+    """Bootstrap plot on mean, median and mid-range statistics.
+    
     The bootstrap plot is used to estimate the uncertainty of a statistic
     by relaying on random sampling with replacement [1]_. This function will
     generate bootstrapping plots for mean, median and mid-range statistics
     for the given number of samples of the given size.
-
+    
     .. [1] "Bootstrapping (statistics)" in \
     https://en.wikipedia.org/wiki/Bootstrapping_%28statistics%29
 
@@ -300,10 +314,10 @@
         creating a new one with default parameters.
     size : int, default 50
         Number of data points to consider during each sampling. It must be
-        less than or equal to the length of the `series`.
+        less than or equal to the length of the `series`. (Default value = 50)
     samples : int, default 500
-        Number of times the bootstrap procedure is performed.
-    **kwds
+        Number of times the bootstrap procedure is performed. (Default value = 500)
+    **kwds :
         Options to pass to matplotlib plotting method.
 
     Returns
@@ -315,15 +329,13 @@
     --------
     DataFrame.plot : Basic plotting for DataFrame objects.
     Series.plot : Basic plotting for Series objects.
-
     Examples
     --------
     This example draws a basic bootstap plot for a Series.
-
-    .. plot::
-        :context: close-figs
-
-        >>> s = pd.Series(np.random.uniform(size=100))
+    
+    .. plot::
+        :context: close-figs
+    >>> s = pd.Series(np.random.uniform(size=100))
         >>> pd.plotting.bootstrap_plot(s)
     """
     plot_backend = _get_plot_backend("matplotlib")
@@ -346,46 +358,46 @@
     sort_labels=False,
     **kwargs,
 ):
-    """
-    Parallel coordinates plotting.
+    """Parallel coordinates plotting.
 
     Parameters
     ----------
     frame : DataFrame
+        
     class_column : str
         Column name containing class names.
     cols : list, optional
-        A list of column names to use.
+        A list of column names to use. (Default value = None)
     ax : matplotlib.axis, optional
-        Matplotlib axis object.
+        Matplotlib axis object. (Default value = None)
     color : list or tuple, optional
-        Colors to use for the different classes.
+        Colors to use for the different classes. (Default value = None)
     use_columns : bool, optional
-        If true, columns will be used as xticks.
+        If true, columns will be used as xticks. (Default value = False)
     xticks : list or tuple, optional
-        A list of values to use for xticks.
+        A list of values to use for xticks. (Default value = None)
     colormap : str or matplotlib colormap, default None
-        Colormap to use for line colors.
+        Colormap to use for line colors. (Default value = None)
     axvlines : bool, optional
-        If true, vertical lines will be added at each xtick.
+        If true, vertical lines will be added at each xtick. (Default value = True)
     axvlines_kwds : keywords, optional
-        Options to be passed to axvline method for vertical lines.
+        Options to be passed to axvline method for vertical lines. (Default value = None)
     sort_labels : bool, default False
-        Sort class_column labels, useful when assigning colors.
-    **kwargs
+        Sort class_column labels, useful when assigning colors. (Default value = False)
+    **kwargs :
         Options to pass to matplotlib plotting method.
 
     Returns
     -------
-    class:`matplotlib.axis.Axes`
-
-    Examples
-    --------
-
-    .. plot::
-        :context: close-figs
-
-        >>> df = pd.read_csv(
+    class : `matplotlib.axis.Axes`
+        
+
+    Examples
+    --------
+    
+    .. plot::
+        :context: close-figs
+    >>> df = pd.read_csv(
         ...     'https://raw.github.com/pandas-dev/'
         ...     'pandas/master/pandas/tests/io/data/csv/iris.csv'
         ... )
@@ -411,41 +423,44 @@
 
 
 def lag_plot(series, lag=1, ax=None, **kwds):
-    """
-    Lag plot for time series.
+    """Lag plot for time series.
 
     Parameters
     ----------
     series : Time series
+        
     lag : lag of the scatter plot, default 1
+         (Default value = 1)
     ax : Matplotlib axis object, optional
-    **kwds
+         (Default value = None)
+    **kwds :
         Matplotlib scatter method keyword arguments.
 
     Returns
     -------
-    class:`matplotlib.axis.Axes`
-
-    Examples
-    --------
-
+    class : `matplotlib.axis.Axes`
+        
+
+    Examples
+    --------
+    
     Lag plots are most commonly used to look for patterns in time series data.
-
+    
     Given the following time series
-
-    .. plot::
-        :context: close-figs
-
-        >>> np.random.seed(5)
+    
+    .. plot::
+        :context: close-figs
+    
+    
+    A lag plot with ``lag=1`` returns
+    
+    .. plot::
+        :context: close-figs
+    >>> np.random.seed(5)
         >>> x = np.cumsum(np.random.normal(loc=1, scale=5, size=50))
         >>> s = pd.Series(x)
         >>> s.plot()
-
-    A lag plot with ``lag=1`` returns
-
-    .. plot::
-        :context: close-figs
-
+    
         >>> pd.plotting.lag_plot(s, lag=1)
     """
     plot_backend = _get_plot_backend("matplotlib")
@@ -453,31 +468,32 @@
 
 
 def autocorrelation_plot(series, ax=None, **kwargs):
-    """
-    Autocorrelation plot for time series.
+    """Autocorrelation plot for time series.
 
     Parameters
     ----------
     series : Time series
+        
     ax : Matplotlib axis object, optional
-    **kwargs
+         (Default value = None)
+    **kwargs :
         Options to pass to matplotlib plotting method.
 
     Returns
     -------
-    class:`matplotlib.axis.Axes`
-
-    Examples
-    --------
-
+    class : `matplotlib.axis.Axes`
+        
+
+    Examples
+    --------
+    
     The horizontal lines in the plot correspond to 95% and 99% confidence bands.
-
+    
     The dashed line is 99% confidence band.
-
-    .. plot::
-        :context: close-figs
-
-        >>> spacing = np.linspace(-9 * np.pi, 9 * np.pi, num=1000)
+    
+    .. plot::
+        :context: close-figs
+    >>> spacing = np.linspace(-9 * np.pi, 9 * np.pi, num=1000)
         >>> s = pd.Series(0.7 * np.random.rand(1000) + 0.3 * np.sin(spacing))
         >>> pd.plotting.autocorrelation_plot(s)
     """
@@ -486,12 +502,18 @@
 
 
 class _Options(dict):
-    """
-    Stores pandas plotting options.
-
+    """Stores pandas plotting options.
+    
     Allows for parameter aliasing so you can just use parameter names that are
     the same as the plot function parameters, but is stored in a canonical
     format that makes it easy to breakdown into groups later.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     # alias so the names are same as plotting method parameter names
@@ -523,23 +545,38 @@
         return super().__contains__(key)
 
     def reset(self):
+        """Reset the option store to its initial state"""
+        self.__init__()
+
+    def _get_canonical_key(self, key):
         """
-        Reset the option store to its initial state
+
+        Parameters
+        ----------
+        key :
+            
 
         Returns
         -------
-        None
+
         """
-        self.__init__()
-
-    def _get_canonical_key(self, key):
         return self._ALIASES.get(key, key)
 
     @contextmanager
     def use(self, key, value):
-        """
-        Temporarily set a parameter value using the with statement.
+        """Temporarily set a parameter value using the with statement.
         Aliasing allowed.
+
+        Parameters
+        ----------
+        key :
+            
+        value :
+            
+
+        Returns
+        -------
+
         """
         old_value = self[key]
         try:
