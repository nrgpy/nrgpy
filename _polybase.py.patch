# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/polynomial/_polybase.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/polynomial/_polybase.py
@@ -16,11 +16,11 @@
 
 class ABCPolyBase(abc.ABC):
     """An abstract base class for immutable series classes.
-
+    
     ABCPolyBase provides the standard Python numerical methods
     '+', '-', '*', '//', '%', 'divmod', '**', and '()' along with the
     methods listed below.
-
+    
     .. versionadded:: 1.9.0
 
     Parameters
@@ -37,6 +37,9 @@
         Window, see domain for its use. The default value is the
         derived class window.
 
+    Returns
+    -------
+
     Attributes
     ----------
     coef : (N,) ndarray
@@ -45,7 +48,7 @@
         Domain that is mapped to window.
     window : (2,) ndarray
         Window that domain is mapped to.
-
+    
     Class Attributes
     ----------------
     maxpower : int
@@ -55,7 +58,6 @@
         Default domain of the class.
     window : (2,) ndarray
         Default window of the class.
-
     """
 
     # Not hashable
@@ -70,86 +72,258 @@
     @property
     @abc.abstractmethod
     def domain(self):
+        """ """
         pass
 
     @property
     @abc.abstractmethod
     def window(self):
+        """ """
         pass
 
     @property
     @abc.abstractmethod
     def nickname(self):
+        """ """
         pass
 
     @property
     @abc.abstractmethod
     def basis_name(self):
+        """ """
         pass
 
     @staticmethod
     @abc.abstractmethod
     def _add(c1, c2):
+        """
+
+        Parameters
+        ----------
+        c1 :
+            
+        c2 :
+            
+
+        Returns
+        -------
+
+        """
         pass
 
     @staticmethod
     @abc.abstractmethod
     def _sub(c1, c2):
+        """
+
+        Parameters
+        ----------
+        c1 :
+            
+        c2 :
+            
+
+        Returns
+        -------
+
+        """
         pass
 
     @staticmethod
     @abc.abstractmethod
     def _mul(c1, c2):
+        """
+
+        Parameters
+        ----------
+        c1 :
+            
+        c2 :
+            
+
+        Returns
+        -------
+
+        """
         pass
 
     @staticmethod
     @abc.abstractmethod
     def _div(c1, c2):
+        """
+
+        Parameters
+        ----------
+        c1 :
+            
+        c2 :
+            
+
+        Returns
+        -------
+
+        """
         pass
 
     @staticmethod
     @abc.abstractmethod
     def _pow(c, pow, maxpower=None):
+        """
+
+        Parameters
+        ----------
+        c :
+            
+        pow :
+            
+        maxpower :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         pass
 
     @staticmethod
     @abc.abstractmethod
     def _val(x, c):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+        c :
+            
+
+        Returns
+        -------
+
+        """
         pass
 
     @staticmethod
     @abc.abstractmethod
     def _int(c, m, k, lbnd, scl):
+        """
+
+        Parameters
+        ----------
+        c :
+            
+        m :
+            
+        k :
+            
+        lbnd :
+            
+        scl :
+            
+
+        Returns
+        -------
+
+        """
         pass
 
     @staticmethod
     @abc.abstractmethod
     def _der(c, m, scl):
+        """
+
+        Parameters
+        ----------
+        c :
+            
+        m :
+            
+        scl :
+            
+
+        Returns
+        -------
+
+        """
         pass
 
     @staticmethod
     @abc.abstractmethod
     def _fit(x, y, deg, rcond, full):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+        y :
+            
+        deg :
+            
+        rcond :
+            
+        full :
+            
+
+        Returns
+        -------
+
+        """
         pass
 
     @staticmethod
     @abc.abstractmethod
     def _line(off, scl):
+        """
+
+        Parameters
+        ----------
+        off :
+            
+        scl :
+            
+
+        Returns
+        -------
+
+        """
         pass
 
     @staticmethod
     @abc.abstractmethod
     def _roots(c):
+        """
+
+        Parameters
+        ----------
+        c :
+            
+
+        Returns
+        -------
+
+        """
         pass
 
     @staticmethod
     @abc.abstractmethod
     def _fromroots(r):
+        """
+
+        Parameters
+        ----------
+        r :
+            
+
+        Returns
+        -------
+
+        """
         pass
 
     def has_samecoef(self, other):
         """Check if coefficients match.
-
+        
         .. versionadded:: 1.6.0
 
         Parameters
@@ -159,9 +333,8 @@
 
         Returns
         -------
-        bool : boolean
-            True if the coefficients are the same, False otherwise.
-
+
+        
         """
         if len(self.coef) != len(other.coef):
             return False
@@ -172,7 +345,7 @@
 
     def has_samedomain(self, other):
         """Check if domains match.
-
+        
         .. versionadded:: 1.6.0
 
         Parameters
@@ -182,15 +355,14 @@
 
         Returns
         -------
-        bool : boolean
-            True if the domains are the same, False otherwise.
-
+
+        
         """
         return np.all(self.domain == other.domain)
 
     def has_samewindow(self, other):
         """Check if windows match.
-
+        
         .. versionadded:: 1.6.0
 
         Parameters
@@ -200,15 +372,14 @@
 
         Returns
         -------
-        bool : boolean
-            True if the windows are the same, False otherwise.
-
+
+        
         """
         return np.all(self.window == other.window)
 
     def has_sametype(self, other):
         """Check if types match.
-
+        
         .. versionadded:: 1.7.0
 
         Parameters
@@ -218,19 +389,18 @@
 
         Returns
         -------
-        bool : boolean
-            True if other is same class as self
-
+
+        
         """
         return isinstance(other, self.__class__)
 
     def _get_coefficients(self, other):
         """Interpret other as polynomial coefficients.
-
+        
         The `other` argument is checked to see if it is of the same
         class as self with identical domain and window. If so,
         return its coefficients, otherwise return `other`.
-
+        
         .. versionadded:: 1.9.0
 
         Parameters
@@ -244,11 +414,7 @@
             The coefficients of`other` if it is a compatible instance,
             of ABCPolyBase, otherwise `other`.
 
-        Raises
-        ------
-        TypeError
-            When `other` is an incompatible instance of ABCPolyBase.
-
+        
         """
         if isinstance(other, ABCPolyBase):
             if not isinstance(other, self.__class__):
@@ -290,6 +456,21 @@
 
     @classmethod
     def _repr_latex_term(cls, i, arg_str, needs_parens):
+        """
+
+        Parameters
+        ----------
+        i :
+            
+        arg_str :
+            
+        needs_parens :
+            
+
+        Returns
+        -------
+
+        """
         if cls.basis_name is None:
             raise NotImplementedError(
                 "Subclasses must define either a basis name, or override "
@@ -299,11 +480,23 @@
 
     @staticmethod
     def _repr_latex_scalar(x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         # TODO: we're stuck with disabling math formatting until we handle
         # exponents in this function
         return r'\text{{{}}}'.format(x)
 
     def _repr_latex_(self):
+        """ """
         # get the scaled argument string to the basis functions
         off, scale = self.mapparms()
         if off == 0 and scale == 1:
@@ -524,38 +717,33 @@
     #
 
     def copy(self):
-        """Return a copy.
-
-        Returns
-        -------
-        new_series : series
-            Copy of self.
-
-        """
+        """Return a copy."""
         return self.__class__(self.coef, self.domain, self.window)
 
     def degree(self):
         """The degree of the series.
-
+        
         .. versionadded:: 1.5.0
 
-        Returns
-        -------
-        degree : int
-            Degree of the series, one less than the number of coefficients.
-
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        
         """
         return len(self) - 1
 
     def cutdeg(self, deg):
         """Truncate series to the given degree.
-
+        
         Reduce the degree of the series to `deg` by discarding the
         high order terms. If `deg` is greater than the current degree a
         copy of the current series is returned. This can be useful in least
         squares where the coefficients of the high degree terms may be very
         small.
-
+        
         .. versionadded:: 1.5.0
 
         Parameters
@@ -566,15 +754,14 @@
 
         Returns
         -------
-        new_series : series
-            New instance of series with reduced degree.
-
+
+        
         """
         return self.truncate(deg + 1)
 
     def trim(self, tol=0):
         """Remove trailing coefficients
-
+        
         Remove trailing coefficients until a coefficient is reached whose
         absolute value greater than `tol` or the beginning of the series is
         reached. If all the coefficients would be removed the series is set
@@ -584,20 +771,19 @@
         Parameters
         ----------
         tol : non-negative number.
-            All trailing coefficients less than `tol` will be removed.
-
-        Returns
-        -------
-        new_series : series
-            Contains the new set of coefficients.
-
+            All trailing coefficients less than `tol` will be removed. (Default value = 0)
+
+        Returns
+        -------
+
+        
         """
         coef = pu.trimcoef(self.coef, tol)
         return self.__class__(coef, self.domain, self.window)
 
     def truncate(self, size):
         """Truncate series to length `size`.
-
+        
         Reduce the series to length `size` by discarding the high
         degree terms. The value of `size` must be a positive integer. This
         can be useful in least squares where the coefficients of the
@@ -611,9 +797,8 @@
 
         Returns
         -------
-        new_series : series
-            New instance of series with truncated coefficients.
-
+
+        
         """
         isize = int(size)
         if isize != size or isize < 1:
@@ -635,7 +820,7 @@
         kind : class, optional
             The polynomial series type class to which the current instance
             should be converted. If kind is None, then the class of the
-            current instance is used.
+            current instance is used. (Default value = None)
         window : array_like, optional
             The window of the converted series. If the value is None,
             the default window of `kind` is used.
@@ -651,10 +836,8 @@
         -----
         Conversion between domains and class types can result in
         numerically ill defined series.
-
         Examples
         --------
-
         """
         if kind is None:
             kind = self.__class__
@@ -666,7 +849,7 @@
 
     def mapparms(self):
         """Return the mapping parameters.
-
+        
         The returned values define a linear map ``off + scl*x`` that is
         applied to the input arguments before the series is evaluated. The
         map depends on the ``domain`` and ``window``; if the current
@@ -676,6 +859,9 @@
         must be substituted for the ``x`` in the standard representation of
         the base polynomials.
 
+        Parameters
+        ----------
+
         Returns
         -------
         off, scl : float or complex
@@ -686,37 +872,34 @@
         If the current domain is the interval ``[l1, r1]`` and the window
         is ``[l2, r2]``, then the linear mapping function ``L`` is
         defined by the equations::
-
+        
             L(l1) = l2
             L(r1) = r2
-
         """
         return pu.mapparms(self.domain, self.window)
 
     def integ(self, m=1, k=[], lbnd=None):
         """Integrate.
-
+        
         Return a series instance that is the definite integral of the
         current series.
 
         Parameters
         ----------
         m : non-negative int
-            The number of integrations to perform.
+            The number of integrations to perform. (Default value = 1)
         k : array_like
             Integration constants. The first constant is applied to the
             first integration, the second to the second, and so on. The
             list of values must less than or equal to `m` in length and any
-            missing values are set to zero.
+            missing values are set to zero. (Default value = [])
         lbnd : Scalar
-            The lower bound of the definite integral.
-
-        Returns
-        -------
-        new_series : series
-            A new series representing the integral. The domain is the same
-            as the domain of the integrated series.
-
+            The lower bound of the definite integral. (Default value = None)
+
+        Returns
+        -------
+
+        
         """
         off, scl = self.mapparms()
         if lbnd is None:
@@ -728,21 +911,19 @@
 
     def deriv(self, m=1):
         """Differentiate.
-
+        
         Return a series instance of that is the derivative of the current
         series.
 
         Parameters
         ----------
         m : non-negative int
-            Find the derivative of order `m`.
-
-        Returns
-        -------
-        new_series : series
-            A new series representing the derivative. The domain is the same
-            as the domain of the differentiated series.
-
+            Find the derivative of order `m`. (Default value = 1)
+
+        Returns
+        -------
+
+        
         """
         off, scl = self.mapparms()
         coef = self._der(self.coef, m, scl)
@@ -750,27 +931,29 @@
 
     def roots(self):
         """Return the roots of the series polynomial.
-
+        
         Compute the roots for the series. Note that the accuracy of the
         roots decrease the further outside the domain they lie.
 
-        Returns
-        -------
-        roots : ndarray
-            Array containing the roots of the series.
-
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        
         """
         roots = self._roots(self.coef)
         return pu.mapdomain(roots, self.window, self.domain)
 
     def linspace(self, n=100, domain=None):
         """Return x, y values at equally spaced points in domain.
-
+        
         Returns the x, y values at `n` linearly spaced points across the
         domain.  Here y is the value of the polynomial at the points x. By
         default the domain is the same as that of the series instance.
         This method is intended mostly as a plotting aid.
-
+        
         .. versionadded:: 1.5.0
 
         Parameters
@@ -784,10 +967,8 @@
 
         Returns
         -------
-        x, y : ndarray
-            x is equal to linspace(self.domain[0], self.domain[1], n) and
-            y is the series evaluated at element of x.
-
+
+        
         """
         if domain is None:
             domain = self.domain
@@ -799,7 +980,7 @@
     def fit(cls, x, y, deg, domain=None, rcond=None, full=False, w=None,
         window=None):
         """Least squares fit to data.
-
+        
         Return a series instance that is the least squares fit to the data
         `y` sampled at `x`. The domain of the returned instance can be
         specified and this will often result in a superior fit with less
@@ -841,32 +1022,16 @@
             weights are chosen so that the errors of the products
             ``w[i]*y[i]`` all have the same variance.  The default value is
             None.
-
             .. versionadded:: 1.5.0
         window : {[beg, end]}, optional
             Window to use for the returned series. The default
             value is the default class domain
-
             .. versionadded:: 1.6.0
 
         Returns
         -------
-        new_series : series
-            A series that represents the least squares fit to the data and
-            has the domain and window specified in the call. If the
-            coefficients for the unscaled and unshifted basis polynomials are
-            of interest, do ``new_series.convert().coef``.
-
-        [resid, rank, sv, rcond] : list
-            These values are only returned if `full` = True
-
-            resid -- sum of squared residuals of the least squares fit
-            rank -- the numerical rank of the scaled Vandermonde matrix
-            sv -- singular values of the scaled Vandermonde matrix
-            rcond -- value of `rcond`.
-
-            For more details, see `linalg.lstsq`.
-
+
+        
         """
         if domain is None:
             domain = pu.getdomain(x)
@@ -888,7 +1053,7 @@
     @classmethod
     def fromroots(cls, roots, domain=[], window=None):
         """Return series instance that has the specified roots.
-
+        
         Returns a series representing the product
         ``(x - r[0])*(x - r[1])*...*(x - r[n-1])``, where ``r`` is a
         list of roots.
@@ -907,9 +1072,8 @@
 
         Returns
         -------
-        new_series : series
-            Series with the specified roots.
-
+
+        
         """
         [roots] = pu.as_series([roots], trim=False)
         if domain is None:
@@ -929,7 +1093,7 @@
     @classmethod
     def identity(cls, domain=None, window=None):
         """Identity function.
-
+        
         If ``p`` is the returned series, then ``p(x) == x`` for all
         values of x.
 
@@ -947,9 +1111,8 @@
 
         Returns
         -------
-        new_series : series
-             Series of representing the identity.
-
+
+        
         """
         if domain is None:
             domain = cls.domain
@@ -962,9 +1125,9 @@
     @classmethod
     def basis(cls, deg, domain=None, window=None):
         """Series basis polynomial of degree `deg`.
-
+        
         Returns the series representing the basis polynomial of degree `deg`.
-
+        
         .. versionadded:: 1.7.0
 
         Parameters
@@ -983,10 +1146,8 @@
 
         Returns
         -------
-        new_series : series
-            A series with the coefficient of the `deg` term set to one and
-            all others zero.
-
+
+        
         """
         if domain is None:
             domain = cls.domain
@@ -1001,12 +1162,12 @@
     @classmethod
     def cast(cls, series, domain=None, window=None):
         """Convert series to series of this class.
-
+        
         The `series` is expected to be an instance of some polynomial
         series of one of the types supported by by the numpy.polynomial
         module, but could be some other class that supports the convert
         method.
-
+        
         .. versionadded:: 1.7.0
 
         Parameters
@@ -1032,7 +1193,6 @@
         See Also
         --------
         convert : similar instance method
-
         """
         if domain is None:
             domain = cls.domain
