# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pygments/formatter.py
+++ b/..//venv/lib/python3.8/site-packages/pygments/formatter.py
@@ -18,17 +18,27 @@
 
 
 def _lookup_style(style):
+    """
+
+    Parameters
+    ----------
+    style :
+        
+
+    Returns
+    -------
+
+    """
     if isinstance(style, str):
         return get_style_by_name(style)
     return style
 
 
 class Formatter:
-    """
-    Converts a token stream to text.
-
+    """Converts a token stream to text.
+    
     Options accepted:
-
+    
     ``style``
         The style to use, can be a string or a Style subclass
         (default: "default"). Not used by e.g. the
@@ -48,6 +58,13 @@
         support (default: None).
     ``outencoding``
         Overrides ``encoding`` if given.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     #: Name of the formatter
@@ -76,18 +93,36 @@
 
     def get_style_defs(self, arg=''):
         """
-        Return the style definitions for the current style as a string.
 
-        ``arg`` is an additional argument whose meaning depends on the
-        formatter used. Note that ``arg`` can also be a list or tuple
-        for some formatters like the html formatter.
+        Parameters
+        ----------
+        arg :
+             (Default value = '')
+
+        Returns
+        -------
+        type
+            ``arg`` is an additional argument whose meaning depends on the
+            formatter used. Note that ``arg`` can also be a list or tuple
+            for some formatters like the html formatter.
+
         """
         return ''
 
     def format(self, tokensource, outfile):
-        """
-        Format ``tokensource``, an iterable of ``(tokentype, tokenstring)``
+        """Format ``tokensource``, an iterable of ``(tokentype, tokenstring)``
         tuples and write it into ``outfile``.
+
+        Parameters
+        ----------
+        tokensource :
+            
+        outfile :
+            
+
+        Returns
+        -------
+
         """
         if self.encoding:
             # wrap the outfile in a StreamWriter
