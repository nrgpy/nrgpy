# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_function_base.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_function_base.py
@@ -8,6 +8,7 @@
 
 
 class PhysicalQuantity(float):
+    """ """
     def __new__(cls, value):
         return float.__new__(cls, value)
 
@@ -36,12 +37,15 @@
 
 
 class PhysicalQuantity2(ndarray):
+    """ """
     __array_priority__ = 10
 
 
 class TestLogspace:
+    """ """
 
     def test_basic(self):
+        """ """
         y = logspace(0, 6)
         assert_(len(y) == 50)
         y = logspace(0, 6, num=100)
@@ -52,6 +56,7 @@
         assert_array_equal(y, [1, 10, 100, 1e3, 1e4, 1e5, 1e6])
 
     def test_start_stop_array(self):
+        """ """
         start = array([0., 1.])
         stop = array([6., 7.])
         t1 = logspace(start, stop, 6)
@@ -66,6 +71,7 @@
         assert_equal(t5, t2.T)
 
     def test_dtype(self):
+        """ """
         y = logspace(0, 6, dtype='float32')
         assert_equal(y.dtype, dtype('float32'))
         y = logspace(0, 6, dtype='float64')
@@ -74,11 +80,13 @@
         assert_equal(y.dtype, dtype('int32'))
 
     def test_physical_quantities(self):
+        """ """
         a = PhysicalQuantity(1.0)
         b = PhysicalQuantity(5.0)
         assert_equal(logspace(a, b), logspace(1.0, 5.0))
 
     def test_subclass(self):
+        """ """
         a = array(1).view(PhysicalQuantity2)
         b = array(7).view(PhysicalQuantity2)
         ls = logspace(a, b)
@@ -90,8 +98,10 @@
 
 
 class TestGeomspace:
+    """ """
 
     def test_basic(self):
+        """ """
         y = geomspace(1, 1e6)
         assert_(len(y) == 50)
         y = geomspace(1, 1e6, num=100)
@@ -114,6 +124,7 @@
         assert_array_equal(y.imag, 0)
 
     def test_complex(self):
+        """ """
         # Purely imaginary
         y = geomspace(1j, 16j, num=5)
         assert_allclose(y, [1j, 2j, 4j, 8j, 16j])
@@ -154,6 +165,7 @@
         assert_allclose(y, [-5, 3j])
 
     def test_dtype(self):
+        """ """
         y = geomspace(1, 1e6, dtype='float32')
         assert_equal(y.dtype, dtype('float32'))
         y = geomspace(1, 1e6, dtype='float64')
@@ -168,6 +180,7 @@
         assert_equal(y.dtype, dtype('complex'))
 
     def test_start_stop_array_scalar(self):
+        """ """
         lim1 = array([120, 100], dtype="int8")
         lim2 = array([-120, -100], dtype="int8")
         lim3 = array([1200, 1000], dtype="uint16")
@@ -184,6 +197,7 @@
         assert_allclose(t3, t6, rtol=1e-5)
 
     def test_start_stop_array(self):
+        """ """
         # Try to use all special cases.
         start = array([1.e0, 32., 1j, -4j, 1+1j, -1])
         stop = array([1.e4, 2., 16j, -324j, 10000+10000j, 1])
@@ -199,11 +213,13 @@
         assert_equal(t5, t2.T)
 
     def test_physical_quantities(self):
+        """ """
         a = PhysicalQuantity(1.0)
         b = PhysicalQuantity(5.0)
         assert_equal(geomspace(a, b), geomspace(1.0, 5.0))
 
     def test_subclass(self):
+        """ """
         a = array(1).view(PhysicalQuantity2)
         b = array(7).view(PhysicalQuantity2)
         gs = geomspace(a, b)
@@ -214,14 +230,17 @@
         assert_equal(gs, geomspace(1.0, 7.0, 1))
 
     def test_bounds(self):
+        """ """
         assert_raises(ValueError, geomspace, 0, 10)
         assert_raises(ValueError, geomspace, 10, 0)
         assert_raises(ValueError, geomspace, 0, 0)
 
 
 class TestLinspace:
+    """ """
 
     def test_basic(self):
+        """ """
         y = linspace(0, 10)
         assert_(len(y) == 50)
         y = linspace(2, 10, num=100)
@@ -231,11 +250,13 @@
         assert_raises(ValueError, linspace, 0, 10, num=-1)
 
     def test_corner(self):
+        """ """
         y = list(linspace(0, 1, 1))
         assert_(y == [0.0], y)
         assert_raises(TypeError, linspace, 0, 1, num=2.5)
 
     def test_type(self):
+        """ """
         t1 = linspace(0, 1, 0).dtype
         t2 = linspace(0, 1, 1).dtype
         t3 = linspace(0, 1, 2).dtype
@@ -243,6 +264,7 @@
         assert_equal(t2, t3)
 
     def test_dtype(self):
+        """ """
         y = linspace(0, 6, dtype='float32')
         assert_equal(y.dtype, dtype('float32'))
         y = linspace(0, 6, dtype='float64')
@@ -251,6 +273,7 @@
         assert_equal(y.dtype, dtype('int32'))
 
     def test_start_stop_array_scalar(self):
+        """ """
         lim1 = array([-120, 100], dtype="int8")
         lim2 = array([120, -100], dtype="int8")
         lim3 = array([1200, 1000], dtype="uint16")
@@ -265,6 +288,7 @@
         assert_equal(t3, t6)
 
     def test_start_stop_array(self):
+        """ """
         start = array([-120, 120], dtype="int8")
         stop = array([100, -100], dtype="int8")
         t1 = linspace(start, stop, 5)
@@ -279,6 +303,7 @@
         assert_equal(t5, t2.T)
 
     def test_complex(self):
+        """ """
         lim1 = linspace(1 + 2j, 3 + 4j, 5)
         t1 = array([1.0+2.j, 1.5+2.5j,  2.0+3j, 2.5+3.5j, 3.0+4j])
         lim2 = linspace(1j, 10, 5)
@@ -287,11 +312,13 @@
         assert_equal(lim2, t2)
 
     def test_physical_quantities(self):
+        """ """
         a = PhysicalQuantity(0.0)
         b = PhysicalQuantity(1.0)
         assert_equal(linspace(a, b), linspace(0.0, 1.0))
 
     def test_subclass(self):
+        """ """
         a = array(0).view(PhysicalQuantity2)
         b = array(1).view(PhysicalQuantity2)
         ls = linspace(a, b)
@@ -302,19 +329,26 @@
         assert_equal(ls, linspace(0.0, 1.0, 1))
 
     def test_array_interface(self):
+        """ """
         # Regression test for https://github.com/numpy/numpy/pull/6659
         # Ensure that start/stop can be objects that implement
         # __array_interface__ and are convertible to numeric scalars
 
         class Arrayish:
-            """
-            A generic object that supports the __array_interface__ and hence
+            """A generic object that supports the __array_interface__ and hence
             can in principle be converted to a numeric scalar, but is not
             otherwise recognized as numeric, but also happens to support
             multiplication by floats.
-
+            
             Data should be an object that implements the buffer interface,
             and contains at least 4 bytes.
+
+            Parameters
+            ----------
+
+            Returns
+            -------
+
             """
 
             def __init__(self, data):
@@ -336,6 +370,7 @@
         assert_equal(linspace(one, five), linspace(1, 5))
 
     def test_denormal_numbers(self):
+        """ """
         # Regression test for gh-5437. Will probably fail when compiled
         # with ICC, which flushes denormals to zero
         for ftype in sctypes['float']:
@@ -343,11 +378,13 @@
             assert_(any(linspace(0, stop, 10, endpoint=False, dtype=ftype)))
 
     def test_equivalent_to_arange(self):
+        """ """
         for j in range(1000):
             assert_equal(linspace(0, j, j+1, dtype=int),
                          arange(j+1, dtype=int))
 
     def test_retstep(self):
+        """ """
         for num in [0, 1, 2]:
             for ept in [False, True]:
                 y = linspace(0, 1, num, endpoint=ept, retstep=True)
@@ -364,6 +401,7 @@
                     assert isnan(y[1])
 
     def test_object(self):
+        """ """
         start = array(1, dtype='O')
         stop = array(2, dtype='O')
         y = linspace(start, stop, 3)
