# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/fft/tests/test_helper.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/fft/tests/test_helper.py
@@ -9,8 +9,10 @@
 
 
 class TestFFTShift:
+    """ """
 
     def test_definition(self):
+        """ """
         x = [0, 1, 2, 3, 4, -4, -3, -2, -1]
         y = [-4, -3, -2, -1, 0, 1, 2, 3, 4]
         assert_array_almost_equal(fft.fftshift(x), y)
@@ -21,11 +23,13 @@
         assert_array_almost_equal(fft.ifftshift(y), x)
 
     def test_inverse(self):
+        """ """
         for n in [1, 4, 9, 100, 211]:
             x = np.random.random((n,))
             assert_array_almost_equal(fft.ifftshift(fft.fftshift(x)), x)
 
     def test_axes_keyword(self):
+        """ """
         freqs = [[0, 1, 2], [3, 4, -4], [-3, -2, -1]]
         shifted = [[-1, -3, -2], [2, 0, 1], [-4, 3, 4]]
         assert_array_almost_equal(fft.fftshift(freqs, axes=(0, 1)), shifted)
@@ -39,7 +43,7 @@
         assert_array_almost_equal(fft.ifftshift(shifted), freqs)
 
     def test_uneven_dims(self):
-        """ Test 2D input, which has uneven dimension sizes """
+        """Test 2D input, which has uneven dimension sizes"""
         freqs = [
             [0, 1],
             [2, 3],
@@ -84,12 +88,24 @@
         assert_array_almost_equal(fft.ifftshift(shift_dim_both), freqs)
 
     def test_equal_to_original(self):
-        """ Test that the new (>=v1.15) implementation (see #10073) is equal to the original (<=v1.14) """
+        """Test that the new (>=v1.15) implementation (see #10073) is equal to the original (<=v1.14)"""
         from numpy.compat import integer_types
         from numpy.core import asarray, concatenate, arange, take
 
         def original_fftshift(x, axes=None):
-            """ How fftshift was implemented in v1.14"""
+            """How fftshift was implemented in v1.14
+
+            Parameters
+            ----------
+            x :
+                
+            axes :
+                 (Default value = None)
+
+            Returns
+            -------
+
+            """
             tmp = asarray(x)
             ndim = tmp.ndim
             if axes is None:
@@ -105,7 +121,19 @@
             return y
 
         def original_ifftshift(x, axes=None):
-            """ How ifftshift was implemented in v1.14 """
+            """How ifftshift was implemented in v1.14
+
+            Parameters
+            ----------
+            x :
+                
+            axes :
+                 (Default value = None)
+
+            Returns
+            -------
+
+            """
             tmp = asarray(x)
             ndim = tmp.ndim
             if axes is None:
@@ -135,8 +163,10 @@
 
 
 class TestFFTFreq:
+    """ """
 
     def test_definition(self):
+        """ """
         x = [0, 1, 2, 3, 4, -4, -3, -2, -1]
         assert_array_almost_equal(9*fft.fftfreq(9), x)
         assert_array_almost_equal(9*pi*fft.fftfreq(9, pi), x)
@@ -146,8 +176,10 @@
 
 
 class TestRFFTFreq:
+    """ """
 
     def test_definition(self):
+        """ """
         x = [0, 1, 2, 3, 4]
         assert_array_almost_equal(9*fft.rfftfreq(9), x)
         assert_array_almost_equal(9*pi*fft.rfftfreq(9, pi), x)
@@ -157,8 +189,10 @@
 
 
 class TestIRFFTN:
+    """ """
 
     def test_not_last_axis_success(self):
+        """ """
         ar, ai = np.random.random((2, 16, 8, 32))
         a = ar + 1j*ai
 
