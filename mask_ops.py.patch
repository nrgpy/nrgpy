# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/ops/mask_ops.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/ops/mask_ops.py
@@ -14,9 +14,8 @@
     left_mask: Optional[np.ndarray],
     right_mask: Optional[np.ndarray],
 ):
-    """
-    Boolean ``or`` using Kleene logic.
-
+    """Boolean ``or`` using Kleene logic.
+    
     Values are NA where we have ``NA | NA`` or ``NA | False``.
     ``NA | True`` is considered True.
 
@@ -27,11 +26,21 @@
     left_mask, right_mask : ndarray, optional
         The masks. Only one of these may be None, which implies that
         the associated `left` or `right` value is a scalar.
-
-    Returns
-    -------
-    result, mask: ndarray[bool]
-        The result of the logical or, and the new mask.
+    left: Union[bool :
+        
+    np.ndarray] :
+        
+    right: Union[bool :
+        
+    left_mask: Optional[np.ndarray] :
+        
+    right_mask: Optional[np.ndarray] :
+        
+
+    Returns
+    -------
+
+    
     """
     # To reduce the number of cases, we ensure that `left` & `left_mask`
     # always come from an array, not a scalar. This is safe, since because
@@ -75,11 +84,10 @@
     left_mask: Optional[np.ndarray],
     right_mask: Optional[np.ndarray],
 ):
-    """
-    Boolean ``xor`` using Kleene logic.
-
+    """Boolean ``xor`` using Kleene logic.
+    
     This is the same as ``or``, with the following adjustments
-
+    
     * True, True -> False
     * True, NA   -> NA
 
@@ -90,11 +98,21 @@
     left_mask, right_mask : ndarray, optional
         The masks. Only one of these may be None, which implies that
         the associated `left` or `right` value is a scalar.
-
-    Returns
-    -------
-    result, mask: ndarray[bool]
-        The result of the logical xor, and the new mask.
+    left: Union[bool :
+        
+    np.ndarray] :
+        
+    right: Union[bool :
+        
+    left_mask: Optional[np.ndarray] :
+        
+    right_mask: Optional[np.ndarray] :
+        
+
+    Returns
+    -------
+
+    
     """
     if left_mask is None:
         return kleene_xor(right, left, right_mask, left_mask)
@@ -122,9 +140,8 @@
     left_mask: Optional[np.ndarray],
     right_mask: Optional[np.ndarray],
 ):
-    """
-    Boolean ``and`` using Kleene logic.
-
+    """Boolean ``and`` using Kleene logic.
+    
     Values are ``NA`` for ``NA & NA`` or ``True & NA``.
 
     Parameters
@@ -134,11 +151,23 @@
     left_mask, right_mask : ndarray, optional
         The masks. Only one of these may be None, which implies that
         the associated `left` or `right` value is a scalar.
-
-    Returns
-    -------
-    result, mask: ndarray[bool]
-        The result of the logical xor, and the new mask.
+    left: Union[bool :
+        
+    libmissing.NAType :
+        
+    np.ndarray] :
+        
+    right: Union[bool :
+        
+    left_mask: Optional[np.ndarray] :
+        
+    right_mask: Optional[np.ndarray] :
+        
+
+    Returns
+    -------
+
+    
     """
     # To reduce the number of cases, we ensure that `left` & `left_mask`
     # always come from an array, not a scalar. This is safe, since because
@@ -174,5 +203,18 @@
 
 
 def raise_for_nan(value, method):
+    """
+
+    Parameters
+    ----------
+    value :
+        
+    method :
+        
+
+    Returns
+    -------
+
+    """
     if lib.is_float(value) and np.isnan(value):
         raise ValueError(f"Cannot perform logical '{method}' with floating NaN")
