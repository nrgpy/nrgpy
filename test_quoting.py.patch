# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/parser/test_quoting.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/parser/test_quoting.py
@@ -26,6 +26,21 @@
     ],
 )
 def test_bad_quote_char(all_parsers, kwargs, msg):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    kwargs :
+        
+    msg :
+        
+
+    Returns
+    -------
+
+    """
     data = "1,2,3"
     parser = all_parsers
 
@@ -41,6 +56,21 @@
     ],
 )
 def test_bad_quoting(all_parsers, quoting, msg):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    quoting :
+        
+    msg :
+        
+
+    Returns
+    -------
+
+    """
     data = "1,2,3"
     parser = all_parsers
 
@@ -49,6 +79,17 @@
 
 
 def test_quote_char_basic(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = 'a,b,c\n1,2,"cat"'
     expected = DataFrame([[1, 2, "cat"]], columns=["a", "b", "c"])
@@ -59,6 +100,19 @@
 
 @pytest.mark.parametrize("quote_char", ["~", "*", "%", "$", "@", "P"])
 def test_quote_char_various(all_parsers, quote_char):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    quote_char :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     expected = DataFrame([[1, 2, "cat"]], columns=["a", "b", "c"])
 
@@ -72,6 +126,21 @@
 @pytest.mark.parametrize("quoting", [csv.QUOTE_MINIMAL, csv.QUOTE_NONE])
 @pytest.mark.parametrize("quote_char", ["", None])
 def test_null_quote_char(all_parsers, quoting, quote_char):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    quoting :
+        
+    quote_char :
+        
+
+    Returns
+    -------
+
+    """
     kwargs = dict(quotechar=quote_char, quoting=quoting)
     data = "a,b,c\n1,2,3"
     parser = all_parsers
@@ -105,6 +174,21 @@
     ],
 )
 def test_quoting_various(all_parsers, kwargs, exp_data):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    kwargs :
+        
+    exp_data :
+        
+
+    Returns
+    -------
+
+    """
     data = '1,2,"foo"'
     parser = all_parsers
     columns = ["a", "b", "c"]
@@ -118,6 +202,21 @@
     "doublequote,exp_data", [(True, [[3, '4 " 5']]), (False, [[3, '4 " 5"']])]
 )
 def test_double_quote(all_parsers, doublequote, exp_data):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    doublequote :
+        
+    exp_data :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = 'a,b\n3,"4 "" 5"'
 
@@ -128,6 +227,19 @@
 
 @pytest.mark.parametrize("quotechar", ['"', "\u0001"])
 def test_quotechar_unicode(all_parsers, quotechar):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    quotechar :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-14477
     data = "a\n1"
     parser = all_parsers
@@ -139,6 +251,19 @@
 
 @pytest.mark.parametrize("balanced", [True, False])
 def test_unbalanced_quoting(all_parsers, balanced):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    balanced :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-22789.
     parser = all_parsers
     data = 'a,b,c\n1,2,"3'
