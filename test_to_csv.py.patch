# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/formats/test_to_csv.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/formats/test_to_csv.py
@@ -11,11 +11,13 @@
 
 
 class TestToCSV:
+    """ """
     @pytest.mark.xfail(
         (3, 6, 5) > sys.version_info,
         reason=("Python csv library bug (see https://bugs.python.org/issue32255)"),
     )
     def test_to_csv_with_single_column(self):
+        """ """
         # see gh-18676, https://bugs.python.org/issue32255
         #
         # Python's CSV library adds an extraneous '""'
@@ -44,6 +46,7 @@
                 assert f.read() == expected2
 
     def test_to_csv_defualt_encoding(self):
+        """ """
         # GH17097
         df = DataFrame({"col": ["AAAAA", "ÄÄÄÄÄ", "ßßßßß", "聞聞聞聞聞"]})
 
@@ -53,6 +56,7 @@
             tm.assert_frame_equal(pd.read_csv(path, index_col=0), df)
 
     def test_to_csv_quotechar(self):
+        """ """
         df = DataFrame({"col": [1, 2]})
         expected = """\
 "","col"
@@ -81,6 +85,7 @@
                 df.to_csv(path, quoting=1, quotechar=None)
 
     def test_to_csv_doublequote(self):
+        """ """
         df = DataFrame({"col": ['a"a', '"bb"']})
         expected = '''\
 "","col"
@@ -100,6 +105,7 @@
                 df.to_csv(path, doublequote=False)  # no escapechar set
 
     def test_to_csv_escapechar(self):
+        """ """
         df = DataFrame({"col": ['a"a', '"bb"']})
         expected = """\
 "","col"
@@ -125,12 +131,14 @@
                 assert f.read() == expected
 
     def test_csv_to_string(self):
+        """ """
         df = DataFrame({"col": [1, 2]})
         expected_rows = [",col", "0,1", "1,2"]
         expected = tm.convert_rows_list_to_csv_str(expected_rows)
         assert df.to_csv() == expected
 
     def test_to_csv_decimal(self):
+        """ """
         # see gh-781
         df = DataFrame({"col1": [1], "col2": ["a"], "col3": [10.1]})
 
@@ -167,6 +175,7 @@
         assert df.set_index(["a", "b"]).to_csv(decimal="^") == expected
 
     def test_to_csv_float_format(self):
+        """ """
         # testing if float_format is taken into account for the index
         # GH 11553
         df = pd.DataFrame({"a": [0, 1], "b": [2.2, 3.3], "c": 1})
@@ -179,6 +188,7 @@
         assert df.set_index(["a", "b"]).to_csv(float_format="%.2f") == expected
 
     def test_to_csv_na_rep(self):
+        """ """
         # see gh-11553
         #
         # Testing if NaN values are correctly represented in the index.
@@ -214,6 +224,7 @@
         assert expected == csv
 
     def test_to_csv_date_format(self):
+        """ """
         # GH 10209
         df_sec = DataFrame({"A": pd.date_range("20130101", periods=5, freq="s")})
         df_day = DataFrame({"A": pd.date_range("20130101", periods=5, freq="d")})
@@ -277,6 +288,7 @@
         assert df_sec_grouped.mean().to_csv(date_format="%Y-%m-%d") == expected_ymd_sec
 
     def test_to_csv_multi_index(self):
+        """ """
         # see gh-6618
         df = DataFrame([1], columns=pd.MultiIndex.from_arrays([[1], [2]]))
 
@@ -329,6 +341,21 @@
     )
     @pytest.mark.parametrize("klass", [pd.DataFrame, pd.Series])
     def test_to_csv_single_level_multi_index(self, ind, expected, klass):
+        """
+
+        Parameters
+        ----------
+        ind :
+            
+        expected :
+            
+        klass :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-19589
         result = klass(pd.Series([1], ind, name="data")).to_csv(
             line_terminator="\n", header=True
@@ -336,6 +363,7 @@
         assert result == expected
 
     def test_to_csv_string_array_ascii(self):
+        """ """
         # GH 10813
         str_array = [{"names": ["foo", "bar"]}, {"names": ["baz", "qux"]}]
         df = pd.DataFrame(str_array)
@@ -350,6 +378,7 @@
                 assert f.read() == expected_ascii
 
     def test_to_csv_string_array_utf8(self):
+        """ """
         # GH 10813
         str_array = [{"names": ["foo", "bar"]}, {"names": ["baz", "qux"]}]
         df = pd.DataFrame(str_array)
@@ -364,6 +393,7 @@
                 assert f.read() == expected_utf8
 
     def test_to_csv_string_with_lf(self):
+        """ """
         # GH 20353
         data = {"int": [1, 2, 3], "str_lf": ["abc", "d\nef", "g\nh\n\ni"]}
         df = pd.DataFrame(data)
@@ -398,6 +428,7 @@
                 assert f.read() == expected_crlf
 
     def test_to_csv_string_with_crlf(self):
+        """ """
         # GH 20353
         data = {"int": [1, 2, 3], "str_crlf": ["abc", "d\r\nef", "g\r\nh\r\n\r\ni"]}
         df = pd.DataFrame(data)
@@ -437,6 +468,17 @@
                 assert f.read() == expected_crlf
 
     def test_to_csv_stdout_file(self, capsys):
+        """
+
+        Parameters
+        ----------
+        capsys :
+            
+
+        Returns
+        -------
+
+        """
         # GH 21561
         df = pd.DataFrame(
             [["foo", "bar"], ["baz", "qux"]], columns=["name_1", "name_2"]
@@ -459,6 +501,7 @@
         ),
     )
     def test_to_csv_write_to_open_file(self):
+        """ """
         # GH 21696
         df = pd.DataFrame({"a": ["x", "y", "z"]})
         expected = """\
@@ -475,6 +518,7 @@
                 assert f.read() == expected
 
     def test_to_csv_write_to_open_file_with_newline_py3(self):
+        """ """
         # see gh-21696
         # see gh-20353
         df = pd.DataFrame({"a": ["x", "y", "z"]})
@@ -491,6 +535,21 @@
     @pytest.mark.parametrize("to_infer", [True, False])
     @pytest.mark.parametrize("read_infer", [True, False])
     def test_to_csv_compression(self, compression_only, read_infer, to_infer):
+        """
+
+        Parameters
+        ----------
+        compression_only :
+            
+        read_infer :
+            
+        to_infer :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-15008
         compression = compression_only
 
@@ -518,6 +577,17 @@
             tm.assert_frame_equal(result, df)
 
     def test_to_csv_compression_dict(self, compression_only):
+        """
+
+        Parameters
+        ----------
+        compression_only :
+            
+
+        Returns
+        -------
+
+        """
         # GH 26023
         method = compression_only
         df = DataFrame({"ABC": [1]})
@@ -529,6 +599,7 @@
             tm.assert_frame_equal(read_df, df)
 
     def test_to_csv_compression_dict_no_method_raises(self):
+        """ """
         # GH 26023
         df = DataFrame({"ABC": [1]})
         compression = {"some_option": True}
@@ -543,6 +614,19 @@
         "archive_name", [None, "test_to_csv.csv", "test_to_csv.zip"]
     )
     def test_to_csv_zip_arguments(self, compression, archive_name):
+        """
+
+        Parameters
+        ----------
+        compression :
+            
+        archive_name :
+            
+
+        Returns
+        -------
+
+        """
         # GH 26023
         from zipfile import ZipFile
 
@@ -560,6 +644,17 @@
 
     @pytest.mark.parametrize("df_new_type", ["Int64"])
     def test_to_csv_na_rep_long_string(self, df_new_type):
+        """
+
+        Parameters
+        ----------
+        df_new_type :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-25099
         df = pd.DataFrame({"c": [float("nan")] * 3})
         df = df.astype(df_new_type)
@@ -571,6 +666,7 @@
         assert expected == result
 
     def test_to_csv_timedelta_precision(self):
+        """ """
         # GH 6783
         s = pd.Series([1, 1]).astype("timedelta64[ns]")
         buf = io.StringIO()
@@ -585,6 +681,7 @@
         assert result == expected
 
     def test_na_rep_truncated(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/31447
         result = pd.Series(range(8, 12)).to_csv(na_rep="-")
         expected = tm.convert_rows_list_to_csv_str([",0", "0,8", "1,9", "2,10", "3,11"])
@@ -600,6 +697,17 @@
 
     @pytest.mark.parametrize("errors", ["surrogatepass", "ignore", "replace"])
     def test_to_csv_errors(self, errors):
+        """
+
+        Parameters
+        ----------
+        errors :
+            
+
+        Returns
+        -------
+
+        """
         # GH 22610
         data = ["\ud800foo"]
         ser = pd.Series(data, index=pd.Index(data))
