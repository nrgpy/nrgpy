# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pexpect/popen_spawn.py
+++ b/..//venv/lib/python3.8/site-packages/pexpect/popen_spawn.py
@@ -18,6 +18,7 @@
 from .utils import string_types
 
 class PopenSpawn(SpawnBase):
+    """ """
     def __init__(self, cmd, timeout=30, maxread=2000, searchwindowsize=None,
                  logfile=None, cwd=None, env=None, encoding=None,
                  codec_errors='strict', preexec_fn=None):
@@ -63,6 +64,19 @@
     _read_reached_eof = False
 
     def read_nonblocking(self, size, timeout):
+        """
+
+        Parameters
+        ----------
+        size :
+            
+        timeout :
+            
+
+        Returns
+        -------
+
+        """
         buf = self._buf
         if self._read_reached_eof:
             # We have already finished reading. Use up any buffered data,
@@ -115,25 +129,52 @@
             self._read_queue.put(buf)
 
     def write(self, s):
-        '''This is similar to send() except that there is no return value.
-        '''
+        """This is similar to send() except that there is no return value.
+
+        Parameters
+        ----------
+        s :
+            
+
+        Returns
+        -------
+
+        """
         self.send(s)
 
     def writelines(self, sequence):
-        '''This calls write() for each element in the sequence.
-
+        """This calls write() for each element in the sequence.
+        
         The sequence can be any iterable object producing strings, typically a
         list of strings. This does not add line separators. There is no return
         value.
-        '''
+
+        Parameters
+        ----------
+        sequence :
+            
+
+        Returns
+        -------
+
+        """
         for s in sequence:
             self.send(s)
 
     def send(self, s):
-        '''Send data to the subprocess' stdin.
-
+        """Send data to the subprocess' stdin.
+        
         Returns the number of bytes written.
-        '''
+
+        Parameters
+        ----------
+        s :
+            
+
+        Returns
+        -------
+
+        """
         s = self._coerce_send_string(s)
         self._log(s, 'send')
 
@@ -147,17 +188,34 @@
             return len(b)
 
     def sendline(self, s=''):
-        '''Wraps send(), sending string ``s`` to child process, with os.linesep
-        automatically appended. Returns number of bytes written. '''
+        """Wraps send(), sending string ``s`` to child process, with os.linesep
+        automatically appended. Returns number of bytes written.
+
+        Parameters
+        ----------
+        s :
+             (Default value = '')
+
+        Returns
+        -------
+
+        """
 
         n = self.send(s)
         return n + self.send(self.linesep)
 
     def wait(self):
-        '''Wait for the subprocess to finish.
-
+        """Wait for the subprocess to finish.
+        
         Returns the exit code.
-        '''
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         status = self.proc.wait()
         if status >= 0:
             self.exitstatus = status
@@ -169,10 +227,19 @@
         return status
 
     def kill(self, sig):
-        '''Sends a Unix signal to the subprocess.
-
+        """Sends a Unix signal to the subprocess.
+        
         Use constants from the :mod:`signal` module to specify which signal.
-        '''
+
+        Parameters
+        ----------
+        sig :
+            
+
+        Returns
+        -------
+
+        """
         if sys.platform == 'win32':
             if sig in [signal.SIGINT, signal.CTRL_C_EVENT]:
                 sig = signal.CTRL_C_EVENT
@@ -184,5 +251,5 @@
         os.kill(self.proc.pid, sig)
 
     def sendeof(self):
-        '''Closes the stdin pipe from the writing end.'''
+        """Closes the stdin pipe from the writing end."""
         self.proc.stdin.close()
