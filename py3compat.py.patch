# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/utils/py3compat.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/utils/py3compat.py
@@ -15,33 +15,117 @@
 
 
 def decode(s, encoding=None):
+    """
+
+    Parameters
+    ----------
+    s :
+        
+    encoding :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     encoding = encoding or DEFAULT_ENCODING
     return s.decode(encoding, "replace")
 
 def encode(u, encoding=None):
+    """
+
+    Parameters
+    ----------
+    u :
+        
+    encoding :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     encoding = encoding or DEFAULT_ENCODING
     return u.encode(encoding, "replace")
 
 
 def cast_unicode(s, encoding=None):
+    """
+
+    Parameters
+    ----------
+    s :
+        
+    encoding :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     if isinstance(s, bytes):
         return decode(s, encoding)
     return s
 
 def cast_bytes(s, encoding=None):
+    """
+
+    Parameters
+    ----------
+    s :
+        
+    encoding :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     if not isinstance(s, bytes):
         return encode(s, encoding)
     return s
 
 def buffer_to_bytes(buf):
-    """Cast a buffer object to bytes"""
+    """Cast a buffer object to bytes
+
+    Parameters
+    ----------
+    buf :
+        
+
+    Returns
+    -------
+
+    """
     if not isinstance(buf, bytes):
         buf = bytes(buf)
     return buf
 
 def _modify_str_or_docstring(str_change_func):
+    """
+
+    Parameters
+    ----------
+    str_change_func :
+        
+
+    Returns
+    -------
+
+    """
     @functools.wraps(str_change_func)
     def wrapper(func_or_str):
+        """
+
+        Parameters
+        ----------
+        func_or_str :
+            
+
+        Returns
+        -------
+
+        """
         if isinstance(func_or_str, (str,)):
             func = None
             doc = func_or_str
@@ -62,6 +146,15 @@
 def safe_unicode(e):
     """unicode(e) with various fallbacks. Used for exceptions, which may not be
     safe to call unicode() on.
+
+    Parameters
+    ----------
+    e :
+        
+
+    Returns
+    -------
+
     """
     try:
         return str(e)
@@ -80,17 +173,43 @@
     """Given a command, mode, and a PATH string, return the path which
     conforms to the given mode on the PATH, or None if there is no such
     file.
-
+    
     `mode` defaults to os.F_OK | os.X_OK. `path` defaults to the result
     of os.environ.get("PATH"), or can be overridden with a custom search
     path.
-
+    
     This is a backport of shutil.which from Python 3.4
+
+    Parameters
+    ----------
+    cmd :
+        
+    mode :
+         (Default value = os.F_OK | os.X_OK)
+    path :
+         (Default value = None)
+
+    Returns
+    -------
+
     """
     # Check that a given file can be accessed with the correct mode.
     # Additionally check that `file` is not a directory, as on Windows
     # directories pass the os.access check.
     def _access_check(fn, mode):
+        """
+
+        Parameters
+        ----------
+        fn :
+            
+        mode :
+            
+
+        Returns
+        -------
+
+        """
         return (os.path.exists(fn) and os.access(fn, mode)
                 and not os.path.isdir(fn))
 
@@ -144,6 +263,17 @@
 # keep reference to builtin_mod because the kernel overrides that value
 # to forward requests to a frontend.
 def input(prompt=''):
+    """
+
+    Parameters
+    ----------
+    prompt :
+         (Default value = '')
+
+    Returns
+    -------
+
+    """
     return builtin_mod.input(prompt)
 
 builtin_mod_name = "builtins"
@@ -153,6 +283,19 @@
 which = shutil.which
 
 def isidentifier(s, dotted=False):
+    """
+
+    Parameters
+    ----------
+    s :
+        
+    dotted :
+         (Default value = False)
+
+    Returns
+    -------
+
+    """
     if dotted:
         return all(isidentifier(a) for a in s.split("."))
     return s.isidentifier()
@@ -162,6 +305,23 @@
 MethodType = types.MethodType
 
 def execfile(fname, glob, loc=None, compiler=None):
+    """
+
+    Parameters
+    ----------
+    fname :
+        
+    glob :
+        
+    loc :
+         (Default value = None)
+    compiler :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     loc = loc if (loc is not None) else glob
     with open(fname, 'rb') as f:
         compiler = compiler or compile
@@ -174,8 +334,18 @@
 @_modify_str_or_docstring
 def u_format(s):
     """"{u}'abc'" --> "'abc'" (Python 3)
-
-    Accepts a string or a function, so it can be used as a decorator."""
+    
+    Accepts a string or a function, so it can be used as a decorator.
+
+    Parameters
+    ----------
+    s :
+        
+
+    Returns
+    -------
+
+    """
     return s.format(u='')
 
 
@@ -186,6 +356,19 @@
 # See https://github.com/cython/cython/pull/3291 and
 # https://github.com/ipython/ipython/issues/12068
 def no_code(x, encoding=None):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+    encoding :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
         return x
 unicode_to_str = cast_bytes_py2 = no_code
 
