# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/colorama/ansitowin32.py
+++ b/..//venv/lib/python3.8/site-packages/colorama/ansitowin32.py
@@ -14,11 +14,17 @@
 
 
 class StreamWrapper(object):
-    '''
-    Wraps a stream (such as stdout), acting as a transparent proxy for all
+    """Wraps a stream (such as stdout), acting as a transparent proxy for all
     attribute access apart from method 'write()', which is delegated to our
     Converter instance.
-    '''
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
     def __init__(self, wrapped, converter):
         # double-underscore everything to prevent clashes with names of
         # attributes on the wrapped stream object.
@@ -38,9 +44,21 @@
         return self.__wrapped.__exit__(*args, **kwargs)
 
     def write(self, text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         self.__convertor.write(text)
 
     def isatty(self):
+        """ """
         stream = self.__wrapped
         if 'PYCHARM_HOSTED' in os.environ:
             if stream is not None and (stream is sys.__stdout__ or stream is sys.__stderr__):
@@ -54,6 +72,7 @@
 
     @property
     def closed(self):
+        """ """
         stream = self.__wrapped
         try:
             return stream.closed
@@ -62,11 +81,17 @@
 
 
 class AnsiToWin32(object):
-    '''
-    Implements a 'write()' method which, on Windows, will strip ANSI character
+    """Implements a 'write()' method which, on Windows, will strip ANSI character
     sequences from the text, and if outputting to a tty, will convert them into
     win32 function calls.
-    '''
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
     ANSI_CSI_RE = re.compile('\001?\033\\[((?:\\d|;)*)([a-zA-Z])\002?')   # Control Sequence Introducer
     ANSI_OSC_RE = re.compile('\001?\033\\]([^\a]*)(\a)\002?')             # Operating System Command
 
@@ -104,16 +129,23 @@
         self.on_stderr = self.wrapped is sys.stderr
 
     def should_wrap(self):
-        '''
-        True if this class is actually needed. If false, then the output
+        """True if this class is actually needed. If false, then the output
         stream will not be affected, nor will win32 calls be issued, so
         wrapping stdout is not actually required. This will generally be
         False on non-Windows platforms, unless optional functionality like
         autoreset has been requested using kwargs to init()
-        '''
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         return self.convert or self.strip or self.autoreset
 
     def get_win32_calls(self):
+        """ """
         if self.convert and winterm:
             return {
                 AnsiStyle.RESET_ALL: (winterm.reset_all, ),
@@ -158,6 +190,17 @@
         return dict()
 
     def write(self, text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         if self.strip or self.convert:
             self.write_and_convert(text)
         else:
@@ -168,6 +211,7 @@
 
 
     def reset_all(self):
+        """ """
         if self.convert:
             self.call_win32('m', (0,))
         elif not self.strip and not self.stream.closed:
@@ -175,11 +219,19 @@
 
 
     def write_and_convert(self, text):
-        '''
-        Write the given text to our wrapped stream, stripping any ANSI
+        """Write the given text to our wrapped stream, stripping any ANSI
         sequences from the text, and optionally converting them into win32
         calls.
-        '''
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         cursor = 0
         text = self.convert_osc(text)
         for match in self.ANSI_CSI_RE.finditer(text):
@@ -191,18 +243,59 @@
 
 
     def write_plain_text(self, text, start, end):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+        start :
+            
+        end :
+            
+
+        Returns
+        -------
+
+        """
         if start < end:
             self.wrapped.write(text[start:end])
             self.wrapped.flush()
 
 
     def convert_ansi(self, paramstring, command):
+        """
+
+        Parameters
+        ----------
+        paramstring :
+            
+        command :
+            
+
+        Returns
+        -------
+
+        """
         if self.convert:
             params = self.extract_params(command, paramstring)
             self.call_win32(command, params)
 
 
     def extract_params(self, command, paramstring):
+        """
+
+        Parameters
+        ----------
+        command :
+            
+        paramstring :
+            
+
+        Returns
+        -------
+
+        """
         if command in 'Hf':
             params = tuple(int(p) if len(p) != 0 else 1 for p in paramstring.split(';'))
             while len(params) < 2:
@@ -221,6 +314,19 @@
 
 
     def call_win32(self, command, params):
+        """
+
+        Parameters
+        ----------
+        command :
+            
+        params :
+            
+
+        Returns
+        -------
+
+        """
         if command == 'm':
             for param in params:
                 if param in self.win32_calls:
@@ -243,6 +349,17 @@
 
 
     def convert_osc(self, text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         for match in self.ANSI_OSC_RE.finditer(text):
             start, end = match.span()
             text = text[:start] + text[end:]
