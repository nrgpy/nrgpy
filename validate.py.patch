# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpydoc/validate.py
+++ b/..//venv/lib/python3.8/site-packages/numpydoc/validate.py
@@ -95,12 +95,11 @@
 
 
 def error(code, **kwargs):
-    """
-    Return a tuple with the error code and the message with variables replaced.
-
+    """Return a tuple with the error code and the message with variables replaced.
+    
     This is syntactic sugar so instead of:
     - `('PR02', ERROR_MSGS['PR02'].format(doctest_log=log))`
-
+    
     We can simply use:
     - `error('PR02', doctest_log=log)`
 
@@ -108,20 +107,19 @@
     ----------
     code : str
         Error code.
-    **kwargs
+    **kwargs :
         Values for the variables in the error messages
 
     Returns
     -------
-    code : str
-        Error code.
-    message : str
-        Error message with variables replaced.
+
+    
     """
     return (code, ERROR_MSGS[code].format(**kwargs))
 
 
 class Docstring:
+    """ """
     # TODO Can all this class be merged into NumpyDocString?
     def __init__(self, name):
         self.name = name
@@ -134,8 +132,7 @@
 
     @staticmethod
     def _load_obj(name):
-        """
-        Import Python object from its name as string.
+        """Import Python object from its name as string.
 
         Parameters
         ----------
@@ -169,17 +166,17 @@
 
     @property
     def type(self):
+        """ """
         return type(self.obj).__name__
 
     @property
     def is_function_or_method(self):
+        """ """
         return inspect.isfunction(self.obj)
 
     @property
     def source_file_name(self):
-        """
-        File name where the object is implemented (e.g. pandas/core/frame.py).
-        """
+        """File name where the object is implemented (e.g. pandas/core/frame.py)."""
         try:
             fname = inspect.getsourcefile(self.code_obj)
         except TypeError:
@@ -192,9 +189,7 @@
 
     @property
     def source_file_def_line(self):
-        """
-        Number of line where the object is defined in its file.
-        """
+        """Number of line where the object is defined in its file."""
         try:
             return inspect.getsourcelines(self.code_obj)[-1]
         except (OSError, TypeError):
@@ -205,6 +200,7 @@
 
     @property
     def start_blank_lines(self):
+        """ """
         i = None
         if self.raw_doc:
             for i, row in enumerate(self.raw_doc.split("\n")):
@@ -214,6 +210,7 @@
 
     @property
     def end_blank_lines(self):
+        """ """
         i = None
         if self.raw_doc:
             for i, row in enumerate(reversed(self.raw_doc.split("\n"))):
@@ -223,6 +220,7 @@
 
     @property
     def double_blank_lines(self):
+        """ """
         prev = True
         for row in self.raw_doc.split("\n"):
             if not prev and not row.strip():
@@ -232,6 +230,7 @@
 
     @property
     def section_titles(self):
+        """ """
         sections = []
         self.doc._doc.reset()
         while not self.doc._doc.eof():
@@ -246,20 +245,24 @@
 
     @property
     def summary(self):
+        """ """
         return " ".join(self.doc["Summary"])
 
     @property
     def num_summary_lines(self):
+        """ """
         return len(self.doc["Summary"])
 
     @property
     def extended_summary(self):
+        """ """
         if not self.doc["Extended Summary"] and len(self.doc["Summary"]) > 1:
             return " ".join(self.doc["Summary"])
         return " ".join(self.doc["Extended Summary"])
 
     @property
     def doc_parameters(self):
+        """ """
         parameters = collections.OrderedDict()
         for names, type_, desc in self.doc["Parameters"]:
             for name in names.split(", "):
@@ -268,9 +271,20 @@
 
     @property
     def signature_parameters(self):
+        """ """
         def add_stars(param_name, info):
-            """
-            Add stars to *args and **kwargs parameters
+            """Add stars to *args and **kwargs parameters
+
+            Parameters
+            ----------
+            param_name :
+                
+            info :
+                
+
+            Returns
+            -------
+
             """
             if info.kind == inspect.Parameter.VAR_POSITIONAL:
                 return "*{}".format(param_name)
@@ -302,6 +316,7 @@
 
     @property
     def parameter_mismatches(self):
+        """ """
         errs = []
         signature_params = self.signature_parameters
         doc_params = tuple(self.doc_parameters)
@@ -327,13 +342,26 @@
 
     @property
     def directives_without_two_colons(self):
+        """ """
         return DIRECTIVE_PATTERN.findall(self.raw_doc)
 
     def parameter_type(self, param):
+        """
+
+        Parameters
+        ----------
+        param :
+            
+
+        Returns
+        -------
+
+        """
         return self.doc_parameters[param][0]
 
     @property
     def see_also(self):
+        """ """
         result = collections.OrderedDict()
         for funcs, desc in self.doc["See Also"]:
             for func, _ in funcs:
@@ -343,18 +371,22 @@
 
     @property
     def examples(self):
+        """ """
         return self.doc["Examples"]
 
     @property
     def returns(self):
+        """ """
         return self.doc["Returns"]
 
     @property
     def yields(self):
+        """ """
         return self.doc["Yields"]
 
     @property
     def method_source(self):
+        """ """
         try:
             source = inspect.getsource(self.obj)
         except TypeError:
@@ -363,19 +395,32 @@
 
     @property
     def method_returns_something(self):
-        """
-        Check if the docstrings method can return something.
-
+        """Check if the docstrings method can return something.
+        
         Bare returns, returns valued None and returns from nested functions are
         disconsidered.
 
+        Parameters
+        ----------
+
         Returns
         -------
-        bool
-            Whether the docstrings method can return something.
+
+        
         """
 
         def get_returns_not_on_nested_functions(node):
+            """
+
+            Parameters
+            ----------
+            node :
+                
+
+            Returns
+            -------
+
+            """
             returns = [node] if isinstance(node, ast.Return) else []
             for child in ast.iter_child_nodes(node):
                 # Ignore nested functions and its subtrees.
@@ -398,10 +443,30 @@
 
     @property
     def deprecated(self):
+        """ """
         return ".. deprecated:: " in (self.summary + self.extended_summary)
 
 
 def _check_desc(desc, code_no_desc, code_no_upper, code_no_period, **kwargs):
+    """
+
+    Parameters
+    ----------
+    desc :
+        
+    code_no_desc :
+        
+    code_no_upper :
+        
+    code_no_period :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     # Find and strip out any sphinx directives
     desc = "\n".join(desc)
     for directive in DIRECTIVES:
@@ -426,8 +491,7 @@
 
 
 def validate(func_name):
-    """
-    Validate the docstring.
+    """Validate the docstring.
 
     Parameters
     ----------
@@ -457,10 +521,10 @@
        * RF: References
        * EX: Examples
     - Last two characters: Numeric error code inside the section
-
+    
     For example, PR02 is the second codified error in the Parameters section
     (which in this case is assigned to the error when unknown parameters are documented).
-
+    
     The error codes, their corresponding error messages, and the details on how
     they are validated, are not documented more than in the source code of this
     function.
