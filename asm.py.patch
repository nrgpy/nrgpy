# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pygments/lexers/asm.py
+++ b/..//venv/lib/python3.8/site-packages/pygments/lexers/asm.py
@@ -25,9 +25,7 @@
 
 
 class GasLexer(RegexLexer):
-    """
-    For Gas (AT&T) assembly code.
-    """
+    """For Gas (AT&T) assembly code."""
     name = 'GAS'
     aliases = ['gas', 'asm']
     filenames = ['*.s', '*.S']
@@ -101,6 +99,17 @@
     }
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         if re.search(r'^\.(text|data|section)', text, re.M):
             return True
         elif re.search(r'^\.\w+', text, re.M):
@@ -108,8 +117,16 @@
 
 
 def _objdump_lexer_tokens(asm_lexer):
-    """
-    Common objdump lexer tokens to wrap an ASM lexer.
+    """Common objdump lexer tokens to wrap an ASM lexer.
+
+    Parameters
+    ----------
+    asm_lexer :
+        
+
+    Returns
+    -------
+
     """
     hex_re = r'[0-9A-Za-z]'
     return {
@@ -157,9 +174,7 @@
 
 
 class ObjdumpLexer(RegexLexer):
-    """
-    For the output of ``objdump -dr``.
-    """
+    """For the output of ``objdump -dr``."""
     name = 'objdump'
     aliases = ['objdump']
     filenames = ['*.objdump']
@@ -169,9 +184,7 @@
 
 
 class DObjdumpLexer(DelegatingLexer):
-    """
-    For the output of ``objdump -Sr`` on compiled D files.
-    """
+    """For the output of ``objdump -Sr`` on compiled D files."""
     name = 'd-objdump'
     aliases = ['d-objdump']
     filenames = ['*.d-objdump']
@@ -182,9 +195,7 @@
 
 
 class CppObjdumpLexer(DelegatingLexer):
-    """
-    For the output of ``objdump -Sr`` on compiled C++ files.
-    """
+    """For the output of ``objdump -Sr`` on compiled C++ files."""
     name = 'cpp-objdump'
     aliases = ['cpp-objdump', 'c++-objdumb', 'cxx-objdump']
     filenames = ['*.cpp-objdump', '*.c++-objdump', '*.cxx-objdump']
@@ -195,9 +206,7 @@
 
 
 class CObjdumpLexer(DelegatingLexer):
-    """
-    For the output of ``objdump -Sr`` on compiled C files.
-    """
+    """For the output of ``objdump -Sr`` on compiled C files."""
     name = 'c-objdump'
     aliases = ['c-objdump']
     filenames = ['*.c-objdump']
@@ -208,10 +217,16 @@
 
 
 class HsailLexer(RegexLexer):
-    """
-    For HSAIL assembly code.
-
+    """For HSAIL assembly code.
+    
     .. versionadded:: 2.2
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'HSAIL'
     aliases = ['hsail', 'hsa']
@@ -343,9 +358,7 @@
 
 
 class LlvmLexer(RegexLexer):
-    """
-    For LLVM assembly code.
-    """
+    """For LLVM assembly code."""
     name = 'LLVM'
     aliases = ['llvm']
     filenames = ['*.ll']
@@ -456,12 +469,18 @@
 
 
 class LlvmMirBodyLexer(RegexLexer):
-    """
-    For LLVM MIR examples without the YAML wrapper.
-
+    """For LLVM MIR examples without the YAML wrapper.
+    
     For more information on LLVM MIR see https://llvm.org/docs/MIRLangRef.html.
-
+    
     .. versionadded:: 2.6
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'LLVM-MIR Body'
     aliases = ['llvm-mir-body']
@@ -597,17 +616,23 @@
 
 
 class LlvmMirLexer(RegexLexer):
-    """
-    Lexer for the overall LLVM MIR document format.
-
+    """Lexer for the overall LLVM MIR document format.
+    
     MIR is a human readable serialization format that's used to represent LLVM's
     machine specific intermediate representation. It allows LLVM's developers to
     see the state of the compilation process at various points, as well as test
     individual pieces of the compiler.
-
+    
     For more information on LLVM MIR see https://llvm.org/docs/MIRLangRef.html.
-
+    
     .. versionadded:: 2.6
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'LLVM-MIR'
     aliases = ['llvm-mir']
@@ -678,9 +703,7 @@
 
 
 class NasmLexer(RegexLexer):
-    """
-    For Nasm (Intel) assembly code.
-    """
+    """For Nasm (Intel) assembly code."""
     name = 'NASM'
     aliases = ['nasm']
     filenames = ['*.asm', '*.ASM']
@@ -756,16 +779,33 @@
     }
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         # Probably TASM
         if re.match(r'PROC', text, re.IGNORECASE):
             return False
 
 
 class NasmObjdumpLexer(ObjdumpLexer):
-    """
-    For the output of ``objdump -d -M intel``.
-
+    """For the output of ``objdump -d -M intel``.
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'objdump-nasm'
     aliases = ['objdump-nasm']
@@ -776,9 +816,7 @@
 
 
 class TasmLexer(RegexLexer):
-    """
-    For Tasm (Turbo Assembler) assembly code.
-    """
+    """For Tasm (Turbo Assembler) assembly code."""
     name = 'TASM'
     aliases = ['tasm']
     filenames = ['*.asm', '*.ASM', '*.tasm']
@@ -855,16 +893,33 @@
     }
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         # See above
         if re.match(r'PROC', text, re.I):
             return True
 
 
 class Ca65Lexer(RegexLexer):
-    """
-    For ca65 assembler sources.
-
+    """For ca65 assembler sources.
+    
     .. versionadded:: 1.6
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'ca65 assembler'
     aliases = ['ca65']
@@ -894,18 +949,35 @@
     }
 
     def analyse_text(self, text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         # comments in GAS start with "#"
         if re.search(r'^\s*;', text, re.MULTILINE):
             return 0.9
 
 
 class Dasm16Lexer(RegexLexer):
-    """
-    For DCPU-16 Assembly.
-
+    """For DCPU-16 Assembly.
+    
     Check http://0x10c.com/doc/dcpu-16.txt
-
+    
     .. versionadded:: 2.4
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'DASM16'
     aliases = ['dasm16']
@@ -945,6 +1017,19 @@
     string = r'"(\\"|[^"])*"'
 
     def guess_identifier(lexer, match):
+        """
+
+        Parameters
+        ----------
+        lexer :
+            
+        match :
+            
+
+        Returns
+        -------
+
+        """
         ident = match.group(0)
         klass = Name.Variable if ident.upper() in lexer.REGISTERS else Name.Label
         yield match.start(), klass, ident
