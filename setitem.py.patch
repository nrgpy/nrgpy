# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/extension/base/setitem.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/extension/base/setitem.py
@@ -8,13 +8,40 @@
 
 
 class BaseSetitemTests(BaseExtensionTests):
+    """ """
     def test_setitem_scalar_series(self, data, box_in_series):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        box_in_series :
+            
+
+        Returns
+        -------
+
+        """
         if box_in_series:
             data = pd.Series(data)
         data[0] = data[1]
         assert data[0] == data[1]
 
     def test_setitem_sequence(self, data, box_in_series):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        box_in_series :
+            
+
+        Returns
+        -------
+
+        """
         if box_in_series:
             data = pd.Series(data)
         original = data.copy()
@@ -24,6 +51,19 @@
         assert data[1] == original[0]
 
     def test_setitem_sequence_mismatched_length_raises(self, data, as_array):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        as_array :
+            
+
+        Returns
+        -------
+
+        """
         ser = pd.Series(data)
         original = ser.copy()
         value = [data[0]]
@@ -41,6 +81,19 @@
         self.assert_series_equal(ser, original)
 
     def test_setitem_empty_indxer(self, data, box_in_series):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        box_in_series :
+            
+
+        Returns
+        -------
+
+        """
         if box_in_series:
             data = pd.Series(data)
         original = data.copy()
@@ -48,6 +101,19 @@
         self.assert_equal(data, original)
 
     def test_setitem_sequence_broadcasts(self, data, box_in_series):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        box_in_series :
+            
+
+        Returns
+        -------
+
+        """
         if box_in_series:
             data = pd.Series(data)
         data[[0, 1]] = data[2]
@@ -56,37 +122,116 @@
 
     @pytest.mark.parametrize("setter", ["loc", "iloc"])
     def test_setitem_scalar(self, data, setter):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        setter :
+            
+
+        Returns
+        -------
+
+        """
         arr = pd.Series(data)
         setter = getattr(arr, setter)
         setter[0] = data[1]
         assert arr[0] == data[1]
 
     def test_setitem_loc_scalar_mixed(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         df = pd.DataFrame({"A": np.arange(len(data)), "B": data})
         df.loc[0, "B"] = data[1]
         assert df.loc[0, "B"] == data[1]
 
     def test_setitem_loc_scalar_single(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         df = pd.DataFrame({"B": data})
         df.loc[10, "B"] = data[1]
         assert df.loc[10, "B"] == data[1]
 
     def test_setitem_loc_scalar_multiple_homogoneous(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         df = pd.DataFrame({"A": data, "B": data})
         df.loc[10, "B"] = data[1]
         assert df.loc[10, "B"] == data[1]
 
     def test_setitem_iloc_scalar_mixed(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         df = pd.DataFrame({"A": np.arange(len(data)), "B": data})
         df.iloc[0, 1] = data[1]
         assert df.loc[0, "B"] == data[1]
 
     def test_setitem_iloc_scalar_single(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         df = pd.DataFrame({"B": data})
         df.iloc[10, 0] = data[1]
         assert df.loc[10, "B"] == data[1]
 
     def test_setitem_iloc_scalar_multiple_homogoneous(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         df = pd.DataFrame({"A": data, "B": data})
         df.iloc[10, 1] = data[1]
         assert df.loc[10, "B"] == data[1]
@@ -101,6 +246,21 @@
         ids=["numpy-array", "boolean-array", "boolean-array-na"],
     )
     def test_setitem_mask(self, data, mask, box_in_series):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        mask :
+            
+        box_in_series :
+            
+
+        Returns
+        -------
+
+        """
         arr = data[:5].copy()
         expected = arr.take([0, 0, 0, 3, 4])
         if box_in_series:
@@ -110,6 +270,19 @@
         self.assert_equal(expected, arr)
 
     def test_setitem_mask_raises(self, data, box_in_series):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        box_in_series :
+            
+
+        Returns
+        -------
+
+        """
         # wrong length
         mask = np.array([True, False])
 
@@ -124,6 +297,19 @@
             data[mask] = data[0]
 
     def test_setitem_mask_boolean_array_with_na(self, data, box_in_series):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        box_in_series :
+            
+
+        Returns
+        -------
+
+        """
         mask = pd.array(np.zeros(data.shape, dtype="bool"), dtype="boolean")
         mask[:3] = True
         mask[3:5] = pd.NA
@@ -141,6 +327,21 @@
         ids=["list", "integer-array", "numpy-array"],
     )
     def test_setitem_integer_array(self, data, idx, box_in_series):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        idx :
+            
+        box_in_series :
+            
+
+        Returns
+        -------
+
+        """
         arr = data[:5].copy()
         expected = data.take([0, 0, 0, 3, 4])
 
@@ -164,6 +365,21 @@
         ids=["list-False", "list-True", "integer-array-False", "integer-array-True"],
     )
     def test_setitem_integer_with_missing_raises(self, data, idx, box_in_series):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        idx :
+            
+        box_in_series :
+            
+
+        Returns
+        -------
+
+        """
         arr = data.copy()
 
         # TODO(xfail) this raises KeyError about labels not found (it tries label-based)
@@ -178,6 +394,21 @@
     @pytest.mark.parametrize("as_callable", [True, False])
     @pytest.mark.parametrize("setter", ["loc", None])
     def test_setitem_mask_aligned(self, data, as_callable, setter):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        as_callable :
+            
+        setter :
+            
+
+        Returns
+        -------
+
+        """
         ser = pd.Series(data)
         mask = np.zeros(len(data), dtype=bool)
         mask[:2] = True
@@ -202,6 +433,19 @@
 
     @pytest.mark.parametrize("setter", ["loc", None])
     def test_setitem_mask_broadcast(self, data, setter):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        setter :
+            
+
+        Returns
+        -------
+
+        """
         ser = pd.Series(data)
         mask = np.zeros(len(data), dtype=bool)
         mask[:2] = True
@@ -216,6 +460,17 @@
         assert ser[1] == data[10]
 
     def test_setitem_expand_columns(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         df = pd.DataFrame({"A": data})
         result = df.copy()
         result["B"] = 1
@@ -232,6 +487,17 @@
         self.assert_frame_equal(result, expected)
 
     def test_setitem_expand_with_extension(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         df = pd.DataFrame({"A": [1] * len(data)})
         result = df.copy()
         result["B"] = data
@@ -243,6 +509,17 @@
         self.assert_frame_equal(result, expected)
 
     def test_setitem_frame_invalid_length(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         df = pd.DataFrame({"A": [1] * len(data)})
         xpr = (
             rf"Length of values \({len(data[:5])}\) "
@@ -253,12 +530,36 @@
 
     @pytest.mark.xfail(reason="GH#20441: setitem on extension types.")
     def test_setitem_tuple_index(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         s = pd.Series(data[:2], index=[(0, 0), (0, 1)])
         expected = pd.Series(data.take([1, 1]), index=s.index)
         s[(0, 1)] = data[1]
         self.assert_series_equal(s, expected)
 
     def test_setitem_slice(self, data, box_in_series):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        box_in_series :
+            
+
+        Returns
+        -------
+
+        """
         arr = data[:5].copy()
         expected = data.take([0, 0, 0, 3, 4])
         if box_in_series:
@@ -269,6 +570,17 @@
         self.assert_equal(arr, expected)
 
     def test_setitem_loc_iloc_slice(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         arr = data[:5].copy()
         s = pd.Series(arr, index=["a", "b", "c", "d", "e"])
         expected = pd.Series(data.take([0, 0, 0, 3, 4]), index=s.index)
@@ -282,21 +594,65 @@
         self.assert_equal(result, expected)
 
     def test_setitem_slice_mismatch_length_raises(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         arr = data[:5]
         with pytest.raises(ValueError):
             arr[:1] = arr[:2]
 
     def test_setitem_slice_array(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         arr = data[:5].copy()
         arr[:5] = data[-5:]
         self.assert_extension_array_equal(arr, data[-5:])
 
     def test_setitem_scalar_key_sequence_raise(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         arr = data[:5].copy()
         with pytest.raises(ValueError):
             arr[0] = arr[[0, 1]]
 
     def test_setitem_preserves_views(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # GH#28150 setitem shouldn't swap the underlying data
         view1 = data.view()
         view2 = data[:]
@@ -306,6 +662,17 @@
         assert view2[0] == data[1]
 
     def test_setitem_dataframe_column_with_index(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # https://github.com/pandas-dev/pandas/issues/32395
         df = expected = pd.DataFrame({"data": pd.Series(data)})
         result = pd.DataFrame(index=df.index)
@@ -313,6 +680,17 @@
         self.assert_frame_equal(result, expected)
 
     def test_setitem_dataframe_column_without_index(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # https://github.com/pandas-dev/pandas/issues/32395
         df = expected = pd.DataFrame({"data": pd.Series(data)})
         result = pd.DataFrame(index=df.index)
@@ -320,6 +698,17 @@
         self.assert_frame_equal(result, expected)
 
     def test_setitem_series_with_index(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # https://github.com/pandas-dev/pandas/issues/32395
         ser = expected = pd.Series(data, name="data")
         result = pd.Series(index=ser.index, dtype=object, name="data")
@@ -327,6 +716,17 @@
         self.assert_series_equal(result, expected)
 
     def test_setitem_series_without_index(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # https://github.com/pandas-dev/pandas/issues/32395
         ser = expected = pd.Series(data, name="data")
         result = pd.Series(index=ser.index, dtype=object, name="data")
