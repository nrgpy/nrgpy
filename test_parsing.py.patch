# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/tslibs/test_parsing.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/tslibs/test_parsing.py
@@ -16,6 +16,7 @@
 
 
 def test_parse_time_string():
+    """ """
     (parsed, reso) = parse_time_string("4Q1984")
     (parsed_lower, reso_lower) = parse_time_string("4q1984")
 
@@ -24,6 +25,7 @@
 
 
 def test_parse_time_string_invalid_type():
+    """ """
     # Raise on invalid input, don't just return it
     msg = "Argument 'arg' has incorrect type (expected str, got tuple)"
     with pytest.raises(TypeError, match=re.escape(msg)):
@@ -34,6 +36,19 @@
     "dashed,normal", [("1988-Q2", "1988Q2"), ("2Q-1988", "2Q1988")]
 )
 def test_parse_time_quarter_with_dash(dashed, normal):
+    """
+
+    Parameters
+    ----------
+    dashed :
+        
+    normal :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-9688
     (parsed_dash, reso_dash) = parse_time_string(dashed)
     (parsed, reso) = parse_time_string(normal)
@@ -44,6 +59,17 @@
 
 @pytest.mark.parametrize("dashed", ["-2Q1992", "2-Q1992", "4-4Q1992"])
 def test_parse_time_quarter_with_dash_error(dashed):
+    """
+
+    Parameters
+    ----------
+    dashed :
+        
+
+    Returns
+    -------
+
+    """
     msg = f"Unknown datetime string format, unable to parse: {dashed}"
 
     with pytest.raises(parsing.DateParseError, match=msg):
@@ -67,6 +93,19 @@
     ],
 )
 def test_does_not_convert_mixed_integer(date_string, expected):
+    """
+
+    Parameters
+    ----------
+    date_string :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     assert parsing._does_string_look_like_datetime(date_string) is expected
 
 
@@ -93,6 +132,21 @@
     ],
 )
 def test_parsers_quarterly_with_freq_error(date_str, kwargs, msg):
+    """
+
+    Parameters
+    ----------
+    date_str :
+        
+    kwargs :
+        
+    msg :
+        
+
+    Returns
+    -------
+
+    """
     with pytest.raises(parsing.DateParseError, match=msg):
         parsing.parse_time_string(date_str, **kwargs)
 
@@ -106,6 +160,21 @@
     ],
 )
 def test_parsers_quarterly_with_freq(date_str, freq, expected):
+    """
+
+    Parameters
+    ----------
+    date_str :
+        
+    freq :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     result, _ = parsing.parse_time_string(date_str, freq=freq)
     assert result == expected
 
@@ -114,6 +183,17 @@
     "date_str", ["2Q 2005", "2Q-200A", "2Q-200", "22Q2005", "2Q200.", "6Q-20"]
 )
 def test_parsers_quarter_invalid(date_str):
+    """
+
+    Parameters
+    ----------
+    date_str :
+        
+
+    Returns
+    -------
+
+    """
     if date_str == "6Q-20":
         msg = (
             "Incorrect quarterly string is given, quarter "
@@ -131,6 +211,19 @@
     [("201101", datetime(2011, 1, 1, 0, 0)), ("200005", datetime(2000, 5, 1, 0, 0))],
 )
 def test_parsers_month_freq(date_str, expected):
+    """
+
+    Parameters
+    ----------
+    date_str :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     result, _ = parsing.parse_time_string(date_str, freq="M")
     assert result == expected
 
@@ -148,12 +241,38 @@
     ],
 )
 def test_guess_datetime_format_with_parseable_formats(string, fmt):
+    """
+
+    Parameters
+    ----------
+    string :
+        
+    fmt :
+        
+
+    Returns
+    -------
+
+    """
     result = parsing._guess_datetime_format(string)
     assert result == fmt
 
 
 @pytest.mark.parametrize("dayfirst,expected", [(True, "%d/%m/%Y"), (False, "%m/%d/%Y")])
 def test_guess_datetime_format_with_dayfirst(dayfirst, expected):
+    """
+
+    Parameters
+    ----------
+    dayfirst :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     ambiguous_string = "01/01/2011"
     result = parsing._guess_datetime_format(ambiguous_string, dayfirst=dayfirst)
     assert result == expected
@@ -169,6 +288,19 @@
     ],
 )
 def test_guess_datetime_format_with_locale_specific_formats(string, fmt):
+    """
+
+    Parameters
+    ----------
+    string :
+        
+    fmt :
+        
+
+    Returns
+    -------
+
+    """
     result = parsing._guess_datetime_format(string)
     assert result == fmt
 
@@ -187,6 +319,17 @@
     ],
 )
 def test_guess_datetime_format_invalid_inputs(invalid_dt):
+    """
+
+    Parameters
+    ----------
+    invalid_dt :
+        
+
+    Returns
+    -------
+
+    """
     # A datetime string must include a year, month and a day for it to be
     # guessable, in addition to being a string that looks like a datetime.
     assert parsing._guess_datetime_format(invalid_dt) is None
@@ -204,12 +347,26 @@
     ],
 )
 def test_guess_datetime_format_no_padding(string, fmt):
+    """
+
+    Parameters
+    ----------
+    string :
+        
+    fmt :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-11142
     result = parsing._guess_datetime_format(string)
     assert result == fmt
 
 
 def test_try_parse_dates():
+    """ """
     arr = np.array(["5/1/2000", "6/1/2000", "7/1/2000"], dtype=object)
     result = parsing.try_parse_dates(arr, dayfirst=True)
 
@@ -218,6 +375,7 @@
 
 
 def test_parse_time_string_check_instance_type_raise_exception():
+    """ """
     # issue 20684
     msg = "Argument 'arg' has incorrect type (expected str, got tuple)"
     with pytest.raises(TypeError, match=re.escape(msg)):
