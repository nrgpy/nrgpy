# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/scalar/test_na_scalar.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/scalar/test_na_scalar.py
@@ -12,17 +12,20 @@
 
 
 def test_singleton():
+    """ """
     assert NA is NA
     new_NA = type(NA)()
     assert new_NA is NA
 
 
 def test_repr():
+    """ """
     assert repr(NA) == "<NA>"
     assert str(NA) == "<NA>"
 
 
 def test_format():
+    """ """
     # GH-34740
     assert format(NA) == "<NA>"
     assert format(NA, ">10") == "      <NA>"
@@ -34,6 +37,7 @@
 
 
 def test_truthiness():
+    """ """
     msg = "boolean value of NA is ambiguous"
 
     with pytest.raises(TypeError, match=msg):
@@ -44,12 +48,24 @@
 
 
 def test_hashable():
+    """ """
     assert hash(NA) == hash(NA)
     d = {NA: "test"}
     assert d[NA] == "test"
 
 
 def test_arithmetic_ops(all_arithmetic_functions):
+    """
+
+    Parameters
+    ----------
+    all_arithmetic_functions :
+        
+
+    Returns
+    -------
+
+    """
     op = all_arithmetic_functions
 
     for other in [NA, 1, 1.0, "a", np.int64(1), np.nan]:
@@ -65,6 +81,7 @@
 
 
 def test_comparison_ops():
+    """ """
 
     for other in [NA, 1, 1.0, "a", np.int64(1), np.nan, np.bool_(True)]:
         assert (NA == other) is NA
@@ -98,6 +115,19 @@
 )
 @pytest.mark.parametrize("asarray", [True, False])
 def test_pow_special(value, asarray):
+    """
+
+    Parameters
+    ----------
+    value :
+        
+    asarray :
+        
+
+    Returns
+    -------
+
+    """
     if asarray:
         value = np.array([value])
     result = pd.NA ** value
@@ -115,6 +145,19 @@
 )
 @pytest.mark.parametrize("asarray", [True, False])
 def test_rpow_special(value, asarray):
+    """
+
+    Parameters
+    ----------
+    value :
+        
+    asarray :
+        
+
+    Returns
+    -------
+
+    """
     if asarray:
         value = np.array([value])
     result = value ** pd.NA
@@ -133,6 +176,19 @@
 )
 @pytest.mark.parametrize("asarray", [True, False])
 def test_rpow_minus_one(value, asarray):
+    """
+
+    Parameters
+    ----------
+    value :
+        
+    asarray :
+        
+
+    Returns
+    -------
+
+    """
     if asarray:
         value = np.array([value])
     result = value ** pd.NA
@@ -144,6 +200,7 @@
 
 
 def test_unary_ops():
+    """ """
     assert +NA is NA
     assert -NA is NA
     assert abs(NA) is NA
@@ -151,6 +208,7 @@
 
 
 def test_logical_and():
+    """ """
 
     assert NA & True is NA
     assert True & NA is NA
@@ -164,6 +222,7 @@
 
 
 def test_logical_or():
+    """ """
 
     assert NA | True is True
     assert True | NA is True
@@ -177,6 +236,7 @@
 
 
 def test_logical_xor():
+    """ """
 
     assert NA ^ True is NA
     assert True ^ NA is NA
@@ -190,6 +250,7 @@
 
 
 def test_logical_not():
+    """ """
     assert ~NA is NA
 
 
@@ -197,6 +258,19 @@
     "shape", [(3,), (3, 3), (1, 2, 3)],
 )
 def test_arithmetic_ndarray(shape, all_arithmetic_functions):
+    """
+
+    Parameters
+    ----------
+    shape :
+        
+    all_arithmetic_functions :
+        
+
+    Returns
+    -------
+
+    """
     op = all_arithmetic_functions
     a = np.zeros(shape)
     if op.__name__ == "pow":
@@ -207,21 +281,25 @@
 
 
 def test_is_scalar():
+    """ """
     assert is_scalar(NA) is True
 
 
 def test_isna():
+    """ """
     assert pd.isna(NA) is True
     assert pd.notna(NA) is False
 
 
 def test_series_isna():
+    """ """
     s = pd.Series([1, NA], dtype=object)
     expected = pd.Series([False, True])
     tm.assert_series_equal(s.isna(), expected)
 
 
 def test_ufunc():
+    """ """
     assert np.log(pd.NA) is pd.NA
     assert np.add(pd.NA, 1) is pd.NA
     result = np.divmod(pd.NA, 1)
@@ -232,12 +310,14 @@
 
 
 def test_ufunc_raises():
+    """ """
     msg = "ufunc method 'at'"
     with pytest.raises(ValueError, match=msg):
         np.log.at(pd.NA, 0)
 
 
 def test_binary_input_not_dunder():
+    """ """
     a = np.array([1, 2, 3])
     expected = np.array([pd.NA, pd.NA, pd.NA], dtype=object)
     result = np.logaddexp(a, pd.NA)
@@ -255,6 +335,7 @@
 
 
 def test_divmod_ufunc():
+    """ """
     # binary in, binary out.
     a = np.array([1, 2, 3])
     expected = np.array([pd.NA, pd.NA, pd.NA], dtype=object)
@@ -272,6 +353,7 @@
 
 
 def test_integer_hash_collision_dict():
+    """ """
     # GH 30013
     result = {NA: "foo", hash(NA): "bar"}
 
@@ -280,6 +362,7 @@
 
 
 def test_integer_hash_collision_set():
+    """ """
     # GH 30013
     result = {NA, hash(NA)}
 
@@ -289,12 +372,14 @@
 
 
 def test_pickle_roundtrip():
+    """ """
     # https://github.com/pandas-dev/pandas/issues/31847
     result = pickle.loads(pickle.dumps(pd.NA))
     assert result is pd.NA
 
 
 def test_pickle_roundtrip_pandas():
+    """ """
     result = tm.round_trip_pickle(pd.NA)
     assert result is pd.NA
 
@@ -304,6 +389,21 @@
 )
 @pytest.mark.parametrize("as_frame", [True, False])
 def test_pickle_roundtrip_containers(as_frame, values, dtype):
+    """
+
+    Parameters
+    ----------
+    as_frame :
+        
+    values :
+        
+    dtype :
+        
+
+    Returns
+    -------
+
+    """
     s = pd.Series(pd.array(values, dtype=dtype))
     if as_frame:
         s = s.to_frame(name="A")
