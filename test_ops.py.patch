# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/timedeltas/test_ops.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/timedeltas/test_ops.py
@@ -11,7 +11,9 @@
 
 
 class TestTimedeltaIndexOps:
+    """ """
     def test_value_counts_unique(self):
+        """ """
         # GH 7735
         idx = timedelta_range("1 days 09:00:00", freq="H", periods=10)
         # create repeated values, 'n'th element is repeated by n+1 times
@@ -56,6 +58,7 @@
         tm.assert_index_equal(idx.unique(), exp_idx)
 
     def test_nonunique_contains(self):
+        """ """
         # GH 9512
         for idx in map(
             TimedeltaIndex,
@@ -70,6 +73,7 @@
             assert idx[0] in idx
 
     def test_unknown_attribute(self):
+        """ """
         # see gh-9680
         tdi = pd.timedelta_range(start=0, periods=10, freq="1s")
         ts = pd.Series(np.random.normal(size=10), index=tdi)
@@ -79,6 +83,7 @@
             ts.foo
 
     def test_order(self):
+        """ """
         # GH 10295
         idx1 = TimedeltaIndex(["1 day", "2 day", "3 day"], freq="D", name="idx")
         idx2 = TimedeltaIndex(["1 hour", "2 hour", "3 hour"], freq="H", name="idx")
@@ -139,6 +144,17 @@
             assert ordered.freq is None
 
     def test_drop_duplicates_metadata(self, freq_sample):
+        """
+
+        Parameters
+        ----------
+        freq_sample :
+            
+
+        Returns
+        -------
+
+        """
         # GH 10115
         idx = pd.timedelta_range("1 day", periods=10, freq=freq_sample, name="idx")
         result = idx.drop_duplicates()
@@ -165,6 +181,23 @@
         ],
     )
     def test_drop_duplicates(self, freq_sample, keep, expected, index):
+        """
+
+        Parameters
+        ----------
+        freq_sample :
+            
+        keep :
+            
+        expected :
+            
+        index :
+            
+
+        Returns
+        -------
+
+        """
         # to check Index/Series compat
         idx = pd.timedelta_range("1 day", periods=10, freq=freq_sample, name="idx")
         idx = idx.append(idx[:5])
@@ -179,6 +212,17 @@
         tm.assert_series_equal(result, Series(expected, index=index))
 
     def test_infer_freq(self, freq_sample):
+        """
+
+        Parameters
+        ----------
+        freq_sample :
+            
+
+        Returns
+        -------
+
+        """
         # GH#11018
         idx = pd.timedelta_range("1", freq=freq_sample, periods=10)
         result = pd.TimedeltaIndex(idx.asi8, freq="infer")
@@ -186,6 +230,7 @@
         assert result.freq == freq_sample
 
     def test_repeat(self):
+        """ """
         index = pd.timedelta_range("1 days", periods=2, freq="D")
         exp = pd.TimedeltaIndex(["1 days", "1 days", "2 days", "2 days"])
         for res in [index.repeat(2), np.repeat(index, 2)]:
@@ -211,6 +256,7 @@
             assert res.freq is None
 
     def test_nat(self):
+        """ """
         assert pd.TimedeltaIndex._na_value is pd.NaT
         assert pd.TimedeltaIndex([])._na_value is pd.NaT
 
@@ -229,6 +275,7 @@
         tm.assert_numpy_array_equal(idx._nan_idxs, np.array([1], dtype=np.intp))
 
     def test_equals(self):
+        """ """
         # GH 13107
         idx = pd.TimedeltaIndex(["1 days", "2 days", "NaT"])
         assert idx.equals(idx)
@@ -262,6 +309,19 @@
     @pytest.mark.parametrize("values", [["0 days", "2 days", "4 days"], []])
     @pytest.mark.parametrize("freq", ["2D", Day(2), "48H", Hour(48)])
     def test_freq_setter(self, values, freq):
+        """
+
+        Parameters
+        ----------
+        values :
+            
+        freq :
+            
+
+        Returns
+        -------
+
+        """
         # GH 20678
         idx = TimedeltaIndex(values)
 
@@ -275,6 +335,7 @@
         assert idx.freq is None
 
     def test_freq_setter_errors(self):
+        """ """
         # GH 20678
         idx = TimedeltaIndex(["0 days", "2 days", "4 days"])
 
@@ -296,6 +357,7 @@
             idx._data.freq = "foo"
 
     def test_freq_view_safe(self):
+        """ """
         # Setting the freq for one TimedeltaIndex shouldn't alter the freq
         #  for another that views the same data
 
