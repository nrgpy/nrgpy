# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/numeric/test_astype.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/numeric/test_astype.py
@@ -10,7 +10,9 @@
 
 
 class TestAstype:
+    """ """
     def test_astype_float64_to_object(self):
+        """ """
         float_index = Float64Index([0.0, 2.5, 5.0, 7.5, 10.0])
         result = float_index.astype(object)
         assert result.equals(float_index)
@@ -18,6 +20,7 @@
         assert isinstance(result, Index) and not isinstance(result, Float64Index)
 
     def test_astype_float64_mixed_to_object(self):
+        """ """
         # mixed int-float
         idx = Float64Index([1.5, 2, 3, 4, 5])
         idx.name = "foo"
@@ -28,6 +31,17 @@
 
     @pytest.mark.parametrize("dtype", ["int16", "int32", "int64"])
     def test_astype_float64_to_int_dtype(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         # GH#12881
         # a float astype int
         idx = Float64Index([0, 1, 2])
@@ -42,6 +56,17 @@
 
     @pytest.mark.parametrize("dtype", ["float32", "float64"])
     def test_astype_float64_to_float_dtype(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         # GH#12881
         # a float astype int
         idx = Float64Index([0, 1, 2])
@@ -56,6 +81,17 @@
 
     @pytest.mark.parametrize("dtype", ["M8[ns]", "m8[ns]"])
     def test_cannot_cast_to_datetimelike(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         idx = Float64Index([0, 1.1, 2])
 
         msg = (
@@ -68,6 +104,19 @@
     @pytest.mark.parametrize("dtype", [int, "int16", "int32", "int64"])
     @pytest.mark.parametrize("non_finite", [np.inf, np.nan])
     def test_cannot_cast_inf_to_int(self, non_finite, dtype):
+        """
+
+        Parameters
+        ----------
+        non_finite :
+            
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         # GH#13149
         idx = Float64Index([1, 2, non_finite])
 
@@ -76,6 +125,7 @@
             idx.astype(dtype)
 
     def test_astype_from_object(self):
+        """ """
         index = Index([1.0, np.nan, 0.2], dtype="object")
         result = index.astype(float)
         expected = Float64Index([1.0, np.nan, 0.2])
