# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/plotting/_core.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/plotting/_core.py
@@ -30,15 +30,14 @@
     legend: bool = False,
     **kwargs,
 ):
-    """
-    Draw histogram of the input series using matplotlib.
+    """Draw histogram of the input series using matplotlib.
 
     Parameters
     ----------
     by : object, optional
-        If passed, then used to form histograms for separate groups.
+        If passed, then used to form histograms for separate groups. (Default value = None)
     ax : matplotlib axis object
-        If not passed, uses gca().
+        If not passed, uses gca(). (Default value = None)
     grid : bool, default True
         Whether to show axis grid lines.
     xlabelsize : int, default None
@@ -61,16 +60,34 @@
         ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to
         specify the ``plotting.backend`` for the whole session, set
         ``pd.options.plotting.backend``.
-
         .. versionadded:: 1.0.0
-
     legend : bool, default False
         Whether to show the legend.
-
         .. versionadded:: 1.1.0
-
-    **kwargs
+    **kwargs :
         To be passed to the actual plotting function.
+    grid: bool :
+         (Default value = True)
+    xlabelsize: Optional[int] :
+         (Default value = None)
+    xrot: Optional[float] :
+         (Default value = None)
+    ylabelsize: Optional[int] :
+         (Default value = None)
+    yrot: Optional[float] :
+         (Default value = None)
+    figsize: Optional[Tuple[int :
+        
+    int]] :
+         (Default value = None)
+    bins: Union[int :
+        
+    Sequence[int]] :
+         (Default value = 10)
+    backend: Optional[str] :
+         (Default value = None)
+    legend: bool :
+         (Default value = False)
 
     Returns
     -------
@@ -117,13 +134,12 @@
     legend: bool = False,
     **kwargs,
 ):
-    """
-    Make a histogram of the DataFrame's.
-
+    """Make a histogram of the DataFrame's.
+    
     A `histogram`_ is a representation of the distribution of data.
     This function calls :meth:`matplotlib.pyplot.hist`, on each series in
     the DataFrame, resulting in one histogram per column.
-
+    
     .. _histogram: https://en.wikipedia.org/wiki/Histogram
 
     Parameters
@@ -133,7 +149,7 @@
     column : str or sequence
         If passed, will be used to limit data to a subset of columns.
     by : object, optional
-        If passed, then used to form histograms for separate groups.
+        If passed, then used to form histograms for separate groups. (Default value = None)
     grid : bool, default True
         Whether to show axis grid lines.
     xlabelsize : int, default None
@@ -147,7 +163,7 @@
         Rotation of y axis labels. For example, a value of 90 displays the
         y labels rotated 90 degrees clockwise.
     ax : Matplotlib axes object, default None
-        The axes to plot the histogram on.
+        The axes to plot the histogram on. (Default value = None)
     sharex : bool, default True if ax is None else False
         In case subplots=True, share x axis and set some x axis labels to
         invisible; defaults to True if ax is None otherwise False if an ax
@@ -167,41 +183,69 @@
         bin edges are calculated and returned. If bins is a sequence, gives
         bin edges, including left edge of first bin and right edge of last
         bin. In this case, bins is returned unmodified.
-
     backend : str, default None
         Backend to use instead of the backend specified in the option
         ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to
         specify the ``plotting.backend`` for the whole session, set
         ``pd.options.plotting.backend``.
-
         .. versionadded:: 1.0.0
-
     legend : bool, default False
         Whether to show the legend.
-
         .. versionadded:: 1.1.0
-
-    **kwargs
+    **kwargs :
         All other plotting keyword arguments to be passed to
         :meth:`matplotlib.pyplot.hist`.
+    data: "DataFrame" :
+        
+    column: Union[Label :
+        
+    Sequence[Label]] :
+         (Default value = None)
+    grid: bool :
+         (Default value = True)
+    xlabelsize: Optional[int] :
+         (Default value = None)
+    xrot: Optional[float] :
+         (Default value = None)
+    ylabelsize: Optional[int] :
+         (Default value = None)
+    yrot: Optional[float] :
+         (Default value = None)
+    sharex: bool :
+         (Default value = False)
+    sharey: bool :
+         (Default value = False)
+    figsize: Optional[Tuple[int :
+        
+    int]] :
+         (Default value = None)
+    layout: Optional[Tuple[int :
+        
+    bins: Union[int :
+        
+    Sequence[int]] :
+         (Default value = 10)
+    backend: Optional[str] :
+         (Default value = None)
+    legend: bool :
+         (Default value = False)
 
     Returns
     -------
     matplotlib.AxesSubplot or numpy.ndarray of them
+        
 
     See Also
     --------
     matplotlib.pyplot.hist : Plot a histogram using matplotlib.
-
     Examples
     --------
     This example draws a histogram based on the length and width of
     some animals, displayed in three bins
-
+    
     .. plot::
         :context: close-figs
-
-        >>> df = pd.DataFrame({
+    >>> df = pd.DataFrame({
         ...     'length': [1.5, 0.5, 1.2, 0.9, 3],
         ...     'width': [0.7, 0.2, 0.15, 0.2, 1.1]
         ...     }, index=['pig', 'rabbit', 'duck', 'chicken', 'horse'])
@@ -458,6 +502,37 @@
     return_type=None,
     **kwargs,
 ):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+    column :
+         (Default value = None)
+    by :
+         (Default value = None)
+    ax :
+         (Default value = None)
+    fontsize :
+         (Default value = None)
+    rot :
+         (Default value = 0)
+    grid :
+         (Default value = True)
+    figsize :
+         (Default value = None)
+    layout :
+         (Default value = None)
+    return_type :
+         (Default value = None)
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     plot_backend = _get_plot_backend("matplotlib")
     return plot_backend.boxplot(
         data,
@@ -490,6 +565,37 @@
     backend=None,
     **kwargs,
 ):
+    """
+
+    Parameters
+    ----------
+    column :
+         (Default value = None)
+    by :
+         (Default value = None)
+    ax :
+         (Default value = None)
+    fontsize :
+         (Default value = None)
+    rot :
+         (Default value = 0)
+    grid :
+         (Default value = True)
+    figsize :
+         (Default value = None)
+    layout :
+         (Default value = None)
+    return_type :
+         (Default value = None)
+    backend :
+         (Default value = None)
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     plot_backend = _get_plot_backend(backend)
     return plot_backend.boxplot_frame(
         self,
@@ -521,70 +627,72 @@
     backend=None,
     **kwargs,
 ):
-    """
-    Make box plots from DataFrameGroupBy data.
+    """Make box plots from DataFrameGroupBy data.
 
     Parameters
     ----------
     grouped : Grouped DataFrame
+        
     subplots : bool
         * ``False`` - no subplots will be used
-        * ``True`` - create a subplot for each group.
-
+        * ``True`` - create a subplot for each group. (Default value = True)
     column : column name or list of names, or vector
-        Can be any valid input to groupby.
+        Can be any valid input to groupby. (Default value = None)
     fontsize : int or str
+         (Default value = None)
     rot : label rotation angle
+         (Default value = 0)
     grid : Setting this to True will show the grid
+         (Default value = True)
     ax : Matplotlib axis object, default None
+         (Default value = None)
     figsize : A tuple (width, height) in inches
+         (Default value = None)
     layout : tuple (optional)
-        The layout of the plot: (rows, columns).
+        The layout of the plot: (rows, columns). (Default value = None)
     sharex : bool, default False
         Whether x-axes will be shared among subplots.
-
-        .. versionadded:: 0.23.1
+        .. versionadded:: 0.23.1 (Default value = False)
     sharey : bool, default True
         Whether y-axes will be shared among subplots.
-
-        .. versionadded:: 0.23.1
+        .. versionadded:: 0.23.1 (Default value = True)
     backend : str, default None
         Backend to use instead of the backend specified in the option
         ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to
         specify the ``plotting.backend`` for the whole session, set
         ``pd.options.plotting.backend``.
-
-        .. versionadded:: 1.0.0
-
-    **kwargs
+        .. versionadded:: 1.0.0 (Default value = None)
+    **kwargs :
         All other plotting keyword arguments to be passed to
         matplotlib's boxplot function.
 
     Returns
     -------
     dict of key/value = group key/DataFrame.boxplot return value
+        
     or DataFrame.boxplot return value in case subplots=figures=False
+        
 
     Examples
     --------
     You can create boxplots for grouped data and show them as separate subplots:
-
+    
     .. plot::
         :context: close-figs
-
-        >>> import itertools
+    
+    
+    The ``subplots=False`` option shows the boxplots in a single figure.
+    
+    .. plot::
+        :context: close-figs
+    >>> import itertools
         >>> tuples = [t for t in itertools.product(range(1000), range(4))]
         >>> index = pd.MultiIndex.from_tuples(tuples, names=['lvl0', 'lvl1'])
         >>> data = np.random.randn(len(index),4)
         >>> df = pd.DataFrame(data, columns=list('ABCD'), index=index)
         >>> grouped = df.groupby(level='lvl1')
         >>> grouped.boxplot(rot=45, fontsize=12, figsize=(8,10))
-
-    The ``subplots=False`` option shows the boxplots in a single figure.
-
-    .. plot::
-        :context: close-figs
-
+    
         >>> grouped.boxplot(subplots=False, rot=45, fontsize=12)
     """
     plot_backend = _get_plot_backend(backend)
@@ -605,9 +713,8 @@
 
 
 class PlotAccessor(PandasObject):
-    """
-    Make plots of Series or DataFrame.
-
+    """Make plots of Series or DataFrame.
+    
     Uses the backend specified by the
     option ``plotting.backend``. By default, matplotlib is used.
 
@@ -622,7 +729,6 @@
         DataFrame.
     kind : str
         The kind of plot to produce:
-
         - 'line' : line plot (default)
         - 'bar' : vertical bar plot
         - 'barh' : horizontal bar plot
@@ -664,15 +770,12 @@
     logx : bool or 'sym', default False
         Use log scaling or symlog scaling on x axis.
         .. versionchanged:: 0.25.0
-
     logy : bool or 'sym' default False
         Use log scaling or symlog scaling on y axis.
         .. versionchanged:: 0.25.0
-
     loglog : bool or 'sym', default False
         Use log scaling or symlog scaling on both x and y axes.
         .. versionchanged:: 0.25.0
-
     xticks : sequence
         Values to use for the xticks.
     yticks : sequence
@@ -683,14 +786,10 @@
         Set the y limits of the current axes.
     xlabel : label, optional
         Name to use for the xlabel on x-axis. Default uses index name as xlabel.
-
         .. versionadded:: 1.1.0
-
     ylabel : label, optional
         Name to use for the ylabel on y-axis. Default will show no ylabel.
-
         .. versionadded:: 1.1.0
-
     rot : int, default None
         Rotation for ticks (xticks for vertical, yticks for horizontal
         plots).
@@ -733,15 +832,13 @@
         ``plotting.backend``. For instance, 'matplotlib'. Alternatively, to
         specify the ``plotting.backend`` for the whole session, set
         ``pd.options.plotting.backend``.
-
         .. versionadded:: 1.0.0
-
-    **kwargs
+    **kwargs :
         Options to pass to matplotlib plotting method.
 
     Returns
     -------
-    :class:`matplotlib.axes.Axes` or numpy.ndarray of them
+    class:`matplotlib.axes.Axes` or numpy.ndarray of them
         If the backend is not the default matplotlib one, the return value
         will be the object returned by the backend.
 
@@ -765,12 +862,25 @@
 
     @staticmethod
     def _get_call_args(backend_name, data, args, kwargs):
-        """
-        This function makes calls to this accessor `__call__` method compatible
+        """This function makes calls to this accessor `__call__` method compatible
         with the previous `SeriesPlotMethods.__call__` and
         `DataFramePlotMethods.__call__`. Those had slightly different
         signatures, since `DataFramePlotMethods` accepted `x` and `y`
-        parameters.
+
+        Parameters
+        ----------
+        backend_name :
+            
+        data :
+            
+        args :
+            
+        kwargs :
+            
+
+        Returns
+        -------
+
         """
         if isinstance(data, ABCSeries):
             arg_def = [
@@ -1008,11 +1118,23 @@
     @Substitution(kind="line")
     @Appender(_bar_or_line_doc)
     def line(self, x=None, y=None, **kwargs):
-        """
-        Plot Series or DataFrame as lines.
-
+        """Plot Series or DataFrame as lines.
+        
         This function is useful to plot lines using DataFrame's values
         as coordinates.
+
+        Parameters
+        ----------
+        x :
+             (Default value = None)
+        y :
+             (Default value = None)
+        **kwargs :
+            
+
+        Returns
+        -------
+
         """
         return self(kind="line", x=x, y=y, **kwargs)
 
@@ -1095,14 +1217,26 @@
     @Substitution(kind="bar")
     @Appender(_bar_or_line_doc)
     def bar(self, x=None, y=None, **kwargs):
-        """
-        Vertical bar plot.
-
+        """Vertical bar plot.
+        
         A bar plot is a plot that presents categorical data with
         rectangular bars with lengths proportional to the values that they
         represent. A bar plot shows comparisons among discrete categories. One
         axis of the plot shows the specific categories being compared, and the
         other axis represents a measured value.
+
+        Parameters
+        ----------
+        x :
+             (Default value = None)
+        y :
+             (Default value = None)
+        **kwargs :
+            
+
+        Returns
+        -------
+
         """
         return self(kind="bar", x=x, y=y, **kwargs)
 
@@ -1181,21 +1315,33 @@
     @Substitution(kind="bar")
     @Appender(_bar_or_line_doc)
     def barh(self, x=None, y=None, **kwargs):
-        """
-        Make a horizontal bar plot.
-
+        """Make a horizontal bar plot.
+        
         A horizontal bar plot is a plot that presents quantitative data with
         rectangular bars with lengths proportional to the values that they
         represent. A bar plot shows comparisons among discrete categories. One
         axis of the plot shows the specific categories being compared, and the
         other axis represents a measured value.
+
+        Parameters
+        ----------
+        x :
+             (Default value = None)
+        y :
+             (Default value = None)
+        **kwargs :
+            
+
+        Returns
+        -------
+
         """
         return self(kind="barh", x=x, y=y, **kwargs)
 
     def box(self, by=None, **kwargs):
-        r"""
+        """r"""
         Make a box plot of the DataFrame columns.
-
+        
         A box plot is a method for graphically depicting groups of numerical
         data through their quartiles.
         The box extends from the Q1 to Q3 quartile values of the data,
@@ -1203,49 +1349,46 @@
         of box to show the range of the data. The position of the whiskers
         is set by default to 1.5*IQR (IQR = Q3 - Q1) from the edges of the
         box. Outlier points are those past the end of the whiskers.
-
+        
         For further details see Wikipedia's
         entry for `boxplot <https://en.wikipedia.org/wiki/Box_plot>`__.
-
+        
         A consideration when using this chart is that the box and the whiskers
         can overlap, which is very common when plotting small sets of data.
 
         Parameters
         ----------
         by : str or sequence
-            Column in the DataFrame to group by.
-        **kwargs
+            Column in the DataFrame to group by. (Default value = None)
+        **kwargs :
             Additional keywords are documented in
             :meth:`DataFrame.plot`.
 
         Returns
         -------
-        :class:`matplotlib.axes.Axes` or numpy.ndarray of them
+        class:`matplotlib.axes.Axes` or numpy.ndarray of them
+            
 
         See Also
         --------
         DataFrame.boxplot: Another method to draw a box plot.
         Series.plot.box: Draw a box plot from a Series object.
         matplotlib.pyplot.boxplot: Draw a box plot in matplotlib.
-
         Examples
         --------
         Draw a box plot from a DataFrame with four columns of randomly
         generated data.
-
-        .. plot::
-            :context: close-figs
-
-            >>> data = np.random.randn(25, 4)
+        
+        .. plot::
+            :context: close-figs
+        >>> data = np.random.randn(25, 4)
             >>> df = pd.DataFrame(data, columns=list('ABCD'))
             >>> ax = df.plot.box()
-        """
         return self(kind="box", by=by, **kwargs)
 
     def hist(self, by=None, bins=10, **kwargs):
-        """
-        Draw one histogram of the DataFrame's columns.
-
+        """Draw one histogram of the DataFrame's columns.
+        
         A histogram is a representation of the distribution of data.
         This function groups the values of all given Series in the DataFrame
         into bins and draws all bins in one :class:`matplotlib.axes.Axes`.
@@ -1254,34 +1397,32 @@
         Parameters
         ----------
         by : str or sequence, optional
-            Column in the DataFrame to group by.
+            Column in the DataFrame to group by. (Default value = None)
         bins : int, default 10
-            Number of histogram bins to be used.
-        **kwargs
+            Number of histogram bins to be used. (Default value = 10)
+        **kwargs :
             Additional keyword arguments are documented in
             :meth:`DataFrame.plot`.
 
         Returns
         -------
-        class:`matplotlib.AxesSubplot`
+        class : `matplotlib.AxesSubplot`
             Return a histogram plot.
 
         See Also
         --------
         DataFrame.hist : Draw histograms per DataFrame's Series.
         Series.hist : Draw a histogram with Series' data.
-
         Examples
         --------
         When we draw a dice 6000 times, we expect to get each value around 1000
         times. But when we draw two dices and sum the result, the distribution
         is going to be quite different. A histogram illustrates those
         distributions.
-
-        .. plot::
-            :context: close-figs
-
-            >>> df = pd.DataFrame(
+        
+        .. plot::
+            :context: close-figs
+        >>> df = pd.DataFrame(
             ...     np.random.randint(1, 7, 6000),
             ...     columns = ['one'])
             >>> df['two'] = df['one'] + np.random.randint(1, 7, 6000)
@@ -1290,14 +1431,13 @@
         return self(kind="hist", by=by, bins=bins, **kwargs)
 
     def kde(self, bw_method=None, ind=None, **kwargs):
-        """
-        Generate Kernel Density Estimate plot using Gaussian kernels.
-
+        """Generate Kernel Density Estimate plot using Gaussian kernels.
+        
         In statistics, `kernel density estimation`_ (KDE) is a non-parametric
         way to estimate the probability density function (PDF) of a random
         variable. This function uses Gaussian kernels and includes automatic
         bandwidth determination.
-
+        
         .. _kernel density estimation:
             https://en.wikipedia.org/wiki/Kernel_density_estimation
 
@@ -1313,86 +1453,92 @@
             1000 equally spaced points are used. If `ind` is a NumPy array, the
             KDE is evaluated at the points passed. If `ind` is an integer,
             `ind` number of equally spaced points are used.
-        **kwargs
+        **kwargs :
             Additional keyword arguments are documented in
             :meth:`pandas.%(this-datatype)s.plot`.
 
         Returns
         -------
         matplotlib.axes.Axes or numpy.ndarray of them
+            
 
         See Also
         --------
         scipy.stats.gaussian_kde : Representation of a kernel-density
             estimate using Gaussian kernels. This is the function used
             internally to estimate the PDF.
-
         Examples
         --------
         Given a Series of points randomly sampled from an unknown
         distribution, estimate its PDF using KDE with automatic
         bandwidth determination and plot the results, evaluating them at
         1000 equally spaced points (default):
-
-        .. plot::
-            :context: close-figs
-
-            >>> s = pd.Series([1, 2, 2.5, 3, 3.5, 4, 5])
-            >>> ax = s.plot.kde()
-
+        
+        .. plot::
+            :context: close-figs
+        
+        
         A scalar bandwidth can be specified. Using a small bandwidth value can
         lead to over-fitting, while using a large bandwidth value may result
         in under-fitting:
-
-        .. plot::
-            :context: close-figs
-
-            >>> ax = s.plot.kde(bw_method=0.3)
-
-        .. plot::
-            :context: close-figs
-
-            >>> ax = s.plot.kde(bw_method=3)
-
+        
+        .. plot::
+            :context: close-figs
+        
+        
+        .. plot::
+            :context: close-figs
+        
+        
         Finally, the `ind` parameter determines the evaluation points for the
         plot of the estimated PDF:
-
-        .. plot::
-            :context: close-figs
-
+        
+        .. plot::
+            :context: close-figs
+        
+        
+        For DataFrame, it works in the same way:
+        
+        .. plot::
+            :context: close-figs
+        
+        
+        A scalar bandwidth can be specified. Using a small bandwidth value can
+        lead to over-fitting, while using a large bandwidth value may result
+        in under-fitting:
+        
+        .. plot::
+            :context: close-figs
+        
+        
+        .. plot::
+            :context: close-figs
+        
+        
+        Finally, the `ind` parameter determines the evaluation points for the
+        plot of the estimated PDF:
+        
+        .. plot::
+            :context: close-figs
+        >>> s = pd.Series([1, 2, 2.5, 3, 3.5, 4, 5])
+            >>> ax = s.plot.kde()
+        
+            >>> ax = s.plot.kde(bw_method=0.3)
+        
+            >>> ax = s.plot.kde(bw_method=3)
+        
             >>> ax = s.plot.kde(ind=[1, 2, 3, 4, 5])
-
-        For DataFrame, it works in the same way:
-
-        .. plot::
-            :context: close-figs
-
+        
             >>> df = pd.DataFrame({
             ...     'x': [1, 2, 2.5, 3, 3.5, 4, 5],
             ...     'y': [4, 4, 4.5, 5, 5.5, 6, 6],
             ... })
             >>> ax = df.plot.kde()
-
-        A scalar bandwidth can be specified. Using a small bandwidth value can
-        lead to over-fitting, while using a large bandwidth value may result
-        in under-fitting:
-
-        .. plot::
-            :context: close-figs
-
+        
             >>> ax = df.plot.kde(bw_method=0.3)
-
-        .. plot::
-            :context: close-figs
-
+        
             >>> ax = df.plot.kde(bw_method=3)
-
-        Finally, the `ind` parameter determines the evaluation points for the
-        plot of the estimated PDF:
-
-        .. plot::
-            :context: close-figs
-
+        
             >>> ax = df.plot.kde(ind=[1, 2, 3, 4, 5, 6])
         """
         return self(kind="kde", bw_method=bw_method, ind=ind, **kwargs)
@@ -1400,9 +1546,8 @@
     density = kde
 
     def area(self, x=None, y=None, **kwargs):
-        """
-        Draw a stacked area plot.
-
+        """Draw a stacked area plot.
+        
         An area plot displays quantitative data visually.
         This function wraps the matplotlib area function.
 
@@ -1415,7 +1560,7 @@
         stacked : bool, default True
             Area plots are stacked by default. Set to False to create a
             unstacked plot.
-        **kwargs
+        **kwargs :
             Additional keyword arguments are documented in
             :meth:`DataFrame.plot`.
 
@@ -1427,42 +1572,43 @@
         See Also
         --------
         DataFrame.plot : Make plots of DataFrame using matplotlib / pylab.
-
         Examples
         --------
         Draw an area plot based on basic business metrics:
-
-        .. plot::
-            :context: close-figs
-
-            >>> df = pd.DataFrame({
+        
+        .. plot::
+            :context: close-figs
+        
+        
+        Area plots are stacked by default. To produce an unstacked plot,
+        pass ``stacked=False``:
+        
+        .. plot::
+            :context: close-figs
+        
+        
+        Draw an area plot for a single column:
+        
+        .. plot::
+            :context: close-figs
+        
+        
+        Draw with a different `x`:
+        
+        .. plot::
+            :context: close-figs
+        >>> df = pd.DataFrame({
             ...     'sales': [3, 2, 3, 9, 10, 6],
             ...     'signups': [5, 5, 6, 12, 14, 13],
             ...     'visits': [20, 42, 28, 62, 81, 50],
             ... }, index=pd.date_range(start='2018/01/01', end='2018/07/01',
             ...                        freq='M'))
             >>> ax = df.plot.area()
-
-        Area plots are stacked by default. To produce an unstacked plot,
-        pass ``stacked=False``:
-
-        .. plot::
-            :context: close-figs
-
+        
             >>> ax = df.plot.area(stacked=False)
-
-        Draw an area plot for a single column:
-
-        .. plot::
-            :context: close-figs
-
+        
             >>> ax = df.plot.area(y='sales')
-
-        Draw with a different `x`:
-
-        .. plot::
-            :context: close-figs
-
+        
             >>> df = pd.DataFrame({
             ...     'sales': [3, 2, 3],
             ...     'visits': [20, 42, 28],
@@ -1473,9 +1619,8 @@
         return self(kind="area", x=x, y=y, **kwargs)
 
     def pie(self, **kwargs):
-        """
-        Generate a pie plot.
-
+        """Generate a pie plot.
+        
         A pie plot is a proportional representation of the numerical data in a
         column. This function wraps :meth:`matplotlib.pyplot.pie` for the
         specified column. If no column reference is passed and
@@ -1487,7 +1632,7 @@
         y : int or label, optional
             Label or position of the column to plot.
             If not provided, ``subplots=True`` argument must be passed.
-        **kwargs
+        **kwargs :
             Keyword arguments to pass on to :meth:`DataFrame.plot`.
 
         Returns
@@ -1499,24 +1644,23 @@
         --------
         Series.plot.pie : Generate a pie plot for a Series.
         DataFrame.plot : Make plots of a DataFrame.
-
         Examples
         --------
         In the example below we have a DataFrame with the information about
         planet's mass and radius. We pass the 'mass' column to the
         pie function to get a pie plot.
-
-        .. plot::
-            :context: close-figs
-
-            >>> df = pd.DataFrame({'mass': [0.330, 4.87 , 5.97],
+        
+        .. plot::
+            :context: close-figs
+        
+        
+        .. plot::
+            :context: close-figs
+        >>> df = pd.DataFrame({'mass': [0.330, 4.87 , 5.97],
             ...                    'radius': [2439.7, 6051.8, 6378.1]},
             ...                   index=['Mercury', 'Venus', 'Earth'])
             >>> plot = df.plot.pie(y='mass', figsize=(5, 5))
-
-        .. plot::
-            :context: close-figs
-
+        
             >>> plot = df.plot.pie(subplots=True, figsize=(11, 6))
         """
         if (
@@ -1528,9 +1672,8 @@
         return self(kind="pie", **kwargs)
 
     def scatter(self, x, y, s=None, c=None, **kwargs):
-        """
-        Create a scatter plot with varying marker point size and color.
-
+        """Create a scatter plot with varying marker point size and color.
+        
         The coordinates of each point are defined by two dataframe columns and
         filled circles are used to represent each point. This kind of plot is
         useful to see complex correlations between two variables. Points could
@@ -1548,63 +1691,54 @@
             coordinates for each point.
         s : str, scalar or array_like, optional
             The size of each point. Possible values are:
-
             - A string with the name of the column to be used for marker's size.
-
             - A single scalar so all points have the same size.
-
             - A sequence of scalars, which will be used for each point's size
-              recursively. For instance, when passing [2,14] all points size
-              will be either 2 or 14, alternatively.
-
-              .. versionchanged:: 1.1.0
-
+            recursively. For instance, when passing [2,14] all points size
+            will be either 2 or 14, alternatively.
+            .. versionchanged:: 1.1.0 (Default value = None)
         c : str, int or array_like, optional
             The color of each point. Possible values are:
-
             - A single color string referred to by name, RGB or RGBA code,
-              for instance 'red' or '#a98d19'.
-
+            for instance 'red' or '#a98d19'.
             - A sequence of color strings referred to by name, RGB or RGBA
-              code, which will be used for each point's color recursively. For
-              instance ['green','yellow'] all points will be filled in green or
-              yellow, alternatively.
-
+            code, which will be used for each point's color recursively. For
+            instance ['green','yellow'] all points will be filled in green or
+            yellow, alternatively.
             - A column name or position whose values will be used to color the
-              marker points according to a colormap.
-
-        **kwargs
+            marker points according to a colormap. (Default value = None)
+        **kwargs :
             Keyword arguments to pass on to :meth:`DataFrame.plot`.
 
         Returns
         -------
-        :class:`matplotlib.axes.Axes` or numpy.ndarray of them
+        class:`matplotlib.axes.Axes` or numpy.ndarray of them
+            
 
         See Also
         --------
         matplotlib.pyplot.scatter : Scatter plot using multiple input data
             formats.
-
         Examples
         --------
         Let's see how to draw a scatter plot using coordinates from the values
         in a DataFrame's columns.
-
-        .. plot::
-            :context: close-figs
-
-            >>> df = pd.DataFrame([[5.1, 3.5, 0], [4.9, 3.0, 0], [7.0, 3.2, 1],
+        
+        .. plot::
+            :context: close-figs
+        
+        
+        And now with the color determined by a column as well.
+        
+        .. plot::
+            :context: close-figs
+        >>> df = pd.DataFrame([[5.1, 3.5, 0], [4.9, 3.0, 0], [7.0, 3.2, 1],
             ...                    [6.4, 3.2, 1], [5.9, 3.0, 2]],
             ...                   columns=['length', 'width', 'species'])
             >>> ax1 = df.plot.scatter(x='length',
             ...                       y='width',
             ...                       c='DarkBlue')
-
-        And now with the color determined by a column as well.
-
-        .. plot::
-            :context: close-figs
-
+        
             >>> ax2 = df.plot.scatter(x='length',
             ...                       y='width',
             ...                       c='species',
@@ -1613,13 +1747,12 @@
         return self(kind="scatter", x=x, y=y, s=s, c=c, **kwargs)
 
     def hexbin(self, x, y, C=None, reduce_C_function=None, gridsize=None, **kwargs):
-        """
-        Generate a hexagonal binning plot.
-
+        """Generate a hexagonal binning plot.
+        
         Generate a hexagonal binning plot of `x` versus `y`. If `C` is `None`
         (the default), this is a histogram of the number of occurrences
         of the observations at ``(x[i], y[i])``.
-
+        
         If `C` is specified, specifies values at given coordinates
         ``(x[i], y[i])``. These values are accumulated for each hexagonal
         bin and then reduced according to `reduce_C_function`,
@@ -1634,18 +1767,18 @@
         y : int or str
             The column label or position for y points.
         C : int or str, optional
-            The column label or position for the value of `(x, y)` point.
+            The column label or position for the value of `(x, y)` point. (Default value = None)
         reduce_C_function : callable, default `np.mean`
             Function of one argument that reduces all the values in a bin to
-            a single number (e.g. `np.mean`, `np.max`, `np.sum`, `np.std`).
+            a single number (e.g. `np.mean`, `np.max`, `np.sum`, `np.std`). (Default value = None)
         gridsize : int or tuple of (int, int), default 100
             The number of hexagons in the x-direction.
             The corresponding number of hexagons in the y-direction is
             chosen in a way that the hexagons are approximately regular.
             Alternatively, gridsize can be a tuple with two elements
             specifying the number of hexagons in the x-direction and the
-            y-direction.
-        **kwargs
+            y-direction. (Default value = None)
+        **kwargs :
             Additional keyword arguments are documented in
             :meth:`DataFrame.plot`.
 
@@ -1659,28 +1792,27 @@
         DataFrame.plot : Make plots of a DataFrame.
         matplotlib.pyplot.hexbin : Hexagonal binning plot using matplotlib,
             the matplotlib function that is used under the hood.
-
         Examples
         --------
         The following examples are generated with random data from
         a normal distribution.
-
-        .. plot::
-            :context: close-figs
-
-            >>> n = 10000
-            >>> df = pd.DataFrame({'x': np.random.randn(n),
-            ...                    'y': np.random.randn(n)})
-            >>> ax = df.plot.hexbin(x='x', y='y', gridsize=20)
-
+        
+        .. plot::
+            :context: close-figs
+        
+        
         The next example uses `C` and `np.sum` as `reduce_C_function`.
         Note that `'observations'` values ranges from 1 to 5 but the result
         plot shows values up to more than 25. This is because of the
         `reduce_C_function`.
-
-        .. plot::
-            :context: close-figs
-
+        
+        .. plot::
+            :context: close-figs
+        >>> n = 10000
+            >>> df = pd.DataFrame({'x': np.random.randn(n),
+            ...                    'y': np.random.randn(n)})
+            >>> ax = df.plot.hexbin(x='x', y='y', gridsize=20)
+        
             >>> n = 500
             >>> df = pd.DataFrame({
             ...     'coord_x': np.random.uniform(-3, 3, size=n),
@@ -1706,23 +1838,22 @@
 
 
 def _find_backend(backend: str):
-    """
-    Find a pandas plotting backend>
+    """Find a pandas plotting backend>
 
     Parameters
     ----------
     backend : str
         The identifier for the backend. Either an entrypoint item registered
         with pkg_resources, or a module name.
+    backend: str :
+        
+
+    Returns
+    -------
 
     Notes
     -----
     Modifies _backends with imported backends as a side effect.
-
-    Returns
-    -------
-    types.ModuleType
-        The imported backend.
     """
     import pkg_resources  # Delay import for performance.
 
@@ -1758,16 +1889,24 @@
 
 def _get_plot_backend(backend=None):
     """
-    Return the plotting backend to use (e.g. `pandas.plotting._matplotlib`).
-
-    The plotting system of pandas has been using matplotlib, but the idea here
-    is that it can also work with other third-party backends. In the future,
-    this function will return the backend from a pandas option, and all the
-    rest of the code in this file will use the backend specified there for the
-    plotting.
-
-    The backend is imported lazily, as matplotlib is a soft dependency, and
-    pandas can be used without it being installed.
+
+    Parameters
+    ----------
+    backend :
+         (Default value = None)
+
+    Returns
+    -------
+    type
+        The plotting system of pandas has been using matplotlib, but the idea here
+        is that it can also work with other third-party backends. In the future,
+        this function will return the backend from a pandas option, and all the
+        rest of the code in this file will use the backend specified there for the
+        plotting.
+        
+        The backend is imported lazily, as matplotlib is a soft dependency, and
+        pandas can be used without it being installed.
+
     """
     backend = backend or get_option("plotting.backend")
 
