# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/arrays/integer.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/arrays/integer.py
@@ -37,13 +37,19 @@
 
 
 class _IntegerDtype(BaseMaskedDtype):
-    """
-    An ExtensionDtype to hold a single size & kind of integer dtype.
-
+    """An ExtensionDtype to hold a single size & kind of integer dtype.
+    
     These specific implementations are subclasses of the non-public
     _IntegerDtype. For example we have Int8Dtype to represent signed int 8s.
-
+    
     The attributes name & type are set when these subclasses are created.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name: str
@@ -56,42 +62,51 @@
 
     @cache_readonly
     def is_signed_integer(self) -> bool:
+        """ """
         return self.kind == "i"
 
     @cache_readonly
     def is_unsigned_integer(self) -> bool:
+        """ """
         return self.kind == "u"
 
     @property
     def _is_numeric(self) -> bool:
+        """ """
         return True
 
     @cache_readonly
     def numpy_dtype(self) -> np.dtype:
-        """ Return an instance of our numpy dtype """
+        """ """
         return np.dtype(self.type)
 
     @cache_readonly
     def kind(self) -> str:
+        """ """
         return self.numpy_dtype.kind
 
     @cache_readonly
     def itemsize(self) -> int:
-        """ Return the number of bytes in this dtype """
+        """ """
         return self.numpy_dtype.itemsize
 
     @classmethod
     def construct_array_type(cls) -> Type["IntegerArray"]:
-        """
-        Return the array type associated with this dtype.
+        """Return the array type associated with this dtype."""
+        return IntegerArray
+
+    def _get_common_dtype(self, dtypes: List[DtypeObj]) -> Optional[DtypeObj]:
+        """
+
+        Parameters
+        ----------
+        dtypes: List[DtypeObj] :
+            
 
         Returns
         -------
-        type
-        """
-        return IntegerArray
-
-    def _get_common_dtype(self, dtypes: List[DtypeObj]) -> Optional[DtypeObj]:
+
+        """
         # we only handle nullable EA dtypes and numeric numpy dtypes
         if not all(
             isinstance(t, BaseMaskedDtype)
@@ -139,33 +154,46 @@
 
 
 def integer_array(values, dtype=None, copy: bool = False,) -> "IntegerArray":
-    """
-    Infer and return an integer array of the values.
+    """Infer and return an integer array of the values.
 
     Parameters
     ----------
     values : 1D list-like
+        
     dtype : dtype, optional
-        dtype to coerce
+        dtype to coerce (Default value = None)
     copy : bool, default False
+        
+    copy: bool :
+         (Default value = False)
 
     Returns
     -------
     IntegerArray
-
-    Raises
-    ------
-    TypeError if incompatible types
+        
+
+    
     """
     values, mask = coerce_to_array(values, dtype=dtype, copy=copy)
     return IntegerArray(values, mask)
 
 
 def safe_cast(values, dtype, copy: bool):
-    """
-    Safely cast the values to the dtype if they
+    """Safely cast the values to the dtype if they
     are equivalent, meaning floats must be equivalent to the
     ints.
+
+    Parameters
+    ----------
+    values :
+        
+    dtype :
+        
+    copy: bool :
+        
+
+    Returns
+    -------
 
     """
     try:
@@ -184,20 +212,25 @@
 def coerce_to_array(
     values, dtype, mask=None, copy: bool = False,
 ) -> Tuple[np.ndarray, np.ndarray]:
-    """
-    Coerce the input values array to numpy arrays with a mask
+    """Coerce the input values array to numpy arrays with a mask
 
     Parameters
     ----------
     values : 1D list-like
+        
     dtype : integer dtype
+        
     mask : bool 1D array, optional
+         (Default value = None)
     copy : bool, default False
         if True, copy the input
+    copy: bool :
+         (Default value = False)
 
     Returns
     -------
-    tuple of (values, mask)
+
+    
     """
     # if values is integer numpy array, preserve it's dtype
     if dtype is None and hasattr(values, "dtype"):
@@ -280,29 +313,28 @@
 
 
 class IntegerArray(BaseMaskedArray):
-    """
-    Array of integer (optional missing) values.
-
+    """Array of integer (optional missing) values.
+    
     .. versionadded:: 0.24.0
-
+    
     .. versionchanged:: 1.0.0
-
+    
        Now uses :attr:`pandas.NA` as the missing value rather
        than :attr:`numpy.nan`.
-
+    
     .. warning::
-
+    
        IntegerArray is currently experimental, and its API or internal
        implementation may change without warning.
-
+    
     We represent an IntegerArray with 2 numpy arrays:
-
+    
     - data: contains a numpy integer array of the appropriate dtype
     - mask: a boolean array holding a mask on the data, True is missing
-
+    
     To construct an IntegerArray from generic array-like input, use
     :func:`pandas.array` with one of the integer dtypes (see examples).
-
+    
     See :ref:`integer_na` for more.
 
     Parameters
@@ -314,35 +346,34 @@
     copy : bool, default False
         Whether to copy the `values` and `mask`.
 
+    Returns
+    -------
+    IntegerArray
+        
+
     Attributes
     ----------
     None
-
     Methods
     -------
     None
-
-    Returns
-    -------
-    IntegerArray
-
     Examples
     --------
     Create an IntegerArray with :func:`pandas.array`.
-
+    
+    
+    String aliases for the dtypes are also available. They are capitalized.
     >>> int_array = pd.array([1, None, 3], dtype=pd.Int32Dtype())
     >>> int_array
     <IntegerArray>
     [1, <NA>, 3]
     Length: 3, dtype: Int32
-
-    String aliases for the dtypes are also available. They are capitalized.
-
+    
     >>> pd.array([1, None, 3], dtype='Int32')
     <IntegerArray>
     [1, <NA>, 3]
     Length: 3, dtype: Int32
-
+    
     >>> pd.array([1, None, 3], dtype='UInt16')
     <IntegerArray>
     [1, <NA>, 3]
@@ -354,6 +385,7 @@
 
     @cache_readonly
     def dtype(self) -> _IntegerDtype:
+        """ """
         return _dtypes[str(self._data.dtype)]
 
     def __init__(self, values: np.ndarray, mask: np.ndarray, copy: bool = False):
@@ -375,12 +407,42 @@
 
     @classmethod
     def _from_sequence(cls, scalars, dtype=None, copy: bool = False) -> "IntegerArray":
+        """
+
+        Parameters
+        ----------
+        scalars :
+            
+        dtype :
+             (Default value = None)
+        copy: bool :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         return integer_array(scalars, dtype=dtype, copy=copy)
 
     @classmethod
     def _from_sequence_of_strings(
         cls, strings, dtype=None, copy: bool = False
     ) -> "IntegerArray":
+        """
+
+        Parameters
+        ----------
+        strings :
+            
+        dtype :
+             (Default value = None)
+        copy: bool :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         scalars = to_numeric(strings, errors="raise")
         return cls._from_sequence(scalars, dtype, copy)
 
@@ -415,6 +477,17 @@
                 inputs2.append(x)
 
         def reconstruct(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             # we don't worry about scalar `x` here, since we
             # raise for reduce up above.
 
@@ -432,11 +505,21 @@
             return reconstruct(result)
 
     def _coerce_to_array(self, value) -> Tuple[np.ndarray, np.ndarray]:
+        """
+
+        Parameters
+        ----------
+        value :
+            
+
+        Returns
+        -------
+
+        """
         return coerce_to_array(value, dtype=self.dtype)
 
     def astype(self, dtype, copy: bool = True) -> ArrayLike:
-        """
-        Cast to a NumPy array or ExtensionArray with 'dtype'.
+        """Cast to a NumPy array or ExtensionArray with 'dtype'.
 
         Parameters
         ----------
@@ -446,17 +529,15 @@
             Whether to copy the data, even if not necessary. If False,
             a copy is made only if the old dtype does not match the
             new dtype.
+        copy: bool :
+             (Default value = True)
 
         Returns
         -------
         ndarray or ExtensionArray
             NumPy ndarray, BooleanArray or IntegerArray with 'dtype' for its dtype.
 
-        Raises
-        ------
-        TypeError
-            if incompatible type with an IntegerDtype, equivalent of same_kind
-            casting
+        
         """
         from pandas.core.arrays.masked import BaseMaskedDtype
         from pandas.core.arrays.string_ import StringDtype
@@ -489,8 +570,10 @@
         return self.to_numpy(dtype=dtype, na_value=na_value, copy=False)
 
     def _values_for_argsort(self) -> np.ndarray:
-        """
-        Return values for sorting.
+        """Return values for sorting.
+
+        Parameters
+        ----------
 
         Returns
         -------
@@ -509,10 +592,32 @@
 
     @classmethod
     def _create_comparison_method(cls, op):
+        """
+
+        Parameters
+        ----------
+        op :
+            
+
+        Returns
+        -------
+
+        """
         op_name = op.__name__
 
         @unpack_zerodim_and_defer(op.__name__)
         def cmp_method(self, other):
+            """
+
+            Parameters
+            ----------
+            other :
+                
+
+            Returns
+            -------
+
+            """
             from pandas.arrays import BooleanArray
 
             mask = None
@@ -563,6 +668,21 @@
         return set_function_name(cmp_method, name, cls)
 
     def sum(self, skipna=True, min_count=0, **kwargs):
+        """
+
+        Parameters
+        ----------
+        skipna :
+             (Default value = True)
+        min_count :
+             (Default value = 0)
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         nv.validate_sum((), kwargs)
         result = masked_reductions.sum(
             values=self._data, mask=self._mask, skipna=skipna, min_count=min_count
@@ -571,12 +691,22 @@
 
     def _maybe_mask_result(self, result, mask, other, op_name: str):
         """
+
         Parameters
         ----------
-        result : array-like
-        mask : array-like bool
-        other : scalar or array-like
-        op_name : str
+        result :
+            
+        mask :
+            
+        other :
+            
+        op_name: str :
+            
+
+        Returns
+        -------
+
+        
         """
         # if we have a float operand we are by-definition
         # a float result
@@ -591,10 +721,32 @@
 
     @classmethod
     def _create_arithmetic_method(cls, op):
+        """
+
+        Parameters
+        ----------
+        op :
+            
+
+        Returns
+        -------
+
+        """
         op_name = op.__name__
 
         @unpack_zerodim_and_defer(op.__name__)
         def integer_arithmetic_method(self, other):
+            """
+
+            Parameters
+            ----------
+            other :
+                
+
+            Returns
+            -------
+
+            """
 
             omask = None
 
@@ -690,6 +842,7 @@
 
 @register_extension_dtype
 class Int8Dtype(_IntegerDtype):
+    """ """
     type = np.int8
     name = "Int8"
     __doc__ = _dtype_docstring.format(dtype="int8")
@@ -697,6 +850,7 @@
 
 @register_extension_dtype
 class Int16Dtype(_IntegerDtype):
+    """ """
     type = np.int16
     name = "Int16"
     __doc__ = _dtype_docstring.format(dtype="int16")
@@ -704,6 +858,7 @@
 
 @register_extension_dtype
 class Int32Dtype(_IntegerDtype):
+    """ """
     type = np.int32
     name = "Int32"
     __doc__ = _dtype_docstring.format(dtype="int32")
@@ -711,6 +866,7 @@
 
 @register_extension_dtype
 class Int64Dtype(_IntegerDtype):
+    """ """
     type = np.int64
     name = "Int64"
     __doc__ = _dtype_docstring.format(dtype="int64")
@@ -718,6 +874,7 @@
 
 @register_extension_dtype
 class UInt8Dtype(_IntegerDtype):
+    """ """
     type = np.uint8
     name = "UInt8"
     __doc__ = _dtype_docstring.format(dtype="uint8")
@@ -725,6 +882,7 @@
 
 @register_extension_dtype
 class UInt16Dtype(_IntegerDtype):
+    """ """
     type = np.uint16
     name = "UInt16"
     __doc__ = _dtype_docstring.format(dtype="uint16")
@@ -732,6 +890,7 @@
 
 @register_extension_dtype
 class UInt32Dtype(_IntegerDtype):
+    """ """
     type = np.uint32
     name = "UInt32"
     __doc__ = _dtype_docstring.format(dtype="uint32")
@@ -739,6 +898,7 @@
 
 @register_extension_dtype
 class UInt64Dtype(_IntegerDtype):
+    """ """
     type = np.uint64
     name = "UInt64"
     __doc__ = _dtype_docstring.format(dtype="uint64")
