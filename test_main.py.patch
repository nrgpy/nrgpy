# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpydoc/tests/test_main.py
+++ b/..//venv/lib/python3.8/site-packages/numpydoc/tests/test_main.py
@@ -6,9 +6,8 @@
 
 
 def _capture_stdout(func_name, *args, **kwargs):
-    """
-    Return stdout of calling `func_name`.
-
+    """Return stdout of calling `func_name`.
+    
     This docstring should be perfect, as it is used to test the
     validation with a docstring without errors.
 
@@ -16,8 +15,12 @@
     ----------
     func_name : callable
         Function to be called.
-    *args, **kwargs
+    *args, **kwargs :
         Will be passed to `func_name`.
+    *args :
+        
+    **kwargs :
+        
 
     Returns
     -------
@@ -27,7 +30,6 @@
     See Also
     --------
     sys.stdout : Python's file handler for stdout.
-
     Examples
     --------
     >>> _capture_stdout(print, 'hello world')
@@ -43,46 +45,38 @@
 
 
 def _docstring_with_errors():
-    """
-    this docstring should report some errors
-
-    Parameters
-    ----------
-    made_up_param : str
-    """
+    """this docstring should report some errors"""
     pass
 
 
 def _invalid_docstring():
-    """
-    This docstring should break the parsing.
-
-    See Also
-    --------
-    : this is invalid
-    """
+    """This docstring should break the parsing."""
     pass
 
 
 def test_renders_package_docstring():
+    """ """
     out = _capture_stdout(numpydoc.__main__.render_object,
                           'numpydoc')
     assert out.startswith('This package provides the numpydoc Sphinx')
 
 
 def test_renders_module_docstring():
+    """ """
     out = _capture_stdout(numpydoc.__main__.render_object,
                           'numpydoc.__main__')
     assert out.startswith('Implementing `python -m numpydoc` functionality.')
 
 
 def test_renders_function_docstring():
+    """ """
     out = _capture_stdout(numpydoc.__main__.render_object,
                           'numpydoc.tests.test_main._capture_stdout')
     assert out.startswith('Return stdout of calling')
 
 
 def test_render_object_returns_correct_exit_status():
+    """ """
     exit_status = numpydoc.__main__.render_object(
         'numpydoc.tests.test_main._capture_stdout')
     assert exit_status == 0
@@ -93,6 +87,7 @@
 
 
 def test_validate_detects_errors():
+    """ """
     out = _capture_stdout(numpydoc.__main__.validate_object,
                           'numpydoc.tests.test_main._docstring_with_errors')
     assert 'SS02' in out
@@ -104,6 +99,7 @@
 
 
 def test_validate_perfect_docstring():
+    """ """
     out = _capture_stdout(numpydoc.__main__.validate_object,
                           'numpydoc.tests.test_main._capture_stdout')
     assert out == ''
