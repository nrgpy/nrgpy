# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/polynomial/tests/test_chebyshev.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/polynomial/tests/test_chebyshev.py
@@ -12,6 +12,17 @@
 
 
 def trim(x):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+
+    Returns
+    -------
+
+    """
     return cheb.chebtrim(x, tol=1e-6)
 
 T0 = [1]
@@ -29,8 +40,10 @@
 
 
 class TestPrivate:
+    """ """
 
     def test__cseries_to_zseries(self):
+        """ """
         for i in range(5):
             inp = np.array([2] + [1]*i, np.double)
             tgt = np.array([.5]*i + [2] + [.5]*i, np.double)
@@ -38,6 +51,7 @@
             assert_equal(res, tgt)
 
     def test__zseries_to_cseries(self):
+        """ """
         for i in range(5):
             inp = np.array([.5]*i + [2] + [.5]*i, np.double)
             tgt = np.array([2] + [1]*i, np.double)
@@ -46,23 +60,30 @@
 
 
 class TestConstants:
+    """ """
 
     def test_chebdomain(self):
+        """ """
         assert_equal(cheb.chebdomain, [-1, 1])
 
     def test_chebzero(self):
+        """ """
         assert_equal(cheb.chebzero, [0])
 
     def test_chebone(self):
+        """ """
         assert_equal(cheb.chebone, [1])
 
     def test_chebx(self):
+        """ """
         assert_equal(cheb.chebx, [0, 1])
 
 
 class TestArithmetic:
+    """ """
 
     def test_chebadd(self):
+        """ """
         for i in range(5):
             for j in range(5):
                 msg = f"At i={i}, j={j}"
@@ -73,6 +94,7 @@
                 assert_equal(trim(res), trim(tgt), err_msg=msg)
 
     def test_chebsub(self):
+        """ """
         for i in range(5):
             for j in range(5):
                 msg = f"At i={i}, j={j}"
@@ -83,6 +105,7 @@
                 assert_equal(trim(res), trim(tgt), err_msg=msg)
 
     def test_chebmulx(self):
+        """ """
         assert_equal(cheb.chebmulx([0]), [0])
         assert_equal(cheb.chebmulx([1]), [0, 1])
         for i in range(1, 5):
@@ -91,6 +114,7 @@
             assert_equal(cheb.chebmulx(ser), tgt)
 
     def test_chebmul(self):
+        """ """
         for i in range(5):
             for j in range(5):
                 msg = f"At i={i}, j={j}"
@@ -101,6 +125,7 @@
                 assert_equal(trim(res), trim(tgt), err_msg=msg)
 
     def test_chebdiv(self):
+        """ """
         for i in range(5):
             for j in range(5):
                 msg = f"At i={i}, j={j}"
@@ -112,6 +137,7 @@
                 assert_equal(trim(res), trim(tgt), err_msg=msg)
 
     def test_chebpow(self):
+        """ """
         for i in range(5):
             for j in range(5):
                 msg = f"At i={i}, j={j}"
@@ -122,6 +148,7 @@
 
 
 class TestEvaluation:
+    """ """
     # coefficients of 1 + 2*x + 3*x**2
     c1d = np.array([2.5, 2., 1.5])
     c2d = np.einsum('i,j->ij', c1d, c1d)
@@ -132,6 +159,7 @@
     y = polyval(x, [1., 2., 3.])
 
     def test_chebval(self):
+        """ """
         #check empty input
         assert_equal(cheb.chebval([], [1]).size, 0)
 
@@ -153,6 +181,7 @@
             assert_equal(cheb.chebval(x, [1, 0, 0]).shape, dims)
 
     def test_chebval2d(self):
+        """ """
         x1, x2, x3 = self.x
         y1, y2, y3 = self.y
 
@@ -170,6 +199,7 @@
         assert_(res.shape == (2, 3))
 
     def test_chebval3d(self):
+        """ """
         x1, x2, x3 = self.x
         y1, y2, y3 = self.y
 
@@ -187,6 +217,7 @@
         assert_(res.shape == (2, 3))
 
     def test_chebgrid2d(self):
+        """ """
         x1, x2, x3 = self.x
         y1, y2, y3 = self.y
 
@@ -201,6 +232,7 @@
         assert_(res.shape == (2, 3)*2)
 
     def test_chebgrid3d(self):
+        """ """
         x1, x2, x3 = self.x
         y1, y2, y3 = self.y
 
@@ -216,8 +248,10 @@
 
 
 class TestIntegral:
+    """ """
 
     def test_chebint(self):
+        """ """
         # check exceptions
         assert_raises(TypeError, cheb.chebint, [0], .5)
         assert_raises(ValueError, cheb.chebint, [0], -1)
@@ -301,6 +335,7 @@
                 assert_almost_equal(trim(res), trim(tgt))
 
     def test_chebint_axis(self):
+        """ """
         # check that axis keyword works
         c2d = np.random.random((3, 4))
 
@@ -318,8 +353,10 @@
 
 
 class TestDerivative:
+    """ """
 
     def test_chebder(self):
+        """ """
         # check exceptions
         assert_raises(TypeError, cheb.chebder, [0], .5)
         assert_raises(ValueError, cheb.chebder, [0], -1)
@@ -345,6 +382,7 @@
                 assert_almost_equal(trim(res), trim(tgt))
 
     def test_chebder_axis(self):
+        """ """
         # check that axis keyword works
         c2d = np.random.random((3, 4))
 
@@ -358,10 +396,12 @@
 
 
 class TestVander:
+    """ """
     # some random values in [-1, 1)
     x = np.random.random((3, 5))*2 - 1
 
     def test_chebvander(self):
+        """ """
         # check for 1d x
         x = np.arange(3)
         v = cheb.chebvander(x, 3)
@@ -379,6 +419,7 @@
             assert_almost_equal(v[..., i], cheb.chebval(x, coef))
 
     def test_chebvander2d(self):
+        """ """
         # also tests chebval2d for non-square coefficient array
         x1, x2, x3 = self.x
         c = np.random.random((2, 3))
@@ -392,6 +433,7 @@
         assert_(van.shape == (1, 5, 6))
 
     def test_chebvander3d(self):
+        """ """
         # also tests chebval3d for non-square coefficient array
         x1, x2, x3 = self.x
         c = np.random.random((2, 3, 4))
@@ -406,12 +448,36 @@
 
 
 class TestFitting:
+    """ """
 
     def test_chebfit(self):
+        """ """
         def f(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return x*(x - 1)*(x - 2)
 
         def f2(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return x**4 + x**2 + 1
 
         # Test exceptions
@@ -483,21 +549,49 @@
 
 
 class TestInterpolate:
+    """ """
 
     def f(self, x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         return x * (x - 1) * (x - 2)
 
     def test_raises(self):
+        """ """
         assert_raises(ValueError, cheb.chebinterpolate, self.f, -1)
         assert_raises(TypeError, cheb.chebinterpolate, self.f, 10.)
 
     def test_dimensions(self):
+        """ """
         for deg in range(1, 5):
             assert_(cheb.chebinterpolate(self.f, deg).shape == (deg + 1,))
 
     def test_approximation(self):
+        """ """
 
         def powx(x, p):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+            p :
+                
+
+            Returns
+            -------
+
+            """
             return x**p
 
         x = np.linspace(-1, 1, 10)
@@ -508,23 +602,29 @@
 
 
 class TestCompanion:
+    """ """
 
     def test_raises(self):
+        """ """
         assert_raises(ValueError, cheb.chebcompanion, [])
         assert_raises(ValueError, cheb.chebcompanion, [1])
 
     def test_dimensions(self):
+        """ """
         for i in range(1, 5):
             coef = [0]*i + [1]
             assert_(cheb.chebcompanion(coef).shape == (i, i))
 
     def test_linear_root(self):
+        """ """
         assert_(cheb.chebcompanion([1, 2])[0, 0] == -.5)
 
 
 class TestGauss:
+    """ """
 
     def test_100(self):
+        """ """
         x, w = cheb.chebgauss(100)
 
         # test orthogonality. Note that the results need to be normalized,
@@ -542,8 +642,10 @@
 
 
 class TestMisc:
+    """ """
 
     def test_chebfromroots(self):
+        """ """
         res = cheb.chebfromroots([])
         assert_almost_equal(trim(res), [1])
         for i in range(1, 5):
@@ -553,6 +655,7 @@
             assert_almost_equal(trim(res), trim(tgt))
 
     def test_chebroots(self):
+        """ """
         assert_almost_equal(cheb.chebroots([1]), [])
         assert_almost_equal(cheb.chebroots([1, 2]), [-.5])
         for i in range(2, 5):
@@ -561,6 +664,7 @@
             assert_almost_equal(trim(res), trim(tgt))
 
     def test_chebtrim(self):
+        """ """
         coef = [2, -1, 1, 0]
 
         # Test exceptions
@@ -572,23 +676,28 @@
         assert_equal(cheb.chebtrim(coef, 2), [0])
 
     def test_chebline(self):
+        """ """
         assert_equal(cheb.chebline(3, 4), [3, 4])
 
     def test_cheb2poly(self):
+        """ """
         for i in range(10):
             assert_almost_equal(cheb.cheb2poly([0]*i + [1]), Tlist[i])
 
     def test_poly2cheb(self):
+        """ """
         for i in range(10):
             assert_almost_equal(cheb.poly2cheb(Tlist[i]), [0]*i + [1])
 
     def test_weight(self):
+        """ """
         x = np.linspace(-1, 1, 11)[1:-1]
         tgt = 1./(np.sqrt(1 + x) * np.sqrt(1 - x))
         res = cheb.chebweight(x)
         assert_almost_equal(res, tgt)
 
     def test_chebpts1(self):
+        """ """
         #test exceptions
         assert_raises(ValueError, cheb.chebpts1, 1.5)
         assert_raises(ValueError, cheb.chebpts1, 0)
@@ -604,6 +713,7 @@
         assert_almost_equal(cheb.chebpts1(4), tgt)
 
     def test_chebpts2(self):
+        """ """
         #test exceptions
         assert_raises(ValueError, cheb.chebpts2, 1.5)
         assert_raises(ValueError, cheb.chebpts2, 1)
