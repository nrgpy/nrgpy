# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/distutils/npy_pkg_config.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/distutils/npy_pkg_config.py
@@ -10,10 +10,7 @@
 _VAR = re.compile(r'\$\{([a-zA-Z0-9_-]+)\}')
 
 class FormatError(IOError):
-    """
-    Exception thrown when there is a problem parsing a configuration file.
-
-    """
+    """ """
     def __init__(self, msg):
         self.msg = msg
 
@@ -21,7 +18,7 @@
         return self.msg
 
 class PkgNotFound(IOError):
-    """Exception raised when a package can not be located."""
+    """ """
     def __init__(self, msg):
         self.msg = msg
 
@@ -29,8 +26,7 @@
         return self.msg
 
 def parse_flags(line):
-    """
-    Parse a line from a config file containing compile flags.
+    """Parse a line from a config file containing compile flags.
 
     Parameters
     ----------
@@ -39,16 +35,8 @@
 
     Returns
     -------
-    d : dict
-        Dictionary of parsed flags, split into relevant categories.
-        These categories are the keys of `d`:
-
-        * 'include_dirs'
-        * 'library_dirs'
-        * 'libraries'
-        * 'macros'
-        * 'ignored'
-
+
+    
     """
     d = {'include_dirs': [], 'library_dirs': [], 'libraries': [],
          'macros': [], 'ignored': []}
@@ -71,11 +59,21 @@
     return d
 
 def _escape_backslash(val):
+    """
+
+    Parameters
+    ----------
+    val :
+        
+
+    Returns
+    -------
+
+    """
     return val.replace('\\', '\\\\')
 
 class LibraryInfo:
-    """
-    Object containing build information about a library.
+    """Object containing build information about a library.
 
     Parameters
     ----------
@@ -94,11 +92,13 @@
     requires : sequence, optional
         The required libraries for the library to be installed.
 
+    Returns
+    -------
+
     Notes
     -----
     All input parameters (except "sections" which is a method) are available as
     attributes of the same name.
-
     """
     def __init__(self, name, description, version, sections, vars, requires=None):
         self.name = name
@@ -112,26 +112,47 @@
         self.vars = vars
 
     def sections(self):
-        """
-        Return the section headers of the config file.
-
-        Parameters
-        ----------
-        None
-
-        Returns
-        -------
-        keys : list of str
-            The list of section headers.
-
+        """Return the section headers of the config file.
+
+        Parameters
+        ----------
+        None :
+            
+
+        Returns
+        -------
+
+        
         """
         return list(self._sections.keys())
 
     def cflags(self, section="default"):
+        """
+
+        Parameters
+        ----------
+        section :
+             (Default value = "default")
+
+        Returns
+        -------
+
+        """
         val = self.vars.interpolate(self._sections[section]['cflags'])
         return _escape_backslash(val)
 
     def libs(self, section="default"):
+        """
+
+        Parameters
+        ----------
+        section :
+             (Default value = "default")
+
+        Returns
+        -------
+
+        """
         val = self.vars.interpolate(self._sections[section]['libs'])
         return _escape_backslash(val)
 
@@ -146,17 +167,18 @@
         return "\n".join(m)
 
 class VariableSet:
-    """
-    Container object for the variables defined in a config file.
-
+    """Container object for the variables defined in a config file.
+    
     `VariableSet` can be used as a plain dictionary, with the variable names
     as keys.
 
     Parameters
     ----------
-    d : dict
-        Dict of items in the "variables" section of the configuration file.
-
+
+    Returns
+    -------
+
+    
     """
     def __init__(self, d):
         self._raw_data = dict([(k, v) for k, v in d.items()])
@@ -167,17 +189,53 @@
         self._init_parse()
 
     def _init_parse(self):
+        """ """
         for k, v in self._raw_data.items():
             self._init_parse_var(k, v)
 
     def _init_parse_var(self, name, value):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+        value :
+            
+
+        Returns
+        -------
+
+        """
         self._re[name] = re.compile(r'\$\{%s\}' % name)
         self._re_sub[name] = value
 
     def interpolate(self, value):
+        """
+
+        Parameters
+        ----------
+        value :
+            
+
+        Returns
+        -------
+
+        """
         # Brute force: we keep interpolating until there is no '${var}' anymore
         # or until interpolated string is equal to input string
         def _interpolate(value):
+            """
+
+            Parameters
+            ----------
+            value :
+                
+
+            Returns
+            -------
+
+            """
             for k in self._re.keys():
                 value = self._re[k].sub(self._re_sub[k], value)
             return value
@@ -190,18 +248,17 @@
         return value
 
     def variables(self):
-        """
-        Return the list of variable names.
-
-        Parameters
-        ----------
-        None
-
-        Returns
-        -------
-        names : list of str
-            The names of all variables in the `VariableSet` instance.
-
+        """Return the list of variable names.
+
+        Parameters
+        ----------
+        None :
+            
+
+        Returns
+        -------
+
+        
         """
         return list(self._raw_data.keys())
 
@@ -214,6 +271,17 @@
         self._init_parse_var(name, value)
 
 def parse_meta(config):
+    """
+
+    Parameters
+    ----------
+    config :
+        
+
+    Returns
+    -------
+
+    """
     if not config.has_section('meta'):
         raise FormatError("No meta section found !")
 
@@ -230,6 +298,17 @@
     return d
 
 def parse_variables(config):
+    """
+
+    Parameters
+    ----------
+    config :
+        
+
+    Returns
+    -------
+
+    """
     if not config.has_section('variables'):
         raise FormatError("No variables section found !")
 
@@ -241,12 +320,47 @@
     return VariableSet(d)
 
 def parse_sections(config):
+    """
+
+    Parameters
+    ----------
+    config :
+        
+
+    Returns
+    -------
+
+    """
     return meta_d, r
 
 def pkg_to_filename(pkg_name):
+    """
+
+    Parameters
+    ----------
+    pkg_name :
+        
+
+    Returns
+    -------
+
+    """
     return "%s.ini" % pkg_name
 
 def parse_config(filename, dirs=None):
+    """
+
+    Parameters
+    ----------
+    filename :
+        
+    dirs :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     if dirs:
         filenames = [os.path.join(d, filename) for d in dirs]
     else:
@@ -283,7 +397,31 @@
     return meta, vars, sections, requires
 
 def _read_config_imp(filenames, dirs=None):
+    """
+
+    Parameters
+    ----------
+    filenames :
+        
+    dirs :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     def _read_config(f):
+        """
+
+        Parameters
+        ----------
+        f :
+            
+
+        Returns
+        -------
+
+        """
         meta, vars, sections, reqs = parse_config(f, dirs)
         # recursively add sections and variables of required libraries
         for rname, rvalue in reqs.items():
@@ -324,8 +462,7 @@
 # problem in practice
 _CACHE = {}
 def read_config(pkgname, dirs=None):
-    """
-    Return library info for a package from its configuration file.
+    """Return library info for a package from its configuration file.
 
     Parameters
     ----------
@@ -334,7 +471,7 @@
         the extension, e.g. foo for the file foo.ini).
     dirs : sequence, optional
         If given, should be a sequence of directories - usually including
-        the NumPy base directory - where to look for npy-pkg-config files.
+        the NumPy base directory - where to look for npy-pkg-config files. (Default value = None)
 
     Returns
     -------
@@ -349,7 +486,6 @@
     See Also
     --------
     misc_util.get_info, misc_util.get_pkg_info
-
     Examples
     --------
     >>> npymath_info = np.distutils.npy_pkg_config.read_config('npymath')
@@ -360,7 +496,6 @@
     Description: Portable, core math library implementing C99 standard
     Requires:
     Version: 0.1  #random
-
     """
     try:
         return _CACHE[pkgname]
