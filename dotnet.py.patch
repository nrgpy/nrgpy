# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pygments/lexers/dotnet.py
+++ b/..//venv/lib/python3.8/site-packages/pygments/lexers/dotnet.py
@@ -24,16 +24,15 @@
 
 
 class CSharpLexer(RegexLexer):
-    """
-    For `C# <http://msdn2.microsoft.com/en-us/vcsharp/default.aspx>`_
+    """For `C# <http://msdn2.microsoft.com/en-us/vcsharp/default.aspx>`_
     source code.
-
+    
     Additional options accepted:
-
+    
     `unicodelevel`
       Determines which Unicode characters this lexer allows for identifiers.
       The possible values are:
-
+    
       * ``none`` -- only the ASCII letters and numbers are allowed. This
         is the fastest selection.
       * ``basic`` -- all Unicode characters from the specification except
@@ -41,10 +40,17 @@
       * ``full`` -- all Unicode characters as specified in the C# specs
         are allowed.  Note that this means a considerable slowdown since the
         ``Lo`` category has more than 40,000 characters in it!
-
+    
       The default value is ``basic``.
-
+    
       .. versionadded:: 0.8
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'C#'
@@ -138,15 +144,14 @@
 
 
 class NemerleLexer(RegexLexer):
-    """
-    For `Nemerle <http://nemerle.org>`_ source code.
-
+    """For `Nemerle <http://nemerle.org>`_ source code.
+    
     Additional options accepted:
-
+    
     `unicodelevel`
       Determines which Unicode characters this lexer allows for identifiers.
       The possible values are:
-
+    
       * ``none`` -- only the ASCII letters and numbers are allowed. This
         is the fastest selection.
       * ``basic`` -- all Unicode characters from the specification except
@@ -154,10 +159,17 @@
       * ``full`` -- all Unicode characters as specified in the C# specs
         are allowed.  Note that this means a considerable slowdown since the
         ``Lo`` category has more than 40,000 characters in it!
-
+    
       The default value is ``basic``.
-
+    
     .. versionadded:: 1.5
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Nemerle'
@@ -297,7 +309,17 @@
 
     def analyse_text(text):
         """Nemerle is quite similar to Python, but @if is relatively uncommon
-        elsewhere."""
+        elsewhere.
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         result = 0
 
         if '@if' in text:
@@ -307,9 +329,7 @@
 
 
 class BooLexer(RegexLexer):
-    """
-    For `Boo <http://boo.codehaus.org/>`_ source code.
-    """
+    """For `Boo <http://boo.codehaus.org/>`_ source code."""
 
     name = 'Boo'
     aliases = ['boo']
@@ -374,10 +394,16 @@
 
 
 class VbNetLexer(RegexLexer):
-    """
-    For
+    """For
     `Visual Basic.NET <http://msdn2.microsoft.com/en-us/vbasic/default.aspx>`_
     source code.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'VB.net'
@@ -478,14 +504,23 @@
     }
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         if re.search(r'^\s*(#If|Module|Namespace)', text, re.MULTILINE):
             return 0.5
 
 
 class GenericAspxLexer(RegexLexer):
-    """
-    Lexer for ASP.NET pages.
-    """
+    """Lexer for ASP.NET pages."""
 
     name = 'aspx-gen'
     filenames = []
@@ -507,9 +542,7 @@
 
 # TODO support multiple languages within the same source file
 class CSharpAspxLexer(DelegatingLexer):
-    """
-    Lexer for highlighting C# within ASP.NET pages.
-    """
+    """Lexer for highlighting C# within ASP.NET pages."""
 
     name = 'aspx-cs'
     aliases = ['aspx-cs']
@@ -520,6 +553,17 @@
         super().__init__(CSharpLexer, GenericAspxLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         if re.search(r'Page\s*Language="C#"', text, re.I) is not None:
             return 0.2
         elif re.search(r'script[^>]+language=["\']C#', text, re.I) is not None:
@@ -527,9 +571,7 @@
 
 
 class VbNetAspxLexer(DelegatingLexer):
-    """
-    Lexer for highlighting Visual Basic.net within ASP.NET pages.
-    """
+    """Lexer for highlighting Visual Basic.net within ASP.NET pages."""
 
     name = 'aspx-vb'
     aliases = ['aspx-vb']
@@ -540,6 +582,17 @@
         super().__init__(VbNetLexer, GenericAspxLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         if re.search(r'Page\s*Language="Vb"', text, re.I) is not None:
             return 0.2
         elif re.search(r'script[^>]+language=["\']vb', text, re.I) is not None:
@@ -548,10 +601,16 @@
 
 # Very close to functional.OcamlLexer
 class FSharpLexer(RegexLexer):
-    """
-    For the `F# language <https://fsharp.org/>`_ (version 3.0).
-
+    """For the `F# language <https://fsharp.org/>`_ (version 3.0).
+    
     .. versionadded:: 1.5
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'F#'
@@ -697,7 +756,17 @@
 
     def analyse_text(text):
         """F# doesn't have that many unique features -- |> and <| are weak
-        indicators."""
+        indicators.
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         result = 0
         if '|>' in text:
             result += 0.05
