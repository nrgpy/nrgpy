# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jupyter_client/tests/test_multikernelmanager.py
+++ b/..//venv/lib/python3.8/site-packages/jupyter_client/tests/test_multikernelmanager.py
@@ -18,13 +18,16 @@
 
 
 class TestKernelManager(TestCase):
+    """ """
 
     def _get_tcp_km(self):
+        """ """
         c = Config()
         km = MultiKernelManager(config=c)
         return km
 
     def _get_ipc_km(self):
+        """ """
         c = Config()
         c.KernelManager.transport = 'ipc'
         c.KernelManager.ip = 'test'
@@ -32,6 +35,19 @@
         return km
 
     def _run_lifecycle(self, km, test_kid=None):
+        """
+
+        Parameters
+        ----------
+        km :
+            
+        test_kid :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if test_kid:
             kid = km.start_kernel(stdout=PIPE, stderr=PIPE, kernel_id=test_kid)
             self.assertTrue(kid == test_kid)
@@ -51,6 +67,21 @@
         self.assertNotIn(kid, km)
 
     def _run_cinfo(self, km, transport, ip):
+        """
+
+        Parameters
+        ----------
+        km :
+            
+        transport :
+            
+        ip :
+            
+
+        Returns
+        -------
+
+        """
         kid = km.start_kernel(stdout=PIPE, stderr=PIPE)
         k = km.get_kernel(kid)
         cinfo = km.get_connection_info(kid)
@@ -69,14 +100,17 @@
         km.shutdown_kernel(kid, now=True)
 
     def test_tcp_lifecycle(self):
+        """ """
         km = self._get_tcp_km()
         self._run_lifecycle(km)
 
     def test_tcp_lifecycle_with_kernel_id(self):
+        """ """
         km = self._get_tcp_km()
         self._run_lifecycle(km, test_kid=str(uuid.uuid4()))
 
     def test_shutdown_all(self):
+        """ """
         km = self._get_tcp_km()
         kid = km.start_kernel(stdout=PIPE, stderr=PIPE)
         self.assertIn(kid, km)
@@ -86,16 +120,19 @@
         km.shutdown_all()
 
     def test_tcp_cinfo(self):
+        """ """
         km = self._get_tcp_km()
         self._run_cinfo(km, 'tcp', localhost())
 
     @skip_win32
     def test_ipc_lifecycle(self):
+        """ """
         km = self._get_ipc_km()
         self._run_lifecycle(km)
 
     @skip_win32
     def test_ipc_cinfo(self):
+        """ """
         km = self._get_ipc_km()
         self._run_cinfo(km, 'ipc', 'test')
 
@@ -112,11 +149,13 @@
         self._run_lifecycle(self._get_ipc_km())
 
     def tcp_lifecycle_with_loop(self):
+        """ """
         # Ensure each thread has an event loop
         asyncio.set_event_loop(asyncio.new_event_loop())
         self.test_tcp_lifecycle()
 
     def test_start_parallel_thread_kernels(self):
+        """ """
         self.test_tcp_lifecycle()
 
         thread = threading.Thread(target=self.tcp_lifecycle_with_loop)
@@ -129,6 +168,7 @@
             thread2.join()
 
     def test_start_parallel_process_kernels(self):
+        """ """
         self.test_tcp_lifecycle()
 
         thread = threading.Thread(target=self.tcp_lifecycle_with_loop)
@@ -145,13 +185,16 @@
 
 
 class TestAsyncKernelManager(AsyncTestCase):
+    """ """
 
     def _get_tcp_km(self):
+        """ """
         c = Config()
         km = AsyncMultiKernelManager(config=c)
         return km
 
     def _get_ipc_km(self):
+        """ """
         c = Config()
         c.KernelManager.transport = 'ipc'
         c.KernelManager.ip = 'test'
@@ -246,6 +289,7 @@
         await self._run_lifecycle(self._get_ipc_km())
 
     def tcp_lifecycle_with_loop(self):
+        """ """
         # Ensure each thread has an event loop
         asyncio.set_event_loop(asyncio.new_event_loop())
         asyncio.get_event_loop().run_until_complete(self.raw_tcp_lifecycle())
