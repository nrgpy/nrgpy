# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/utils/tests/test_process.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/utils/tests/test_process.py
@@ -46,6 +46,7 @@
 
     
 def has_pywin32():
+    """ """
     try:
         import win32api
     except ImportError:
@@ -96,6 +97,7 @@
 
 
 class SubProcessTestCase(tt.TempFileMixin):
+    """ """
     def setUp(self):
         """Make a valid python temp file."""
         lines = [ "import sys",
@@ -106,16 +108,26 @@
         self.mktmp('\n'.join(lines))
 
     def test_system(self):
+        """ """
         status = system('%s "%s"' % (python, self.fname))
         self.assertEqual(status, 0)
 
     def test_system_quotes(self):
+        """ """
         status = system('%s -c "import sys"' % python)
         self.assertEqual(status, 0)
 
     def assert_interrupts(self, command):
-        """
-        Interrupt a subprocess after a second.
+        """Interrupt a subprocess after a second.
+
+        Parameters
+        ----------
+        command :
+            
+
+        Returns
+        -------
+
         """
         if threading.main_thread() != threading.current_thread():
             raise nt.SkipTest("Can't run this test if not in main thread.")
@@ -126,6 +138,7 @@
         signal.signal(signal.SIGINT, signal.default_int_handler)
 
         def interrupt():
+            """ """
             # Wait for subprocess to start:
             time.sleep(0.5)
             interrupt_main()
@@ -144,11 +157,18 @@
         return result
 
     def test_system_interrupt(self):
-        """
-        When interrupted in the way ipykernel interrupts IPython, the
+        """When interrupted in the way ipykernel interrupts IPython, the
         subprocess is interrupted.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         def command():
+            """ """
             return system('%s -c "import time; time.sleep(5)"' % python)
 
         status = self.assert_interrupts(command)
@@ -157,6 +177,7 @@
         )
 
     def test_getoutput(self):
+        """ """
         out = getoutput('%s "%s"' % (python, self.fname))
         # we can't rely on the order the line buffered streams are flushed
         try:
@@ -165,23 +186,27 @@
             self.assertEqual(out, 'on stdouton stderr')
 
     def test_getoutput_quoted(self):
+        """ """
         out = getoutput('%s -c "print (1)"' % python)
         self.assertEqual(out.strip(), '1')
 
     #Invalid quoting on windows
     @dec.skip_win32
     def test_getoutput_quoted2(self):
+        """ """
         out = getoutput("%s -c 'print (1)'" % python)
         self.assertEqual(out.strip(), '1')
         out = getoutput("%s -c 'print (\"1\")'" % python)
         self.assertEqual(out.strip(), '1')
 
     def test_getoutput_error(self):
+        """ """
         out, err = getoutputerror('%s "%s"' % (python, self.fname))
         self.assertEqual(out, 'on stdout')
         self.assertEqual(err, 'on stderr')
 
     def test_get_output_error_code(self):
+        """ """
         quiet_exit = '%s -c "import sys; sys.exit(1)"' % python
         out, err, code = get_output_error_code(quiet_exit)
         self.assertEqual(out, '')
