# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tornado/httpclient.py
+++ b/..//venv/lib/python3.8/site-packages/tornado/httpclient.py
@@ -58,13 +58,13 @@
 
 class HTTPClient(object):
     """A blocking HTTP client.
-
+    
     This interface is provided to make it easier to share code between
     synchronous and asynchronous applications. Applications that are
     running an `.IOLoop` must use `AsyncHTTPClient` instead.
-
+    
     Typical usage looks like this::
-
+    
         http_client = httpclient.HTTPClient()
         try:
             response = http_client.fetch("http://www.google.com/")
@@ -77,12 +77,18 @@
             # Other errors are possible, such as IOError.
             print("Error: " + str(e))
         http_client.close()
-
+    
     .. versionchanged:: 5.0
-
+    
        Due to limitations in `asyncio`, it is no longer possible to
        use the synchronous ``HTTPClient`` while an `.IOLoop` is running.
        Use `AsyncHTTPClient` instead.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     """
 
@@ -123,13 +129,26 @@
         self, request: Union["HTTPRequest", str], **kwargs: Any
     ) -> "HTTPResponse":
         """Executes a request, returning an `HTTPResponse`.
-
+        
         The request may be either a string URL or an `HTTPRequest` object.
         If it is a string, we construct an `HTTPRequest` using any additional
         kwargs: ``HTTPRequest(request, **kwargs)``
-
+        
         If an error occurs during the fetch, we raise an `HTTPError` unless
         the ``raise_error`` keyword argument is set to False.
+
+        Parameters
+        ----------
+        request: Union["HTTPRequest" :
+            
+        str] :
+            
+        **kwargs: Any :
+            
+
+        Returns
+        -------
+
         """
         response = self._io_loop.run_sync(
             functools.partial(self._async_client.fetch, request, **kwargs)
@@ -139,9 +158,9 @@
 
 class AsyncHTTPClient(Configurable):
     """An non-blocking HTTP client.
-
+    
     Example usage::
-
+    
         async def f():
             http_client = AsyncHTTPClient()
             try:
@@ -150,7 +169,7 @@
                 print("Error: %s" % e)
             else:
                 print(response.body)
-
+    
     The constructor for this class is magic in several respects: It
     actually creates an instance of an implementation-specific
     subclass, and instances are reused as a kind of pseudo-singleton
@@ -160,36 +179,45 @@
     the `AsyncHTTPClient` constructor. The implementation subclass as
     well as arguments to its constructor can be set with the static
     method `configure()`
-
+    
     All `AsyncHTTPClient` implementations support a ``defaults``
     keyword argument, which can be used to set default values for
     `HTTPRequest` attributes.  For example::
-
+    
         AsyncHTTPClient.configure(
             None, defaults=dict(user_agent="MyUserAgent"))
         # or with force_instance:
         client = AsyncHTTPClient(force_instance=True,
             defaults=dict(user_agent="MyUserAgent"))
-
+    
     .. versionchanged:: 5.0
        The ``io_loop`` argument (deprecated since version 4.1) has been removed.
 
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     _instance_cache = None  # type: Dict[IOLoop, AsyncHTTPClient]
 
     @classmethod
     def configurable_base(cls) -> Type[Configurable]:
+        """ """
         return AsyncHTTPClient
 
     @classmethod
     def configurable_default(cls) -> Type[Configurable]:
+        """ """
         from tornado.simple_httpclient import SimpleAsyncHTTPClient
 
         return SimpleAsyncHTTPClient
 
     @classmethod
     def _async_clients(cls) -> Dict[IOLoop, "AsyncHTTPClient"]:
+        """ """
         attr_name = "_async_client_dict_" + cls.__name__
         if not hasattr(cls, attr_name):
             setattr(cls, attr_name, weakref.WeakKeyDictionary())
@@ -214,6 +242,19 @@
         return instance
 
     def initialize(self, defaults: Optional[Dict[str, Any]] = None) -> None:
+        """
+
+        Parameters
+        ----------
+        defaults: Optional[Dict[str :
+            
+        Any]] :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         self.io_loop = IOLoop.current()
         self.defaults = dict(HTTPRequest._DEFAULTS)
         if defaults is not None:
@@ -222,15 +263,21 @@
 
     def close(self) -> None:
         """Destroys this HTTP client, freeing any file descriptors used.
-
+        
         This method is **not needed in normal use** due to the way
         that `AsyncHTTPClient` objects are transparently reused.
         ``close()`` is generally only necessary when either the
         `.IOLoop` is also being closed, or the ``force_instance=True``
         argument was used when creating the `AsyncHTTPClient`.
-
+        
         No other methods may be called on the `AsyncHTTPClient` after
         ``close()``.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
 
         """
         if self._closed:
@@ -253,11 +300,11 @@
         **kwargs: Any
     ) -> "Future[HTTPResponse]":
         """Executes a request, asynchronously returning an `HTTPResponse`.
-
+        
         The request may be either a string URL or an `HTTPRequest` object.
         If it is a string, we construct an `HTTPRequest` using any additional
         kwargs: ``HTTPRequest(request, **kwargs)``
-
+        
         This method returns a `.Future` whose result is an
         `HTTPResponse`. By default, the ``Future`` will raise an
         `HTTPError` if the request returned a non-200 response code
@@ -265,20 +312,35 @@
         contacted). Instead, if ``raise_error`` is set to False, the
         response will always be returned regardless of the response
         code.
-
+        
         If a ``callback`` is given, it will be invoked with the `HTTPResponse`.
         In the callback interface, `HTTPError` is not automatically raised.
         Instead, you must check the response's ``error`` attribute or
         call its `~HTTPResponse.rethrow` method.
-
+        
         .. versionchanged:: 6.0
-
+        
            The ``callback`` argument was removed. Use the returned
            `.Future` instead.
-
+        
            The ``raise_error=False`` argument only affects the
            `HTTPError` raised when a non-200 response code is used,
            instead of suppressing all errors.
+
+        Parameters
+        ----------
+        request: Union[str :
+            
+        "HTTPRequest"] :
+            
+        raise_error: bool :
+             (Default value = True)
+        **kwargs: Any :
+            
+
+        Returns
+        -------
+
         """
         if self._closed:
             raise RuntimeError("fetch() called on closed AsyncHTTPClient")
@@ -297,6 +359,17 @@
         future = Future()  # type: Future[HTTPResponse]
 
         def handle_response(response: "HTTPResponse") -> None:
+            """
+
+            Parameters
+            ----------
+            response: "HTTPResponse" :
+                
+
+            Returns
+            -------
+
+            """
             if response.error:
                 if raise_error or not response._error_is_response_code:
                     future_set_exception_unless_cancelled(future, response.error)
@@ -309,6 +382,21 @@
     def fetch_impl(
         self, request: "HTTPRequest", callback: Callable[["HTTPResponse"], None]
     ) -> None:
+        """
+
+        Parameters
+        ----------
+        request: "HTTPRequest" :
+            
+        callback: Callable[["HTTPResponse"] :
+            
+        None] :
+            
+
+        Returns
+        -------
+
+        """
         raise NotImplementedError()
 
     @classmethod
@@ -316,22 +404,37 @@
         cls, impl: "Union[None, str, Type[Configurable]]", **kwargs: Any
     ) -> None:
         """Configures the `AsyncHTTPClient` subclass to use.
-
+        
         ``AsyncHTTPClient()`` actually creates an instance of a subclass.
         This method may be called with either a class object or the
         fully-qualified name of such a class (or ``None`` to use the default,
         ``SimpleAsyncHTTPClient``)
-
+        
         If additional keyword arguments are given, they will be passed
         to the constructor of each subclass instance created.  The
         keyword argument ``max_clients`` determines the maximum number
         of simultaneous `~AsyncHTTPClient.fetch()` operations that can
         execute in parallel on each `.IOLoop`.  Additional arguments
         may be supported depending on the implementation class in use.
-
+        
         Example::
-
+        
            AsyncHTTPClient.configure("tornado.curl_httpclient.CurlAsyncHTTPClient")
+
+        Parameters
+        ----------
+        impl: "Union[None :
+            
+        str :
+            
+        Type[Configurable]]" :
+            
+        **kwargs: Any :
+            
+
+        Returns
+        -------
+
         """
         super(AsyncHTTPClient, cls).configure(impl, **kwargs)
 
@@ -550,6 +653,7 @@
 
     @property
     def headers(self) -> httputil.HTTPHeaders:
+        """ """
         # TODO: headers may actually be a plain dict until fairly late in
         # the process (AsyncHTTPClient.fetch), but practically speaking,
         # whenever the property is used they're already HTTPHeaders.
@@ -557,6 +661,21 @@
 
     @headers.setter
     def headers(self, value: Union[Dict[str, str], httputil.HTTPHeaders]) -> None:
+        """
+
+        Parameters
+        ----------
+        value: Union[Dict[str :
+            
+        str] :
+            
+        httputil.HTTPHeaders] :
+            
+
+        Returns
+        -------
+
+        """
         if value is None:
             self._headers = httputil.HTTPHeaders()
         else:
@@ -564,62 +683,29 @@
 
     @property
     def body(self) -> bytes:
+        """ """
         return self._body
 
     @body.setter
     def body(self, value: Union[bytes, str]) -> None:
+        """
+
+        Parameters
+        ----------
+        value: Union[bytes :
+            
+        str] :
+            
+
+        Returns
+        -------
+
+        """
         self._body = utf8(value)
 
 
 class HTTPResponse(object):
-    """HTTP Response object.
-
-    Attributes:
-
-    * ``request``: HTTPRequest object
-
-    * ``code``: numeric HTTP status code, e.g. 200 or 404
-
-    * ``reason``: human-readable reason phrase describing the status code
-
-    * ``headers``: `tornado.httputil.HTTPHeaders` object
-
-    * ``effective_url``: final location of the resource after following any
-      redirects
-
-    * ``buffer``: ``cStringIO`` object for response body
-
-    * ``body``: response body as bytes (created on demand from ``self.buffer``)
-
-    * ``error``: Exception object, if any
-
-    * ``request_time``: seconds from request start to finish. Includes all
-      network operations from DNS resolution to receiving the last byte of
-      data. Does not include time spent in the queue (due to the
-      ``max_clients`` option). If redirects were followed, only includes
-      the final request.
-
-    * ``start_time``: Time at which the HTTP operation started, based on
-      `time.time` (not the monotonic clock used by `.IOLoop.time`). May
-      be ``None`` if the request timed out while in the queue.
-
-    * ``time_info``: dictionary of diagnostic timing information from the
-      request. Available data are subject to change, but currently uses timings
-      available from http://curl.haxx.se/libcurl/c/curl_easy_getinfo.html,
-      plus ``queue``, which is the delay (if any) introduced by waiting for
-      a slot under `AsyncHTTPClient`'s ``max_clients`` setting.
-
-    .. versionadded:: 5.1
-
-       Added the ``start_time`` attribute.
-
-    .. versionchanged:: 5.1
-
-       The ``request_time`` attribute previously included time spent in the queue
-       for ``simple_httpclient``, but not in ``curl_httpclient``. Now queueing time
-       is excluded in both implementations. ``request_time`` is now more accurate for
-       ``curl_httpclient`` because it uses a monotonic clock when available.
-    """
+    """HTTP Response object."""
 
     # I'm not sure why these don't get type-inferred from the references in __init__.
     error = None  # type: Optional[BaseException]
@@ -670,6 +756,7 @@
 
     @property
     def body(self) -> bytes:
+        """ """
         if self.buffer is None:
             return b""
         elif self._body is None:
@@ -688,25 +775,7 @@
 
 
 class HTTPClientError(Exception):
-    """Exception thrown for an unsuccessful HTTP request.
-
-    Attributes:
-
-    * ``code`` - HTTP error integer error code, e.g. 404.  Error code 599 is
-      used when no HTTP response was received, e.g. for a timeout.
-
-    * ``response`` - `HTTPResponse` object, if any.
-
-    Note that if ``follow_redirects`` is False, redirects become HTTPErrors,
-    and you can look at ``error.response.headers['Location']`` to see the
-    destination of the redirect.
-
-    .. versionchanged:: 5.1
-
-       Renamed from ``HTTPError`` to ``HTTPClientError`` to avoid collisions with
-       `tornado.web.HTTPError`. The name ``tornado.httpclient.HTTPError`` remains
-       as an alias.
-    """
+    """Exception thrown for an unsuccessful HTTP request."""
 
     def __init__(
         self,
@@ -734,8 +803,15 @@
 
 class _RequestProxy(object):
     """Combines an object with a dictionary of defaults.
-
+    
     Used internally by AsyncHTTPClient implementations.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(
@@ -755,6 +831,7 @@
 
 
 def main() -> None:
+    """ """
     from tornado.options import define, options, parse_command_line
 
     define("print_headers", type=bool, default=False)
