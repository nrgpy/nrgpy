# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/dateutil/tz/win.py
+++ b/..//venv/lib/python3.8/site-packages/dateutil/tz/win.py
@@ -32,6 +32,7 @@
 
 
 def _settzkeyname():
+    """ """
     handle = winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE)
     try:
         winreg.OpenKey(handle, TZKEYNAMENT).Close()
@@ -46,11 +47,17 @@
 
 
 class tzres(object):
-    """
-    Class for accessing ``tzres.dll``, which contains timezone name related
+    """Class for accessing ``tzres.dll``, which contains timezone name related
     resources.
-
+    
     .. versionadded:: 2.5.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     p_wchar = ctypes.POINTER(wintypes.WCHAR)        # Pointer to a wide char
 
@@ -69,22 +76,25 @@
         self.tzres_loc = tzres_loc
 
     def load_name(self, offset):
-        """
-        Load a timezone name from a DLL offset (integer).
+        """Load a timezone name from a DLL offset (integer).
+
+        Parameters
+        ----------
+        offset :
+            A positive integer value referring to a string from the tzres dll.
+            
+            .. note::
+            
+            Offsets found in the registry are generally of the form
+            ``@tzres.dll,-114``. The offset in this case is 114, not -114.
+
+        Returns
+        -------
 
         >>> from dateutil.tzwin import tzres
         >>> tzr = tzres()
         >>> print(tzr.load_name(112))
         'Eastern Standard Time'
-
-        :param offset:
-            A positive integer value referring to a string from the tzres dll.
-
-        .. note::
-
-            Offsets found in the registry are generally of the form
-            ``@tzres.dll,-114``. The offset in this case is 114, not -114.
-
         """
         resource = self.p_wchar()
         lpBuffer = ctypes.cast(ctypes.byref(resource), wintypes.LPWSTR)
@@ -92,9 +102,19 @@
         return resource[:nchar]
 
     def name_from_string(self, tzname_str):
-        """
-        Parse strings as returned from the Windows registry into the time zone
+        """Parse strings as returned from the Windows registry into the time zone
         name as defined in the registry.
+
+        Parameters
+        ----------
+        tzname_str :
+            A timezone name string as returned from a Windows registry key.
+
+        Returns
+        -------
+        type
+            Returns the localized timezone string from tzres.dll if the string
+            is of the form `@tzres.dll,-offset`, else returns the input string.
 
         >>> from dateutil.tzwin import tzres
         >>> tzr = tzres()
@@ -102,13 +122,6 @@
         'Dateline Daylight Time'
         >>> print(tzr.name_from_string('Eastern Standard Time'))
         'Eastern Standard Time'
-
-        :param tzname_str:
-            A timezone name string as returned from a Windows registry key.
-
-        :return:
-            Returns the localized timezone string from tzres.dll if the string
-            is of the form `@tzres.dll,-offset`, else returns the input string.
         """
         if not tzname_str.startswith('@'):
             return tzname_str
@@ -147,7 +160,7 @@
 
     @staticmethod
     def list():
-        """Return a list of all time zones known to the system."""
+        """ """
         with winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE) as handle:
             with winreg.OpenKey(handle, TZKEYNAME) as tzkey:
                 result = [winreg.EnumKey(tzkey, i)
@@ -155,24 +168,26 @@
         return result
 
     def display(self):
-        """
-        Return the display name of the time zone.
-        """
+        """ """
         return self._display
 
     def transitions(self, year):
-        """
-        For a given year, get the DST on and off transition times, expressed
+        """For a given year, get the DST on and off transition times, expressed
         always on the standard time side. For zones with no transitions, this
         function returns ``None``.
 
-        :param year:
+        Parameters
+        ----------
+        year :
             The year whose transitions you would like to query.
 
-        :return:
+        Returns
+        -------
+        type
             Returns a :class:`tuple` of :class:`datetime.datetime` objects,
             ``(dston, dstoff)`` for zones with an annual DST transition, or
             ``None`` for fixed offset zones.
+
         """
 
         if not self.hasdst:
@@ -192,24 +207,28 @@
         return dston, dstoff
 
     def _get_hasdst(self):
+        """ """
         return self._dstmonth != 0
 
     @property
     def _dst_base_offset(self):
+        """ """
         return self._dst_base_offset_
 
 
 class tzwin(tzwinbase):
-    """
-    Time zone object created from the zone info in the Windows registry
-
+    """Time zone object created from the zone info in the Windows registry
+    
     These are similar to :py:class:`dateutil.tz.tzrange` objects in that
     the time zone data is provided in the format of a single offset rule
     for either 0 or 2 time zone transitions per year.
 
-    :param: name
-        The name of a Windows time zone key, e.g. "Eastern Standard Time".
-        The full list of keys can be retrieved with :func:`tzwin.list`.
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, name):
@@ -257,14 +276,13 @@
 
 
 class tzwinlocal(tzwinbase):
-    """
-    Class representing the local time zone information in the Windows registry
-
+    """Class representing the local time zone information in the Windows registry
+    
     While :class:`dateutil.tz.tzlocal` makes system calls (via the :mod:`time`
     module) to retrieve time zone information, ``tzwinlocal`` retrieves the
     rules directly from the Windows registry and creates an object like
     :class:`dateutil.tz.tzwin`.
-
+    
     Because Windows does not have an equivalent of :func:`time.tzset`, on
     Windows, :class:`dateutil.tz.tzlocal` instances will always reflect the
     time zone settings *at the time that the process was started*, meaning
@@ -272,6 +290,13 @@
     on Windows will **not** be reflected by :class:`dateutil.tz.tzlocal`.
     Because ``tzwinlocal`` reads the registry directly, it is unaffected by
     this issue.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     def __init__(self):
         with winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE) as handle:
@@ -331,7 +356,27 @@
 
 
 def picknthweekday(year, month, dayofweek, hour, minute, whichweek):
-    """ dayofweek == 0 means Sunday, whichweek 5 means last instance """
+    """dayofweek == 0 means Sunday, whichweek 5 means last instance
+
+    Parameters
+    ----------
+    year :
+        
+    month :
+        
+    dayofweek :
+        
+    hour :
+        
+    minute :
+        
+    whichweek :
+        
+
+    Returns
+    -------
+
+    """
     first = datetime.datetime(year, month, 1, hour, minute)
 
     # This will work if dayofweek is ISO weekday (1-7) or Microsoft-style (0-6),
@@ -345,7 +390,17 @@
 
 
 def valuestodict(key):
-    """Convert a registry key's values to a dictionary."""
+    """Convert a registry key's values to a dictionary.
+
+    Parameters
+    ----------
+    key :
+        
+
+    Returns
+    -------
+
+    """
     dout = {}
     size = winreg.QueryInfoKey(key)[1]
     tz_res = None
