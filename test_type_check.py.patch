# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test_type_check.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test_type_check.py
@@ -9,11 +9,24 @@
 
 
 def assert_all(x):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+
+    Returns
+    -------
+
+    """
     assert_(np.all(x), x)
 
 
 class TestCommonType:
+    """ """
     def test_basic(self):
+        """ """
         ai32 = np.array([[1, 2], [3, 4]], dtype=np.int32)
         af16 = np.array([[1, 2], [3, 4]], dtype=np.float16)
         af32 = np.array([[1, 2], [3, 4]], dtype=np.float32)
@@ -29,8 +42,10 @@
 
 
 class TestMintypecode:
+    """ """
 
     def test_default_1(self):
+        """ """
         for itype in '1bcsuwil':
             assert_equal(mintypecode(itype), 'd')
         assert_equal(mintypecode('f'), 'f')
@@ -39,6 +54,7 @@
         assert_equal(mintypecode('D'), 'D')
 
     def test_default_2(self):
+        """ """
         for itype in '1bcsuwil':
             assert_equal(mintypecode(itype+'f'), 'f')
             assert_equal(mintypecode(itype+'d'), 'd')
@@ -64,6 +80,7 @@
         assert_equal(mintypecode('DD'), 'D')
 
     def test_default_3(self):
+        """ """
         assert_equal(mintypecode('fdF'), 'D')
         #assert_equal(mintypecode('fdF',savespace=1),'F')
         assert_equal(mintypecode('fdD'), 'D')
@@ -79,8 +96,10 @@
 
 
 class TestIsscalar:
+    """ """
 
     def test_basic(self):
+        """ """
         assert_(np.isscalar(3))
         assert_(not np.isscalar([3]))
         assert_(not np.isscalar((3,)))
@@ -89,8 +108,10 @@
 
 
 class TestReal:
+    """ """
 
     def test_real(self):
+        """ """
         y = np.random.rand(10,)
         assert_array_equal(y, np.real(y))
 
@@ -105,6 +126,7 @@
         assert_(not isinstance(out, np.ndarray))
 
     def test_cmplx(self):
+        """ """
         y = np.random.rand(10,)+1j*np.random.rand(10,)
         assert_array_equal(y.real, np.real(y))
 
@@ -120,8 +142,10 @@
 
 
 class TestImag:
+    """ """
 
     def test_real(self):
+        """ """
         y = np.random.rand(10,)
         assert_array_equal(0, np.imag(y))
 
@@ -136,6 +160,7 @@
         assert_(not isinstance(out, np.ndarray))
 
     def test_cmplx(self):
+        """ """
         y = np.random.rand(10,)+1j*np.random.rand(10,)
         assert_array_equal(y.imag, np.imag(y))
 
@@ -151,61 +176,77 @@
 
 
 class TestIscomplex:
+    """ """
 
     def test_fail(self):
+        """ """
         z = np.array([-1, 0, 1])
         res = iscomplex(z)
         assert_(not np.sometrue(res, axis=0))
 
     def test_pass(self):
+        """ """
         z = np.array([-1j, 1, 0])
         res = iscomplex(z)
         assert_array_equal(res, [1, 0, 0])
 
 
 class TestIsreal:
+    """ """
 
     def test_pass(self):
+        """ """
         z = np.array([-1, 0, 1j])
         res = isreal(z)
         assert_array_equal(res, [1, 1, 0])
 
     def test_fail(self):
+        """ """
         z = np.array([-1j, 1, 0])
         res = isreal(z)
         assert_array_equal(res, [0, 1, 1])
 
 
 class TestIscomplexobj:
+    """ """
 
     def test_basic(self):
+        """ """
         z = np.array([-1, 0, 1])
         assert_(not iscomplexobj(z))
         z = np.array([-1j, 0, -1])
         assert_(iscomplexobj(z))
 
     def test_scalar(self):
+        """ """
         assert_(not iscomplexobj(1.0))
         assert_(iscomplexobj(1+0j))
 
     def test_list(self):
+        """ """
         assert_(iscomplexobj([3, 1+0j, True]))
         assert_(not iscomplexobj([3, 1, True]))
 
     def test_duck(self):
+        """ """
         class DummyComplexArray:
+            """ """
             @property
             def dtype(self):
+                """ """
                 return np.dtype(complex)
         dummy = DummyComplexArray()
         assert_(iscomplexobj(dummy))
 
     def test_pandas_duck(self):
+        """ """
         # This tests a custom np.dtype duck-typed class, such as used by pandas
         # (pandas.core.dtypes)
         class PdComplex(np.complex128):
+            """ """
             pass
         class PdDtype:
+            """ """
             name = 'category'
             names = None
             type = PdComplex
@@ -213,16 +254,21 @@
             str = '<c16'
             base = np.dtype('complex128')
         class DummyPd:
+            """ """
             @property
             def dtype(self):
+                """ """
                 return PdDtype
         dummy = DummyPd()
         assert_(iscomplexobj(dummy))
 
     def test_custom_dtype_duck(self):
+        """ """
         class MyArray(list):
+            """ """
             @property
             def dtype(self):
+                """ """
                 return complex
 
         a = MyArray([1+0j, 2+0j, 3+0j])
@@ -230,7 +276,9 @@
 
 
 class TestIsrealobj:
+    """ """
     def test_basic(self):
+        """ """
         z = np.array([-1, 0, 1])
         assert_(isrealobj(z))
         z = np.array([-1j, 0, -1])
@@ -238,98 +286,123 @@
 
 
 class TestIsnan:
+    """ """
 
     def test_goodvalues(self):
+        """ """
         z = np.array((-1., 0., 1.))
         res = np.isnan(z) == 0
         assert_all(np.all(res, axis=0))
 
     def test_posinf(self):
+        """ """
         with np.errstate(divide='ignore'):
             assert_all(np.isnan(np.array((1.,))/0.) == 0)
 
     def test_neginf(self):
+        """ """
         with np.errstate(divide='ignore'):
             assert_all(np.isnan(np.array((-1.,))/0.) == 0)
 
     def test_ind(self):
+        """ """
         with np.errstate(divide='ignore', invalid='ignore'):
             assert_all(np.isnan(np.array((0.,))/0.) == 1)
 
     def test_integer(self):
+        """ """
         assert_all(np.isnan(1) == 0)
 
     def test_complex(self):
+        """ """
         assert_all(np.isnan(1+1j) == 0)
 
     def test_complex1(self):
+        """ """
         with np.errstate(divide='ignore', invalid='ignore'):
             assert_all(np.isnan(np.array(0+0j)/0.) == 1)
 
 
 class TestIsfinite:
+    """ """
     # Fixme, wrong place, isfinite now ufunc
 
     def test_goodvalues(self):
+        """ """
         z = np.array((-1., 0., 1.))
         res = np.isfinite(z) == 1
         assert_all(np.all(res, axis=0))
 
     def test_posinf(self):
+        """ """
         with np.errstate(divide='ignore', invalid='ignore'):
             assert_all(np.isfinite(np.array((1.,))/0.) == 0)
 
     def test_neginf(self):
+        """ """
         with np.errstate(divide='ignore', invalid='ignore'):
             assert_all(np.isfinite(np.array((-1.,))/0.) == 0)
 
     def test_ind(self):
+        """ """
         with np.errstate(divide='ignore', invalid='ignore'):
             assert_all(np.isfinite(np.array((0.,))/0.) == 0)
 
     def test_integer(self):
+        """ """
         assert_all(np.isfinite(1) == 1)
 
     def test_complex(self):
+        """ """
         assert_all(np.isfinite(1+1j) == 1)
 
     def test_complex1(self):
+        """ """
         with np.errstate(divide='ignore', invalid='ignore'):
             assert_all(np.isfinite(np.array(1+1j)/0.) == 0)
 
 
 class TestIsinf:
+    """ """
     # Fixme, wrong place, isinf now ufunc
 
     def test_goodvalues(self):
+        """ """
         z = np.array((-1., 0., 1.))
         res = np.isinf(z) == 0
         assert_all(np.all(res, axis=0))
 
     def test_posinf(self):
+        """ """
         with np.errstate(divide='ignore', invalid='ignore'):
             assert_all(np.isinf(np.array((1.,))/0.) == 1)
 
     def test_posinf_scalar(self):
+        """ """
         with np.errstate(divide='ignore', invalid='ignore'):
             assert_all(np.isinf(np.array(1.,)/0.) == 1)
 
     def test_neginf(self):
+        """ """
         with np.errstate(divide='ignore', invalid='ignore'):
             assert_all(np.isinf(np.array((-1.,))/0.) == 1)
 
     def test_neginf_scalar(self):
+        """ """
         with np.errstate(divide='ignore', invalid='ignore'):
             assert_all(np.isinf(np.array(-1.)/0.) == 1)
 
     def test_ind(self):
+        """ """
         with np.errstate(divide='ignore', invalid='ignore'):
             assert_all(np.isinf(np.array((0.,))/0.) == 0)
 
 
 class TestIsposinf:
+    """ """
 
     def test_generic(self):
+        """ """
         with np.errstate(divide='ignore', invalid='ignore'):
             vals = isposinf(np.array((-1., 0, 1))/0.)
         assert_(vals[0] == 0)
@@ -338,8 +411,10 @@
 
 
 class TestIsneginf:
+    """ """
 
     def test_generic(self):
+        """ """
         with np.errstate(divide='ignore', invalid='ignore'):
             vals = isneginf(np.array((-1., 0, 1))/0.)
         assert_(vals[0] == 1)
@@ -348,8 +423,10 @@
 
 
 class TestNanToNum:
+    """ """
 
     def test_generic(self):
+        """ """
         with np.errstate(divide='ignore', invalid='ignore'):
             vals = nan_to_num(np.array((-1., 0, 1))/0.)
         assert_all(vals[0] < -1e10) and assert_all(np.isfinite(vals[0]))
@@ -387,6 +464,7 @@
         assert_equal(type(vals), np.ndarray)
 
     def test_array(self):
+        """ """
         vals = nan_to_num([1])
         assert_array_equal(vals, np.array([1], int))
         assert_equal(type(vals), np.ndarray)
@@ -395,6 +473,7 @@
         assert_equal(type(vals), np.ndarray)
 
     def test_integer(self):
+        """ """
         vals = nan_to_num(1)
         assert_all(vals == 1)
         assert_equal(type(vals), np.int_)
@@ -403,6 +482,7 @@
         assert_equal(type(vals), np.int_)
 
     def test_float(self):
+        """ """
         vals = nan_to_num(1.0)
         assert_all(vals == 1.0)
         assert_equal(type(vals), np.float_)
@@ -411,6 +491,7 @@
         assert_equal(type(vals), np.float_)
 
     def test_complex_good(self):
+        """ """
         vals = nan_to_num(1+1j)
         assert_all(vals == 1+1j)
         assert_equal(type(vals), np.complex_)
@@ -419,6 +500,7 @@
         assert_equal(type(vals), np.complex_)
 
     def test_complex_bad(self):
+        """ """
         with np.errstate(divide='ignore', invalid='ignore'):
             v = 1 + 1j
             v += np.array(0+1.j)/0.
@@ -428,6 +510,7 @@
         assert_equal(type(vals), np.complex_)
 
     def test_complex_bad2(self):
+        """ """
         with np.errstate(divide='ignore', invalid='ignore'):
             v = 1 + 1j
             v += np.array(-1+1.j)/0.
@@ -442,6 +525,7 @@
         #assert_all(vals.real < -1e10) and assert_all(np.isfinite(vals))
     
     def test_do_not_rewrite_previous_keyword(self):
+        """ """
         # This is done to test that when, for instance, nan=np.inf then these 
         # values are not rewritten by posinf keyword to the posinf value.
         with np.errstate(divide='ignore', invalid='ignore'):
@@ -453,8 +537,10 @@
 
 
 class TestRealIfClose:
+    """ """
 
     def test_basic(self):
+        """ """
         a = np.random.rand(10)
         b = real_if_close(a+1e-15j)
         assert_all(isrealobj(b))
@@ -466,8 +552,10 @@
 
 
 class TestArrayConversion:
+    """ """
 
     def test_asfarray(self):
+        """ """
         a = asfarray(np.array([1, 2, 3]))
         assert_equal(a.__class__, np.ndarray)
         assert_(np.issubdtype(a.dtype, np.floating))
