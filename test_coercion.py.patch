# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexing/test_coercion.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexing/test_coercion.py
@@ -17,12 +17,34 @@
 
 @pytest.fixture(autouse=True, scope="class")
 def check_comprehensiveness(request):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     # Iterate over combination of dtype, method and klass
     # and ensure that each are contained within a collected test
     cls = request.cls
     combos = itertools.product(cls.klasses, cls.dtypes, [cls.method])
 
     def has_test(combo):
+        """
+
+        Parameters
+        ----------
+        combo :
+            
+
+        Returns
+        -------
+
+        """
         klass, dtype, method = combo
         cls_funcs = request.node.session.items
         return any(
@@ -37,6 +59,7 @@
 
 
 class CoercionBase:
+    """ """
 
     klasses = ["index", "series"]
     dtypes = [
@@ -53,9 +76,25 @@
 
     @property
     def method(self):
+        """ """
         raise NotImplementedError(self)
 
     def _assert(self, left, right, dtype):
+        """
+
+        Parameters
+        ----------
+        left :
+            
+        right :
+            
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         # explicitly check dtype to avoid any unexpected result
         if isinstance(left, pd.Series):
             tm.assert_series_equal(left, right)
@@ -68,13 +107,30 @@
 
 
 class TestSetitemCoercion(CoercionBase):
+    """ """
 
     method = "setitem"
 
     def _assert_setitem_series_conversion(
         self, original_series, loc_value, expected_series, expected_dtype
     ):
-        """ test series value's coercion triggered by assignment """
+        """test series value's coercion triggered by assignment
+
+        Parameters
+        ----------
+        original_series :
+            
+        loc_value :
+            
+        expected_series :
+            
+        expected_dtype :
+            
+
+        Returns
+        -------
+
+        """
         temp = original_series.copy()
         temp[1] = loc_value
         tm.assert_series_equal(temp, expected_series)
@@ -90,6 +146,19 @@
         "val,exp_dtype", [(1, object), (1.1, object), (1 + 1j, object), (True, object)],
     )
     def test_setitem_series_object(self, val, exp_dtype):
+        """
+
+        Parameters
+        ----------
+        val :
+            
+        exp_dtype :
+            
+
+        Returns
+        -------
+
+        """
         obj = pd.Series(list("abcd"))
         assert obj.dtype == object
 
@@ -101,6 +170,21 @@
         [(1, np.int64), (1.1, np.float64), (1 + 1j, np.complex128), (True, object)],
     )
     def test_setitem_series_int64(self, val, exp_dtype, request):
+        """
+
+        Parameters
+        ----------
+        val :
+            
+        exp_dtype :
+            
+        request :
+            
+
+        Returns
+        -------
+
+        """
         obj = pd.Series([1, 2, 3, 4])
         assert obj.dtype == np.int64
 
@@ -117,6 +201,21 @@
         "val,exp_dtype", [(np.int32(1), np.int8), (np.int16(2 ** 9), np.int16)]
     )
     def test_setitem_series_int8(self, val, exp_dtype, request):
+        """
+
+        Parameters
+        ----------
+        val :
+            
+        exp_dtype :
+            
+        request :
+            
+
+        Returns
+        -------
+
+        """
         obj = pd.Series([1, 2, 3, 4], dtype=np.int8)
         assert obj.dtype == np.int8
 
@@ -136,6 +235,19 @@
         [(1, np.float64), (1.1, np.float64), (1 + 1j, np.complex128), (True, object)],
     )
     def test_setitem_series_float64(self, val, exp_dtype):
+        """
+
+        Parameters
+        ----------
+        val :
+            
+        exp_dtype :
+            
+
+        Returns
+        -------
+
+        """
         obj = pd.Series([1.1, 2.2, 3.3, 4.4])
         assert obj.dtype == np.float64
 
@@ -152,6 +264,19 @@
         ],
     )
     def test_setitem_series_complex128(self, val, exp_dtype):
+        """
+
+        Parameters
+        ----------
+        val :
+            
+        exp_dtype :
+            
+
+        Returns
+        -------
+
+        """
         obj = pd.Series([1 + 1j, 2 + 2j, 3 + 3j, 4 + 4j])
         assert obj.dtype == np.complex128
 
@@ -169,6 +294,21 @@
         ],
     )
     def test_setitem_series_bool(self, val, exp_dtype, request):
+        """
+
+        Parameters
+        ----------
+        val :
+            
+        exp_dtype :
+            
+        request :
+            
+
+        Returns
+        -------
+
+        """
         obj = pd.Series([True, False, True, False])
         assert obj.dtype == np.bool_
 
@@ -196,6 +336,19 @@
         [(pd.Timestamp("2012-01-01"), "datetime64[ns]"), (1, object), ("x", object)],
     )
     def test_setitem_series_datetime64(self, val, exp_dtype):
+        """
+
+        Parameters
+        ----------
+        val :
+            
+        exp_dtype :
+            
+
+        Returns
+        -------
+
+        """
         obj = pd.Series(
             [
                 pd.Timestamp("2011-01-01"),
@@ -226,6 +379,19 @@
         ],
     )
     def test_setitem_series_datetime64tz(self, val, exp_dtype):
+        """
+
+        Parameters
+        ----------
+        val :
+            
+        exp_dtype :
+            
+
+        Returns
+        -------
+
+        """
         tz = "US/Eastern"
         obj = pd.Series(
             [
@@ -252,6 +418,19 @@
         [(pd.Timedelta("12 day"), "timedelta64[ns]"), (1, object), ("x", object)],
     )
     def test_setitem_series_timedelta64(self, val, exp_dtype):
+        """
+
+        Parameters
+        ----------
+        val :
+            
+        exp_dtype :
+            
+
+        Returns
+        -------
+
+        """
         obj = pd.Series(
             [
                 pd.Timedelta("1 day"),
@@ -270,7 +449,23 @@
     def _assert_setitem_index_conversion(
         self, original_series, loc_key, expected_index, expected_dtype
     ):
-        """ test index's coercion triggered by assign key """
+        """test index's coercion triggered by assign key
+
+        Parameters
+        ----------
+        original_series :
+            
+        loc_key :
+            
+        expected_index :
+            
+        expected_dtype :
+            
+
+        Returns
+        -------
+
+        """
         temp = original_series.copy()
         temp[loc_key] = 5
         exp = pd.Series([1, 2, 3, 4, 5], index=expected_index)
@@ -289,6 +484,19 @@
         "val,exp_dtype", [("x", object), (5, IndexError), (1.1, object)]
     )
     def test_setitem_index_object(self, val, exp_dtype):
+        """
+
+        Parameters
+        ----------
+        val :
+            
+        exp_dtype :
+            
+
+        Returns
+        -------
+
+        """
         obj = pd.Series([1, 2, 3, 4], index=list("abcd"))
         assert obj.index.dtype == object
 
@@ -305,6 +513,19 @@
         "val,exp_dtype", [(5, np.int64), (1.1, np.float64), ("x", object)]
     )
     def test_setitem_index_int64(self, val, exp_dtype):
+        """
+
+        Parameters
+        ----------
+        val :
+            
+        exp_dtype :
+            
+
+        Returns
+        -------
+
+        """
         obj = pd.Series([1, 2, 3, 4])
         assert obj.index.dtype == np.int64
 
@@ -315,6 +536,21 @@
         "val,exp_dtype", [(5, IndexError), (5.1, np.float64), ("x", object)]
     )
     def test_setitem_index_float64(self, val, exp_dtype, request):
+        """
+
+        Parameters
+        ----------
+        val :
+            
+        exp_dtype :
+            
+        request :
+            
+
+        Returns
+        -------
+
+        """
         obj = pd.Series([1, 2, 3, 4], index=[1.1, 2.1, 3.1, 4.1])
         assert obj.index.dtype == np.float64
 
@@ -329,34 +565,58 @@
         self._assert_setitem_index_conversion(obj, val, exp_index, exp_dtype)
 
     def test_setitem_series_period(self):
+        """ """
         pytest.xfail("Test not implemented")
 
     def test_setitem_index_complex128(self):
+        """ """
         pytest.xfail("Test not implemented")
 
     def test_setitem_index_bool(self):
+        """ """
         pytest.xfail("Test not implemented")
 
     def test_setitem_index_datetime64(self):
+        """ """
         pytest.xfail("Test not implemented")
 
     def test_setitem_index_datetime64tz(self):
+        """ """
         pytest.xfail("Test not implemented")
 
     def test_setitem_index_timedelta64(self):
+        """ """
         pytest.xfail("Test not implemented")
 
     def test_setitem_index_period(self):
+        """ """
         pytest.xfail("Test not implemented")
 
 
 class TestInsertIndexCoercion(CoercionBase):
+    """ """
 
     klasses = ["index"]
     method = "insert"
 
     def _assert_insert_conversion(self, original, value, expected, expected_dtype):
-        """ test coercion triggered by insert """
+        """test coercion triggered by insert
+
+        Parameters
+        ----------
+        original :
+            
+        value :
+            
+        expected :
+            
+        expected_dtype :
+            
+
+        Returns
+        -------
+
+        """
         target = original.copy()
         res = target.insert(1, value)
         tm.assert_index_equal(res, expected)
@@ -372,6 +632,21 @@
         ],
     )
     def test_insert_index_object(self, insert, coerced_val, coerced_dtype):
+        """
+
+        Parameters
+        ----------
+        insert :
+            
+        coerced_val :
+            
+        coerced_dtype :
+            
+
+        Returns
+        -------
+
+        """
         obj = pd.Index(list("abcd"))
         assert obj.dtype == object
 
@@ -388,6 +663,21 @@
         ],
     )
     def test_insert_index_int64(self, insert, coerced_val, coerced_dtype):
+        """
+
+        Parameters
+        ----------
+        insert :
+            
+        coerced_val :
+            
+        coerced_dtype :
+            
+
+        Returns
+        -------
+
+        """
         obj = pd.Int64Index([1, 2, 3, 4])
         assert obj.dtype == np.int64
 
@@ -404,6 +694,21 @@
         ],
     )
     def test_insert_index_float64(self, insert, coerced_val, coerced_dtype):
+        """
+
+        Parameters
+        ----------
+        insert :
+            
+        coerced_val :
+            
+        coerced_dtype :
+            
+
+        Returns
+        -------
+
+        """
         obj = pd.Float64Index([1.0, 2.0, 3.0, 4.0])
         assert obj.dtype == np.float64
 
@@ -419,6 +724,19 @@
         ids=["datetime64", "datetime64tz"],
     )
     def test_insert_index_datetimes(self, fill_val, exp_dtype):
+        """
+
+        Parameters
+        ----------
+        fill_val :
+            
+        exp_dtype :
+            
+
+        Returns
+        -------
+
+        """
         obj = pd.DatetimeIndex(
             ["2011-01-01", "2011-01-02", "2011-01-03", "2011-01-04"], tz=fill_val.tz
         )
@@ -451,6 +769,7 @@
         pytest.xfail("ToDo: must coerce to object")
 
     def test_insert_index_timedelta64(self):
+        """ """
         obj = pd.TimedeltaIndex(["1 day", "2 day", "3 day", "4 day"])
         assert obj.dtype == "timedelta64[ns]"
 
@@ -480,6 +799,21 @@
         ],
     )
     def test_insert_index_period(self, insert, coerced_val, coerced_dtype):
+        """
+
+        Parameters
+        ----------
+        insert :
+            
+        coerced_val :
+            
+        coerced_dtype :
+            
+
+        Returns
+        -------
+
+        """
         obj = pd.PeriodIndex(["2011-01", "2011-02", "2011-03", "2011-04"], freq="M")
         assert obj.dtype == "period[M]"
 
@@ -499,20 +833,41 @@
                 pd.Index(data, freq="M")
 
     def test_insert_index_complex128(self):
+        """ """
         pytest.xfail("Test not implemented")
 
     def test_insert_index_bool(self):
+        """ """
         pytest.xfail("Test not implemented")
 
 
 class TestWhereCoercion(CoercionBase):
+    """ """
 
     method = "where"
 
     def _assert_where_conversion(
         self, original, cond, values, expected, expected_dtype
     ):
-        """ test coercion triggered by where """
+        """test coercion triggered by where
+
+        Parameters
+        ----------
+        original :
+            
+        cond :
+            
+        values :
+            
+        expected :
+            
+        expected_dtype :
+            
+
+        Returns
+        -------
+
+        """
         target = original.copy()
         res = target.where(cond, values)
         self._assert(res, expected, expected_dtype)
@@ -522,6 +877,21 @@
         [(1, object), (1.1, object), (1 + 1j, object), (True, object)],
     )
     def test_where_object(self, index_or_series, fill_val, exp_dtype):
+        """
+
+        Parameters
+        ----------
+        index_or_series :
+            
+        fill_val :
+            
+        exp_dtype :
+            
+
+        Returns
+        -------
+
+        """
         klass = index_or_series
         obj = klass(list("abcd"))
         assert obj.dtype == object
@@ -548,6 +918,21 @@
         [(1, np.int64), (1.1, np.float64), (1 + 1j, np.complex128), (True, object)],
     )
     def test_where_int64(self, index_or_series, fill_val, exp_dtype):
+        """
+
+        Parameters
+        ----------
+        index_or_series :
+            
+        fill_val :
+            
+        exp_dtype :
+            
+
+        Returns
+        -------
+
+        """
         klass = index_or_series
         if klass is pd.Index and exp_dtype is np.complex128:
             pytest.skip("Complex Index not supported")
@@ -570,6 +955,21 @@
         [(1, np.float64), (1.1, np.float64), (1 + 1j, np.complex128), (True, object)],
     )
     def test_where_float64(self, index_or_series, fill_val, exp_dtype):
+        """
+
+        Parameters
+        ----------
+        index_or_series :
+            
+        fill_val :
+            
+        exp_dtype :
+            
+
+        Returns
+        -------
+
+        """
         klass = index_or_series
         if klass is pd.Index and exp_dtype is np.complex128:
             pytest.skip("Complex Index not supported")
@@ -597,6 +997,19 @@
         ],
     )
     def test_where_series_complex128(self, fill_val, exp_dtype):
+        """
+
+        Parameters
+        ----------
+        fill_val :
+            
+        exp_dtype :
+            
+
+        Returns
+        -------
+
+        """
         obj = pd.Series([1 + 1j, 2 + 2j, 3 + 3j, 4 + 4j])
         assert obj.dtype == np.complex128
         cond = pd.Series([True, False, True, False])
@@ -616,6 +1029,19 @@
         [(1, object), (1.1, object), (1 + 1j, object), (True, np.bool_)],
     )
     def test_where_series_bool(self, fill_val, exp_dtype):
+        """
+
+        Parameters
+        ----------
+        fill_val :
+            
+        exp_dtype :
+            
+
+        Returns
+        -------
+
+        """
 
         obj = pd.Series([True, False, True, False])
         assert obj.dtype == np.bool_
@@ -640,6 +1066,19 @@
         ids=["datetime64", "datetime64tz"],
     )
     def test_where_series_datetime64(self, fill_val, exp_dtype):
+        """
+
+        Parameters
+        ----------
+        fill_val :
+            
+        exp_dtype :
+            
+
+        Returns
+        -------
+
+        """
         obj = pd.Series(
             [
                 pd.Timestamp("2011-01-01"),
@@ -687,6 +1126,17 @@
         ],
     )
     def test_where_index_datetime(self, fill_val):
+        """
+
+        Parameters
+        ----------
+        fill_val :
+            
+
+        Returns
+        -------
+
+        """
         exp_dtype = "datetime64[ns]"
         obj = pd.Index(
             [
@@ -717,6 +1167,7 @@
 
     @pytest.mark.xfail(reason="GH 22839: do not ignore timezone, must be object")
     def test_where_index_datetime64tz(self):
+        """ """
         fill_val = pd.Timestamp("2012-01-01", tz="US/Eastern")
         exp_dtype = object
         obj = pd.Index(
@@ -748,21 +1199,36 @@
         self._assert_where_conversion(obj, cond, values, exp, exp_dtype)
 
     def test_where_index_complex128(self):
+        """ """
         pytest.xfail("Test not implemented")
 
     def test_where_index_bool(self):
+        """ """
         pytest.xfail("Test not implemented")
 
     def test_where_series_timedelta64(self):
+        """ """
         pytest.xfail("Test not implemented")
 
     def test_where_series_period(self):
+        """ """
         pytest.xfail("Test not implemented")
 
     @pytest.mark.parametrize(
         "value", [pd.Timedelta(days=9), timedelta(days=9), np.timedelta64(9, "D")]
     )
     def test_where_index_timedelta64(self, value):
+        """
+
+        Parameters
+        ----------
+        value :
+            
+
+        Returns
+        -------
+
+        """
         tdi = pd.timedelta_range("1 Day", periods=4)
         cond = np.array([True, False, False, True])
 
@@ -776,6 +1242,7 @@
             tdi.where(cond, np.datetime64("NaT", "ns"))
 
     def test_where_index_period(self):
+        """ """
         dti = pd.date_range("2016-01-01", periods=3, freq="QS")
         pi = dti.to_period("Q")
 
@@ -803,16 +1270,34 @@
 
 
 class TestFillnaSeriesCoercion(CoercionBase):
+    """ """
 
     # not indexing, but place here for consistency
 
     method = "fillna"
 
     def test_has_comprehensive_tests(self):
+        """ """
         pytest.xfail("Test not implemented")
 
     def _assert_fillna_conversion(self, original, value, expected, expected_dtype):
-        """ test coercion triggered by fillna """
+        """test coercion triggered by fillna
+
+        Parameters
+        ----------
+        original :
+            
+        value :
+            
+        expected :
+            
+        expected_dtype :
+            
+
+        Returns
+        -------
+
+        """
         target = original.copy()
         res = target.fillna(value)
         self._assert(res, expected, expected_dtype)
@@ -822,6 +1307,21 @@
         [(1, object), (1.1, object), (1 + 1j, object), (True, object)],
     )
     def test_fillna_object(self, index_or_series, fill_val, fill_dtype):
+        """
+
+        Parameters
+        ----------
+        index_or_series :
+            
+        fill_val :
+            
+        fill_dtype :
+            
+
+        Returns
+        -------
+
+        """
         klass = index_or_series
         obj = klass(["a", np.nan, "c", "d"])
         assert obj.dtype == object
@@ -834,6 +1334,21 @@
         [(1, np.float64), (1.1, np.float64), (1 + 1j, np.complex128), (True, object)],
     )
     def test_fillna_float64(self, index_or_series, fill_val, fill_dtype):
+        """
+
+        Parameters
+        ----------
+        index_or_series :
+            
+        fill_val :
+            
+        fill_dtype :
+            
+
+        Returns
+        -------
+
+        """
         klass = index_or_series
         obj = klass([1.1, np.nan, 3.3, 4.4])
         assert obj.dtype == np.float64
@@ -856,6 +1371,19 @@
         ],
     )
     def test_fillna_series_complex128(self, fill_val, fill_dtype):
+        """
+
+        Parameters
+        ----------
+        fill_val :
+            
+        fill_dtype :
+            
+
+        Returns
+        -------
+
+        """
         obj = pd.Series([1 + 1j, np.nan, 3 + 3j, 4 + 4j])
         assert obj.dtype == np.complex128
 
@@ -873,6 +1401,21 @@
         ids=["datetime64", "datetime64tz", "object", "object"],
     )
     def test_fillna_datetime(self, index_or_series, fill_val, fill_dtype):
+        """
+
+        Parameters
+        ----------
+        index_or_series :
+            
+        fill_val :
+            
+        fill_dtype :
+            
+
+        Returns
+        -------
+
+        """
         klass = index_or_series
         obj = klass(
             [
@@ -905,6 +1448,21 @@
         ],
     )
     def test_fillna_datetime64tz(self, index_or_series, fill_val, fill_dtype):
+        """
+
+        Parameters
+        ----------
+        index_or_series :
+            
+        fill_val :
+            
+        fill_dtype :
+            
+
+        Returns
+        -------
+
+        """
         klass = index_or_series
         tz = "US/Eastern"
 
@@ -929,31 +1487,40 @@
         self._assert_fillna_conversion(obj, fill_val, exp, fill_dtype)
 
     def test_fillna_series_int64(self):
+        """ """
         pytest.xfail("Test not implemented")
 
     def test_fillna_index_int64(self):
+        """ """
         pytest.xfail("Test not implemented")
 
     def test_fillna_series_bool(self):
+        """ """
         pytest.xfail("Test not implemented")
 
     def test_fillna_index_bool(self):
+        """ """
         pytest.xfail("Test not implemented")
 
     def test_fillna_series_timedelta64(self):
+        """ """
         pytest.xfail("Test not implemented")
 
     def test_fillna_series_period(self):
+        """ """
         pytest.xfail("Test not implemented")
 
     def test_fillna_index_timedelta64(self):
+        """ """
         pytest.xfail("Test not implemented")
 
     def test_fillna_index_period(self):
+        """ """
         pytest.xfail("Test not implemented")
 
 
 class TestReplaceSeriesCoercion(CoercionBase):
+    """ """
 
     klasses = ["series"]
     method = "replace"
@@ -1017,6 +1584,21 @@
         ],
     )
     def test_replace_series(self, how, to_key, from_key):
+        """
+
+        Parameters
+        ----------
+        how :
+            
+        to_key :
+            
+        from_key :
+            
+
+        Returns
+        -------
+
+        """
         index = pd.Index([3, 4], name="xxx")
         obj = pd.Series(self.rep[from_key], index=index, name="yyy")
         assert obj.dtype == from_key
@@ -1062,6 +1644,21 @@
         "from_key", ["datetime64[ns, UTC]", "datetime64[ns, US/Eastern]"]
     )
     def test_replace_series_datetime_tz(self, how, to_key, from_key):
+        """
+
+        Parameters
+        ----------
+        how :
+            
+        to_key :
+            
+        from_key :
+            
+
+        Returns
+        -------
+
+        """
         index = pd.Index([3, 4], name="xyz")
         obj = pd.Series(self.rep[from_key], index=index, name="yyy")
         assert obj.dtype == from_key
@@ -1089,6 +1686,21 @@
         ["datetime64[ns]", "datetime64[ns, UTC]", "datetime64[ns, US/Eastern]"],
     )
     def test_replace_series_datetime_datetime(self, how, to_key, from_key):
+        """
+
+        Parameters
+        ----------
+        how :
+            
+        to_key :
+            
+        from_key :
+            
+
+        Returns
+        -------
+
+        """
         index = pd.Index([3, 4], name="xyz")
         obj = pd.Series(self.rep[from_key], index=index, name="yyy")
         assert obj.dtype == from_key
@@ -1107,4 +1719,5 @@
         tm.assert_series_equal(result, exp)
 
     def test_replace_series_period(self):
-        pytest.xfail("Test not implemented")
+        """ """
+        pytest.xfail("Test not implemented")
