# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/chardet/hebrewprober.py
+++ b/..//venv/lib/python3.8/site-packages/chardet/hebrewprober.py
@@ -126,6 +126,7 @@
 # charset identified, either "windows-1255" or "ISO-8859-8".
 
 class HebrewProber(CharSetProber):
+    """ """
     # windows-1255 / ISO-8859-8 code points of interest
     FINAL_KAF = 0xea
     NORMAL_KAF = 0xeb
@@ -162,6 +163,7 @@
         self.reset()
 
     def reset(self):
+        """ """
         self._final_char_logical_score = 0
         self._final_char_visual_score = 0
         # The two last characters seen in the previous buffer,
@@ -172,14 +174,49 @@
         # These probers are owned by the group prober.
 
     def set_model_probers(self, logicalProber, visualProber):
+        """
+
+        Parameters
+        ----------
+        logicalProber :
+            
+        visualProber :
+            
+
+        Returns
+        -------
+
+        """
         self._logical_prober = logicalProber
         self._visual_prober = visualProber
 
     def is_final(self, c):
+        """
+
+        Parameters
+        ----------
+        c :
+            
+
+        Returns
+        -------
+
+        """
         return c in [self.FINAL_KAF, self.FINAL_MEM, self.FINAL_NUN,
                      self.FINAL_PE, self.FINAL_TSADI]
 
     def is_non_final(self, c):
+        """
+
+        Parameters
+        ----------
+        c :
+            
+
+        Returns
+        -------
+
+        """
         # The normal Tsadi is not a good Non-Final letter due to words like
         # 'lechotet' (to chat) containing an apostrophe after the tsadi. This
         # apostrophe is converted to a space in FilterWithoutEnglishLetters
@@ -194,6 +231,17 @@
                      self.NORMAL_NUN, self.NORMAL_PE]
 
     def feed(self, byte_str):
+        """
+
+        Parameters
+        ----------
+        byte_str :
+            
+
+        Returns
+        -------
+
+        """
         # Final letter analysis for logical-visual decision.
         # Look for evidence that the received buffer is either logical Hebrew
         # or visual Hebrew.
@@ -254,6 +302,7 @@
 
     @property
     def charset_name(self):
+        """ """
         # Make the decision: is it Logical or Visual?
         # If the final letter score distance is dominant enough, rely on it.
         finalsub = self._final_char_logical_score - self._final_char_visual_score
@@ -281,10 +330,12 @@
 
     @property
     def language(self):
+        """ """
         return 'Hebrew'
 
     @property
     def state(self):
+        """ """
         # Remain active as long as any of the model probers are active.
         if (self._logical_prober.state == ProbingState.NOT_ME) and \
            (self._visual_prober.state == ProbingState.NOT_ME):
