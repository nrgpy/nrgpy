# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpydoc/docscrape.py
+++ b/..//venv/lib/python3.8/site-packages/numpydoc/docscrape.py
@@ -13,6 +13,17 @@
 
 
 def strip_blank_lines(l):
+    """
+
+    Parameters
+    ----------
+    l :
+        
+
+    Returns
+    -------
+
+    """
     "Remove leading and trailing blank lines from a list of lines"
     while l and not l[0].strip():
         del l[0]
@@ -22,9 +33,7 @@
 
 
 class Reader(object):
-    """A line-based string reader.
-
-    """
+    """A line-based string reader."""
     def __init__(self, data):
         """
         Parameters
@@ -44,9 +53,11 @@
         return self._str[n]
 
     def reset(self):
+        """ """
         self._l = 0  # current line nr
 
     def read(self):
+        """ """
         if not self.eof():
             out = self[self._l]
             self._l += 1
@@ -55,6 +66,7 @@
             return ''
 
     def seek_next_non_empty_line(self):
+        """ """
         for l in self[self._l:]:
             if l.strip():
                 break
@@ -62,9 +74,21 @@
                 self._l += 1
 
     def eof(self):
+        """ """
         return self._l >= len(self._str)
 
     def read_to_condition(self, condition_func):
+        """
+
+        Parameters
+        ----------
+        condition_func :
+            
+
+        Returns
+        -------
+
+        """
         start = self._l
         for line in self[start:]:
             if condition_func(line):
@@ -75,29 +99,66 @@
         return []
 
     def read_to_next_empty_line(self):
+        """ """
         self.seek_next_non_empty_line()
 
         def is_empty(line):
+            """
+
+            Parameters
+            ----------
+            line :
+                
+
+            Returns
+            -------
+
+            """
             return not line.strip()
 
         return self.read_to_condition(is_empty)
 
     def read_to_next_unindented_line(self):
+        """ """
         def is_unindented(line):
+            """
+
+            Parameters
+            ----------
+            line :
+                
+
+            Returns
+            -------
+
+            """
             return (line.strip() and (len(line.lstrip()) == len(line)))
         return self.read_to_condition(is_unindented)
 
     def peek(self, n=0):
+        """
+
+        Parameters
+        ----------
+        n :
+             (Default value = 0)
+
+        Returns
+        -------
+
+        """
         if self._l + n < len(self._str):
             return self[self._l + n]
         else:
             return ''
 
     def is_empty(self):
+        """ """
         return not ''.join(self._str).strip()
 
 
 class ParseError(Exception):
+    """ """
     def __str__(self):
         message = self.args[0]
         if hasattr(self, 'docstring'):
@@ -110,8 +171,14 @@
 
 class NumpyDocString(Mapping):
     """Parses a numpydoc string to an abstract representation
-
+    
     Instances define a mapping from section title to structured data.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     """
 
@@ -165,6 +232,7 @@
         return len(self._parsed_data)
 
     def _is_at_section(self):
+        """ """
         self._doc.seek_next_non_empty_line()
 
         if self._doc.eof():
@@ -179,6 +247,17 @@
         return l2.startswith('-'*len(l1)) or l2.startswith('='*len(l1))
 
     def _strip(self, doc):
+        """
+
+        Parameters
+        ----------
+        doc :
+            
+
+        Returns
+        -------
+
+        """
         i = 0
         j = 0
         for i, line in enumerate(doc):
@@ -192,6 +271,7 @@
         return doc[i:len(doc)-j]
 
     def _read_to_next_section(self):
+        """ """
         section = self._doc.read_to_next_empty_line()
 
         while not self._is_at_section() and not self._doc.eof():
@@ -203,6 +283,7 @@
         return section
 
     def _read_sections(self):
+        """ """
         while not self._doc.eof():
             data = self._read_to_next_section()
             name = data[0].strip()
@@ -215,6 +296,19 @@
                 yield name, self._strip(data[2:])
 
     def _parse_param_list(self, content, single_element_is_type=False):
+        """
+
+        Parameters
+        ----------
+        content :
+            
+        single_element_is_type :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         r = Reader(content)
         params = []
         while not r.eof():
@@ -272,18 +366,35 @@
     empty_description = '..'
 
     def _parse_see_also(self, content):
-        """
-        func_name : Descriptive text
+        """func_name : Descriptive text
             continued text
         another_func_name : Descriptive text
         func_name1, func_name2, :meth:`func_name`, func_name3
 
+        Parameters
+        ----------
+        content :
+            
+
+        Returns
+        -------
+
         """
 
         items = []
 
         def parse_item_name(text):
-            """Match ':role:`name`' or 'name'."""
+            """Match ':role:`name`' or 'name'.
+
+            Parameters
+            ----------
+            text :
+                
+
+            Returns
+            -------
+
+            """
             m = self._func_rgx.match(text)
             if not m:
                 raise ParseError("%s is not a item name" % text)
@@ -325,12 +436,32 @@
         return items
 
     def _parse_index(self, section, content):
-        """
-        .. index: default
+        """.. index: default
            :refguide: something, else, and more
 
+        Parameters
+        ----------
+        section :
+            
+        content :
+            
+
+        Returns
+        -------
+
         """
         def strip_each_in(lst):
+            """
+
+            Parameters
+            ----------
+            lst :
+                
+
+            Returns
+            -------
+
+            """
             return [s.strip() for s in lst]
 
         out = {}
@@ -366,6 +497,7 @@
             self['Extended Summary'] = self._read_to_next_section()
 
     def _parse(self):
+        """ """
         self._doc.reset()
         self._parse_summary()
 
@@ -404,6 +536,19 @@
                 self[section] = content
 
     def _error_location(self, msg, error=True):
+        """
+
+        Parameters
+        ----------
+        msg :
+            
+        error :
+             (Default value = True)
+
+        Returns
+        -------
+
+        """
         if hasattr(self, '_obj'):
             # we know where the docs came from:
             try:
@@ -420,33 +565,73 @@
     # string conversion routines
 
     def _str_header(self, name, symbol='-'):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+        symbol :
+             (Default value = '-')
+
+        Returns
+        -------
+
+        """
         return [name, len(name)*symbol]
 
     def _str_indent(self, doc, indent=4):
+        """
+
+        Parameters
+        ----------
+        doc :
+            
+        indent :
+             (Default value = 4)
+
+        Returns
+        -------
+
+        """
         out = []
         for line in doc:
             out += [' '*indent + line]
         return out
 
     def _str_signature(self):
+        """ """
         if self['Signature']:
             return [self['Signature'].replace('*', r'\*')] + ['']
         else:
             return ['']
 
     def _str_summary(self):
+        """ """
         if self['Summary']:
             return self['Summary'] + ['']
         else:
             return []
 
     def _str_extended_summary(self):
+        """ """
         if self['Extended Summary']:
             return self['Extended Summary'] + ['']
         else:
             return []
 
     def _str_param_list(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         out = []
         if self[name]:
             out += self._str_header(name)
@@ -463,6 +648,17 @@
         return out
 
     def _str_section(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         out = []
         if self[name]:
             out += self._str_header(name)
@@ -471,6 +667,17 @@
         return out
 
     def _str_see_also(self, func_role):
+        """
+
+        Parameters
+        ----------
+        func_role :
+            
+
+        Returns
+        -------
+
+        """
         if not self['See Also']:
             return []
         out = []
@@ -503,6 +710,7 @@
         return out
 
     def _str_index(self):
+        """ """
         idx = self['index']
         out = []
         output_index = False
@@ -539,6 +747,19 @@
 
 
 def indent(str, indent=4):
+    """
+
+    Parameters
+    ----------
+    str :
+        
+    indent :
+         (Default value = 4)
+
+    Returns
+    -------
+
+    """
     indent_str = ' '*indent
     if str is None:
         return indent_str
@@ -547,15 +768,39 @@
 
 
 def dedent_lines(lines):
-    """Deindent a list of lines maximally"""
+    """Deindent a list of lines maximally
+
+    Parameters
+    ----------
+    lines :
+        
+
+    Returns
+    -------
+
+    """
     return textwrap.dedent("\n".join(lines)).split("\n")
 
 
 def header(text, style='-'):
+    """
+
+    Parameters
+    ----------
+    text :
+        
+    style :
+         (Default value = '-')
+
+    Returns
+    -------
+
+    """
     return text + '\n' + style*len(text) + '\n'
 
 
 class FunctionDoc(NumpyDocString):
+    """ """
     def __init__(self, func, role='func', doc=None, config={}):
         self._f = func
         self._role = role  # e.g. "func" or "meth"
@@ -567,6 +812,7 @@
         NumpyDocString.__init__(self, doc, config)
 
     def get_func(self):
+        """ """
         func_name = getattr(self._f, '__name__', self.__class__.__name__)
         if inspect.isclass(self._f):
             func = getattr(self._f, '__call__', self._f.__init__)
@@ -593,6 +839,7 @@
 
 
 class ClassDoc(NumpyDocString):
+    """ """
 
     extra_public_methods = ['__call__']
 
@@ -628,6 +875,17 @@
 
         if config.get('show_class_members', True) and _exclude is not ALL:
             def splitlines_x(s):
+                """
+
+                Parameters
+                ----------
+                s :
+                    
+
+                Returns
+                -------
+
+                """
                 if not s:
                     return []
                 else:
@@ -650,6 +908,7 @@
 
     @property
     def methods(self):
+        """ """
         if self._cls is None:
             return []
         return [name for name, func in inspect.getmembers(self._cls)
@@ -660,6 +919,7 @@
 
     @property
     def properties(self):
+        """ """
         if self._cls is None:
             return []
         return [name for name, func in inspect.getmembers(self._cls)
@@ -669,6 +929,17 @@
                     and self._is_show_member(name))]
 
     def _is_show_member(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         if self.show_inherited_members:
             return True  # show all class members
         if name not in self._cls.__dict__:
