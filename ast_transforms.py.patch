# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pycparser/ast_transforms.py
+++ b/..//venv/lib/python3.8/site-packages/pycparser/ast_transforms.py
@@ -11,11 +11,11 @@
 
 
 def fix_switch_cases(switch_node):
-    """ The 'case' statements in a 'switch' come out of parsing with one
+    """The 'case' statements in a 'switch' come out of parsing with one
         child node, so subsequent statements are just tucked to the parent
         Compound. Additionally, consecutive (fall-through) case statements
         come out messy. This is a peculiarity of the C grammar. The following:
-
+    
             switch (myvar) {
                 case 10:
                     k = 10;
@@ -27,9 +27,9 @@
                 default:
                     break;
             }
-
+    
         Creates this tree (pseudo-dump):
-
+    
             Switch
                 ID: myvar
                 Compound:
@@ -42,10 +42,10 @@
                             return 20
                     Default:
                         break
-
+    
         The goal of this transform is to fix this mess, turning it into the
         following:
-
+    
             Switch
                 ID: myvar
                 Compound:
@@ -55,11 +55,20 @@
                         return 10
                     Case 20:
                     Case 30:
-                        return 20
-                    Default:
-                        break
 
+    Parameters
+    ----------
+    switch_node :
+        
+
+    Returns
+    -------
+    type
+        Default:
+        break
+        
         A fixed AST node is returned. The argument may be modified.
+
     """
     assert isinstance(switch_node, c_ast.Switch)
     if not isinstance(switch_node.stmt, c_ast.Compound):
@@ -97,8 +106,19 @@
 
 
 def _extract_nested_case(case_node, stmts_list):
-    """ Recursively extract consecutive Case statements that are made nested
+    """Recursively extract consecutive Case statements that are made nested
         by the parser and add them to the stmts_list.
+
+    Parameters
+    ----------
+    case_node :
+        
+    stmts_list :
+        
+
+    Returns
+    -------
+
     """
     if isinstance(case_node.stmts[0], (c_ast.Case, c_ast.Default)):
         stmts_list.append(case_node.stmts.pop())
