# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test_nanfunctions.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test_nanfunctions.py
@@ -36,11 +36,13 @@
 
 
 class TestNanFunctions_MinMax:
+    """ """
 
     nanfuncs = [np.nanmin, np.nanmax]
     stdfuncs = [np.min, np.max]
 
     def test_mutation(self):
+        """ """
         # Check that passed array is not modified.
         ndat = _ndat.copy()
         for f in self.nanfuncs:
@@ -48,6 +50,7 @@
             assert_equal(ndat, _ndat)
 
     def test_keepdims(self):
+        """ """
         mat = np.eye(3)
         for nf, rf in zip(self.nanfuncs, self.stdfuncs):
             for axis in [None, 0, 1]:
@@ -56,6 +59,7 @@
                 assert_(res.ndim == tgt.ndim)
 
     def test_out(self):
+        """ """
         mat = np.eye(3)
         for nf, rf in zip(self.nanfuncs, self.stdfuncs):
             resout = np.zeros(3)
@@ -65,6 +69,7 @@
             assert_almost_equal(res, tgt)
 
     def test_dtype_from_input(self):
+        """ """
         codes = 'efdgFDG'
         for nf, rf in zip(self.nanfuncs, self.stdfuncs):
             for c in codes:
@@ -78,12 +83,14 @@
                 assert_(res is tgt)
 
     def test_result_values(self):
+        """ """
         for nf, rf in zip(self.nanfuncs, self.stdfuncs):
             tgt = [rf(d) for d in _rdat]
             res = nf(_ndat, axis=1)
             assert_almost_equal(res, tgt)
 
     def test_allnans(self):
+        """ """
         mat = np.array([np.nan]*9).reshape(3, 3)
         for f in self.nanfuncs:
             for axis in [None, 0, 1]:
@@ -100,6 +107,7 @@
                 assert_(issubclass(w[0].category, RuntimeWarning))
 
     def test_masked(self):
+        """ """
         mat = np.ma.fix_invalid(_ndat)
         msk = mat._mask.copy()
         for f in [np.nanmin]:
@@ -110,11 +118,14 @@
             assert_(not np.isinf(mat).any())
 
     def test_scalar(self):
+        """ """
         for f in self.nanfuncs:
             assert_(f(0.) == 0.)
 
     def test_subclass(self):
+        """ """
         class MyNDArray(np.ndarray):
+            """ """
             pass
 
         # Check that it works and that type and
@@ -157,6 +168,7 @@
                 assert_(len(w) == 0)
 
     def test_object_array(self):
+        """ """
         arr = np.array([[1.0, 2.0], [np.nan, 4.0], [np.nan, np.nan]], dtype=object)
         assert_equal(np.nanmin(arr), 1.0)
         assert_equal(np.nanmin(arr, axis=0), [1.0, 2.0])
@@ -170,10 +182,12 @@
 
 
 class TestNanFunctions_ArgminArgmax:
+    """ """
 
     nanfuncs = [np.nanargmin, np.nanargmax]
 
     def test_mutation(self):
+        """ """
         # Check that passed array is not modified.
         ndat = _ndat.copy()
         for f in self.nanfuncs:
@@ -181,6 +195,7 @@
             assert_equal(ndat, _ndat)
 
     def test_result_values(self):
+        """ """
         for f, fcmp in zip(self.nanfuncs, [np.greater, np.less]):
             for row in _ndat:
                 with suppress_warnings() as sup:
@@ -194,6 +209,7 @@
                     assert_(not np.equal(val, row[:ind]).any())
 
     def test_allnans(self):
+        """ """
         mat = np.array([np.nan]*9).reshape(3, 3)
         for f in self.nanfuncs:
             for axis in [None, 0, 1]:
@@ -201,6 +217,7 @@
             assert_raises(ValueError, f, np.nan)
 
     def test_empty(self):
+        """ """
         mat = np.zeros((0, 3))
         for f in self.nanfuncs:
             for axis in [0, None]:
@@ -210,11 +227,14 @@
                 assert_equal(res, np.zeros(0))
 
     def test_scalar(self):
+        """ """
         for f in self.nanfuncs:
             assert_(f(0.) == 0.)
 
     def test_subclass(self):
+        """ """
         class MyNDArray(np.ndarray):
+            """ """
             pass
 
         # Check that it works and that type and
@@ -232,6 +252,7 @@
 
 
 class TestNanFunctions_IntTypes:
+    """ """
 
     int_types = (np.int8, np.int16, np.int32, np.int64, np.uint8,
                  np.uint16, np.uint32, np.uint64)
@@ -239,55 +260,66 @@
     mat = np.array([127, 39, 93, 87, 46])
 
     def integer_arrays(self):
+        """ """
         for dtype in self.int_types:
             yield self.mat.astype(dtype)
 
     def test_nanmin(self):
+        """ """
         tgt = np.min(self.mat)
         for mat in self.integer_arrays():
             assert_equal(np.nanmin(mat), tgt)
 
     def test_nanmax(self):
+        """ """
         tgt = np.max(self.mat)
         for mat in self.integer_arrays():
             assert_equal(np.nanmax(mat), tgt)
 
     def test_nanargmin(self):
+        """ """
         tgt = np.argmin(self.mat)
         for mat in self.integer_arrays():
             assert_equal(np.nanargmin(mat), tgt)
 
     def test_nanargmax(self):
+        """ """
         tgt = np.argmax(self.mat)
         for mat in self.integer_arrays():
             assert_equal(np.nanargmax(mat), tgt)
 
     def test_nansum(self):
+        """ """
         tgt = np.sum(self.mat)
         for mat in self.integer_arrays():
             assert_equal(np.nansum(mat), tgt)
 
     def test_nanprod(self):
+        """ """
         tgt = np.prod(self.mat)
         for mat in self.integer_arrays():
             assert_equal(np.nanprod(mat), tgt)
 
     def test_nancumsum(self):
+        """ """
         tgt = np.cumsum(self.mat)
         for mat in self.integer_arrays():
             assert_equal(np.nancumsum(mat), tgt)
 
     def test_nancumprod(self):
+        """ """
         tgt = np.cumprod(self.mat)
         for mat in self.integer_arrays():
             assert_equal(np.nancumprod(mat), tgt)
 
     def test_nanmean(self):
+        """ """
         tgt = np.mean(self.mat)
         for mat in self.integer_arrays():
             assert_equal(np.nanmean(mat), tgt)
 
     def test_nanvar(self):
+        """ """
         tgt = np.var(self.mat)
         for mat in self.integer_arrays():
             assert_equal(np.nanvar(mat), tgt)
@@ -297,6 +329,7 @@
             assert_equal(np.nanvar(mat, ddof=1), tgt)
 
     def test_nanstd(self):
+        """ """
         tgt = np.std(self.mat)
         for mat in self.integer_arrays():
             assert_equal(np.nanstd(mat), tgt)
@@ -307,7 +340,9 @@
 
 
 class SharedNanFunctionsTestsMixin:
+    """ """
     def test_mutation(self):
+        """ """
         # Check that passed array is not modified.
         ndat = _ndat.copy()
         for f in self.nanfuncs:
@@ -315,6 +350,7 @@
             assert_equal(ndat, _ndat)
 
     def test_keepdims(self):
+        """ """
         mat = np.eye(3)
         for nf, rf in zip(self.nanfuncs, self.stdfuncs):
             for axis in [None, 0, 1]:
@@ -323,6 +359,7 @@
                 assert_(res.ndim == tgt.ndim)
 
     def test_out(self):
+        """ """
         mat = np.eye(3)
         for nf, rf in zip(self.nanfuncs, self.stdfuncs):
             resout = np.zeros(3)
@@ -332,6 +369,7 @@
             assert_almost_equal(res, tgt)
 
     def test_dtype_from_dtype(self):
+        """ """
         mat = np.eye(3)
         codes = 'efdgFDG'
         for nf, rf in zip(self.nanfuncs, self.stdfuncs):
@@ -349,6 +387,7 @@
                     assert_(res is tgt)
 
     def test_dtype_from_char(self):
+        """ """
         mat = np.eye(3)
         codes = 'efdgFDG'
         for nf, rf in zip(self.nanfuncs, self.stdfuncs):
@@ -366,6 +405,7 @@
                     assert_(res is tgt)
 
     def test_dtype_from_input(self):
+        """ """
         codes = 'efdgFDG'
         for nf, rf in zip(self.nanfuncs, self.stdfuncs):
             for c in codes:
@@ -379,17 +419,21 @@
                 assert_(res is tgt)
 
     def test_result_values(self):
+        """ """
         for nf, rf in zip(self.nanfuncs, self.stdfuncs):
             tgt = [rf(d) for d in _rdat]
             res = nf(_ndat, axis=1)
             assert_almost_equal(res, tgt)
 
     def test_scalar(self):
+        """ """
         for f in self.nanfuncs:
             assert_(f(0.) == 0.)
 
     def test_subclass(self):
+        """ """
         class MyNDArray(np.ndarray):
+            """ """
             pass
 
         # Check that it works and that type and
@@ -412,11 +456,13 @@
 
 
 class TestNanFunctions_SumProd(SharedNanFunctionsTestsMixin):
+    """ """
 
     nanfuncs = [np.nansum, np.nanprod]
     stdfuncs = [np.sum, np.prod]
 
     def test_allnans(self):
+        """ """
         # Check for FutureWarning
         with warnings.catch_warnings(record=True) as w:
             warnings.simplefilter('always')
@@ -432,6 +478,7 @@
             assert_(len(w) == 0, 'unwanted warning raised')
 
     def test_empty(self):
+        """ """
         for f, tgt_value in zip([np.nansum, np.nanprod], [0, 1]):
             mat = np.zeros((0, 3))
             tgt = [tgt_value]*3
@@ -446,11 +493,13 @@
 
 
 class TestNanFunctions_CumSumProd(SharedNanFunctionsTestsMixin):
+    """ """
 
     nanfuncs = [np.nancumsum, np.nancumprod]
     stdfuncs = [np.cumsum, np.cumprod]
 
     def test_allnans(self):
+        """ """
         for f, tgt_value in zip(self.nanfuncs, [0, 1]):
             # Unlike other nan-functions, sum/prod/cumsum/cumprod don't warn on all nan input
             with assert_no_warnings():
@@ -465,6 +514,7 @@
                 f([0]*3, axis=None)
 
     def test_empty(self):
+        """ """
         for f, tgt_value in zip(self.nanfuncs, [0, 1]):
             mat = np.zeros((0, 3))
             tgt = tgt_value*np.ones((0, 3))
@@ -478,6 +528,7 @@
             assert_equal(res, tgt)
 
     def test_keepdims(self):
+        """ """
         for f, g in zip(self.nanfuncs, self.stdfuncs):
             mat = np.eye(3)
             for axis in [None, 0, 1]:
@@ -497,6 +548,7 @@
                 assert_equal(res.shape, (3, 5, 7, 11))
 
     def test_result_values(self):
+        """ """
         for axis in (-2, -1, 0, 1, None):
             tgt = np.cumprod(_ndat_ones, axis=axis)
             res = np.nancumprod(_ndat, axis=axis)
@@ -506,6 +558,7 @@
             assert_almost_equal(res, tgt)
 
     def test_out(self):
+        """ """
         mat = np.eye(3)
         for nf, rf in zip(self.nanfuncs, self.stdfuncs):
             resout = np.eye(3)
@@ -517,22 +570,26 @@
 
 
 class TestNanFunctions_MeanVarStd(SharedNanFunctionsTestsMixin):
+    """ """
 
     nanfuncs = [np.nanmean, np.nanvar, np.nanstd]
     stdfuncs = [np.mean, np.var, np.std]
 
     def test_dtype_error(self):
+        """ """
         for f in self.nanfuncs:
             for dtype in [np.bool_, np.int_, np.object_]:
                 assert_raises(TypeError, f, _ndat, axis=1, dtype=dtype)
 
     def test_out_dtype_error(self):
+        """ """
         for f in self.nanfuncs:
             for dtype in [np.bool_, np.int_, np.object_]:
                 out = np.empty(_ndat.shape[0], dtype=dtype)
                 assert_raises(TypeError, f, _ndat, axis=1, out=out)
 
     def test_ddof(self):
+        """ """
         nanfuncs = [np.nanvar, np.nanstd]
         stdfuncs = [np.var, np.std]
         for nf, rf in zip(nanfuncs, stdfuncs):
@@ -542,6 +599,7 @@
                 assert_almost_equal(res, tgt)
 
     def test_ddof_too_big(self):
+        """ """
         nanfuncs = [np.nanvar, np.nanstd]
         stdfuncs = [np.var, np.std]
         dsize = [len(d) for d in _rdat]
@@ -559,6 +617,7 @@
                         assert_(len(sup.log) == 0)
 
     def test_allnans(self):
+        """ """
         mat = np.array([np.nan]*9).reshape(3, 3)
         for f in self.nanfuncs:
             for axis in [None, 0, 1]:
@@ -573,6 +632,7 @@
                     assert_(issubclass(w[0].category, RuntimeWarning))
 
     def test_empty(self):
+        """ """
         mat = np.zeros((0, 3))
         for f in self.nanfuncs:
             for axis in [0, None]:
@@ -589,14 +649,17 @@
 
 
 class TestNanFunctions_Median:
+    """ """
 
     def test_mutation(self):
+        """ """
         # Check that passed array is not modified.
         ndat = _ndat.copy()
         np.nanmedian(ndat)
         assert_equal(ndat, _ndat)
 
     def test_keepdims(self):
+        """ """
         mat = np.eye(3)
         for axis in [None, 0, 1]:
             tgt = np.median(mat, axis=axis, out=None, overwrite_input=False)
@@ -624,6 +687,7 @@
             assert_equal(res.shape, (1, 1, 7, 1))
 
     def test_out(self):
+        """ """
         mat = np.random.rand(3, 3)
         nan_mat = np.insert(mat, [0, 2], np.nan, axis=1)
         resout = np.zeros(3)
@@ -642,6 +706,7 @@
         assert_almost_equal(res, tgt)
 
     def test_small_large(self):
+        """ """
         # test the small and large code paths, current cutoff 400 elements
         for s in [5, 20, 51, 200, 1000]:
             d = np.random.randn(4, s)
@@ -658,11 +723,13 @@
             assert_array_equal(np.nanmedian(d, axis=-1), tgt)
 
     def test_result_values(self):
+        """ """
             tgt = [np.median(d) for d in _rdat]
             res = np.nanmedian(_ndat, axis=1)
             assert_almost_equal(res, tgt)
 
     def test_allnans(self):
+        """ """
         mat = np.array([np.nan]*9).reshape(3, 3)
         for axis in [None, 0, 1]:
             with suppress_warnings() as sup:
@@ -681,6 +748,7 @@
                     assert_(len(sup.log) == 4)
 
     def test_empty(self):
+        """ """
         mat = np.zeros((0, 3))
         for axis in [0, None]:
             with warnings.catch_warnings(record=True) as w:
@@ -695,9 +763,11 @@
                 assert_(len(w) == 0)
 
     def test_scalar(self):
+        """ """
         assert_(np.nanmedian(0.) == 0.)
 
     def test_extended_axis_invalid(self):
+        """ """
         d = np.ones((3, 5, 7, 11))
         assert_raises(np.AxisError, np.nanmedian, d, axis=-5)
         assert_raises(np.AxisError, np.nanmedian, d, axis=(0, -5))
@@ -706,6 +776,7 @@
         assert_raises(ValueError, np.nanmedian, d, axis=(1, 1))
 
     def test_float_special(self):
+        """ """
         with suppress_warnings() as sup:
             sup.filter(RuntimeWarning)
             for inf in [np.inf, -np.inf]:
@@ -753,14 +824,17 @@
 
 
 class TestNanFunctions_Percentile:
+    """ """
 
     def test_mutation(self):
+        """ """
         # Check that passed array is not modified.
         ndat = _ndat.copy()
         np.nanpercentile(ndat, 30)
         assert_equal(ndat, _ndat)
 
     def test_keepdims(self):
+        """ """
         mat = np.eye(3)
         for axis in [None, 0, 1]:
             tgt = np.percentile(mat, 70, axis=axis, out=None,
@@ -790,6 +864,7 @@
             assert_equal(res.shape, (1, 1, 7, 1))
 
     def test_out(self):
+        """ """
         mat = np.random.rand(3, 3)
         nan_mat = np.insert(mat, [0, 2], np.nan, axis=1)
         resout = np.zeros(3)
@@ -808,6 +883,7 @@
         assert_almost_equal(res, tgt)
 
     def test_result_values(self):
+        """ """
         tgt = [np.percentile(d, 28) for d in _rdat]
         res = np.nanpercentile(_ndat, 28, axis=1)
         assert_almost_equal(res, tgt)
@@ -817,6 +893,7 @@
         assert_almost_equal(res, tgt)
 
     def test_allnans(self):
+        """ """
         mat = np.array([np.nan]*9).reshape(3, 3)
         for axis in [None, 0, 1]:
             with warnings.catch_warnings(record=True) as w:
@@ -836,6 +913,7 @@
                 assert_(issubclass(w[0].category, RuntimeWarning))
 
     def test_empty(self):
+        """ """
         mat = np.zeros((0, 3))
         for axis in [0, None]:
             with warnings.catch_warnings(record=True) as w:
@@ -850,6 +928,7 @@
                 assert_(len(w) == 0)
 
     def test_scalar(self):
+        """ """
         assert_equal(np.nanpercentile(0., 100), 0.)
         a = np.arange(6)
         r = np.nanpercentile(a, 50, axis=0)
@@ -857,6 +936,7 @@
         assert_(np.isscalar(r))
 
     def test_extended_axis_invalid(self):
+        """ """
         d = np.ones((3, 5, 7, 11))
         assert_raises(np.AxisError, np.nanpercentile, d, q=5, axis=-5)
         assert_raises(np.AxisError, np.nanpercentile, d, q=5, axis=(0, -5))
@@ -865,6 +945,7 @@
         assert_raises(ValueError, np.nanpercentile, d, q=5, axis=(1, 1))
 
     def test_multiple_percentiles(self):
+        """ """
         perc = [50, 100]
         mat = np.ones((4, 3))
         nan_mat = np.nan * mat
@@ -892,9 +973,11 @@
 
 
 class TestNanFunctions_Quantile:
+    """ """
     # most of this is already tested by TestPercentile
 
     def test_regression(self):
+        """ """
         ar = np.arange(24).reshape(2, 3, 4).astype(float)
         ar[0][1] = np.nan
 
@@ -909,12 +992,14 @@
                      np.nanpercentile(ar, q=[25, 50, 75], axis=1))
 
     def test_basic(self):
+        """ """
         x = np.arange(8) * 0.5
         assert_equal(np.nanquantile(x, 0), 0.)
         assert_equal(np.nanquantile(x, 1), 3.5)
         assert_equal(np.nanquantile(x, 0.5), 1.75)
 
     def test_no_p_overwrite(self):
+        """ """
         # this is worth retesting, because quantile does not make a copy
         p0 = np.array([0, 0.75, 0.25, 0.5, 1.0])
         p = p0.copy()
@@ -943,6 +1028,19 @@
                [False, True]])),
     ])
 def test__nan_mask(arr, expected):
+    """
+
+    Parameters
+    ----------
+    arr :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     for out in [None, np.empty(arr.shape, dtype=np.bool_)]:
         actual = _nan_mask(arr, out=out)
         assert_equal(actual, expected)
@@ -954,8 +1052,15 @@
 
 
 def test__replace_nan():
-    """ Test that _replace_nan returns the original array if there are no
+    """Test that _replace_nan returns the original array if there are no
     NaNs, not a copy.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     for dtype in [np.bool, np.int32, np.int64]:
         arr = np.array([0, 1], dtype=dtype)
