# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/computation/engines.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/computation/engines.py
@@ -14,17 +14,22 @@
 
 
 class NumExprClobberingError(NameError):
+    """ """
     pass
 
 
 def _check_ne_builtin_clash(expr):
-    """
-    Attempt to prevent foot-shooting in a helpful way.
+    """Attempt to prevent foot-shooting in a helpful way.
 
     Parameters
     ----------
-    terms : Term
-        Terms can contain
+    expr :
+        
+
+    Returns
+    -------
+
+    
     """
     names = expr.names
     overlap = names & _ne_builtins
@@ -47,24 +52,32 @@
         self.result_type = None
 
     def convert(self) -> str:
-        """
-        Convert an expression for evaluation.
+        """Convert an expression for evaluation.
+        
+        Defaults to return the expression as a string.
 
-        Defaults to return the expression as a string.
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         return printing.pprint_thing(self.expr)
 
     def evaluate(self) -> object:
-        """
-        Run the engine on the expression.
-
+        """Run the engine on the expression.
+        
         This method performs alignment which is necessary no matter what engine
         is being used, thus its implementation is in the base class.
 
+        Parameters
+        ----------
+
         Returns
         -------
-        object
-            The result of the passed expression.
+
+        
         """
         if not self._is_aligned:
             self.result_type, self.aligned_axes = align_terms(self.expr.terms)
@@ -77,18 +90,21 @@
 
     @property
     def _is_aligned(self) -> bool:
+        """ """
         return self.aligned_axes is not None and self.result_type is not None
 
     @abc.abstractmethod
     def _evaluate(self):
-        """
-        Return an evaluated expression.
+        """Return an evaluated expression.
 
         Parameters
         ----------
         env : Scope
             The local and global environment in which to evaluate an
             expression.
+
+        Returns
+        -------
 
         Notes
         -----
@@ -103,6 +119,7 @@
     has_neg_frac = True
 
     def _evaluate(self):
+        """ """
         import numexpr as ne
 
         # convert the expression to a valid numexpr expression
@@ -115,18 +132,26 @@
 
 
 class PythonEngine(AbstractEngine):
-    """
-    Evaluate an expression in Python space.
+    """Evaluate an expression in Python space.
+    
+    Mostly for testing purposes.
 
-    Mostly for testing purposes.
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     has_neg_frac = False
 
     def evaluate(self):
+        """ """
         return self.expr()
 
     def _evaluate(self) -> None:
+        """ """
         pass
 
 
