# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/io/html.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/io/html.py
@@ -31,6 +31,7 @@
 
 
 def _importers():
+    """ """
     # import things we need
     # but make this done on a first use basis
 
@@ -62,42 +63,42 @@
 
 
 def _remove_whitespace(s: str, regex=_RE_WHITESPACE) -> str:
-    """
-    Replace extra whitespace inside of a string with a single space.
+    """Replace extra whitespace inside of a string with a single space.
 
     Parameters
     ----------
     s : str or unicode
         The string from which to remove extra whitespace.
     regex : re.Pattern
-        The regular expression to use to remove extra whitespace.
+        The regular expression to use to remove extra whitespace. (Default value = _RE_WHITESPACE)
+    s: str :
+        
 
     Returns
     -------
-    subd : str or unicode
-        `s` with all extra whitespace replaced with a single space.
+
+    
     """
     return regex.sub(" ", s.strip())
 
 
 def _get_skiprows(skiprows):
-    """
-    Get an iterator given an integer, slice or container.
+    """Get an iterator given an integer, slice or container.
 
     Parameters
     ----------
     skiprows : int, slice, container
         The iterator to use to skip rows; can also be a slice.
 
+    Returns
+    -------
+
     Raises
     ------
     TypeError
         * If `skiprows` is not a slice, integer, or Container
 
-    Returns
-    -------
-    it : iterable
-        A proper iterator to use to skip rows of a DataFrame.
+    
     """
     if isinstance(skiprows, slice):
         start, step = skiprows.start or 0, skiprows.step or 1
@@ -110,16 +111,17 @@
 
 
 def _read(obj):
-    """
-    Try to read from a url, file or string.
+    """Try to read from a url, file or string.
 
     Parameters
     ----------
     obj : str, unicode, or file-like
+        
 
     Returns
     -------
-    raw_text : str
+
+    
     """
     if is_url(obj):
         with urlopen(obj) as url:
@@ -140,49 +142,45 @@
 
 
 class _HtmlFrameParser:
-    """
-    Base class for parsers that parse HTML into DataFrames.
+    """Base class for parsers that parse HTML into DataFrames.
 
     Parameters
     ----------
     io : str or file-like
         This can be either a string of raw HTML, a valid URL using the HTTP,
         FTP, or FILE protocols or a file-like object.
-
     match : str or regex
         The text to match in the document.
-
     attrs : dict
         List of HTML <table> element attributes to match.
-
     encoding : str
         Encoding to be used by parser
-
     displayed_only : bool
         Whether or not items with "display:none" should be ignored
-
         .. versionadded:: 0.23.0
+
+    Returns
+    -------
 
     Attributes
     ----------
     io : str or file-like
         raw HTML, URL, or file-like object
-
+    
     match : regex
         The text to match in the raw HTML
-
+    
     attrs : dict-like
         A dictionary of valid table attributes to use to search for table
         elements.
-
+    
     encoding : str
         Encoding to be used by parser
-
+    
     displayed_only : bool
         Whether or not items with "display:none" should be ignored
-
+    
         .. versionadded:: 0.23.0
-
     Notes
     -----
     To subclass this class effectively you must override the following methods:
@@ -207,39 +205,30 @@
         self.displayed_only = displayed_only
 
     def parse_tables(self):
-        """
-        Parse and return all tables from the DOM.
-
-        Returns
-        -------
-        list of parsed (header, body, footer) tuples from tables.
-        """
+        """Parse and return all tables from the DOM."""
         tables = self._parse_tables(self._build_doc(), self.match, self.attrs)
         return (self._parse_thead_tbody_tfoot(table) for table in tables)
 
     def _attr_getter(self, obj, attr):
-        """
-        Return the attribute value of an individual DOM node.
+        """Return the attribute value of an individual DOM node.
 
         Parameters
         ----------
         obj : node-like
             A DOM node.
-
         attr : str or unicode
             The attribute, such as "colspan"
 
         Returns
         -------
-        str or unicode
-            The attribute value.
+
+        
         """
         # Both lxml and BeautifulSoup have the same implementation:
         return obj.get(attr)
 
     def _text_getter(self, obj):
-        """
-        Return the text of an individual DOM node.
+        """Return the text of an individual DOM node.
 
         Parameters
         ----------
@@ -248,14 +237,13 @@
 
         Returns
         -------
-        text : str or unicode
-            The text from an individual DOM node.
+
+        
         """
         raise AbstractMethodError(self)
 
     def _parse_td(self, obj):
-        """
-        Return the td elements from a row element.
+        """Return the td elements from a row element.
 
         Parameters
         ----------
@@ -264,30 +252,29 @@
 
         Returns
         -------
-        list of node-like
-            These are the elements of each row, i.e., the columns.
+
+        
         """
         raise AbstractMethodError(self)
 
     def _parse_thead_tr(self, table):
-        """
-        Return the list of thead row elements from the parsed table element.
+        """Return the list of thead row elements from the parsed table element.
 
         Parameters
         ----------
         table : a table element that contains zero or more thead elements.
-
-        Returns
-        -------
-        list of node-like
-            These are the <tr> row elements of a table.
+            
+
+        Returns
+        -------
+
+        
         """
         raise AbstractMethodError(self)
 
     def _parse_tbody_tr(self, table):
-        """
-        Return the list of tbody row elements from the parsed table element.
-
+        """Return the list of tbody row elements from the parsed table element.
+        
         HTML5 table bodies consist of either 0 or more <tbody> elements (which
         only contain <tr> elements) or 0 or more <tr> elements. This method
         checks for both structures.
@@ -295,102 +282,94 @@
         Parameters
         ----------
         table : a table element that contains row elements.
-
-        Returns
-        -------
-        list of node-like
-            These are the <tr> row elements of a table.
+            
+
+        Returns
+        -------
+
+        
         """
         raise AbstractMethodError(self)
 
     def _parse_tfoot_tr(self, table):
-        """
-        Return the list of tfoot row elements from the parsed table element.
+        """Return the list of tfoot row elements from the parsed table element.
 
         Parameters
         ----------
         table : a table element that contains row elements.
-
-        Returns
-        -------
-        list of node-like
-            These are the <tr> row elements of a table.
+            
+
+        Returns
+        -------
+
+        
         """
         raise AbstractMethodError(self)
 
     def _parse_tables(self, doc, match, attrs):
-        """
-        Return all tables from the parsed DOM.
+        """Return all tables from the parsed DOM.
 
         Parameters
         ----------
         doc : the DOM from which to parse the table element.
-
+            
         match : str or regular expression
             The text to search for in the DOM tree.
-
         attrs : dict
             A dictionary of table attributes that can be used to disambiguate
             multiple tables on a page.
 
+        Returns
+        -------
+
         Raises
         ------
-        ValueError : `match` does not match any text in the document.
-
-        Returns
-        -------
-        list of node-like
-            HTML <table> elements to be parsed into raw data.
+        ValueError
+            
+
+        
         """
         raise AbstractMethodError(self)
 
     def _equals_tag(self, obj, tag):
-        """
-        Return whether an individual DOM node matches a tag
+        """Return whether an individual DOM node matches a tag
 
         Parameters
         ----------
         obj : node-like
             A DOM node.
-
         tag : str
             Tag name to be checked for equality.
 
         Returns
         -------
-        boolean
-            Whether `obj`'s tag name is `tag`
+
+        
         """
         raise AbstractMethodError(self)
 
     def _build_doc(self):
-        """
-        Return a tree-like object that can be used to iterate over the DOM.
-
-        Returns
-        -------
-        node-like
-            The DOM from which to parse the table element.
-        """
+        """Return a tree-like object that can be used to iterate over the DOM."""
         raise AbstractMethodError(self)
 
     def _parse_thead_tbody_tfoot(self, table_html):
-        """
-        Given a table, return parsed header, body, and foot.
+        """Given a table, return parsed header, body, and foot.
 
         Parameters
         ----------
         table_html : node-like
+            
 
         Returns
         -------
         tuple of (header, body, footer), each a list of list-of-text rows.
+            
 
         Notes
         -----
         Header and body are lists-of-lists. Top level list is a list of
         rows. Each row is a list of str text.
-
+        
         Logic: Use <thead>, <tbody>, <tfoot> elements to identify
                header, body, and footer, otherwise:
                - Put all rows into body
@@ -404,6 +383,17 @@
         footer_rows = self._parse_tfoot_tr(table_html)
 
         def row_is_all_th(row):
+            """
+
+            Parameters
+            ----------
+            row :
+                
+
+            Returns
+            -------
+
+            """
             return all(self._equals_tag(t, "th") for t in self._parse_td(row))
 
         if not header_rows:
@@ -420,8 +410,7 @@
         return header, body, footer
 
     def _expand_colspan_rowspan(self, rows):
-        """
-        Given a list of <tr>s, return a list of text rows.
+        """Given a list of <tr>s, return a list of text rows.
 
         Parameters
         ----------
@@ -492,8 +481,7 @@
         return all_texts
 
     def _handle_hidden_tables(self, tbl_list, attr_name):
-        """
-        Return list of tables, potentially removing hidden elements
+        """Return list of tables, potentially removing hidden elements
 
         Parameters
         ----------
@@ -504,8 +492,8 @@
 
         Returns
         -------
-        list of node-like
-            Return type matches `tbl_list`
+
+        
         """
         if not self.displayed_only:
             return tbl_list
@@ -519,19 +507,7 @@
 
 
 class _BeautifulSoupHtml5LibFrameParser(_HtmlFrameParser):
-    """
-    HTML to DataFrame parser that uses BeautifulSoup under the hood.
-
-    See Also
-    --------
-    pandas.io.html._HtmlFrameParser
-    pandas.io.html._LxmlFrameParser
-
-    Notes
-    -----
-    Documentation strings for this class are in the base class
-    :class:`pandas.io.html._HtmlFrameParser`.
-    """
+    """HTML to DataFrame parser that uses BeautifulSoup under the hood."""
 
     def __init__(self, *args, **kwargs):
         super().__init__(*args, **kwargs)
@@ -540,6 +516,21 @@
         self._strainer = SoupStrainer("table")
 
     def _parse_tables(self, doc, match, attrs):
+        """
+
+        Parameters
+        ----------
+        doc :
+            
+        match :
+            
+        attrs :
+            
+
+        Returns
+        -------
+
+        """
         element_name = self._strainer.name
         tables = doc.find_all(element_name, attrs=attrs)
 
@@ -564,33 +555,103 @@
         return result
 
     def _text_getter(self, obj):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+
+        Returns
+        -------
+
+        """
         return obj.text
 
     def _equals_tag(self, obj, tag):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+        tag :
+            
+
+        Returns
+        -------
+
+        """
         return obj.name == tag
 
     def _parse_td(self, row):
+        """
+
+        Parameters
+        ----------
+        row :
+            
+
+        Returns
+        -------
+
+        """
         return row.find_all(("td", "th"), recursive=False)
 
     def _parse_thead_tr(self, table):
+        """
+
+        Parameters
+        ----------
+        table :
+            
+
+        Returns
+        -------
+
+        """
         return table.select("thead tr")
 
     def _parse_tbody_tr(self, table):
+        """
+
+        Parameters
+        ----------
+        table :
+            
+
+        Returns
+        -------
+
+        """
         from_tbody = table.select("tbody tr")
         from_root = table.find_all("tr", recursive=False)
         # HTML spec: at most one of these lists has content
         return from_tbody + from_root
 
     def _parse_tfoot_tr(self, table):
+        """
+
+        Parameters
+        ----------
+        table :
+            
+
+        Returns
+        -------
+
+        """
         return table.select("tfoot tr")
 
     def _setup_build_doc(self):
+        """ """
         raw_text = _read(self.io)
         if not raw_text:
             raise ValueError(f"No text parsed from document: {self.io}")
         return raw_text
 
     def _build_doc(self):
+        """ """
         from bs4 import BeautifulSoup
 
         bdoc = self._setup_build_doc()
@@ -604,8 +665,7 @@
 
 
 def _build_xpath_expr(attrs) -> str:
-    """
-    Build an xpath expression to simulate bs4's ability to pass in kwargs to
+    """Build an xpath expression to simulate bs4's ability to pass in kwargs to
     search for attributes when using the lxml parser.
 
     Parameters
@@ -615,8 +675,8 @@
 
     Returns
     -------
-    expr : unicode
-        An XPath expression that checks for the given HTML attributes.
+
+    
     """
     # give class attribute as class_ because class is a python keyword
     if "class_" in attrs:
@@ -631,18 +691,22 @@
 
 
 class _LxmlFrameParser(_HtmlFrameParser):
-    """
-    HTML to DataFrame parser that uses lxml under the hood.
-
+    """HTML to DataFrame parser that uses lxml under the hood.
+    
     Warning
     -------
     This parser can only handle HTTP, FTP, and FILE urls.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     See Also
     --------
     _HtmlFrameParser
     _BeautifulSoupLxmlFrameParser
-
     Notes
     -----
     Documentation strings for this class are in the base class
@@ -653,14 +717,51 @@
         super().__init__(*args, **kwargs)
 
     def _text_getter(self, obj):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+
+        Returns
+        -------
+
+        """
         return obj.text_content()
 
     def _parse_td(self, row):
+        """
+
+        Parameters
+        ----------
+        row :
+            
+
+        Returns
+        -------
+
+        """
         # Look for direct children only: the "row" element here may be a
         # <thead> or <tfoot> (see _parse_thead_tr).
         return row.xpath("./td|./th")
 
     def _parse_tables(self, doc, match, kwargs):
+        """
+
+        Parameters
+        ----------
+        doc :
+            
+        match :
+            
+        kwargs :
+            
+
+        Returns
+        -------
+
+        """
         pattern = match.pattern
 
         # 1. check all descendants for the given pattern and only search tables
@@ -689,19 +790,38 @@
         return tables
 
     def _equals_tag(self, obj, tag):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+        tag :
+            
+
+        Returns
+        -------
+
+        """
         return obj.tag == tag
 
     def _build_doc(self):
         """
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         Raises
         ------
         ValueError
             * If a URL that lxml cannot parse is passed.
-
         Exception
             * Any other ``Exception`` thrown. For example, trying to parse a
-              URL that is syntactically correct on a machine with no internet
-              connection will fail.
+            URL that is syntactically correct on a machine with no internet
+            connection will fail.
 
         See Also
         --------
@@ -740,6 +860,17 @@
         return r
 
     def _parse_thead_tr(self, table):
+        """
+
+        Parameters
+        ----------
+        table :
+            
+
+        Returns
+        -------
+
+        """
         rows = []
 
         for thead in table.xpath(".//thead"):
@@ -758,16 +889,49 @@
         return rows
 
     def _parse_tbody_tr(self, table):
+        """
+
+        Parameters
+        ----------
+        table :
+            
+
+        Returns
+        -------
+
+        """
         from_tbody = table.xpath(".//tbody//tr")
         from_root = table.xpath("./tr")
         # HTML spec: at most one of these lists has content
         return from_tbody + from_root
 
     def _parse_tfoot_tr(self, table):
+        """
+
+        Parameters
+        ----------
+        table :
+            
+
+        Returns
+        -------
+
+        """
         return table.xpath(".//tfoot//tr")
 
 
 def _expand_elements(body):
+    """
+
+    Parameters
+    ----------
+    body :
+        
+
+    Returns
+    -------
+
+    """
     data = [len(elem) for elem in body]
     lens = create_series_with_explicit_dtype(data, dtype_if_empty=object)
     lens_max = lens.max()
@@ -779,6 +943,17 @@
 
 
 def _data_to_frame(**kwargs):
+    """
+
+    Parameters
+    ----------
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     head, body, foot = kwargs.pop("data")
     header = kwargs.pop("header")
     kwargs["skiprows"] = _get_skiprows(kwargs["skiprows"])
@@ -812,8 +987,7 @@
 
 
 def _parser_dispatch(flavor):
-    """
-    Choose the parser based on the input flavor.
+    """Choose the parser based on the input flavor.
 
     Parameters
     ----------
@@ -825,12 +999,7 @@
     cls : _HtmlFrameParser subclass
         The parser class based on the requested input flavor.
 
-    Raises
-    ------
-    ValueError
-        * If `flavor` is not a valid backend.
-    ImportError
-        * If you do not have the requested `flavor`
+    
     """
     valid_parsers = list(_valid_parsers.keys())
     if flavor not in valid_parsers:
@@ -853,11 +1022,33 @@
 
 
 def _print_as_set(s) -> str:
+    """
+
+    Parameters
+    ----------
+    s :
+        
+
+    Returns
+    -------
+
+    """
     arg = ", ".join(pprint_thing(el) for el in s)
     return f"{{{arg}}}"
 
 
 def _validate_flavor(flavor):
+    """
+
+    Parameters
+    ----------
+    flavor :
+        
+
+    Returns
+    -------
+
+    """
     if flavor is None:
         flavor = "lxml", "bs4"
     elif isinstance(flavor, str):
@@ -886,6 +1077,29 @@
 
 
 def _parse(flavor, io, match, attrs, encoding, displayed_only, **kwargs):
+    """
+
+    Parameters
+    ----------
+    flavor :
+        
+    io :
+        
+    match :
+        
+    attrs :
+        
+    encoding :
+        
+    displayed_only :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     flavor = _validate_flavor(flavor)
     compiled_match = re.compile(match)  # you can pass a compiled regex here
 
@@ -943,7 +1157,7 @@
     keep_default_na: bool = True,
     displayed_only: bool = True,
 ) -> List[DataFrame]:
-    r"""
+    """r"""
     Read HTML tables into a ``list`` of ``DataFrame`` objects.
 
     Parameters
@@ -952,7 +1166,6 @@
         A URL, a file-like object, or a raw string containing HTML. Note that
         lxml only accepts the http, ftp and file url protocols. If you have a
         URL that starts with ``'https'`` you might try removing the ``'s'``.
-
     match : str or compiled regular expression, optional
         The set of tables containing text matching this regex or string will be
         returned. Unless the HTML is extremely simple you will probably need to
@@ -960,40 +1173,31 @@
         string). The default value will return all tables contained on a page.
         This value is converted to a regular expression so that there is
         consistent behavior between Beautiful Soup and lxml.
-
     flavor : str, optional
         The parsing engine to use. 'bs4' and 'html5lib' are synonymous with
         each other, they are both there for backwards compatibility. The
         default of ``None`` tries to use ``lxml`` to parse and if that fails it
         falls back on ``bs4`` + ``html5lib``.
-
     header : int or list-like, optional
         The row (or list of rows for a :class:`~pandas.MultiIndex`) to use to
         make the columns headers.
-
     index_col : int or list-like, optional
         The column (or list of columns) to use to create the index.
-
     skiprows : int, list-like or slice, optional
         Number of rows to skip after parsing the column integer. 0-based. If a
         sequence of integers or a slice is given, will skip the rows indexed by
         that sequence.  Note that a single element sequence means 'skip the nth
         row' whereas an integer means 'skip n rows'.
-
     attrs : dict, optional
         This is a dictionary of attributes that you can pass to use to identify
         the table in the HTML. These are not checked for validity before being
         passed to lxml or Beautiful Soup. However, these attributes must be
         valid HTML table attributes to work correctly. For example, ::
-
-            attrs = {'id': 'table'}
-
+        attrs = {'id': 'table'}
         is a valid attribute dictionary because the 'id' HTML tag attribute is
         a valid HTML attribute for *any* HTML tag as per `this document
         <https://html.spec.whatwg.org/multipage/dom.html#global-attributes>`__. ::
-
-            attrs = {'asdf': 'table'}
-
+        attrs = {'asdf': 'table'}
         is *not* a valid attribute dictionary because 'asdf' is not a valid
         HTML attribute even if it is a valid XML attribute.  Valid HTML 4.01
         table attributes can be found `here
@@ -1001,38 +1205,70 @@
         working draft of the HTML 5 spec can be found `here
         <https://html.spec.whatwg.org/multipage/tables.html>`__. It contains the
         latest information on table attributes for the modern web.
-
     parse_dates : bool, optional
         See :func:`~read_csv` for more details.
-
     thousands : str, optional
         Separator to use to parse thousands. Defaults to ``','``.
-
     encoding : str, optional
         The encoding used to decode the web page. Defaults to ``None``.``None``
         preserves the previous encoding behavior, which depends on the
         underlying parser library (e.g., the parser library will try to use
         the encoding provided by the document).
-
     decimal : str, default '.'
         Character to recognize as decimal point (e.g. use ',' for European
         data).
-
     converters : dict, default None
         Dict of functions for converting values in certain columns. Keys can
         either be integers or column labels, values are functions that take one
         input argument, the cell (not column) content, and return the
         transformed content.
-
     na_values : iterable, default None
-        Custom NA values.
-
+        Custom NA values. (Default value = None)
     keep_default_na : bool, default True
         If na_values are specified and keep_default_na is False the default NaN
         values are overridden, otherwise they're appended to.
-
     displayed_only : bool, default True
         Whether elements with "display: none" should be parsed.
+    io: FilePathOrBuffer :
+        
+    match: Union[str :
+        
+    Pattern] :
+         (Default value = ".+")
+    flavor: Optional[str] :
+         (Default value = None)
+    header: Optional[Union[int :
+        
+    Sequence[int]]] :
+         (Default value = None)
+    index_col: Optional[Union[int :
+        
+    skiprows: Optional[Union[int :
+        
+    Sequence[int] :
+        
+    slice]] :
+         (Default value = None)
+    attrs: Optional[Dict[str :
+        
+    str]] :
+         (Default value = None)
+    parse_dates: bool :
+         (Default value = False)
+    thousands: Optional[str] :
+         (Default value = ")
+    " :
+        
+    encoding: Optional[str] :
+         (Default value = None)
+    decimal: str :
+         (Default value = ".")
+    converters: Optional[Dict] :
+         (Default value = None)
+    keep_default_na: bool :
+         (Default value = True)
+    displayed_only: bool :
+         (Default value = True)
 
     Returns
     -------
@@ -1042,18 +1278,17 @@
     See Also
     --------
     read_csv : Read a comma-separated values (csv) file into DataFrame.
-
     Notes
     -----
     Before using this function you should read the :ref:`gotchas about the
     HTML parsing libraries <io.html.gotchas>`.
-
+    
     Expect to do some cleanup after you call this function. For example, you
     might need to manually assign column names if the column names are
     converted to NaN when you pass the `header=0` argument. We try to assume as
     little as possible about the structure of the table and push the
     idiosyncrasies of the HTML contained in the table to the user.
-
+    
     This function searches for ``<table>`` elements and only for ``<tr>``
     and ``<th>`` rows and ``<td>`` elements within each ``<tr>`` or ``<th>``
     element in the table. ``<td>`` stands for "table data". This function
@@ -1061,18 +1296,16 @@
     If the function has a ``<thead>`` argument, it is used to construct
     the header, otherwise the function attempts to find the header within
     the body (by putting rows with only ``<th>`` elements into the header).
-
+    
     Similar to :func:`~read_csv` the `header` argument is applied
     **after** `skiprows` is applied.
-
+    
     This function will *always* return a list of :class:`DataFrame` *or*
     it will fail, e.g., it will *not* return an empty list.
-
     Examples
     --------
     See the :ref:`read_html documentation in the IO section of the docs
     <io.read_html>` for some examples of reading in HTML tables.
-    """
     _importers()
 
     # Type check here. We don't want to parse only to fail because of an
