# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/arithmetic/test_object.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/arithmetic/test_object.py
@@ -18,7 +18,9 @@
 
 
 class TestObjectComparisons:
+    """ """
     def test_comparison_object_numeric_nas(self):
+        """ """
         ser = Series(np.random.randn(10), dtype=object)
         shifted = ser.shift(2)
 
@@ -31,6 +33,7 @@
             tm.assert_series_equal(result, expected)
 
     def test_object_comparisons(self):
+        """ """
         ser = Series(["a", "b", np.nan, "c", "a"])
 
         result = ser == "a"
@@ -47,6 +50,17 @@
 
     @pytest.mark.parametrize("dtype", [None, object])
     def test_more_na_comparisons(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         left = Series(["a", np.nan, "c"], dtype=dtype)
         right = Series(["a", np.nan, "d"], dtype=dtype)
 
@@ -72,9 +86,11 @@
 
 
 class TestArithmetic:
+    """ """
 
     # TODO: parametrize
     def test_pow_ops_object(self):
+        """ """
         # GH#22922
         # pow is weird with masking & 1, so testing here
         a = Series([1, np.nan, 1, np.nan], dtype=object)
@@ -91,6 +107,21 @@
     @pytest.mark.parametrize("op", [operator.add, ops.radd])
     @pytest.mark.parametrize("other", ["category", "Int64"])
     def test_add_extension_scalar(self, other, box_with_array, op):
+        """
+
+        Parameters
+        ----------
+        other :
+            
+        box_with_array :
+            
+        op :
+            
+
+        Returns
+        -------
+
+        """
         # GH#22378
         # Check that scalars satisfying is_extension_array_dtype(obj)
         # do not incorrectly try to dispatch to an ExtensionArray operation
@@ -105,6 +136,17 @@
         tm.assert_equal(result, expected)
 
     def test_objarr_add_str(self, box):
+        """
+
+        Parameters
+        ----------
+        box :
+            
+
+        Returns
+        -------
+
+        """
         ser = pd.Series(["x", np.nan, "x"])
         expected = pd.Series(["xa", np.nan, "xa"])
 
@@ -115,6 +157,17 @@
         tm.assert_equal(result, expected)
 
     def test_objarr_radd_str(self, box):
+        """
+
+        Parameters
+        ----------
+        box :
+            
+
+        Returns
+        -------
+
+        """
         ser = pd.Series(["x", np.nan, "x"])
         expected = pd.Series(["ax", np.nan, "ax"])
 
@@ -135,6 +188,21 @@
     )
     @pytest.mark.parametrize("dtype", [None, object])
     def test_objarr_radd_str_invalid(self, dtype, data, box_with_array):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+        data :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         ser = Series(data, dtype=dtype)
 
         ser = tm.box_expected(ser, box_with_array)
@@ -149,6 +217,19 @@
 
     @pytest.mark.parametrize("op", [operator.add, ops.radd, operator.sub, ops.rsub])
     def test_objarr_add_invalid(self, op, box_with_array):
+        """
+
+        Parameters
+        ----------
+        op :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # invalid ops
         box = box_with_array
 
@@ -164,6 +245,7 @@
 
     # TODO: Moved from tests.series.test_operators; needs cleanup
     def test_operators_na_handling(self):
+        """ """
         ser = Series(["foo", "bar", "baz", np.nan])
         result = "prefix_" + ser
         expected = pd.Series(["prefix_foo", "prefix_bar", "prefix_baz", np.nan])
@@ -176,6 +258,17 @@
     # TODO: parametrize over box
     @pytest.mark.parametrize("dtype", [None, object])
     def test_series_with_dtype_radd_timedelta(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         # note this test is _not_ aimed at timedelta64-dtyped Series
         ser = pd.Series(
             [pd.Timedelta("1 days"), pd.Timedelta("2 days"), pd.Timedelta("3 days")],
@@ -193,6 +286,7 @@
 
     # TODO: cleanup & parametrize over box
     def test_mixed_timezone_series_ops_object(self):
+        """ """
         # GH#13043
         ser = pd.Series(
             [
@@ -241,6 +335,7 @@
 
     # TODO: cleanup & parametrize over box
     def test_iadd_preserves_name(self):
+        """ """
         # GH#17067, GH#19723 __iadd__ and __isub__ should preserve index name
         ser = pd.Series([1, 2, 3])
         ser.index.name = "foo"
@@ -252,6 +347,7 @@
         assert ser.index.name == "foo"
 
     def test_add_string(self):
+        """ """
         # from bug report
         index = pd.Index(["a", "b", "c"])
         index2 = index + "foo"
@@ -260,6 +356,7 @@
         assert "afoo" in index2
 
     def test_iadd_string(self):
+        """ """
         index = pd.Index(["a", "b", "c"])
         # doesn't fail test unless there is a check before `+=`
         assert "a" in index
@@ -268,6 +365,7 @@
         assert "a_x" in index
 
     def test_add(self):
+        """ """
         index = tm.makeStringIndex(100)
         expected = pd.Index(index.values * 2)
         tm.assert_index_equal(index + index, expected)
@@ -282,6 +380,7 @@
         tm.assert_index_equal("1" + index, expected)
 
     def test_sub_fail(self):
+        """ """
         index = tm.makeStringIndex(100)
 
         msg = "unsupported operand type|Cannot broadcast"
@@ -295,6 +394,7 @@
             index.tolist() - index
 
     def test_sub_object(self):
+        """ """
         # GH#19369
         index = pd.Index([Decimal(1), Decimal(2)])
         expected = pd.Index([Decimal(0), Decimal(1)])
@@ -313,6 +413,7 @@
             index - np.array([2, "foo"])
 
     def test_rsub_object(self):
+        """ """
         # GH#19369
         index = pd.Index([Decimal(1), Decimal(2)])
         expected = pd.Index([Decimal(1), Decimal(0)])
@@ -332,12 +433,28 @@
 
 
 class MyIndex(pd.Index):
+    """ """
     # Simple index subclass that tracks ops calls.
 
     _calls: int
 
     @classmethod
     def _simple_new(cls, values, name=None, dtype=None):
+        """
+
+        Parameters
+        ----------
+        values :
+            
+        name :
+             (Default value = None)
+        dtype :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         result = object.__new__(cls)
         result._data = values
         result._index_data = values
@@ -365,6 +482,17 @@
     ids=["timedelta", "datetime", "period", "object"],
 )
 def test_index_ops_defer_to_unknown_subclasses(other):
+    """
+
+    Parameters
+    ----------
+    other :
+        
+
+    Returns
+    -------
+
+    """
     # https://github.com/pandas-dev/pandas/issues/31109
     values = np.array(
         [datetime.date(2000, 1, 1), datetime.date(2000, 1, 2)], dtype=object
