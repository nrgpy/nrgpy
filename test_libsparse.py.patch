# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/arrays/sparse/test_libsparse.py
@@ -51,7 +51,29 @@
 
 
 def check_cases(_check_case):
+    """
+
+    Parameters
+    ----------
+    _check_case :
+        
+
+    Returns
+    -------
+
+    """
     def _check_case_dict(case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         _check_case(
             case["xloc"],
             case["xlen"],
@@ -73,8 +95,31 @@
 
 
 class TestSparseIndexUnion:
+    """ """
     def test_index_make_union(self):
+        """ """
         def _check_case(xloc, xlen, yloc, ylen, eloc, elen):
+            """
+
+            Parameters
+            ----------
+            xloc :
+                
+            xlen :
+                
+            yloc :
+                
+            ylen :
+                
+            eloc :
+                
+            elen :
+                
+
+            Returns
+            -------
+
+            """
             xindex = BlockIndex(TEST_LENGTH, xloc, xlen)
             yindex = BlockIndex(TEST_LENGTH, yloc, ylen)
             bresult = xindex.make_union(yindex)
@@ -186,6 +231,7 @@
         _check_case(xloc, xlen, yloc, ylen, eloc, elen)
 
     def test_int_index_make_union(self):
+        """ """
         a = IntIndex(5, np.array([0, 3, 4], dtype=np.int32))
         b = IntIndex(5, np.array([0, 2], dtype=np.int32))
         res = a.make_union(b)
@@ -219,18 +265,69 @@
 
 
 class TestSparseIndexIntersect:
+    """ """
     @td.skip_if_windows
     def test_intersect(self):
+        """ """
         def _check_correct(a, b, expected):
+            """
+
+            Parameters
+            ----------
+            a :
+                
+            b :
+                
+            expected :
+                
+
+            Returns
+            -------
+
+            """
             result = a.intersect(b)
             assert result.equals(expected)
 
         def _check_length_exc(a, longer):
+            """
+
+            Parameters
+            ----------
+            a :
+                
+            longer :
+                
+
+            Returns
+            -------
+
+            """
             msg = "Indices must reference same underlying length"
             with pytest.raises(Exception, match=msg):
                 a.intersect(longer)
 
         def _check_case(xloc, xlen, yloc, ylen, eloc, elen):
+            """
+
+            Parameters
+            ----------
+            xloc :
+                
+            xlen :
+                
+            yloc :
+                
+            ylen :
+                
+            eloc :
+                
+            elen :
+                
+
+            Returns
+            -------
+
+            """
             xindex = BlockIndex(TEST_LENGTH, xloc, xlen)
             yindex = BlockIndex(TEST_LENGTH, yloc, ylen)
             expected = BlockIndex(TEST_LENGTH, eloc, elen)
@@ -247,6 +344,7 @@
         check_cases(_check_case)
 
     def test_intersect_empty(self):
+        """ """
         xindex = IntIndex(4, np.array([], dtype=np.int32))
         yindex = IntIndex(4, np.array([2, 3], dtype=np.int32))
         assert xindex.intersect(yindex).equals(xindex)
@@ -258,6 +356,7 @@
         assert yindex.intersect(xindex).equals(xindex)
 
     def test_intersect_identical(self):
+        """ """
         cases = [
             IntIndex(5, np.array([1, 2], dtype=np.int32)),
             IntIndex(5, np.array([0, 2, 4], dtype=np.int32)),
@@ -272,7 +371,9 @@
 
 
 class TestSparseIndexCommon:
+    """ """
     def test_int_internal(self):
+        """ """
         idx = _make_index(4, np.array([2, 3], dtype=np.int32), kind="integer")
         assert isinstance(idx, IntIndex)
         assert idx.npoints == 2
@@ -289,6 +390,7 @@
         tm.assert_numpy_array_equal(idx.indices, np.array([0, 1, 2, 3], dtype=np.int32))
 
     def test_block_internal(self):
+        """ """
         idx = _make_index(4, np.array([2, 3], dtype=np.int32), kind="block")
         assert isinstance(idx, BlockIndex)
         assert idx.npoints == 2
@@ -314,6 +416,7 @@
         tm.assert_numpy_array_equal(idx.blengths, np.array([1, 2], dtype=np.int32))
 
     def test_lookup(self):
+        """ """
         for kind in ["integer", "block"]:
             idx = _make_index(4, np.array([2, 3], dtype=np.int32), kind=kind)
             assert idx.lookup(-1) == -1
@@ -345,6 +448,7 @@
             assert idx.lookup(4) == -1
 
     def test_lookup_array(self):
+        """ """
         for kind in ["integer", "block"]:
             idx = _make_index(4, np.array([2, 3], dtype=np.int32), kind=kind)
 
@@ -379,7 +483,19 @@
             tm.assert_numpy_array_equal(res, exp)
 
     def test_lookup_basics(self):
+        """ """
         def _check(index):
+            """
+
+            Parameters
+            ----------
+            index :
+                
+
+            Returns
+            -------
+
+            """
             assert index.lookup(0) == -1
             assert index.lookup(5) == 0
             assert index.lookup(7) == 2
@@ -401,7 +517,9 @@
 
 
 class TestBlockIndex:
+    """ """
     def test_block_internal(self):
+        """ """
         idx = _make_index(4, np.array([2, 3], dtype=np.int32), kind="block")
         assert isinstance(idx, BlockIndex)
         assert idx.npoints == 2
@@ -427,6 +545,7 @@
         tm.assert_numpy_array_equal(idx.blengths, np.array([1, 2], dtype=np.int32))
 
     def test_make_block_boundary(self):
+        """ """
         for i in [5, 10, 100, 101]:
             idx = _make_index(i, np.arange(0, i, 2, dtype=np.int32), kind="block")
 
@@ -435,12 +554,14 @@
             tm.assert_numpy_array_equal(idx.blengths, np.ones(len(exp), dtype=np.int32))
 
     def test_equals(self):
+        """ """
         index = BlockIndex(10, [0, 4], [2, 5])
 
         assert index.equals(index)
         assert not index.equals(BlockIndex(10, [0, 4], [2, 6]))
 
     def test_check_integrity(self):
+        """ """
         locs = []
         lengths = []
 
@@ -460,6 +581,7 @@
             BlockIndex(10, [2, 5], [5, 3])
 
     def test_to_int_index(self):
+        """ """
         locs = [0, 10]
         lengths = [4, 6]
         exp_inds = [0, 1, 2, 3, 10, 11, 12, 13, 14, 15]
@@ -470,12 +592,15 @@
         tm.assert_numpy_array_equal(dense.indices, np.array(exp_inds, dtype=np.int32))
 
     def test_to_block_index(self):
+        """ """
         index = BlockIndex(10, [0, 5], [4, 5])
         assert index.to_block_index() is index
 
 
 class TestIntIndex:
+    """ """
     def test_check_integrity(self):
+        """ """
 
         # Too many indices than specified in self.length
         msg = "Too many indices"
@@ -514,6 +639,7 @@
             IntIndex(length=5, indices=[1, 3, 3])
 
     def test_int_internal(self):
+        """ """
         idx = _make_index(4, np.array([2, 3], dtype=np.int32), kind="integer")
         assert isinstance(idx, IntIndex)
         assert idx.npoints == 2
@@ -530,12 +656,35 @@
         tm.assert_numpy_array_equal(idx.indices, np.array([0, 1, 2, 3], dtype=np.int32))
 
     def test_equals(self):
+        """ """
         index = IntIndex(10, [0, 1, 2, 3, 4])
         assert index.equals(index)
         assert not index.equals(IntIndex(10, [0, 1, 2, 3]))
 
     def test_to_block_index(self):
+        """ """
         def _check_case(xloc, xlen, yloc, ylen, eloc, elen):
+            """
+
+            Parameters
+            ----------
+            xloc :
+                
+            xlen :
+                
+            yloc :
+                
+            ylen :
+                
+            eloc :
+                
+            elen :
+                
+
+            Returns
+            -------
+
+            """
             xindex = BlockIndex(TEST_LENGTH, xloc, xlen)
             yindex = BlockIndex(TEST_LENGTH, yloc, ylen)
 
@@ -549,13 +698,49 @@
         check_cases(_check_case)
 
     def test_to_int_index(self):
+        """ """
         index = IntIndex(10, [2, 3, 4, 5, 6])
         assert index.to_int_index() is index
 
 
 class TestSparseOperators:
+    """ """
     def _op_tests(self, sparse_op, python_op):
+        """
+
+        Parameters
+        ----------
+        sparse_op :
+            
+        python_op :
+            
+
+        Returns
+        -------
+
+        """
         def _check_case(xloc, xlen, yloc, ylen, eloc, elen):
+            """
+
+            Parameters
+            ----------
+            xloc :
+                
+            xlen :
+                
+            yloc :
+                
+            ylen :
+                
+            eloc :
+                
+            elen :
+                
+
+            Returns
+            -------
+
+            """
             xindex = BlockIndex(TEST_LENGTH, xloc, xlen)
             yindex = BlockIndex(TEST_LENGTH, yloc, ylen)
 
@@ -596,6 +781,17 @@
 
     @pytest.mark.parametrize("opname", ["add", "sub", "mul", "truediv", "floordiv"])
     def test_op(self, opname):
+        """
+
+        Parameters
+        ----------
+        opname :
+            
+
+        Returns
+        -------
+
+        """
         sparse_op = getattr(splib, f"sparse_{opname}_float64")
         python_op = getattr(operator, opname)
         self._op_tests(sparse_op, python_op)
