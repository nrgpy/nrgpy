# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/excel/test_readers.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/excel/test_readers.py
@@ -17,9 +17,15 @@
 
 @contextlib.contextmanager
 def ignore_xlrd_time_clock_warning():
-    """
-    Context manager to ignore warnings raised by the xlrd library,
+    """Context manager to ignore warnings raised by the xlrd library,
     regarding the deprecation of `time.clock` in Python 3.7.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     with warnings.catch_warnings():
         warnings.filterwarnings(
@@ -62,9 +68,19 @@
 
 
 def _is_valid_engine_ext_pair(engine, read_ext: str) -> bool:
-    """
-    Filter out invalid (engine, ext) pairs instead of skipping, as that
+    """Filter out invalid (engine, ext) pairs instead of skipping, as that
     produces 500+ pytest.skips.
+
+    Parameters
+    ----------
+    engine :
+        
+    read_ext: str :
+        
+
+    Returns
+    -------
+
     """
     engine = engine.values[0]
     if engine == "openpyxl" and read_ext == ".xls":
@@ -81,9 +97,19 @@
 
 
 def _transfer_marks(engine, read_ext):
-    """
-    engine gives us a pytest.param objec with some marks, read_ext is just
+    """engine gives us a pytest.param objec with some marks, read_ext is just
     a string.  We need to generate a new pytest.param inheriting the marks.
+
+    Parameters
+    ----------
+    engine :
+        
+    read_ext :
+        
+
+    Returns
+    -------
+
     """
     values = engine.values + (read_ext,)
     new_param = pytest.param(values, marks=engine.marks)
@@ -100,35 +126,91 @@
     ],
 )
 def engine_and_read_ext(request):
-    """
-    Fixture for Excel reader engine and read_ext, only including valid pairs.
+    """Fixture for Excel reader engine and read_ext, only including valid pairs.
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
     """
     return request.param
 
 
 @pytest.fixture
 def engine(engine_and_read_ext):
+    """
+
+    Parameters
+    ----------
+    engine_and_read_ext :
+        
+
+    Returns
+    -------
+
+    """
     engine, read_ext = engine_and_read_ext
     return engine
 
 
 @pytest.fixture
 def read_ext(engine_and_read_ext):
+    """
+
+    Parameters
+    ----------
+    engine_and_read_ext :
+        
+
+    Returns
+    -------
+
+    """
     engine, read_ext = engine_and_read_ext
     return read_ext
 
 
 class TestReaders:
+    """ """
     @pytest.fixture(autouse=True)
     def cd_and_set_engine(self, engine, datapath, monkeypatch):
-        """
-        Change directory and set engine for read_excel calls.
+        """Change directory and set engine for read_excel calls.
+
+        Parameters
+        ----------
+        engine :
+            
+        datapath :
+            
+        monkeypatch :
+            
+
+        Returns
+        -------
+
         """
         func = partial(pd.read_excel, engine=engine)
         monkeypatch.chdir(datapath("io", "data", "excel"))
         monkeypatch.setattr(pd, "read_excel", func)
 
     def test_usecols_int(self, read_ext, df_ref):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+        df_ref :
+            
+
+        Returns
+        -------
+
+        """
         df_ref = df_ref.reindex(columns=["A", "B", "C"])
 
         # usecols as int
@@ -151,6 +233,19 @@
                 )
 
     def test_usecols_list(self, read_ext, df_ref):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+        df_ref :
+            
+
+        Returns
+        -------
+
+        """
         if pd.read_excel.keywords["engine"] == "pyxlsb":
             pytest.xfail("Sheets containing datetimes not supported by pyxlsb")
 
@@ -171,6 +266,19 @@
         tm.assert_frame_equal(df2, df_ref, check_names=False)
 
     def test_usecols_str(self, read_ext, df_ref):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+        df_ref :
+            
+
+        Returns
+        -------
+
+        """
         if pd.read_excel.keywords["engine"] == "pyxlsb":
             pytest.xfail("Sheets containing datetimes not supported by pyxlsb")
 
@@ -223,6 +331,21 @@
         "usecols", [[0, 1, 3], [0, 3, 1], [1, 0, 3], [1, 3, 0], [3, 0, 1], [3, 1, 0]]
     )
     def test_usecols_diff_positional_int_columns_order(self, read_ext, usecols, df_ref):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+        usecols :
+            
+        df_ref :
+            
+
+        Returns
+        -------
+
+        """
         if pd.read_excel.keywords["engine"] == "pyxlsb":
             pytest.xfail("Sheets containing datetimes not supported by pyxlsb")
 
@@ -234,6 +357,21 @@
 
     @pytest.mark.parametrize("usecols", [["B", "D"], ["D", "B"]])
     def test_usecols_diff_positional_str_columns_order(self, read_ext, usecols, df_ref):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+        usecols :
+            
+        df_ref :
+            
+
+        Returns
+        -------
+
+        """
         expected = df_ref[["B", "D"]]
         expected.index = range(len(expected))
 
@@ -241,6 +379,19 @@
         tm.assert_frame_equal(result, expected, check_names=False)
 
     def test_read_excel_without_slicing(self, read_ext, df_ref):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+        df_ref :
+            
+
+        Returns
+        -------
+
+        """
         if pd.read_excel.keywords["engine"] == "pyxlsb":
             pytest.xfail("Sheets containing datetimes not supported by pyxlsb")
 
@@ -249,6 +400,19 @@
         tm.assert_frame_equal(result, expected, check_names=False)
 
     def test_usecols_excel_range_str(self, read_ext, df_ref):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+        df_ref :
+            
+
+        Returns
+        -------
+
+        """
         if pd.read_excel.keywords["engine"] == "pyxlsb":
             pytest.xfail("Sheets containing datetimes not supported by pyxlsb")
 
@@ -259,12 +423,34 @@
         tm.assert_frame_equal(result, expected, check_names=False)
 
     def test_usecols_excel_range_str_invalid(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         msg = "Invalid column name: E1"
 
         with pytest.raises(ValueError, match=msg):
             pd.read_excel("test1" + read_ext, sheet_name="Sheet1", usecols="D:E1")
 
     def test_index_col_label_error(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         msg = "list indices must be integers.*, not str"
 
         with pytest.raises(TypeError, match=msg):
@@ -276,6 +462,17 @@
             )
 
     def test_index_col_empty(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-9208
         result = pd.read_excel(
             "test1" + read_ext, sheet_name="Sheet3", index_col=["A", "B", "C"]
@@ -288,6 +485,19 @@
 
     @pytest.mark.parametrize("index_col", [None, 2])
     def test_index_col_with_unnamed(self, read_ext, index_col):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+        index_col :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-18792
         result = pd.read_excel(
             "test1" + read_ext, sheet_name="Sheet4", index_col=index_col
@@ -301,6 +511,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_usecols_pass_non_existent_column(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         msg = (
             "Usecols do not match columns, "
             "columns expected but not found: " + r"\['E'\]"
@@ -310,6 +531,17 @@
             pd.read_excel("test1" + read_ext, usecols=["E"])
 
     def test_usecols_wrong_type(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         msg = (
             "'usecols' must either be list-like of "
             "all strings, all unicode, all integers or a callable."
@@ -319,12 +551,34 @@
             pd.read_excel("test1" + read_ext, usecols=["E1", 0])
 
     def test_excel_stop_iterator(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
 
         parsed = pd.read_excel("test2" + read_ext, sheet_name="Sheet1")
         expected = DataFrame([["aaaa", "bbbbb"]], columns=["Test", "Test1"])
         tm.assert_frame_equal(parsed, expected)
 
     def test_excel_cell_error_na(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         if pd.read_excel.keywords["engine"] == "pyxlsb":
             pytest.xfail("Sheets containing datetimes not supported by pyxlsb")
 
@@ -333,6 +587,19 @@
         tm.assert_frame_equal(parsed, expected)
 
     def test_excel_table(self, read_ext, df_ref):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+        df_ref :
+            
+
+        Returns
+        -------
+
+        """
         if pd.read_excel.keywords["engine"] == "pyxlsb":
             pytest.xfail("Sheets containing datetimes not supported by pyxlsb")
 
@@ -350,6 +617,17 @@
         tm.assert_frame_equal(df3, df1.iloc[:-1])
 
     def test_reader_special_dtypes(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         if pd.read_excel.keywords["engine"] == "pyxlsb":
             pytest.xfail("Sheets containing datetimes not supported by pyxlsb")
 
@@ -412,6 +690,17 @@
 
     # GH8212 - support for converters and missing values
     def test_reader_converters(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
 
         basename = "test_converters"
 
@@ -439,6 +728,17 @@
         tm.assert_frame_equal(actual, expected)
 
     def test_reader_dtype(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         # GH 8212
         basename = "testdtype"
         actual = pd.read_excel(basename + read_ext)
@@ -495,6 +795,21 @@
         ],
     )
     def test_reader_dtype_str(self, read_ext, dtype, expected):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+        dtype :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-20377
         basename = "testdtype"
 
@@ -502,6 +817,17 @@
         tm.assert_frame_equal(actual, expected)
 
     def test_reader_spaces(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-32207
         basename = "test_spaces"
 
@@ -528,6 +854,21 @@
         ],
     )
     def test_read_excel_ods_nested_xml(self, read_ext, basename, expected):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+        basename :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-35802
         engine = pd.read_excel.keywords["engine"]
         if engine != "odf":
@@ -537,6 +878,17 @@
         tm.assert_frame_equal(actual, expected)
 
     def test_reading_all_sheets(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         # Test reading all sheet names by setting sheet_name to None,
         # Ensure a dict is returned.
         # See PR #9450
@@ -550,6 +902,17 @@
         assert expected_keys == list(dfs.keys())
 
     def test_reading_multiple_specific_sheets(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         # Test reading specific sheet names by specifying a mixed list
         # of integers and strings, and confirm that duplicated sheet
         # references (positions/names) are removed properly.
@@ -564,6 +927,17 @@
         assert len(expected_keys) == len(dfs.keys())
 
     def test_reading_all_sheets_with_blank(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         # Test reading all sheet names by setting sheet_name to None,
         # In the case where some sheets are blank.
         # Issue #11711
@@ -574,15 +948,48 @@
 
     # GH6403
     def test_read_excel_blank(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         actual = pd.read_excel("blank" + read_ext, sheet_name="Sheet1")
         tm.assert_frame_equal(actual, DataFrame())
 
     def test_read_excel_blank_with_header(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         expected = DataFrame(columns=["col_1", "col_2"])
         actual = pd.read_excel("blank_with_header" + read_ext, sheet_name="Sheet1")
         tm.assert_frame_equal(actual, expected)
 
     def test_date_conversion_overflow(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         # GH 10001 : pandas.ExcelFile ignore parse_dates=False
         if pd.read_excel.keywords["engine"] == "pyxlsb":
             pytest.xfail("Sheets containing datetimes not supported by pyxlsb")
@@ -603,6 +1010,19 @@
         tm.assert_frame_equal(result, expected)
 
     def test_sheet_name(self, read_ext, df_ref):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+        df_ref :
+            
+
+        Returns
+        -------
+
+        """
         if pd.read_excel.keywords["engine"] == "pyxlsb":
             pytest.xfail("Sheets containing datetimes not supported by pyxlsb")
         filename = "test1"
@@ -621,6 +1041,17 @@
         tm.assert_frame_equal(df2, df_ref, check_names=False)
 
     def test_excel_read_buffer(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
 
         pth = "test1" + read_ext
         expected = pd.read_excel(pth, sheet_name="Sheet1", index_col=0)
@@ -629,12 +1060,34 @@
             tm.assert_frame_equal(expected, actual)
 
     def test_bad_engine_raises(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         bad_engine = "foo"
         with pytest.raises(ValueError, match="Unknown engine: foo"):
             pd.read_excel("", engine=bad_engine)
 
     @tm.network
     def test_read_from_http_url(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         url = (
             "https://raw.githubusercontent.com/pandas-dev/pandas/master/"
             "pandas/tests/io/data/excel/test1" + read_ext
@@ -645,6 +1098,19 @@
 
     @td.skip_if_not_us_locale
     def test_read_from_s3_url(self, read_ext, s3_resource):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+        s3_resource :
+            
+
+        Returns
+        -------
+
+        """
         # Bucket "pandas-test" created in tests/io/conftest.py
         with open("test1" + read_ext, "rb") as f:
             s3_resource.Bucket("pandas-test").put_object(Key="test1" + read_ext, Body=f)
@@ -658,6 +1124,19 @@
     # ignore warning from old xlrd
     @pytest.mark.filterwarnings("ignore:This metho:PendingDeprecationWarning")
     def test_read_from_file_url(self, read_ext, datapath):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+        datapath :
+            
+
+        Returns
+        -------
+
+        """
 
         # FILE
         localtable = os.path.join(datapath("io", "data", "excel"), "test1" + read_ext)
@@ -675,6 +1154,17 @@
         tm.assert_frame_equal(url_table, local_table)
 
     def test_read_from_pathlib_path(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
 
         # GH12655
         from pathlib import Path
@@ -690,6 +1180,17 @@
     @td.skip_if_no("py.path")
     @td.check_file_leaks
     def test_read_from_py_localpath(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
 
         # GH12655
         from py.path import local as LocalPath
@@ -704,6 +1205,17 @@
 
     @td.check_file_leaks
     def test_close_from_py_localpath(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
 
         # GH31467
         str_path = os.path.join("test1" + read_ext)
@@ -714,6 +1226,17 @@
             f.read()
 
     def test_reader_seconds(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         if pd.read_excel.keywords["engine"] == "pyxlsb":
             pytest.xfail("Sheets containing datetimes not supported by pyxlsb")
 
@@ -743,6 +1266,17 @@
         tm.assert_frame_equal(actual, expected)
 
     def test_read_excel_multiindex(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-4679
         if pd.read_excel.keywords["engine"] == "pyxlsb":
             pytest.xfail("Sheets containing datetimes not supported by pyxlsb")
@@ -825,6 +1359,17 @@
         tm.assert_frame_equal(actual, expected)
 
     def test_read_excel_multiindex_header_only(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-11733.
         #
         # Don't try to parse a header name if there isn't one.
@@ -836,6 +1381,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_excel_old_index_format(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-4679
         filename = "test_index_name_pre17" + read_ext
 
@@ -908,6 +1464,17 @@
         tm.assert_frame_equal(actual, expected, check_names=False)
 
     def test_read_excel_bool_header_arg(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         # GH 6114
         msg = "Passing a bool to header is invalid"
         for arg in [True, False]:
@@ -915,6 +1482,17 @@
                 pd.read_excel("test1" + read_ext, header=arg)
 
     def test_read_excel_skiprows_list(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         # GH 4903
         if pd.read_excel.keywords["engine"] == "pyxlsb":
             pytest.xfail("Sheets containing datetimes not supported by pyxlsb")
@@ -941,6 +1519,17 @@
         tm.assert_frame_equal(actual, expected)
 
     def test_read_excel_nrows(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         # GH 16645
         num_rows_to_pull = 5
         actual = pd.read_excel("test1" + read_ext, nrows=num_rows_to_pull)
@@ -949,6 +1538,17 @@
         tm.assert_frame_equal(actual, expected)
 
     def test_read_excel_nrows_greater_than_nrows_in_file(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         # GH 16645
         expected = pd.read_excel("test1" + read_ext)
         num_records_in_file = len(expected)
@@ -957,12 +1557,34 @@
         tm.assert_frame_equal(actual, expected)
 
     def test_read_excel_nrows_non_integer_parameter(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         # GH 16645
         msg = "'nrows' must be an integer >=0"
         with pytest.raises(ValueError, match=msg):
             pd.read_excel("test1" + read_ext, nrows="5")
 
     def test_read_excel_squeeze(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         # GH 12157
         f = "test_squeeze" + read_ext
 
@@ -980,12 +1602,34 @@
         tm.assert_series_equal(actual, expected)
 
     def test_deprecated_kwargs(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         with tm.assert_produces_warning(FutureWarning, raise_on_extra_warnings=False):
             pd.read_excel("test1" + read_ext, "Sheet1", 0)
 
         pd.read_excel("test1" + read_ext)
 
     def test_no_header_with_list_index_col(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         # GH 31783
         file_name = "testmultiindex" + read_ext
         data = [("B", "B"), ("key", "val"), (3, 4), (3, 4)]
@@ -1000,16 +1644,40 @@
 
 
 class TestExcelFileRead:
+    """ """
     @pytest.fixture(autouse=True)
     def cd_and_set_engine(self, engine, datapath, monkeypatch):
-        """
-        Change directory and set engine for ExcelFile objects.
+        """Change directory and set engine for ExcelFile objects.
+
+        Parameters
+        ----------
+        engine :
+            
+        datapath :
+            
+        monkeypatch :
+            
+
+        Returns
+        -------
+
         """
         func = partial(pd.ExcelFile, engine=engine)
         monkeypatch.chdir(datapath("io", "data", "excel"))
         monkeypatch.setattr(pd, "ExcelFile", func)
 
     def test_excel_passes_na(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         with pd.ExcelFile("test4" + read_ext) as excel:
             parsed = pd.read_excel(
                 excel, sheet_name="Sheet1", keep_default_na=False, na_values=["apple"]
@@ -1049,6 +1717,19 @@
 
     @pytest.mark.parametrize("na_filter", [None, True, False])
     def test_excel_passes_na_filter(self, read_ext, na_filter):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+        na_filter :
+            
+
+        Returns
+        -------
+
+        """
         # gh-25453
         kwargs = {}
 
@@ -1073,6 +1754,19 @@
         tm.assert_frame_equal(parsed, expected)
 
     def test_excel_table_sheet_by_index(self, read_ext, df_ref):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+        df_ref :
+            
+
+        Returns
+        -------
+
+        """
         # For some reason pd.read_excel has no attribute 'keywords' here.
         # Skipping based on read_ext instead.
         if read_ext == ".xlsb":
@@ -1100,6 +1794,19 @@
         tm.assert_frame_equal(df3, df1.iloc[:-1])
 
     def test_sheet_name(self, read_ext, df_ref):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+        df_ref :
+            
+
+        Returns
+        -------
+
+        """
         # For some reason pd.read_excel has no attribute 'keywords' here.
         # Skipping based on read_ext instead.
         if read_ext == ".xlsb":
@@ -1118,6 +1825,19 @@
         tm.assert_frame_equal(df2_parse, df_ref, check_names=False)
 
     def test_excel_read_buffer(self, engine, read_ext):
+        """
+
+        Parameters
+        ----------
+        engine :
+            
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         pth = "test1" + read_ext
         expected = pd.read_excel(pth, sheet_name="Sheet1", index_col=0, engine=engine)
 
@@ -1128,6 +1848,19 @@
         tm.assert_frame_equal(expected, actual)
 
     def test_reader_closes_file(self, engine, read_ext):
+        """
+
+        Parameters
+        ----------
+        engine :
+            
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         with open("test1" + read_ext, "rb") as f:
             with pd.ExcelFile(f) as xlsx:
                 # parses okay
@@ -1136,6 +1869,17 @@
         assert f.closed
 
     def test_conflicting_excel_engines(self, read_ext):
+        """
+
+        Parameters
+        ----------
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         # GH 26566
         msg = "Engine should not be specified when passing an ExcelFile"
 
@@ -1144,6 +1888,19 @@
                 pd.read_excel(xl, engine="foo")
 
     def test_excel_read_binary(self, engine, read_ext):
+        """
+
+        Parameters
+        ----------
+        engine :
+            
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         # GH 15914
         expected = pd.read_excel("test1" + read_ext, engine=engine)
 
@@ -1154,6 +1911,17 @@
         tm.assert_frame_equal(expected, actual)
 
     def test_excel_high_surrogate(self, engine):
+        """
+
+        Parameters
+        ----------
+        engine :
+            
+
+        Returns
+        -------
+
+        """
         # GH 23809
         expected = pd.DataFrame(["\udc88"], columns=["Column1"])
 
@@ -1163,6 +1931,19 @@
 
     @pytest.mark.parametrize("filename", ["df_empty.xlsx", "df_equals.xlsx"])
     def test_header_with_index_col(self, engine, filename):
+        """
+
+        Parameters
+        ----------
+        engine :
+            
+        filename :
+            
+
+        Returns
+        -------
+
+        """
         # GH 33476
         idx = pd.Index(["Z"], name="I2")
         cols = pd.MultiIndex.from_tuples(
@@ -1175,6 +1956,19 @@
         tm.assert_frame_equal(expected, result)
 
     def test_read_datetime_multiindex(self, engine, read_ext):
+        """
+
+        Parameters
+        ----------
+        engine :
+            
+        read_ext :
+            
+
+        Returns
+        -------
+
+        """
         # GH 34748
         if engine == "pyxlsb":
             pytest.xfail("Sheets containing datetimes not supported by pyxlsb")
