# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexing/test_categorical.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexing/test_categorical.py
@@ -20,7 +20,19 @@
 
 
 class TestCategoricalIndex:
+    """ """
     def setup_method(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
 
         self.df = DataFrame(
             {
@@ -48,6 +60,7 @@
         ).set_index("B")
 
     def test_loc_scalar(self):
+        """ """
         result = self.df.loc["a"]
         expected = DataFrame(
             {"A": [0, 1, 5], "B": (Series(list("aaa")).astype(CDT(list("cab"))))}
@@ -85,6 +98,7 @@
             df.loc[1]
 
     def test_getitem_scalar(self):
+        """ """
 
         cats = Categorical([Timestamp("12-31-1999"), Timestamp("12-31-2000")])
 
@@ -95,6 +109,7 @@
         assert result == expected
 
     def test_slicing(self):
+        """ """
         cat = Series(Categorical([1, 2, 3, 4]))
         reversed = cat[::-1]
         exp = np.array([4, 3, 2, 1], dtype=np.int64)
@@ -120,6 +135,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_slicing_and_getting_ops(self):
+        """ """
 
         # systematically test the slicing operations:
         #  for all slicing ops:
@@ -259,6 +275,7 @@
         assert is_categorical_dtype(res_df["cats"].dtype)
 
     def test_slicing_doc_examples(self):
+        """ """
 
         # GH 7918
         cats = Categorical(
@@ -298,6 +315,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_getitem_category_type(self):
+        """ """
         # GH 14580
         # test iloc() on Series with Categorical data
 
@@ -319,6 +337,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_loc_listlike(self):
+        """ """
 
         # list of labels
         result = self.df.loc[["c", "a"]]
@@ -358,6 +377,7 @@
             self.df2.loc[["a", "d"]]
 
     def test_loc_listlike_dtypes(self):
+        """ """
         # GH 11586
 
         # unique categories and codes
@@ -435,6 +455,7 @@
             df.loc[["a", "x"]]
 
     def test_get_indexer_array(self):
+        """ """
         arr = np.array(
             [Timestamp("1999-12-31 00:00:00"), Timestamp("2000-12-31 00:00:00")],
             dtype=object,
@@ -446,6 +467,7 @@
         tm.assert_numpy_array_equal(result, expected)
 
     def test_get_indexer_same_categories_same_order(self):
+        """ """
         ci = CategoricalIndex(["a", "b"], categories=["a", "b"])
 
         result = ci.get_indexer(CategoricalIndex(["b", "b"], categories=["a", "b"]))
@@ -453,6 +475,7 @@
         tm.assert_numpy_array_equal(result, expected)
 
     def test_get_indexer_same_categories_different_order(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/19551
         ci = CategoricalIndex(["a", "b"], categories=["a", "b"])
 
@@ -461,6 +484,7 @@
         tm.assert_numpy_array_equal(result, expected)
 
     def test_getitem_with_listlike(self):
+        """ """
         # GH 16115
         cats = Categorical([Timestamp("12-31-1999"), Timestamp("12-31-2000")])
 
@@ -472,6 +496,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_setitem_listlike(self):
+        """ """
 
         # GH 9469
         # properly coerce the input indexers
@@ -488,6 +513,7 @@
         tm.assert_numpy_array_equal(result, np.array([5], dtype="int8"))
 
     def test_ix_categorical_index(self):
+        """ """
         # GH 12531
         df = DataFrame(np.random.randn(3, 3), index=list("ABC"), columns=list("XYZ"))
         cdf = df.copy()
@@ -537,6 +563,7 @@
         tm.assert_frame_equal(cdf.loc[:, ["X", "Y"]], expect)
 
     def test_read_only_source(self):
+        """ """
         # GH 10043
         rw_array = np.eye(10)
         rw_df = DataFrame(rw_array)
@@ -556,6 +583,7 @@
         tm.assert_frame_equal(rw_df.loc[1:3], ro_df.loc[1:3])
 
     def test_reindexing(self):
+        """ """
         df = DataFrame(
             {
                 "A": np.arange(3, dtype="int64"),
@@ -641,6 +669,7 @@
             df.reindex(["a"], limit=2)
 
     def test_loc_slice(self):
+        """ """
         # GH9748
         with pytest.raises(KeyError, match="1"):
             self.df.loc[1:5]
@@ -650,6 +679,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_loc_and_at_with_categorical_index(self):
+        """ """
         # GH 20629
         s = Series([1, 2, 3], index=pd.CategoricalIndex(["A", "B", "C"]))
         assert s.loc["A"] == 1
@@ -661,6 +691,7 @@
         assert df.at["B", 1] == 4
 
     def test_boolean_selection(self):
+        """ """
 
         df3 = self.df3
         df4 = self.df4
@@ -709,6 +740,7 @@
             df4[df4.index > 1]
 
     def test_indexing_with_category(self):
+        """ """
 
         # https://github.com/pandas-dev/pandas/issues/12564
         # consistent result if comparing as Dataframe
@@ -725,6 +757,7 @@
         tm.assert_frame_equal(res, exp)
 
     def test_map_with_dict_or_series(self):
+        """ """
         orig_values = ["a", "B", 1, "a"]
         new_values = ["one", 2, 3.0, "one"]
         cur_index = pd.CategoricalIndex(orig_values, name="XXX")
@@ -769,6 +802,19 @@
         ],
     )
     def test_loc_with_non_string_categories(self, idx_values, ordered):
+        """
+
+        Parameters
+        ----------
+        idx_values :
+            
+        ordered :
+            
+
+        Returns
+        -------
+
+        """
         # GH-17569
         cat_idx = CategoricalIndex(idx_values, ordered=ordered)
         df = DataFrame({"A": ["foo", "bar", "baz"]}, index=cat_idx)
