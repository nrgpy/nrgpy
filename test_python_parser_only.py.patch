# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/parser/test_python_parser_only.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/parser/test_python_parser_only.py
@@ -17,6 +17,17 @@
 
 
 def test_default_separator(python_parser_only):
+    """
+
+    Parameters
+    ----------
+    python_parser_only :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-17333
     #
     # csv.Sniffer in Python treats "o" as separator.
@@ -30,6 +41,19 @@
 
 @pytest.mark.parametrize("skipfooter", ["foo", 1.5, True])
 def test_invalid_skipfooter_non_int(python_parser_only, skipfooter):
+    """
+
+    Parameters
+    ----------
+    python_parser_only :
+        
+    skipfooter :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-15925 (comment)
     data = "a\n1\n2"
     parser = python_parser_only
@@ -40,6 +64,17 @@
 
 
 def test_invalid_skipfooter_negative(python_parser_only):
+    """
+
+    Parameters
+    ----------
+    python_parser_only :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-15925 (comment)
     data = "a\n1\n2"
     parser = python_parser_only
@@ -51,11 +86,20 @@
 
 @pytest.mark.parametrize("kwargs", [dict(sep=None), dict(delimiter="|")])
 def test_sniff_delimiter(python_parser_only, kwargs):
-    data = """index|A|B|C
-foo|1|2|3
-bar|4|5|6
-baz|7|8|9
-"""
+    """data = """index|A|B|C
+    foo|1|2|3
+    bar|4|5|6
+    baz|7|8|9
+
+    Parameters
+    ----------
+    python_parser_only :
+        
+    kwargs :
+        
+
+    Returns
+    -------
     parser = python_parser_only
     result = parser.read_csv(StringIO(data), index_col=0, **kwargs)
     expected = DataFrame(
@@ -67,13 +111,20 @@
 
 
 def test_sniff_delimiter_comment(python_parser_only):
-    data = """# comment line
-index|A|B|C
-# comment line
-foo|1|2|3 # ignore | this
-bar|4|5|6
-baz|7|8|9
-"""
+    """data = """# comment line
+    index|A|B|C
+    # comment line
+    foo|1|2|3 # ignore | this
+    bar|4|5|6
+    baz|7|8|9
+
+    Parameters
+    ----------
+    python_parser_only :
+        
+
+    Returns
+    -------
     parser = python_parser_only
     result = parser.read_csv(StringIO(data), index_col=0, sep=None, comment="#")
     expected = DataFrame(
@@ -86,6 +137,19 @@
 
 @pytest.mark.parametrize("encoding", [None, "utf-8"])
 def test_sniff_delimiter_encoding(python_parser_only, encoding):
+    """
+
+    Parameters
+    ----------
+    python_parser_only :
+        
+    encoding :
+        
+
+    Returns
+    -------
+
+    """
     parser = python_parser_only
     data = """ignore this
 ignore this too
@@ -114,6 +178,17 @@
 
 
 def test_single_line(python_parser_only):
+    """
+
+    Parameters
+    ----------
+    python_parser_only :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-6607: sniff separator
     parser = python_parser_only
     result = parser.read_csv(StringIO("1,2"), names=["a", "b"], header=None, sep=None)
@@ -124,6 +199,19 @@
 
 @pytest.mark.parametrize("kwargs", [dict(skipfooter=2), dict(nrows=3)])
 def test_skipfooter(python_parser_only, kwargs):
+    """
+
+    Parameters
+    ----------
+    python_parser_only :
+        
+    kwargs :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-6607
     data = """A,B,C
 1,2,3
@@ -143,6 +231,23 @@
     "compression,klass", [("gzip", "GzipFile"), ("bz2", "BZ2File")]
 )
 def test_decompression_regex_sep(python_parser_only, csv1, compression, klass):
+    """
+
+    Parameters
+    ----------
+    python_parser_only :
+        
+    csv1 :
+        
+    compression :
+        
+    klass :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-6607
     parser = python_parser_only
 
@@ -165,6 +270,17 @@
 
 
 def test_read_csv_buglet_4x_multi_index(python_parser_only):
+    """
+
+    Parameters
+    ----------
+    python_parser_only :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-6607
     data = """                      A       B       C       D        E
 one two three   four
@@ -190,6 +306,17 @@
 
 
 def test_read_csv_buglet_4x_multi_index2(python_parser_only):
+    """
+
+    Parameters
+    ----------
+    python_parser_only :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-6893
     data = "      A B C\na b c\n1 3 7 0 3 6\n3 1 4 1 5 9"
     parser = python_parser_only
@@ -205,6 +332,19 @@
 
 @pytest.mark.parametrize("add_footer", [True, False])
 def test_skipfooter_with_decimal(python_parser_only, add_footer):
+    """
+
+    Parameters
+    ----------
+    python_parser_only :
+        
+    add_footer :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-6971
     data = "1#2\n3#4"
     parser = python_parser_only
@@ -229,6 +369,21 @@
     "encoding", ["utf-16", "utf-16-be", "utf-16-le", "utf-32", "cp037"]
 )
 def test_encoding_non_utf8_multichar_sep(python_parser_only, sep, encoding):
+    """
+
+    Parameters
+    ----------
+    python_parser_only :
+        
+    sep :
+        
+    encoding :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-3404
     expected = DataFrame({"a": [1], "b": [2]})
     parser = python_parser_only
@@ -244,6 +399,19 @@
 
 @pytest.mark.parametrize("quoting", [csv.QUOTE_MINIMAL, csv.QUOTE_NONE])
 def test_multi_char_sep_quotes(python_parser_only, quoting):
+    """
+
+    Parameters
+    ----------
+    python_parser_only :
+        
+    quoting :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-13374
     kwargs = dict(sep=",,")
     parser = python_parser_only
@@ -252,6 +420,7 @@
     msg = "ignored when a multi-char delimiter is used"
 
     def fail_read():
+        """ """
         with pytest.raises(ParserError, match=msg):
             parser.read_csv(StringIO(data), quoting=quoting, **kwargs)
 
@@ -265,6 +434,19 @@
 
 
 def test_none_delimiter(python_parser_only, capsys):
+    """
+
+    Parameters
+    ----------
+    python_parser_only :
+        
+    capsys :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-13374 and gh-17465
     parser = python_parser_only
     data = "a,b,c\n0,1,2\n3,4,5,6\n7,8,9"
@@ -285,11 +467,27 @@
 @pytest.mark.parametrize("data", ['a\n1\n"b"a', 'a,b,c\ncat,foo,bar\ndog,foo,"baz'])
 @pytest.mark.parametrize("skipfooter", [0, 1])
 def test_skipfooter_bad_row(python_parser_only, data, skipfooter):
+    """
+
+    Parameters
+    ----------
+    python_parser_only :
+        
+    data :
+        
+    skipfooter :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-13879 and gh-15910
     msg = "parsing errors in the skipped footer rows"
     parser = python_parser_only
 
     def fail_read():
+        """ """
         with pytest.raises(ParserError, match=msg):
             parser.read_csv(StringIO(data), skipfooter=skipfooter)
 
@@ -303,6 +501,17 @@
 
 
 def test_malformed_skipfooter(python_parser_only):
+    """
+
+    Parameters
+    ----------
+    python_parser_only :
+        
+
+    Returns
+    -------
+
+    """
     parser = python_parser_only
     data = """ignore
 A,B,C
