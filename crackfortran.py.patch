# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/f2py/crackfortran.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/f2py/crackfortran.py
@@ -191,6 +191,7 @@
 
 
 def reset_global_f2py_vars():
+    """ """
     global groupcounter, grouplist, neededmodule, expectbegin
     global skipblocksuntil, usermodules, f90modulevars, gotnextfile
     global filepositiontext, currentfilename, skipfunctions, skipfuncs
@@ -229,6 +230,19 @@
 
 
 def outmess(line, flag=1):
+    """
+
+    Parameters
+    ----------
+    line :
+        
+    flag :
+         (Default value = 1)
+
+    Returns
+    -------
+
+    """
     global filepositiontext
 
     if not verbose:
@@ -261,6 +275,17 @@
 
 
 def rmbadname1(name):
+    """
+
+    Parameters
+    ----------
+    name :
+        
+
+    Returns
+    -------
+
+    """
     if name in badnames:
         errmess('rmbadname1: Replacing "%s" with "%s".\n' %
                 (name, badnames[name]))
@@ -269,10 +294,32 @@
 
 
 def rmbadname(names):
+    """
+
+    Parameters
+    ----------
+    names :
+        
+
+    Returns
+    -------
+
+    """
     return [rmbadname1(_m) for _m in names]
 
 
 def undo_rmbadname1(name):
+    """
+
+    Parameters
+    ----------
+    name :
+        
+
+    Returns
+    -------
+
+    """
     if name in invbadnames:
         errmess('undo_rmbadname1: Replacing "%s" with "%s".\n'
                 % (name, invbadnames[name]))
@@ -281,10 +328,32 @@
 
 
 def undo_rmbadname(names):
+    """
+
+    Parameters
+    ----------
+    names :
+        
+
+    Returns
+    -------
+
+    """
     return [undo_rmbadname1(_m) for _m in names]
 
 
 def getextension(name):
+    """
+
+    Parameters
+    ----------
+    name :
+        
+
+    Returns
+    -------
+
+    """
     i = name.rfind('.')
     if i == -1:
         return ''
@@ -302,7 +371,17 @@
 
 
 def is_free_format(file):
-    """Check if file is in free format Fortran."""
+    """Check if file is in free format Fortran.
+
+    Parameters
+    ----------
+    file :
+        
+
+    Returns
+    -------
+
+    """
     # f90 allows both fixed and free format, assuming fixed unless
     # signs of free format are detected.
     result = 0
@@ -326,11 +405,23 @@
 
 # Read fortran (77,90) code
 def readfortrancode(ffile, dowithline=show, istop=1):
-    """
-    Read fortran codes from files and
+    """Read fortran codes from files and
      1) Get rid of comments, line continuations, and empty lines; lower cases.
      2) Call dowithline(line) on every line.
      3) Recursively call itself when statement \"include '<filename>'\" is met.
+
+    Parameters
+    ----------
+    ffile :
+        
+    dowithline :
+         (Default value = show)
+    istop :
+         (Default value = 1)
+
+    Returns
+    -------
+
     """
     global gotnextfile, filepositiontext, currentfilename, sourcecodeform, strictf77
     global beginpattern, quiet, verbose, dolowercase, include_paths
@@ -609,10 +700,20 @@
 ##
 
 def split_by_unquoted(line, characters):
-    """
-    Splits the line into (line[:i], line[i:]),
+    """Splits the line into (line[:i], line[i:]),
     where i is the index of first occurrence of one of the characters
     not within quotes, or len(line) if no such index exists
+
+    Parameters
+    ----------
+    line :
+        
+    characters :
+        
+
+    Returns
+    -------
+
     """
     assert not (set('"\'') & set(characters)), "cannot split by unquoted quotes"
     r = re.compile(
@@ -629,6 +730,17 @@
     return (line, "")
 
 def _simplifyargs(argsline):
+    """
+
+    Parameters
+    ----------
+    argsline :
+        
+
+    Returns
+    -------
+
+    """
     a = []
     for n in markoutercomma(argsline).split('@,@'):
         for r in '(),':
@@ -640,12 +752,22 @@
 
 
 def crackline(line, reset=0):
-    """
-    reset=-1  --- initialize
+    """reset=-1  --- initialize
     reset=0   --- crack the line
     reset=1   --- final check if mismatch of blocks occurred
-
+    
     Cracked data is saved in grouplist[0].
+
+    Parameters
+    ----------
+    line :
+        
+    reset :
+         (Default value = 0)
+
+    Returns
+    -------
+
     """
     global beginpattern, groupcounter, groupname, groupcache, grouplist
     global filepositiontext, currentfilename, neededmodule, expectbegin
@@ -796,6 +918,17 @@
 
 
 def markouterparen(line):
+    """
+
+    Parameters
+    ----------
+    line :
+        
+
+    Returns
+    -------
+
+    """
     l = ''
     f = 0
     for c in line:
@@ -814,6 +947,21 @@
 
 
 def markoutercomma(line, comma=','):
+    """
+
+    Parameters
+    ----------
+    line :
+        
+    comma :
+         (Default value = ')
+    ' :
+        
+
+    Returns
+    -------
+
+    """
     l = ''
     f = 0
     before, after = split_by_unquoted(line, comma + '()')
@@ -833,11 +981,37 @@
     return l
 
 def unmarkouterparen(line):
+    """
+
+    Parameters
+    ----------
+    line :
+        
+
+    Returns
+    -------
+
+    """
     r = line.replace('@(@', '(').replace('@)@', ')')
     return r
 
 
 def appenddecl(decl, decl2, force=1):
+    """
+
+    Parameters
+    ----------
+    decl :
+        
+    decl2 :
+        
+    force :
+         (Default value = 1)
+
+    Returns
+    -------
+
+    """
     if not decl:
         decl = {}
     if not decl2:
@@ -882,6 +1056,17 @@
 
 
 def _is_intent_callback(vdecl):
+    """
+
+    Parameters
+    ----------
+    vdecl :
+        
+
+    Returns
+    -------
+
+    """
     for a in vdecl.get('attrspec', []):
         if _intentcallbackpattern.match(a):
             return 1
@@ -889,6 +1074,17 @@
 
 
 def _resolvenameargspattern(line):
+    """
+
+    Parameters
+    ----------
+    line :
+        
+
+    Returns
+    -------
+
+    """
     line = markouterparen(line)
     m1 = nameargspattern.match(line)
     if m1:
@@ -900,6 +1096,21 @@
 
 
 def analyzeline(m, case, line):
+    """
+
+    Parameters
+    ----------
+    m :
+        
+    case :
+        
+    line :
+        
+
+    Returns
+    -------
+
+    """
     global groupcounter, groupname, groupcache, grouplist, filepositiontext
     global currentfilename, f77modulename, neededinterface, neededmodule
     global expectbegin, gotnextfile, previous_context
@@ -1447,6 +1658,21 @@
 
 
 def appendmultiline(group, context_name, ml):
+    """
+
+    Parameters
+    ----------
+    group :
+        
+    context_name :
+        
+    ml :
+        
+
+    Returns
+    -------
+
+    """
     if 'f2pymultilines' not in group:
         group['f2pymultilines'] = {}
     d = group['f2pymultilines']
@@ -1457,6 +1683,19 @@
 
 
 def cracktypespec0(typespec, ll):
+    """
+
+    Parameters
+    ----------
+    typespec :
+        
+    ll :
+        
+
+    Returns
+    -------
+
+    """
     selector = None
     attr = None
     if re.match(r'double\s*complex', typespec, re.I):
@@ -1494,6 +1733,17 @@
 
 
 def removespaces(expr):
+    """
+
+    Parameters
+    ----------
+    expr :
+        
+
+    Returns
+    -------
+
+    """
     expr = expr.strip()
     if len(expr) <= 1:
         return expr
@@ -1509,6 +1759,17 @@
 
 
 def markinnerspaces(line):
+    """
+
+    Parameters
+    ----------
+    line :
+        
+
+    Returns
+    -------
+
+    """
     l = ''
     f = 0
     cc = '\''
@@ -1533,6 +1794,23 @@
 
 
 def updatevars(typespec, selector, attrspec, entitydecl):
+    """
+
+    Parameters
+    ----------
+    typespec :
+        
+    selector :
+        
+    attrspec :
+        
+    entitydecl :
+        
+
+    Returns
+    -------
+
+    """
     global groupcache, groupcounter
 
     last_name = None
@@ -1677,6 +1955,19 @@
 
 
 def cracktypespec(typespec, selector):
+    """
+
+    Parameters
+    ----------
+    typespec :
+        
+    selector :
+        
+
+    Returns
+    -------
+
+    """
     kindselect = None
     charselect = None
     typename = None
@@ -1734,6 +2025,21 @@
 
 
 def setattrspec(decl, attr, force=0):
+    """
+
+    Parameters
+    ----------
+    decl :
+        
+    attr :
+        
+    force :
+         (Default value = 0)
+
+    Returns
+    -------
+
+    """
     if not decl:
         decl = {}
     if not attr:
@@ -1761,6 +2067,21 @@
 
 
 def setkindselector(decl, sel, force=0):
+    """
+
+    Parameters
+    ----------
+    decl :
+        
+    sel :
+        
+    force :
+         (Default value = 0)
+
+    Returns
+    -------
+
+    """
     if not decl:
         decl = {}
     if not sel:
@@ -1775,6 +2096,21 @@
 
 
 def setcharselector(decl, sel, force=0):
+    """
+
+    Parameters
+    ----------
+    decl :
+        
+    sel :
+        
+    force :
+         (Default value = 0)
+
+    Returns
+    -------
+
+    """
     if not decl:
         decl = {}
     if not sel:
@@ -1789,6 +2125,19 @@
 
 
 def getblockname(block, unknown='unknown'):
+    """
+
+    Parameters
+    ----------
+    block :
+        
+    unknown :
+         (Default value = 'unknown')
+
+    Returns
+    -------
+
+    """
     if 'name' in block:
         return block['name']
     return unknown
@@ -1797,6 +2146,17 @@
 
 
 def setmesstext(block):
+    """
+
+    Parameters
+    ----------
+    block :
+        
+
+    Returns
+    -------
+
+    """
     global filepositiontext
 
     try:
@@ -1806,6 +2166,17 @@
 
 
 def get_usedict(block):
+    """
+
+    Parameters
+    ----------
+    block :
+        
+
+    Returns
+    -------
+
+    """
     usedict = {}
     if 'parent_block' in block:
         usedict = get_usedict(block['parent_block'])
@@ -1815,6 +2186,19 @@
 
 
 def get_useparameters(block, param_map=None):
+    """
+
+    Parameters
+    ----------
+    block :
+        
+    param_map :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     global f90modulevars
 
     if param_map is None:
@@ -1845,6 +2229,21 @@
 
 
 def postcrack2(block, tab='', param_map=None):
+    """
+
+    Parameters
+    ----------
+    block :
+        
+    tab :
+         (Default value = '')
+    param_map :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     global f90modulevars
 
     if not f90modulevars:
@@ -1877,10 +2276,22 @@
 
 
 def postcrack(block, args=None, tab=''):
-    """
-    TODO:
+    """TODO:
           function return values
           determine expression types if in argument list
+
+    Parameters
+    ----------
+    block :
+        
+    args :
+         (Default value = None)
+    tab :
+         (Default value = '')
+
+    Returns
+    -------
+
     """
     global usermodules, onlyfunctions
 
@@ -1973,6 +2384,17 @@
 
 
 def sortvarnames(vars):
+    """
+
+    Parameters
+    ----------
+    vars :
+        
+
+    Returns
+    -------
+
+    """
     indep = []
     dep = []
     for v in list(vars.keys()):
@@ -2007,6 +2429,17 @@
 
 
 def analyzecommon(block):
+    """
+
+    Parameters
+    ----------
+    block :
+        
+
+    Returns
+    -------
+
+    """
     if not hascommon(block):
         return block
     commonvars = []
@@ -2050,6 +2483,21 @@
 
 
 def analyzebody(block, args, tab=''):
+    """
+
+    Parameters
+    ----------
+    block :
+        
+    args :
+        
+    tab :
+         (Default value = '')
+
+    Returns
+    -------
+
+    """
     global usermodules, skipfuncs, onlyfuncs, f90modulevars
 
     setmesstext(block)
@@ -2084,6 +2532,17 @@
 
 
 def buildimplicitrules(block):
+    """
+
+    Parameters
+    ----------
+    block :
+        
+
+    Returns
+    -------
+
+    """
     setmesstext(block)
     implicitrules = defaultimplicitrules
     attrrules = {}
@@ -2103,6 +2562,21 @@
 
 
 def myeval(e, g=None, l=None):
+    """
+
+    Parameters
+    ----------
+    e :
+        
+    g :
+         (Default value = None)
+    l :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     r = eval(e, g, l)
     if type(r) in [type(0), type(0.0)]:
         return r
@@ -2112,6 +2586,19 @@
 
 
 def getlincoef(e, xset):  # e = a*x+b ; x in xset
+    """
+
+    Parameters
+    ----------
+    e :
+        
+    xset :
+        
+
+    Returns
+    -------
+
+    """
     try:
         c = int(myeval(e, {}, {}))
         return 0, c, None
@@ -2166,6 +2653,21 @@
 
 
 def getarrlen(dl, args, star='*'):
+    """
+
+    Parameters
+    ----------
+    dl :
+        
+    args :
+        
+    star :
+         (Default value = '*')
+
+    Returns
+    -------
+
+    """
     edl = []
     try:
         edl.append(myeval(dl[0], {}, {}))
@@ -2318,6 +2820,21 @@
 
 
 def _get_depend_dict(name, vars, deps):
+    """
+
+    Parameters
+    ----------
+    name :
+        
+    vars :
+        
+    deps :
+        
+
+    Returns
+    -------
+
+    """
     if name in vars:
         words = vars[name].get('depend', [])
 
@@ -2338,6 +2855,17 @@
 
 
 def _calc_depend_dict(vars):
+    """
+
+    Parameters
+    ----------
+    vars :
+        
+
+    Returns
+    -------
+
+    """
     names = list(vars.keys())
     depend_dict = {}
     for n in names:
@@ -2347,6 +2875,15 @@
 
 def get_sorted_names(vars):
     """
+
+    Parameters
+    ----------
+    vars :
+        
+
+    Returns
+    -------
+
     """
     depend_dict = _calc_depend_dict(vars)
     names = []
@@ -2366,6 +2903,17 @@
 
 
 def _kind_func(string):
+    """
+
+    Parameters
+    ----------
+    string :
+        
+
+    Returns
+    -------
+
+    """
     # XXX: return something sensible.
     if string[0] in "'\"":
         string = string[1:-1]
@@ -2377,6 +2925,17 @@
 
 
 def _selected_int_kind_func(r):
+    """
+
+    Parameters
+    ----------
+    r :
+        
+
+    Returns
+    -------
+
+    """
     # XXX: This should be processor dependent
     m = 10 ** r
     if m <= 2 ** 8:
@@ -2393,6 +2952,21 @@
 
 
 def _selected_real_kind_func(p, r=0, radix=0):
+    """
+
+    Parameters
+    ----------
+    p :
+        
+    r :
+         (Default value = 0)
+    radix :
+         (Default value = 0)
+
+    Returns
+    -------
+
+    """
     # XXX: This should be processor dependent
     # This is only good for 0 <= p <= 20
     if p < 7:
@@ -2412,6 +2986,19 @@
 
 
 def get_parameters(vars, global_params={}):
+    """
+
+    Parameters
+    ----------
+    vars :
+        
+    global_params :
+         (Default value = {})
+
+    Returns
+    -------
+
+    """
     params = copy.copy(global_params)
     g_params = copy.copy(global_params)
     for name, func in [('kind', _kind_func),
@@ -2501,6 +3088,19 @@
 
 
 def _eval_length(length, params):
+    """
+
+    Parameters
+    ----------
+    length :
+        
+    params :
+        
+
+    Returns
+    -------
+
+    """
     if length in ['(:)', '(*)', '*']:
         return '(*)'
     return _eval_scalar(length, params)
@@ -2509,6 +3109,19 @@
 
 
 def _eval_scalar(value, params):
+    """
+
+    Parameters
+    ----------
+    value :
+        
+    params :
+        
+
+    Returns
+    -------
+
+    """
     if _is_kind_number(value):
         value = value.split('_')[0]
     try:
@@ -2523,6 +3136,17 @@
 
 
 def analyzevars(block):
+    """
+
+    Parameters
+    ----------
+    block :
+        
+
+    Returns
+    -------
+
+    """
     global f90modulevars
 
     setmesstext(block)
@@ -2874,6 +3498,21 @@
 
 
 def expr2name(a, block, args=[]):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    block :
+        
+    args :
+         (Default value = [])
+
+    Returns
+    -------
+
+    """
     orig_a = a
     a_is_expr = not analyzeargs_re_1.match(a)
     if a_is_expr:  # `a` is an expression
@@ -2911,6 +3550,17 @@
 
 
 def analyzeargs(block):
+    """
+
+    Parameters
+    ----------
+    block :
+        
+
+    Returns
+    -------
+
+    """
     setmesstext(block)
     implicitrules, attrrules = buildimplicitrules(block)
     if 'args' not in block:
@@ -2945,6 +3595,17 @@
 
 
 def _ensure_exprdict(r):
+    """
+
+    Parameters
+    ----------
+    r :
+        
+
+    Returns
+    -------
+
+    """
     if isinstance(r, int):
         return {'typespec': 'integer'}
     if isinstance(r, float):
@@ -2957,6 +3618,21 @@
 
 
 def determineexprtype(expr, vars, rules={}):
+    """
+
+    Parameters
+    ----------
+    expr :
+        
+    vars :
+        
+    rules :
+         (Default value = {})
+
+    Returns
+    -------
+
+    """
     if expr in vars:
         return _ensure_exprdict(vars[expr])
     expr = expr.strip()
@@ -3002,6 +3678,21 @@
 
 
 def crack2fortrangen(block, tab='\n', as_interface=False):
+    """
+
+    Parameters
+    ----------
+    block :
+        
+    tab :
+         (Default value = '\n')
+    as_interface :
+         (Default value = False)
+
+    Returns
+    -------
+
+    """
     global skipfuncs, onlyfuncs
 
     setmesstext(block)
@@ -3077,6 +3768,19 @@
 
 
 def common2fortran(common, tab=''):
+    """
+
+    Parameters
+    ----------
+    common :
+        
+    tab :
+         (Default value = '')
+
+    Returns
+    -------
+
+    """
     ret = ''
     for k in list(common.keys()):
         if k == '_BLNK_':
@@ -3087,6 +3791,19 @@
 
 
 def use2fortran(use, tab=''):
+    """
+
+    Parameters
+    ----------
+    use :
+        
+    tab :
+         (Default value = '')
+
+    Returns
+    -------
+
+    """
     ret = ''
     for m in list(use.keys()):
         ret = '%s%suse %s,' % (ret, tab, m)
@@ -3111,6 +3828,17 @@
 
 
 def true_intent_list(var):
+    """
+
+    Parameters
+    ----------
+    var :
+        
+
+    Returns
+    -------
+
+    """
     lst = var['intent']
     ret = []
     for intent in lst:
@@ -3125,10 +3853,26 @@
 
 
 def vars2fortran(block, vars, args, tab='', as_interface=False):
-    """
-    TODO:
+    """TODO:
     public sub
     ...
+
+    Parameters
+    ----------
+    block :
+        
+    vars :
+        
+    args :
+        
+    tab :
+         (Default value = '')
+    as_interface :
+         (Default value = False)
+
+    Returns
+    -------
+
     """
     setmesstext(block)
     ret = ''
@@ -3247,6 +3991,17 @@
 
 
 def crackfortran(files):
+    """
+
+    Parameters
+    ----------
+    files :
+        
+
+    Returns
+    -------
+
+    """
     global usermodules
 
     outmess('Reading fortran codes...\n', 0)
@@ -3260,6 +4015,17 @@
 
 
 def crack2fortran(block):
+    """
+
+    Parameters
+    ----------
+    block :
+        
+
+    Returns
+    -------
+
+    """
     global f2py_version
 
     pyf = crack2fortrangen(block) + '\n'
