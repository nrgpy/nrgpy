# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/debugger.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/debugger.py
@@ -51,7 +51,17 @@
 # the Tracer constructor.
 
 def make_arrow(pad):
-    """generate the leading arrow in front of traceback or debugger"""
+    """generate the leading arrow in front of traceback or debugger
+
+    Parameters
+    ----------
+    pad :
+        
+
+    Returns
+    -------
+
+    """
     if pad >= 2:
         return '-'*(pad-2) + '> '
     elif pad == 1:
@@ -60,10 +70,29 @@
 
 
 def BdbQuit_excepthook(et, ev, tb, excepthook=None):
-    """Exception hook which handles `BdbQuit` exceptions.
-
-    All other exceptions are processed using the `excepthook`
-    parameter.
+    """
+
+    Parameters
+    ----------
+    et :
+        
+    ev :
+        
+    tb :
+        
+    excepthook :
+         (Default value = None)
+
+    Returns
+    -------
+
+    Raises
+    ------
+    All
+        other exceptions are processed using the
+    parameter
+        
+
     """
     warnings.warn("`BdbQuit_excepthook` is deprecated since version 5.1",
                   DeprecationWarning, stacklevel=2)
@@ -77,6 +106,23 @@
 
 
 def BdbQuit_IPython_excepthook(self,et,ev,tb,tb_offset=None):
+    """
+
+    Parameters
+    ----------
+    et :
+        
+    ev :
+        
+    tb :
+        
+    tb_offset :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     warnings.warn(
         "`BdbQuit_IPython_excepthook` is deprecated since version 5.1",
         DeprecationWarning, stacklevel=2)
@@ -84,19 +130,25 @@
 
 
 class Tracer(object):
-    """
-    DEPRECATED
-
+    """DEPRECATED
+    
     Class for local debugging, similar to pdb.set_trace.
-
+    
     Instances of this class, when called, behave like pdb.set_trace, but
     providing IPython's enhanced capabilities.
-
+    
     This is implemented as a class which must be initialized in your own code
     and not as a standalone function because we need to detect at runtime
     whether IPython is already active or not.  That detection is done in the
     constructor, ensuring that this code plays nicely with a running IPython,
     while functioning acceptably (though with limitations) if outside of it.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     @skip_doctest
@@ -177,6 +229,17 @@
 
 
 def strip_indentation(multiline_string):
+    """
+
+    Parameters
+    ----------
+    multiline_string :
+        
+
+    Returns
+    -------
+
+    """
     return RGX_EXTRA_INDENT.sub('', multiline_string)
 
 
@@ -184,8 +247,35 @@
     """Make new_fn have old_fn's doc string. This is particularly useful
     for the ``do_...`` commands that hook into the help system.
     Adapted from from a comp.lang.python posting
-    by Duncan Booth."""
+    by Duncan Booth.
+
+    Parameters
+    ----------
+    new_fn :
+        
+    old_fn :
+        
+    additional_text :
+         (Default value = "")
+
+    Returns
+    -------
+
+    """
     def wrapper(*args, **kw):
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+        **kw :
+            
+
+        Returns
+        -------
+
+        """
         return new_fn(*args, **kw)
     if old_fn.__doc__:
         wrapper.__doc__ = strip_indentation(old_fn.__doc__) + additional_text
@@ -194,10 +284,17 @@
 
 class Pdb(OldPdb):
     """Modified Pdb class, does not load readline.
-
+    
     for a standalone version that uses prompt_toolkit, see
     `IPython.terminal.debugger.TerminalPdb` and
     `IPython.terminal.debugger.set_trace()`
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, color_scheme=None, completekey=None,
@@ -283,21 +380,50 @@
         self.skip_hidden = True
 
     def set_colors(self, scheme):
-        """Shorthand access to the color table scheme selector method."""
+        """Shorthand access to the color table scheme selector method.
+
+        Parameters
+        ----------
+        scheme :
+            
+
+        Returns
+        -------
+
+        """
         self.color_scheme_table.set_active_scheme(scheme)
         self.parser.style = scheme
 
     def set_trace(self, frame=None):
+        """
+
+        Parameters
+        ----------
+        frame :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if frame is None:
             frame = sys._getframe().f_back
         self.initial_frame = frame
         return super().set_trace(frame)
 
     def hidden_frames(self, stack):
-        """
-        Given an index in the stack return wether it should be skipped.
-
+        """Given an index in the stack return wether it should be skipped.
+        
         This is used in up/down and where to skip frames.
+
+        Parameters
+        ----------
+        stack :
+            
+
+        Returns
+        -------
+
         """
         # The f_locals dictionary is updated from the actual frame
         # locals whenever the .f_locals accessor is called, so we
@@ -315,15 +441,50 @@
         return ip_hide
 
     def interaction(self, frame, traceback):
+        """
+
+        Parameters
+        ----------
+        frame :
+            
+        traceback :
+            
+
+        Returns
+        -------
+
+        """
         try:
             OldPdb.interaction(self, frame, traceback)
         except KeyboardInterrupt:
             self.stdout.write("\n" + self.shell.get_exception_only())
 
     def new_do_frame(self, arg):
+        """
+
+        Parameters
+        ----------
+        arg :
+            
+
+        Returns
+        -------
+
+        """
         OldPdb.do_frame(self, arg)
 
     def new_do_quit(self, arg):
+        """
+
+        Parameters
+        ----------
+        arg :
+            
+
+        Returns
+        -------
+
+        """
 
         if hasattr(self, 'old_all_completions'):
             self.shell.Completer.all_completions=self.old_all_completions
@@ -334,11 +495,32 @@
 
     def new_do_restart(self, arg):
         """Restart command. In the context of ipython this is exactly the same
-        thing as 'quit'."""
+        thing as 'quit'.
+
+        Parameters
+        ----------
+        arg :
+            
+
+        Returns
+        -------
+
+        """
         self.msg("Restart doesn't make sense here. Using 'quit' instead.")
         return self.do_quit(arg)
 
     def print_stack_trace(self, context=None):
+        """
+
+        Parameters
+        ----------
+        context :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         Colors = self.color_scheme_table.active_colors
         ColorsNormal = Colors.Normal
         if context is None:
@@ -370,6 +552,21 @@
 
     def print_stack_entry(self, frame_lineno, prompt_prefix='\n-> ',
                           context=None):
+        """
+
+        Parameters
+        ----------
+        frame_lineno :
+            
+        prompt_prefix :
+             (Default value = '\n-> ')
+        context :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if context is None:
             context = self.context
         try:
@@ -387,6 +584,21 @@
         # vds: <<
 
     def format_stack_entry(self, frame_lineno, lprefix=': ', context=None):
+        """
+
+        Parameters
+        ----------
+        frame_lineno :
+            
+        lprefix :
+             (Default value = ': ')
+        context :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if context is None:
             context = self.context
         try:
@@ -493,7 +705,21 @@
 
     def print_list_lines(self, filename, first, last):
         """The printing (as opposed to the parsing part of a 'list'
-        command."""
+        command.
+
+        Parameters
+        ----------
+        filename :
+            
+        first :
+            
+        last :
+            
+
+        Returns
+        -------
+
+        """
         try:
             Colors = self.color_scheme_table.active_colors
             ColorsNormal = Colors.Normal
@@ -522,9 +748,17 @@
             pass
 
     def do_skip_hidden(self, arg):
-        """
-        Change whether or not we should skip frames with the
+        """Change whether or not we should skip frames with the
         __tracebackhide__ attribute.
+
+        Parameters
+        ----------
+        arg :
+            
+
+        Returns
+        -------
+
         """
         if arg.strip().lower() in ("true", "yes"):
             self.skip_hidden = True
@@ -533,6 +767,15 @@
 
     def do_list(self, arg):
         """Print lines of code from the current stack frame
+
+        Parameters
+        ----------
+        arg :
+            
+
+        Returns
+        -------
+
         """
         self.lastcmd = 'list'
         last = None
@@ -568,6 +811,17 @@
     do_l = do_list
 
     def getsourcelines(self, obj):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+
+        Returns
+        -------
+
+        """
         lines, lineno = inspect.findsource(obj)
         if inspect.isframe(obj) and obj.f_globals is obj.f_locals:
             # must be a module frame: do not try to cut a block out of it
@@ -578,8 +832,17 @@
 
     def do_longlist(self, arg):
         """Print lines of code from the current stack frame.
-
+        
         Shows more lines than 'list' does.
+
+        Parameters
+        ----------
+        arg :
+            
+
+        Returns
+        -------
+
         """
         self.lastcmd = 'longlist'
         try:
@@ -596,6 +859,15 @@
         Enter a recursive debugger that steps through the code
         argument (which is an arbitrary expression or statement to be
         executed in the current environment).
+
+        Parameters
+        ----------
+        arg :
+            
+
+        Returns
+        -------
+
         """
         trace_function = sys.gettrace()
         sys.settrace(None)
@@ -613,8 +885,18 @@
 
     def do_pdef(self, arg):
         """Print the call signature for any callable object.
-
-        The debugger interface to %pdef"""
+        
+        The debugger interface to %pdef
+
+        Parameters
+        ----------
+        arg :
+            
+
+        Returns
+        -------
+
+        """
         namespaces = [
             ("Locals", self.curframe_locals),
             ("Globals", self.curframe.f_globals),
@@ -623,8 +905,18 @@
 
     def do_pdoc(self, arg):
         """Print the docstring for an object.
-
-        The debugger interface to %pdoc."""
+        
+        The debugger interface to %pdoc.
+
+        Parameters
+        ----------
+        arg :
+            
+
+        Returns
+        -------
+
+        """
         namespaces = [
             ("Locals", self.curframe_locals),
             ("Globals", self.curframe.f_globals),
@@ -633,8 +925,17 @@
 
     def do_pfile(self, arg):
         """Print (or run through pager) the file where an object is defined.
-
+        
         The debugger interface to %pfile.
+
+        Parameters
+        ----------
+        arg :
+            
+
+        Returns
+        -------
+
         """
         namespaces = [
             ("Locals", self.curframe_locals),
@@ -644,8 +945,18 @@
 
     def do_pinfo(self, arg):
         """Provide detailed information about an object.
-
-        The debugger interface to %pinfo, i.e., obj?."""
+        
+        The debugger interface to %pinfo, i.e., obj?.
+
+        Parameters
+        ----------
+        arg :
+            
+
+        Returns
+        -------
+
+        """
         namespaces = [
             ("Locals", self.curframe_locals),
             ("Globals", self.curframe.f_globals),
@@ -654,8 +965,18 @@
 
     def do_pinfo2(self, arg):
         """Provide extra detailed information about an object.
-
-        The debugger interface to %pinfo2, i.e., obj??."""
+        
+        The debugger interface to %pinfo2, i.e., obj??.
+
+        Parameters
+        ----------
+        arg :
+            
+
+        Returns
+        -------
+
+        """
         namespaces = [
             ("Locals", self.curframe_locals),
             ("Globals", self.curframe.f_globals),
@@ -663,7 +984,17 @@
         self.shell.find_line_magic("pinfo2")(arg, namespaces=namespaces)
 
     def do_psource(self, arg):
-        """Print (or run through pager) the source code for an object."""
+        """Print (or run through pager) the source code for an object.
+
+        Parameters
+        ----------
+        arg :
+            
+
+        Returns
+        -------
+
+        """
         namespaces = [
             ("Locals", self.curframe_locals),
             ("Globals", self.curframe.f_globals),
@@ -675,9 +1006,19 @@
         Print a stack trace, with the most recent frame at the bottom.
         An arrow indicates the "current frame", which determines the
         context of most commands. 'bt' is an alias for this command.
-
+        
         Take a number as argument as an (optional) number of context line to
-        print"""
+        print
+
+        Parameters
+        ----------
+        arg :
+            
+
+        Returns
+        -------
+
+        """
         if arg:
             try:
                 context = int(arg)
@@ -691,7 +1032,17 @@
     do_w = do_where
 
     def stop_here(self, frame):
-        """Check if pdb should stop here"""
+        """Check if pdb should stop here
+
+        Parameters
+        ----------
+        frame :
+            
+
+        Returns
+        -------
+
+        """
         if not super().stop_here(frame):
             return False
         if self.skip_hidden and frame.f_locals.get("__tracebackhide__", False):
@@ -707,8 +1058,17 @@
         """u(p) [count]
         Move the current frame count (default one) levels up in the
         stack trace (to an older frame).
-
+        
         Will skip hidden frames.
+
+        Parameters
+        ----------
+        arg :
+            
+
+        Returns
+        -------
+
         """
         ## modified version of upstream that skips
         # frames with __tracebackide__
@@ -753,8 +1113,17 @@
         """d(own) [count]
         Move the current frame count (default one) levels down in the
         stack trace (to a newer frame).
-
+        
         Will skip hidden frames.
+
+        Parameters
+        ----------
+        arg :
+            
+
+        Returns
+        -------
+
         """
         if self.curindex + 1 == len(self.stack):
             self.error("Newest frame")
@@ -811,6 +1180,7 @@
             raise
 
     def _cmdloop(self):
+        """ """
         while True:
             try:
                 # keyboard interrupts allow for an easy way to cancel
@@ -825,9 +1195,17 @@
 
 
 def set_trace(frame=None):
-    """
-    Start debugging from `frame`.
-
+    """Start debugging from `frame`.
+    
     If frame is not specified, debugging starts from caller's frame.
+
+    Parameters
+    ----------
+    frame :
+         (Default value = None)
+
+    Returns
+    -------
+
     """
     Pdb().set_trace(frame or sys._getframe().f_back)
