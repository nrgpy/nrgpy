# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/testpath/env.py
+++ b/..//venv/lib/python3.8/site-packages/testpath/env.py
@@ -9,6 +9,15 @@
     
         with temporary_env({'PATH': my_path}):
             ...
+
+    Parameters
+    ----------
+    newenv :
+        
+
+    Returns
+    -------
+
     """
     orig_env = os.environ.copy()
     os.environ.clear()
@@ -36,8 +45,30 @@
     environment to its state when the context was entered. If *snapshot* is
     False, it will restore only the specific variables it modified, leaving
     any changes made to other environment variables in the context.
+
+    Parameters
+    ----------
+    changes :
+        
+    snapshot :
+         (Default value = True)
+
+    Returns
+    -------
+
     """
     def update_del(changes):
+        """
+
+        Parameters
+        ----------
+        changes :
+            
+
+        Returns
+        -------
+
+        """
         for k, v in changes.items():
             if v is None:
                 os.environ.pop(k, None)
@@ -64,19 +95,27 @@
 
 def make_env_restorer():
     """Snapshot the current environment, return a function to restore that.
-
+    
     This is intended to produce cleanup functions for tests. For example,
     using the :class:`unittest.TestCase` API::
-
+    
         def setUp(self):
             self.addCleanup(testpath.make_env_restorer())
-
+    
     Any changes a test makes to the environment variables will be wiped out
     before the next test is run.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     orig_env = os.environ.copy()
 
     def restore():
+        """ """
         os.environ.clear()
         os.environ.update(orig_env)
 
