# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_records.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_records.py
@@ -13,7 +13,9 @@
 
 
 class TestFromrecords:
+    """ """
     def test_fromrecords(self):
+        """ """
         r = np.rec.fromrecords([[456, 'dbe', 1.2], [2, 'de', 1.3]],
                             names='col1,col2,col3')
         assert_equal(r[0].item(), (456, 'dbe', 1.2))
@@ -23,12 +25,13 @@
         assert_equal(r['col3'].dtype.kind, 'f')
 
     def test_fromrecords_0len(self):
-        """ Verify fromrecords works with a 0-length input """
+        """Verify fromrecords works with a 0-length input"""
         dtype = [('a', float), ('b', float)]
         r = np.rec.fromrecords([], dtype=dtype)
         assert_equal(r.shape, (0,))
 
     def test_fromrecords_2d(self):
+        """ """
         data = [
             [(1, 2), (3, 4), (5, 6)],
             [(6, 5), (4, 3), (2, 1)]
@@ -49,20 +52,24 @@
         assert_equal(r1, r2)
 
     def test_method_array(self):
+        """ """
         r = np.rec.array(b'abcdefg' * 100, formats='i2,a3,i4', shape=3, byteorder='big')
         assert_equal(r[1].item(), (25444, b'efg', 1633837924))
 
     def test_method_array2(self):
+        """ """
         r = np.rec.array([(1, 11, 'a'), (2, 22, 'b'), (3, 33, 'c'), (4, 44, 'd'), (5, 55, 'ex'),
                      (6, 66, 'f'), (7, 77, 'g')], formats='u1,f4,a1')
         assert_equal(r[1].item(), (2, 22.0, b'b'))
 
     def test_recarray_slices(self):
+        """ """
         r = np.rec.array([(1, 11, 'a'), (2, 22, 'b'), (3, 33, 'c'), (4, 44, 'd'), (5, 55, 'ex'),
                      (6, 66, 'f'), (7, 77, 'g')], formats='u1,f4,a1')
         assert_equal(r[1::2][1].item(), (4, 44.0, b'd'))
 
     def test_recarray_fromarrays(self):
+        """ """
         x1 = np.array([1, 2, 3, 4])
         x2 = np.array(['a', 'dd', 'xyz', '12'])
         x3 = np.array([1.1, 2, 3, 4])
@@ -72,6 +79,7 @@
         assert_equal(r.a, np.array([1, 2, 3, 4]))
 
     def test_recarray_fromfile(self):
+        """ """
         data_dir = path.join(path.dirname(__file__), 'data')
         filename = path.join(data_dir, 'recarray_from_file.fits')
         fd = open(filename, 'rb')
@@ -83,6 +91,7 @@
         assert_equal(r1, r2)
 
     def test_recarray_from_obj(self):
+        """ """
         count = 10
         a = np.zeros(count, dtype='O')
         b = np.zeros(count, dtype='f8')
@@ -97,6 +106,7 @@
             assert_((mine.data2[i] == 0.0))
 
     def test_recarray_repr(self):
+        """ """
         a = np.array([(1, 0.1), (2, 0.2)],
                      dtype=[('foo', '<i4'), ('bar', '<f8')])
         a = np.rec.array(a)
@@ -118,6 +128,7 @@
         assert_(repr(a).find('dtype=int32') != -1)
 
     def test_0d_recarray_repr(self):
+        """ """
         arr_0d = np.rec.array((1, 2.0, '2003'), dtype='<i4,<f8,<M8[Y]')
         assert_equal(repr(arr_0d), textwrap.dedent("""\
             rec.array((1, 2., '2003'),
@@ -133,6 +144,7 @@
             np.set_printoptions(legacy=False)
 
     def test_recarray_from_repr(self):
+        """ """
         a = np.array([(1,'ABC'), (2, "DEF")],
                      dtype=[('foo', int), ('bar', 'S4')])
         recordarr = np.rec.array(a)
@@ -156,6 +168,7 @@
         assert_equal(recordview, recordview_r)
 
     def test_recarray_views(self):
+        """ """
         a = np.array([(1,'ABC'), (2, "DEF")],
                      dtype=[('foo', int), ('bar', 'S4')])
         b = np.array([1,2,3,4,5], dtype=np.int64)
@@ -186,6 +199,7 @@
 
         #and that it preserves subclasses (gh-6949)
         class C(np.recarray):
+            """ """
             pass
 
         c = r.view(C)
@@ -218,6 +232,7 @@
             assert_equal(type(arr2), type(arr))
 
     def test_recarray_from_names(self):
+        """ """
         ra = np.rec.array([
             (1, 'abc', 3.7000002861022949, 0),
             (2, 'xy', 6.6999998092651367, 1),
@@ -234,6 +249,7 @@
             assert_(ra[k].item() == pa[k].item())
 
     def test_recarray_conflict_fields(self):
+        """ """
         ra = np.rec.array([(1, 'abc', 2.3), (2, 'xyz', 4.2),
                         (3, 'wrs', 1.3)],
                        names='field, shape, mean')
@@ -249,6 +265,7 @@
         assert_(isinstance(ra.field, collections.abc.Callable))
 
     def test_fromrecords_with_explicit_dtype(self):
+        """ """
         a = np.rec.fromrecords([(1, 'a'), (2, 'bbb')],
                                 dtype=[('a', int), ('b', object)])
         assert_equal(a.a, [1, 2])
@@ -264,6 +281,7 @@
         assert_equal(a[-1].b, 'bbb')
 
     def test_recarray_stringtypes(self):
+        """ """
         # Issue #3993
         a = np.array([('abc ', 1), ('abc', 2)],
                      dtype=[('foo', 'S4'), ('bar', int)])
@@ -271,6 +289,7 @@
         assert_equal(a.foo[0] == a.foo[1], False)
 
     def test_recarray_returntypes(self):
+        """ """
         qux_fields = {'C': (np.dtype('S5'), 0), 'D': (np.dtype('S5'), 6)}
         a = np.rec.array([('abc ', (1,1), 1, ('abcde', 'fgehi')),
                           ('abc', (2,3), 1, ('abcde', 'jklmn'))],
@@ -299,6 +318,7 @@
         assert_equal(a[0]['qux']['D'], b'fgehi')
 
     def test_zero_width_strings(self):
+        """ """
         # Test for #6430, based on the test case from #1901
 
         cols = [['test'] * 3, [''] * 3]
@@ -314,8 +334,10 @@
 
 
 class TestPathUsage:
+    """ """
     # Test that pathlib.Path can be used
     def test_tofile_fromfile(self):
+        """ """
         with temppath(suffix='.bin') as path:
             path = Path(path)
             np.random.seed(123)
@@ -330,33 +352,50 @@
 
 
 class TestRecord:
+    """ """
     def setup(self):
+        """ """
         self.data = np.rec.fromrecords([(1, 2, 3), (4, 5, 6)],
                             dtype=[("col1", "<i4"),
                                    ("col2", "<i4"),
                                    ("col3", "<i4")])
 
     def test_assignment1(self):
+        """ """
         a = self.data
         assert_equal(a.col1[0], 1)
         a[0].col1 = 0
         assert_equal(a.col1[0], 0)
 
     def test_assignment2(self):
+        """ """
         a = self.data
         assert_equal(a.col1[0], 1)
         a.col1[0] = 0
         assert_equal(a.col1[0], 0)
 
     def test_invalid_assignment(self):
+        """ """
         a = self.data
 
         def assign_invalid_column(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             x[0].col5 = 1
 
         assert_raises(AttributeError, assign_invalid_column, a)
 
     def test_nonwriteable_setfield(self):
+        """ """
         # gh-8171
         r = np.rec.array([(0,), (1,)], dtype=[('f', 'i4')])
         r.flags.writeable = False
@@ -366,6 +405,7 @@
             r.setfield([2,3], *r.dtype.fields['f'])
 
     def test_out_of_order_fields(self):
+        """ """
         # names in the same order, padding added to descr
         x = self.data[['col1', 'col2']]
         assert_equal(x.dtype.names, ('col1', 'col2'))
@@ -379,6 +419,7 @@
         assert_raises(ValueError, lambda: y.dtype.descr)
 
     def test_pickle_1(self):
+        """ """
         # Issue #1529
         a = np.array([(1, [])], dtype=[('a', np.int32), ('b', np.int32, 0)])
         for proto in range(2, pickle.HIGHEST_PROTOCOL + 1):
@@ -387,6 +428,7 @@
                                                          protocol=proto)))
 
     def test_pickle_2(self):
+        """ """
         a = self.data
         for proto in range(2, pickle.HIGHEST_PROTOCOL + 1):
             assert_equal(a, pickle.loads(pickle.dumps(a, protocol=proto)))
@@ -394,6 +436,7 @@
                                                          protocol=proto)))
 
     def test_pickle_3(self):
+        """ """
         # Issue #7140
         a = self.data
         for proto in range(2, pickle.HIGHEST_PROTOCOL + 1):
@@ -404,6 +447,7 @@
             assert_(pa.flags.aligned)
 
     def test_pickle_void(self):
+        """ """
         # issue gh-13593
         dt = np.dtype([('obj', 'O'), ('int', 'i')])
         a = np.empty(1, dtype=dt)
@@ -420,6 +464,7 @@
         assert_raises(TypeError, ctor, dtype, 13)
 
     def test_objview_record(self):
+        """ """
         # https://github.com/numpy/numpy/issues/2599
         dt = np.dtype([('foo', 'i8'), ('bar', 'O')])
         r = np.zeros((1,3), dtype=dt).view(np.recarray)
@@ -430,17 +475,20 @@
         ra[['x','y']]  # TypeError?
 
     def test_record_scalar_setitem(self):
+        """ """
         # https://github.com/numpy/numpy/issues/3561
         rec = np.recarray(1, dtype=[('x', float, 5)])
         rec[0].x = 1
         assert_equal(rec[0].x, np.ones(5))
 
     def test_missing_field(self):
+        """ """
         # https://github.com/numpy/numpy/issues/4806
         arr = np.zeros((3,), dtype=[('x', int), ('y', int)])
         assert_raises(KeyError, lambda: arr[['nofield']])
 
     def test_fromarrays_nested_structured_arrays(self):
+        """ """
         arrays = [
             np.arange(10),
             np.ones(10, dtype=[('a', '<u2'), ('b', '<f4')]),
@@ -449,6 +497,17 @@
 
     @pytest.mark.parametrize('nfields', [0, 1, 2])
     def test_assign_dtype_attribute(self, nfields):
+        """
+
+        Parameters
+        ----------
+        nfields :
+            
+
+        Returns
+        -------
+
+        """
         dt = np.dtype([('a', np.uint8), ('b', np.uint8), ('c', np.uint8)][:nfields])
         data = np.zeros(3, dt).view(np.recarray)
 
@@ -462,7 +521,17 @@
 
     @pytest.mark.parametrize('nfields', [0, 1, 2])
     def test_nested_fields_are_records(self, nfields):
-        """ Test that nested structured types are treated as records too """
+        """Test that nested structured types are treated as records too
+
+        Parameters
+        ----------
+        nfields :
+            
+
+        Returns
+        -------
+
+        """
         dt = np.dtype([('a', np.uint8), ('b', np.uint8), ('c', np.uint8)][:nfields])
         dt_outer = np.dtype([('inner', dt)])
 
@@ -475,7 +544,7 @@
         assert isinstance(data0['inner'], np.record)
 
     def test_nested_dtype_padding(self):
-        """ test that trailing padding is preserved """
+        """test that trailing padding is preserved"""
         # construct a dtype with padding at the end
         dt = np.dtype([('a', np.uint8), ('b', np.uint8), ('c', np.uint8)])
         dt_padded_end = dt[['a', 'b']]
@@ -491,6 +560,7 @@
 
 
 def test_find_duplicate():
+    """ """
     l1 = [1, 2, 3, 4, 5, 6]
     assert_(np.rec.find_duplicate(l1) == [])
 
