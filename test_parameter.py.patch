# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/f2py/tests/test_parameter.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/f2py/tests/test_parameter.py
@@ -8,10 +8,22 @@
 
 
 def _path(*a):
+    """
+
+    Parameters
+    ----------
+    *a :
+        
+
+    Returns
+    -------
+
+    """
     return os.path.join(*((os.path.dirname(__file__),) + a))
 
 
 class TestParameters(util.F2PyTest):
+    """ """
     # Check that intent(in out) translates as intent(inout)
     sources = [_path('src', 'parameter', 'constant_real.f90'),
                _path('src', 'parameter', 'constant_integer.f90'),
@@ -22,6 +34,7 @@
 
     @pytest.mark.slow
     def test_constant_real_single(self):
+        """ """
         # non-contiguous should raise error
         x = np.arange(6, dtype=np.float32)[::2]
         assert_raises(ValueError, self.module.foo_single, x)
@@ -33,6 +46,7 @@
 
     @pytest.mark.slow
     def test_constant_real_double(self):
+        """ """
         # non-contiguous should raise error
         x = np.arange(6, dtype=np.float64)[::2]
         assert_raises(ValueError, self.module.foo_double, x)
@@ -44,6 +58,7 @@
 
     @pytest.mark.slow
     def test_constant_compound_int(self):
+        """ """
         # non-contiguous should raise error
         x = np.arange(6, dtype=np.int32)[::2]
         assert_raises(ValueError, self.module.foo_compound_int, x)
@@ -55,6 +70,7 @@
 
     @pytest.mark.slow
     def test_constant_non_compound_int(self):
+        """ """
         # check values
         x = np.arange(4, dtype=np.int32)
         self.module.foo_non_compound_int(x)
@@ -62,6 +78,7 @@
 
     @pytest.mark.slow
     def test_constant_integer_int(self):
+        """ """
         # non-contiguous should raise error
         x = np.arange(6, dtype=np.int32)[::2]
         assert_raises(ValueError, self.module.foo_int, x)
@@ -73,6 +90,7 @@
 
     @pytest.mark.slow
     def test_constant_integer_long(self):
+        """ """
         # non-contiguous should raise error
         x = np.arange(6, dtype=np.int64)[::2]
         assert_raises(ValueError, self.module.foo_long, x)
@@ -84,6 +102,7 @@
 
     @pytest.mark.slow
     def test_constant_both(self):
+        """ """
         # non-contiguous should raise error
         x = np.arange(6, dtype=np.float64)[::2]
         assert_raises(ValueError, self.module.foo, x)
@@ -95,6 +114,7 @@
 
     @pytest.mark.slow
     def test_constant_no(self):
+        """ """
         # non-contiguous should raise error
         x = np.arange(6, dtype=np.float64)[::2]
         assert_raises(ValueError, self.module.foo_no, x)
@@ -106,6 +126,7 @@
 
     @pytest.mark.slow
     def test_constant_sum(self):
+        """ """
         # non-contiguous should raise error
         x = np.arange(6, dtype=np.float64)[::2]
         assert_raises(ValueError, self.module.foo_sum, x)
