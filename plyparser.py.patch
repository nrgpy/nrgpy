# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pycparser/plyparser.py
+++ b/..//venv/lib/python3.8/site-packages/pycparser/plyparser.py
@@ -11,10 +11,17 @@
 import warnings
 
 class Coord(object):
-    """ Coordinates of a syntactic element. Consists of:
+    """Coordinates of a syntactic element. Consists of:
             - File name
             - Line number
             - (optional) column number, for the Lexer
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     __slots__ = ('file', 'line', 'column', '__weakref__')
     def __init__(self, file, line, column=None):
@@ -32,14 +39,35 @@
 
 
 class PLYParser(object):
+    """ """
     def _create_opt_rule(self, rulename):
-        """ Given a rule name, creates an optional ply.yacc rule
+        """Given a rule name, creates an optional ply.yacc rule
             for it. The name of the optional rule is
             <rulename>_opt
+
+        Parameters
+        ----------
+        rulename :
+            
+
+        Returns
+        -------
+
         """
         optname = rulename + '_opt'
 
         def optrule(self, p):
+            """
+
+            Parameters
+            ----------
+            p :
+                
+
+            Returns
+            -------
+
+            """
             p[0] = p[1]
 
         optrule.__doc__ = '%s : empty\n| %s' % (optname, rulename)
@@ -47,15 +75,39 @@
         setattr(self.__class__, optrule.__name__, optrule)
 
     def _coord(self, lineno, column=None):
+        """
+
+        Parameters
+        ----------
+        lineno :
+            
+        column :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         return Coord(
                 file=self.clex.filename,
                 line=lineno,
                 column=column)
 
     def _token_coord(self, p, token_idx):
-        """ Returns the coordinates for the YaccProduction objet 'p' indexed
+        """Returns the coordinates for the YaccProduction objet 'p' indexed
             with 'token_idx'. The coordinate includes the 'lineno' and
             'column'. Both follow the lex semantic, starting from 1.
+
+        Parameters
+        ----------
+        p :
+            
+        token_idx :
+            
+
+        Returns
+        -------
+
         """
         last_cr = p.lexer.lexer.lexdata.rfind('\n', 0, p.lexpos(token_idx))
         if last_cr < 0:
@@ -64,29 +116,69 @@
         return self._coord(p.lineno(token_idx), column)
 
     def _parse_error(self, msg, coord):
+        """
+
+        Parameters
+        ----------
+        msg :
+            
+        coord :
+            
+
+        Returns
+        -------
+
+        """
         raise ParseError("%s: %s" % (coord, msg))
 
 
 def parameterized(*params):
-    """ Decorator to create parameterized rules.
-
+    """Decorator to create parameterized rules.
+    
     Parameterized rule methods must be named starting with 'p_' and contain
     'xxx', and their docstrings may contain 'xxx' and 'yyy'. These will be
     replaced by the given parameter tuples. For example, ``p_xxx_rule()`` with
     docstring 'xxx_rule  : yyy' when decorated with
     ``@parameterized(('id', 'ID'))`` produces ``p_id_rule()`` with the docstring
     'id_rule  : ID'. Using multiple tuples produces multiple rules.
+
+    Parameters
+    ----------
+    *params :
+        
+
+    Returns
+    -------
+
     """
     def decorate(rule_func):
+        """
+
+        Parameters
+        ----------
+        rule_func :
+            
+
+        Returns
+        -------
+
+        """
         rule_func._params = params
         return rule_func
     return decorate
 
 
 def template(cls):
-    """ Class decorator to generate rules from parameterized rule templates.
-
+    """Class decorator to generate rules from parameterized rule templates.
+    
     See `parameterized` for more information on parameterized rules.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     issued_nodoc_warning = False
     for attr_name in dir(cls):
@@ -114,15 +206,35 @@
 
 
 def _create_param_rules(cls, func):
-    """ Create ply.yacc rules based on a parameterized rule function
-
+    """Create ply.yacc rules based on a parameterized rule function
+    
     Generates new methods (one per each pair of parameters) based on the
     template rule function `func`, and attaches them to `cls`. The rule
     function's parameters must be accessible via its `_params` attribute.
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
     """
     for xxx, yyy in func._params:
         # Use the template method's body for each new method
         def param_rule(self, p):
+            """
+
+            Parameters
+            ----------
+            p :
+                
+
+            Returns
+            -------
+
+            """
             func(self, p)
 
         # Substitute in the params for the grammar rule and function name
