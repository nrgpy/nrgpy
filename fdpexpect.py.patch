# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pexpect/fdpexpect.py
+++ b/..//venv/lib/python3.8/site-packages/pexpect/fdpexpect.py
@@ -29,9 +29,17 @@
 __all__ = ['fdspawn']
 
 class fdspawn(SpawnBase):
-    '''This is like pexpect.spawn but allows you to supply your own open file
+    """This is like pexpect.spawn but allows you to supply your own open file
     descriptor. For example, you could use it to read through a file looking
-    for patterns, or to control a modem or serial device. '''
+    for patterns, or to control a modem or serial device.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
 
     def __init__ (self, fd, args=None, timeout=30, maxread=2000, searchwindowsize=None,
                   logfile=None, encoding=None, codec_errors='strict', use_poll=False):
@@ -62,9 +70,16 @@
 
     def close (self):
         """Close the file descriptor.
-
+        
         Calling this method a second time does nothing, but if the file
         descriptor was closed elsewhere, :class:`OSError` will be raised.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         if self.child_fd == -1:
             return
@@ -75,8 +90,16 @@
         self.closed = True
 
     def isalive (self):
-        '''This checks if the file descriptor is still valid. If :func:`os.fstat`
-        does not raise an exception then we assume it is alive. '''
+        """This checks if the file descriptor is still valid. If :func:`os.fstat`
+        does not raise an exception then we assume it is alive.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
 
         if self.child_fd == -1:
             return False
@@ -87,13 +110,34 @@
             return False
 
     def terminate (self, force=False):  # pragma: no cover
-        '''Deprecated and invalid. Just raises an exception.'''
+        """Deprecated and invalid. Just raises an exception.
+
+        Parameters
+        ----------
+        force :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         raise ExceptionPexpect('This method is not valid for file descriptors.')
 
     # These four methods are left around for backwards compatibility, but not
     # documented as part of fdpexpect. You're encouraged to use os.write
     # directly.
     def send(self, s):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+
+        Returns
+        -------
+
+        """
         "Write to fd, return number of bytes written"
         s = self._coerce_send_string(s)
         self._log(s, 'send')
@@ -102,34 +146,79 @@
         return os.write(self.child_fd, b)
 
     def sendline(self, s):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+
+        Returns
+        -------
+
+        """
         "Write to fd with trailing newline, return number of bytes written"
         s = self._coerce_send_string(s)
         return self.send(s + self.linesep)
 
     def write(self, s):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+
+        Returns
+        -------
+
+        """
         "Write to fd, return None"
         self.send(s)
 
     def writelines(self, sequence):
+        """
+
+        Parameters
+        ----------
+        sequence :
+            
+
+        Returns
+        -------
+
+        """
         "Call self.write() for each item in sequence"
         for s in sequence:
             self.write(s)
 
     def read_nonblocking(self, size=1, timeout=-1):
-        """
-        Read from the file descriptor and return the result as a string.
-
+        """Read from the file descriptor and return the result as a string.
+        
         The read_nonblocking method of :class:`SpawnBase` assumes that a call
         to os.read will not block (timeout parameter is ignored). This is not
         the case for POSIX file-like objects such as sockets and serial ports.
-
+        
         Use :func:`select.select`, timeout is implemented conditionally for
         POSIX systems.
 
-        :param int size: Read at most *size* bytes.
-        :param int timeout: Wait timeout seconds for file descriptor to be
+        Parameters
+        ----------
+        int :
+            size: Read at most *size* bytes.
+        int :
+            timeout: Wait timeout seconds for file descriptor to be
             ready to read. When -1 (default), use self.timeout. When 0, poll.
-        :return: String containing the bytes read
+        size :
+             (Default value = 1)
+        timeout :
+             (Default value = -1)
+
+        Returns
+        -------
+        type
+            String containing the bytes read
+
         """
         if os.name == 'posix':
             if timeout == -1:
