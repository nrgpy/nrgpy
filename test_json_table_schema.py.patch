# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/json/test_json_table_schema.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/json/test_json_table_schema.py
@@ -22,7 +22,19 @@
 
 
 class TestBuildSchema:
+    """ """
     def setup_method(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         self.df = DataFrame(
             {
                 "A": [1, 2, 3, 4],
@@ -34,6 +46,7 @@
         )
 
     def test_build_table_schema(self):
+        """ """
         result = build_table_schema(self.df, version=False)
         expected = {
             "fields": [
@@ -50,6 +63,7 @@
         assert "pandas_version" in result
 
     def test_series(self):
+        """ """
         s = pd.Series([1, 2, 3], name="foo")
         result = build_table_schema(s, version=False)
         expected = {
@@ -64,6 +78,7 @@
         assert "pandas_version" in result
 
     def test_series_unnamed(self):
+        """ """
         result = build_table_schema(pd.Series([1, 2, 3]), version=False)
         expected = {
             "fields": [
@@ -75,6 +90,7 @@
         assert result == expected
 
     def test_multiindex(self):
+        """ """
         df = self.df.copy()
         idx = pd.MultiIndex.from_product([("a", "b"), (1, 2)])
         df.index = idx
@@ -101,13 +117,36 @@
 
 
 class TestTableSchemaType:
+    """ """
     @pytest.mark.parametrize("int_type", [int, np.int16, np.int32, np.int64])
     def test_as_json_table_type_int_data(self, int_type):
+        """
+
+        Parameters
+        ----------
+        int_type :
+            
+
+        Returns
+        -------
+
+        """
         int_data = [1, 2, 3]
         assert as_json_table_type(np.array(int_data, dtype=int_type).dtype) == "integer"
 
     @pytest.mark.parametrize("float_type", [float, np.float16, np.float32, np.float64])
     def test_as_json_table_type_float_data(self, float_type):
+        """
+
+        Parameters
+        ----------
+        float_type :
+            
+
+        Returns
+        -------
+
+        """
         float_data = [1.0, 2.0, 3.0]
         assert (
             as_json_table_type(np.array(float_data, dtype=float_type).dtype) == "number"
@@ -115,6 +154,17 @@
 
     @pytest.mark.parametrize("bool_type", [bool, np.bool_])
     def test_as_json_table_type_bool_data(self, bool_type):
+        """
+
+        Parameters
+        ----------
+        bool_type :
+            
+
+        Returns
+        -------
+
+        """
         bool_data = [True, False]
         assert (
             as_json_table_type(np.array(bool_data, dtype=bool_type).dtype) == "boolean"
@@ -131,10 +181,32 @@
         ],
     )
     def test_as_json_table_type_date_data(self, date_data):
+        """
+
+        Parameters
+        ----------
+        date_data :
+            
+
+        Returns
+        -------
+
+        """
         assert as_json_table_type(date_data.dtype) == "datetime"
 
     @pytest.mark.parametrize("str_data", [pd.Series(["a", "b"]), pd.Index(["a", "b"])])
     def test_as_json_table_type_string_data(self, str_data):
+        """
+
+        Parameters
+        ----------
+        str_data :
+            
+
+        Returns
+        -------
+
+        """
         assert as_json_table_type(str_data.dtype) == "string"
 
     @pytest.mark.parametrize(
@@ -148,6 +220,17 @@
         ],
     )
     def test_as_json_table_type_categorical_data(self, cat_data):
+        """
+
+        Parameters
+        ----------
+        cat_data :
+            
+
+        Returns
+        -------
+
+        """
         assert as_json_table_type(cat_data.dtype) == "any"
 
     # ------
@@ -155,14 +238,47 @@
     # ------
     @pytest.mark.parametrize("int_dtype", [int, np.int16, np.int32, np.int64])
     def test_as_json_table_type_int_dtypes(self, int_dtype):
+        """
+
+        Parameters
+        ----------
+        int_dtype :
+            
+
+        Returns
+        -------
+
+        """
         assert as_json_table_type(int_dtype) == "integer"
 
     @pytest.mark.parametrize("float_dtype", [float, np.float16, np.float32, np.float64])
     def test_as_json_table_type_float_dtypes(self, float_dtype):
+        """
+
+        Parameters
+        ----------
+        float_dtype :
+            
+
+        Returns
+        -------
+
+        """
         assert as_json_table_type(float_dtype) == "number"
 
     @pytest.mark.parametrize("bool_dtype", [bool, np.bool_])
     def test_as_json_table_type_bool_dtypes(self, bool_dtype):
+        """
+
+        Parameters
+        ----------
+        bool_dtype :
+            
+
+        Returns
+        -------
+
+        """
         assert as_json_table_type(bool_dtype) == "boolean"
 
     @pytest.mark.parametrize(
@@ -175,18 +291,52 @@
         ],
     )
     def test_as_json_table_type_date_dtypes(self, date_dtype):
+        """
+
+        Parameters
+        ----------
+        date_dtype :
+            
+
+        Returns
+        -------
+
+        """
         # TODO: datedate.date? datetime.time?
         assert as_json_table_type(date_dtype) == "datetime"
 
     @pytest.mark.parametrize("td_dtype", [np.timedelta64, np.dtype("<m8[ns]")])
     def test_as_json_table_type_timedelta_dtypes(self, td_dtype):
+        """
+
+        Parameters
+        ----------
+        td_dtype :
+            
+
+        Returns
+        -------
+
+        """
         assert as_json_table_type(td_dtype) == "duration"
 
     @pytest.mark.parametrize("str_dtype", [object])  # TODO
     def test_as_json_table_type_string_dtypes(self, str_dtype):
+        """
+
+        Parameters
+        ----------
+        str_dtype :
+            
+
+        Returns
+        -------
+
+        """
         assert as_json_table_type(str_dtype) == "string"
 
     def test_as_json_table_type_categorical_dtypes(self):
+        """ """
         # TODO: I think before is_categorical_dtype(Categorical)
         # returned True, but now it's False. Figure out why or
         # if it matters
@@ -195,7 +345,19 @@
 
 
 class TestTableOrient:
+    """ """
     def setup_method(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         self.df = DataFrame(
             {
                 "A": [1, 2, 3, 4],
@@ -211,6 +373,7 @@
         )
 
     def test_build_series(self):
+        """ """
         s = pd.Series([1, 2], name="a")
         s.index.name = "id"
         result = s.to_json(orient="table", date_format="iso")
@@ -239,6 +402,7 @@
         assert result == expected
 
     def test_read_json_from_to_json_results(self):
+        """ """
         # GH32383
         df = pd.DataFrame(
             {
@@ -257,6 +421,7 @@
         tm.assert_frame_equal(result2, df)
 
     def test_to_json(self):
+        """ """
         df = self.df.copy()
         df.index.name = "idx"
         result = df.to_json(orient="table", date_format="iso")
@@ -347,6 +512,7 @@
         assert result == expected
 
     def test_to_json_float_index(self):
+        """ """
         data = pd.Series(1, index=[1.0, 2.0])
         result = data.to_json(orient="table", date_format="iso")
         result = json.loads(result, object_pairs_hook=OrderedDict)
@@ -377,6 +543,7 @@
         assert result == expected
 
     def test_to_json_period_index(self):
+        """ """
         idx = pd.period_range("2016", freq="Q-JAN", periods=2)
         data = pd.Series(1, idx)
         result = data.to_json(orient="table", date_format="iso")
@@ -398,6 +565,7 @@
         assert result == expected
 
     def test_to_json_categorical_index(self):
+        """ """
         data = pd.Series(1, pd.CategoricalIndex(["a", "b"]))
         result = data.to_json(orient="table", date_format="iso")
         result = json.loads(result, object_pairs_hook=OrderedDict)
@@ -433,6 +601,7 @@
         assert result == expected
 
     def test_date_format_raises(self):
+        """ """
         with pytest.raises(ValueError):
             self.df.to_json(orient="table", date_format="epoch")
 
@@ -441,6 +610,17 @@
         self.df.to_json(orient="table")
 
     def test_convert_pandas_type_to_json_field_int(self, index_or_series):
+        """
+
+        Parameters
+        ----------
+        index_or_series :
+            
+
+        Returns
+        -------
+
+        """
         kind = index_or_series
         data = [1, 2, 3]
         result = convert_pandas_type_to_json_field(kind(data, name="name"))
@@ -448,6 +628,17 @@
         assert result == expected
 
     def test_convert_pandas_type_to_json_field_float(self, index_or_series):
+        """
+
+        Parameters
+        ----------
+        index_or_series :
+            
+
+        Returns
+        -------
+
+        """
         kind = index_or_series
         data = [1.0, 2.0, 3.0]
         result = convert_pandas_type_to_json_field(kind(data, name="name"))
@@ -461,6 +652,21 @@
     def test_convert_pandas_type_to_json_field_datetime(
         self, dt_args, extra_exp, wrapper
     ):
+        """
+
+        Parameters
+        ----------
+        dt_args :
+            
+        extra_exp :
+            
+        wrapper :
+            
+
+        Returns
+        -------
+
+        """
         data = [1.0, 2.0, 3.0]
         data = pd.to_datetime(data, **dt_args)
         if wrapper is pd.Series:
@@ -471,6 +677,7 @@
         assert result == expected
 
     def test_convert_pandas_type_to_json_period_range(self):
+        """ """
         arr = pd.period_range("2016", freq="A-DEC", periods=4)
         result = convert_pandas_type_to_json_field(arr)
         expected = {"name": "values", "type": "datetime", "freq": "A-DEC"}
@@ -479,6 +686,19 @@
     @pytest.mark.parametrize("kind", [pd.Categorical, pd.CategoricalIndex])
     @pytest.mark.parametrize("ordered", [True, False])
     def test_convert_pandas_type_to_json_field_categorical(self, kind, ordered):
+        """
+
+        Parameters
+        ----------
+        kind :
+            
+        ordered :
+            
+
+        Returns
+        -------
+
+        """
         data = ["a", "b", "c"]
         if kind is pd.Categorical:
             arr = pd.Series(kind(data, ordered=ordered), name="cats")
@@ -524,12 +744,36 @@
         ],
     )
     def test_convert_json_field_to_pandas_type(self, inp, exp):
+        """
+
+        Parameters
+        ----------
+        inp :
+            
+        exp :
+            
+
+        Returns
+        -------
+
+        """
         field = {"name": "foo"}
         field.update(inp)
         assert convert_json_field_to_pandas_type(field) == exp
 
     @pytest.mark.parametrize("inp", ["geopoint", "geojson", "fake_type"])
     def test_convert_json_field_to_pandas_type_raises(self, inp):
+        """
+
+        Parameters
+        ----------
+        inp :
+            
+
+        Returns
+        -------
+
+        """
         field = {"type": inp}
         with pytest.raises(
             ValueError, match=f"Unsupported or invalid field type: {inp}"
@@ -537,6 +781,7 @@
             convert_json_field_to_pandas_type(field)
 
     def test_categorical(self):
+        """ """
         s = pd.Series(pd.Categorical(["a", "b", "a"]))
         s.index.name = "idx"
         result = s.to_json(orient="table", date_format="iso")
@@ -596,6 +841,21 @@
         ],
     )
     def test_set_names_unset(self, idx, nm, prop):
+        """
+
+        Parameters
+        ----------
+        idx :
+            
+        nm :
+            
+        prop :
+            
+
+        Returns
+        -------
+
+        """
         data = pd.Series(1, idx)
         result = set_default_names(data)
         assert getattr(result.index, prop) == nm
@@ -609,6 +869,17 @@
         ],
     )
     def test_warns_non_roundtrippable_names(self, idx):
+        """
+
+        Parameters
+        ----------
+        idx :
+            
+
+        Returns
+        -------
+
+        """
         # GH 19130
         df = pd.DataFrame(index=idx)
         df.index.name = "index"
@@ -616,6 +887,7 @@
             set_default_names(df)
 
     def test_timestamp_in_columns(self):
+        """ """
         df = pd.DataFrame(
             [[1, 2]], columns=[pd.Timestamp("2016"), pd.Timedelta(10, unit="s")]
         )
@@ -636,10 +908,22 @@
         ],
     )
     def test_overlapping_names(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         with pytest.raises(ValueError, match="Overlapping"):
             case.to_json(orient="table")
 
     def test_mi_falsey_name(self):
+        """ """
         # GH 16203
         df = pd.DataFrame(
             np.random.randn(4, 4),
@@ -650,6 +934,7 @@
 
 
 class TestTableOrientReader:
+    """ """
     @pytest.mark.parametrize(
         "index_nm",
         [None, "idx", pytest.param("index", marks=pytest.mark.xfail), "level_0"],
@@ -674,6 +959,21 @@
     )
     @pytest.mark.skipif(sys.version_info[:3] == (3, 7, 0), reason="GH-35309")
     def test_read_json_table_orient(self, index_nm, vals, recwarn):
+        """
+
+        Parameters
+        ----------
+        index_nm :
+            
+        vals :
+            
+        recwarn :
+            
+
+        Returns
+        -------
+
+        """
         df = DataFrame(vals, index=pd.Index(range(4), name=index_nm))
         out = df.to_json(orient="table")
         result = pd.read_json(out, orient="table")
@@ -692,12 +992,28 @@
         ],
     )
     def test_read_json_table_orient_raises(self, index_nm, vals, recwarn):
+        """
+
+        Parameters
+        ----------
+        index_nm :
+            
+        vals :
+            
+        recwarn :
+            
+
+        Returns
+        -------
+
+        """
         df = DataFrame(vals, index=pd.Index(range(4), name=index_nm))
         out = df.to_json(orient="table")
         with pytest.raises(NotImplementedError, match="can not yet read "):
             pd.read_json(out, orient="table")
 
     def test_comprehensive(self):
+        """ """
         df = DataFrame(
             {
                 "A": [1, 2, 3, 4],
@@ -723,6 +1039,17 @@
         [[None, None], ["foo", "bar"], ["foo", None], [None, "foo"], ["index", "foo"]],
     )
     def test_multiindex(self, index_names):
+        """
+
+        Parameters
+        ----------
+        index_names :
+            
+
+        Returns
+        -------
+
+        """
         # GH 18912
         df = pd.DataFrame(
             [["Arr", "alpha", [1, 2, 3, 4]], ["Bee", "Beta", [10, 20, 30, 40]]],
@@ -735,6 +1062,7 @@
         tm.assert_frame_equal(df, result)
 
     def test_empty_frame_roundtrip(self):
+        """ """
         # GH 21287
         df = pd.DataFrame(columns=["a", "b", "c"])
         expected = df.copy()
