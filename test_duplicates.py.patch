# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/multi/test_duplicates.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/multi/test_duplicates.py
@@ -11,6 +11,17 @@
 
 @pytest.mark.parametrize("names", [None, ["first", "second"]])
 def test_unique(names):
+    """
+
+    Parameters
+    ----------
+    names :
+        
+
+    Returns
+    -------
+
+    """
     mi = MultiIndex.from_arrays([[1, 2, 1, 2], [1, 1, 1, 2]], names=names)
 
     res = mi.unique()
@@ -34,6 +45,7 @@
 
 
 def test_unique_datetimelike():
+    """ """
     idx1 = DatetimeIndex(
         ["2015-01-01", "2015-01-01", "2015-01-01", "2015-01-01", "NaT", "NaT"]
     )
@@ -53,6 +65,19 @@
 
 @pytest.mark.parametrize("level", [0, "first", 1, "second"])
 def test_unique_level(idx, level):
+    """
+
+    Parameters
+    ----------
+    idx :
+        
+    level :
+        
+
+    Returns
+    -------
+
+    """
     # GH #17896 - with level= argument
     result = idx.unique(level=level)
     expected = idx.get_level_values(level).unique()
@@ -72,6 +97,19 @@
 
 @pytest.mark.parametrize("dropna", [True, False])
 def test_get_unique_index(idx, dropna):
+    """
+
+    Parameters
+    ----------
+    idx :
+        
+    dropna :
+        
+
+    Returns
+    -------
+
+    """
     mi = idx[[0, 1, 0, 1, 1, 0, 0]]
     expected = mi._shallow_copy(mi[[0, 1]])
 
@@ -81,6 +119,7 @@
 
 
 def test_duplicate_multiindex_codes():
+    """ """
     # GH 17464
     # Make sure that a MultiIndex with duplicate levels throws a ValueError
     msg = r"Level values must be unique: \[[A', ]+\] on level 0"
@@ -96,6 +135,17 @@
 
 @pytest.mark.parametrize("names", [["a", "b", "a"], [1, 1, 2], [1, "a", 1]])
 def test_duplicate_level_names(names):
+    """
+
+    Parameters
+    ----------
+    names :
+        
+
+    Returns
+    -------
+
+    """
     # GH18872, GH19029
     mi = MultiIndex.from_product([[0, 1]] * 3, names=names)
     assert mi.names == names
@@ -112,6 +162,7 @@
 
 
 def test_duplicate_meta_data():
+    """ """
     # GH 10115
     mi = MultiIndex(
         levels=[[0, 1], [0, 1, 2]], codes=[[0, 0, 0, 0, 1, 1, 1], [0, 1, 2, 0, 0, 1, 2]]
@@ -128,6 +179,19 @@
 
 
 def test_has_duplicates(idx, idx_dup):
+    """
+
+    Parameters
+    ----------
+    idx :
+        
+    idx_dup :
+        
+
+    Returns
+    -------
+
+    """
     # see fixtures
     assert idx.is_unique is True
     assert idx.has_duplicates is False
@@ -156,6 +220,7 @@
 
 
 def test_has_duplicates_from_tuples():
+    """ """
     # GH 9075
     t = [
         ("x", "out", "z", 5, "y", "in", "z", 169),
@@ -183,8 +248,22 @@
 
 
 def test_has_duplicates_overflow():
+    """ """
     # handle int64 overflow if possible
     def check(nlevels, with_nulls):
+        """
+
+        Parameters
+        ----------
+        nlevels :
+            
+        with_nulls :
+            
+
+        Returns
+        -------
+
+        """
         codes = np.tile(np.arange(500), 2)
         level = np.arange(500)
 
@@ -208,6 +287,17 @@
         if with_nulls:
 
             def f(a):
+                """
+
+                Parameters
+                ----------
+                a :
+                    
+
+                Returns
+                -------
+
+                """
                 return np.insert(a, 1000, a[0])
 
             codes = list(map(f, codes))
@@ -236,11 +326,37 @@
     ],
 )
 def test_duplicated(idx_dup, keep, expected):
+    """
+
+    Parameters
+    ----------
+    idx_dup :
+        
+    keep :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     result = idx_dup.duplicated(keep=keep)
     tm.assert_numpy_array_equal(result, expected)
 
 
 def test_duplicated_large(keep):
+    """
+
+    Parameters
+    ----------
+    keep :
+        
+
+    Returns
+    -------
+
+    """
     # GH 9125
     n, k = 200, 5000
     levels = [np.arange(n), tm.makeStringIndex(n), 1000 + np.arange(n)]
@@ -253,6 +369,7 @@
 
 
 def test_duplicated2():
+    """ """
     # TODO: more informative test name
     # GH5873
     for a in [101, 102]:
@@ -278,6 +395,7 @@
 
 
 def test_duplicated_drop_duplicates():
+    """ """
     # GH#4060
     idx = MultiIndex.from_arrays(([1, 2, 3, 1, 2, 3], [1, 1, 1, 1, 2, 2]))
 
