# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/window/test_apply.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/window/test_apply.py
@@ -10,11 +10,33 @@
 
 @pytest.mark.parametrize("bad_raw", [None, 1, 0])
 def test_rolling_apply_invalid_raw(bad_raw):
+    """
+
+    Parameters
+    ----------
+    bad_raw :
+        
+
+    Returns
+    -------
+
+    """
     with pytest.raises(ValueError, match="raw parameter must be `True` or `False`"):
         Series(range(3)).rolling(1).apply(len, raw=bad_raw)
 
 
 def test_rolling_apply_out_of_bounds(engine_and_raw):
+    """
+
+    Parameters
+    ----------
+    engine_and_raw :
+        
+
+    Returns
+    -------
+
+    """
     # gh-1850
     engine, raw = engine_and_raw
 
@@ -30,6 +52,17 @@
 
 @pytest.mark.parametrize("window", [2, "2s"])
 def test_rolling_apply_with_pandas_objects(window):
+    """
+
+    Parameters
+    ----------
+    window :
+        
+
+    Returns
+    -------
+
+    """
     # 5071
     df = DataFrame(
         {"A": np.random.randn(5), "B": np.random.randint(0, 10, size=5)},
@@ -39,6 +72,17 @@
     # we have an equal spaced timeseries index
     # so simulate removing the first period
     def f(x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         if x.index[0] == df.index[0]:
             return np.nan
         return x.iloc[-1]
@@ -52,6 +96,17 @@
 
 
 def test_rolling_apply(engine_and_raw):
+    """
+
+    Parameters
+    ----------
+    engine_and_raw :
+        
+
+    Returns
+    -------
+
+    """
     engine, raw = engine_and_raw
 
     expected = Series([], dtype="float64")
@@ -69,6 +124,17 @@
 
 
 def test_all_apply(engine_and_raw):
+    """
+
+    Parameters
+    ----------
+    engine_and_raw :
+        
+
+    Returns
+    -------
+
+    """
     engine, raw = engine_and_raw
 
     df = (
@@ -86,6 +152,17 @@
 
 
 def test_ragged_apply(engine_and_raw):
+    """
+
+    Parameters
+    ----------
+    engine_and_raw :
+        
+
+    Returns
+    -------
+
+    """
     engine, raw = engine_and_raw
 
     df = DataFrame({"B": range(5)})
@@ -115,11 +192,13 @@
 
 
 def test_invalid_engine():
+    """ """
     with pytest.raises(ValueError, match="engine must be either 'numba' or 'cython'"):
         Series(range(1)).rolling(1).apply(lambda x: x, engine="foo")
 
 
 def test_invalid_engine_kwargs_cython():
+    """ """
     with pytest.raises(ValueError, match="cython engine does not accept engine_kwargs"):
         Series(range(1)).rolling(1).apply(
             lambda x: x, engine="cython", engine_kwargs={"nopython": False}
@@ -127,6 +206,7 @@
 
 
 def test_invalid_raw_numba():
+    """ """
     with pytest.raises(
         ValueError, match="raw must be `True` when using the numba engine"
     ):
@@ -135,6 +215,7 @@
 
 @td.skip_if_no("numba")
 def test_invalid_kwargs_nopython():
+    """ """
     with pytest.raises(NumbaUtilError, match="numba does not support kwargs with"):
         Series(range(1)).rolling(1).apply(
             lambda x: x, kwargs={"a": 1}, engine="numba", raw=True
@@ -143,8 +224,32 @@
 
 @pytest.mark.parametrize("args_kwargs", [[None, {"par": 10}], [(10,), None]])
 def test_rolling_apply_args_kwargs(args_kwargs):
+    """
+
+    Parameters
+    ----------
+    args_kwargs :
+        
+
+    Returns
+    -------
+
+    """
     # GH 33433
     def foo(x, par):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+        par :
+            
+
+        Returns
+        -------
+
+        """
         return np.sum(x + par)
 
     df = DataFrame({"gr": [1, 1], "a": [1, 2]})
