# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpydoc/docscrape_sphinx.py
+++ b/..//venv/lib/python3.8/site-packages/numpydoc/docscrape_sphinx.py
@@ -18,11 +18,23 @@
 
 
 class SphinxDocString(NumpyDocString):
+    """ """
     def __init__(self, docstring, config={}):
         NumpyDocString.__init__(self, docstring, config=config)
         self.load_config(config)
 
     def load_config(self, config):
+        """
+
+        Parameters
+        ----------
+        config :
+            
+
+        Returns
+        -------
+
+        """
         self.use_plots = config.get('use_plots', False)
         self.use_blockquotes = config.get('use_blockquotes', False)
         self.class_members_toctree = config.get('class_members_toctree', True)
@@ -39,18 +51,56 @@
 
     # string conversion routines
     def _str_header(self, name, symbol='`'):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+        symbol :
+             (Default value = '`')
+
+        Returns
+        -------
+
+        """
         return ['.. rubric:: ' + name, '']
 
     def _str_field_list(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         return [':' + name + ':']
 
     def _str_indent(self, doc, indent=4):
+        """
+
+        Parameters
+        ----------
+        doc :
+            
+        indent :
+             (Default value = 4)
+
+        Returns
+        -------
+
+        """
         out = []
         for line in doc:
             out += [' '*indent + line]
         return out
 
     def _str_signature(self):
+        """ """
         return ['']
         if self['Signature']:
             return ['``%s``' % self['Signature']] + ['']
@@ -58,12 +108,25 @@
             return ['']
 
     def _str_summary(self):
+        """ """
         return self['Summary'] + ['']
 
     def _str_extended_summary(self):
+        """ """
         return self['Extended Summary'] + ['']
 
     def _str_returns(self, name='Returns'):
+        """
+
+        Parameters
+        ----------
+        name :
+             (Default value = 'Returns')
+
+        Returns
+        -------
+
+        """
         named_fmt = '**%s** : %s'
         unnamed_fmt = '%s'
 
@@ -93,6 +156,17 @@
         return out
 
     def _escape_args_and_kwargs(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         if name[:2] == '**':
             return r'\*\*' + name[2:]
         elif name[:1] == '*':
@@ -102,7 +176,7 @@
 
     def _process_param(self, param, desc, fake_autosummary):
         """Determine how to display a parameter
-
+        
         Emulates autosummary behavior if fake_autosummary
 
         Parameters
@@ -181,7 +255,7 @@
 
     def _str_param_list(self, name, fake_autosummary=False):
         """Generate RST for a listing of parameters or similar
-
+        
         Parameter names are displayed as bold text, and descriptions
         are in blockquotes.  Descriptions may therefore contain block
         markup as well.
@@ -193,11 +267,12 @@
         fake_autosummary : bool
             When True, the parameter names may correspond to attributes of the
             object beign documented, usually ``property`` instances on a class.
-            In this case, names will be linked to fuller descriptions.
-
-        Returns
-        -------
-        rst : list of str
+            In this case, names will be linked to fuller descriptions. (Default value = False)
+
+        Returns
+        -------
+
+        
         """
         out = []
         if self[name]:
@@ -233,6 +308,7 @@
 
     @property
     def _obj(self):
+        """ """
         if hasattr(self, '_cls'):
             return self._cls
         elif hasattr(self, '_f'):
@@ -240,9 +316,16 @@
         return None
 
     def _str_member_list(self, name):
-        """
-        Generate a member listing, autosummary:: table where possible,
+        """Generate a member listing, autosummary:: table where possible,
         and a table where not.
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
 
         """
         out = []
@@ -294,6 +377,17 @@
         return out
 
     def _str_section(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         out = []
         if self[name]:
             out += self._str_header(name)
@@ -303,6 +397,17 @@
         return out
 
     def _str_see_also(self, func_role):
+        """
+
+        Parameters
+        ----------
+        func_role :
+            
+
+        Returns
+        -------
+
+        """
         out = []
         if self['See Also']:
             see_also = super(SphinxDocString, self)._str_see_also(func_role)
@@ -311,6 +416,7 @@
         return out
 
     def _str_warnings(self):
+        """ """
         out = []
         if self['Warnings']:
             out = ['.. warning::', '']
@@ -319,6 +425,7 @@
         return out
 
     def _str_index(self):
+        """ """
         idx = self['index']
         out = []
         if len(idx) == 0:
@@ -336,6 +443,7 @@
         return out
 
     def _str_references(self):
+        """ """
         out = []
         if self['References']:
             out += self._str_header('References')
@@ -358,6 +466,7 @@
         return out
 
     def _str_examples(self):
+        """ """
         examples_str = "\n".join(self['Examples'])
 
         if (self.use_plots and re.search(IMPORT_MATPLOTLIB_RE, examples_str)
@@ -402,18 +511,21 @@
 
 
 class SphinxFunctionDoc(SphinxDocString, FunctionDoc):
+    """ """
     def __init__(self, obj, doc=None, config={}):
         self.load_config(config)
         FunctionDoc.__init__(self, obj, doc=doc, config=config)
 
 
 class SphinxClassDoc(SphinxDocString, ClassDoc):
+    """ """
     def __init__(self, obj, doc=None, func_doc=None, config={}):
         self.load_config(config)
         ClassDoc.__init__(self, obj, doc=doc, func_doc=None, config=config)
 
 
 class SphinxObjDoc(SphinxDocString):
+    """ """
     def __init__(self, obj, doc=None, config={}):
         self._f = obj
         self.load_config(config)
@@ -421,6 +533,25 @@
 
 
 def get_doc_object(obj, what=None, doc=None, config={}, builder=None):
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+    what :
+         (Default value = None)
+    doc :
+         (Default value = None)
+    config :
+         (Default value = {})
+    builder :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     if what is None:
         if inspect.isclass(obj):
             what = 'class'
