# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/util/hashing.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/util/hashing.py
@@ -26,12 +26,18 @@
 
 def _combine_hash_arrays(arrays, num_items: int):
     """
-    Parameters
-    ----------
-    arrays : generator
-    num_items : int
-
-    Should be the same as CPython's tupleobject.c
+
+    Parameters
+    ----------
+    arrays :
+        
+    num_items: int :
+        
+
+    Returns
+    -------
+
+    
     """
     try:
         first = next(arrays)
@@ -59,8 +65,7 @@
     hash_key: Optional[str] = _default_hash_key,
     categorize: bool = True,
 ):
-    """
-    Return a data hash of the Index/Series/DataFrame.
+    """Return a data hash of the Index/Series/DataFrame.
 
     Parameters
     ----------
@@ -73,10 +78,21 @@
     categorize : bool, default True
         Whether to first categorize object arrays before hashing. This is more
         efficient when the array contains duplicate values.
-
-    Returns
-    -------
-    Series of uint64, same length as the object
+    obj :
+        
+    index: bool :
+         (Default value = True)
+    encoding: str :
+         (Default value = "utf8")
+    hash_key: Optional[str] :
+         (Default value = _default_hash_key)
+    categorize: bool :
+         (Default value = True)
+
+    Returns
+    -------
+
+    
     """
     from pandas import Series
 
@@ -140,18 +156,23 @@
 
 
 def hash_tuples(vals, encoding="utf8", hash_key: str = _default_hash_key):
-    """
-    Hash an MultiIndex / list-of-tuples efficiently
+    """Hash an MultiIndex / list-of-tuples efficiently
 
     Parameters
     ----------
     vals : MultiIndex, list-of-tuples, or single tuple
+        
     encoding : str, default 'utf8'
+         (Default value = "utf8")
     hash_key : str, default _default_hash_key
-
-    Returns
-    -------
-    ndarray of hashed values array
+        
+    hash_key: str :
+         (Default value = _default_hash_key)
+
+    Returns
+    -------
+
+    
     """
     is_tuple = False
     if isinstance(vals, tuple):
@@ -183,19 +204,26 @@
 
 
 def _hash_categorical(c, encoding: str, hash_key: str):
-    """
-    Hash a Categorical by hashing its categories, and then mapping the codes
+    """Hash a Categorical by hashing its categories, and then mapping the codes
     to the hashes
 
     Parameters
     ----------
     c : Categorical
+        
     encoding : str
+        
     hash_key : str
-
-    Returns
-    -------
-    ndarray of hashed values array, same size as len(c)
+        
+    encoding: str :
+        
+    hash_key: str :
+        
+
+    Returns
+    -------
+
+    
     """
     # Convert ExtensionArrays to ndarrays
     values = np.asarray(c.categories._values)
@@ -226,12 +254,12 @@
     hash_key: str = _default_hash_key,
     categorize: bool = True,
 ):
-    """
-    Given a 1d array, return an array of deterministic integers.
+    """Given a 1d array, return an array of deterministic integers.
 
     Parameters
     ----------
     vals : ndarray, Categorical
+        
     encoding : str, default 'utf8'
         Encoding for data & key when strings.
     hash_key : str, default _default_hash_key
@@ -239,10 +267,17 @@
     categorize : bool, default True
         Whether to first categorize object arrays before hashing. This is more
         efficient when the array contains duplicate values.
-
-    Returns
-    -------
-    1d uint64 numpy array of hash values, same length as the vals
+    encoding: str :
+         (Default value = "utf8")
+    hash_key: str :
+         (Default value = _default_hash_key)
+    categorize: bool :
+         (Default value = True)
+
+    Returns
+    -------
+
+    
     """
     if not hasattr(vals, "dtype"):
         raise TypeError("must pass a ndarray-like")
