# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pexpect/_async.py
+++ b/..//venv/lib/python3.8/site-packages/pexpect/_async.py
@@ -6,6 +6,19 @@
 
 @asyncio.coroutine
 def expect_async(expecter, timeout=None):
+    """
+
+    Parameters
+    ----------
+    expecter :
+        
+    timeout :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     # First process data that was previously read - if it maches, we don't need
     # async stuff.
     idx = expecter.existing_data()
@@ -29,6 +42,21 @@
 
 @asyncio.coroutine
 def repl_run_command_async(repl, cmdlines, timeout=-1):
+    """
+
+    Parameters
+    ----------
+    repl :
+        
+    cmdlines :
+        
+    timeout :
+         (Default value = -1)
+
+    Returns
+    -------
+
+    """
     res = []
     repl.child.sendline(cmdlines[0])
     for line in cmdlines[1:]:
@@ -46,26 +74,82 @@
     return u''.join(res + [repl.child.before])
 
 class PatternWaiter(asyncio.Protocol):
+    """ """
     transport = None
 
     def set_expecter(self, expecter):
+        """
+
+        Parameters
+        ----------
+        expecter :
+            
+
+        Returns
+        -------
+
+        """
         self.expecter = expecter
         self.fut = asyncio.Future()
 
     def found(self, result):
+        """
+
+        Parameters
+        ----------
+        result :
+            
+
+        Returns
+        -------
+
+        """
         if not self.fut.done():
             self.fut.set_result(result)
             self.transport.pause_reading()
 
     def error(self, exc):
+        """
+
+        Parameters
+        ----------
+        exc :
+            
+
+        Returns
+        -------
+
+        """
         if not self.fut.done():
             self.fut.set_exception(exc)
             self.transport.pause_reading()
 
     def connection_made(self, transport):
+        """
+
+        Parameters
+        ----------
+        transport :
+            
+
+        Returns
+        -------
+
+        """
         self.transport = transport
 
     def data_received(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         spawn = self.expecter.spawn
         s = spawn._decoder.decode(data)
         spawn._log(s, 'read')
@@ -85,6 +169,7 @@
             self.error(e)
 
     def eof_received(self):
+        """ """
         # N.B. If this gets called, async will close the pipe (the spawn object)
         # for us
         try:
@@ -96,6 +181,17 @@
             self.found(index)
 
     def connection_lost(self, exc):
+        """
+
+        Parameters
+        ----------
+        exc :
+            
+
+        Returns
+        -------
+
+        """
         if isinstance(exc, OSError) and exc.errno == errno.EIO:
             # We may get here without eof_received being called, e.g on Linux
             self.eof_received()
