# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/util/_validators.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/util/_validators.py
@@ -11,10 +11,24 @@
 
 
 def _check_arg_length(fname, args, max_fname_arg_count, compat_args):
-    """
-    Checks whether 'args' has length of at most 'compat_args'. Raises
+    """Checks whether 'args' has length of at most 'compat_args'. Raises
     a TypeError if that is not the case, similar to in Python when a
     function is called with too many arguments.
+
+    Parameters
+    ----------
+    fname :
+        
+    args :
+        
+    max_fname_arg_count :
+        
+    compat_args :
+        
+
+    Returns
+    -------
+
     """
     if max_fname_arg_count < 0:
         raise ValueError("'max_fname_arg_count' must be non-negative")
@@ -31,12 +45,24 @@
 
 
 def _check_for_default_values(fname, arg_val_dict, compat_args):
-    """
-    Check that the keys in `arg_val_dict` are mapped to their
+    """Check that the keys in `arg_val_dict` are mapped to their
     default values as specified in `compat_args`.
-
+    
     Note that this function is to be called only when it has been
     checked that arg_val_dict.keys() is a subset of compat_args
+
+    Parameters
+    ----------
+    fname :
+        
+    arg_val_dict :
+        
+    compat_args :
+        
+
+    Returns
+    -------
+
     """
     for key in arg_val_dict:
         # try checking equality directly with '=' operator,
@@ -69,8 +95,7 @@
 
 
 def validate_args(fname, args, max_fname_arg_count, compat_args):
-    """
-    Checks whether the length of the `*args` argument passed into a function
+    """Checks whether the length of the `*args` argument passed into a function
     has at most `len(compat_args)` arguments and whether or not all of these
     elements in `args` are set to their default values.
 
@@ -92,13 +117,10 @@
         implementations, a dict ensures that the original
         order of the keyword arguments is enforced.
 
-    Raises
-    ------
-    TypeError
-        If `args` contains more values than there are `compat_args`
-    ValueError
-        If `args` contains values that do not correspond to those
-        of the default values specified in `compat_args`
+    Returns
+    -------
+
+    
     """
     _check_arg_length(fname, args, max_fname_arg_count, compat_args)
 
@@ -110,9 +132,21 @@
 
 
 def _check_for_invalid_keys(fname, kwargs, compat_args):
-    """
-    Checks whether 'kwargs' contains any keys that are not
+    """Checks whether 'kwargs' contains any keys that are not
     in 'compat_args' and raises a TypeError if there is one.
+
+    Parameters
+    ----------
+    fname :
+        
+    kwargs :
+        
+    compat_args :
+        
+
+    Returns
+    -------
+
     """
     # set(dict) --> set of the dictionary's keys
     diff = set(kwargs) - set(compat_args)
@@ -123,8 +157,7 @@
 
 
 def validate_kwargs(fname, kwargs, compat_args):
-    """
-    Checks whether parameters passed to the **kwargs argument in a
+    """Checks whether parameters passed to the **kwargs argument in a
     function `fname` are valid parameters as specified in `*compat_args`
     and whether or not they are set to their default values.
 
@@ -134,15 +167,14 @@
         The name of the function being passed the `**kwargs` parameter
     kwargs : dict
         The `**kwargs` parameter passed into `fname`
-    compat_args: dict
+    compat_args : dict
         A dictionary of keys that `kwargs` is allowed to have and their
         associated default values
 
-    Raises
-    ------
-    TypeError if `kwargs` contains keys not in `compat_args`
-    ValueError if `kwargs` contains keys in `compat_args` that do not
-    map to the default values specified in `compat_args`
+    Returns
+    -------
+
+    
     """
     kwds = kwargs.copy()
     _check_for_invalid_keys(fname, kwargs, compat_args)
@@ -150,40 +182,46 @@
 
 
 def validate_args_and_kwargs(fname, args, kwargs, max_fname_arg_count, compat_args):
-    """
-    Checks whether parameters passed to the *args and **kwargs argument in a
+    """Checks whether parameters passed to the *args and **kwargs argument in a
     function `fname` are valid parameters as specified in `*compat_args`
     and whether or not they are set to their default values.
 
     Parameters
     ----------
-    fname: str
+    fname : str
         The name of the function being passed the `**kwargs` parameter
-    args: tuple
+    args : tuple
         The `*args` parameter passed into a function
-    kwargs: dict
+    kwargs : dict
         The `**kwargs` parameter passed into `fname`
-    max_fname_arg_count: int
+    max_fname_arg_count : int
         The minimum number of arguments that the function `fname`
         requires, excluding those in `args`. Used for displaying
         appropriate error messages. Must be non-negative.
-    compat_args: dict
+    compat_args : dict
         A dictionary of keys that `kwargs` is allowed to
         have and their associated default values.
+
+    Returns
+    -------
 
     Raises
     ------
     TypeError if `args` contains more values than there are
+        
     `compat_args` OR `kwargs` contains keys not in `compat_args`
+        
     ValueError if `args` contains values not at the default value (`None`)
+        
     `kwargs` contains keys in `compat_args` that do not map to the default
+        
     value as specified in `compat_args`
+        
 
     See Also
     --------
     validate_args : Purely args validation.
     validate_kwargs : Purely kwargs validation.
-
     """
     # Check that the total number of arguments passed in (i.e.
     # args and kwargs) does not exceed the length of compat_args
@@ -206,7 +244,19 @@
 
 
 def validate_bool_kwarg(value, arg_name):
-    """ Ensures that argument passed in arg_name is of type bool. """
+    """Ensures that argument passed in arg_name is of type bool.
+
+    Parameters
+    ----------
+    value :
+        
+    arg_name :
+        
+
+    Returns
+    -------
+
+    """
     if not (is_bool(value) or value is None):
         raise ValueError(
             f'For argument "{arg_name}" expected type bool, received '
@@ -216,9 +266,8 @@
 
 
 def validate_axis_style_args(data, args, kwargs, arg_name, method_name):
-    """
-    Argument handler for mixed index, columns / axis functions
-
+    """Argument handler for mixed index, columns / axis functions
+    
     In an attempt to handle both `.method(index, columns)`, and
     `.method(arg, axis=.)`, we have to do some bad things to argument
     parsing. This translates all arguments to `{index=., columns=.}` style.
@@ -226,12 +275,17 @@
     Parameters
     ----------
     data : DataFrame
+        
     args : tuple
         All positional arguments from the user
     kwargs : dict
         All keyword arguments from the user
     arg_name, method_name : str
         Used for better error messages
+    arg_name :
+        
+    method_name :
+        
 
     Returns
     -------
@@ -241,11 +295,12 @@
 
     Examples
     --------
+    
+    This emits a warning
     >>> df._validate_axis_style_args((str.upper,), {'columns': id},
     ...                              'mapper', 'rename')
     {'columns': <function id>, 'index': <method 'upper' of 'str' objects>}
-
-    This emits a warning
+    
     >>> df._validate_axis_style_args((str.upper, id), {},
     ...                              'mapper', 'rename')
     {'columns': <function id>, 'index': <method 'upper' of 'str' objects>}
@@ -311,9 +366,8 @@
 
 
 def validate_fillna_kwargs(value, method, validate_scalar_dict_value=True):
-    """
-    Validate the keyword arguments to 'fillna'.
-
+    """Validate the keyword arguments to 'fillna'.
+    
     This checks that exactly one of 'value' and 'method' is specified.
     If 'method' is specified, this validates that it's a valid method.
 
@@ -323,11 +377,16 @@
         The 'value' and 'method' keyword arguments for 'fillna'.
     validate_scalar_dict_value : bool, default True
         Whether to validate that 'value' is a scalar or dict. Specifically,
-        validate that it is not a list or tuple.
-
-    Returns
-    -------
-    value, method : object
+        validate that it is not a list or tuple. (Default value = True)
+    value :
+        
+    method :
+        
+
+    Returns
+    -------
+
+    
     """
     from pandas.core.missing import clean_fill_method
 
@@ -350,25 +409,26 @@
 
 
 def validate_percentile(q: Union[float, Iterable[float]]) -> np.ndarray:
-    """
-    Validate percentiles (used by describe and quantile).
-
+    """Validate percentiles (used by describe and quantile).
+    
     This function checks if the given float or iterable of floats is a valid percentile
     otherwise raises a ValueError.
 
     Parameters
     ----------
-    q: float or iterable of floats
+    q : float or iterable of floats
         A single percentile or an iterable of percentiles.
+    q: Union[float :
+        
+    Iterable[float]] :
+        
 
     Returns
     -------
     ndarray
         An ndarray of the percentiles if valid.
 
-    Raises
-    ------
-    ValueError if percentiles are not in given interval([0, 1]).
+    
     """
     q_arr = np.asarray(q)
     # Don't change this to an f-string. The string formatting
