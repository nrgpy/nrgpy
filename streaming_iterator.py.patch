# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/requests_toolbelt/streaming_iterator.py
+++ b/..//venv/lib/python3.8/site-packages/requests_toolbelt/streaming_iterator.py
@@ -17,10 +17,9 @@
 
 class StreamingIterator(object):
 
-    """
-    This class provides a way of allowing iterators with a known size to be
+    """This class provides a way of allowing iterators with a known size to be
     streamed instead of chunked.
-
+    
     In requests, if you pass in an iterator it assumes you want to use
     chunked transfer-encoding to upload the data, which not all servers
     support well. Additionally, you may want to set the content-length
@@ -30,26 +29,33 @@
     these details you can instead just use this class. You simply provide the
     size and iterator and pass the instance of StreamingIterator to requests
     via the data parameter like so:
-
+    
     .. code-block:: python
-
+    
         from requests_toolbelt import StreamingIterator
-
+    
         import requests
-
+    
         # Let iterator be some generator that you already have and size be
         # the size of the data produced by the iterator
-
+    
         r = requests.post(url, data=StreamingIterator(size, iterator))
-
+    
     You can also pass file-like objects to :py:class:`StreamingIterator` in
     case requests can't determize the filesize itself. This is the case with
     streaming file objects like ``stdin`` or any sockets. Wrapping e.g. files
     that are on disk with ``StreamingIterator`` is unnecessary, because
     requests can determine the filesize itself.
-
+    
     Naturally, you should also set the `Content-Type` of your upload
     appropriately because the toolbelt will not attempt to guess that for you.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, size, iterator, encoding='utf-8'):
@@ -77,10 +83,22 @@
             self._file = _IteratorAsBinaryFile(iterator, encoding)
 
     def read(self, size=-1):
+        """
+
+        Parameters
+        ----------
+        size :
+             (Default value = -1)
+
+        Returns
+        -------
+
+        """
         return encode_with(self._file.read(size), self.encoding)
 
 
 class _IteratorAsBinaryFile(object):
+    """ """
     def __init__(self, iterator, encoding='utf-8'):
         #: The iterator used to generate the upload data
         self.iterator = iterator
@@ -93,12 +111,24 @@
         self._buffer = CustomBytesIO()
 
     def _get_bytes(self):
+        """ """
         try:
             return encode_with(next(self.iterator), self.encoding)
         except StopIteration:
             return b''
 
     def _load_bytes(self, size):
+        """
+
+        Parameters
+        ----------
+        size :
+            
+
+        Returns
+        -------
+
+        """
         self._buffer.smart_truncate()
         amount_to_load = size - super_len(self._buffer)
         bytes_to_append = True
@@ -108,6 +138,17 @@
             amount_to_load -= self._buffer.append(bytes_to_append)
 
     def read(self, size=-1):
+        """
+
+        Parameters
+        ----------
+        size :
+             (Default value = -1)
+
+        Returns
+        -------
+
+        """
         size = int(size)
         if size == -1:
             return b''.join(self.iterator)
