# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/terminal/magics.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/terminal/magics.py
@@ -15,7 +15,20 @@
 from IPython.utils import py3compat
 
 def get_pasted_lines(sentinel, l_input=py3compat.input, quiet=False):
-    """ Yield pasted lines until the user enters the given sentinel value.
+    """Yield pasted lines until the user enters the given sentinel value.
+
+    Parameters
+    ----------
+    sentinel :
+        
+    l_input :
+         (Default value = py3compat.input)
+    quiet :
+         (Default value = False)
+
+    Returns
+    -------
+
     """
     if not quiet:
         print("Pasting code; enter '%s' alone on the line to stop or use Ctrl-D." \
@@ -37,11 +50,23 @@
 
 @magics_class
 class TerminalMagics(Magics):
+    """ """
     def __init__(self, shell):
         super(TerminalMagics, self).__init__(shell)
 
     def store_or_execute(self, block, name):
-        """ Execute a block, or store it in a variable, per the user's request.
+        """Execute a block, or store it in a variable, per the user's request.
+
+        Parameters
+        ----------
+        block :
+            
+        name :
+            
+
+        Returns
+        -------
+
         """
         if name:
             # If storing it for further editing
@@ -57,13 +82,33 @@
                 self.shell.using_paste_magics = False
 
     def preclean_input(self, block):
+        """
+
+        Parameters
+        ----------
+        block :
+            
+
+        Returns
+        -------
+
+        """
         lines = block.splitlines()
         while lines and not lines[0].strip():
             lines = lines[1:]
         return strip_email_quotes('\n'.join(lines))
 
     def rerun_pasted(self, name='pasted_block'):
-        """ Rerun a previously pasted command.
+        """Rerun a previously pasted command.
+
+        Parameters
+        ----------
+        name :
+             (Default value = 'pasted_block')
+
+        Returns
+        -------
+
         """
         b = self.shell.user_ns.get(name)
 
@@ -79,46 +124,63 @@
 
     @line_magic
     def autoindent(self, parameter_s = ''):
-        """Toggle autoindent on/off (deprecated)"""
+        """Toggle autoindent on/off (deprecated)
+
+        Parameters
+        ----------
+        parameter_s :
+             (Default value = '')
+
+        Returns
+        -------
+
+        """
         self.shell.set_autoindent()
         print("Automatic indentation is:",['OFF','ON'][self.shell.autoindent])
 
     @line_magic
     def cpaste(self, parameter_s=''):
         """Paste & execute a pre-formatted code block from clipboard.
-
+        
         You must terminate the block with '--' (two minus-signs) or Ctrl-D
         alone on the line. You can also provide your own sentinel with '%paste
         -s %%' ('%%' is the new sentinel for this operation).
-
+        
         The block is dedented prior to execution to enable execution of method
         definitions. '>' and '+' characters at the beginning of a line are
         ignored, to allow pasting directly from e-mails, diff files and
         doctests (the '...' continuation prompt is also stripped).  The
         executed block is also assigned to variable named 'pasted_block' for
         later editing with '%edit pasted_block'.
-
+        
         You can also pass a variable name as an argument, e.g. '%cpaste foo'.
         This assigns the pasted block to variable 'foo' as string, without
         dedenting or executing it (preceding >>> and + is still stripped)
-
+        
         '%cpaste -r' re-executes the block previously entered by cpaste.
         '%cpaste -q' suppresses any additional output messages.
-
+        
         Do not be alarmed by garbled output on Windows (it's a readline bug).
         Just press enter and type -- (and press enter again) and the block
         will be what was just pasted.
-
+        
         IPython statements (magics, shell escapes) are not supported (yet).
+
+        Parameters
+        ----------
+        parameter_s :
+             (Default value = '')
+
+        Returns
+        -------
 
         See also
         --------
         paste: automatically pull code from clipboard.
-
         Examples
         --------
         ::
-
+        
           In [8]: %cpaste
           Pasting code; enter '--' alone on the line to stop.
           :>>> a = ["world!", "Hello"]
@@ -140,29 +202,37 @@
     @line_magic
     def paste(self, parameter_s=''):
         """Paste & execute a pre-formatted code block from clipboard.
-
+        
         The text is pulled directly from the clipboard without user
         intervention and printed back on the screen before execution (unless
         the -q flag is given to force quiet mode).
-
+        
         The block is dedented prior to execution to enable execution of method
         definitions. '>' and '+' characters at the beginning of a line are
         ignored, to allow pasting directly from e-mails, diff files and
         doctests (the '...' continuation prompt is also stripped).  The
         executed block is also assigned to variable named 'pasted_block' for
         later editing with '%edit pasted_block'.
-
+        
         You can also pass a variable name as an argument, e.g. '%paste foo'.
         This assigns the pasted block to variable 'foo' as string, without
         executing it (preceding >>> and + is still stripped).
-
+        
         Options:
-
+        
           -r: re-executes the block previously entered by cpaste.
-
+        
           -q: quiet mode: do not echo the pasted text back to the terminal.
-
+        
         IPython statements (magics, shell escapes) are not supported (yet).
+
+        Parameters
+        ----------
+        parameter_s :
+             (Default value = '')
+
+        Returns
+        -------
 
         See also
         --------
@@ -199,5 +269,14 @@
         @line_magic
         def cls(self, s):
             """Clear screen.
+
+            Parameters
+            ----------
+            s :
+                
+
+            Returns
+            -------
+
             """
             os.system("cls")
