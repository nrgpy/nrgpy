# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pygments/lexers/haskell.py
+++ b/..//venv/lib/python3.8/site-packages/pygments/lexers/haskell.py
@@ -26,10 +26,16 @@
 
 
 class HaskellLexer(RegexLexer):
-    """
-    A Haskell lexer based on the lexemes defined in the Haskell 98 Report.
-
+    """A Haskell lexer based on the lexemes defined in the Haskell 98 Report.
+    
     .. versionadded:: 0.8
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Haskell'
     aliases = ['haskell', 'hs']
@@ -160,10 +166,16 @@
 
 
 class HspecLexer(HaskellLexer):
-    """
-    A Haskell lexer with support for Hspec constructs.
-
+    """A Haskell lexer with support for Hspec constructs.
+    
     .. versionadded:: 2.4.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Hspec'
@@ -182,12 +194,18 @@
 
 
 class IdrisLexer(RegexLexer):
-    """
-    A lexer for the dependently typed programming language Idris.
-
+    """A lexer for the dependently typed programming language Idris.
+    
     Based on the Haskell and Agda Lexer.
-
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Idris'
     aliases = ['idris', 'idr']
@@ -293,11 +311,17 @@
 
 
 class AgdaLexer(RegexLexer):
-    """
-    For the `Agda <http://wiki.portal.chalmers.se/agda/pmwiki.php>`_
+    """For the `Agda <http://wiki.portal.chalmers.se/agda/pmwiki.php>`_
     dependently typed functional programming language and proof assistant.
-
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Agda'
@@ -362,10 +386,16 @@
 
 
 class CryptolLexer(RegexLexer):
-    """
-    FIXME: A Cryptol2 lexer based on the lexemes defined in the Haskell 98 Report.
-
+    """FIXME: A Cryptol2 lexer based on the lexemes defined in the Haskell 98 Report.
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Cryptol'
     aliases = ['cryptol', 'cry']
@@ -489,6 +519,17 @@
                       'trace'}
 
     def get_tokens_unprocessed(self, text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         stack = ['root']
         for index, token, value in \
                 RegexLexer.get_tokens_unprocessed(self, text, stack):
@@ -499,16 +540,22 @@
 
 
 class LiterateLexer(Lexer):
-    """
-    Base class for lexers of literate file formats based on LaTeX or Bird-style
+    """Base class for lexers of literate file formats based on LaTeX or Bird-style
     (prefixing each code line with ">").
-
+    
     Additional options accepted:
-
+    
     `litstyle`
         If given, must be ``"bird"`` or ``"latex"``.  If not given, the style
         is autodetected: if the first non-whitespace character in the source
         is a backslash or percent character, LaTeX is assumed, else Bird.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     bird_re = re.compile(r'(>[ \t]*)(.*\n)')
@@ -518,6 +565,17 @@
         Lexer.__init__(self, **options)
 
     def get_tokens_unprocessed(self, text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         style = self.options.get('litstyle')
         if style is None:
             style = (text.lstrip()[0:1] in '%\\') and 'latex' or 'bird'
@@ -563,17 +621,23 @@
 
 
 class LiterateHaskellLexer(LiterateLexer):
-    """
-    For Literate Haskell (Bird-style or LaTeX) source.
-
+    """For Literate Haskell (Bird-style or LaTeX) source.
+    
     Additional options accepted:
-
+    
     `litstyle`
         If given, must be ``"bird"`` or ``"latex"``.  If not given, the style
         is autodetected: if the first non-whitespace character in the source
         is a backslash or percent character, LaTeX is assumed, else Bird.
-
+    
     .. versionadded:: 0.9
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Literate Haskell'
     aliases = ['lhs', 'literate-haskell', 'lhaskell']
@@ -586,17 +650,23 @@
 
 
 class LiterateIdrisLexer(LiterateLexer):
-    """
-    For Literate Idris (Bird-style or LaTeX) source.
-
+    """For Literate Idris (Bird-style or LaTeX) source.
+    
     Additional options accepted:
-
+    
     `litstyle`
         If given, must be ``"bird"`` or ``"latex"``.  If not given, the style
         is autodetected: if the first non-whitespace character in the source
         is a backslash or percent character, LaTeX is assumed, else Bird.
-
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Literate Idris'
     aliases = ['lidr', 'literate-idris', 'lidris']
@@ -609,17 +679,23 @@
 
 
 class LiterateAgdaLexer(LiterateLexer):
-    """
-    For Literate Agda source.
-
+    """For Literate Agda source.
+    
     Additional options accepted:
-
+    
     `litstyle`
         If given, must be ``"bird"`` or ``"latex"``.  If not given, the style
         is autodetected: if the first non-whitespace character in the source
         is a backslash or percent character, LaTeX is assumed, else Bird.
-
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Literate Agda'
     aliases = ['lagda', 'literate-agda']
@@ -632,17 +708,23 @@
 
 
 class LiterateCryptolLexer(LiterateLexer):
-    """
-    For Literate Cryptol (Bird-style or LaTeX) source.
-
+    """For Literate Cryptol (Bird-style or LaTeX) source.
+    
     Additional options accepted:
-
+    
     `litstyle`
         If given, must be ``"bird"`` or ``"latex"``.  If not given, the style
         is autodetected: if the first non-whitespace character in the source
         is a backslash or percent character, LaTeX is assumed, else Bird.
-
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Literate Cryptol'
     aliases = ['lcry', 'literate-cryptol', 'lcryptol']
@@ -655,11 +737,17 @@
 
 
 class KokaLexer(RegexLexer):
-    """
-    Lexer for the `Koka <http://koka.codeplex.com>`_
+    """Lexer for the `Koka <http://koka.codeplex.com>`_
     language.
-
+    
     .. versionadded:: 1.6
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Koka'
