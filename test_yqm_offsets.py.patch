# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/tseries/offsets/test_yqm_offsets.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/tseries/offsets/test_yqm_offsets.py
@@ -31,6 +31,7 @@
 
 
 def test_quarterly_dont_normalize():
+    """ """
     date = datetime(2012, 3, 31, 5, 30)
 
     offsets = (QuarterBegin, QuarterEnd, BQuarterEnd, BQuarterBegin)
@@ -59,6 +60,17 @@
     ],
 )
 def test_apply_index(cls, n):
+    """
+
+    Parameters
+    ----------
+    n :
+        
+
+    Returns
+    -------
+
+    """
     offset = cls(n=n)
     rng = pd.date_range(start="1/1/2000", periods=100000, freq="T")
     ser = pd.Series(rng)
@@ -77,6 +89,17 @@
     "offset", [QuarterBegin(), QuarterEnd(), BQuarterBegin(), BQuarterEnd()]
 )
 def test_on_offset(offset):
+    """
+
+    Parameters
+    ----------
+    offset :
+        
+
+    Returns
+    -------
+
+    """
     dates = [
         datetime(2016, m, d)
         for m in [10, 11, 12]
@@ -94,6 +117,7 @@
 
 
 class TestMonthBegin(Base):
+    """ """
     _offset = MonthBegin
 
     offset_cases = []
@@ -153,15 +177,28 @@
 
     @pytest.mark.parametrize("case", offset_cases)
     def test_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, cases = case
         for base, expected in cases.items():
             assert_offset_equal(offset, base, expected)
 
 
 class TestMonthEnd(Base):
+    """ """
     _offset = MonthEnd
 
     def test_day_of_month(self):
+        """ """
         dt = datetime(2007, 1, 1)
         offset = MonthEnd()
 
@@ -172,6 +209,7 @@
         assert result == Timestamp(2007, 2, 28)
 
     def test_normalize(self):
+        """ """
         dt = datetime(2007, 1, 1, 3)
 
         result = dt + MonthEnd(normalize=True)
@@ -236,6 +274,17 @@
 
     @pytest.mark.parametrize("case", offset_cases)
     def test_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, cases = case
         for base, expected in cases.items():
             assert_offset_equal(offset, base, expected)
@@ -247,14 +296,27 @@
 
     @pytest.mark.parametrize("case", on_offset_cases)
     def test_is_on_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, dt, expected = case
         assert_is_on_offset(offset, dt, expected)
 
 
 class TestBMonthBegin(Base):
+    """ """
     _offset = BMonthBegin
 
     def test_offsets_compare_equal(self):
+        """ """
         # root cause of #456
         offset1 = BMonthBegin()
         offset2 = BMonthBegin()
@@ -322,6 +384,17 @@
 
     @pytest.mark.parametrize("case", offset_cases)
     def test_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, cases = case
         for base, expected in cases.items():
             assert_offset_equal(offset, base, expected)
@@ -335,14 +408,27 @@
 
     @pytest.mark.parametrize("case", on_offset_cases)
     def test_is_on_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, dt, expected = case
         assert_is_on_offset(offset, dt, expected)
 
 
 class TestBMonthEnd(Base):
+    """ """
     _offset = BMonthEnd
 
     def test_normalize(self):
+        """ """
         dt = datetime(2007, 1, 1, 3)
 
         result = dt + BMonthEnd(normalize=True)
@@ -350,6 +436,7 @@
         assert result == expected
 
     def test_offsets_compare_equal(self):
+        """ """
         # root cause of #456
         offset1 = BMonthEnd()
         offset2 = BMonthEnd()
@@ -413,6 +500,17 @@
 
     @pytest.mark.parametrize("case", offset_cases)
     def test_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, cases = case
         for base, expected in cases.items():
             assert_offset_equal(offset, base, expected)
@@ -424,6 +522,17 @@
 
     @pytest.mark.parametrize("case", on_offset_cases)
     def test_is_on_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, dt, expected = case
         assert_is_on_offset(offset, dt, expected)
 
@@ -433,7 +542,9 @@
 
 
 class TestQuarterBegin(Base):
+    """ """
     def test_repr(self):
+        """ """
         expected = "<QuarterBegin: startingMonth=3>"
         assert repr(QuarterBegin()) == expected
         expected = "<QuarterBegin: startingMonth=3>"
@@ -442,11 +553,13 @@
         assert repr(QuarterBegin(startingMonth=1)) == expected
 
     def test_is_anchored(self):
+        """ """
         assert QuarterBegin(startingMonth=1).is_anchored()
         assert QuarterBegin().is_anchored()
         assert not QuarterBegin(2, startingMonth=1).is_anchored()
 
     def test_offset_corner_case(self):
+        """ """
         # corner
         offset = QuarterBegin(n=-1, startingMonth=1)
         assert datetime(2010, 2, 1) + offset == datetime(2010, 1, 1)
@@ -535,15 +648,28 @@
 
     @pytest.mark.parametrize("case", offset_cases)
     def test_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, cases = case
         for base, expected in cases.items():
             assert_offset_equal(offset, base, expected)
 
 
 class TestQuarterEnd(Base):
+    """ """
     _offset = QuarterEnd
 
     def test_repr(self):
+        """ """
         expected = "<QuarterEnd: startingMonth=3>"
         assert repr(QuarterEnd()) == expected
         expected = "<QuarterEnd: startingMonth=3>"
@@ -552,11 +678,13 @@
         assert repr(QuarterEnd(startingMonth=1)) == expected
 
     def test_is_anchored(self):
+        """ """
         assert QuarterEnd(startingMonth=1).is_anchored()
         assert QuarterEnd().is_anchored()
         assert not QuarterEnd(2, startingMonth=1).is_anchored()
 
     def test_offset_corner_case(self):
+        """ """
         # corner
         offset = QuarterEnd(n=-1, startingMonth=1)
         assert datetime(2010, 2, 1) + offset == datetime(2010, 1, 31)
@@ -644,6 +772,17 @@
 
     @pytest.mark.parametrize("case", offset_cases)
     def test_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, cases = case
         for base, expected in cases.items():
             assert_offset_equal(offset, base, expected)
@@ -683,14 +822,27 @@
 
     @pytest.mark.parametrize("case", on_offset_cases)
     def test_is_on_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, dt, expected = case
         assert_is_on_offset(offset, dt, expected)
 
 
 class TestBQuarterBegin(Base):
+    """ """
     _offset = BQuarterBegin
 
     def test_repr(self):
+        """ """
         expected = "<BusinessQuarterBegin: startingMonth=3>"
         assert repr(BQuarterBegin()) == expected
         expected = "<BusinessQuarterBegin: startingMonth=3>"
@@ -699,11 +851,13 @@
         assert repr(BQuarterBegin(startingMonth=1)) == expected
 
     def test_is_anchored(self):
+        """ """
         assert BQuarterBegin(startingMonth=1).is_anchored()
         assert BQuarterBegin().is_anchored()
         assert not BQuarterBegin(2, startingMonth=1).is_anchored()
 
     def test_offset_corner_case(self):
+        """ """
         # corner
         offset = BQuarterBegin(n=-1, startingMonth=1)
         assert datetime(2007, 4, 3) + offset == datetime(2007, 4, 2)
@@ -807,15 +961,28 @@
 
     @pytest.mark.parametrize("case", offset_cases)
     def test_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, cases = case
         for base, expected in cases.items():
             assert_offset_equal(offset, base, expected)
 
 
 class TestBQuarterEnd(Base):
+    """ """
     _offset = BQuarterEnd
 
     def test_repr(self):
+        """ """
         expected = "<BusinessQuarterEnd: startingMonth=3>"
         assert repr(BQuarterEnd()) == expected
         expected = "<BusinessQuarterEnd: startingMonth=3>"
@@ -824,11 +991,13 @@
         assert repr(BQuarterEnd(startingMonth=1)) == expected
 
     def test_is_anchored(self):
+        """ """
         assert BQuarterEnd(startingMonth=1).is_anchored()
         assert BQuarterEnd().is_anchored()
         assert not BQuarterEnd(2, startingMonth=1).is_anchored()
 
     def test_offset_corner_case(self):
+        """ """
         # corner
         offset = BQuarterEnd(n=-1, startingMonth=1)
         assert datetime(2010, 1, 31) + offset == datetime(2010, 1, 29)
@@ -915,6 +1084,17 @@
 
     @pytest.mark.parametrize("case", offset_cases)
     def test_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, cases = case
         for base, expected in cases.items():
             assert_offset_equal(offset, base, expected)
@@ -951,6 +1131,17 @@
 
     @pytest.mark.parametrize("case", on_offset_cases)
     def test_is_on_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, dt, expected = case
         assert_is_on_offset(offset, dt, expected)
 
@@ -960,9 +1151,11 @@
 
 
 class TestYearBegin(Base):
+    """ """
     _offset = YearBegin
 
     def test_misspecified(self):
+        """ """
         with pytest.raises(ValueError, match="Month must go from 1 to 12"):
             YearBegin(month=13)
 
@@ -1096,6 +1289,17 @@
 
     @pytest.mark.parametrize("case", offset_cases)
     def test_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, cases = case
         for base, expected in cases.items():
             assert_offset_equal(offset, base, expected)
@@ -1109,14 +1313,27 @@
 
     @pytest.mark.parametrize("case", on_offset_cases)
     def test_is_on_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, dt, expected = case
         assert_is_on_offset(offset, dt, expected)
 
 
 class TestYearEnd(Base):
+    """ """
     _offset = YearEnd
 
     def test_misspecified(self):
+        """ """
         with pytest.raises(ValueError, match="Month must go from 1 to 12"):
             YearEnd(month=13)
 
@@ -1173,6 +1390,17 @@
 
     @pytest.mark.parametrize("case", offset_cases)
     def test_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, cases = case
         for base, expected in cases.items():
             assert_offset_equal(offset, base, expected)
@@ -1186,11 +1414,23 @@
 
     @pytest.mark.parametrize("case", on_offset_cases)
     def test_is_on_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, dt, expected = case
         assert_is_on_offset(offset, dt, expected)
 
 
 class TestYearEndDiffMonth(Base):
+    """ """
     offset_cases = []
     offset_cases.append(
         (
@@ -1245,6 +1485,17 @@
 
     @pytest.mark.parametrize("case", offset_cases)
     def test_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, cases = case
         for base, expected in cases.items():
             assert_offset_equal(offset, base, expected)
@@ -1258,14 +1509,27 @@
 
     @pytest.mark.parametrize("case", on_offset_cases)
     def test_is_on_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, dt, expected = case
         assert_is_on_offset(offset, dt, expected)
 
 
 class TestBYearBegin(Base):
+    """ """
     _offset = BYearBegin
 
     def test_misspecified(self):
+        """ """
         msg = "Month must go from 1 to 12"
         with pytest.raises(ValueError, match=msg):
             BYearBegin(month=13)
@@ -1330,12 +1594,24 @@
 
     @pytest.mark.parametrize("case", offset_cases)
     def test_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, cases = case
         for base, expected in cases.items():
             assert_offset_equal(offset, base, expected)
 
 
 class TestBYearEnd(Base):
+    """ """
     _offset = BYearEnd
 
     offset_cases = []
@@ -1391,6 +1667,17 @@
 
     @pytest.mark.parametrize("case", offset_cases)
     def test_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, cases = case
         for base, expected in cases.items():
             assert_offset_equal(offset, base, expected)
@@ -1404,14 +1691,27 @@
 
     @pytest.mark.parametrize("case", on_offset_cases)
     def test_is_on_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, dt, expected = case
         assert_is_on_offset(offset, dt, expected)
 
 
 class TestBYearEndLagged(Base):
+    """ """
     _offset = BYearEnd
 
     def test_bad_month_fail(self):
+        """ """
         msg = "Month must go from 1 to 12"
         with pytest.raises(ValueError, match=msg):
             BYearEnd(month=13)
@@ -1441,11 +1741,23 @@
 
     @pytest.mark.parametrize("case", offset_cases)
     def test_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, cases = case
         for base, expected in cases.items():
             assert_offset_equal(offset, base, expected)
 
     def test_roll(self):
+        """ """
         offset = BYearEnd(month=6)
         date = datetime(2009, 11, 30)
 
@@ -1459,5 +1771,16 @@
 
     @pytest.mark.parametrize("case", on_offset_cases)
     def test_is_on_offset(self, case):
+        """
+
+        Parameters
+        ----------
+        case :
+            
+
+        Returns
+        -------
+
+        """
         offset, dt, expected = case
         assert_is_on_offset(offset, dt, expected)
