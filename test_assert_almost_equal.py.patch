# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/util/test_assert_almost_equal.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/util/test_assert_almost_equal.py
@@ -6,36 +6,44 @@
 
 
 def _assert_almost_equal_both(a, b, **kwargs):
-    """
-    Check that two objects are approximately equal.
-
+    """Check that two objects are approximately equal.
+    
     This check is performed commutatively.
 
     Parameters
     ----------
-    a : object
-        The first object to compare.
-    b : object
-        The second object to compare.
-    **kwargs
-        The arguments passed to `tm.assert_almost_equal`.
+    a :
+        
+    b :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    
     """
     tm.assert_almost_equal(a, b, **kwargs)
     tm.assert_almost_equal(b, a, **kwargs)
 
 
 def _assert_not_almost_equal(a, b, **kwargs):
-    """
-    Check that two objects are not approximately equal.
-
-    Parameters
-    ----------
-    a : object
-        The first object to compare.
-    b : object
-        The second object to compare.
-    **kwargs
-        The arguments passed to `tm.assert_almost_equal`.
+    """Check that two objects are not approximately equal.
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    
     """
     try:
         tm.assert_almost_equal(a, b, **kwargs)
@@ -46,19 +54,23 @@
 
 
 def _assert_not_almost_equal_both(a, b, **kwargs):
-    """
-    Check that two objects are not approximately equal.
-
+    """Check that two objects are not approximately equal.
+    
     This check is performed commutatively.
 
     Parameters
     ----------
-    a : object
-        The first object to compare.
-    b : object
-        The second object to compare.
-    **kwargs
-        The arguments passed to `tm.assert_almost_equal`.
+    a :
+        
+    b :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    
     """
     _assert_not_almost_equal(a, b, **kwargs)
     _assert_not_almost_equal(b, a, **kwargs)
@@ -69,6 +81,21 @@
     [(1.1, 1.1, False), (1.1, 1.100001, True), (1.1, 1.1001, 2)],
 )
 def test_assert_almost_equal_deprecated(a, b, check_less_precise):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+    check_less_precise :
+        
+
+    Returns
+    -------
+
+    """
     # GH#30562
     with tm.assert_produces_warning(FutureWarning):
         _assert_almost_equal_both(a, b, check_less_precise=check_less_precise)
@@ -85,6 +112,19 @@
     ],
 )
 def test_assert_almost_equal_numbers(a, b):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
+    """
     _assert_almost_equal_both(a, b)
 
 
@@ -101,6 +141,19 @@
     ],
 )
 def test_assert_not_almost_equal_numbers(a, b):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
+    """
     _assert_not_almost_equal_both(a, b)
 
 
@@ -117,12 +170,38 @@
     ],
 )
 def test_assert_almost_equal_numbers_atol(a, b):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
+    """
     # Equivalent to the deprecated check_less_precise=True
     _assert_almost_equal_both(a, b, rtol=0.5e-3, atol=0.5e-3)
 
 
 @pytest.mark.parametrize("a,b", [(1.1, 1.11), (0.1, 0.101), (0.000011, 0.001012)])
 def test_assert_not_almost_equal_numbers_atol(a, b):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
+    """
     _assert_not_almost_equal_both(a, b, atol=1e-3)
 
 
@@ -138,26 +217,91 @@
     ],
 )
 def test_assert_almost_equal_numbers_rtol(a, b):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
+    """
     _assert_almost_equal_both(a, b, rtol=0.05)
 
 
 @pytest.mark.parametrize("a,b", [(0.000011, 0.000012), (0.000001, 0.000005)])
 def test_assert_not_almost_equal_numbers_rtol(a, b):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
+    """
     _assert_not_almost_equal_both(a, b, rtol=0.05)
 
 
 @pytest.mark.parametrize("a,b", [(0, 0), (0, 0.0), (0, np.float64(0)), (0.00000001, 0)])
 def test_assert_almost_equal_numbers_with_zeros(a, b):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
+    """
     _assert_almost_equal_both(a, b)
 
 
 @pytest.mark.parametrize("a,b", [(0.001, 0), (1, 0)])
 def test_assert_not_almost_equal_numbers_with_zeros(a, b):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
+    """
     _assert_not_almost_equal_both(a, b)
 
 
 @pytest.mark.parametrize("a,b", [(1, "abc"), (1, [1]), (1, object())])
 def test_assert_not_almost_equal_numbers_with_mixed(a, b):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
+    """
     _assert_not_almost_equal_both(a, b)
 
 
@@ -168,6 +312,19 @@
     "right_dtype", ["M8[ns]", "m8[ns]", "float64", "int64", "object"]
 )
 def test_assert_almost_equal_edge_case_ndarrays(left_dtype, right_dtype):
+    """
+
+    Parameters
+    ----------
+    left_dtype :
+        
+    right_dtype :
+        
+
+    Returns
+    -------
+
+    """
     # Empty compare.
     _assert_almost_equal_both(
         np.array([], dtype=left_dtype),
@@ -177,6 +334,7 @@
 
 
 def test_assert_almost_equal_dicts():
+    """ """
     _assert_almost_equal_both({"a": 1, "b": 2}, {"a": 1, "b": 2})
 
 
@@ -191,16 +349,42 @@
     ],
 )
 def test_assert_not_almost_equal_dicts(a, b):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
+    """
     _assert_not_almost_equal_both(a, b)
 
 
 @pytest.mark.parametrize("val", [1, 2])
 def test_assert_almost_equal_dict_like_object(val):
+    """
+
+    Parameters
+    ----------
+    val :
+        
+
+    Returns
+    -------
+
+    """
     dict_val = 1
     real_dict = dict(a=val)
 
     class DictLikeObj:
+        """ """
         def keys(self):
+            """ """
             return ("a",)
 
         def __getitem__(self, item):
@@ -214,6 +398,7 @@
 
 
 def test_assert_almost_equal_strings():
+    """ """
     _assert_almost_equal_both("abc", "abc")
 
 
@@ -221,6 +406,19 @@
     "a,b", [("abc", "abcd"), ("abc", "abd"), ("abc", 1), ("abc", [1])]
 )
 def test_assert_not_almost_equal_strings(a, b):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
+    """
     _assert_not_almost_equal_both(a, b)
 
 
@@ -228,6 +426,19 @@
     "a,b", [([1, 2, 3], [1, 2, 3]), (np.array([1, 2, 3]), np.array([1, 2, 3]))]
 )
 def test_assert_almost_equal_iterables(a, b):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
+    """
     _assert_almost_equal_both(a, b)
 
 
@@ -246,15 +457,42 @@
     ],
 )
 def test_assert_not_almost_equal_iterables(a, b):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
+    """
     _assert_not_almost_equal(a, b)
 
 
 def test_assert_almost_equal_null():
+    """ """
     _assert_almost_equal_both(None, None)
 
 
 @pytest.mark.parametrize("a,b", [(None, np.NaN), (None, 0), (np.NaN, 0)])
 def test_assert_not_almost_equal_null(a, b):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
+    """
     _assert_not_almost_equal(a, b)
 
 
@@ -271,10 +509,24 @@
     ],
 )
 def test_assert_almost_equal_inf(a, b):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
+    """
     _assert_almost_equal_both(a, b)
 
 
 def test_assert_not_almost_equal_inf():
+    """ """
     _assert_not_almost_equal_both(np.inf, 0)
 
 
@@ -288,16 +540,31 @@
     ],
 )
 def test_assert_almost_equal_pandas(a, b):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
+    """
     _assert_almost_equal_both(a, b)
 
 
 def test_assert_almost_equal_object():
+    """ """
     a = [Timestamp("2011-01-01"), Timestamp("2011-01-01")]
     b = [Timestamp("2011-01-01"), Timestamp("2011-01-01")]
     _assert_almost_equal_both(a, b)
 
 
 def test_assert_almost_equal_value_mismatch():
+    """ """
     msg = "expected 2\\.00000 but got 1\\.00000, with rtol=1e-05, atol=1e-08"
 
     with pytest.raises(AssertionError, match=msg):
@@ -310,44 +577,76 @@
 )
 def test_assert_almost_equal_class_mismatch(a, b, klass1, klass2):
 
-    msg = f"""numpy array are different
-
-numpy array classes are different
-\\[left\\]:  {klass1}
-\\[right\\]: {klass2}"""
+    """msg = f"""numpy array are different
+    
+    numpy array classes are different
+    \\[left\\]:  {klass1}
+    \\[right\\]: {klass2}
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+    klass1 :
+        
+    klass2 :
+        
+
+    Returns
+    -------
 
     with pytest.raises(AssertionError, match=msg):
         tm.assert_almost_equal(a, b)
 
 
 def test_assert_almost_equal_value_mismatch1():
-    msg = """numpy array are different
-
-numpy array values are different \\(66\\.66667 %\\)
-\\[left\\]:  \\[nan, 2\\.0, 3\\.0\\]
-\\[right\\]: \\[1\\.0, nan, 3\\.0\\]"""
+    """msg = """numpy array are different
+    
+    numpy array values are different \\(66\\.66667 %\\)
+    \\[left\\]:  \\[nan, 2\\.0, 3\\.0\\]
+    \\[right\\]: \\[1\\.0, nan, 3\\.0\\]
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     with pytest.raises(AssertionError, match=msg):
         tm.assert_almost_equal(np.array([np.nan, 2, 3]), np.array([1, np.nan, 3]))
 
 
 def test_assert_almost_equal_value_mismatch2():
-    msg = """numpy array are different
-
-numpy array values are different \\(50\\.0 %\\)
-\\[left\\]:  \\[1, 2\\]
-\\[right\\]: \\[1, 3\\]"""
+    """msg = """numpy array are different
+    
+    numpy array values are different \\(50\\.0 %\\)
+    \\[left\\]:  \\[1, 2\\]
+    \\[right\\]: \\[1, 3\\]
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     with pytest.raises(AssertionError, match=msg):
         tm.assert_almost_equal(np.array([1, 2]), np.array([1, 3]))
 
 
 def test_assert_almost_equal_value_mismatch3():
-    msg = """numpy array are different
-
-numpy array values are different \\(16\\.66667 %\\)
-\\[left\\]:  \\[\\[1, 2\\], \\[3, 4\\], \\[5, 6\\]\\]
-\\[right\\]: \\[\\[1, 3\\], \\[3, 4\\], \\[5, 6\\]\\]"""
+    """msg = """numpy array are different
+    
+    numpy array values are different \\(16\\.66667 %\\)
+    \\[left\\]:  \\[\\[1, 2\\], \\[3, 4\\], \\[5, 6\\]\\]
+    \\[right\\]: \\[\\[1, 3\\], \\[3, 4\\], \\[5, 6\\]\\]
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     with pytest.raises(AssertionError, match=msg):
         tm.assert_almost_equal(
@@ -356,27 +655,40 @@
 
 
 def test_assert_almost_equal_value_mismatch4():
-    msg = """numpy array are different
-
-numpy array values are different \\(25\\.0 %\\)
-\\[left\\]:  \\[\\[1, 2\\], \\[3, 4\\]\\]
-\\[right\\]: \\[\\[1, 3\\], \\[3, 4\\]\\]"""
+    """msg = """numpy array are different
+    
+    numpy array values are different \\(25\\.0 %\\)
+    \\[left\\]:  \\[\\[1, 2\\], \\[3, 4\\]\\]
+    \\[right\\]: \\[\\[1, 3\\], \\[3, 4\\]\\]
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     with pytest.raises(AssertionError, match=msg):
         tm.assert_almost_equal(np.array([[1, 2], [3, 4]]), np.array([[1, 3], [3, 4]]))
 
 
 def test_assert_almost_equal_shape_mismatch_override():
-    msg = """Index are different
-
-Index shapes are different
-\\[left\\]:  \\(2L*,\\)
-\\[right\\]: \\(3L*,\\)"""
+    """msg = """Index are different
+    
+    Index shapes are different
+    \\[left\\]:  \\(2L*,\\)
+    \\[right\\]: \\(3L*,\\)
+
+    Parameters
+    ----------
+
+    Returns
+    -------
     with pytest.raises(AssertionError, match=msg):
         tm.assert_almost_equal(np.array([1, 2]), np.array([3, 4, 5]), obj="Index")
 
 
 def test_assert_almost_equal_unicode():
+    """ """
     # see gh-20503
     msg = """numpy array are different
 
@@ -389,6 +701,7 @@
 
 
 def test_assert_almost_equal_timestamp():
+    """ """
     a = np.array([Timestamp("2011-01-01"), Timestamp("2011-01-01")])
     b = np.array([Timestamp("2011-01-01"), Timestamp("2011-01-02")])
 
@@ -403,22 +716,34 @@
 
 
 def test_assert_almost_equal_iterable_length_mismatch():
-    msg = """Iterable are different
-
-Iterable length are different
-\\[left\\]:  2
-\\[right\\]: 3"""
+    """msg = """Iterable are different
+    
+    Iterable length are different
+    \\[left\\]:  2
+    \\[right\\]: 3
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     with pytest.raises(AssertionError, match=msg):
         tm.assert_almost_equal([1, 2], [3, 4, 5])
 
 
 def test_assert_almost_equal_iterable_values_mismatch():
-    msg = """Iterable are different
-
-Iterable values are different \\(50\\.0 %\\)
-\\[left\\]:  \\[1, 2\\]
-\\[right\\]: \\[1, 3\\]"""
+    """msg = """Iterable are different
+    
+    Iterable values are different \\(50\\.0 %\\)
+    \\[left\\]:  \\[1, 2\\]
+    \\[right\\]: \\[1, 3\\]
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     with pytest.raises(AssertionError, match=msg):
         tm.assert_almost_equal([1, 2], [1, 3])
