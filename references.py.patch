# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jedi/inference/references.py
+++ b/..//venv/lib/python3.8/site-packages/jedi/inference/references.py
@@ -27,6 +27,19 @@
 
 
 def _resolve_names(definition_names, avoid_names=()):
+    """
+
+    Parameters
+    ----------
+    definition_names :
+        
+    avoid_names :
+         (Default value = ())
+
+    Returns
+    -------
+
+    """
     for name in definition_names:
         if name in avoid_names:
             # Avoiding recursions here, because goto on a module name lands
@@ -44,6 +57,17 @@
 
 
 def _dictionarize(names):
+    """
+
+    Parameters
+    ----------
+    names :
+        
+
+    Returns
+    -------
+
+    """
     return dict(
         (n if n.tree_name is None else n.tree_name, n)
         for n in names
@@ -51,6 +75,19 @@
 
 
 def _find_defining_names(module_context, tree_name):
+    """
+
+    Parameters
+    ----------
+    module_context :
+        
+    tree_name :
+        
+
+    Returns
+    -------
+
+    """
     found_names = _find_names(module_context, tree_name)
 
     for name in list(found_names):
@@ -71,6 +108,19 @@
 
 
 def _find_names(module_context, tree_name):
+    """
+
+    Parameters
+    ----------
+    module_context :
+        
+    tree_name :
+        
+
+    Returns
+    -------
+
+    """
     name = module_context.create_name(tree_name)
     found_names = set(name.goto())
     found_names.add(name)
@@ -79,6 +129,19 @@
 
 
 def _add_names_in_same_context(context, string_name):
+    """
+
+    Parameters
+    ----------
+    context :
+        
+    string_name :
+        
+
+    Returns
+    -------
+
+    """
     if context.tree_node is None:
         return
 
@@ -98,6 +161,19 @@
 
 
 def _find_global_variables(names, search_name):
+    """
+
+    Parameters
+    ----------
+    names :
+        
+    search_name :
+        
+
+    Returns
+    -------
+
+    """
     for name in names:
         if name.tree_name is None:
             continue
@@ -115,6 +191,21 @@
 
 
 def find_references(module_context, tree_name, only_in_module=False):
+    """
+
+    Parameters
+    ----------
+    module_context :
+        
+    tree_name :
+        
+    only_in_module :
+         (Default value = False)
+
+    Returns
+    -------
+
+    """
     inf = module_context.inference_state
     search_name = tree_name.value
 
@@ -169,6 +260,21 @@
 
 
 def _check_fs(inference_state, file_io, regex):
+    """
+
+    Parameters
+    ----------
+    inference_state :
+        
+    file_io :
+        
+    regex :
+        
+
+    Returns
+    -------
+
+    """
     try:
         code = file_io.read()
     except FileNotFoundError:
@@ -184,6 +290,19 @@
 
 
 def gitignored_lines(folder_io, file_io):
+    """
+
+    Parameters
+    ----------
+    folder_io :
+        
+    file_io :
+        
+
+    Returns
+    -------
+
+    """
     ignored_paths = set()
     ignored_names = set()
     for l in file_io.read().splitlines():
@@ -202,6 +321,19 @@
 
 
 def recurse_find_python_folders_and_files(folder_io, except_paths=()):
+    """
+
+    Parameters
+    ----------
+    folder_io :
+        
+    except_paths :
+         (Default value = ())
+
+    Returns
+    -------
+
+    """
     except_paths = set(except_paths)
     for root_folder_io, folder_ios, file_ios in folder_io.walk():
         # Delete folders that we don't want to iterate over.
@@ -227,12 +359,38 @@
 
 
 def recurse_find_python_files(folder_io, except_paths=()):
+    """
+
+    Parameters
+    ----------
+    folder_io :
+        
+    except_paths :
+         (Default value = ())
+
+    Returns
+    -------
+
+    """
     for folder_io, file_io in recurse_find_python_folders_and_files(folder_io, except_paths):
         if file_io is not None:
             yield file_io
 
 
 def _find_python_files_in_sys_path(inference_state, module_contexts):
+    """
+
+    Parameters
+    ----------
+    inference_state :
+        
+    module_contexts :
+        
+
+    Returns
+    -------
+
+    """
     sys_path = inference_state.get_sys_path()
     except_paths = set()
     yielded_paths = [m.py__file__() for m in module_contexts]
@@ -255,11 +413,23 @@
 
 def get_module_contexts_containing_name(inference_state, module_contexts, name,
                                         limit_reduction=1):
-    """
-    Search a name in the directories of modules.
-
-    :param limit_reduction: Divides the limits on opening/parsing files by this
-        factor.
+    """Search a name in the directories of modules.
+
+    Parameters
+    ----------
+    limit_reduction :
+        Divides the limits on opening/parsing files by this
+        factor. (Default value = 1)
+    inference_state :
+        
+    module_contexts :
+        
+    name :
+        
+
+    Returns
+    -------
+
     """
     # Skip non python modules
     for module_context in module_contexts:
@@ -279,6 +449,23 @@
 
 
 def search_in_file_ios(inference_state, file_io_iterator, name, limit_reduction=1):
+    """
+
+    Parameters
+    ----------
+    inference_state :
+        
+    file_io_iterator :
+        
+    name :
+        
+    limit_reduction :
+         (Default value = 1)
+
+    Returns
+    -------
+
+    """
     parse_limit = _PARSED_FILE_LIMIT / limit_reduction
     open_limit = _OPENED_FILE_LIMIT / limit_reduction
     file_io_count = 0
