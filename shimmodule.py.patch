# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/utils/shimmodule.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/utils/shimmodule.py
@@ -18,18 +18,49 @@
     
     This ensures that submodule imports return the real target module,
     not a clone that will confuse `is` and `isinstance` checks.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     def __init__(self, src, mirror):
         self.src = src
         self.mirror = mirror
     
     def _mirror_name(self, fullname):
-        """get the name of the mirrored module"""
+        """get the name of the mirrored module
+
+        Parameters
+        ----------
+        fullname :
+            
+
+        Returns
+        -------
+
+        """
         
         return self.mirror + fullname[len(self.src):]
 
     def find_module(self, fullname, path=None):
-        """Return self if we should be used to import the module."""
+        """
+
+        Parameters
+        ----------
+        fullname :
+            
+        path :
+             (Default value = None)
+
+        Returns
+        -------
+        type
+            
+
+        """
         if fullname.startswith(self.src + '.'):
             mirror_name = self._mirror_name(fullname)
             try:
@@ -43,7 +74,17 @@
                 return self
 
     def load_module(self, fullname):
-        """Import the mirrored module, and insert it into sys.modules"""
+        """Import the mirrored module, and insert it into sys.modules
+
+        Parameters
+        ----------
+        fullname :
+            
+
+        Returns
+        -------
+
+        """
         mirror_name = self._mirror_name(fullname)
         mod = import_item(mirror_name)
         sys.modules[fullname] = mod
@@ -51,6 +92,7 @@
 
 
 class ShimModule(types.ModuleType):
+    """ """
 
     def __init__(self, *args, **kwargs):
         self._mirror = kwargs.pop("mirror")
