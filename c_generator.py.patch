# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pycparser/c_generator.py
+++ b/..//venv/lib/python3.8/site-packages/pycparser/c_generator.py
@@ -10,9 +10,16 @@
 
 
 class CGenerator(object):
-    """ Uses the same visitor pattern as c_ast.NodeVisitor, but modified to
-        return a value from each visit method, using string accumulation in
+    """Uses the same visitor pattern as c_ast.NodeVisitor, but modified to
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+    type
         generic_visit.
+
     """
     def __init__(self):
         # Statements start with indentation of self.indent_level spaces, using
@@ -21,13 +28,36 @@
         self.indent_level = 0
 
     def _make_indent(self):
+        """ """
         return ' ' * self.indent_level
 
     def visit(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         method = 'visit_' + node.__class__.__name__
         return getattr(self, method, self.generic_visit)(node)
 
     def generic_visit(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         #~ print('generic:', type(node))
         if node is None:
             return ''
@@ -35,30 +65,107 @@
             return ''.join(self.visit(c) for c_name, c in node.children())
 
     def visit_Constant(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         return n.value
 
     def visit_ID(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         return n.name
 
     def visit_Pragma(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         ret = '#pragma'
         if n.string:
             ret += ' ' + n.string
         return ret
 
     def visit_ArrayRef(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         arrref = self._parenthesize_unless_simple(n.name)
         return arrref + '[' + self.visit(n.subscript) + ']'
 
     def visit_StructRef(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         sref = self._parenthesize_unless_simple(n.name)
         return sref + n.type + self.visit(n.field)
 
     def visit_FuncCall(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         fref = self._parenthesize_unless_simple(n.name)
         return fref + '(' + self.visit(n.args) + ')'
 
     def visit_UnaryOp(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         operand = self._parenthesize_unless_simple(n.expr)
         if n.op == 'p++':
             return '%s++' % operand
@@ -72,6 +179,17 @@
             return '%s%s' % (n.op, operand)
 
     def visit_BinaryOp(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         lval_str = self._parenthesize_if(n.left,
                             lambda d: not self._is_simple_node(d))
         rval_str = self._parenthesize_if(n.right,
@@ -79,15 +197,48 @@
         return '%s %s %s' % (lval_str, n.op, rval_str)
 
     def visit_Assignment(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         rval_str = self._parenthesize_if(
                             n.rvalue,
                             lambda n: isinstance(n, c_ast.Assignment))
         return '%s %s %s' % (self.visit(n.lvalue), n.op, rval_str)
 
     def visit_IdentifierType(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         return ' '.join(n.names)
 
     def _visit_expr(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         if isinstance(n, c_ast.InitList):
             return '{' + self.visit(n) + '}'
         elif isinstance(n, c_ast.ExprList):
@@ -96,6 +247,19 @@
             return self.visit(n)
 
     def visit_Decl(self, n, no_type=False):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+        no_type :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         # no_type is used when a Decl is part of a DeclList, where the type is
         # explicitly only for the first declaration in a list.
         #
@@ -106,6 +270,17 @@
         return s
 
     def visit_DeclList(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         s = self.visit(n.decls[0])
         if len(n.decls) > 1:
             s += ', ' + ', '.join(self.visit_Decl(decl, no_type=True)
@@ -113,31 +288,97 @@
         return s
 
     def visit_Typedef(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         s = ''
         if n.storage: s += ' '.join(n.storage) + ' '
         s += self._generate_type(n.type)
         return s
 
     def visit_Cast(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         s = '(' + self._generate_type(n.to_type, emit_declname=False) + ')'
         return s + ' ' + self._parenthesize_unless_simple(n.expr)
 
     def visit_ExprList(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         visited_subexprs = []
         for expr in n.exprs:
             visited_subexprs.append(self._visit_expr(expr))
         return ', '.join(visited_subexprs)
 
     def visit_InitList(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         visited_subexprs = []
         for expr in n.exprs:
             visited_subexprs.append(self._visit_expr(expr))
         return ', '.join(visited_subexprs)
 
     def visit_Enum(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         return self._generate_struct_union_enum(n, name='enum')
 
     def visit_Enumerator(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         if not n.value:
             return '{indent}{name},\n'.format(
                 indent=self._make_indent(),
@@ -151,6 +392,17 @@
             )
 
     def visit_FuncDef(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         decl = self.visit(n.decl)
         self.indent_level = 0
         body = self.visit(n.body)
@@ -161,6 +413,17 @@
             return decl + '\n' + body + '\n'
 
     def visit_FileAST(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         s = ''
         for ext in n.ext:
             if isinstance(ext, c_ast.FuncDef):
@@ -172,6 +435,17 @@
         return s
 
     def visit_Compound(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         s = self._make_indent() + '{\n'
         self.indent_level += 2
         if n.block_items:
@@ -181,33 +455,121 @@
         return s
 
     def visit_CompoundLiteral(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         return '(' + self.visit(n.type) + '){' + self.visit(n.init) + '}'
 
 
     def visit_EmptyStatement(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         return ';'
 
     def visit_ParamList(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         return ', '.join(self.visit(param) for param in n.params)
 
     def visit_Return(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         s = 'return'
         if n.expr: s += ' ' + self.visit(n.expr)
         return s + ';'
 
     def visit_Break(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         return 'break;'
 
     def visit_Continue(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         return 'continue;'
 
     def visit_TernaryOp(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         s  = '(' + self._visit_expr(n.cond) + ') ? '
         s += '(' + self._visit_expr(n.iftrue) + ') : '
         s += '(' + self._visit_expr(n.iffalse) + ')'
         return s
 
     def visit_If(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         s = 'if ('
         if n.cond: s += self.visit(n.cond)
         s += ')\n'
@@ -218,6 +580,17 @@
         return s
 
     def visit_For(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         s = 'for ('
         if n.init: s += self.visit(n.init)
         s += ';'
@@ -229,6 +602,17 @@
         return s
 
     def visit_While(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         s = 'while ('
         if n.cond: s += self.visit(n.cond)
         s += ')\n'
@@ -236,6 +620,17 @@
         return s
 
     def visit_DoWhile(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         s = 'do\n'
         s += self._generate_stmt(n.stmt, add_indent=True)
         s += self._make_indent() + 'while ('
@@ -244,41 +639,151 @@
         return s
 
     def visit_Switch(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         s = 'switch (' + self.visit(n.cond) + ')\n'
         s += self._generate_stmt(n.stmt, add_indent=True)
         return s
 
     def visit_Case(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         s = 'case ' + self.visit(n.expr) + ':\n'
         for stmt in n.stmts:
             s += self._generate_stmt(stmt, add_indent=True)
         return s
 
     def visit_Default(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         s = 'default:\n'
         for stmt in n.stmts:
             s += self._generate_stmt(stmt, add_indent=True)
         return s
 
     def visit_Label(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         return n.name + ':\n' + self._generate_stmt(n.stmt)
 
     def visit_Goto(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         return 'goto ' + n.name + ';'
 
     def visit_EllipsisParam(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         return '...'
 
     def visit_Struct(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         return self._generate_struct_union_enum(n, 'struct')
 
     def visit_Typename(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         return self._generate_type(n.type)
 
     def visit_Union(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         return self._generate_struct_union_enum(n, 'union')
 
     def visit_NamedInitializer(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         s = ''
         for name in n.name:
             if isinstance(name, c_ast.ID):
@@ -289,20 +794,75 @@
         return s
 
     def visit_FuncDecl(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         return self._generate_type(n)
 
     def visit_ArrayDecl(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         return self._generate_type(n, emit_declname=False)
 
     def visit_TypeDecl(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         return self._generate_type(n, emit_declname=False)
 
     def visit_PtrDecl(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         return self._generate_type(n, emit_declname=False)
 
     def _generate_struct_union_enum(self, n, name):
-        """ Generates code for structs, unions, and enums. name should be
+        """Generates code for structs, unions, and enums. name should be
             'struct', 'union', or 'enum'.
+
+        Parameters
+        ----------
+        n :
+            
+        name :
+            
+
+        Returns
+        -------
+
         """
         if name in ('struct', 'union'):
             members = n.decls
@@ -325,16 +885,49 @@
         return s
 
     def _generate_struct_union_body(self, members):
+        """
+
+        Parameters
+        ----------
+        members :
+            
+
+        Returns
+        -------
+
+        """
         return ''.join(self._generate_stmt(decl) for decl in members)
 
     def _generate_enum_body(self, members):
+        """
+
+        Parameters
+        ----------
+        members :
+            
+
+        Returns
+        -------
+
+        """
         # `[:-2] + '\n'` removes the final `,` from the enumerator list
         return ''.join(self.visit(value) for value in members)[:-2] + '\n'
 
     def _generate_stmt(self, n, add_indent=False):
-        """ Generation from a statement node. This method exists as a wrapper
+        """Generation from a statement node. This method exists as a wrapper
             for individual visit_* methods to handle different treatment of
             some statements in this context.
+
+        Parameters
+        ----------
+        n :
+            
+        add_indent :
+             (Default value = False)
+
+        Returns
+        -------
+
         """
         typ = type(n)
         if add_indent: self.indent_level += 2
@@ -360,7 +953,16 @@
             return indent + self.visit(n) + '\n'
 
     def _generate_decl(self, n):
-        """ Generation from a Decl node.
+        """Generation from a Decl node.
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
         """
         s = ''
         if n.funcspec: s = ' '.join(n.funcspec) + ' '
@@ -369,10 +971,23 @@
         return s
 
     def _generate_type(self, n, modifiers=[], emit_declname = True):
-        """ Recursive generation from a type node. n is the type node.
+        """Recursive generation from a type node. n is the type node.
             modifiers collects the PtrDecl, ArrayDecl and FuncDecl modifiers
             encountered on the way down to a TypeDecl, to allow proper
             generation from it.
+
+        Parameters
+        ----------
+        n :
+            
+        modifiers :
+             (Default value = [])
+        emit_declname :
+             (Default value = True)
+
+        Returns
+        -------
+
         """
         typ = type(n)
         #~ print(n, modifiers)
@@ -422,8 +1037,19 @@
             return self.visit(n)
 
     def _parenthesize_if(self, n, condition):
-        """ Visits 'n' and returns its string representation, parenthesized
+        """Visits 'n' and returns its string representation, parenthesized
             if the condition function applied to the node returns True.
+
+        Parameters
+        ----------
+        n :
+            
+        condition :
+            
+
+        Returns
+        -------
+
         """
         s = self._visit_expr(n)
         if condition(n):
@@ -432,13 +1058,31 @@
             return s
 
     def _parenthesize_unless_simple(self, n):
-        """ Common use case for _parenthesize_if
+        """Common use case for _parenthesize_if
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
         """
         return self._parenthesize_if(n, lambda d: not self._is_simple_node(d))
 
     def _is_simple_node(self, n):
-        """ Returns True for nodes that are "simple" - i.e. nodes that always
+        """Returns True for nodes that are "simple" - i.e. nodes that always
             have higher precedence than operators.
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
         """
         return isinstance(n, (c_ast.Constant, c_ast.ID, c_ast.ArrayRef,
                               c_ast.StructRef, c_ast.FuncCall))
