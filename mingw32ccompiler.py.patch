# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/distutils/mingw32ccompiler.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/distutils/mingw32ccompiler.py
@@ -47,9 +47,7 @@
 
 # the same as cygwin plus some additional parameters
 class Mingw32CCompiler(distutils.cygwinccompiler.CygwinCCompiler):
-    """ A modified MingW32 compiler compatible with an MSVC built Python.
-
-    """
+    """A modified MingW32 compiler compatible with an MSVC built Python."""
 
     compiler_type = 'mingw32'
 
@@ -176,6 +174,41 @@
              extra_postargs=None,
              build_temp=None,
              target_lang=None):
+        """
+
+        Parameters
+        ----------
+        target_desc :
+            
+        objects :
+            
+        output_filename :
+            
+        output_dir :
+            
+        libraries :
+            
+        library_dirs :
+            
+        runtime_library_dirs :
+            
+        export_symbols :
+             (Default value = None)
+        debug :
+             (Default value = 0)
+        extra_preargs :
+             (Default value = None)
+        extra_postargs :
+             (Default value = None)
+        build_temp :
+             (Default value = None)
+        target_lang :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         # Include the appropriate MSVC runtime library if Python was built
         # with MSVC >= 7.0 (MinGW standard is msvcrt)
         runtime_library = msvc_runtime_library()
@@ -208,6 +241,21 @@
                           source_filenames,
                           strip_dir=0,
                           output_dir=''):
+        """
+
+        Parameters
+        ----------
+        source_filenames :
+            
+        strip_dir :
+             (Default value = 0)
+        output_dir :
+             (Default value = '')
+
+        Returns
+        -------
+
+        """
         if output_dir is None: output_dir = ''
         obj_names = []
         for src_name in source_filenames:
@@ -240,6 +288,7 @@
 
 
 def find_python_dll():
+    """ """
     # We can't do much here:
     # - find it in the virtualenv (sys.prefix)
     # - find it in python main dir (sys.base_prefix, if in a virtualenv)
@@ -278,14 +327,37 @@
     raise ValueError("%s not found in %s" % (dllname, lib_dirs))
 
 def dump_table(dll):
+    """
+
+    Parameters
+    ----------
+    dll :
+        
+
+    Returns
+    -------
+
+    """
     st = subprocess.check_output(["objdump.exe", "-p", dll])
     return st.split(b'\n')
 
 def generate_def(dll, dfile):
     """Given a dll file location,  get all its exported symbols and dump them
     into the given def file.
-
-    The .def file will be overwritten"""
+    
+    The .def file will be overwritten
+
+    Parameters
+    ----------
+    dll :
+        
+    dfile :
+        
+
+    Returns
+    -------
+
+    """
     dump = dump_table(dll)
     for i in range(len(dump)):
         if _START.match(dump[i].decode()):
@@ -314,11 +386,33 @@
             d.write('%s\n' % s[1])
 
 def find_dll(dll_name):
+    """
+
+    Parameters
+    ----------
+    dll_name :
+        
+
+    Returns
+    -------
+
+    """
 
     arch = {'AMD64' : 'amd64',
             'Intel' : 'x86'}[get_build_architecture()]
 
     def _find_dll_in_winsxs(dll_name):
+        """
+
+        Parameters
+        ----------
+        dll_name :
+            
+
+        Returns
+        -------
+
+        """
         # Walk through the WinSxS directory to find the dll.
         winsxs_path = os.path.join(os.environ.get('WINDIR', r'C:\WINDOWS'),
                                    'winsxs')
@@ -330,6 +424,17 @@
         return None
 
     def _find_dll_in_path(dll_name):
+        """
+
+        Parameters
+        ----------
+        dll_name :
+            
+
+        Returns
+        -------
+
+        """
         # First, look in the Python directory, then scan PATH for
         # the given dll name.
         for path in [sys.prefix] + os.environ['PATH'].split(';'):
@@ -340,6 +445,17 @@
     return _find_dll_in_winsxs(dll_name) or _find_dll_in_path(dll_name)
 
 def build_msvcr_library(debug=False):
+    """
+
+    Parameters
+    ----------
+    debug :
+         (Default value = False)
+
+    Returns
+    -------
+
+    """
     if os.name != 'nt':
         return False
 
@@ -399,6 +515,7 @@
     return (not retcode)
 
 def build_import_library():
+    """ """
     if os.name != 'nt':
         return
 
@@ -447,6 +564,7 @@
     return (False, candidates[0])
 
 def _build_import_library_amd64():
+    """ """
     out_exists, out_file = _check_for_import_lib()
     if out_exists:
         log.debug('Skip building import library: "%s" exists', out_file)
@@ -467,8 +585,7 @@
     subprocess.check_call(cmd)
 
 def _build_import_library_x86():
-    """ Build the import libraries for Mingw32-gcc on Windows
-    """
+    """Build the import libraries for Mingw32-gcc on Windows"""
     out_exists, out_file = _check_for_import_lib()
     if out_exists:
         log.debug('Skip building import library: "%s" exists', out_file)
@@ -557,7 +674,19 @@
 
 def msvc_manifest_xml(maj, min):
     """Given a major and minor version of the MSVCR, returns the
-    corresponding XML file."""
+    corresponding XML file.
+
+    Parameters
+    ----------
+    maj :
+        
+    min :
+        
+
+    Returns
+    -------
+
+    """
     try:
         fullver = _MSVCRVER_TO_FULLVER[str(maj * 10 + min)]
     except KeyError:
@@ -594,11 +723,15 @@
 
     Parameters
     ----------
-    name : str
-            name of the manifest file to embed
-    type : str {'dll', 'exe'}
-            type of the binary which will embed the manifest
-
+    name :
+        
+    type :
+         (Default value = 'dll')
+
+    Returns
+    -------
+
+    
     """
     if type == 'dll':
         rctype = 2
@@ -612,7 +745,17 @@
 %d RT_MANIFEST %s""" % (rctype, name)
 
 def check_embedded_msvcr_match_linked(msver):
-    """msver is the ms runtime version used for the MANIFEST."""
+    """msver is the ms runtime version used for the MANIFEST.
+
+    Parameters
+    ----------
+    msver :
+        
+
+    Returns
+    -------
+
+    """
     # check msvcr major version are the same for linking and
     # embedding
     maj = msvc_runtime_major()
@@ -624,21 +767,65 @@
                   "(%d)" % (int(msver), maj))
 
 def configtest_name(config):
+    """
+
+    Parameters
+    ----------
+    config :
+        
+
+    Returns
+    -------
+
+    """
     base = os.path.basename(config._gen_temp_sourcefile("yo", [], "c"))
     return os.path.splitext(base)[0]
 
 def manifest_name(config):
+    """
+
+    Parameters
+    ----------
+    config :
+        
+
+    Returns
+    -------
+
+    """
     # Get configest name (including suffix)
     root = configtest_name(config)
     exext = config.compiler.exe_extension
     return root + exext + ".manifest"
 
 def rc_name(config):
+    """
+
+    Parameters
+    ----------
+    config :
+        
+
+    Returns
+    -------
+
+    """
     # Get configtest name (including suffix)
     root = configtest_name(config)
     return root + ".rc"
 
 def generate_manifest(config):
+    """
+
+    Parameters
+    ----------
+    config :
+        
+
+    Returns
+    -------
+
+    """
     msver = get_build_msvc_version()
     if msver is not None:
         if msver >= 8:
