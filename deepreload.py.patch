# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/lib/deepreload.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/lib/deepreload.py
@@ -39,6 +39,17 @@
 
 @contextmanager
 def replace_import_hook(new_import):
+    """
+
+    Parameters
+    ----------
+    new_import :
+        
+
+    Returns
+    -------
+
+    """
     saved_import = builtin_mod.__import__
     builtin_mod.__import__ = new_import
     try:
@@ -47,16 +58,25 @@
         builtin_mod.__import__ = saved_import
 
 def get_parent(globals, level):
-    """
-    parent, name = get_parent(globals, level)
-
-    Return the package that an import is being performed in.  If globals comes
-    from the module foo.bar.bat (not itself a package), this returns the
-    sys.modules entry for foo.bar.  If globals is from a package's __init__.py,
-    the package's entry in sys.modules is returned.
-
-    If globals doesn't come from a package or a module in a package, or a
-    corresponding entry is not found in sys.modules, None is returned.
+    """parent, name = get_parent(globals, level)
+
+    Parameters
+    ----------
+    globals :
+        
+    level :
+        
+
+    Returns
+    -------
+    type
+        from the module foo.bar.bat (not itself a package), this returns the
+        sys.modules entry for foo.bar.  If globals is from a package's __init__.py,
+        the package's entry in sys.modules is returned.
+        
+        If globals doesn't come from a package or a module in a package, or a
+        corresponding entry is not found in sys.modules, None is returned.
+
     """
     orig_level = level
 
@@ -120,10 +140,24 @@
     return parent, name
 
 def load_next(mod, altmod, name, buf):
-    """
-    mod, name, buf = load_next(mod, altmod, name, buf)
-
+    """mod, name, buf = load_next(mod, altmod, name, buf)
+    
     altmod is either None or same as mod
+
+    Parameters
+    ----------
+    mod :
+        
+    altmod :
+        
+    name :
+        
+    buf :
+        
+
+    Returns
+    -------
+
     """
 
     if len(name) == 0:
@@ -162,7 +196,21 @@
 found_now = {}
 
 def import_submodule(mod, subname, fullname):
-    """m = import_submodule(mod, subname, fullname)"""
+    """m = import_submodule(mod, subname, fullname)
+
+    Parameters
+    ----------
+    mod :
+        
+    subname :
+        
+    fullname :
+        
+
+    Returns
+    -------
+
+    """
     # Require:
     # if mod == None: subname == fullname
     # else: mod.__name__ + "." + subname == fullname
@@ -207,7 +255,23 @@
     return m
 
 def add_submodule(mod, submod, fullname, subname):
-    """mod.{subname} = submod"""
+    """mod.{subname} = submod
+
+    Parameters
+    ----------
+    mod :
+        
+    submod :
+        
+    fullname :
+        
+    subname :
+        
+
+    Returns
+    -------
+
+    """
     if mod is None:
         return #Nothing to do here.
 
@@ -219,7 +283,23 @@
     return
 
 def ensure_fromlist(mod, fromlist, buf, recursive):
-    """Handle 'from module import a, b, c' imports."""
+    """Handle 'from module import a, b, c' imports.
+
+    Parameters
+    ----------
+    mod :
+        
+    fromlist :
+        
+    buf :
+        
+    recursive :
+        
+
+    Returns
+    -------
+
+    """
     if not hasattr(mod, '__path__'):
         return
     for item in fromlist:
@@ -240,7 +320,25 @@
             import_submodule(mod, item, buf + '.' + item)
 
 def deep_import_hook(name, globals=None, locals=None, fromlist=None, level=-1):
-    """Replacement for __import__()"""
+    """Replacement for __import__()
+
+    Parameters
+    ----------
+    name :
+        
+    globals :
+         (Default value = None)
+    locals :
+         (Default value = None)
+    fromlist :
+         (Default value = None)
+    level :
+         (Default value = -1)
+
+    Returns
+    -------
+
+    """
     parent, buf = get_parent(globals, level)
 
     head, name, buf = load_next(parent, None if level < 0 else parent, name, buf)
@@ -264,7 +362,17 @@
 modules_reloading = {}
 
 def deep_reload_hook(m):
-    """Replacement for reload()."""
+    """Replacement for reload().
+
+    Parameters
+    ----------
+    m :
+        
+
+    Returns
+    -------
+
+    """
     # Hardcode this one  as it would raise a NotImplementedError from the
     # bowels of Python and screw up the import machinery after.
     # unlike other imports the `exclude` list already in place is not enough.
@@ -330,6 +438,27 @@
     takes a list of modules to exclude from reloading.  The default exclude
     list contains sys, __main__, and __builtin__, to prevent, e.g., resetting
     display, exception, and io hooks.
+
+    Parameters
+    ----------
+    module :
+        
+    exclude :
+         (Default value = ('sys')
+    'os.path' :
+        
+    'builtins' :
+        
+    '__main__' :
+        
+    'numpy' :
+        
+    'numpy._globals') :
+        
+
+    Returns
+    -------
+
     """
     global found_now
     for i in exclude:
