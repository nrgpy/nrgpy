# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pygments/lexers/scripting.py
+++ b/..//venv/lib/python3.8/site-packages/pygments/lexers/scripting.py
@@ -23,24 +23,29 @@
 
 
 class LuaLexer(RegexLexer):
-    """
-    For `Lua <http://www.lua.org>`_ source code.
-
+    """For `Lua <http://www.lua.org>`_ source code.
+    
     Additional options accepted:
-
+    
     `func_name_highlighting`
         If given and ``True``, highlight builtin function names
         (default: ``True``).
     `disabled_modules`
         If given, must be a list of module names whose function names
         should not be highlighted. By default all modules are highlighted.
-
+    
         To get a list of allowed modules have a look into the
         `_lua_builtins` module:
-
+    
         .. sourcecode:: pycon
 
-            >>> from pygments.lexers._lua_builtins import MODULES
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    >>> from pygments.lexers._lua_builtins import MODULES
             >>> MODULES.keys()
             ['string', 'coroutine', 'modules', 'io', 'basic', ...]
     """
@@ -148,6 +153,17 @@
         RegexLexer.__init__(self, **options)
 
     def get_tokens_unprocessed(self, text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         for index, token, value in \
                 RegexLexer.get_tokens_unprocessed(self, text):
             if token is Name:
@@ -163,10 +179,16 @@
             yield index, token, value
 
 class MoonScriptLexer(LuaLexer):
-    """
-    For `MoonScript <http://moonscript.org>`_ source code.
-
+    """For `MoonScript <http://moonscript.org>`_ source code.
+    
     .. versionadded:: 1.5
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = "MoonScript"
@@ -223,6 +245,17 @@
     }
 
     def get_tokens_unprocessed(self, text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         # set . as Operator instead of Punctuation
         for index, token, value in LuaLexer.get_tokens_unprocessed(self, text):
             if token == Punctuation and value == ".":
@@ -231,10 +264,16 @@
 
 
 class ChaiscriptLexer(RegexLexer):
-    """
-    For `ChaiScript <http://chaiscript.com/>`_ source code.
-
+    """For `ChaiScript <http://chaiscript.com/>`_ source code.
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'ChaiScript'
@@ -297,10 +336,16 @@
 
 
 class LSLLexer(RegexLexer):
-    """
-    For Second Life's Linden Scripting Language source code.
-
+    """For Second Life's Linden Scripting Language source code.
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'LSL'
@@ -381,16 +426,22 @@
 
 
 class AppleScriptLexer(RegexLexer):
-    """
-    For `AppleScript source code
+    """For `AppleScript source code
     <http://developer.apple.com/documentation/AppleScript/
     Conceptual/AppleScriptLangGuide>`_,
     including `AppleScript Studio
     <http://developer.apple.com/documentation/AppleScript/
     Reference/StudioReference>`_.
     Contributed by Andreas Amann <aamann@mac.com>.
-
+    
     .. versionadded:: 1.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'AppleScript'
@@ -704,13 +755,19 @@
 
 
 class RexxLexer(RegexLexer):
-    """
-    `Rexx <http://www.rexxinfo.org/>`_ is a scripting language available for
+    """`Rexx <http://www.rexxinfo.org/>`_ is a scripting language available for
     a wide range of different platforms with its roots found on mainframe
     systems. It is popular for I/O- and data based tasks and can act as glue
     language to bind different applications together.
-
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Rexx'
     aliases = ['rexx', 'arexx']
@@ -798,9 +855,17 @@
     )
 
     def analyse_text(text):
-        """
-        Check for inital comment and patterns that distinguish Rexx from other
+        """Check for inital comment and patterns that distinguish Rexx from other
         C-like languages.
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
         """
         if re.search(r'/\*\**\s*rexx', text, re.IGNORECASE):
             # Header matches MVS Rexx requirements, this is certainly a Rexx
@@ -817,11 +882,17 @@
 
 
 class MOOCodeLexer(RegexLexer):
-    """
-    For `MOOCode <http://www.moo.mud.org/>`_ (the MOO scripting
+    """For `MOOCode <http://www.moo.mud.org/>`_ (the MOO scripting
     language).
-
+    
     .. versionadded:: 0.9
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'MOOCode'
     filenames = ['*.moo']
@@ -860,10 +931,16 @@
 
 
 class HybrisLexer(RegexLexer):
-    """
-    For `Hybris <http://www.hybris-lang.org>`_ source code.
-
+    """For `Hybris <http://www.hybris-lang.org>`_ source code.
+    
     .. versionadded:: 1.4
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Hybris'
@@ -946,7 +1023,17 @@
 
     def analyse_text(text):
         """public method and private method don't seem to be quite common
-        elsewhere."""
+        elsewhere.
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         result = 0
         if re.search(r'\b(?:public|private)\s+method\b', text):
             result += 0.01
@@ -955,13 +1042,19 @@
 
 
 class EasytrieveLexer(RegexLexer):
-    """
-    Easytrieve Plus is a programming language for extracting, filtering and
+    """Easytrieve Plus is a programming language for extracting, filtering and
     converting sequential data. Furthermore it can layout data for reports.
     It is mainly used on mainframe platforms and can access several of the
     mainframe's native file formats. It is somewhat comparable to awk.
-
+    
     .. versionadded:: 2.1
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Easytrieve'
     aliases = ['easytrieve']
@@ -1065,8 +1158,16 @@
     _MACRO_HEADER_REGEX = re.compile(r'^\s*MACRO')
 
     def analyse_text(text):
-        """
-        Perform a structural analysis for basic Easytrieve constructs.
+        """Perform a structural analysis for basic Easytrieve constructs.
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
         """
         result = 0.0
         lines = text.split('\n')
@@ -1079,9 +1180,31 @@
         hasReport = False
 
         def isCommentLine(line):
+            """
+
+            Parameters
+            ----------
+            line :
+                
+
+            Returns
+            -------
+
+            """
             return EasytrieveLexer._COMMENT_LINE_REGEX.match(lines[0]) is not None
 
         def isEmptyLine(line):
+            """
+
+            Parameters
+            ----------
+            line :
+                
+
+            Returns
+            -------
+
+            """
             return not bool(line.strip())
 
         # Remove possible empty lines and header comments.
@@ -1147,14 +1270,20 @@
 
 
 class JclLexer(RegexLexer):
-    """
-    `Job Control Language (JCL)
+    """`Job Control Language (JCL)
     <http://publibz.boulder.ibm.com/cgi-bin/bookmgr_OS390/BOOKS/IEA2B570/CCONTENTS>`_
     is a scripting language used on mainframe platforms to instruct the system
     on how to run a batch job or start a subsystem. It is somewhat
     comparable to MS DOS batch and Unix shell scripts.
-
+    
     .. versionadded:: 2.1
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'JCL'
     aliases = ['jcl']
@@ -1218,8 +1347,16 @@
                                      re.IGNORECASE)
 
     def analyse_text(text):
-        """
-        Recognize JCL job by header.
+        """Recognize JCL job by header.
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
         """
         result = 0.0
         lines = text.split('\n')
@@ -1231,10 +1368,16 @@
 
 
 class MiniScriptLexer(RegexLexer):
-    """
-    For `MiniScript <https://miniscript.org>`_ source code.
-
+    """For `MiniScript <https://miniscript.org>`_ source code.
+    
     .. versionadded:: 2.6
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = "MiniScript"
