# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/babel/support.py
+++ b/..//venv/lib/python3.8/site-packages/babel/support.py
@@ -26,6 +26,12 @@
 class Format(object):
     """Wrapper class providing the various date and number formatting functions
     bound to a specific locale and time-zone.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     >>> from babel.util import UTC
     >>> from datetime import date
@@ -46,7 +52,19 @@
         self.tzinfo = tzinfo
 
     def date(self, date=None, format='medium'):
-        """Return a date formatted according to the given pattern.
+        """
+
+        Parameters
+        ----------
+        date :
+             (Default value = None)
+        format :
+             (Default value = 'medium')
+
+        Returns
+        -------
+        type
+            
 
         >>> from datetime import date
         >>> fmt = Format('en_US')
@@ -56,7 +74,19 @@
         return format_date(date, format, locale=self.locale)
 
     def datetime(self, datetime=None, format='medium'):
-        """Return a date and time formatted according to the given pattern.
+        """
+
+        Parameters
+        ----------
+        datetime :
+             (Default value = None)
+        format :
+             (Default value = 'medium')
+
+        Returns
+        -------
+        type
+            
 
         >>> from datetime import datetime
         >>> from pytz import timezone
@@ -68,7 +98,19 @@
                                locale=self.locale)
 
     def time(self, time=None, format='medium'):
-        """Return a time formatted according to the given pattern.
+        """
+
+        Parameters
+        ----------
+        time :
+             (Default value = None)
+        format :
+             (Default value = 'medium')
+
+        Returns
+        -------
+        type
+            
 
         >>> from datetime import datetime
         >>> from pytz import timezone
@@ -80,7 +122,25 @@
 
     def timedelta(self, delta, granularity='second', threshold=.85,
                   format='long', add_direction=False):
-        """Return a time delta according to the rules of the given locale.
+        """
+
+        Parameters
+        ----------
+        delta :
+            
+        granularity :
+             (Default value = 'second')
+        threshold :
+             (Default value = .85)
+        format :
+             (Default value = 'long')
+        add_direction :
+             (Default value = False)
+
+        Returns
+        -------
+        type
+            
 
         >>> from datetime import timedelta
         >>> fmt = Format('en_US')
@@ -93,7 +153,17 @@
                                 locale=self.locale)
 
     def number(self, number):
-        """Return an integer number formatted for the locale.
+        """
+
+        Parameters
+        ----------
+        number :
+            
+
+        Returns
+        -------
+        type
+            
 
         >>> fmt = Format('en_US')
         >>> fmt.number(1099)
@@ -102,7 +172,19 @@
         return format_number(number, locale=self.locale)
 
     def decimal(self, number, format=None):
-        """Return a decimal number formatted for the locale.
+        """
+
+        Parameters
+        ----------
+        number :
+            
+        format :
+             (Default value = None)
+
+        Returns
+        -------
+        type
+            
 
         >>> fmt = Format('en_US')
         >>> fmt.decimal(1.2345)
@@ -111,12 +193,37 @@
         return format_decimal(number, format, locale=self.locale)
 
     def currency(self, number, currency):
-        """Return a number in the given currency formatted for the locale.
+        """
+
+        Parameters
+        ----------
+        number :
+            
+        currency :
+            
+
+        Returns
+        -------
+        type
+            
+
         """
         return format_currency(number, currency, locale=self.locale)
 
     def percent(self, number, format=None):
-        """Return a number formatted as percentage for the locale.
+        """
+
+        Parameters
+        ----------
+        number :
+            
+        format :
+             (Default value = None)
+
+        Returns
+        -------
+        type
+            
 
         >>> fmt = Format('en_US')
         >>> fmt.percent(0.34)
@@ -125,7 +232,18 @@
         return format_percent(number, format, locale=self.locale)
 
     def scientific(self, number):
-        """Return a number formatted using scientific notation for the locale.
+        """
+
+        Parameters
+        ----------
+        number :
+            
+
+        Returns
+        -------
+        type
+            
+
         """
         return format_scientific(number, locale=self.locale)
 
@@ -133,6 +251,22 @@
 class LazyProxy(object):
     """Class for proxy objects that delegate to a specified function to evaluate
     the actual object.
+    
+    
+    This can be used, for example, to implement lazy translation functions that
+    delay the actual translation until the string is actually used. The
+    rationale for such behavior is that the locale of the user may not always
+    be available. In web applications, you only know the locale when processing
+    a request.
+    
+    The proxy implementation attempts to be as complete as possible, so that
+    the lazy objects should mostly work as expected, for example for sorting:
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     >>> def greeting(name='world'):
     ...     return 'Hello, %s!' % name
@@ -143,16 +277,7 @@
     u'  Hello, Joe!'
     >>> u'(%s)' % lazy_greeting
     u'(Hello, Joe!)'
-
-    This can be used, for example, to implement lazy translation functions that
-    delay the actual translation until the string is actually used. The
-    rationale for such behavior is that the locale of the user may not always
-    be available. In web applications, you only know the locale when processing
-    a request.
-
-    The proxy implementation attempts to be as complete as possible, so that
-    the lazy objects should mostly work as expected, for example for sorting:
-
+    
     >>> greetings = [
     ...     LazyProxy(greeting, 'world'),
     ...     LazyProxy(greeting, 'Joe'),
@@ -179,6 +304,7 @@
 
     @property
     def value(self):
+        """ """
         if self._value is None:
             try:
                 value = self._func(*self._args, **self._kwargs)
@@ -290,6 +416,7 @@
 
 
 class NullTranslations(gettext.NullTranslations, object):
+    """ """
 
     DEFAULT_DOMAIN = None
 
@@ -313,18 +440,51 @@
     def dgettext(self, domain, message):
         """Like ``gettext()``, but look the message up in the specified
         domain.
+
+        Parameters
+        ----------
+        domain :
+            
+        message :
+            
+
+        Returns
+        -------
+
         """
         return self._domains.get(domain, self).gettext(message)
 
     def ldgettext(self, domain, message):
         """Like ``lgettext()``, but look the message up in the specified
         domain.
+
+        Parameters
+        ----------
+        domain :
+            
+        message :
+            
+
+        Returns
+        -------
+
         """
         return self._domains.get(domain, self).lgettext(message)
 
     def udgettext(self, domain, message):
         """Like ``ugettext()``, but look the message up in the specified
         domain.
+
+        Parameters
+        ----------
+        domain :
+            
+        message :
+            
+
+        Returns
+        -------
+
         """
         return self._domains.get(domain, self).ugettext(message)
     # backward compatibility with 0.9
@@ -333,18 +493,63 @@
     def dngettext(self, domain, singular, plural, num):
         """Like ``ngettext()``, but look the message up in the specified
         domain.
+
+        Parameters
+        ----------
+        domain :
+            
+        singular :
+            
+        plural :
+            
+        num :
+            
+
+        Returns
+        -------
+
         """
         return self._domains.get(domain, self).ngettext(singular, plural, num)
 
     def ldngettext(self, domain, singular, plural, num):
         """Like ``lngettext()``, but look the message up in the specified
         domain.
+
+        Parameters
+        ----------
+        domain :
+            
+        singular :
+            
+        plural :
+            
+        num :
+            
+
+        Returns
+        -------
+
         """
         return self._domains.get(domain, self).lngettext(singular, plural, num)
 
     def udngettext(self, domain, singular, plural, num):
         """Like ``ungettext()`` but look the message up in the specified
         domain.
+
+        Parameters
+        ----------
+        domain :
+            
+        singular :
+            
+        plural :
+            
+        num :
+            
+
+        Returns
+        -------
+
         """
         return self._domains.get(domain, self).ungettext(singular, plural, num)
     # backward compatibility with 0.9
@@ -364,6 +569,17 @@
         catalog for the `message` id and `context` , and a fallback has been
         set, the look up is forwarded to the fallback's ``pgettext()``
         method. Otherwise, the `message` id is returned.
+
+        Parameters
+        ----------
+        context :
+            
+        message :
+            
+
+        Returns
+        -------
+
         """
         ctxt_msg_id = self.CONTEXT_ENCODING % (context, message)
         missing = object()
@@ -383,6 +599,17 @@
         """Equivalent to ``pgettext()``, but the translation is returned in the
         preferred system encoding, if no other encoding was explicitly set with
         ``bind_textdomain_codeset()``.
+
+        Parameters
+        ----------
+        context :
+            
+        message :
+            
+
+        Returns
+        -------
+
         """
         ctxt_msg_id = self.CONTEXT_ENCODING % (context, message)
         missing = object()
@@ -400,11 +627,27 @@
         message id for purposes of lookup in the catalog, while `num` is used to
         determine which plural form to use.  The returned message string is an
         8-bit string encoded with the catalog's charset encoding, if known.
-
+        
         If the message id for `context` is not found in the catalog, and a
         fallback is specified, the request is forwarded to the fallback's
         ``npgettext()`` method.  Otherwise, when ``num`` is 1 ``singular`` is
-        returned, and ``plural`` is returned in all other cases.
+
+        Parameters
+        ----------
+        context :
+            
+        singular :
+            
+        plural :
+            
+        num :
+            
+
+        Returns
+        -------
+        type
+            
+
         """
         ctxt_msg_id = self.CONTEXT_ENCODING % (context, singular)
         try:
@@ -426,6 +669,21 @@
         """Equivalent to ``npgettext()``, but the translation is returned in the
         preferred system encoding, if no other encoding was explicitly set with
         ``bind_textdomain_codeset()``.
+
+        Parameters
+        ----------
+        context :
+            
+        singular :
+            
+        plural :
+            
+        num :
+            
+
+        Returns
+        -------
+
         """
         ctxt_msg_id = self.CONTEXT_ENCODING % (context, singular)
         try:
@@ -447,6 +705,17 @@
         in the catalog for the `message` id and `context`, and a fallback has
         been set, the look up is forwarded to the fallback's ``upgettext()``
         method.  Otherwise, the `message` id is returned.
+
+        Parameters
+        ----------
+        context :
+            
+        message :
+            
+
+        Returns
+        -------
+
         """
         ctxt_message_id = self.CONTEXT_ENCODING % (context, message)
         missing = object()
@@ -462,11 +731,27 @@
         message id for purposes of lookup in the catalog, while `num` is used to
         determine which plural form to use.  The returned message string is a
         Unicode string.
-
+        
         If the message id for `context` is not found in the catalog, and a
         fallback is specified, the request is forwarded to the fallback's
         ``unpgettext()`` method.  Otherwise, when `num` is 1 `singular` is
-        returned, and `plural` is returned in all other cases.
+
+        Parameters
+        ----------
+        context :
+            
+        singular :
+            
+        plural :
+            
+        num :
+            
+
+        Returns
+        -------
+        type
+            
+
         """
         ctxt_message_id = self.CONTEXT_ENCODING % (context, singular)
         try:
@@ -483,12 +768,38 @@
     def dpgettext(self, domain, context, message):
         """Like `pgettext()`, but look the message up in the specified
         `domain`.
+
+        Parameters
+        ----------
+        domain :
+            
+        context :
+            
+        message :
+            
+
+        Returns
+        -------
+
         """
         return self._domains.get(domain, self).pgettext(context, message)
 
     def udpgettext(self, domain, context, message):
         """Like `upgettext()`, but look the message up in the specified
         `domain`.
+
+        Parameters
+        ----------
+        domain :
+            
+        context :
+            
+        message :
+            
+
+        Returns
+        -------
+
         """
         return self._domains.get(domain, self).upgettext(context, message)
     # backward compatibility with 0.9
@@ -498,12 +809,42 @@
         """Equivalent to ``dpgettext()``, but the translation is returned in the
         preferred system encoding, if no other encoding was explicitly set with
         ``bind_textdomain_codeset()``.
+
+        Parameters
+        ----------
+        domain :
+            
+        context :
+            
+        message :
+            
+
+        Returns
+        -------
+
         """
         return self._domains.get(domain, self).lpgettext(context, message)
 
     def dnpgettext(self, domain, context, singular, plural, num):
         """Like ``npgettext``, but look the message up in the specified
         `domain`.
+
+        Parameters
+        ----------
+        domain :
+            
+        context :
+            
+        singular :
+            
+        plural :
+            
+        num :
+            
+
+        Returns
+        -------
+
         """
         return self._domains.get(domain, self).npgettext(context, singular,
                                                          plural, num)
@@ -511,6 +852,23 @@
     def udnpgettext(self, domain, context, singular, plural, num):
         """Like ``unpgettext``, but look the message up in the specified
         `domain`.
+
+        Parameters
+        ----------
+        domain :
+            
+        context :
+            
+        singular :
+            
+        plural :
+            
+        num :
+            
+
+        Returns
+        -------
+
         """
         return self._domains.get(domain, self).unpgettext(context, singular,
                                                           plural, num)
@@ -521,6 +879,23 @@
         """Equivalent to ``dnpgettext()``, but the translation is returned in
         the preferred system encoding, if no other encoding was explicitly set
         with ``bind_textdomain_codeset()``.
+
+        Parameters
+        ----------
+        domain :
+            
+        context :
+            
+        singular :
+            
+        plural :
+            
+        num :
+            
+
+        Returns
+        -------
+
         """
         return self._domains.get(domain, self).lnpgettext(context, singular,
                                                           plural, num)
@@ -552,11 +927,20 @@
     def load(cls, dirname=None, locales=None, domain=None):
         """Load translations from the given directory.
 
-        :param dirname: the directory containing the ``MO`` files
-        :param locales: the list of locales in order of preference (items in
-                        this list can be either `Locale` objects or locale
-                        strings)
-        :param domain: the message domain (default: 'messages')
+        Parameters
+        ----------
+        dirname :
+            the directory containing the ``MO`` files (Default value = None)
+        locales :
+            the list of locales in order of preference (items in
+            this list can be either `Locale` objects or locale
+            strings) (Default value = None)
+        domain :
+            the message domain (default: 'messages')
+
+        Returns
+        -------
+
         """
         if locales is not None:
             if not isinstance(locales, (list, tuple)):
@@ -576,16 +960,24 @@
 
     def add(self, translations, merge=True):
         """Add the given translations to the catalog.
-
+        
         If the domain of the translations is different than that of the
         current catalog, they are added as a catalog that is only accessible
         by the various ``d*gettext`` functions.
 
-        :param translations: the `Translations` instance with the messages to
-                             add
-        :param merge: whether translations for message domains that have
-                      already been added should be merged with the existing
-                      translations
+        Parameters
+        ----------
+        translations :
+            the `Translations` instance with the messages to
+            add
+        merge :
+            whether translations for message domains that have
+            already been added should be merged with the existing
+            translations (Default value = True)
+
+        Returns
+        -------
+
         """
         domain = getattr(translations, 'domain', self.DEFAULT_DOMAIN)
         if merge and domain == self.domain:
@@ -602,12 +994,19 @@
 
     def merge(self, translations):
         """Merge the given translations into the catalog.
-
+        
         Message translations in the specified catalog override any messages
         with the same identifier in the existing catalog.
 
-        :param translations: the `Translations` instance with the messages to
-                             merge
+        Parameters
+        ----------
+        translations :
+            the `Translations` instance with the messages to
+            merge
+
+        Returns
+        -------
+
         """
         if isinstance(translations, gettext.GNUTranslations):
             self._catalog.update(translations._catalog)
