# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/utils/io.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/utils/io.py
@@ -20,6 +20,7 @@
 
 @undoc
 class IOStream:
+    """ """
 
     def __init__(self, stream, fallback=None):
         warn('IOStream is deprecated since IPython 5.0, use sys.{stdin,stdout,stderr} instead',
@@ -34,6 +35,17 @@
 
         # clone all methods not overridden:
         def clone(meth):
+            """
+
+            Parameters
+            ----------
+            meth :
+                
+
+            Returns
+            -------
+
+            """
             return not hasattr(self, meth) and not meth.startswith('_')
         for meth in filter(clone, dir(stream)):
             try:
@@ -49,6 +61,17 @@
         return tpl.format(mod=cls.__module__, cls=cls.__name__, args=self.stream)
 
     def write(self,data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         warn('IOStream is deprecated since IPython 5.0, use sys.{stdin,stdout,stderr} instead',
              DeprecationWarning, stacklevel=2)
         try:
@@ -65,6 +88,17 @@
                       file=sys.stderr)
 
     def writelines(self, lines):
+        """
+
+        Parameters
+        ----------
+        lines :
+            
+
+        Returns
+        -------
+
+        """
         warn('IOStream is deprecated since IPython 5.0, use sys.{stdin,stdout,stderr} instead',
              DeprecationWarning, stacklevel=2)
         if isinstance(lines, str):
@@ -78,9 +112,11 @@
 
     @property
     def closed(self):
+        """ """
         return self.stream.closed
 
     def close(self):
+        """ """
         pass
 
 # setup stdin/stdout/stderr to sys.stdin/sys.stdout/sys.stderr
@@ -97,11 +133,18 @@
 
 class Tee(object):
     """A class to duplicate an output stream to stdout/err.
-
+    
     This works in a manner very similar to the Unix 'tee' command.
-
+    
     When the object is closed or deleted, it closes the original file given to
     it for duplication.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     # Inspired by:
     # http://mail.python.org/pipermail/python-list/2007-May/442737.html
@@ -139,7 +182,17 @@
         self._closed = True
 
     def write(self, data):
-        """Write data to both channels."""
+        """Write data to both channels.
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         self.file.write(data)
         self.ostream.write(data)
         self.ostream.flush()
@@ -156,16 +209,32 @@
 
 def ask_yes_no(prompt, default=None, interrupt=None):
     """Asks a question and returns a boolean (y/n) answer.
-
+    
     If default is given (one of 'y','n'), it is used if the user input is
     empty. If interrupt is given (one of 'y','n'), it is used if the user
     presses Ctrl-C. Otherwise the question is repeated until an answer is
     given.
-
+    
     An EOF is treated as the default answer.  If there is no default, an
-    exception is raised to prevent infinite loops.
-
-    Valid answers are: y/yes/n/no (match is not case sensitive)."""
+
+    Parameters
+    ----------
+    prompt :
+        
+    default :
+         (Default value = None)
+    interrupt :
+         (Default value = None)
+
+    Returns
+    -------
+
+    Raises
+    ------
+    Valid
+        answers are
+
+    """
 
     answers = {'y':True,'n':False,'yes':True,'no':False}
     ans = None
@@ -194,15 +263,14 @@
     Parameters
     ----------
     src : string or list of strings (no need for ending newlines if list)
-      Source code to be written to the file.
-
+        Source code to be written to the file.
     ext : optional, string
-      Extension for the generated file.
-
-    Returns
-    -------
-    (filename, open filehandle)
-      It is the caller's responsibility to close the open file and unlink it.
+        Extension for the generated file. (Default value = '.py')
+
+    Returns
+    -------
+
+    
     """
     fname = tempfile.mkstemp(ext)[1]
     with open(fname,'w') as f:
@@ -212,14 +280,38 @@
 
 @undoc
 def atomic_writing(*args, **kwargs):
-    """DEPRECATED: moved to notebook.services.contents.fileio"""
+    """DEPRECATED: moved to notebook.services.contents.fileio
+
+    Parameters
+    ----------
+    *args :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     warn("IPython.utils.io.atomic_writing has moved to notebook.services.contents.fileio since IPython 4.0", DeprecationWarning, stacklevel=2)
     from notebook.services.contents.fileio import atomic_writing
     return atomic_writing(*args, **kwargs)
 
 @undoc
 def raw_print(*args, **kw):
-    """DEPRECATED: Raw print to sys.__stdout__, otherwise identical interface to print()."""
+    """DEPRECATED: Raw print to sys.__stdout__, otherwise identical interface to print().
+
+    Parameters
+    ----------
+    *args :
+        
+    **kw :
+        
+
+    Returns
+    -------
+
+    """
     warn("IPython.utils.io.raw_print has been deprecated since IPython 7.0", DeprecationWarning, stacklevel=2)
 
     print(*args, sep=kw.get('sep', ' '), end=kw.get('end', '\n'),
@@ -228,7 +320,19 @@
 
 @undoc
 def raw_print_err(*args, **kw):
-    """DEPRECATED: Raw print to sys.__stderr__, otherwise identical interface to print()."""
+    """DEPRECATED: Raw print to sys.__stderr__, otherwise identical interface to print().
+
+    Parameters
+    ----------
+    *args :
+        
+    **kw :
+        
+
+    Returns
+    -------
+
+    """
     warn("IPython.utils.io.raw_print_err has been deprecated since IPython 7.0", DeprecationWarning, stacklevel=2)
 
     print(*args, sep=kw.get('sep', ' '), end=kw.get('end', '\n'),
@@ -242,7 +346,17 @@
 
 @undoc
 def unicode_std_stream(stream='stdout'):
-    """DEPRECATED, moved to nbconvert.utils.io"""
+    """DEPRECATED, moved to nbconvert.utils.io
+
+    Parameters
+    ----------
+    stream :
+         (Default value = 'stdout')
+
+    Returns
+    -------
+
+    """
     warn("IPython.utils.io.unicode_std_stream has moved to nbconvert.utils.io since IPython 4.0", DeprecationWarning, stacklevel=2)
     from nbconvert.utils.io import unicode_std_stream
     return unicode_std_stream(stream)
