# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/ma/testutils.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/ma/testutils.py
@@ -39,14 +39,29 @@
 
 
 def approx(a, b, fill_value=True, rtol=1e-5, atol=1e-8):
-    """
-    Returns true if all components of a and b are equal to given tolerances.
-
+    """Returns true if all components of a and b are equal to given tolerances.
+    
     If fill_value is True, masked values considered equal. Otherwise,
     masked values are considered unequal.  The relative error rtol should
     be positive and << 1.0 The absolute error atol comes into play for
     those elements of b that are very small or zero; it says how small a
     must be also.
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+    fill_value :
+         (Default value = True)
+    rtol :
+         (Default value = 1e-5)
+    atol :
+         (Default value = 1e-8)
+
+    Returns
+    -------
 
     """
     m = mask_or(getmask(a), getmask(b))
@@ -61,11 +76,24 @@
 
 
 def almost(a, b, decimal=6, fill_value=True):
-    """
-    Returns True if a and b are equal up to decimal places.
-
+    """Returns True if a and b are equal up to decimal places.
+    
     If fill_value is True, masked values considered equal. Otherwise,
     masked values are considered unequal.
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+    decimal :
+         (Default value = 6)
+    fill_value :
+         (Default value = True)
+
+    Returns
+    -------
 
     """
     m = mask_or(getmask(a), getmask(b))
@@ -80,8 +108,19 @@
 
 
 def _assert_equal_on_sequences(actual, desired, err_msg=''):
-    """
-    Asserts the equality of two non-array sequences.
+    """Asserts the equality of two non-array sequences.
+
+    Parameters
+    ----------
+    actual :
+        
+    desired :
+        
+    err_msg :
+         (Default value = '')
+
+    Returns
+    -------
 
     """
     assert_equal(len(actual), len(desired), err_msg)
@@ -91,10 +130,19 @@
 
 
 def assert_equal_records(a, b):
-    """
-    Asserts that two records are equal.
-
+    """Asserts that two records are equal.
+    
     Pretty crude for now.
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
 
     """
     assert_equal(a.dtype, b.dtype)
@@ -106,8 +154,19 @@
 
 
 def assert_equal(actual, desired, err_msg=''):
-    """
-    Asserts that two items are equal.
+    """Asserts that two items are equal.
+
+    Parameters
+    ----------
+    actual :
+        
+    desired :
+        
+    err_msg :
+         (Default value = '')
+
+    Returns
+    -------
 
     """
     # Case #1: dictionary .....
@@ -145,8 +204,19 @@
 
 
 def fail_if_equal(actual, desired, err_msg='',):
-    """
-    Raises an assertion error if two items are equal.
+    """Raises an assertion error if two items are equal.
+
+    Parameters
+    ----------
+    actual :
+        
+    desired :
+        
+    err_msg :
+         (Default value = '')
+
+    Returns
+    -------
 
     """
     if isinstance(desired, dict):
@@ -174,10 +244,25 @@
 
 
 def assert_almost_equal(actual, desired, decimal=7, err_msg='', verbose=True):
-    """
-    Asserts that two items are almost equal.
-
+    """Asserts that two items are almost equal.
+    
     The test is equivalent to abs(desired-actual) < 0.5 * 10**(-decimal).
+
+    Parameters
+    ----------
+    actual :
+        
+    desired :
+        
+    decimal :
+         (Default value = 7)
+    err_msg :
+         (Default value = '')
+    verbose :
+         (Default value = True)
+
+    Returns
+    -------
 
     """
     if isinstance(actual, np.ndarray) or isinstance(desired, np.ndarray):
@@ -194,10 +279,29 @@
 
 def assert_array_compare(comparison, x, y, err_msg='', verbose=True, header='',
                          fill_value=True):
-    """
-    Asserts that comparison between two masked arrays is satisfied.
-
+    """Asserts that comparison between two masked arrays is satisfied.
+    
     The comparison is elementwise.
+
+    Parameters
+    ----------
+    comparison :
+        
+    x :
+        
+    y :
+        
+    err_msg :
+         (Default value = '')
+    verbose :
+         (Default value = True)
+    header :
+         (Default value = '')
+    fill_value :
+         (Default value = True)
+
+    Returns
+    -------
 
     """
     # Allocate a common mask and refill
@@ -218,8 +322,21 @@
 
 
 def assert_array_equal(x, y, err_msg='', verbose=True):
-    """
-    Checks the elementwise equality of two masked arrays.
+    """Checks the elementwise equality of two masked arrays.
+
+    Parameters
+    ----------
+    x :
+        
+    y :
+        
+    err_msg :
+         (Default value = '')
+    verbose :
+         (Default value = True)
+
+    Returns
+    -------
 
     """
     assert_array_compare(operator.__eq__, x, y,
@@ -228,24 +345,78 @@
 
 
 def fail_if_array_equal(x, y, err_msg='', verbose=True):
-    """
-    Raises an assertion error if two masked arrays are not equal elementwise.
+    """Raises an assertion error if two masked arrays are not equal elementwise.
+
+    Parameters
+    ----------
+    x :
+        
+    y :
+        
+    err_msg :
+         (Default value = '')
+    verbose :
+         (Default value = True)
+
+    Returns
+    -------
 
     """
     def compare(x, y):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+        y :
+            
+
+        Returns
+        -------
+
+        """
         return (not np.alltrue(approx(x, y)))
     assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,
                          header='Arrays are not equal')
 
 
 def assert_array_approx_equal(x, y, decimal=6, err_msg='', verbose=True):
-    """
-    Checks the equality of two masked arrays, up to given number odecimals.
-
+    """Checks the equality of two masked arrays, up to given number odecimals.
+    
     The equality is checked elementwise.
 
+    Parameters
+    ----------
+    x :
+        
+    y :
+        
+    decimal :
+         (Default value = 6)
+    err_msg :
+         (Default value = '')
+    verbose :
+         (Default value = True)
+
+    Returns
+    -------
+
     """
     def compare(x, y):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+        y :
+            
+
+        Returns
+        -------
+
+        """
         "Returns the result of the loose comparison between x and y)."
         return approx(x, y, rtol=10. ** -decimal)
     assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,
@@ -253,13 +424,41 @@
 
 
 def assert_array_almost_equal(x, y, decimal=6, err_msg='', verbose=True):
-    """
-    Checks the equality of two masked arrays, up to given number odecimals.
-
+    """Checks the equality of two masked arrays, up to given number odecimals.
+    
     The equality is checked elementwise.
 
+    Parameters
+    ----------
+    x :
+        
+    y :
+        
+    decimal :
+         (Default value = 6)
+    err_msg :
+         (Default value = '')
+    verbose :
+         (Default value = True)
+
+    Returns
+    -------
+
     """
     def compare(x, y):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+        y :
+            
+
+        Returns
+        -------
+
+        """
         "Returns the result of the loose comparison between x and y)."
         return almost(x, y, decimal)
     assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,
@@ -267,8 +466,21 @@
 
 
 def assert_array_less(x, y, err_msg='', verbose=True):
-    """
-    Checks that x is smaller than y elementwise.
+    """Checks that x is smaller than y elementwise.
+
+    Parameters
+    ----------
+    x :
+        
+    y :
+        
+    err_msg :
+         (Default value = '')
+    verbose :
+         (Default value = True)
+
+    Returns
+    -------
 
     """
     assert_array_compare(operator.__lt__, x, y,
@@ -277,8 +489,19 @@
 
 
 def assert_mask_equal(m1, m2, err_msg=''):
-    """
-    Asserts the equality of two masks.
+    """Asserts the equality of two masks.
+
+    Parameters
+    ----------
+    m1 :
+        
+    m2 :
+        
+    err_msg :
+         (Default value = '')
+
+    Returns
+    -------
 
     """
     if m1 is nomask:
