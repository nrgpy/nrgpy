# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/extension/base/dtype.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/extension/base/dtype.py
@@ -12,13 +12,46 @@
     """Base class for ExtensionDtype classes"""
 
     def test_name(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         assert isinstance(dtype.name, str)
 
     def test_kind(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         valid = set("biufcmMOSUV")
         assert dtype.kind in valid
 
     def test_construct_from_string_own_name(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         result = dtype.construct_from_string(dtype.name)
         assert type(result) is type(dtype)
 
@@ -27,40 +60,165 @@
         assert type(result) is type(dtype)
 
     def test_is_dtype_from_name(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         result = type(dtype).is_dtype(dtype.name)
         assert result is True
 
     def test_is_dtype_unboxes_dtype(self, data, dtype):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         assert dtype.is_dtype(data) is True
 
     def test_is_dtype_from_self(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         result = type(dtype).is_dtype(dtype)
         assert result is True
 
     def test_is_dtype_other_input(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         assert dtype.is_dtype([1, 2, 3]) is False
 
     def test_is_not_string_type(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         return not pd.api.types.is_string_dtype(dtype)
 
     def test_is_not_object_type(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         return not pd.api.types.is_object_dtype(dtype)
 
     def test_eq_with_str(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         assert dtype == dtype.name
         assert dtype != dtype.name + "-suffix"
 
     def test_eq_with_numpy_object(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         assert dtype != np.dtype("object")
 
     def test_eq_with_self(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         assert dtype == dtype
         assert dtype != object()
 
     def test_array_type(self, data, dtype):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         assert dtype.construct_array_type() is type(data)
 
     def test_check_dtype(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         dtype = data.dtype
 
         # check equivalency for using .dtypes
@@ -92,25 +250,91 @@
         self.assert_series_equal(result, expected)
 
     def test_hashable(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         hash(dtype)  # no error
 
     def test_str(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         assert str(dtype) == dtype.name
 
     def test_eq(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         assert dtype == dtype.name
         assert dtype != "anonther_type"
 
     def test_construct_from_string(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         dtype_instance = type(dtype).construct_from_string(dtype.name)
         assert isinstance(dtype_instance, type(dtype))
 
     def test_construct_from_string_another_type_raises(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         msg = f"Cannot construct a '{type(dtype).__name__}' from 'another_type'"
         with pytest.raises(TypeError, match=msg):
             type(dtype).construct_from_string("another_type")
 
     def test_construct_from_string_wrong_type_raises(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         with pytest.raises(
             TypeError,
             match="'construct_from_string' expects a string, got <class 'int'>",
@@ -118,6 +342,17 @@
             type(dtype).construct_from_string(0)
 
     def test_get_common_dtype(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         # in practice we will not typically call this with a 1-length list
         # (we shortcut to just use that dtype as the common dtype), but
         # still testing as good practice to have this working (and it is the
