# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/numeric/test_indexing.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/numeric/test_indexing.py
@@ -7,13 +7,16 @@
 
 @pytest.fixture
 def index_large():
+    """ """
     # large values used in UInt64Index tests where no compat needed with Int64/Float64
     large = [2 ** 63, 2 ** 63 + 10, 2 ** 63 + 15, 2 ** 63 + 20, 2 ** 63 + 25]
     return UInt64Index(large)
 
 
 class TestGetLoc:
+    """ """
     def test_get_loc_float64(self):
+        """ """
         idx = Float64Index([0.0, 1.0, 2.0])
         for method in [None, "pad", "backfill", "nearest"]:
             assert idx.get_loc(1, method) == 1
@@ -47,6 +50,7 @@
             idx.get_loc(1.4, method="nearest", tolerance=np.array([1, 2]))
 
     def test_get_loc_na(self):
+        """ """
         idx = Float64Index([np.nan, 1, 2])
         assert idx.get_loc(1) == 1
         assert idx.get_loc(np.nan) == 0
@@ -69,6 +73,7 @@
             idx.slice_locs(np.nan)
 
     def test_get_loc_missing_nan(self):
+        """ """
         # GH#8569
         idx = Float64Index([1, 2])
         assert idx.get_loc(1) == 0
@@ -82,7 +87,9 @@
 
 
 class TestGetIndexer:
+    """ """
     def test_get_indexer_float64(self):
+        """ """
         idx = Float64Index([0.0, 1.0, 2.0])
         tm.assert_numpy_array_equal(
             idx.get_indexer(idx), np.array([0, 1, 2], dtype=np.intp)
@@ -100,12 +107,14 @@
         )
 
     def test_get_indexer_nan(self):
+        """ """
         # GH#7820
         result = Float64Index([1, 2, np.nan]).get_indexer([np.nan])
         expected = np.array([2], dtype=np.intp)
         tm.assert_numpy_array_equal(result, expected)
 
     def test_get_indexer_int64(self):
+        """ """
         index = Int64Index(range(0, 20, 2))
         target = Int64Index(np.arange(10))
         indexer = index.get_indexer(target)
@@ -123,6 +132,17 @@
         tm.assert_numpy_array_equal(indexer, expected)
 
     def test_get_indexer_uint64(self, index_large):
+        """
+
+        Parameters
+        ----------
+        index_large :
+            
+
+        Returns
+        -------
+
+        """
         target = UInt64Index(np.arange(10).astype("uint64") * 5 + 2 ** 63)
         indexer = index_large.get_indexer(target)
         expected = np.array([0, -1, 1, 2, 3, 4, -1, -1, -1, -1], dtype=np.intp)
@@ -140,6 +160,7 @@
 
 
 class TestWhere:
+    """ """
     @pytest.mark.parametrize(
         "index",
         [
@@ -150,6 +171,19 @@
     )
     @pytest.mark.parametrize("klass", [list, tuple, np.array, Series])
     def test_where(self, klass, index):
+        """
+
+        Parameters
+        ----------
+        klass :
+            
+        index :
+            
+
+        Returns
+        -------
+
+        """
         cond = [True] * len(index)
         expected = index
         result = index.where(klass(cond))
@@ -161,13 +195,26 @@
 
 
 class TestTake:
+    """ """
     @pytest.mark.parametrize("klass", [Float64Index, Int64Index, UInt64Index])
     def test_take_preserve_name(self, klass):
+        """
+
+        Parameters
+        ----------
+        klass :
+            
+
+        Returns
+        -------
+
+        """
         index = klass([1, 2, 3, 4], name="foo")
         taken = index.take([3, 0, 1])
         assert index.name == taken.name
 
     def test_take_fill_value_float64(self):
+        """ """
         # GH 12631
         idx = Float64Index([1.0, 2.0, 3.0], name="xxx")
         result = idx.take(np.array([1, 0, -1]))
@@ -199,6 +246,17 @@
 
     @pytest.mark.parametrize("klass", [Int64Index, UInt64Index])
     def test_take_fill_value_ints(self, klass):
+        """
+
+        Parameters
+        ----------
+        klass :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-12631
         idx = klass([1, 2, 3], name="xxx")
         result = idx.take(np.array([1, 0, -1]))
@@ -228,16 +286,30 @@
 
 
 class TestContains:
+    """ """
     @pytest.mark.parametrize("klass", [Float64Index, Int64Index, UInt64Index])
     def test_contains_none(self, klass):
+        """
+
+        Parameters
+        ----------
+        klass :
+            
+
+        Returns
+        -------
+
+        """
         # GH#35788 should return False, not raise TypeError
         index = klass([0, 1, 2, 3, 4])
         assert None not in index
 
     def test_contains_float64_nans(self):
+        """ """
         index = Float64Index([1.0, 2.0, np.nan])
         assert np.nan in index
 
     def test_contains_float64_not_nans(self):
+        """ """
         index = Float64Index([1.0, 2.0, np.nan])
         assert 1.0 in index
