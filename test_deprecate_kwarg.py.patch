# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/util/test_deprecate_kwarg.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/util/test_deprecate_kwarg.py
@@ -7,6 +7,17 @@
 
 @deprecate_kwarg("old", "new")
 def _f1(new=False):
+    """
+
+    Parameters
+    ----------
+    new :
+         (Default value = False)
+
+    Returns
+    -------
+
+    """
     return new
 
 
@@ -15,20 +26,66 @@
 
 @deprecate_kwarg("old", "new", _f2_mappings)
 def _f2(new=False):
+    """
+
+    Parameters
+    ----------
+    new :
+         (Default value = False)
+
+    Returns
+    -------
+
+    """
     return new
 
 
 def _f3_mapping(x):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+
+    Returns
+    -------
+
+    """
     return x + 1
 
 
 @deprecate_kwarg("old", "new", _f3_mapping)
 def _f3(new=0):
+    """
+
+    Parameters
+    ----------
+    new :
+         (Default value = 0)
+
+    Returns
+    -------
+
+    """
     return new
 
 
 @pytest.mark.parametrize("key,klass", [("old", FutureWarning), ("new", None)])
 def test_deprecate_kwarg(key, klass):
+    """
+
+    Parameters
+    ----------
+    key :
+        
+    klass :
+        
+
+    Returns
+    -------
+
+    """
     x = 78
 
     with tm.assert_produces_warning(klass):
@@ -37,23 +94,57 @@
 
 @pytest.mark.parametrize("key", list(_f2_mappings.keys()))
 def test_dict_deprecate_kwarg(key):
+    """
+
+    Parameters
+    ----------
+    key :
+        
+
+    Returns
+    -------
+
+    """
     with tm.assert_produces_warning(FutureWarning):
         assert _f2(old=key) == _f2_mappings[key]
 
 
 @pytest.mark.parametrize("key", ["bogus", 12345, -1.23])
 def test_missing_deprecate_kwarg(key):
+    """
+
+    Parameters
+    ----------
+    key :
+        
+
+    Returns
+    -------
+
+    """
     with tm.assert_produces_warning(FutureWarning):
         assert _f2(old=key) == key
 
 
 @pytest.mark.parametrize("x", [1, -1.4, 0])
 def test_callable_deprecate_kwarg(x):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+
+    Returns
+    -------
+
+    """
     with tm.assert_produces_warning(FutureWarning):
         assert _f3(old=x) == _f3_mapping(x)
 
 
 def test_callable_deprecate_kwarg_fail():
+    """ """
     msg = "((can only|cannot) concatenate)|(must be str)|(Can't convert)"
 
     with pytest.raises(TypeError, match=msg):
@@ -61,22 +152,58 @@
 
 
 def test_bad_deprecate_kwarg():
+    """ """
     msg = "mapping from old to new argument values must be dict or callable!"
 
     with pytest.raises(TypeError, match=msg):
 
         @deprecate_kwarg("old", "new", 0)
         def f4(new=None):
+            """
+
+            Parameters
+            ----------
+            new :
+                 (Default value = None)
+
+            Returns
+            -------
+
+            """
             return new
 
 
 @deprecate_kwarg("old", None)
 def _f4(old=True, unchanged=True):
+    """
+
+    Parameters
+    ----------
+    old :
+         (Default value = True)
+    unchanged :
+         (Default value = True)
+
+    Returns
+    -------
+
+    """
     return old, unchanged
 
 
 @pytest.mark.parametrize("key", ["old", "unchanged"])
 def test_deprecate_keyword(key):
+    """
+
+    Parameters
+    ----------
+    key :
+        
+
+    Returns
+    -------
+
+    """
     x = 9
 
     if key == "old":
