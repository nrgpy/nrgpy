# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jupyter_client/tests/test_kernelspec.py
+++ b/..//venv/lib/python3.8/site-packages/jupyter_client/tests/test_kernelspec.py
@@ -26,9 +26,20 @@
                      }
 
 class KernelSpecTests(unittest.TestCase):
+    """ """
 
     def _install_sample_kernel(self, kernels_dir):
-        """install a sample kernel in a kernels directory"""
+        """install a sample kernel in a kernels directory
+
+        Parameters
+        ----------
+        kernels_dir :
+            
+
+        Returns
+        -------
+
+        """
         sample_kernel_dir = pjoin(kernels_dir, 'sample')
         os.makedirs(sample_kernel_dir)
         json_file = pjoin(sample_kernel_dir, 'kernel.json')
@@ -37,6 +48,7 @@
         return sample_kernel_dir
 
     def setUp(self):
+        """ """
         self.env_patch = test_env()
         self.env_patch.start()
         self.sample_kernel_dir = self._install_sample_kernel(
@@ -51,13 +63,16 @@
             json.dump(sample_kernel_json, f)
 
     def tearDown(self):
+        """ """
         self.env_patch.stop()
 
     def test_find_kernel_specs(self):
+        """ """
         kernels = self.ksm.find_kernel_specs()
         self.assertEqual(kernels['sample'], self.sample_kernel_dir)
 
     def test_get_kernel_spec(self):
+        """ """
         ks = self.ksm.get_kernel_spec('SAMPLE')  # Case insensitive
         self.assertEqual(ks.resource_dir, self.sample_kernel_dir)
         self.assertEqual(ks.argv, sample_kernel_json['argv'])
@@ -66,11 +81,13 @@
         self.assertEqual(ks.metadata, {})
 
     def test_find_all_specs(self):
+        """ """
         kernels = self.ksm.get_all_specs()
         self.assertEqual(kernels['sample']['resource_dir'], self.sample_kernel_dir)
         self.assertIsNotNone(kernels['sample']['spec'])
 
     def test_kernel_spec_priority(self):
+        """ """
         td = TemporaryDirectory()
         self.addCleanup(td.cleanup)
         sample_kernel = self._install_sample_kernel(td.name)
@@ -82,6 +99,7 @@
         self.assertEqual(kernels['sample'], sample_kernel)
 
     def test_install_kernel_spec(self):
+        """ """
         self.ksm.install_kernel_spec(self.installable_kernel,
                                      kernel_name='tstinstalled',
                                      user=True)
@@ -93,6 +111,7 @@
                                      user=True)
 
     def test_install_kernel_spec_prefix(self):
+        """ """
         td = TemporaryDirectory()
         self.addCleanup(td.cleanup)
         capture = StringIO()
@@ -125,16 +144,19 @@
         not (os.name != 'nt' and not os.access('/usr/local/share', os.W_OK)),
         reason="needs Unix system without root privileges")
     def test_cant_install_kernel_spec(self):
+        """ """
         with self.assertRaises(OSError):
             self.ksm.install_kernel_spec(self.installable_kernel,
                                          kernel_name='tstinstalled',
                                          user=False)
 
     def test_remove_kernel_spec(self):
+        """ """
         path = self.ksm.remove_kernel_spec('sample')
         self.assertEqual(path, self.sample_kernel_dir)
 
     def test_remove_kernel_spec_app(self):
+        """ """
         p = Popen(
             [sys.executable, '-m', 'jupyter_client.kernelspecapp', 'remove', 'sample', '-f'],
             stdout=PIPE, stderr=STDOUT,
@@ -144,6 +166,7 @@
         self.assertEqual(p.returncode, 0, out.decode('utf8', 'replace'))
 
     def test_validate_kernel_name(self):
+        """ """
         for good in [
             'julia-0.4',
             'ipython',
@@ -169,7 +192,19 @@
         native_kernel = ksm.get_kernel_spec(native_name)
 
         class MyKSM(kernelspec.KernelSpecManager):
+            """ """
             def get_kernel_spec(self, name):
+                """
+
+                Parameters
+                ----------
+                name :
+                    
+
+                Returns
+                -------
+
+                """
                 spec = copy.copy(native_kernel)
                 if name == 'fake':
                     spec.name = name
@@ -181,6 +216,7 @@
                 return spec
 
             def find_kernel_specs(self):
+                """ """
                 return {
                     'fake': resource_dir,
                     native_name: native_kernel.resource_dir,
