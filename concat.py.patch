# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/reshape/concat.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/reshape/concat.py
@@ -48,6 +48,39 @@
     sort: bool = False,
     copy: bool = True,
 ) -> "DataFrame":
+    """
+
+    Parameters
+    ----------
+    objs: Union[Iterable["DataFrame"] :
+        
+    Mapping[Label :
+        
+    "DataFrame"]] :
+        
+    axis :
+         (Default value = 0)
+    join: str :
+         (Default value = "outer")
+    ignore_index: bool :
+         (Default value = False)
+    keys :
+         (Default value = None)
+    levels :
+         (Default value = None)
+    names :
+         (Default value = None)
+    verify_integrity: bool :
+         (Default value = False)
+    sort: bool :
+         (Default value = False)
+    copy: bool :
+         (Default value = True)
+
+    Returns
+    -------
+
+    """
     ...
 
 
@@ -64,6 +97,39 @@
     sort: bool = False,
     copy: bool = True,
 ) -> FrameOrSeriesUnion:
+    """
+
+    Parameters
+    ----------
+    objs: Union[Iterable[FrameOrSeries] :
+        
+    Mapping[Label :
+        
+    FrameOrSeries]] :
+        
+    axis :
+         (Default value = 0)
+    join: str :
+         (Default value = "outer")
+    ignore_index: bool :
+         (Default value = False)
+    keys :
+         (Default value = None)
+    levels :
+         (Default value = None)
+    names :
+         (Default value = None)
+    verify_integrity: bool :
+         (Default value = False)
+    sort: bool :
+         (Default value = False)
+    copy: bool :
+         (Default value = True)
+
+    Returns
+    -------
+
+    """
     ...
 
 
@@ -79,10 +145,9 @@
     sort: bool = False,
     copy: bool = True,
 ) -> FrameOrSeriesUnion:
-    """
-    Concatenate pandas objects along a particular axis with optional set logic
+    """Concatenate pandas objects along a particular axis with optional set logic
     along the other axes.
-
+    
     Can also add a layer of hierarchical indexing on the concatenation axis,
     which may be useful if the labels are the same (or overlapping) on
     the passed axis number.
@@ -95,9 +160,9 @@
         selected (see below). Any None objects will be dropped silently unless
         they are all None in which case a ValueError will be raised.
     axis : {0/'index', 1/'columns'}, default 0
-        The axis to concatenate along.
+        The axis to concatenate along. (Default value = 0)
     join : {'inner', 'outer'}, default 'outer'
-        How to handle indexes on other axis (or axes).
+        How to handle indexes on other axis (or axes). (Default value = "outer")
     ignore_index : bool, default False
         If True, do not use the index values along the concatenation axis. The
         resulting axis will be labeled 0, ..., n - 1. This is useful if you are
@@ -106,12 +171,12 @@
         axes are still respected in the join.
     keys : sequence, default None
         If multiple levels passed, should contain tuples. Construct
-        hierarchical index using the passed keys as the outermost level.
+        hierarchical index using the passed keys as the outermost level. (Default value = None)
     levels : list of sequences, default None
         Specific levels (unique values) to use for constructing a
-        MultiIndex. Otherwise they will be inferred from the keys.
+        MultiIndex. Otherwise they will be inferred from the keys. (Default value = None)
     names : list, default None
-        Names for the levels in the resulting hierarchical index.
+        Names for the levels in the resulting hierarchical index. (Default value = None)
     verify_integrity : bool, default False
         Check whether the new concatenated axis contains duplicates. This can
         be very expensive relative to the actual data concatenation.
@@ -120,14 +185,25 @@
         is 'outer'.
         This has no effect when ``join='inner'``, which already preserves
         the order of the non-concatenation axis.
-
         .. versionadded:: 0.23.0
         .. versionchanged:: 1.0.0
-
-           Changed to not sort by default.
-
+        Changed to not sort by default.
     copy : bool, default True
         If False, do not copy data unnecessarily.
+    objs: Union[Iterable[FrameOrSeries] :
+        
+    Mapping[Label :
+        
+    FrameOrSeries]] :
+        
+    ignore_index: bool :
+         (Default value = False)
+    verify_integrity: bool :
+         (Default value = False)
+    sort: bool :
+         (Default value = False)
+    copy: bool :
+         (Default value = True)
 
     Returns
     -------
@@ -143,19 +219,48 @@
     DataFrame.append : Concatenate DataFrames.
     DataFrame.join : Join DataFrames using indexes.
     DataFrame.merge : Merge DataFrames by indexes or columns.
-
     Notes
     -----
     The keys, levels, and names arguments are all optional.
-
+    
     A walkthrough of how this method fits in with other tools for combining
     pandas objects can be found `here
     <https://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html>`__.
-
     Examples
     --------
     Combine two ``Series``.
-
+    
+    
+    Clear the existing index and reset it in the result
+    by setting the ``ignore_index`` option to ``True``.
+    
+    
+    Add a hierarchical index at the outermost level of
+    the data with the ``keys`` option.
+    
+    
+    Label the index keys you create with the ``names`` option.
+    
+    
+    Combine two ``DataFrame`` objects with identical columns.
+    
+    
+    Combine ``DataFrame`` objects with overlapping columns
+    and return everything. Columns outside the intersection will
+    be filled with ``NaN`` values.
+    
+    
+    Combine ``DataFrame`` objects with overlapping columns
+    and return only those that are shared by passing ``inner`` to
+    the ``join`` keyword argument.
+    
+    
+    Combine ``DataFrame`` objects horizontally along the x axis by
+    passing in ``axis=1``.
+    
+    
+    Prevent the result from including duplicate index values with the
+    ``verify_integrity`` option.
     >>> s1 = pd.Series(['a', 'b'])
     >>> s2 = pd.Series(['c', 'd'])
     >>> pd.concat([s1, s2])
@@ -164,29 +269,21 @@
     0    c
     1    d
     dtype: object
-
-    Clear the existing index and reset it in the result
-    by setting the ``ignore_index`` option to ``True``.
-
+    
     >>> pd.concat([s1, s2], ignore_index=True)
     0    a
     1    b
     2    c
     3    d
     dtype: object
-
-    Add a hierarchical index at the outermost level of
-    the data with the ``keys`` option.
-
+    
     >>> pd.concat([s1, s2], keys=['s1', 's2'])
     s1  0    a
         1    b
     s2  0    c
         1    d
     dtype: object
-
-    Label the index keys you create with the ``names`` option.
-
+    
     >>> pd.concat([s1, s2], keys=['s1', 's2'],
     ...           names=['Series name', 'Row ID'])
     Series name  Row ID
@@ -195,9 +292,7 @@
     s2           0         c
                  1         d
     dtype: object
-
-    Combine two ``DataFrame`` objects with identical columns.
-
+    
     >>> df1 = pd.DataFrame([['a', 1], ['b', 2]],
     ...                    columns=['letter', 'number'])
     >>> df1
@@ -216,11 +311,7 @@
     1      b       2
     0      c       3
     1      d       4
-
-    Combine ``DataFrame`` objects with overlapping columns
-    and return everything. Columns outside the intersection will
-    be filled with ``NaN`` values.
-
+    
     >>> df3 = pd.DataFrame([['c', 3, 'cat'], ['d', 4, 'dog']],
     ...                    columns=['letter', 'number', 'animal'])
     >>> df3
@@ -233,31 +324,21 @@
     1      b       2    NaN
     0      c       3    cat
     1      d       4    dog
-
-    Combine ``DataFrame`` objects with overlapping columns
-    and return only those that are shared by passing ``inner`` to
-    the ``join`` keyword argument.
-
+    
     >>> pd.concat([df1, df3], join="inner")
       letter  number
     0      a       1
     1      b       2
     0      c       3
     1      d       4
-
-    Combine ``DataFrame`` objects horizontally along the x axis by
-    passing in ``axis=1``.
-
+    
     >>> df4 = pd.DataFrame([['bird', 'polly'], ['monkey', 'george']],
     ...                    columns=['animal', 'name'])
     >>> pd.concat([df1, df4], axis=1)
       letter  number  animal    name
     0      a       1    bird   polly
     1      b       2  monkey  george
-
-    Prevent the result from including duplicate index values with the
-    ``verify_integrity`` option.
-
+    
     >>> df5 = pd.DataFrame([1], index=['a'])
     >>> df5
        0
@@ -288,9 +369,7 @@
 
 
 class _Concatenator:
-    """
-    Orchestrates a concatenation operation for BlockManagers
-    """
+    """Orchestrates a concatenation operation for BlockManagers"""
 
     def __init__(
         self,
@@ -454,6 +533,7 @@
         self.new_axes = self._get_new_axes()
 
     def get_result(self):
+        """ """
 
         # series only
         if self._is_series:
@@ -509,12 +589,14 @@
             return cons(new_data).__finalize__(self, method="concat")
 
     def _get_result_dim(self) -> int:
+        """ """
         if self._is_series and self.bm_axis == 1:
             return 2
         else:
             return self.objs[0].ndim
 
     def _get_new_axes(self) -> List[Index]:
+        """ """
         ndim = self._get_result_dim()
         return [
             self._get_concat_axis() if i == self.bm_axis else self._get_comb_axis(i)
@@ -522,6 +604,17 @@
         ]
 
     def _get_comb_axis(self, i: int) -> Index:
+        """
+
+        Parameters
+        ----------
+        i: int :
+            
+
+        Returns
+        -------
+
+        """
         data_axis = self.objs[0]._get_block_manager_axis(i)
         return get_objs_combined_axis(
             self.objs,
@@ -532,9 +625,7 @@
         )
 
     def _get_concat_axis(self) -> Index:
-        """
-        Return index to be used along concatenation axis.
-        """
+        """ """
         if self._is_series:
             if self.bm_axis == 0:
                 indexes = [x.index for x in self.objs]
@@ -582,6 +673,17 @@
         return concat_axis
 
     def _maybe_check_integrity(self, concat_index: Index):
+        """
+
+        Parameters
+        ----------
+        concat_index: Index :
+            
+
+        Returns
+        -------
+
+        """
         if self.verify_integrity:
             if not concat_index.is_unique:
                 overlap = concat_index[concat_index.duplicated()].unique()
@@ -589,10 +691,38 @@
 
 
 def _concat_indexes(indexes) -> Index:
+    """
+
+    Parameters
+    ----------
+    indexes :
+        
+
+    Returns
+    -------
+
+    """
     return indexes[0].append(indexes[1:])
 
 
 def _make_concat_multiindex(indexes, keys, levels=None, names=None) -> MultiIndex:
+    """
+
+    Parameters
+    ----------
+    indexes :
+        
+    keys :
+        
+    levels :
+         (Default value = None)
+    names :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
 
     if (levels is None and isinstance(keys[0], tuple)) or (
         levels is not None and len(levels) > 1
