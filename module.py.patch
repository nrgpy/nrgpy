# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jedi/inference/value/module.py
+++ b/..//venv/lib/python3.8/site-packages/jedi/inference/value/module.py
@@ -13,9 +13,7 @@
 
 
 class _ModuleAttributeName(AbstractNameDefinition):
-    """
-    For module attributes like __file__, __str__ and so on.
-    """
+    """For module attributes like __file__, __str__ and so on."""
     api_type = u'instance'
 
     def __init__(self, parent_module, string_name, string_value=None):
@@ -24,6 +22,7 @@
         self._string_value = string_value
 
     def infer(self):
+        """ """
         if self._string_value is not None:
             s = self._string_value
             if self.parent_context.inference_state.environment.version_info.major == 2 \
@@ -36,11 +35,18 @@
 
 
 class SubModuleDictMixin(object):
+    """ """
     @inference_state_method_cache()
     def sub_modules_dict(self):
-        """
-        Lists modules in the directory of this module (if this module is a
+        """Lists modules in the directory of this module (if this module is a
         package).
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         names = {}
         if self.is_package():
@@ -57,9 +63,21 @@
 
 
 class ModuleMixin(SubModuleDictMixin):
+    """ """
     _module_name_class = ModuleName
 
     def get_filters(self, origin_scope=None):
+        """
+
+        Parameters
+        ----------
+        origin_scope :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         yield MergedFilter(
             ParserTreeFilter(
                 parent_context=self.as_context(),
@@ -73,22 +91,27 @@
             yield star_filter
 
     def py__class__(self):
+        """ """
         c, = values_from_qualified_names(self.inference_state, u'types', u'ModuleType')
         return c
 
     def is_module(self):
+        """ """
         return True
 
     def is_stub(self):
+        """ """
         return False
 
     @property
     @inference_state_method_cache()
     def name(self):
+        """ """
         return self._module_name_class(self, self.string_names[-1])
 
     @inference_state_method_cache()
     def _module_attributes_dict(self):
+        """ """
         names = ['__package__', '__doc__', '__name__']
         # All the additional module attributes are strings.
         dct = dict((n, _ModuleAttributeName(self, n)) for n in names)
@@ -98,6 +121,7 @@
         return dct
 
     def iter_star_filters(self):
+        """ """
         for star_module in self.star_imports():
             f = next(star_module.get_filters(), None)
             assert f is not None
@@ -108,6 +132,7 @@
     # to push the star imports into InferenceState.module_cache, if we reenable this.
     @inference_state_method_cache([])
     def star_imports(self):
+        """ """
         from jedi.inference.imports import Importer
 
         modules = []
@@ -128,15 +153,22 @@
         return modules
 
     def get_qualified_names(self):
-        """
-        A module doesn't have a qualified name, but it's important to note that
+        """A module doesn't have a qualified name, but it's important to note that
         it's reachable and not `None`. With this information we can add
         qualified names on top for all value children.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         return ()
 
 
 class ModuleValue(ModuleMixin, TreeValue):
+    """ """
     api_type = u'module'
 
     def __init__(self, inference_state, module_node, code_lines, file_io=None,
@@ -156,6 +188,7 @@
         self._is_package = is_package
 
     def is_stub(self):
+        """ """
         if self._path is not None and self._path.endswith('.pyi'):
             # Currently this is the way how we identify stubs when e.g. goto is
             # used in them. This could be changed if stubs would be identified
@@ -164,32 +197,39 @@
         return super(ModuleValue, self).is_stub()
 
     def py__name__(self):
+        """ """
         if self.string_names is None:
             return None
         return '.'.join(self.string_names)
 
     def py__file__(self):
-        """
-        In contrast to Python's __file__ can be None.
-        """
+        """In contrast to Python's __file__ can be None."""
         if self._path is None:
             return None
 
         return os.path.abspath(self._path)
 
     def is_package(self):
+        """ """
         return self._is_package
 
     def py__package__(self):
+        """ """
         if self._is_package:
             return self.string_names
         return self.string_names[:-1]
 
     def py__path__(self):
-        """
-        In case of a package, this returns Python's __path__ attribute, which
+        """In case of a package, this returns Python's __path__ attribute, which
         is a list of paths (strings).
         Returns None if the module is not a package.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         if not self._is_package:
             return None
@@ -219,6 +259,7 @@
         return [os.path.dirname(file)]
 
     def _as_context(self):
+        """ """
         return ModuleContext(self)
 
     def __repr__(self):
