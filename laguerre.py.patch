# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/polynomial/laguerre.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/polynomial/laguerre.py
@@ -94,11 +94,10 @@
 
 
 def poly2lag(pol):
-    """
-    poly2lag(pol)
-
+    """poly2lag(pol)
+    
     Convert a polynomial to a Laguerre series.
-
+    
     Convert an array representing the coefficients of a polynomial (relative
     to the "standard" basis) ordered from lowest degree to highest, to an
     array of the coefficients of the equivalent Laguerre series, ordered
@@ -118,18 +117,15 @@
     See Also
     --------
     lag2poly
-
     Notes
     -----
     The easy way to do conversions between polynomial basis sets
     is to use the convert method of a class instance.
-
     Examples
     --------
     >>> from numpy.polynomial.laguerre import poly2lag
     >>> poly2lag(np.arange(4))
     array([ 23., -63.,  58., -18.])
-
     """
     [pol] = pu.as_series([pol])
     deg = len(pol) - 1
@@ -140,9 +136,8 @@
 
 
 def lag2poly(c):
-    """
-    Convert a Laguerre series to a polynomial.
-
+    """Convert a Laguerre series to a polynomial.
+    
     Convert an array representing the coefficients of a Laguerre series,
     ordered from lowest degree to highest, to an array of the coefficients
     of the equivalent polynomial (relative to the "standard" basis) ordered
@@ -164,18 +159,15 @@
     See Also
     --------
     poly2lag
-
     Notes
     -----
     The easy way to do conversions between polynomial basis sets
     is to use the convert method of a class instance.
-
     Examples
     --------
     >>> from numpy.polynomial.laguerre import lag2poly
     >>> lag2poly([ 23., -63.,  58., -18.])
     array([0., 1., 2., 3.])
-
     """
     from .polynomial import polyadd, polysub, polymulx
 
@@ -212,15 +204,16 @@
 
 
 def lagline(off, scl):
-    """
-    Laguerre series whose graph is a straight line.
-
-
+    """Laguerre series whose graph is a straight line.
 
     Parameters
     ----------
     off, scl : scalars
         The specified line is given by ``off + scl*x``.
+    off :
+        
+    scl :
+        
 
     Returns
     -------
@@ -231,7 +224,6 @@
     See Also
     --------
     polyline, chebline
-
     Examples
     --------
     >>> from numpy.polynomial.laguerre import lagline, lagval
@@ -239,7 +231,6 @@
     3.0
     >>> lagval(1,lagline(3, 2))
     5.0
-
     """
     if scl != 0:
         return np.array([off + scl, -scl])
@@ -248,23 +239,22 @@
 
 
 def lagfromroots(roots):
-    """
-    Generate a Laguerre series with given roots.
-
+    """Generate a Laguerre series with given roots.
+    
     The function returns the coefficients of the polynomial
-
+    
     .. math:: p(x) = (x - r_0) * (x - r_1) * ... * (x - r_n),
-
+    
     in Laguerre form, where the `r_n` are the roots specified in `roots`.
     If a zero has multiplicity n, then it must appear in `roots` n times.
     For instance, if 2 is a root of multiplicity three and 3 is a root of
     multiplicity 2, then `roots` looks something like [2, 2, 2, 3, 3]. The
     roots can appear in any order.
-
+    
     If the returned coefficients are `c`, then
-
+    
     .. math:: p(x) = c_0 + c_1 * L_1(x) + ... +  c_n * L_n(x)
-
+    
     The coefficient of the last term is not generally 1 for monic
     polynomials in Laguerre form.
 
@@ -284,7 +274,6 @@
     See Also
     --------
     polyfromroots, legfromroots, chebfromroots, hermfromroots, hermefromroots
-
     Examples
     --------
     >>> from numpy.polynomial.laguerre import lagfromroots, lagval
@@ -294,15 +283,13 @@
     >>> coef = lagfromroots((-1j, 1j))
     >>> lagval((-1j, 1j), coef)
     array([0.+0.j, 0.+0.j])
-
     """
     return pu._fromroots(lagline, lagmul, roots)
 
 
 def lagadd(c1, c2):
-    """
-    Add one Laguerre series to another.
-
+    """Add one Laguerre series to another.
+    
     Returns the sum of two Laguerre series `c1` + `c2`.  The arguments
     are sequences of coefficients ordered from lowest order term to
     highest, i.e., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.
@@ -312,6 +299,10 @@
     c1, c2 : array_like
         1-D arrays of Laguerre series coefficients ordered from low to
         high.
+    c1 :
+        
+    c2 :
+        
 
     Returns
     -------
@@ -321,29 +312,24 @@
     See Also
     --------
     lagsub, lagmulx, lagmul, lagdiv, lagpow
-
     Notes
     -----
     Unlike multiplication, division, etc., the sum of two Laguerre series
     is a Laguerre series (without having to "reproject" the result onto
     the basis set) so addition, just like that of "standard" polynomials,
     is simply "component-wise."
-
     Examples
     --------
     >>> from numpy.polynomial.laguerre import lagadd
     >>> lagadd([1, 2, 3], [1, 2, 3, 4])
     array([2.,  4.,  6.,  4.])
-
-
     """
     return pu._add(c1, c2)
 
 
 def lagsub(c1, c2):
-    """
-    Subtract one Laguerre series from another.
-
+    """Subtract one Laguerre series from another.
+    
     Returns the difference of two Laguerre series `c1` - `c2`.  The
     sequences of coefficients are from lowest order term to highest, i.e.,
     [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.
@@ -353,6 +339,10 @@
     c1, c2 : array_like
         1-D arrays of Laguerre series coefficients ordered from low to
         high.
+    c1 :
+        
+    c2 :
+        
 
     Returns
     -------
@@ -362,30 +352,26 @@
     See Also
     --------
     lagadd, lagmulx, lagmul, lagdiv, lagpow
-
     Notes
     -----
     Unlike multiplication, division, etc., the difference of two Laguerre
     series is a Laguerre series (without having to "reproject" the result
     onto the basis set) so subtraction, just like that of "standard"
     polynomials, is simply "component-wise."
-
     Examples
     --------
     >>> from numpy.polynomial.laguerre import lagsub
     >>> lagsub([1, 2, 3, 4], [1, 2, 3])
     array([0.,  0.,  0.,  4.])
-
     """
     return pu._sub(c1, c2)
 
 
 def lagmulx(c):
     """Multiply a Laguerre series by x.
-
+    
     Multiply the Laguerre series `c` by x, where x is the independent
     variable.
-
 
     Parameters
     ----------
@@ -401,22 +387,19 @@
     See Also
     --------
     lagadd, lagsub, lagmul, lagdiv, lagpow
-
     Notes
     -----
     The multiplication uses the recursion relationship for Laguerre
     polynomials in the form
-
+    
     .. math::
-
+    
     xP_i(x) = (-(i + 1)*P_{i + 1}(x) + (2i + 1)P_{i}(x) - iP_{i - 1}(x))
-
     Examples
     --------
     >>> from numpy.polynomial.laguerre import lagmulx
     >>> lagmulx([1, 2, 3])
     array([-1.,  -1.,  11.,  -9.])
-
     """
     # c is a trimmed copy
     [c] = pu.as_series([c])
@@ -435,9 +418,8 @@
 
 
 def lagmul(c1, c2):
-    """
-    Multiply one Laguerre series by another.
-
+    """Multiply one Laguerre series by another.
+    
     Returns the product of two Laguerre series `c1` * `c2`.  The arguments
     are sequences of coefficients, from lowest order "term" to highest,
     e.g., [1,2,3] represents the series ``P_0 + 2*P_1 + 3*P_2``.
@@ -447,6 +429,10 @@
     c1, c2 : array_like
         1-D arrays of Laguerre series coefficients ordered from low to
         high.
+    c1 :
+        
+    c2 :
+        
 
     Returns
     -------
@@ -456,7 +442,6 @@
     See Also
     --------
     lagadd, lagsub, lagmulx, lagdiv, lagpow
-
     Notes
     -----
     In general, the (polynomial) product of two C-series results in terms
@@ -464,13 +449,11 @@
     the product as a Laguerre series, it is necessary to "reproject" the
     product onto said basis set, which may produce "unintuitive" (but
     correct) results; see Examples section below.
-
     Examples
     --------
     >>> from numpy.polynomial.laguerre import lagmul
     >>> lagmul([1, 2, 3], [0, 1, 2])
     array([  8., -13.,  38., -51.,  36.])
-
     """
     # s1, s2 are trimmed copies
     [c1, c2] = pu.as_series([c1, c2])
@@ -501,9 +484,8 @@
 
 
 def lagdiv(c1, c2):
-    """
-    Divide one Laguerre series by another.
-
+    """Divide one Laguerre series by another.
+    
     Returns the quotient-with-remainder of two Laguerre series
     `c1` / `c2`.  The arguments are sequences of coefficients from lowest
     order "term" to highest, e.g., [1,2,3] represents the series
@@ -514,6 +496,10 @@
     c1, c2 : array_like
         1-D arrays of Laguerre series coefficients ordered from low to
         high.
+    c1 :
+        
+    c2 :
+        
 
     Returns
     -------
@@ -524,7 +510,6 @@
     See Also
     --------
     lagadd, lagsub, lagmulx, lagmul, lagpow
-
     Notes
     -----
     In general, the (polynomial) division of one Laguerre series by another
@@ -533,7 +518,6 @@
     series, it is necessary to "reproject" the results onto the Laguerre
     basis set, which may produce "unintuitive" (but correct) results; see
     Examples section below.
-
     Examples
     --------
     >>> from numpy.polynomial.laguerre import lagdiv
@@ -541,14 +525,13 @@
     (array([1., 2., 3.]), array([0.]))
     >>> lagdiv([  9., -12.,  38., -51.,  36.], [0, 1, 2])
     (array([1., 2., 3.]), array([1., 1.]))
-
     """
     return pu._div(lagmul, c1, c2)
 
 
 def lagpow(c, pow, maxpower=16):
     """Raise a Laguerre series to a power.
-
+    
     Returns the Laguerre series `c` raised to the power `pow`. The
     argument `c` is a sequence of coefficients ordered from low to high.
     i.e., [1,2,3] is the series  ``P_0 + 2*P_1 + 3*P_2.``
@@ -572,21 +555,18 @@
     See Also
     --------
     lagadd, lagsub, lagmulx, lagmul, lagdiv
-
     Examples
     --------
     >>> from numpy.polynomial.laguerre import lagpow
     >>> lagpow([1, 2, 3], 2)
     array([ 14., -16.,  56., -72.,  54.])
-
     """
     return pu._pow(lagmul, c, pow, maxpower)
 
 
 def lagder(c, m=1, scl=1, axis=0):
-    """
-    Differentiate a Laguerre series.
-
+    """Differentiate a Laguerre series.
+    
     Returns the Laguerre series coefficients `c` differentiated `m` times
     along `axis`.  At each iteration the result is multiplied by `scl` (the
     scaling factor is for use in a linear change of variable). The argument
@@ -610,7 +590,6 @@
         variable. (Default: 1)
     axis : int, optional
         Axis over which the derivative is taken. (Default: 0).
-
         .. versionadded:: 1.7.0
 
     Returns
@@ -621,14 +600,12 @@
     See Also
     --------
     lagint
-
     Notes
     -----
     In general, the result of differentiating a Laguerre series does not
     resemble the same operation on a power series. Thus the result of this
     function may be "unintuitive," albeit correct; see Examples section
     below.
-
     Examples
     --------
     >>> from numpy.polynomial.laguerre import lagder
@@ -636,7 +613,6 @@
     array([1.,  2.,  3.])
     >>> lagder([ 1.,  0.,  0., -4.,  3.], m=2)
     array([1.,  2.,  3.])
-
     """
     c = np.array(c, ndmin=1, copy=True)
     if c.dtype.char in '?bBhHiIlLqQpP':
@@ -670,9 +646,8 @@
 
 
 def lagint(c, m=1, k=[], lbnd=0, scl=1, axis=0):
-    """
-    Integrate a Laguerre series.
-
+    """Integrate a Laguerre series.
+    
     Returns the Laguerre series coefficients `c` integrated `m` times from
     `lbnd` along `axis`. At each iteration the resulting series is
     **multiplied** by `scl` and an integration constant, `k`, is added.
@@ -684,7 +659,6 @@
     represents the series ``L_0 + 2*L_1 + 3*L_2`` while [[1,2],[1,2]]
     represents ``1*L_0(x)*L_0(y) + 1*L_1(x)*L_0(y) + 2*L_0(x)*L_1(y) +
     2*L_1(x)*L_1(y)`` if axis=0 is ``x`` and axis=1 is ``y``.
-
 
     Parameters
     ----------
@@ -707,7 +681,6 @@
         before the integration constant is added. (Default: 1)
     axis : int, optional
         Axis over which the integral is taken. (Default: 0).
-
         .. versionadded:: 1.7.0
 
     Returns
@@ -724,7 +697,6 @@
     See Also
     --------
     lagder
-
     Notes
     -----
     Note that the result of each integration is *multiplied* by `scl`.
@@ -732,12 +704,11 @@
     variable :math:`u = ax + b` in an integral relative to `x`.  Then
     :math:`dx = du/a`, so one will need to set `scl` equal to
     :math:`1/a` - perhaps not what one would have first thought.
-
+    
     Also note that, in general, the result of integrating a C-series needs
     to be "reprojected" onto the C-series basis set.  Thus, typically,
     the result of this function is "unintuitive," albeit correct; see
     Examples section below.
-
     Examples
     --------
     >>> from numpy.polynomial.laguerre import lagint
@@ -751,7 +722,6 @@
     array([11.5,  1. ,  1. , -3. ])
     >>> lagint([1,2], m=2, k=[1,2], lbnd=-1)
     array([ 11.16666667,  -5.        ,  -3.        ,   2.        ]) # may vary
-
     """
     c = np.array(c, ndmin=1, copy=True)
     if c.dtype.char in '?bBhHiIlLqQpP':
@@ -794,24 +764,23 @@
 
 
 def lagval(x, c, tensor=True):
-    """
-    Evaluate a Laguerre series at points x.
-
+    """Evaluate a Laguerre series at points x.
+    
     If `c` is of length `n + 1`, this function returns the value:
-
+    
     .. math:: p(x) = c_0 * L_0(x) + c_1 * L_1(x) + ... + c_n * L_n(x)
-
+    
     The parameter `x` is converted to an array only if it is a tuple or a
     list, otherwise it is treated as a scalar. In either case, either `x`
     or its elements must support multiplication and addition both with
     themselves and with the elements of `c`.
-
+    
     If `c` is a 1-D array, then `p(x)` will have the same shape as `x`.  If
     `c` is multidimensional, then the shape of the result depends on the
     value of `tensor`. If `tensor` is true the shape will be c.shape[1:] +
     x.shape. If `tensor` is false the shape will be c.shape[1:]. Note that
     scalars have shape (,).
-
+    
     Trailing zeros in the coefficients will be used in the evaluation, so
     they should be avoided if efficiency is a concern.
 
@@ -835,7 +804,6 @@
         `c` is evaluated for every element of `x`. If False, `x` is broadcast
         over the columns of `c` for the evaluation.  This keyword is useful
         when `c` is multidimensional. The default value is True.
-
         .. versionadded:: 1.7.0
 
     Returns
@@ -846,11 +814,9 @@
     See Also
     --------
     lagval2d, laggrid2d, lagval3d, laggrid3d
-
     Notes
     -----
     The evaluation uses Clenshaw recursion, aka synthetic division.
-
     Examples
     --------
     >>> from numpy.polynomial.laguerre import lagval
@@ -860,7 +826,6 @@
     >>> lagval([[1,2],[3,4]], coef)
     array([[-0.5, -4. ],
            [-4.5, -2. ]])
-
     """
     c = np.array(c, ndmin=1, copy=False)
     if c.dtype.char in '?bBhHiIlLqQpP':
@@ -889,19 +854,18 @@
 
 
 def lagval2d(x, y, c):
-    """
-    Evaluate a 2-D Laguerre series at points (x, y).
-
+    """Evaluate a 2-D Laguerre series at points (x, y).
+    
     This function returns the values:
-
+    
     .. math:: p(x,y) = \\sum_{i,j} c_{i,j} * L_i(x) * L_j(y)
-
+    
     The parameters `x` and `y` are converted to arrays only if they are
     tuples or a lists, otherwise they are treated as a scalars and they
     must have the same shape after conversion. In either case, either `x`
     and `y` or their elements must support multiplication and addition both
     with themselves and with the elements of `c`.
-
+    
     If `c` is a 1-D array a one is implicitly appended to its shape to make
     it 2-D. The shape of the result will be c.shape[2:] + x.shape.
 
@@ -917,6 +881,10 @@
         of multi-degree i,j is contained in ``c[i,j]``. If `c` has
         dimension greater than two the remaining indices enumerate multiple
         sets of coefficients.
+    x :
+        
+    y :
+        
 
     Returns
     -------
@@ -927,33 +895,30 @@
     See Also
     --------
     lagval, laggrid2d, lagval3d, laggrid3d
-
-    Notes
-    -----
-
+    Notes
+    -----
+    
     .. versionadded:: 1.7.0
-
     """
     return pu._valnd(lagval, c, x, y)
 
 
 def laggrid2d(x, y, c):
-    """
-    Evaluate a 2-D Laguerre series on the Cartesian product of x and y.
-
+    """Evaluate a 2-D Laguerre series on the Cartesian product of x and y.
+    
     This function returns the values:
-
+    
     .. math:: p(a,b) = \\sum_{i,j} c_{i,j} * L_i(a) * L_j(b)
-
+    
     where the points `(a, b)` consist of all pairs formed by taking
     `a` from `x` and `b` from `y`. The resulting points form a grid with
     `x` in the first dimension and `y` in the second.
-
+    
     The parameters `x` and `y` are converted to arrays only if they are
     tuples or a lists, otherwise they are treated as a scalars. In either
     case, either `x` and `y` or their elements must support multiplication
     and addition both with themselves and with the elements of `c`.
-
+    
     If `c` has fewer than two dimensions, ones are implicitly appended to
     its shape to make it 2-D. The shape of the result will be c.shape[2:] +
     x.shape + y.shape.
@@ -970,6 +935,10 @@
         multi-degree i,j is contained in `c[i,j]`. If `c` has dimension
         greater than two the remaining indices enumerate multiple sets of
         coefficients.
+    x :
+        
+    y :
+        
 
     Returns
     -------
@@ -980,30 +949,27 @@
     See Also
     --------
     lagval, lagval2d, lagval3d, laggrid3d
-
-    Notes
-    -----
-
+    Notes
+    -----
+    
     .. versionadded:: 1.7.0
-
     """
     return pu._gridnd(lagval, c, x, y)
 
 
 def lagval3d(x, y, z, c):
-    """
-    Evaluate a 3-D Laguerre series at points (x, y, z).
-
+    """Evaluate a 3-D Laguerre series at points (x, y, z).
+    
     This function returns the values:
-
+    
     .. math:: p(x,y,z) = \\sum_{i,j,k} c_{i,j,k} * L_i(x) * L_j(y) * L_k(z)
-
+    
     The parameters `x`, `y`, and `z` are converted to arrays only if
     they are tuples or a lists, otherwise they are treated as a scalars and
     they must have the same shape after conversion. In either case, either
     `x`, `y`, and `z` or their elements must support multiplication and
     addition both with themselves and with the elements of `c`.
-
+    
     If `c` has fewer than 3 dimensions, ones are implicitly appended to its
     shape to make it 3-D. The shape of the result will be c.shape[3:] +
     x.shape.
@@ -1021,6 +987,12 @@
         multi-degree i,j,k is contained in ``c[i,j,k]``. If `c` has dimension
         greater than 3 the remaining indices enumerate multiple sets of
         coefficients.
+    x :
+        
+    y :
+        
+    z :
+        
 
     Returns
     -------
@@ -1031,35 +1003,32 @@
     See Also
     --------
     lagval, lagval2d, laggrid2d, laggrid3d
-
-    Notes
-    -----
-
+    Notes
+    -----
+    
     .. versionadded:: 1.7.0
-
     """
     return pu._valnd(lagval, c, x, y, z)
 
 
 def laggrid3d(x, y, z, c):
-    """
-    Evaluate a 3-D Laguerre series on the Cartesian product of x, y, and z.
-
+    """Evaluate a 3-D Laguerre series on the Cartesian product of x, y, and z.
+    
     This function returns the values:
-
+    
     .. math:: p(a,b,c) = \\sum_{i,j,k} c_{i,j,k} * L_i(a) * L_j(b) * L_k(c)
-
+    
     where the points `(a, b, c)` consist of all triples formed by taking
     `a` from `x`, `b` from `y`, and `c` from `z`. The resulting points form
     a grid with `x` in the first dimension, `y` in the second, and `z` in
     the third.
-
+    
     The parameters `x`, `y`, and `z` are converted to arrays only if they
     are tuples or a lists, otherwise they are treated as a scalars. In
     either case, either `x`, `y`, and `z` or their elements must support
     multiplication and addition both with themselves and with the elements
     of `c`.
-
+    
     If `c` has fewer than three dimensions, ones are implicitly appended to
     its shape to make it 3-D. The shape of the result will be c.shape[3:] +
     x.shape + y.shape + z.shape.
@@ -1077,6 +1046,12 @@
         degree i,j are contained in ``c[i,j]``. If `c` has dimension
         greater than two the remaining indices enumerate multiple sets of
         coefficients.
+    x :
+        
+    y :
+        
+    z :
+        
 
     Returns
     -------
@@ -1087,27 +1062,25 @@
     See Also
     --------
     lagval, lagval2d, laggrid2d, lagval3d
-
-    Notes
-    -----
-
+    Notes
+    -----
+    
     .. versionadded:: 1.7.0
-
     """
     return pu._gridnd(lagval, c, x, y, z)
 
 
 def lagvander(x, deg):
     """Pseudo-Vandermonde matrix of given degree.
-
+    
     Returns the pseudo-Vandermonde matrix of degree `deg` and sample points
     `x`. The pseudo-Vandermonde matrix is defined by
-
+    
     .. math:: V[..., i] = L_i(x)
-
+    
     where `0 <= i <= deg`. The leading indices of `V` index the elements of
     `x` and the last index is the degree of the Laguerre polynomial.
-
+    
     If `c` is a 1-D array of coefficients of length `n + 1` and `V` is the
     array ``V = lagvander(x, n)``, then ``np.dot(V, c)`` and
     ``lagval(x, c)`` are the same up to roundoff. This equivalence is
@@ -1139,7 +1112,6 @@
     array([[ 1.        ,  1.        ,  1.        ,  1.        ],
            [ 1.        ,  0.        , -0.5       , -0.66666667],
            [ 1.        , -1.        , -1.        , -0.33333333]])
-
     """
     ideg = pu._deprecate_as_int(deg, "deg")
     if ideg < 0:
@@ -1159,22 +1131,22 @@
 
 def lagvander2d(x, y, deg):
     """Pseudo-Vandermonde matrix of given degrees.
-
+    
     Returns the pseudo-Vandermonde matrix of degrees `deg` and sample
     points `(x, y)`. The pseudo-Vandermonde matrix is defined by
-
+    
     .. math:: V[..., (deg[1] + 1)*i + j] = L_i(x) * L_j(y),
-
+    
     where `0 <= i <= deg[0]` and `0 <= j <= deg[1]`. The leading indices of
     `V` index the points `(x, y)` and the last index encodes the degrees of
     the Laguerre polynomials.
-
+    
     If ``V = lagvander2d(x, y, [xdeg, ydeg])``, then the columns of `V`
     correspond to the elements of a 2-D coefficient array `c` of shape
     (xdeg + 1, ydeg + 1) in the order
-
+    
     .. math:: c_{00}, c_{01}, c_{02} ... , c_{10}, c_{11}, c_{12} ...
-
+    
     and ``np.dot(V, c.flat)`` and ``lagval2d(x, y, c)`` will be the same
     up to roundoff. This equivalence is useful both for least squares
     fitting and for the evaluation of a large number of 2-D Laguerre
@@ -1189,6 +1161,10 @@
         1-D arrays.
     deg : list of ints
         List of maximum degrees of the form [x_deg, y_deg].
+    x :
+        
+    y :
+        
 
     Returns
     -------
@@ -1200,35 +1176,33 @@
     See Also
     --------
     lagvander, lagvander3d, lagval2d, lagval3d
-
-    Notes
-    -----
-
+    Notes
+    -----
+    
     .. versionadded:: 1.7.0
-
     """
     return pu._vander_nd_flat((lagvander, lagvander), (x, y), deg)
 
 
 def lagvander3d(x, y, z, deg):
     """Pseudo-Vandermonde matrix of given degrees.
-
+    
     Returns the pseudo-Vandermonde matrix of degrees `deg` and sample
     points `(x, y, z)`. If `l, m, n` are the given degrees in `x, y, z`,
     then The pseudo-Vandermonde matrix is defined by
-
+    
     .. math:: V[..., (m+1)(n+1)i + (n+1)j + k] = L_i(x)*L_j(y)*L_k(z),
-
+    
     where `0 <= i <= l`, `0 <= j <= m`, and `0 <= j <= n`.  The leading
     indices of `V` index the points `(x, y, z)` and the last index encodes
     the degrees of the Laguerre polynomials.
-
+    
     If ``V = lagvander3d(x, y, z, [xdeg, ydeg, zdeg])``, then the columns
     of `V` correspond to the elements of a 3-D coefficient array `c` of
     shape (xdeg + 1, ydeg + 1, zdeg + 1) in the order
-
+    
     .. math:: c_{000}, c_{001}, c_{002},... , c_{010}, c_{011}, c_{012},...
-
+    
     and  ``np.dot(V, c.flat)`` and ``lagval3d(x, y, z, c)`` will be the
     same up to roundoff. This equivalence is useful both for least squares
     fitting and for the evaluation of a large number of 3-D Laguerre
@@ -1243,6 +1217,12 @@
         arrays.
     deg : list of ints
         List of maximum degrees of the form [x_deg, y_deg, z_deg].
+    x :
+        
+    y :
+        
+    z :
+        
 
     Returns
     -------
@@ -1254,29 +1234,26 @@
     See Also
     --------
     lagvander, lagvander3d, lagval2d, lagval3d
-
-    Notes
-    -----
-
+    Notes
+    -----
+    
     .. versionadded:: 1.7.0
-
     """
     return pu._vander_nd_flat((lagvander, lagvander, lagvander), (x, y, z), deg)
 
 
 def lagfit(x, y, deg, rcond=None, full=False, w=None):
-    """
-    Least squares fit of Laguerre series to data.
-
+    """Least squares fit of Laguerre series to data.
+    
     Return the coefficients of a Laguerre series of degree `deg` that is the
     least squares fit to the data values `y` given at points `x`. If `y` is
     1-D the returned coefficients will also be 1-D. If `y` is 2-D multiple
     fits are done, one for each column of `y`, and the resulting
     coefficients are stored in the corresponding columns of a 2-D return.
     The fitted polynomial(s) are in the form
-
+    
     .. math::  p(x) = c_0 + c_1 * L_1(x) + ... + c_n * L_n(x),
-
+    
     where `n` is `deg`.
 
     Parameters
@@ -1313,26 +1290,21 @@
         Laguerre coefficients ordered from low to high. If `y` was 2-D,
         the coefficients for the data in column k  of `y` are in column
         `k`.
-
     [residuals, rank, singular_values, rcond] : list
         These values are only returned if `full` = True
-
         resid -- sum of squared residuals of the least squares fit
         rank -- the numerical rank of the scaled Vandermonde matrix
         sv -- singular values of the scaled Vandermonde matrix
         rcond -- value of `rcond`.
-
         For more details, see `linalg.lstsq`.
-
     Warns
-    -----
+        
+    -----
+        
     RankWarning
         The rank of the coefficient matrix in the least-squares fit is
         deficient. The warning is only raised if `full` = False.  The
         warnings can be turned off by
-
-        >>> import warnings
-        >>> warnings.simplefilter('ignore', np.RankWarning)
 
     See Also
     --------
@@ -1342,59 +1314,57 @@
     lagweight : Laguerre weight function.
     linalg.lstsq : Computes a least-squares fit from the matrix.
     scipy.interpolate.UnivariateSpline : Computes spline fits.
-
     Notes
     -----
     The solution is the coefficients of the Laguerre series `p` that
     minimizes the sum of the weighted squared errors
-
+    
     .. math:: E = \\sum_j w_j^2 * |y_j - p(x_j)|^2,
-
+    
     where the :math:`w_j` are the weights. This problem is solved by
     setting up as the (typically) overdetermined matrix equation
-
+    
     .. math:: V(x) * c = w * y,
-
+    
     where `V` is the weighted pseudo Vandermonde matrix of `x`, `c` are the
     coefficients to be solved for, `w` are the weights, and `y` are the
     observed values.  This equation is then solved using the singular value
     decomposition of `V`.
-
+    
     If some of the singular values of `V` are so small that they are
     neglected, then a `RankWarning` will be issued. This means that the
     coefficient values may be poorly determined. Using a lower order fit
     will usually get rid of the warning.  The `rcond` parameter can also be
     set to a value smaller than its default, but the resulting fit may be
     spurious and have large contributions from roundoff error.
-
+    
     Fits using Laguerre series are probably most useful when the data can
     be approximated by ``sqrt(w(x)) * p(x)``, where `w(x)` is the Laguerre
     weight. In that case the weight ``sqrt(w(x[i]))`` should be used
     together with data values ``y[i]/sqrt(w(x[i]))``. The weight function is
     available as `lagweight`.
-
     References
     ----------
     .. [1] Wikipedia, "Curve fitting",
            https://en.wikipedia.org/wiki/Curve_fitting
-
     Examples
     --------
+    >>> import warnings
+        >>> warnings.simplefilter('ignore', np.RankWarning)
+    
     >>> from numpy.polynomial.laguerre import lagfit, lagval
     >>> x = np.linspace(0, 10)
     >>> err = np.random.randn(len(x))/10
     >>> y = lagval(x, [1, 2, 3]) + err
     >>> lagfit(x, y, 2)
     array([ 0.96971004,  2.00193749,  3.00288744]) # may vary
-
     """
     return pu._fit(lagvander, x, y, deg, rcond, full, w)
 
 
 def lagcompanion(c):
-    """
-    Return the companion matrix of c.
-
+    """Return the companion matrix of c.
+    
     The usual companion matrix of the Laguerre polynomials is already
     symmetric when `c` is a basis Laguerre polynomial, so no scaling is
     applied.
@@ -1412,9 +1382,8 @@
 
     Notes
     -----
-
+    
     .. versionadded:: 1.7.0
-
     """
     # c is a trimmed copy
     [c] = pu.as_series([c])
@@ -1436,11 +1405,10 @@
 
 
 def lagroots(c):
-    """
-    Compute the roots of a Laguerre series.
-
+    """Compute the roots of a Laguerre series.
+    
     Return the roots (a.k.a. "zeros") of the polynomial
-
+    
     .. math:: p(x) = \\sum_i c[i] * L_i(x).
 
     Parameters
@@ -1457,7 +1425,6 @@
     See Also
     --------
     polyroots, legroots, chebroots, hermroots, hermeroots
-
     Notes
     -----
     The root estimates are obtained as the eigenvalues of the companion
@@ -1467,10 +1434,9 @@
     errors as the value of the series near such points is relatively
     insensitive to errors in the roots. Isolated roots near the origin can
     be improved by a few iterations of Newton's method.
-
+    
     The Laguerre series basis polynomials aren't powers of `x` so the
     results of this function may seem unintuitive.
-
     Examples
     --------
     >>> from numpy.polynomial.laguerre import lagroots, lagfromroots
@@ -1479,7 +1445,6 @@
     array([  2.,  -8.,  12.,  -6.])
     >>> lagroots(coef)
     array([-4.4408921e-16,  1.0000000e+00,  2.0000000e+00])
-
     """
     # c is a trimmed copy
     [c] = pu.as_series([c])
@@ -1496,9 +1461,8 @@
 
 
 def laggauss(deg):
-    """
-    Gauss-Laguerre quadrature.
-
+    """Gauss-Laguerre quadrature.
+    
     Computes the sample points and weights for Gauss-Laguerre quadrature.
     These sample points and weights will correctly integrate polynomials of
     degree :math:`2*deg - 1` or less over the interval :math:`[0, \\inf]`
@@ -1518,18 +1482,17 @@
 
     Notes
     -----
-
+    
     .. versionadded:: 1.7.0
-
+    
     The results have only been tested up to degree 100 higher degrees may
     be problematic. The weights are determined by using the fact that
-
+    
     .. math:: w_k = c / (L'_n(x_k) * L_{n-1}(x_k))
-
+    
     where :math:`c` is a constant independent of :math:`k` and :math:`x_k`
     is the k'th root of :math:`L_n`, and then scaling the results to get
     the right value when integrating 1.
-
     """
     ideg = pu._deprecate_as_int(deg, "deg")
     if ideg <= 0:
@@ -1561,7 +1524,7 @@
 
 def lagweight(x):
     """Weight function of the Laguerre polynomials.
-
+    
     The weight function is :math:`exp(-x)` and the interval of integration
     is :math:`[0, \\inf]`. The Laguerre polynomials are orthogonal, but not
     normalized, with respect to this weight function.
@@ -1569,18 +1532,17 @@
     Parameters
     ----------
     x : array_like
-       Values at which the weight function will be computed.
+        Values at which the weight function will be computed.
 
     Returns
     -------
     w : ndarray
-       The weight function at `x`.
-
-    Notes
-    -----
-
+        The weight function at `x`.
+
+    Notes
+    -----
+    
     .. versionadded:: 1.7.0
-
     """
     w = np.exp(-x)
     return w
@@ -1591,25 +1553,18 @@
 
 class Laguerre(ABCPolyBase):
     """A Laguerre series class.
-
+    
     The Laguerre class provides the standard Python numerical methods
     '+', '-', '*', '//', '%', 'divmod', '**', and '()' as well as the
     attributes and methods listed in the `ABCPolyBase` documentation.
 
     Parameters
     ----------
-    coef : array_like
-        Laguerre coefficients in order of increasing degree, i.e,
-        ``(1, 2, 3)`` gives ``1*L_0(x) + 2*L_1(X) + 3*L_2(x)``.
-    domain : (2,) array_like, optional
-        Domain to use. The interval ``[domain[0], domain[1]]`` is mapped
-        to the interval ``[window[0], window[1]]`` by shifting and scaling.
-        The default value is [0, 1].
-    window : (2,) array_like, optional
-        Window, see `domain` for its use. The default value is [0, 1].
-
-        .. versionadded:: 1.6.0
-
+
+    Returns
+    -------
+
+    
     """
     # Virtual Functions
     _add = staticmethod(lagadd)
