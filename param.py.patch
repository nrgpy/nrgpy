# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jedi/inference/param.py
+++ b/..//venv/lib/python3.8/site-packages/jedi/inference/param.py
@@ -11,6 +11,21 @@
 
 
 def _add_argument_issue(error_name, lazy_value, message):
+    """
+
+    Parameters
+    ----------
+    error_name :
+        
+    lazy_value :
+        
+    message :
+        
+
+    Returns
+    -------
+
+    """
     if isinstance(lazy_value, LazyTreeValue):
         node = lazy_value.data
         if node.parent.type == 'argument':
@@ -19,6 +34,7 @@
 
 
 class ExecutedParamName(ParamName):
+    """ """
     def __init__(self, function_value, arguments, param_node, lazy_value, is_default=False):
         super(ExecutedParamName, self).__init__(
             function_value, param_node.name, arguments=arguments)
@@ -26,9 +42,11 @@
         self._is_default = is_default
 
     def infer(self):
+        """ """
         return self._lazy_value.infer()
 
     def matches_signature(self):
+        """ """
         if self._is_default:
             return True
         argument_values = self.infer().py__class__()
@@ -52,25 +70,47 @@
 
 def get_executed_param_names_and_issues(function_value, arguments):
     """
-    Return a tuple of:
-      - a list of `ExecutedParamName`s corresponding to the arguments of the
+
+    Parameters
+    ----------
+    function_value :
+        
+    arguments :
+        
+
+    Returns
+    -------
+    type
+        - a list of `ExecutedParamName`s corresponding to the arguments of the
         function execution `function_value`, containing the inferred value of
         those arguments (whether explicit or default)
-      - a list of the issues encountered while building that list
-
-    For example, given:
-    ```
-    def foo(a, b, c=None, d='d'): ...
-
-    foo(42, c='c')
-    ```
-
-    Then for the execution of `foo`, this will return a tuple containing:
-      - a list with entries for each parameter a, b, c & d; the entries for a,
+        - a list of the issues encountered while building that list
+        
+        For example, given:
+        ```
+        def foo(a, b, c=None, d='d'): ...
+        
+        foo(42, c='c')
+        ```
+        
+        Then for the execution of `foo`, this will return a tuple containing:
+        - a list with entries for each parameter a, b, c & d; the entries for a,
         c, & d will have their values (42, 'c' and 'd' respectively) included.
-      - a list with a single entry about the lack of a value for `b`
+        - a list with a single entry about the lack of a value for `b`
+
     """
     def too_many_args(argument):
+        """
+
+        Parameters
+        ----------
+        argument :
+            
+
+        Returns
+        -------
+
+        """
         m = _error_argument_count(funcdef, len(unpacked_va))
         # Just report an error for the first param that is not needed (like
         # cPython).
@@ -227,26 +267,51 @@
 
 def get_executed_param_names(function_value, arguments):
     """
-    Return a list of `ExecutedParamName`s corresponding to the arguments of the
-    function execution `function_value`, containing the inferred value of those
-    arguments (whether explicit or default). Any issues building this list (for
-    example required arguments which are missing in the invocation) are ignored.
-
-    For example, given:
-    ```
-    def foo(a, b, c=None, d='d'): ...
-
-    foo(42, c='c')
-    ```
-
-    Then for the execution of `foo`, this will return a list containing entries
-    for each parameter a, b, c & d; the entries for a, c, & d will have their
-    values (42, 'c' and 'd' respectively) included.
+
+    Parameters
+    ----------
+    example :
+        required arguments which are missing in the invocation
+    For :
+        example
+    def :
+        foo
+    foo :
+        42
+    Then :
+        for the execution of
+    for :
+        each parameter a
+    values :
+        42
+    function_value :
+        
+    arguments :
+        
+
+    Returns
+    -------
+    type
+        function execution `function_value`, containing the inferred value of those
+
     """
     return get_executed_param_names_and_issues(function_value, arguments)[0]
 
 
 def _error_argument_count(funcdef, actual_count):
+    """
+
+    Parameters
+    ----------
+    funcdef :
+        
+    actual_count :
+        
+
+    Returns
+    -------
+
+    """
     params = funcdef.get_params()
     default_arguments = sum(1 for p in params if p.default or p.star_count)
 
