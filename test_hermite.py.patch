# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/polynomial/tests/test_hermite.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/polynomial/tests/test_hermite.py
@@ -25,28 +25,46 @@
 
 
 def trim(x):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+
+    Returns
+    -------
+
+    """
     return herm.hermtrim(x, tol=1e-6)
 
 
 class TestConstants:
+    """ """
 
     def test_hermdomain(self):
+        """ """
         assert_equal(herm.hermdomain, [-1, 1])
 
     def test_hermzero(self):
+        """ """
         assert_equal(herm.hermzero, [0])
 
     def test_hermone(self):
+        """ """
         assert_equal(herm.hermone, [1])
 
     def test_hermx(self):
+        """ """
         assert_equal(herm.hermx, [0, .5])
 
 
 class TestArithmetic:
+    """ """
     x = np.linspace(-3, 3, 100)
 
     def test_hermadd(self):
+        """ """
         for i in range(5):
             for j in range(5):
                 msg = f"At i={i}, j={j}"
@@ -57,6 +75,7 @@
                 assert_equal(trim(res), trim(tgt), err_msg=msg)
 
     def test_hermsub(self):
+        """ """
         for i in range(5):
             for j in range(5):
                 msg = f"At i={i}, j={j}"
@@ -67,6 +86,7 @@
                 assert_equal(trim(res), trim(tgt), err_msg=msg)
 
     def test_hermmulx(self):
+        """ """
         assert_equal(herm.hermmulx([0]), [0])
         assert_equal(herm.hermmulx([1]), [0, .5])
         for i in range(1, 5):
@@ -75,6 +95,7 @@
             assert_equal(herm.hermmulx(ser), tgt)
 
     def test_hermmul(self):
+        """ """
         # check values of result
         for i in range(5):
             pol1 = [0]*i + [1]
@@ -89,6 +110,7 @@
                 assert_almost_equal(val3, val1*val2, err_msg=msg)
 
     def test_hermdiv(self):
+        """ """
         for i in range(5):
             for j in range(5):
                 msg = f"At i={i}, j={j}"
@@ -100,6 +122,7 @@
                 assert_equal(trim(res), trim(tgt), err_msg=msg)
 
     def test_hermpow(self):
+        """ """
         for i in range(5):
             for j in range(5):
                 msg = f"At i={i}, j={j}"
@@ -110,6 +133,7 @@
 
 
 class TestEvaluation:
+    """ """
     # coefficients of 1 + 2*x + 3*x**2
     c1d = np.array([2.5, 1., .75])
     c2d = np.einsum('i,j->ij', c1d, c1d)
@@ -120,6 +144,7 @@
     y = polyval(x, [1., 2., 3.])
 
     def test_hermval(self):
+        """ """
         #check empty input
         assert_equal(herm.hermval([], [1]).size, 0)
 
@@ -141,6 +166,7 @@
             assert_equal(herm.hermval(x, [1, 0, 0]).shape, dims)
 
     def test_hermval2d(self):
+        """ """
         x1, x2, x3 = self.x
         y1, y2, y3 = self.y
 
@@ -158,6 +184,7 @@
         assert_(res.shape == (2, 3))
 
     def test_hermval3d(self):
+        """ """
         x1, x2, x3 = self.x
         y1, y2, y3 = self.y
 
@@ -175,6 +202,7 @@
         assert_(res.shape == (2, 3))
 
     def test_hermgrid2d(self):
+        """ """
         x1, x2, x3 = self.x
         y1, y2, y3 = self.y
 
@@ -189,6 +217,7 @@
         assert_(res.shape == (2, 3)*2)
 
     def test_hermgrid3d(self):
+        """ """
         x1, x2, x3 = self.x
         y1, y2, y3 = self.y
 
@@ -204,8 +233,10 @@
 
 
 class TestIntegral:
+    """ """
 
     def test_hermint(self):
+        """ """
         # check exceptions
         assert_raises(TypeError, herm.hermint, [0], .5)
         assert_raises(ValueError, herm.hermint, [0], -1)
@@ -289,6 +320,7 @@
                 assert_almost_equal(trim(res), trim(tgt))
 
     def test_hermint_axis(self):
+        """ """
         # check that axis keyword works
         c2d = np.random.random((3, 4))
 
@@ -306,8 +338,10 @@
 
 
 class TestDerivative:
+    """ """
 
     def test_hermder(self):
+        """ """
         # check exceptions
         assert_raises(TypeError, herm.hermder, [0], .5)
         assert_raises(ValueError, herm.hermder, [0], -1)
@@ -333,6 +367,7 @@
                 assert_almost_equal(trim(res), trim(tgt))
 
     def test_hermder_axis(self):
+        """ """
         # check that axis keyword works
         c2d = np.random.random((3, 4))
 
@@ -346,10 +381,12 @@
 
 
 class TestVander:
+    """ """
     # some random values in [-1, 1)
     x = np.random.random((3, 5))*2 - 1
 
     def test_hermvander(self):
+        """ """
         # check for 1d x
         x = np.arange(3)
         v = herm.hermvander(x, 3)
@@ -367,6 +404,7 @@
             assert_almost_equal(v[..., i], herm.hermval(x, coef))
 
     def test_hermvander2d(self):
+        """ """
         # also tests hermval2d for non-square coefficient array
         x1, x2, x3 = self.x
         c = np.random.random((2, 3))
@@ -380,6 +418,7 @@
         assert_(van.shape == (1, 5, 6))
 
     def test_hermvander3d(self):
+        """ """
         # also tests hermval3d for non-square coefficient array
         x1, x2, x3 = self.x
         c = np.random.random((2, 3, 4))
@@ -394,12 +433,36 @@
 
 
 class TestFitting:
+    """ """
 
     def test_hermfit(self):
+        """ """
         def f(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return x*(x - 1)*(x - 2)
 
         def f2(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return x**4 + x**2 + 1
 
         # Test exceptions
@@ -471,23 +534,29 @@
 
 
 class TestCompanion:
+    """ """
 
     def test_raises(self):
+        """ """
         assert_raises(ValueError, herm.hermcompanion, [])
         assert_raises(ValueError, herm.hermcompanion, [1])
 
     def test_dimensions(self):
+        """ """
         for i in range(1, 5):
             coef = [0]*i + [1]
             assert_(herm.hermcompanion(coef).shape == (i, i))
 
     def test_linear_root(self):
+        """ """
         assert_(herm.hermcompanion([1, 2])[0, 0] == -.25)
 
 
 class TestGauss:
+    """ """
 
     def test_100(self):
+        """ """
         x, w = herm.hermgauss(100)
 
         # test orthogonality. Note that the results need to be normalized,
@@ -505,8 +574,10 @@
 
 
 class TestMisc:
+    """ """
 
     def test_hermfromroots(self):
+        """ """
         res = herm.hermfromroots([])
         assert_almost_equal(trim(res), [1])
         for i in range(1, 5):
@@ -519,6 +590,7 @@
             assert_almost_equal(res, tgt)
 
     def test_hermroots(self):
+        """ """
         assert_almost_equal(herm.hermroots([1]), [])
         assert_almost_equal(herm.hermroots([1, 1]), [-.5])
         for i in range(2, 5):
@@ -527,6 +599,7 @@
             assert_almost_equal(trim(res), trim(tgt))
 
     def test_hermtrim(self):
+        """ """
         coef = [2, -1, 1, 0]
 
         # Test exceptions
@@ -538,17 +611,21 @@
         assert_equal(herm.hermtrim(coef, 2), [0])
 
     def test_hermline(self):
+        """ """
         assert_equal(herm.hermline(3, 4), [3, 2])
 
     def test_herm2poly(self):
+        """ """
         for i in range(10):
             assert_almost_equal(herm.herm2poly([0]*i + [1]), Hlist[i])
 
     def test_poly2herm(self):
+        """ """
         for i in range(10):
             assert_almost_equal(herm.poly2herm(Hlist[i]), [0]*i + [1])
 
     def test_weight(self):
+        """ """
         x = np.linspace(-5, 5, 11)
         tgt = np.exp(-x**2)
         res = herm.hermweight(x)
