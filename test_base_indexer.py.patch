# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/window/test_base_indexer.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/window/test_base_indexer.py
@@ -10,8 +10,11 @@
 
 
 def test_bad_get_window_bounds_signature():
+    """ """
     class BadIndexer(BaseIndexer):
+        """ """
         def get_window_bounds(self):
+            """ """
             return None
 
     indexer = BadIndexer()
@@ -20,6 +23,7 @@
 
 
 def test_expanding_indexer():
+    """ """
     s = Series(range(10))
     indexer = ExpandingIndexer()
     result = s.rolling(indexer).mean()
@@ -28,12 +32,31 @@
 
 
 def test_indexer_constructor_arg():
+    """ """
     # Example found in computation.rst
     use_expanding = [True, False, True, False, True]
     df = DataFrame({"values": range(5)})
 
     class CustomIndexer(BaseIndexer):
+        """ """
         def get_window_bounds(self, num_values, min_periods, center, closed):
+            """
+
+            Parameters
+            ----------
+            num_values :
+                
+            min_periods :
+                
+            center :
+                
+            closed :
+                
+
+            Returns
+            -------
+
+            """
             start = np.empty(num_values, dtype=np.int64)
             end = np.empty(num_values, dtype=np.int64)
             for i in range(num_values):
@@ -52,10 +75,29 @@
 
 
 def test_indexer_accepts_rolling_args():
+    """ """
     df = DataFrame({"values": range(5)})
 
     class CustomIndexer(BaseIndexer):
+        """ """
         def get_window_bounds(self, num_values, min_periods, center, closed):
+            """
+
+            Parameters
+            ----------
+            num_values :
+                
+            min_periods :
+                
+            center :
+                
+            closed :
+                
+
+            Returns
+            -------
+
+            """
             start = np.empty(num_values, dtype=np.int64)
             end = np.empty(num_values, dtype=np.int64)
             for i in range(num_values):
@@ -74,8 +116,27 @@
 
 
 def test_win_type_not_implemented():
+    """ """
     class CustomIndexer(BaseIndexer):
+        """ """
         def get_window_bounds(self, num_values, min_periods, center, closed):
+            """
+
+            Parameters
+            ----------
+            num_values :
+                
+            min_periods :
+                
+            center :
+                
+            closed :
+                
+
+            Returns
+            -------
+
+            """
             return np.array([0, 1]), np.array([1, 2])
 
     df = DataFrame({"values": range(2)})
@@ -139,6 +200,25 @@
     ],
 )
 def test_rolling_forward_window(constructor, func, np_func, expected, np_kwargs):
+    """
+
+    Parameters
+    ----------
+    constructor :
+        
+    func :
+        
+    np_func :
+        
+    expected :
+        
+    np_kwargs :
+        
+
+    Returns
+    -------
+
+    """
     # GH 32865
     values = np.arange(10.0)
     values[5] = 100.0
@@ -177,6 +257,17 @@
 
 @pytest.mark.parametrize("constructor", [Series, DataFrame])
 def test_rolling_forward_skewness(constructor):
+    """
+
+    Parameters
+    ----------
+    constructor :
+        
+
+    Returns
+    -------
+
+    """
     values = np.arange(10.0)
     values[5] = 100.0
 
@@ -223,6 +314,19 @@
     ],
 )
 def test_rolling_forward_cov_corr(func, expected):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     values1 = np.arange(10).reshape(-1, 1)
     values2 = values1 * 2
     values1[5, 0] = 100
@@ -246,6 +350,19 @@
     ],
 )
 def test_non_fixed_variable_window_indexer(closed, expected_data):
+    """
+
+    Parameters
+    ----------
+    closed :
+        
+    expected_data :
+        
+
+    Returns
+    -------
+
+    """
     index = date_range("2020", periods=10)
     df = DataFrame(range(10), index=index)
     offset = BusinessDay(1)
