# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/lib/mixins.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/lib/mixins.py
@@ -6,7 +6,17 @@
 
 
 def _disables_array_ufunc(obj):
-    """True when __array_ufunc__ is set to None."""
+    """True when __array_ufunc__ is set to None.
+
+    Parameters
+    ----------
+    obj :
+        
+
+    Returns
+    -------
+
+    """
     try:
         return obj.__array_ufunc__ is None
     except AttributeError:
@@ -14,8 +24,31 @@
 
 
 def _binary_method(ufunc, name):
-    """Implement a forward binary method with a ufunc, e.g., __add__."""
+    """Implement a forward binary method with a ufunc, e.g., __add__.
+
+    Parameters
+    ----------
+    ufunc :
+        
+    name :
+        
+
+    Returns
+    -------
+
+    """
     def func(self, other):
+        """
+
+        Parameters
+        ----------
+        other :
+            
+
+        Returns
+        -------
+
+        """
         if _disables_array_ufunc(other):
             return NotImplemented
         return ufunc(self, other)
@@ -24,8 +57,31 @@
 
 
 def _reflected_binary_method(ufunc, name):
-    """Implement a reflected binary method with a ufunc, e.g., __radd__."""
+    """Implement a reflected binary method with a ufunc, e.g., __radd__.
+
+    Parameters
+    ----------
+    ufunc :
+        
+    name :
+        
+
+    Returns
+    -------
+
+    """
     def func(self, other):
+        """
+
+        Parameters
+        ----------
+        other :
+            
+
+        Returns
+        -------
+
+        """
         if _disables_array_ufunc(other):
             return NotImplemented
         return ufunc(other, self)
@@ -34,23 +90,71 @@
 
 
 def _inplace_binary_method(ufunc, name):
-    """Implement an in-place binary method with a ufunc, e.g., __iadd__."""
+    """Implement an in-place binary method with a ufunc, e.g., __iadd__.
+
+    Parameters
+    ----------
+    ufunc :
+        
+    name :
+        
+
+    Returns
+    -------
+
+    """
     def func(self, other):
+        """
+
+        Parameters
+        ----------
+        other :
+            
+
+        Returns
+        -------
+
+        """
         return ufunc(self, other, out=(self,))
     func.__name__ = '__i{}__'.format(name)
     return func
 
 
 def _numeric_methods(ufunc, name):
-    """Implement forward, reflected and inplace binary methods with a ufunc."""
+    """Implement forward, reflected and inplace binary methods with a ufunc.
+
+    Parameters
+    ----------
+    ufunc :
+        
+    name :
+        
+
+    Returns
+    -------
+
+    """
     return (_binary_method(ufunc, name),
             _reflected_binary_method(ufunc, name),
             _inplace_binary_method(ufunc, name))
 
 
 def _unary_method(ufunc, name):
-    """Implement a unary special method with a ufunc."""
+    """Implement a unary special method with a ufunc.
+
+    Parameters
+    ----------
+    ufunc :
+        
+    name :
+        
+
+    Returns
+    -------
+
+    """
     def func(self):
+        """ """
         return ufunc(self)
     func.__name__ = '__{}__'.format(name)
     return func
@@ -58,30 +162,30 @@
 
 class NDArrayOperatorsMixin:
     """Mixin defining all operator special methods using __array_ufunc__.
-
+    
     This class implements the special methods for almost all of Python's
     builtin operators defined in the `operator` module, including comparisons
     (``==``, ``>``, etc.) and arithmetic (``+``, ``*``, ``-``, etc.), by
     deferring to the ``__array_ufunc__`` method, which subclasses must
     implement.
-
+    
     It is useful for writing classes that do not inherit from `numpy.ndarray`,
     but that should support arithmetic and numpy universal functions like
     arrays as described in `A Mechanism for Overriding Ufuncs
     <../../neps/nep-0013-ufunc-overrides.html>`_.
-
+    
     As an trivial example, consider this implementation of an ``ArrayLike``
     class that simply wraps a NumPy array and ensures that the result of any
     arithmetic operation is also an ``ArrayLike`` object::
-
+    
         class ArrayLike(np.lib.mixins.NDArrayOperatorsMixin):
             def __init__(self, value):
                 self.value = np.asarray(value)
-
+    
             # One might also consider adding the built-in list type to this
             # list, to support operations like np.add(array_like, list)
             _HANDLED_TYPES = (np.ndarray, numbers.Number)
-
+    
             def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):
                 out = kwargs.get('out', ())
                 for x in inputs + out:
@@ -91,7 +195,7 @@
                     # handle ArrayLike objects.
                     if not isinstance(x, self._HANDLED_TYPES + (ArrayLike,)):
                         return NotImplemented
-
+    
                 # Defer to the implementation of the ufunc on unwrapped values.
                 inputs = tuple(x.value if isinstance(x, ArrayLike) else x
                                for x in inputs)
@@ -100,7 +204,7 @@
                         x.value if isinstance(x, ArrayLike) else x
                         for x in out)
                 result = getattr(ufunc, method)(*inputs, **kwargs)
-
+    
                 if type(result) is tuple:
                     # multiple return values
                     return tuple(type(self)(x) for x in result)
@@ -110,14 +214,26 @@
                 else:
                     # one return value
                     return type(self)(result)
-
+    
             def __repr__(self):
-                return '%s(%r)' % (type(self).__name__, self.value)
-
-    In interactions between ``ArrayLike`` objects and numbers or numpy arrays,
-    the result is always another ``ArrayLike``:
-
-        >>> x = ArrayLike([1, 2, 3])
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+    type
+        In interactions between ``ArrayLike`` objects and numbers or numpy arrays,
+        the result is always another ``ArrayLike``:
+        
+        
+        Note that unlike ``numpy.ndarray``, ``ArrayLike`` does not allow operations
+        with arbitrary, unrecognized types. This ensures that interactions with
+        ArrayLike preserve a well-defined casting hierarchy.
+        
+        .. versionadded:: 1.13
+
+    >>> x = ArrayLike([1, 2, 3])
         >>> x - 1
         ArrayLike(array([0, 1, 2]))
         >>> 1 - x
@@ -126,12 +242,6 @@
         ArrayLike(array([-1, -1, -1]))
         >>> x - np.arange(3)
         ArrayLike(array([1, 1, 1]))
-
-    Note that unlike ``numpy.ndarray``, ``ArrayLike`` does not allow operations
-    with arbitrary, unrecognized types. This ensures that interactions with
-    ArrayLike preserve a well-defined casting hierarchy.
-
-    .. versionadded:: 1.13
     """
     # Like np.ndarray, this mixin class implements "Option 1" from the ufunc
     # overrides NEP.
