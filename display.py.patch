# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/magics/display.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/magics/display.py
@@ -26,38 +26,92 @@
 @magics_class
 class DisplayMagics(Magics):
     """Magics for displaying various output types with literals
-
+    
     Defines javascript/latex/svg/html cell magics for writing
     blocks in those languages, to be rendered in the frontend.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     @cell_magic
     def js(self, line, cell):
         """Run the cell block of Javascript code
+        
+        Alias of `%%javascript`
 
-        Alias of `%%javascript`
+        Parameters
+        ----------
+        line :
+            
+        cell :
+            
+
+        Returns
+        -------
+
         """
         self.javascript(line, cell)
 
     @cell_magic
     def javascript(self, line, cell):
-        """Run the cell block of Javascript code"""
+        """Run the cell block of Javascript code
+
+        Parameters
+        ----------
+        line :
+            
+        cell :
+            
+
+        Returns
+        -------
+
+        """
         display(Javascript(cell))
 
 
     @cell_magic
     def latex(self, line, cell):
         """Render the cell as a block of latex
-
+        
         The subset of latex which is support depends on the implementation in
         the client.  In the Jupyter Notebook, this magic only renders the subset
         of latex defined by MathJax
-        [here](https://docs.mathjax.org/en/v2.5-latest/tex.html)."""
+        [here](https://docs.mathjax.org/en/v2.5-latest/tex.html).
+
+        Parameters
+        ----------
+        line :
+            
+        cell :
+            
+
+        Returns
+        -------
+
+        """
         display(Latex(cell))
 
     @cell_magic
     def svg(self, line, cell):
-        """Render the cell as an SVG literal"""
+        """Render the cell as an SVG literal
+
+        Parameters
+        ----------
+        line :
+            
+        cell :
+            
+
+        Returns
+        -------
+
+        """
         display(SVG(cell))
 
     @magic_arguments.magic_arguments()
@@ -68,7 +122,19 @@
     )
     @cell_magic
     def html(self, line, cell):
-        """Render the cell as a block of HTML"""
+        """Render the cell as a block of HTML
+
+        Parameters
+        ----------
+        line :
+            
+        cell :
+            
+
+        Returns
+        -------
+
+        """
         args = magic_arguments.parse_argstring(self.html, line)
         html = HTML(cell)
         if args.isolated:
@@ -78,5 +144,17 @@
 
     @cell_magic
     def markdown(self, line, cell):
-        """Render the cell as Markdown text block"""
+        """Render the cell as Markdown text block
+
+        Parameters
+        ----------
+        line :
+            
+        cell :
+            
+
+        Returns
+        -------
+
+        """
         display(Markdown(cell))
