# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pygments/lexers/objective.py
+++ b/..//venv/lib/python3.8/site-packages/pygments/lexers/objective.py
@@ -22,9 +22,17 @@
 
 
 def objective(baselexer):
-    """
-    Generate a subclass of baselexer that accepts the Objective-C syntax
+    """Generate a subclass of baselexer that accepts the Objective-C syntax
     extensions.
+
+    Parameters
+    ----------
+    baselexer :
+        
+
+    Returns
+    -------
+
     """
 
     # Have to be careful not to accidentally match JavaDoc/Doxygen syntax here,
@@ -41,9 +49,7 @@
                              r'(?:[a-zA-Z_]\w*)?:)')
 
     class GeneratedObjectiveCVariant(baselexer):
-        """
-        Implements Objective-C syntax on top of an existing C family lexer.
-        """
+        """Implements Objective-C syntax on top of an existing C family lexer."""
 
         tokens = {
             'statements': [
@@ -166,6 +172,17 @@
         }
 
         def analyse_text(text):
+            """
+
+            Parameters
+            ----------
+            text :
+                
+
+            Returns
+            -------
+
+            """
             if _oc_keywords.search(text):
                 return 1.0
             elif '@"' in text:  # strings
@@ -177,6 +194,17 @@
             return 0
 
         def get_tokens_unprocessed(self, text):
+            """
+
+            Parameters
+            ----------
+            text :
+                
+
+            Returns
+            -------
+
+            """
             from pygments.lexers._cocoa_builtins import COCOA_INTERFACES, \
                 COCOA_PROTOCOLS, COCOA_PRIMITIVES
 
@@ -193,9 +221,7 @@
 
 
 class ObjectiveCLexer(objective(CLexer)):
-    """
-    For Objective-C source code with preprocessor directives.
-    """
+    """For Objective-C source code with preprocessor directives."""
 
     name = 'Objective-C'
     aliases = ['objective-c', 'objectivec', 'obj-c', 'objc']
@@ -205,9 +231,7 @@
 
 
 class ObjectiveCppLexer(objective(CppLexer)):
-    """
-    For Objective-C++ source code with preprocessor directives.
-    """
+    """For Objective-C++ source code with preprocessor directives."""
 
     name = 'Objective-C++'
     aliases = ['objective-c++', 'objectivec++', 'obj-c++', 'objc++']
@@ -217,10 +241,16 @@
 
 
 class LogosLexer(ObjectiveCppLexer):
-    """
-    For Logos + Objective-C source code with preprocessor directives.
-
+    """For Logos + Objective-C source code with preprocessor directives.
+    
     .. versionadded:: 1.6
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Logos'
@@ -275,16 +305,33 @@
     _logos_keywords = re.compile(r'%(?:hook|ctor|init|c\()')
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         if LogosLexer._logos_keywords.search(text):
             return 1.0
         return 0
 
 
 class SwiftLexer(RegexLexer):
-    """
-    For `Swift <https://developer.apple.com/swift/>`_ source.
-
+    """For `Swift <https://developer.apple.com/swift/>`_ source.
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Swift'
     filenames = ['*.swift']
@@ -491,6 +538,17 @@
     }
 
     def get_tokens_unprocessed(self, text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         from pygments.lexers._cocoa_builtins import COCOA_INTERFACES, \
             COCOA_PROTOCOLS, COCOA_PRIMITIVES
 
