# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/groupby/test_timegrouper.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/groupby/test_timegrouper.py
@@ -24,7 +24,9 @@
 
 
 class TestGroupBy:
+    """ """
     def test_groupby_with_timegrouper(self):
+        """ """
         # GH 4161
         # TimeGrouper requires a sorted index
         # also verifies that the resultant index has the correct name
@@ -69,6 +71,17 @@
 
     @pytest.mark.parametrize("should_sort", [True, False])
     def test_groupby_with_timegrouper_methods(self, should_sort):
+        """
+
+        Parameters
+        ----------
+        should_sort :
+            
+
+        Returns
+        -------
+
+        """
         # GH 3881
         # make sure API of timegrouper conforms
 
@@ -101,6 +114,7 @@
         assert len(groups) == 3
 
     def test_timegrouper_with_reg_groups(self):
+        """ """
 
         # GH 3794
         # allow combination of timegrouper/reg groups
@@ -274,6 +288,17 @@
 
     @pytest.mark.parametrize("freq", ["D", "M", "A", "Q-APR"])
     def test_timegrouper_with_reg_groups_freq(self, freq):
+        """
+
+        Parameters
+        ----------
+        freq :
+            
+
+        Returns
+        -------
+
+        """
         # GH 6764 multiple grouping with/without sort
         df = DataFrame(
             {
@@ -334,6 +359,7 @@
         tm.assert_series_equal(result2, expected)
 
     def test_timegrouper_get_group(self):
+        """ """
         # GH 6914
 
         df_original = DataFrame(
@@ -400,6 +426,7 @@
                 tm.assert_frame_equal(result, expected)
 
     def test_timegrouper_apply_return_type_series(self):
+        """ """
         # Using `apply` with the `TimeGrouper` should give the
         # same return type as an `apply` with a `Grouper`.
         # Issue #11742
@@ -408,6 +435,17 @@
         df_dt["date"] = pd.to_datetime(df_dt["date"])
 
         def sumfunc_series(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return pd.Series([x["value"].sum()], ("sum",))
 
         expected = df.groupby(pd.Grouper(key="date")).apply(sumfunc_series)
@@ -417,6 +455,7 @@
         )
 
     def test_timegrouper_apply_return_type_value(self):
+        """ """
         # Using `apply` with the `TimeGrouper` should give the
         # same return type as an `apply` with a `Grouper`.
         # Issue #11742
@@ -425,6 +464,17 @@
         df_dt["date"] = pd.to_datetime(df_dt["date"])
 
         def sumfunc_value(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return x.value.sum()
 
         expected = df.groupby(pd.Grouper(key="date")).apply(sumfunc_value)
@@ -434,6 +484,7 @@
         )
 
     def test_groupby_groups_datetimeindex(self):
+        """ """
         # GH#1430
         periods = 1000
         ind = pd.date_range(start="2012/1/1", freq="5min", periods=periods)
@@ -465,6 +516,7 @@
             tm.assert_frame_equal(result, expected)
 
     def test_groupby_groups_datetimeindex_tz(self):
+        """ """
         # GH 3950
         dates = [
             "2011-07-19 07:00:00",
@@ -528,6 +580,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_frame_datetime64_handling_groupby(self):
+        """ """
         # it works!
         df = DataFrame(
             [(3, np.datetime64("2012-07-03")), (3, np.datetime64("2012-07-04"))],
@@ -537,6 +590,7 @@
         assert result["date"][3] == Timestamp("2012-07-03")
 
     def test_groupby_multi_timezone(self):
+        """ """
 
         # combining multiple / different timezones yields UTC
 
@@ -576,6 +630,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_groupby_groups_periods(self):
+        """ """
         dates = [
             "2011-07-19 07:00:00",
             "2011-07-19 08:00:00",
@@ -637,6 +692,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_groupby_first_datetime64(self):
+        """ """
         df = DataFrame([(1, 1351036800000000000), (2, 1351036800000000000)])
         df[1] = df[1].view("M8[ns]")
 
@@ -651,6 +707,7 @@
         assert issubclass(got_dt.type, np.datetime64)
 
     def test_groupby_max_datetime64(self):
+        """ """
         # GH 5869
         # datetimelike dtype conversion from int
         df = DataFrame(dict(A=Timestamp("20130101"), B=np.arange(5)))
@@ -659,6 +716,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_groupby_datetime64_32_bit(self):
+        """ """
         # GH 6410 / numpy 4328
         # 32-bit under 1.9-dev indexing issue
 
@@ -668,6 +726,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_groupby_with_timezone_selection(self):
+        """ """
         # GH 11616
         # Test that column selection returns output in correct timezone.
         np.random.seed(42)
@@ -684,6 +743,7 @@
         tm.assert_series_equal(df1, df2)
 
     def test_timezone_info(self):
+        """ """
         # see gh-11682: Timezone info lost when broadcasting
         # scalar datetime to DataFrame
 
@@ -694,6 +754,7 @@
         assert df["b"][0].tzinfo == pytz.utc
 
     def test_datetime_count(self):
+        """ """
         df = DataFrame(
             {"a": [1, 2, 3] * 2, "dates": pd.date_range("now", periods=6, freq="T")}
         )
@@ -702,6 +763,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_first_last_max_min_on_time_data(self):
+        """ """
         # GH 10295
         # Verify that NaT is not in the result of max, min, first and last on
         # Dataframe with datetime or timedelta values.
@@ -732,6 +794,7 @@
         tm.assert_frame_equal(grouped_ref.last(), grouped_test.last())
 
     def test_nunique_with_timegrouper_and_nat(self):
+        """ """
         # GH 17575
         test = pd.DataFrame(
             {
@@ -751,6 +814,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_scalar_call_versus_list_call(self):
+        """ """
         # Issue: 17530
         data_frame = {
             "location": ["shanghai", "beijing", "shanghai"],
@@ -771,6 +835,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_grouper_period_index(self):
+        """ """
         # GH 32108
         periods = 2
         index = pd.period_range(
