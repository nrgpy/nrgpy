# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tqdm/cli.py
+++ b/..//venv/lib/python3.8/site-packages/tqdm/cli.py
@@ -12,6 +12,19 @@
 
 
 def cast(val, typ):
+    """
+
+    Parameters
+    ----------
+    val :
+        
+    typ :
+        
+
+    Returns
+    -------
+
+    """
     log.debug((val, typ))
     if " or " in typ:
         for t in typ.split(" or "):
@@ -39,7 +52,17 @@
 
 
 def isBytes(val):
-    """Equivalent of `isinstance(val, six.binary_type)`."""
+    """Equivalent of `isinstance(val, six.binary_type)`.
+
+    Parameters
+    ----------
+    val :
+        
+
+    Returns
+    -------
+
+    """
     try:
         val.index(b'')
     except TypeError:
@@ -51,13 +74,29 @@
                callback=lambda float: None,  # pragma: no cover
                callback_len=True):
     """
-    Params
-    ------
-    fin  : file with `read(buf_size : int)` method
-    fout  : file with `write` (and optionally `flush`) methods.
-    callback  : function(float), e.g.: `tqdm.update`
-    callback_len  : If (default: True) do `callback(len(buffer))`.
-      Otherwise, do `callback(data) for data in buffer.split(delim)`.
+
+    Parameters
+    ----------
+    fin :
+        file with
+    fout :
+        file with
+    callback :
+        function (Default value = lambda float: None)
+    callback_len :
+        If
+    Otherwise :
+        do
+    delim :
+         (Default value = b'\\n')
+    buf_size :
+         (Default value = 256)
+    # pragma: no covercallback_len :
+         (Default value = True)
+
+    Returns
+    -------
+
     """
     fp_write = fout.write
 
@@ -161,11 +200,22 @@
 
 
 def main(fp=sys.stderr, argv=None):
-    """
-    Parameters (internal use only)
+    """Parameters (internal use only)
     ---------
     fp  : file-like object for tqdm
     argv  : list (default: sys.argv[1:])
+
+    Parameters
+    ----------
+    fp :
+         (Default value = sys.stderr)
+    argv :
+         (Default value = None)
+
+    Returns
+    -------
+
+    
     """
     if argv is None:
         argv = sys.argv[1:]
@@ -255,8 +305,20 @@
         comppath = tqdm_args.pop('comppath', None)
         if tqdm_args.pop('null', False):
             class stdout(object):
+                """ """
                 @staticmethod
                 def write(_):
+                    """
+
+                    Parameters
+                    ----------
+                    _ :
+                        
+
+                    Returns
+                    -------
+
+                    """
                     pass
         else:
             stdout = sys.stdout
@@ -268,7 +330,19 @@
             from pkg_resources import resource_filename, Requirement
 
             def cp(src, dst):
-                """copies from src path to dst"""
+                """copies from src path to dst
+
+                Parameters
+                ----------
+                src :
+                    
+                dst :
+                    
+
+                Returns
+                -------
+
+                """
                 copyfile(src, dst)
                 log.info("written:" + dst)
             if manpath is not None:
@@ -284,8 +358,20 @@
             fp_write = getattr(fp, 'buffer', fp).write
 
             class stdout(object):
+                """ """
                 @staticmethod
                 def write(x):
+                    """
+
+                    Parameters
+                    ----------
+                    x :
+                        
+
+                    Returns
+                    -------
+
+                    """
                     with tqdm.external_write_mode(file=fp):
                         fp_write(x)
                     stdout_write(x)
@@ -302,9 +388,31 @@
                 with tqdm(**tqdm_args) as t:
                     if update:
                         def callback(i):
+                            """
+
+                            Parameters
+                            ----------
+                            i :
+                                
+
+                            Returns
+                            -------
+
+                            """
                             t.update(numeric(i.decode()))
                     else:  # update_to
                         def callback(i):
+                            """
+
+                            Parameters
+                            ----------
+                            i :
+                                
+
+                            Returns
+                            -------
+
+                            """
                             t.update(numeric(i.decode()) - t.n)
                     for i in stdin:
                         stdout.write(i)
@@ -318,9 +426,31 @@
                 callback_len = False
                 if update:
                     def callback(i):
+                        """
+
+                        Parameters
+                        ----------
+                        i :
+                            
+
+                        Returns
+                        -------
+
+                        """
                         t.update(numeric(i.decode()))
                 elif update_to:
                     def callback(i):
+                        """
+
+                        Parameters
+                        ----------
+                        i :
+                            
+
+                        Returns
+                        -------
+
+                        """
                         t.update(numeric(i.decode()) - t.n)
                 else:
                     callback = t.update
