# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/magics/basic.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/magics/basic.py
@@ -18,6 +18,7 @@
 
 
 class MagicsDisplay(object):
+    """ """
     def __init__(self, magics_manager, ignore=None):
         self.ignore = ignore if ignore else []
         self.magics_manager = magics_manager
@@ -38,6 +39,19 @@
         return '\n'.join(out)
 
     def _repr_pretty_(self, p, cycle):
+        """
+
+        Parameters
+        ----------
+        p :
+            
+        cycle :
+            
+
+        Returns
+        -------
+
+        """
         p.text(self._lsmagic())
     
     def __str__(self):
@@ -47,6 +61,13 @@
         """turn magics dict into jsonable dict of the same structure
         
         replaces object instances with their class names as strings
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         magic_dict = {}
         mman = self.magics_manager
@@ -64,15 +85,24 @@
         return magic_dict
         
     def _repr_json_(self):
+        """ """
         return self._jsonable()
 
 
 @magics_class
 class BasicMagics(Magics):
     """Magics that provide central IPython functionality.
-
+    
     These are various magics that don't fit into specific categories but that
-    are all part of the base 'IPython experience'."""
+    are all part of the base 'IPython experience'.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
 
     @magic_arguments.magic_arguments()
     @magic_arguments.argument(
@@ -99,30 +129,38 @@
     def alias_magic(self, line=''):
         """Create an alias for an existing line or cell magic.
 
+        Parameters
+        ----------
+        line :
+             (Default value = '')
+
+        Returns
+        -------
+
         Examples
         --------
         ::
-
+        
           In [1]: %alias_magic t timeit
           Created `%t` as an alias for `%timeit`.
           Created `%%t` as an alias for `%%timeit`.
-
+        
           In [2]: %t -n1 pass
           1 loops, best of 3: 954 ns per loop
-
+        
           In [3]: %%t -n1
              ...: pass
              ...:
           1 loops, best of 3: 954 ns per loop
-
+        
           In [4]: %alias_magic --cell whereami pwd
           UsageError: Cell magic function `%%pwd` not found.
           In [5]: %alias_magic --line whereami pwd
           Created `%whereami` as an alias for `%pwd`.
-
+        
           In [6]: %whereami
           Out[6]: u'/home/testuser'
-          
+        
           In [7]: %alias_magic h history "-p -l 30" --line
           Created `%h` as an alias for `%history -l 30`.
         """
@@ -177,11 +215,35 @@
 
     @line_magic
     def lsmagic(self, parameter_s=''):
-        """List currently available magic functions."""
+        """List currently available magic functions.
+
+        Parameters
+        ----------
+        parameter_s :
+             (Default value = '')
+
+        Returns
+        -------
+
+        """
         return MagicsDisplay(self.shell.magics_manager, ignore=[])
 
     def _magic_docs(self, brief=False, rest=False):
-        """Return docstrings from magic functions."""
+        """
+
+        Parameters
+        ----------
+        brief :
+             (Default value = False)
+        rest :
+             (Default value = False)
+
+        Returns
+        -------
+        type
+            
+
+        """
         mman = self.shell.magics_manager
         docs = mman.lsmagic_docs(brief, missing='No documentation')
 
@@ -203,8 +265,17 @@
     @line_magic
     def magic(self, parameter_s=''):
         """Print information about the magic function system.
-
+        
         Supported formats: -latex, -brief, -rest
+
+        Parameters
+        ----------
+        parameter_s :
+             (Default value = '')
+
+        Returns
+        -------
+
         """
 
         mode = ''
@@ -278,14 +349,24 @@
     @line_magic
     def page(self, parameter_s=''):
         """Pretty print the object and display it through a pager.
-
+        
         %page [options] OBJECT
-
+        
         If no object is given, use _ (last output).
-
+        
         Options:
-
-          -r: page str(object), don't pretty-print it."""
+        
+          -r: page str(object), don't pretty-print it.
+
+        Parameters
+        ----------
+        parameter_s :
+             (Default value = '')
+
+        Returns
+        -------
+
+        """
 
         # After a function contributed by Olivier Aubert, slightly modified.
 
@@ -303,7 +384,17 @@
 
     @line_magic
     def pprint(self, parameter_s=''):
-        """Toggle pretty printing on/off."""
+        """Toggle pretty printing on/off.
+
+        Parameters
+        ----------
+        parameter_s :
+             (Default value = '')
+
+        Returns
+        -------
+
+        """
         ptformatter = self.shell.display_formatter.formatters['text/plain']
         ptformatter.pprint = bool(1 - ptformatter.pprint)
         print('Pretty printing has been turned',
@@ -312,18 +403,37 @@
     @line_magic
     def colors(self, parameter_s=''):
         """Switch color scheme for prompts, info system and exception handlers.
-
+        
         Currently implemented schemes: NoColor, Linux, LightBG.
-
+        
         Color scheme names are not case-sensitive.
+
+        Parameters
+        ----------
+        parameter_s :
+             (Default value = '')
+
+        Returns
+        -------
 
         Examples
         --------
         To get a plain black and white terminal::
-
+        
           %colors nocolor
         """
         def color_switch_err(name):
+            """
+
+            Parameters
+            ----------
+            name :
+                
+
+            Returns
+            -------
+
+            """
             warn('Error changing %s color schemes.\n%s' %
                  (name, sys.exc_info()[1]), stacklevel=2)
 
@@ -361,17 +471,37 @@
     @line_magic
     def xmode(self, parameter_s=''):
         """Switch modes for the exception handlers.
-
+        
         Valid modes: Plain, Context, Verbose, and Minimal.
-
+        
         If called without arguments, acts as a toggle.
-
-        When in verbose mode the value --show (and --hide) 
+        
+        When in verbose mode the value --show (and --hide)
         will respectively show (or hide) frames with ``__tracebackhide__ =
         True`` value set.
+
+        Parameters
+        ----------
+        parameter_s :
+             (Default value = '')
+
+        Returns
+        -------
+
         """
 
         def xmode_switch_err(name):
+            """
+
+            Parameters
+            ----------
+            name :
+                
+
+            Returns
+            -------
+
+            """
             warn('Error changing %s exception modes.\n%s' %
                  (name,sys.exc_info()[1]))
 
@@ -392,7 +522,17 @@
 
     @line_magic
     def quickref(self, arg):
-        """ Show a quick reference sheet """
+        """Show a quick reference sheet
+
+        Parameters
+        ----------
+        arg :
+            
+
+        Returns
+        -------
+
+        """
         from IPython.core.usage import quick_reference
         qr = quick_reference + self._magic_docs(brief=True)
         page.page(qr)
@@ -400,16 +540,16 @@
     @line_magic
     def doctest_mode(self, parameter_s=''):
         """Toggle doctest mode on and off.
-
+        
         This mode is intended to make IPython behave as much as possible like a
         plain Python shell, from the perspective of how its prompts, exceptions
         and output look.  This makes it easy to copy and paste parts of a
         session into doctests.  It does so by:
-
+        
         - Changing the prompts to the classic ``>>>`` ones.
         - Changing the exception reporting mode to 'Plain'.
         - Disabling pretty-printing of output.
-
+        
         Note that IPython also supports the pasting of code snippets that have
         leading '>>>' and '...' prompts in them.  This means that you can paste
         doctests from files or docstrings (even if they have leading
@@ -417,10 +557,19 @@
         '%history -t' to see the translated history; this will give you the
         input after removal of all the leading prompts and whitespace, which
         can be pasted back into an editor.
-
+        
         With these features, you can switch into this mode easily whenever you
         need to do testing and changes to doctests, without having to leave
         your existing IPython session.
+
+        Parameters
+        ----------
+        parameter_s :
+             (Default value = '')
+
+        Returns
+        -------
+
         """
 
         # Shorthands
@@ -479,15 +628,15 @@
     @line_magic
     def gui(self, parameter_s=''):
         """Enable or disable IPython GUI event loop integration.
-
+        
         %gui [GUINAME]
-
+        
         This magic replaces IPython's threaded shells that were activated
         using the (pylab/wthread/etc.) command line flags.  GUI toolkits
         can now be enabled at runtime and keyboard
         interrupts should work without any problems.  The following toolkits
         are supported:  wxPython, PyQt4, PyGTK, Tk and Cocoa (OSX)::
-
+        
             %gui wx      # enable wxPython event loop integration
             %gui qt4|qt  # enable PyQt4 event loop integration
             %gui qt5     # enable PyQt5 event loop integration
@@ -497,10 +646,19 @@
             %gui osx     # enable Cocoa event loop integration
                          # (requires %matplotlib 1.1)
             %gui         # disable all event loop integration
-
+        
         WARNING:  after any of these has been called you can simply create
         an application object, but DO NOT start the event loop yourself, as
         we have already handled that.
+
+        Parameters
+        ----------
+        parameter_s :
+             (Default value = '')
+
+        Returns
+        -------
+
         """
         opts, arg = self.parse_options(parameter_s, '')
         if arg=='': arg = None
@@ -515,41 +673,49 @@
     @line_magic
     def precision(self, s=''):
         """Set floating point precision for pretty printing.
-
+        
         Can set either integer precision or a format string.
-
+        
         If numpy has been imported and precision is an int,
         numpy display precision will also be set, via ``numpy.set_printoptions``.
-
+        
         If no argument is given, defaults will be restored.
+
+        Parameters
+        ----------
+        s :
+             (Default value = '')
+
+        Returns
+        -------
 
         Examples
         --------
         ::
-
+        
             In [1]: from math import pi
-
+        
             In [2]: %precision 3
             Out[2]: u'%.3f'
-
+        
             In [3]: pi
             Out[3]: 3.142
-
+        
             In [4]: %precision %i
             Out[4]: u'%i'
-
+        
             In [5]: pi
             Out[5]: 3
-
+        
             In [6]: %precision %e
             Out[6]: u'%e'
-
+        
             In [7]: pi**10
             Out[7]: 9.364805e+04
-
+        
             In [8]: %precision
             Out[8]: u'%r'
-
+        
             In [9]: pi**10
             Out[9]: 93648.047476082982
         """
@@ -569,12 +735,21 @@
     @line_magic
     def notebook(self, s):
         """Export and convert IPython notebooks.
-
+        
         This function can export the current IPython history to a notebook file.
         For example, to export the history to "foo.ipynb" do "%notebook foo.ipynb".
-
+        
         The -e or --export flag is deprecated in IPython 5.2, and will be
         removed in the future.
+
+        Parameters
+        ----------
+        s :
+            
+
+        Returns
+        -------
+
         """
         args = magic_arguments.parse_argstring(self.notebook, s)
 
@@ -595,40 +770,49 @@
 
 @magics_class
 class AsyncMagics(BasicMagics):
+    """ """
 
     @line_magic
     def autoawait(self, parameter_s):
-        """
-        Allow to change the status of the autoawait option.
-
+        """Allow to change the status of the autoawait option.
+        
         This allow you to set a specific asynchronous code runner.
-
+        
         If no value is passed, print the currently used asynchronous integration
         and whether it is activated.
-
+        
         It can take a number of value evaluated in the following order:
-
+        
         - False/false/off deactivate autoawait integration
         - True/true/on activate autoawait integration using configured default
           loop
         - asyncio/curio/trio activate autoawait integration and use integration
           with said library.
-
+        
         - `sync` turn on the pseudo-sync integration (mostly used for
           `IPython.embed()` which does not run IPython with a real eventloop and
           deactivate running asynchronous code. Turning on Asynchronous code with
           the pseudo sync loop is undefined behavior and may lead IPython to crash.
-
+        
         If the passed parameter does not match any of the above and is a python
         identifier, get said object from user namespace and set it as the
-        runner, and activate autoawait. 
-
+        runner, and activate autoawait.
+        
         If the object is a fully qualified object name, attempt to import it and
         set it as the runner, and activate autoawait.
         
         
         The exact behavior of autoawait is experimental and subject to change
         across version of IPython and Python.
+
+        Parameters
+        ----------
+        parameter_s :
+            
+
+        Returns
+        -------
+
         """
 
         param = parameter_s.strip()
