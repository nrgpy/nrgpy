# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/utils/coloransi.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/utils/coloransi.py
@@ -47,22 +47,39 @@
 
 def make_color_table(in_class):
     """Build a set of color attributes in a class.
-
+    
     Helper function for building the :class:`TermColors` and
     :class`InputTermColors`.
+
+    Parameters
+    ----------
+    in_class :
+        
+
+    Returns
+    -------
+
     """
     for name,value in color_templates:
         setattr(in_class,name,in_class._base % value)
 
 class TermColors:
     """Color escape sequences.
-
+    
     This class defines the escape sequences for all the standard (ANSI?)
     colors in terminals. Also defines a NoColor escape which is just the null
     string, suitable for defining 'dummy' color schemes in terminals which get
     confused by color escapes.
-
-    This class should be used as a mixin for building color schemes."""
+    
+    This class should be used as a mixin for building color schemes.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
 
     NoColor = ''  # for color schemes in color-less terminals.
     Normal = '\033[0m'   # Reset normal coloring
@@ -73,18 +90,26 @@
 
 class InputTermColors:
     """Color escape sequences for input prompts.
-
+    
     This class is similar to TermColors, but the escapes are wrapped in \001
     and \002 so that readline can properly know the length of each line and
     can wrap lines accordingly.  Use this class for any colored text which
     needs to be used in input prompts, such as in calls to raw_input().
-
+    
     This class defines the escape sequences for all the standard (ANSI?)
     colors in terminals. Also defines a NoColor escape which is just the null
     string, suitable for defining 'dummy' color schemes in terminals which get
     confused by color escapes.
-
-    This class should be used as a mixin for building color schemes."""
+    
+    This class should be used as a mixin for building color schemes.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
 
     NoColor = ''  # for color schemes in color-less terminals.
 
@@ -101,7 +126,15 @@
 
 class NoColors:
     """This defines all the same names as the colour classes, but maps them to
-    empty strings, so it can easily be substituted to turn off colours."""
+    empty strings, so it can easily be substituted to turn off colours.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
     NoColor = ''
     Normal  = ''
 
@@ -118,19 +151,39 @@
             self.colors = Struct(colordict)
 
     def copy(self,name=None):
-        """Return a full copy of the object, optionally renaming it."""
+        """
+
+        Parameters
+        ----------
+        name :
+             (Default value = None)
+
+        Returns
+        -------
+        type
+            
+
+        """
         if name is None:
             name = self.name
         return ColorScheme(name, self.colors.dict())
 
 class ColorSchemeTable(dict):
     """General class to handle tables of color schemes.
-
+    
     It's basically a dict of color schemes with a couple of shorthand
     attributes and some convenient methods.
-
+    
     active_scheme_name -> obvious
-    active_colors -> actual color table of the active scheme"""
+    active_colors -> actual color table of the active scheme
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
 
     def __init__(self, scheme_list=None, default_scheme=''):
         """Create a table of color schemes.
@@ -152,20 +205,42 @@
             self.set_active_scheme(default_scheme)
 
     def copy(self):
-        """Return full copy of object"""
+        """ """
         return ColorSchemeTable(self.values(),self.active_scheme_name)
 
     def add_scheme(self,new_scheme):
-        """Add a new color scheme to the table."""
+        """Add a new color scheme to the table.
+
+        Parameters
+        ----------
+        new_scheme :
+            
+
+        Returns
+        -------
+
+        """
         if not isinstance(new_scheme,ColorScheme):
             raise ValueError('ColorSchemeTable only accepts ColorScheme instances')
         self[new_scheme.name] = new_scheme
 
     def set_active_scheme(self,scheme,case_sensitive=0):
         """Set the currently active scheme.
-
+        
         Names are by default compared in a case-insensitive way, but this can
-        be changed by setting the parameter case_sensitive to true."""
+        be changed by setting the parameter case_sensitive to true.
+
+        Parameters
+        ----------
+        scheme :
+            
+        case_sensitive :
+             (Default value = 0)
+
+        Returns
+        -------
+
+        """
 
         scheme_names = list(self.keys())
         if case_sensitive:
