# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/distutils/system_info.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/distutils/system_info.py
@@ -197,6 +197,7 @@
 global_compiler = None
 
 def customized_ccompiler():
+    """ """
     global global_compiler
     if not global_compiler:
         global_compiler = _customized_ccompiler()
@@ -204,8 +205,16 @@
 
 
 def _c_string_literal(s):
-    """
-    Convert a python string into a literal suitable for inclusion into C code
+    """Convert a python string into a literal suitable for inclusion into C code
+
+    Parameters
+    ----------
+    s :
+        
+
+    Returns
+    -------
+
     """
     # only these three characters are forbidden in C strings
     s = s.replace('\\', r'\\')
@@ -215,25 +224,38 @@
 
 
 def libpaths(paths, bits):
-    """Return a list of library paths valid on 32 or 64 bit systems.
-
-    Inputs:
-      paths : sequence
+    """
+
+    Parameters
+    ----------
+    paths :
+        
+    bits :
+        
+
+    Returns
+    -------
+    type
+        Inputs:
+        paths : sequence
         A sequence of strings (typically paths)
-      bits : int
+        bits : int
         An integer, the only valid values are 32 or 64.  A ValueError exception
-      is raised otherwise.
-
-    Examples:
-
-    Consider a list of directories
+        is raised otherwise.
+        
+        Examples:
+        
+        Consider a list of directories
+        
+        For a 32-bit platform, this is already valid:
+        
+        On 64 bits, we prepend the '64' postfix
+
     >>> paths = ['/usr/X11R6/lib','/usr/X11/lib','/usr/lib']
-
-    For a 32-bit platform, this is already valid:
+    
     >>> np.distutils.system_info.libpaths(paths,32)
     ['/usr/X11R6/lib', '/usr/X11/lib', '/usr/lib']
-
-    On 64 bits, we prepend the '64' postfix
+    
     >>> np.distutils.system_info.libpaths(paths,64)
     ['/usr/X11R6/lib64', '/usr/X11R6/lib', '/usr/X11/lib64', '/usr/X11/lib',
     '/usr/lib64', '/usr/lib']
@@ -273,7 +295,17 @@
     _include_dirs = [d.replace('/', os.sep) for d in _include_dirs]
     _lib_dirs = [d.replace('/', os.sep) for d in _lib_dirs]
     def add_system_root(library_root):
-        """Add a package manager root to the include directories"""
+        """Add a package manager root to the include directories
+
+        Parameters
+        ----------
+        library_root :
+            
+
+        Returns
+        -------
+
+        """
         global default_lib_dirs
         global default_include_dirs
 
@@ -367,6 +399,15 @@
     1) System-wide directory (directory-location of this module)
     2) Users HOME directory (os.environ['HOME'])
     3) Local directory
+
+    Parameters
+    ----------
+    fname :
+        
+
+    Returns
+    -------
+
     """
     # System-wide file
     filenames = []
@@ -399,11 +440,21 @@
 
 
 def get_info(name, notfound_action=0):
-    """
-    notfound_action:
+    """notfound_action:
       0 - do nothing
       1 - display warning message
       2 - raise error
+
+    Parameters
+    ----------
+    name :
+        
+    notfound_action :
+         (Default value = 0)
+
+    Returns
+    -------
+
     """
     cl = {'atlas': atlas_info,  # use lapack_opt or blas_opt instead
           'atlas_threads': atlas_threads_info,                # ditto
@@ -490,98 +541,187 @@
 
 
 class AliasedOptionError(DistutilsError):
+    """Aliases entries in config files should not be existing.
+    In section '{section}' we found multiple appearances of options {options}.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
-    Aliases entries in config files should not be existing.
-    In section '{section}' we found multiple appearances of options {options}."""
 
 
 class AtlasNotFoundError(NotFoundError):
-    """
-    Atlas (http://github.com/math-atlas/math-atlas) libraries not found.
+    """Atlas (http://github.com/math-atlas/math-atlas) libraries not found.
     Directories to search for the libraries can be specified in the
     numpy/distutils/site.cfg file (section [atlas]) or by setting
-    the ATLAS environment variable."""
+    the ATLAS environment variable.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
 
 
 class FlameNotFoundError(NotFoundError):
+    """FLAME (http://www.cs.utexas.edu/~flame/web/) libraries not found.
+    Directories to search for the libraries can be specified in the
+    numpy/distutils/site.cfg file (section [flame]).
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
-    FLAME (http://www.cs.utexas.edu/~flame/web/) libraries not found.
-    Directories to search for the libraries can be specified in the
-    numpy/distutils/site.cfg file (section [flame])."""
 
 
 class LapackNotFoundError(NotFoundError):
-    """
-    Lapack (http://www.netlib.org/lapack/) libraries not found.
+    """Lapack (http://www.netlib.org/lapack/) libraries not found.
     Directories to search for the libraries can be specified in the
     numpy/distutils/site.cfg file (section [lapack]) or by setting
-    the LAPACK environment variable."""
+    the LAPACK environment variable.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
 
 
 class LapackSrcNotFoundError(LapackNotFoundError):
-    """
-    Lapack (http://www.netlib.org/lapack/) sources not found.
+    """Lapack (http://www.netlib.org/lapack/) sources not found.
     Directories to search for the sources can be specified in the
     numpy/distutils/site.cfg file (section [lapack_src]) or by setting
-    the LAPACK_SRC environment variable."""
+    the LAPACK_SRC environment variable.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
 
 
 class LapackILP64NotFoundError(NotFoundError):
-    """
-    64-bit Lapack libraries not found.
+    """64-bit Lapack libraries not found.
     Known libraries in numpy/distutils/site.cfg file are:
     openblas64_, openblas_ilp64
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
 class BlasOptNotFoundError(NotFoundError):
-    """
-    Optimized (vendor) Blas libraries are not found.
+    """Optimized (vendor) Blas libraries are not found.
     Falls back to netlib Blas library which has worse performance.
     A better performance should be easily gained by switching
-    Blas library."""
+    Blas library.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
 
 class BlasNotFoundError(NotFoundError):
-    """
-    Blas (http://www.netlib.org/blas/) libraries not found.
+    """Blas (http://www.netlib.org/blas/) libraries not found.
     Directories to search for the libraries can be specified in the
     numpy/distutils/site.cfg file (section [blas]) or by setting
-    the BLAS environment variable."""
+    the BLAS environment variable.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
 
 class BlasILP64NotFoundError(NotFoundError):
-    """
-    64-bit Blas libraries not found.
+    """64-bit Blas libraries not found.
     Known libraries in numpy/distutils/site.cfg file are:
     openblas64_, openblas_ilp64
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
 class BlasSrcNotFoundError(BlasNotFoundError):
-    """
-    Blas (http://www.netlib.org/blas/) sources not found.
+    """Blas (http://www.netlib.org/blas/) sources not found.
     Directories to search for the sources can be specified in the
     numpy/distutils/site.cfg file (section [blas_src]) or by setting
-    the BLAS_SRC environment variable."""
+    the BLAS_SRC environment variable.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
 
 
 class FFTWNotFoundError(NotFoundError):
-    """
-    FFTW (http://www.fftw.org/) libraries not found.
+    """FFTW (http://www.fftw.org/) libraries not found.
     Directories to search for the libraries can be specified in the
     numpy/distutils/site.cfg file (section [fftw]) or by setting
-    the FFTW environment variable."""
+    the FFTW environment variable.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
 
 
 class DJBFFTNotFoundError(NotFoundError):
-    """
-    DJBFFT (https://cr.yp.to/djbfft.html) libraries not found.
+    """DJBFFT (https://cr.yp.to/djbfft.html) libraries not found.
     Directories to search for the libraries can be specified in the
     numpy/distutils/site.cfg file (section [djbfft]) or by setting
-    the DJBFFT environment variable."""
+    the DJBFFT environment variable.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
 
 
 class NumericNotFoundError(NotFoundError):
+    """Numeric (https://www.numpy.org/) module not found.
+    Get it from above location, install it, and retry setup.py.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
-    Numeric (https://www.numpy.org/) module not found.
-    Get it from above location, install it, and retry setup.py."""
 
 
 class X11NotFoundError(NotFoundError):
@@ -589,17 +729,23 @@
 
 
 class UmfpackNotFoundError(NotFoundError):
-    """
-    UMFPACK sparse solver (https://www.cise.ufl.edu/research/sparse/umfpack/)
+    """UMFPACK sparse solver (https://www.cise.ufl.edu/research/sparse/umfpack/)
     not found. Directories to search for the libraries can be specified in the
     numpy/distutils/site.cfg file (section [umfpack]) or by setting
-    the UMFPACK environment variable."""
+    the UMFPACK environment variable.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
 
 
 class system_info:
 
-    """ get_info() is the only public method. Don't use others.
-    """
+    """get_info() is the only public method. Don't use others."""
     dir_env_var = None
     # XXX: search_static_first is disabled by default, may disappear in
     # future unless it is proved to be useful.
@@ -637,12 +783,14 @@
         assert isinstance(self.search_static_first, int)
 
     def parse_config_files(self):
+        """ """
         self.cp.read(self.files)
         if not self.cp.has_section(self.section):
             if self.section is not None:
                 self.cp.add_section(self.section)
 
     def calc_libraries_info(self):
+        """ """
         libs = self.get_libraries()
         dirs = self.get_lib_dirs()
         # The extensions use runtime_library_dirs
@@ -674,6 +822,17 @@
         return info
 
     def set_info(self, **info):
+        """
+
+        Parameters
+        ----------
+        **info :
+            
+
+        Returns
+        -------
+
+        """
         if info:
             lib_info = self.calc_libraries_info()
             dict_append(info, **lib_info)
@@ -683,22 +842,19 @@
         self.saved_results[self.__class__.__name__] = info
 
     def get_option_single(self, *options):
-        """ Ensure that only one of `options` are found in the section
+        """Ensure that only one of `options` are found in the section
 
         Parameters
         ----------
         *options : list of str
-           a list of options to be found in the section (``self.section``)
+            a list of options to be found in the section (``self.section``)
 
         Returns
         -------
-        str :
+        str : 
             the option that is uniquely found in the section
 
-        Raises
-        ------
-        AliasedOptionError :
-            in case more than one of the options are found
+        
         """
         found = map(lambda opt: self.cp.has_option(self.section, opt), options)
         found = list(found)
@@ -716,13 +872,21 @@
 
 
     def has_info(self):
+        """ """
         return self.__class__.__name__ in self.saved_results
 
     def calc_extra_info(self):
-        """ Updates the information in the current information with
+        """Updates the information in the current information with
         respect to these flags:
           extra_compile_args
           extra_link_args
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         info = {}
         for key in ['extra_compile_args', 'extra_link_args']:
@@ -735,8 +899,18 @@
         return info
 
     def get_info(self, notfound_action=0):
-        """ Return a dictionary with items that are compatible
+        """
+
+        Parameters
+        ----------
+        notfound_action :
+             (Default value = 0)
+
+        Returns
+        -------
+        type
             with numpy.distutils.setup keyword arguments.
+
         """
         flag = 0
         if not self.has_info():
@@ -771,6 +945,19 @@
         return copy.deepcopy(res)
 
     def get_paths(self, section, key):
+        """
+
+        Parameters
+        ----------
+        section :
+            
+        key :
+            
+
+        Returns
+        -------
+
+        """
         dirs = self.cp.get(section, key).split(os.pathsep)
         env_var = self.dir_env_var
         if env_var:
@@ -826,21 +1013,78 @@
         return ret
 
     def get_lib_dirs(self, key='library_dirs'):
+        """
+
+        Parameters
+        ----------
+        key :
+             (Default value = 'library_dirs')
+
+        Returns
+        -------
+
+        """
         return self.get_paths(self.section, key)
 
     def get_runtime_lib_dirs(self, key='runtime_library_dirs'):
+        """
+
+        Parameters
+        ----------
+        key :
+             (Default value = 'runtime_library_dirs')
+
+        Returns
+        -------
+
+        """
         path = self.get_paths(self.section, key)
         if path == ['']:
             path = []
         return path
 
     def get_include_dirs(self, key='include_dirs'):
+        """
+
+        Parameters
+        ----------
+        key :
+             (Default value = 'include_dirs')
+
+        Returns
+        -------
+
+        """
         return self.get_paths(self.section, key)
 
     def get_src_dirs(self, key='src_dirs'):
+        """
+
+        Parameters
+        ----------
+        key :
+             (Default value = 'src_dirs')
+
+        Returns
+        -------
+
+        """
         return self.get_paths(self.section, key)
 
     def get_libs(self, key, default):
+        """
+
+        Parameters
+        ----------
+        key :
+            
+        default :
+            
+
+        Returns
+        -------
+
+        """
         try:
             libs = self.cp.get(self.section, key)
         except NoOptionError:
@@ -852,12 +1096,24 @@
         return [b for b in [a.strip() for a in libs.split(',')] if b]
 
     def get_libraries(self, key='libraries'):
+        """
+
+        Parameters
+        ----------
+        key :
+             (Default value = 'libraries')
+
+        Returns
+        -------
+
+        """
         if hasattr(self, '_lib_names'):
             return self.get_libs(key, default=self._lib_names)
         else:
             return self.get_libs(key, '')
 
     def library_extensions(self):
+        """ """
         c = customized_ccompiler()
         static_exts = []
         if c.compiler_type != 'msvc':
@@ -878,9 +1134,22 @@
     def check_libs(self, lib_dirs, libs, opt_libs=[]):
         """If static or shared libraries are available then return
         their info dictionary.
-
+        
         Checks for all libraries as shared libraries first, then
         static (or vice versa if self.search_static_first is True).
+
+        Parameters
+        ----------
+        lib_dirs :
+            
+        libs :
+            
+        opt_libs :
+             (Default value = [])
+
+        Returns
+        -------
+
         """
         exts = self.library_extensions()
         info = None
@@ -896,8 +1165,21 @@
     def check_libs2(self, lib_dirs, libs, opt_libs=[]):
         """If static or shared libraries are available then return
         their info dictionary.
-
+        
         Checks each library for shared or static.
+
+        Parameters
+        ----------
+        lib_dirs :
+            
+        libs :
+            
+        opt_libs :
+             (Default value = [])
+
+        Returns
+        -------
+
         """
         exts = self.library_extensions()
         info = self._check_libs(lib_dirs, libs, opt_libs, exts)
@@ -908,6 +1190,21 @@
         return info
 
     def _find_lib(self, lib_dir, lib, exts):
+        """
+
+        Parameters
+        ----------
+        lib_dir :
+            
+        lib :
+            
+        exts :
+            
+
+        Returns
+        -------
+
+        """
         assert is_string(lib_dir)
         # under windows first try without 'lib' prefix
         if sys.platform == 'win32':
@@ -933,6 +1230,21 @@
         return False
 
     def _find_libs(self, lib_dirs, libs, exts):
+        """
+
+        Parameters
+        ----------
+        lib_dirs :
+            
+        libs :
+            
+        exts :
+            
+
+        Returns
+        -------
+
+        """
         # make sure we preserve the order of libs, as it can be important
         found_dirs, found_libs = [], []
         for lib in libs:
@@ -947,8 +1259,23 @@
 
     def _check_libs(self, lib_dirs, libs, opt_libs, exts):
         """Find mandatory and optional libs in expected paths.
-
+        
         Missing optional libraries are silently forgotten.
+
+        Parameters
+        ----------
+        lib_dirs :
+            
+        libs :
+            
+        opt_libs :
+            
+        exts :
+            
+
+        Returns
+        -------
+
         """
         if not is_sequence(lib_dirs):
             lib_dirs = [lib_dirs]
@@ -967,15 +1294,27 @@
             return None
 
     def combine_paths(self, *args):
-        """Return a list of existing paths composed by all combinations
-        of items from the arguments.
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+
+        Returns
+        -------
+        type
+            of items from the arguments.
+
         """
         return combine_paths(*args)
 
 
 class fft_opt_info(system_info):
+    """ """
 
     def calc_info(self):
+        """ """
         info = {}
         fftw_info = get_info('fftw3') or get_info('fftw2') or get_info('dfftw')
         djbfft_info = get_info('djbfft')
@@ -988,6 +1327,7 @@
 
 
 class fftw_info(system_info):
+    """ """
     #variables to override
     section = 'fftw'
     dir_env_var = 'FFTW'
@@ -1002,7 +1342,17 @@
                     'macros':[('SCIPY_FFTW_H', None)]}]
 
     def calc_ver_info(self, ver_param):
-        """Returns True on successful version detection, else False"""
+        """Returns True on successful version detection, else False
+
+        Parameters
+        ----------
+        ver_param :
+            
+
+        Returns
+        -------
+
+        """
         lib_dirs = self.get_lib_dirs()
         incl_dirs = self.get_include_dirs()
 
@@ -1029,12 +1379,14 @@
             return False
 
     def calc_info(self):
+        """ """
         for i in self.ver_info:
             if self.calc_ver_info(i):
                 break
 
 
 class fftw2_info(fftw_info):
+    """ """
     #variables to override
     section = 'fftw'
     dir_env_var = 'FFTW'
@@ -1047,6 +1399,7 @@
 
 
 class fftw3_info(fftw_info):
+    """ """
     #variables to override
     section = 'fftw3'
     dir_env_var = 'FFTW3'
@@ -1059,6 +1412,7 @@
 
 
 class dfftw_info(fftw_info):
+    """ """
     section = 'fftw'
     dir_env_var = 'FFTW'
     ver_info = [{'name':'dfftw',
@@ -1068,6 +1422,7 @@
 
 
 class sfftw_info(fftw_info):
+    """ """
     section = 'fftw'
     dir_env_var = 'FFTW'
     ver_info = [{'name':'sfftw',
@@ -1077,6 +1432,7 @@
 
 
 class fftw_threads_info(fftw_info):
+    """ """
     section = 'fftw'
     dir_env_var = 'FFTW'
     ver_info = [{'name':'fftw threads',
@@ -1086,6 +1442,7 @@
 
 
 class dfftw_threads_info(fftw_info):
+    """ """
     section = 'fftw'
     dir_env_var = 'FFTW'
     ver_info = [{'name':'dfftw threads',
@@ -1095,6 +1452,7 @@
 
 
 class sfftw_threads_info(fftw_info):
+    """ """
     section = 'fftw'
     dir_env_var = 'FFTW'
     ver_info = [{'name':'sfftw threads',
@@ -1104,11 +1462,25 @@
 
 
 class djbfft_info(system_info):
+    """ """
     section = 'djbfft'
     dir_env_var = 'DJBFFT'
     notfounderror = DJBFFTNotFoundError
 
     def get_paths(self, section, key):
+        """
+
+        Parameters
+        ----------
+        section :
+            
+        key :
+            
+
+        Returns
+        -------
+
+        """
         pre_dirs = system_info.get_paths(self, section, key)
         dirs = []
         for d in pre_dirs:
@@ -1116,6 +1488,7 @@
         return [d for d in dirs if os.path.isdir(d)]
 
     def calc_info(self):
+        """ """
         lib_dirs = self.get_lib_dirs()
         incl_dirs = self.get_include_dirs()
         info = None
@@ -1140,11 +1513,13 @@
 
 
 class mkl_info(system_info):
+    """ """
     section = 'mkl'
     dir_env_var = 'MKLROOT'
     _lib_mkl = ['mkl_rt']
 
     def get_mkl_rootdir(self):
+        """ """
         mklroot = os.environ.get('MKLROOT', None)
         if mklroot is not None:
             return mklroot
@@ -1190,6 +1565,7 @@
                 default_include_dirs=[os.path.join(mklroot, 'include')])
 
     def calc_info(self):
+        """ """
         lib_dirs = self.get_lib_dirs()
         incl_dirs = self.get_include_dirs()
         opt = self.get_option_single('mkl_libs', 'libraries')
@@ -1209,14 +1585,17 @@
 
 
 class lapack_mkl_info(mkl_info):
+    """ """
     pass
 
 
 class blas_mkl_info(mkl_info):
+    """ """
     pass
 
 
 class atlas_info(system_info):
+    """ """
     section = 'atlas'
     dir_env_var = 'ATLAS'
     _lib_names = ['f77blas', 'cblas']
@@ -1230,6 +1609,19 @@
     notfounderror = AtlasNotFoundError
 
     def get_paths(self, section, key):
+        """
+
+        Parameters
+        ----------
+        section :
+            
+        key :
+            
+
+        Returns
+        -------
+
+        """
         pre_dirs = system_info.get_paths(self, section, key)
         dirs = []
         for d in pre_dirs:
@@ -1238,6 +1630,7 @@
         return [d for d in dirs if os.path.isdir(d)]
 
     def calc_info(self):
+        """ """
         lib_dirs = self.get_lib_dirs()
         info = {}
         opt = self.get_option_single('atlas_libs', 'libraries')
@@ -1328,9 +1721,11 @@
 
 
 class atlas_blas_info(atlas_info):
+    """ """
     _lib_names = ['f77blas', 'cblas']
 
     def calc_info(self):
+        """ """
         lib_dirs = self.get_lib_dirs()
         info = {}
         opt = self.get_option_single('atlas_libs', 'libraries')
@@ -1357,33 +1752,40 @@
 
 
 class atlas_threads_info(atlas_info):
+    """ """
     dir_env_var = ['PTATLAS', 'ATLAS']
     _lib_names = ['ptf77blas', 'ptcblas']
 
 
 class atlas_blas_threads_info(atlas_blas_info):
+    """ """
     dir_env_var = ['PTATLAS', 'ATLAS']
     _lib_names = ['ptf77blas', 'ptcblas']
 
 
 class lapack_atlas_info(atlas_info):
+    """ """
     _lib_names = ['lapack_atlas'] + atlas_info._lib_names
 
 
 class lapack_atlas_threads_info(atlas_threads_info):
+    """ """
     _lib_names = ['lapack_atlas'] + atlas_threads_info._lib_names
 
 
 class atlas_3_10_info(atlas_info):
+    """ """
     _lib_names = ['satlas']
     _lib_atlas = _lib_names
     _lib_lapack = _lib_names
 
 
 class atlas_3_10_blas_info(atlas_3_10_info):
+    """ """
     _lib_names = ['satlas']
 
     def calc_info(self):
+        """ """
         lib_dirs = self.get_lib_dirs()
         info = {}
         opt = self.get_option_single('atlas_lib', 'libraries')
@@ -1410,6 +1812,7 @@
 
 
 class atlas_3_10_threads_info(atlas_3_10_info):
+    """ """
     dir_env_var = ['PTATLAS', 'ATLAS']
     _lib_names = ['tatlas']
     _lib_atlas = _lib_names
@@ -1417,25 +1820,30 @@
 
 
 class atlas_3_10_blas_threads_info(atlas_3_10_blas_info):
+    """ """
     dir_env_var = ['PTATLAS', 'ATLAS']
     _lib_names = ['tatlas']
 
 
 class lapack_atlas_3_10_info(atlas_3_10_info):
+    """ """
     pass
 
 
 class lapack_atlas_3_10_threads_info(atlas_3_10_threads_info):
+    """ """
     pass
 
 
 class lapack_info(system_info):
+    """ """
     section = 'lapack'
     dir_env_var = 'LAPACK'
     _lib_names = ['lapack']
     notfounderror = LapackNotFoundError
 
     def calc_info(self):
+        """ """
         lib_dirs = self.get_lib_dirs()
 
         opt = self.get_option_single('lapack_libs', 'libraries')
@@ -1448,11 +1856,25 @@
 
 
 class lapack_src_info(system_info):
+    """ """
     section = 'lapack_src'
     dir_env_var = 'LAPACK_SRC'
     notfounderror = LapackSrcNotFoundError
 
     def get_paths(self, section, key):
+        """
+
+        Parameters
+        ----------
+        section :
+            
+        key :
+            
+
+        Returns
+        -------
+
+        """
         pre_dirs = system_info.get_paths(self, section, key)
         dirs = []
         for d in pre_dirs:
@@ -1460,6 +1882,7 @@
         return [d for d in dirs if os.path.isdir(d)]
 
     def calc_info(self):
+        """ """
         src_dirs = self.get_src_dirs()
         src_dir = ''
         for d in src_dirs:
@@ -1576,6 +1999,17 @@
 
 
 def get_atlas_version(**config):
+    """
+
+    Parameters
+    ----------
+    **config :
+        
+
+    Returns
+    -------
+
+    """
     libraries = config.get('libraries', [])
     library_dirs = config.get('library_dirs', [])
     key = (tuple(libraries), tuple(library_dirs))
@@ -1649,12 +2083,14 @@
 
 
 class lapack_opt_info(system_info):
+    """ """
     notfounderror = LapackNotFoundError
     # List of all known BLAS libraries, in the default order
     lapack_order = ['mkl', 'openblas', 'flame', 'atlas', 'accelerate', 'lapack']
     order_env_var_name = 'NPY_LAPACK_ORDER'
 
     def _calc_info_mkl(self):
+        """ """
         info = get_info('lapack_mkl')
         if info:
             self.set_info(**info)
@@ -1662,6 +2098,7 @@
         return False
 
     def _calc_info_openblas(self):
+        """ """
         info = get_info('openblas_lapack')
         if info:
             self.set_info(**info)
@@ -1673,6 +2110,7 @@
         return False
 
     def _calc_info_flame(self):
+        """ """
         info = get_info('flame')
         if info:
             self.set_info(**info)
@@ -1680,6 +2118,7 @@
         return False
 
     def _calc_info_atlas(self):
+        """ """
         info = get_info('atlas_3_10_threads')
         if not info:
             info = get_info('atlas_3_10')
@@ -1705,6 +2144,7 @@
         return False
 
     def _calc_info_accelerate(self):
+        """ """
         info = get_info('accelerate')
         if info:
             self.set_info(**info)
@@ -1712,6 +2152,7 @@
         return False
 
     def _get_info_blas(self):
+        """ """
         # Default to get the optimized BLAS implementation
         info = get_info('blas_opt')
         if not info:
@@ -1724,6 +2165,7 @@
         return info
 
     def _get_info_lapack(self):
+        """ """
         info = get_info('lapack')
         if not info:
             warnings.warn(LapackNotFoundError.__doc__ or '', stacklevel=3)
@@ -1735,6 +2177,7 @@
         return info
 
     def _calc_info_lapack(self):
+        """ """
         info = self._get_info_lapack()
         if info:
             info_blas = self._get_info_blas()
@@ -1745,9 +2188,21 @@
         return False
 
     def _calc_info(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         return getattr(self, '_calc_info_{}'.format(name))()
 
     def calc_info(self):
+        """ """
         user_order = os.environ.get(self.order_env_var_name, None)
         if user_order is None:
             lapack_order = self.lapack_order
@@ -1779,10 +2234,22 @@
 
 
 class _ilp64_opt_info_mixin:
+    """ """
     symbol_suffix = None
     symbol_prefix = None
 
     def _check_info(self, info):
+        """
+
+        Parameters
+        ----------
+        info :
+            
+
+        Returns
+        -------
+
+        """
         macros = dict(info.get('define_macros', []))
         prefix = macros.get('BLAS_SYMBOL_PREFIX', '')
         suffix = macros.get('BLAS_SYMBOL_SUFFIX', '')
@@ -1797,11 +2264,23 @@
 
 
 class lapack_ilp64_opt_info(lapack_opt_info, _ilp64_opt_info_mixin):
+    """ """
     notfounderror = LapackILP64NotFoundError
     lapack_order = ['openblas64_', 'openblas_ilp64']
     order_env_var_name = 'NPY_LAPACK_ILP64_ORDER'
 
     def _calc_info(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         info = get_info(name + '_lapack')
         if self._check_info(info):
             self.set_info(**info)
@@ -1810,23 +2289,27 @@
 
 
 class lapack_ilp64_plain_opt_info(lapack_ilp64_opt_info):
+    """ """
     # Same as lapack_ilp64_opt_info, but fix symbol names
     symbol_prefix = ''
     symbol_suffix = ''
 
 
 class lapack64__opt_info(lapack_ilp64_opt_info):
+    """ """
     symbol_prefix = ''
     symbol_suffix = '64_'
 
 
 class blas_opt_info(system_info):
+    """ """
     notfounderror = BlasNotFoundError
     # List of all known BLAS libraries, in the default order
     blas_order = ['mkl', 'blis', 'openblas', 'atlas', 'accelerate', 'blas']
     order_env_var_name = 'NPY_BLAS_ORDER'
 
     def _calc_info_mkl(self):
+        """ """
         info = get_info('blas_mkl')
         if info:
             self.set_info(**info)
@@ -1834,6 +2317,7 @@
         return False
 
     def _calc_info_blis(self):
+        """ """
         info = get_info('blis')
         if info:
             self.set_info(**info)
@@ -1841,6 +2325,7 @@
         return False
 
     def _calc_info_openblas(self):
+        """ """
         info = get_info('openblas')
         if info:
             self.set_info(**info)
@@ -1848,6 +2333,7 @@
         return False
 
     def _calc_info_atlas(self):
+        """ """
         info = get_info('atlas_3_10_blas_threads')
         if not info:
             info = get_info('atlas_3_10_blas')
@@ -1861,6 +2347,7 @@
         return False
 
     def _calc_info_accelerate(self):
+        """ """
         info = get_info('accelerate')
         if info:
             self.set_info(**info)
@@ -1868,6 +2355,7 @@
         return False
 
     def _calc_info_blas(self):
+        """ """
         # Warn about a non-optimized BLAS library
         warnings.warn(BlasOptNotFoundError.__doc__ or '', stacklevel=3)
         info = {}
@@ -1890,9 +2378,21 @@
         return True
 
     def _calc_info(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         return getattr(self, '_calc_info_{}'.format(name))()
 
     def calc_info(self):
+        """ """
         user_order = os.environ.get(self.order_env_var_name, None)
         if user_order is None:
             blas_order = self.blas_order
@@ -1922,11 +2422,23 @@
 
 
 class blas_ilp64_opt_info(blas_opt_info, _ilp64_opt_info_mixin):
+    """ """
     notfounderror = BlasILP64NotFoundError
     blas_order = ['openblas64_', 'openblas_ilp64']
     order_env_var_name = 'NPY_BLAS_ILP64_ORDER'
 
     def _calc_info(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         info = get_info(name)
         if self._check_info(info):
             self.set_info(**info)
@@ -1935,22 +2447,26 @@
 
 
 class blas_ilp64_plain_opt_info(blas_ilp64_opt_info):
+    """ """
     symbol_prefix = ''
     symbol_suffix = ''
 
 
 class blas64__opt_info(blas_ilp64_opt_info):
+    """ """
     symbol_prefix = ''
     symbol_suffix = '64_'
 
 
 class blas_info(system_info):
+    """ """
     section = 'blas'
     dir_env_var = 'BLAS'
     _lib_names = ['blas']
     notfounderror = BlasNotFoundError
 
     def calc_info(self):
+        """ """
         lib_dirs = self.get_lib_dirs()
         opt = self.get_option_single('blas_libs', 'libraries')
         blas_libs = self.get_libs(opt, self._lib_names)
@@ -1974,11 +2490,11 @@
         self.set_info(**info)
 
     def get_cblas_libs(self, info):
-        """ Check whether we can link with CBLAS interface
-
+        """Check whether we can link with CBLAS interface
+        
         This method will search through several combinations of libraries
         to check whether CBLAS is present:
-
+        
         1. Libraries in ``info['libraries']``, as is
         2. As 1. but also explicitly adding ``'cblas'`` as a library
         3. As 1. but also explicitly adding ``'blas'`` as a library
@@ -1988,15 +2504,12 @@
         Parameters
         ----------
         info : dict
-           system information dictionary for compilation and linking
+            system information dictionary for compilation and linking
 
         Returns
         -------
-        libraries : list of str or None
-            a list of libraries that enables the use of CBLAS interface.
-            Returns None if not found or a compilation error occurs.
-
-            Since 1.17 returns a list.
+
+        
         """
         # primitive cblas check by looking for the header and trying to link
         # cblas or blas
@@ -2040,6 +2553,7 @@
 
 
 class openblas_info(blas_info):
+    """ """
     section = 'openblas'
     dir_env_var = 'OPENBLAS'
     _lib_names = ['openblas']
@@ -2048,6 +2562,7 @@
 
     @property
     def symbol_prefix(self):
+        """ """
         try:
             return self.cp.get(self.section, 'symbol_prefix')
         except NoOptionError:
@@ -2055,12 +2570,14 @@
 
     @property
     def symbol_suffix(self):
+        """ """
         try:
             return self.cp.get(self.section, 'symbol_suffix')
         except NoOptionError:
             return ''
 
     def _calc_info(self):
+        """ """
         c = customized_ccompiler()
 
         lib_dirs = self.get_lib_dirs()
@@ -2102,11 +2619,25 @@
         return info
 
     def calc_info(self):
+        """ """
         info = self._calc_info()
         if info is not None:
             self.set_info(**info)
 
     def check_msvc_gfortran_libs(self, library_dirs, libraries):
+        """
+
+        Parameters
+        ----------
+        library_dirs :
+            
+        libraries :
+            
+
+        Returns
+        -------
+
+        """
         # First, find the full path to each library directory
         library_paths = []
         for library in libraries:
@@ -2139,6 +2670,17 @@
         return info
 
     def check_symbols(self, info):
+        """
+
+        Parameters
+        ----------
+        info :
+            
+
+        Returns
+        -------
+
+        """
         res = False
         c = customized_ccompiler()
 
@@ -2182,6 +2724,7 @@
         return res
 
 class openblas_lapack_info(openblas_info):
+    """ """
     section = 'openblas'
     dir_env_var = 'OPENBLAS'
     _lib_names = ['openblas']
@@ -2189,9 +2732,11 @@
     notfounderror = BlasNotFoundError
 
 class openblas_clapack_info(openblas_lapack_info):
+    """ """
     _lib_names = ['openblas', 'lapack']
 
 class openblas_ilp64_info(openblas_info):
+    """ """
     section = 'openblas_ilp64'
     dir_env_var = 'OPENBLAS_ILP64'
     _lib_names = ['openblas64']
@@ -2199,21 +2744,25 @@
     notfounderror = BlasILP64NotFoundError
 
     def _calc_info(self):
+        """ """
         info = super()._calc_info()
         if info is not None:
             info['define_macros'] += [('HAVE_BLAS_ILP64', None)]
         return info
 
 class openblas_ilp64_lapack_info(openblas_ilp64_info):
+    """ """
     _require_symbols = ['dgemm_', 'cblas_dgemm', 'zungqr_', 'LAPACKE_zungqr']
 
     def _calc_info(self):
+        """ """
         info = super()._calc_info()
         if info:
             info['define_macros'] += [('HAVE_LAPACKE', None)]
         return info
 
 class openblas64__info(openblas_ilp64_info):
+    """ """
     # ILP64 Openblas, with default symbol suffix
     section = 'openblas64_'
     dir_env_var = 'OPENBLAS64_'
@@ -2222,15 +2771,18 @@
     symbol_prefix = ''
 
 class openblas64__lapack_info(openblas_ilp64_lapack_info, openblas64__info):
+    """ """
     pass
 
 class blis_info(blas_info):
+    """ """
     section = 'blis'
     dir_env_var = 'BLIS'
     _lib_names = ['blis']
     notfounderror = BlasNotFoundError
 
     def calc_info(self):
+        """ """
         lib_dirs = self.get_lib_dirs()
         opt = self.get_option_single('blis_libs', 'libraries')
         blis_libs = self.get_libs(opt, self._lib_names)
@@ -2248,21 +2800,38 @@
 
 
 class flame_info(system_info):
-    """ Usage of libflame for LAPACK operations
-
+    """Usage of libflame for LAPACK operations
+    
     This requires libflame to be compiled with lapack wrappers:
-
+    
     ./configure --enable-lapack2flame ...
-
+    
     Be aware that libflame 5.1.0 has some missing names in the shared library, so
     if you have problems, try the static flame library.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     section = 'flame'
     _lib_names = ['flame']
     notfounderror = FlameNotFoundError
 
     def check_embedded_lapack(self, info):
-        """ libflame does not necessarily have a wrapper for fortran LAPACK, we need to check """
+        """libflame does not necessarily have a wrapper for fortran LAPACK, we need to check
+
+        Parameters
+        ----------
+        info :
+            
+
+        Returns
+        -------
+
+        """
         c = customized_ccompiler()
 
         tmpdir = tempfile.mkdtemp()
@@ -2292,6 +2861,7 @@
             shutil.rmtree(tmpdir)
 
     def calc_info(self):
+        """ """
         lib_dirs = self.get_lib_dirs()
         flame_libs = self.get_libs('libraries', self._lib_names)
 
@@ -2324,11 +2894,13 @@
 
 
 class accelerate_info(system_info):
+    """ """
     section = 'accelerate'
     _lib_names = ['accelerate', 'veclib']
     notfounderror = BlasNotFoundError
 
     def calc_info(self):
+        """ """
         # Make possible to enable/disable from config file/env var
         libraries = os.environ.get('ACCELERATE')
         if libraries:
@@ -2378,11 +2950,25 @@
         return
 
 class blas_src_info(system_info):
+    """ """
     section = 'blas_src'
     dir_env_var = 'BLAS_SRC'
     notfounderror = BlasSrcNotFoundError
 
     def get_paths(self, section, key):
+        """
+
+        Parameters
+        ----------
+        section :
+            
+        key :
+            
+
+        Returns
+        -------
+
+        """
         pre_dirs = system_info.get_paths(self, section, key)
         dirs = []
         for d in pre_dirs:
@@ -2390,6 +2976,7 @@
         return [d for d in dirs if os.path.isdir(d)]
 
     def calc_info(self):
+        """ """
         src_dirs = self.get_src_dirs()
         src_dir = ''
         for d in src_dirs:
@@ -2430,6 +3017,7 @@
 
 
 class x11_info(system_info):
+    """ """
     section = 'x11'
     notfounderror = X11NotFoundError
     _lib_names = ['X11']
@@ -2440,6 +3028,7 @@
                              default_include_dirs=default_x11_include_dirs)
 
     def calc_info(self):
+        """ """
         if sys.platform  in ['win32']:
             return
         lib_dirs = self.get_lib_dirs()
@@ -2460,6 +3049,7 @@
 
 
 class _numpy_info(system_info):
+    """ """
     section = 'Numeric'
     modulename = 'Numeric'
     notfounderror = NumericNotFoundError
@@ -2499,6 +3089,7 @@
                              default_include_dirs=include_dirs)
 
     def calc_info(self):
+        """ """
         try:
             module = __import__(self.modulename)
         except ImportError:
@@ -2530,24 +3121,29 @@
 
 
 class numarray_info(_numpy_info):
+    """ """
     section = 'numarray'
     modulename = 'numarray'
 
 
 class Numeric_info(_numpy_info):
+    """ """
     section = 'Numeric'
     modulename = 'Numeric'
 
 
 class numpy_info(_numpy_info):
+    """ """
     section = 'numpy'
     modulename = 'numpy'
 
 
 class numerix_info(system_info):
+    """ """
     section = 'numerix'
 
     def calc_info(self):
+        """ """
         which = None, None
         if os.getenv("NUMERIX"):
             which = os.getenv("NUMERIX"), "environment var"
@@ -2582,7 +3178,9 @@
 
 
 class f2py_info(system_info):
+    """ """
     def calc_info(self):
+        """ """
         try:
             import numpy.f2py as f2py
         except ImportError:
@@ -2594,10 +3192,24 @@
 
 
 class boost_python_info(system_info):
+    """ """
     section = 'boost_python'
     dir_env_var = 'BOOST'
 
     def get_paths(self, section, key):
+        """
+
+        Parameters
+        ----------
+        section :
+            
+        key :
+            
+
+        Returns
+        -------
+
+        """
         pre_dirs = system_info.get_paths(self, section, key)
         dirs = []
         for d in pre_dirs:
@@ -2605,6 +3217,7 @@
         return [d for d in dirs if os.path.isdir(d)]
 
     def calc_info(self):
+        """ """
         src_dirs = self.get_src_dirs()
         src_dir = ''
         for d in src_dirs:
@@ -2633,10 +3246,24 @@
 
 
 class agg2_info(system_info):
+    """ """
     section = 'agg2'
     dir_env_var = 'AGG2'
 
     def get_paths(self, section, key):
+        """
+
+        Parameters
+        ----------
+        section :
+            
+        key :
+            
+
+        Returns
+        -------
+
+        """
         pre_dirs = system_info.get_paths(self, section, key)
         dirs = []
         for d in pre_dirs:
@@ -2644,6 +3271,7 @@
         return [d for d in dirs if os.path.isdir(d)]
 
     def calc_info(self):
+        """ """
         src_dirs = self.get_src_dirs()
         src_dir = ''
         for d in src_dirs:
@@ -2675,6 +3303,7 @@
 
 
 class _pkg_config_info(system_info):
+    """ """
     section = None
     config_env_var = 'PKG_CONFIG'
     default_config_exe = 'pkg-config'
@@ -2685,11 +3314,25 @@
     cflags_flag = '--cflags'
 
     def get_config_exe(self):
+        """ """
         if self.config_env_var in os.environ:
             return os.environ[self.config_env_var]
         return self.default_config_exe
 
     def get_config_output(self, config_exe, option):
+        """
+
+        Parameters
+        ----------
+        config_exe :
+            
+        option :
+            
+
+        Returns
+        -------
+
+        """
         cmd = config_exe + ' ' + self.append_config_exe + ' ' + option
         try:
             o = subprocess.check_output(cmd)
@@ -2700,6 +3343,7 @@
             return o
 
     def calc_info(self):
+        """ """
         config_exe = find_executable(self.get_config_exe())
         if not config_exe:
             log.warn('File not found: %s. Cannot determine %s info.' \
@@ -2764,6 +3408,7 @@
 
 
 class wx_info(_pkg_config_info):
+    """ """
     section = 'wx'
     config_env_var = 'WX_CONFIG'
     default_config_exe = 'wx-config'
@@ -2775,65 +3420,76 @@
 
 
 class gdk_pixbuf_xlib_2_info(_pkg_config_info):
+    """ """
     section = 'gdk_pixbuf_xlib_2'
     append_config_exe = 'gdk-pixbuf-xlib-2.0'
     version_macro_name = 'GDK_PIXBUF_XLIB_VERSION'
 
 
 class gdk_pixbuf_2_info(_pkg_config_info):
+    """ """
     section = 'gdk_pixbuf_2'
     append_config_exe = 'gdk-pixbuf-2.0'
     version_macro_name = 'GDK_PIXBUF_VERSION'
 
 
 class gdk_x11_2_info(_pkg_config_info):
+    """ """
     section = 'gdk_x11_2'
     append_config_exe = 'gdk-x11-2.0'
     version_macro_name = 'GDK_X11_VERSION'
 
 
 class gdk_2_info(_pkg_config_info):
+    """ """
     section = 'gdk_2'
     append_config_exe = 'gdk-2.0'
     version_macro_name = 'GDK_VERSION'
 
 
 class gdk_info(_pkg_config_info):
+    """ """
     section = 'gdk'
     append_config_exe = 'gdk'
     version_macro_name = 'GDK_VERSION'
 
 
 class gtkp_x11_2_info(_pkg_config_info):
+    """ """
     section = 'gtkp_x11_2'
     append_config_exe = 'gtk+-x11-2.0'
     version_macro_name = 'GTK_X11_VERSION'
 
 
 class gtkp_2_info(_pkg_config_info):
+    """ """
     section = 'gtkp_2'
     append_config_exe = 'gtk+-2.0'
     version_macro_name = 'GTK_VERSION'
 
 
 class xft_info(_pkg_config_info):
+    """ """
     section = 'xft'
     append_config_exe = 'xft'
     version_macro_name = 'XFT_VERSION'
 
 
 class freetype2_info(_pkg_config_info):
+    """ """
     section = 'freetype2'
     append_config_exe = 'freetype2'
     version_macro_name = 'FREETYPE2_VERSION'
 
 
 class amd_info(system_info):
+    """ """
     section = 'amd'
     dir_env_var = 'AMD'
     _lib_names = ['amd']
 
     def calc_info(self):
+        """ """
         lib_dirs = self.get_lib_dirs()
 
         opt = self.get_option_single('amd_libs', 'libraries')
@@ -2860,12 +3516,14 @@
 
 
 class umfpack_info(system_info):
+    """ """
     section = 'umfpack'
     dir_env_var = 'UMFPACK'
     notfounderror = UmfpackNotFoundError
     _lib_names = ['umfpack']
 
     def calc_info(self):
+        """ """
         lib_dirs = self.get_lib_dirs()
 
         opt = self.get_option_single('umfpack_libs', 'libraries')
@@ -2894,8 +3552,20 @@
 
 
 def combine_paths(*args, **kws):
-    """ Return a list of existing paths composed by all combinations of
+    """
+
+    Parameters
+    ----------
+    *args :
+        
+    **kws :
+        
+
+    Returns
+    -------
+    type
         items from arguments.
+
     """
     r = []
     for a in args:
@@ -2924,6 +3594,19 @@
 
 
 def dict_append(d, **kws):
+    """
+
+    Parameters
+    ----------
+    d :
+        
+    **kws :
+        
+
+    Returns
+    -------
+
+    """
     languages = []
     for k, v in kws.items():
         if k == 'language':
@@ -2945,6 +3628,19 @@
 
 
 def parseCmdLine(argv=(None,)):
+    """
+
+    Parameters
+    ----------
+    argv :
+         (Default value = (None)
+    ) :
+        
+
+    Returns
+    -------
+
+    """
     import optparse
     parser = optparse.OptionParser("usage: %prog [-v] [info objs]")
     parser.add_option('-v', '--verbose', action='store_true', dest='verbose',
@@ -2956,6 +3652,17 @@
 
 
 def show_all(argv=None):
+    """
+
+    Parameters
+    ----------
+    argv :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     import inspect
     if argv is None:
         argv = sys.argv
