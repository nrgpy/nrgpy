# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jedi/inference/gradual/typeshed.py
+++ b/..//venv/lib/python3.8/site-packages/jedi/inference/gradual/typeshed.py
@@ -25,6 +25,17 @@
 
 
 def _merge_create_stub_map(path_infos):
+    """
+
+    Parameters
+    ----------
+    path_infos :
+        
+
+    Returns
+    -------
+
+    """
     map_ = {}
     for directory_path_info in path_infos:
         map_.update(_create_stub_map(directory_path_info))
@@ -32,10 +43,19 @@
 
 
 def _create_stub_map(directory_path_info):
-    """
-    Create a mapping of an importable name in Python to a stub file.
+    """Create a mapping of an importable name in Python to a stub file.
+
+    Parameters
+    ----------
+    directory_path_info :
+        
+
+    Returns
+    -------
+
     """
     def generate():
+        """ """
         try:
             listed = os.listdir(directory_path_info.path)
         except (FileNotFoundError, OSError):
@@ -59,6 +79,17 @@
 
 
 def _get_typeshed_directories(version_info):
+    """
+
+    Parameters
+    ----------
+    version_info :
+        
+
+    Returns
+    -------
+
+    """
     check_version_list = ['2and3', str(version_info.major)]
     for base in ['stdlib', 'third_party']:
         base_path = os.path.join(TYPESHED_PATH, base)
@@ -79,8 +110,16 @@
 
 
 def _cache_stub_file_map(version_info):
-    """
-    Returns a map of an importable name in Python to a stub file.
+    """Returns a map of an importable name in Python to a stub file.
+
+    Parameters
+    ----------
+    version_info :
+        
+
+    Returns
+    -------
+
     """
     # TODO this caches the stub files indefinitely, maybe use a time cache
     # for that?
@@ -96,8 +135,38 @@
 
 
 def import_module_decorator(func):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
+    """
     @wraps(func)
     def wrapper(inference_state, import_names, parent_module_value, sys_path, prefer_stubs):
+        """
+
+        Parameters
+        ----------
+        inference_state :
+            
+        import_names :
+            
+        parent_module_value :
+            
+        sys_path :
+            
+        prefer_stubs :
+            
+
+        Returns
+        -------
+
+        """
         python_value_set = inference_state.module_cache.get(import_names)
         if python_value_set is None:
             if parent_module_value is not None and parent_module_value.is_stub():
@@ -133,6 +202,23 @@
 
 
 def try_to_load_stub_cached(inference_state, import_names, *args, **kwargs):
+    """
+
+    Parameters
+    ----------
+    inference_state :
+        
+    import_names :
+        
+    *args :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     if import_names is None:
         return None
 
@@ -151,11 +237,27 @@
 
 def _try_to_load_stub(inference_state, import_names, python_value_set,
                       parent_module_value, sys_path):
-    """
-    Trying to load a stub for a set of import_names.
-
+    """Trying to load a stub for a set of import_names.
+    
     This is modelled to work like "PEP 561 -- Distributing and Packaging Type
     Information", see https://www.python.org/dev/peps/pep-0561.
+
+    Parameters
+    ----------
+    inference_state :
+        
+    import_names :
+        
+    python_value_set :
+        
+    parent_module_value :
+        
+    sys_path :
+        
+
+    Returns
+    -------
+
     """
     if parent_module_value is None and len(import_names) > 1:
         try:
@@ -243,6 +345,23 @@
 
 
 def _load_from_typeshed(inference_state, python_value_set, parent_module_value, import_names):
+    """
+
+    Parameters
+    ----------
+    inference_state :
+        
+    python_value_set :
+        
+    parent_module_value :
+        
+    import_names :
+        
+
+    Returns
+    -------
+
+    """
     import_name = import_names[-1]
     map_ = None
     if len(import_names) == 1:
@@ -272,6 +391,23 @@
 
 
 def _try_to_load_stub_from_file(inference_state, python_value_set, file_io, import_names):
+    """
+
+    Parameters
+    ----------
+    inference_state :
+        
+    python_value_set :
+        
+    file_io :
+        
+    import_names :
+        
+
+    Returns
+    -------
+
+    """
     try:
         stub_module_node = parse_stub_module(inference_state, file_io)
     except (OSError, IOError):  # IOError is Python 2 only
@@ -285,6 +421,19 @@
 
 
 def parse_stub_module(inference_state, file_io):
+    """
+
+    Parameters
+    ----------
+    inference_state :
+        
+    file_io :
+        
+
+    Returns
+    -------
+
+    """
     return inference_state.parse(
         file_io=file_io,
         cache=True,
@@ -295,6 +444,25 @@
 
 
 def create_stub_module(inference_state, python_value_set, stub_module_node, file_io, import_names):
+    """
+
+    Parameters
+    ----------
+    inference_state :
+        
+    python_value_set :
+        
+    stub_module_node :
+        
+    file_io :
+        
+    import_names :
+        
+
+    Returns
+    -------
+
+    """
     if import_names == ('typing',):
         module_cls = TypingModuleWrapper
     else:
