# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pycparser/c_parser.py
+++ b/..//venv/lib/python3.8/site-packages/pycparser/c_parser.py
@@ -18,6 +18,7 @@
 
 @template
 class CParser(PLYParser):
+    """ """
     def __init__(
             self,
             lex_optimize=True,
@@ -130,17 +131,30 @@
         self._last_yielded_token = None
 
     def parse(self, text, filename='', debuglevel=0):
-        """ Parses C code and returns an AST.
-
+        """Parses C code and returns an AST.
+        
             text:
                 A string containing the C source code
-
+        
             filename:
                 Name of the file being parsed (for meaningful
                 error messages)
-
+        
             debuglevel:
                 Debug level to yacc
+
+        Parameters
+        ----------
+        text :
+            
+        filename :
+             (Default value = '')
+        debuglevel :
+             (Default value = 0)
+
+        Returns
+        -------
+
         """
         self.clex.filename = filename
         self.clex.reset_lineno()
@@ -154,14 +168,27 @@
     ######################--   PRIVATE   --######################
 
     def _push_scope(self):
+        """ """
         self._scope_stack.append(dict())
 
     def _pop_scope(self):
+        """ """
         assert len(self._scope_stack) > 1
         self._scope_stack.pop()
 
     def _add_typedef_name(self, name, coord):
-        """ Add a new typedef name (ie a TYPEID) to the current scope
+        """Add a new typedef name (ie a TYPEID) to the current scope
+
+        Parameters
+        ----------
+        name :
+            
+        coord :
+            
+
+        Returns
+        -------
+
         """
         if not self._scope_stack[-1].get(name, True):
             self._parse_error(
@@ -170,8 +197,19 @@
         self._scope_stack[-1][name] = True
 
     def _add_identifier(self, name, coord):
-        """ Add a new object, function, or enum member name (ie an ID) to the
+        """Add a new object, function, or enum member name (ie an ID) to the
             current scope
+
+        Parameters
+        ----------
+        name :
+            
+        coord :
+            
+
+        Returns
+        -------
+
         """
         if self._scope_stack[-1].get(name, False):
             self._parse_error(
@@ -180,7 +218,16 @@
         self._scope_stack[-1][name] = False
 
     def _is_type_in_scope(self, name):
-        """ Is *name* a typedef-name in the current scope?
+        """Is *name* a typedef-name in the current scope?
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
         """
         for scope in reversed(self._scope_stack):
             # If name is an identifier in this scope it shadows typedefs in
@@ -190,27 +237,60 @@
         return False
 
     def _lex_error_func(self, msg, line, column):
+        """
+
+        Parameters
+        ----------
+        msg :
+            
+        line :
+            
+        column :
+            
+
+        Returns
+        -------
+
+        """
         self._parse_error(msg, self._coord(line, column))
 
     def _lex_on_lbrace_func(self):
+        """ """
         self._push_scope()
 
     def _lex_on_rbrace_func(self):
+        """ """
         self._pop_scope()
 
     def _lex_type_lookup_func(self, name):
-        """ Looks up types that were previously defined with
+        """Looks up types that were previously defined with
             typedef.
             Passed to the lexer for recognizing identifiers that
             are types.
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
         """
         is_type = self._is_type_in_scope(name)
         return is_type
 
     def _get_yacc_lookahead_token(self):
-        """ We need access to yacc's lookahead token in certain cases.
+        """We need access to yacc's lookahead token in certain cases.
             This is the last token yacc requested from the lexer, so we
             ask the lexer.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         return self.clex.last_token
 
@@ -249,10 +329,21 @@
     # p_pointer. In this case, the whole modifier list is spliced
     # into the new location.
     def _type_modify_decl(self, decl, modifier):
-        """ Tacks a type modifier on a declarator, and returns
+        """Tacks a type modifier on a declarator, and returns
             the modified declarator.
-
+        
             Note: the declarator and modifier may be modified
+
+        Parameters
+        ----------
+        decl :
+            
+        modifier :
+            
+
+        Returns
+        -------
+
         """
         #~ print '****'
         #~ decl.show(offset=3)
@@ -304,7 +395,18 @@
     # This method fixes these problems.
     #
     def _fix_decl_name_type(self, decl, typename):
-        """ Fixes a declaration. Modifies decl.
+        """Fixes a declaration. Modifies decl.
+
+        Parameters
+        ----------
+        decl :
+            
+        typename :
+            
+
+        Returns
+        -------
+
         """
         # Reach the underlying basic type
         #
@@ -349,19 +451,34 @@
         return decl
 
     def _add_declaration_specifier(self, declspec, newspec, kind, append=False):
-        """ Declaration specifiers are represented by a dictionary
+        """Declaration specifiers are represented by a dictionary
             with the entries:
             * qual: a list of type qualifiers
             * storage: a list of storage type qualifiers
             * type: a list of type specifiers
             * function: a list of function specifiers
-
+        
             This method is given a declaration specifier, and a
             new specifier of a given kind.
             If `append` is True, the new specifier is added to the end of
             the specifiers list, otherwise it's added at the beginning.
             Returns the declaration specifier, with the new
             specifier incorporated.
+
+        Parameters
+        ----------
+        declspec :
+            
+        newspec :
+            
+        kind :
+            
+        append :
+             (Default value = False)
+
+        Returns
+        -------
+
         """
         spec = declspec or dict(qual=[], storage=[], type=[], function=[])
 
@@ -373,10 +490,23 @@
         return spec
 
     def _build_declarations(self, spec, decls, typedef_namespace=False):
-        """ Builds a list of declarations all sharing the given specifiers.
+        """Builds a list of declarations all sharing the given specifiers.
             If typedef_namespace is true, each declared name is added
             to the "typedef namespace", which also includes objects,
             functions, and enum constants.
+
+        Parameters
+        ----------
+        spec :
+            
+        decls :
+            
+        typedef_namespace :
+             (Default value = False)
+
+        Returns
+        -------
+
         """
         is_typedef = 'typedef' in spec['storage']
         declarations = []
@@ -462,7 +592,22 @@
         return declarations
 
     def _build_function_definition(self, spec, decl, param_decls, body):
-        """ Builds a function definition.
+        """Builds a function definition.
+
+        Parameters
+        ----------
+        spec :
+            
+        decl :
+            
+        param_decls :
+            
+        body :
+            
+
+        Returns
+        -------
+
         """
         assert 'typedef' not in spec['storage']
 
@@ -478,8 +623,17 @@
             coord=decl.coord)
 
     def _select_struct_union_class(self, token):
-        """ Given a token (either STRUCT or UNION), selects the
+        """Given a token (either STRUCT or UNION), selects the
             appropriate AST class.
+
+        Parameters
+        ----------
+        token :
+            
+
+        Returns
+        -------
+
         """
         if token == 'struct':
             return c_ast.Struct
@@ -511,8 +665,17 @@
     # Not strictly part of the C99 Grammar, but useful in practice.
     #
     def p_translation_unit_or_empty(self, p):
-        """ translation_unit_or_empty   : translation_unit
+        """translation_unit_or_empty   : translation_unit
                                         | empty
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         if p[1] is None:
             p[0] = c_ast.FileAST([])
@@ -520,14 +683,32 @@
             p[0] = c_ast.FileAST(p[1])
 
     def p_translation_unit_1(self, p):
-        """ translation_unit    : external_declaration
+        """translation_unit    : external_declaration
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         # Note: external_declaration is already a list
         #
         p[0] = p[1]
 
     def p_translation_unit_2(self, p):
-        """ translation_unit    : translation_unit external_declaration
+        """translation_unit    : translation_unit external_declaration
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[1].extend(p[2])
         p[0] = p[1]
@@ -538,35 +719,89 @@
     # external_declaration homogenous.
     #
     def p_external_declaration_1(self, p):
-        """ external_declaration    : function_definition
+        """external_declaration    : function_definition
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = [p[1]]
 
     def p_external_declaration_2(self, p):
-        """ external_declaration    : declaration
+        """external_declaration    : declaration
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1]
 
     def p_external_declaration_3(self, p):
-        """ external_declaration    : pp_directive
+        """external_declaration    : pp_directive
                                     | pppragma_directive
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = [p[1]]
 
     def p_external_declaration_4(self, p):
-        """ external_declaration    : SEMI
+        """external_declaration    : SEMI
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = []
 
     def p_pp_directive(self, p):
-        """ pp_directive  : PPHASH
+        """pp_directive  : PPHASH
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         self._parse_error('Directives not supported yet',
                           self._token_coord(p, 1))
 
     def p_pppragma_directive(self, p):
-        """ pppragma_directive      : PPPRAGMA
+        """pppragma_directive      : PPPRAGMA
                                     | PPPRAGMA PPPRAGMASTR
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         if len(p) == 3:
             p[0] = c_ast.Pragma(p[2], self._token_coord(p, 2))
@@ -577,7 +812,16 @@
     # a declaration list, for old "K&R style" function definitios.
     #
     def p_function_definition_1(self, p):
-        """ function_definition : id_declarator declaration_list_opt compound_statement
+        """function_definition : id_declarator declaration_list_opt compound_statement
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         # no declaration specifiers - 'int' becomes the default type
         spec = dict(
@@ -594,7 +838,16 @@
             body=p[3])
 
     def p_function_definition_2(self, p):
-        """ function_definition : declaration_specifiers id_declarator declaration_list_opt compound_statement
+        """function_definition : declaration_specifiers id_declarator declaration_list_opt compound_statement
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         spec = p[1]
 
@@ -605,13 +858,22 @@
             body=p[4])
 
     def p_statement(self, p):
-        """ statement   : labeled_statement
+        """statement   : labeled_statement
                         | expression_statement
                         | compound_statement
                         | selection_statement
                         | iteration_statement
                         | jump_statement
                         | pppragma_directive
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1]
 
@@ -658,8 +920,17 @@
     #       sum += 1;
     #   }
     def p_pragmacomp_or_statement(self, p):
-        """ pragmacomp_or_statement     : pppragma_directive statement
+        """pragmacomp_or_statement     : pppragma_directive statement
                                         | statement
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         if isinstance(p[1], c_ast.Pragma) and len(p) == 3:
             p[0] = c_ast.Compound(
@@ -678,8 +949,17 @@
     # of Decl nodes, even if it's one element long.
     #
     def p_decl_body(self, p):
-        """ decl_body : declaration_specifiers init_declarator_list_opt
+        """decl_body : declaration_specifiers init_declarator_list_opt
                       | declaration_specifiers_no_type id_init_declarator_list_opt
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         spec = p[1]
 
@@ -738,7 +1018,16 @@
     # type into the table to be seen by the lexer before the next
     # line is reached.
     def p_declaration(self, p):
-        """ declaration : decl_body SEMI
+        """declaration : decl_body SEMI
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1]
 
@@ -747,8 +1036,17 @@
     # list
     #
     def p_declaration_list(self, p):
-        """ declaration_list    : declaration
+        """declaration_list    : declaration
                                 | declaration_list declaration
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1] if len(p) == 2 else p[1] + p[2]
 
@@ -758,68 +1056,167 @@
     # type-specifier. These are both required by the spec.
     #
     def p_declaration_specifiers_no_type_1(self, p):
-        """ declaration_specifiers_no_type  : type_qualifier declaration_specifiers_no_type_opt
+        """declaration_specifiers_no_type  : type_qualifier declaration_specifiers_no_type_opt
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = self._add_declaration_specifier(p[2], p[1], 'qual')
 
     def p_declaration_specifiers_no_type_2(self, p):
-        """ declaration_specifiers_no_type  : storage_class_specifier declaration_specifiers_no_type_opt
+        """declaration_specifiers_no_type  : storage_class_specifier declaration_specifiers_no_type_opt
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = self._add_declaration_specifier(p[2], p[1], 'storage')
 
     def p_declaration_specifiers_no_type_3(self, p):
-        """ declaration_specifiers_no_type  : function_specifier declaration_specifiers_no_type_opt
+        """declaration_specifiers_no_type  : function_specifier declaration_specifiers_no_type_opt
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = self._add_declaration_specifier(p[2], p[1], 'function')
 
 
     def p_declaration_specifiers_1(self, p):
-        """ declaration_specifiers  : declaration_specifiers type_qualifier
+        """declaration_specifiers  : declaration_specifiers type_qualifier
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = self._add_declaration_specifier(p[1], p[2], 'qual', append=True)
 
     def p_declaration_specifiers_2(self, p):
-        """ declaration_specifiers  : declaration_specifiers storage_class_specifier
+        """declaration_specifiers  : declaration_specifiers storage_class_specifier
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = self._add_declaration_specifier(p[1], p[2], 'storage', append=True)
 
     def p_declaration_specifiers_3(self, p):
-        """ declaration_specifiers  : declaration_specifiers function_specifier
+        """declaration_specifiers  : declaration_specifiers function_specifier
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = self._add_declaration_specifier(p[1], p[2], 'function', append=True)
 
     def p_declaration_specifiers_4(self, p):
-        """ declaration_specifiers  : declaration_specifiers type_specifier_no_typeid
+        """declaration_specifiers  : declaration_specifiers type_specifier_no_typeid
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = self._add_declaration_specifier(p[1], p[2], 'type', append=True)
 
     def p_declaration_specifiers_5(self, p):
-        """ declaration_specifiers  : type_specifier
+        """declaration_specifiers  : type_specifier
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = self._add_declaration_specifier(None, p[1], 'type')
 
     def p_declaration_specifiers_6(self, p):
-        """ declaration_specifiers  : declaration_specifiers_no_type type_specifier
+        """declaration_specifiers  : declaration_specifiers_no_type type_specifier
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = self._add_declaration_specifier(p[1], p[2], 'type', append=True)
 
 
     def p_storage_class_specifier(self, p):
-        """ storage_class_specifier : AUTO
+        """storage_class_specifier : AUTO
                                     | REGISTER
                                     | STATIC
                                     | EXTERN
                                     | TYPEDEF
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1]
 
     def p_function_specifier(self, p):
-        """ function_specifier  : INLINE
+        """function_specifier  : INLINE
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1]
 
     def p_type_specifier_no_typeid(self, p):
-        """ type_specifier_no_typeid  : VOID
+        """type_specifier_no_typeid  : VOID
                                       | _BOOL
                                       | CHAR
                                       | SHORT
@@ -831,27 +1228,63 @@
                                       | SIGNED
                                       | UNSIGNED
                                       | __INT128
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = c_ast.IdentifierType([p[1]], coord=self._token_coord(p, 1))
 
     def p_type_specifier(self, p):
-        """ type_specifier  : typedef_name
+        """type_specifier  : typedef_name
                             | enum_specifier
                             | struct_or_union_specifier
                             | type_specifier_no_typeid
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1]
 
     def p_type_qualifier(self, p):
-        """ type_qualifier  : CONST
+        """type_qualifier  : CONST
                             | RESTRICT
                             | VOLATILE
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1]
 
     def p_init_declarator_list(self, p):
-        """ init_declarator_list    : init_declarator
+        """init_declarator_list    : init_declarator
                                     | init_declarator_list COMMA init_declarator
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1] + [p[3]] if len(p) == 4 else [p[1]]
 
@@ -859,42 +1292,105 @@
     # If there's no initializer, uses None
     #
     def p_init_declarator(self, p):
-        """ init_declarator : declarator
+        """init_declarator : declarator
                             | declarator EQUALS initializer
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = dict(decl=p[1], init=(p[3] if len(p) > 2 else None))
 
     def p_id_init_declarator_list(self, p):
-        """ id_init_declarator_list    : id_init_declarator
+        """id_init_declarator_list    : id_init_declarator
                                        | id_init_declarator_list COMMA init_declarator
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1] + [p[3]] if len(p) == 4 else [p[1]]
 
     def p_id_init_declarator(self, p):
-        """ id_init_declarator : id_declarator
+        """id_init_declarator : id_declarator
                                | id_declarator EQUALS initializer
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = dict(decl=p[1], init=(p[3] if len(p) > 2 else None))
 
     # Require at least one type specifier in a specifier-qualifier-list
     #
     def p_specifier_qualifier_list_1(self, p):
-        """ specifier_qualifier_list    : specifier_qualifier_list type_specifier_no_typeid
+        """specifier_qualifier_list    : specifier_qualifier_list type_specifier_no_typeid
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = self._add_declaration_specifier(p[1], p[2], 'type', append=True)
 
     def p_specifier_qualifier_list_2(self, p):
-        """ specifier_qualifier_list    : specifier_qualifier_list type_qualifier
+        """specifier_qualifier_list    : specifier_qualifier_list type_qualifier
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = self._add_declaration_specifier(p[1], p[2], 'qual', append=True)
 
     def p_specifier_qualifier_list_3(self, p):
-        """ specifier_qualifier_list  : type_specifier
+        """specifier_qualifier_list  : type_specifier
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = self._add_declaration_specifier(None, p[1], 'type')
 
     def p_specifier_qualifier_list_4(self, p):
-        """ specifier_qualifier_list  : type_qualifier_list type_specifier
+        """specifier_qualifier_list  : type_qualifier_list type_specifier
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         spec = dict(qual=p[1], storage=[], type=[], function=[])
         p[0] = self._add_declaration_specifier(spec, p[2], 'type', append=True)
@@ -903,8 +1399,17 @@
     # struct/enum tags reside in their own namespace and can be named the same as types
     #
     def p_struct_or_union_specifier_1(self, p):
-        """ struct_or_union_specifier   : struct_or_union ID
+        """struct_or_union_specifier   : struct_or_union ID
                                         | struct_or_union TYPEID
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         klass = self._select_struct_union_class(p[1])
         # None means no list of members
@@ -914,8 +1419,17 @@
             coord=self._token_coord(p, 2))
 
     def p_struct_or_union_specifier_2(self, p):
-        """ struct_or_union_specifier : struct_or_union brace_open struct_declaration_list brace_close
+        """struct_or_union_specifier : struct_or_union brace_open struct_declaration_list brace_close
                                       | struct_or_union brace_open brace_close
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         klass = self._select_struct_union_class(p[1])
         if len(p) == 4:
@@ -932,10 +1446,19 @@
 
 
     def p_struct_or_union_specifier_3(self, p):
-        """ struct_or_union_specifier   : struct_or_union ID brace_open struct_declaration_list brace_close
+        """struct_or_union_specifier   : struct_or_union ID brace_open struct_declaration_list brace_close
                                         | struct_or_union ID brace_open brace_close
                                         | struct_or_union TYPEID brace_open struct_declaration_list brace_close
                                         | struct_or_union TYPEID brace_open brace_close
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         klass = self._select_struct_union_class(p[1])
         if len(p) == 5:
@@ -951,16 +1474,34 @@
                 coord=self._token_coord(p, 2))
 
     def p_struct_or_union(self, p):
-        """ struct_or_union : STRUCT
+        """struct_or_union : STRUCT
                             | UNION
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1]
 
     # Combine all declarations into a single list
     #
     def p_struct_declaration_list(self, p):
-        """ struct_declaration_list     : struct_declaration
+        """struct_declaration_list     : struct_declaration
                                         | struct_declaration_list struct_declaration
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         if len(p) == 2:
             p[0] = p[1] or []
@@ -968,7 +1509,16 @@
             p[0] = p[1] + (p[2] or [])
 
     def p_struct_declaration_1(self, p):
-        """ struct_declaration : specifier_qualifier_list struct_declarator_list_opt SEMI
+        """struct_declaration : specifier_qualifier_list struct_declarator_list_opt SEMI
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         spec = p[1]
         assert 'typedef' not in spec['storage']
@@ -1006,18 +1556,45 @@
         p[0] = decls
 
     def p_struct_declaration_2(self, p):
-        """ struct_declaration : SEMI
+        """struct_declaration : SEMI
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = None
 
     def p_struct_declaration_3(self, p):
-        """ struct_declaration : pppragma_directive
+        """struct_declaration : pppragma_directive
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = [p[1]]
 
     def p_struct_declarator_list(self, p):
-        """ struct_declarator_list  : struct_declarator
+        """struct_declarator_list  : struct_declarator
                                     | struct_declarator_list COMMA struct_declarator
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1] + [p[3]] if len(p) == 4 else [p[1]]
 
@@ -1025,13 +1602,31 @@
     # the underlying declarator) and bitsize (for the bitsize)
     #
     def p_struct_declarator_1(self, p):
-        """ struct_declarator : declarator
+        """struct_declarator : declarator
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = {'decl': p[1], 'bitsize': None}
 
     def p_struct_declarator_2(self, p):
-        """ struct_declarator   : declarator COLON constant_expression
+        """struct_declarator   : declarator COLON constant_expression
                                 | COLON constant_expression
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         if len(p) > 3:
             p[0] = {'decl': p[1], 'bitsize': p[3]}
@@ -1039,26 +1634,62 @@
             p[0] = {'decl': c_ast.TypeDecl(None, None, None), 'bitsize': p[2]}
 
     def p_enum_specifier_1(self, p):
-        """ enum_specifier  : ENUM ID
+        """enum_specifier  : ENUM ID
                             | ENUM TYPEID
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = c_ast.Enum(p[2], None, self._token_coord(p, 1))
 
     def p_enum_specifier_2(self, p):
-        """ enum_specifier  : ENUM brace_open enumerator_list brace_close
+        """enum_specifier  : ENUM brace_open enumerator_list brace_close
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = c_ast.Enum(None, p[3], self._token_coord(p, 1))
 
     def p_enum_specifier_3(self, p):
-        """ enum_specifier  : ENUM ID brace_open enumerator_list brace_close
+        """enum_specifier  : ENUM ID brace_open enumerator_list brace_close
                             | ENUM TYPEID brace_open enumerator_list brace_close
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = c_ast.Enum(p[2], p[4], self._token_coord(p, 1))
 
     def p_enumerator_list(self, p):
-        """ enumerator_list : enumerator
+        """enumerator_list : enumerator
                             | enumerator_list COMMA
                             | enumerator_list COMMA enumerator
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         if len(p) == 2:
             p[0] = c_ast.EnumeratorList([p[1]], p[1].coord)
@@ -1069,8 +1700,17 @@
             p[0] = p[1]
 
     def p_enumerator(self, p):
-        """ enumerator  : ID
+        """enumerator  : ID
                         | ID EQUALS constant_expression
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         if len(p) == 2:
             enumerator = c_ast.Enumerator(
@@ -1085,26 +1725,62 @@
         p[0] = enumerator
 
     def p_declarator(self, p):
-        """ declarator  : id_declarator
+        """declarator  : id_declarator
                         | typeid_declarator
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1]
 
     @parameterized(('id', 'ID'), ('typeid', 'TYPEID'), ('typeid_noparen', 'TYPEID'))
     def p_xxx_declarator_1(self, p):
-        """ xxx_declarator  : direct_xxx_declarator
+        """xxx_declarator  : direct_xxx_declarator
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1]
 
     @parameterized(('id', 'ID'), ('typeid', 'TYPEID'), ('typeid_noparen', 'TYPEID'))
     def p_xxx_declarator_2(self, p):
-        """ xxx_declarator  : pointer direct_xxx_declarator
+        """xxx_declarator  : pointer direct_xxx_declarator
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = self._type_modify_decl(p[2], p[1])
 
     @parameterized(('id', 'ID'), ('typeid', 'TYPEID'), ('typeid_noparen', 'TYPEID'))
     def p_direct_xxx_declarator_1(self, p):
-        """ direct_xxx_declarator   : yyy
+        """direct_xxx_declarator   : yyy
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = c_ast.TypeDecl(
             declname=p[1],
@@ -1114,13 +1790,31 @@
 
     @parameterized(('id', 'ID'), ('typeid', 'TYPEID'))
     def p_direct_xxx_declarator_2(self, p):
-        """ direct_xxx_declarator   : LPAREN xxx_declarator RPAREN
+        """direct_xxx_declarator   : LPAREN xxx_declarator RPAREN
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[2]
 
     @parameterized(('id', 'ID'), ('typeid', 'TYPEID'), ('typeid_noparen', 'TYPEID'))
     def p_direct_xxx_declarator_3(self, p):
-        """ direct_xxx_declarator   : direct_xxx_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
+        """direct_xxx_declarator   : direct_xxx_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         quals = (p[3] if len(p) > 5 else []) or []
         # Accept dimension qualifiers
@@ -1135,8 +1829,17 @@
 
     @parameterized(('id', 'ID'), ('typeid', 'TYPEID'), ('typeid_noparen', 'TYPEID'))
     def p_direct_xxx_declarator_4(self, p):
-        """ direct_xxx_declarator   : direct_xxx_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
+        """direct_xxx_declarator   : direct_xxx_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET
                                     | direct_xxx_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         # Using slice notation for PLY objects doesn't work in Python 3 for the
         # version of PLY embedded with pycparser; see PLY Google Code issue 30.
@@ -1157,7 +1860,16 @@
     #
     @parameterized(('id', 'ID'), ('typeid', 'TYPEID'), ('typeid_noparen', 'TYPEID'))
     def p_direct_xxx_declarator_5(self, p):
-        """ direct_xxx_declarator   : direct_xxx_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
+        """direct_xxx_declarator   : direct_xxx_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         arr = c_ast.ArrayDecl(
             type=None,
@@ -1169,8 +1881,17 @@
 
     @parameterized(('id', 'ID'), ('typeid', 'TYPEID'), ('typeid_noparen', 'TYPEID'))
     def p_direct_xxx_declarator_6(self, p):
-        """ direct_xxx_declarator   : direct_xxx_declarator LPAREN parameter_type_list RPAREN
+        """direct_xxx_declarator   : direct_xxx_declarator LPAREN parameter_type_list RPAREN
                                     | direct_xxx_declarator LPAREN identifier_list_opt RPAREN
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         func = c_ast.FuncDecl(
             args=p[3],
@@ -1197,8 +1918,17 @@
         p[0] = self._type_modify_decl(decl=p[1], modifier=func)
 
     def p_pointer(self, p):
-        """ pointer : TIMES type_qualifier_list_opt
+        """pointer : TIMES type_qualifier_list_opt
                     | TIMES type_qualifier_list_opt pointer
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         coord = self._token_coord(p, 1)
         # Pointer decls nest from inside out. This is important when different
@@ -1227,14 +1957,32 @@
             p[0] = nested_type
 
     def p_type_qualifier_list(self, p):
-        """ type_qualifier_list : type_qualifier
+        """type_qualifier_list : type_qualifier
                                 | type_qualifier_list type_qualifier
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = [p[1]] if len(p) == 2 else p[1] + [p[2]]
 
     def p_parameter_type_list(self, p):
-        """ parameter_type_list : parameter_list
+        """parameter_type_list : parameter_list
                                 | parameter_list COMMA ELLIPSIS
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         if len(p) > 2:
             p[1].params.append(c_ast.EllipsisParam(self._token_coord(p, 3)))
@@ -1242,8 +1990,17 @@
         p[0] = p[1]
 
     def p_parameter_list(self, p):
-        """ parameter_list  : parameter_declaration
+        """parameter_list  : parameter_declaration
                             | parameter_list COMMA parameter_declaration
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         if len(p) == 2: # single parameter
             p[0] = c_ast.ParamList([p[1]], p[1].coord)
@@ -1262,8 +2019,17 @@
     # always treat it as an abstract declarator. Therefore, we only accept
     # `id_declarator`s and `typeid_noparen_declarator`s.
     def p_parameter_declaration_1(self, p):
-        """ parameter_declaration   : declaration_specifiers id_declarator
+        """parameter_declaration   : declaration_specifiers id_declarator
                                     | declaration_specifiers typeid_noparen_declarator
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         spec = p[1]
         if not spec['type']:
@@ -1274,7 +2040,16 @@
             decls=[dict(decl=p[2])])[0]
 
     def p_parameter_declaration_2(self, p):
-        """ parameter_declaration   : declaration_specifiers abstract_declarator_opt
+        """parameter_declaration   : declaration_specifiers abstract_declarator_opt
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         spec = p[1]
         if not spec['type']:
@@ -1305,8 +2080,17 @@
         p[0] = decl
 
     def p_identifier_list(self, p):
-        """ identifier_list : identifier
+        """identifier_list : identifier
                             | identifier_list COMMA identifier
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         if len(p) == 2: # single parameter
             p[0] = c_ast.ParamList([p[1]], p[1].coord)
@@ -1315,13 +2099,31 @@
             p[0] = p[1]
 
     def p_initializer_1(self, p):
-        """ initializer : assignment_expression
+        """initializer : assignment_expression
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1]
 
     def p_initializer_2(self, p):
-        """ initializer : brace_open initializer_list_opt brace_close
+        """initializer : brace_open initializer_list_opt brace_close
                         | brace_open initializer_list COMMA brace_close
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         if p[2] is None:
             p[0] = c_ast.InitList([], self._token_coord(p, 1))
@@ -1329,8 +2131,17 @@
             p[0] = p[2]
 
     def p_initializer_list(self, p):
-        """ initializer_list    : designation_opt initializer
+        """initializer_list    : designation_opt initializer
                                 | initializer_list COMMA designation_opt initializer
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         if len(p) == 3: # single initializer
             init = p[2] if p[1] is None else c_ast.NamedInitializer(p[1], p[2])
@@ -1341,7 +2152,16 @@
             p[0] = p[1]
 
     def p_designation(self, p):
-        """ designation : designator_list EQUALS
+        """designation : designator_list EQUALS
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1]
 
@@ -1349,19 +2169,46 @@
     # they're written in the code.
     #
     def p_designator_list(self, p):
-        """ designator_list : designator
+        """designator_list : designator
                             | designator_list designator
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = [p[1]] if len(p) == 2 else p[1] + [p[2]]
 
     def p_designator(self, p):
-        """ designator  : LBRACKET constant_expression RBRACKET
+        """designator  : LBRACKET constant_expression RBRACKET
                         | PERIOD identifier
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[2]
 
     def p_type_name(self, p):
-        """ type_name   : specifier_qualifier_list abstract_declarator_opt
+        """type_name   : specifier_qualifier_list abstract_declarator_opt
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         typename = c_ast.Typename(
             name='',
@@ -1372,7 +2219,16 @@
         p[0] = self._fix_decl_name_type(typename, p[1]['type'])
 
     def p_abstract_declarator_1(self, p):
-        """ abstract_declarator     : pointer
+        """abstract_declarator     : pointer
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         dummytype = c_ast.TypeDecl(None, None, None)
         p[0] = self._type_modify_decl(
@@ -1380,12 +2236,30 @@
             modifier=p[1])
 
     def p_abstract_declarator_2(self, p):
-        """ abstract_declarator     : pointer direct_abstract_declarator
+        """abstract_declarator     : pointer direct_abstract_declarator
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = self._type_modify_decl(p[2], p[1])
 
     def p_abstract_declarator_3(self, p):
-        """ abstract_declarator     : direct_abstract_declarator
+        """abstract_declarator     : direct_abstract_declarator
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1]
 
@@ -1395,11 +2269,30 @@
     # shift/reduce errors.
     #
     def p_direct_abstract_declarator_1(self, p):
-        """ direct_abstract_declarator  : LPAREN abstract_declarator RPAREN """
+        """direct_abstract_declarator  : LPAREN abstract_declarator RPAREN
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = p[2]
 
     def p_direct_abstract_declarator_2(self, p):
-        """ direct_abstract_declarator  : direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
+        """direct_abstract_declarator  : direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         arr = c_ast.ArrayDecl(
             type=None,
@@ -1410,7 +2303,16 @@
         p[0] = self._type_modify_decl(decl=p[1], modifier=arr)
 
     def p_direct_abstract_declarator_3(self, p):
-        """ direct_abstract_declarator  : LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
+        """direct_abstract_declarator  : LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         quals = (p[2] if len(p) > 4 else []) or []
         p[0] = c_ast.ArrayDecl(
@@ -1420,7 +2322,16 @@
             coord=self._token_coord(p, 1))
 
     def p_direct_abstract_declarator_4(self, p):
-        """ direct_abstract_declarator  : direct_abstract_declarator LBRACKET TIMES RBRACKET
+        """direct_abstract_declarator  : direct_abstract_declarator LBRACKET TIMES RBRACKET
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         arr = c_ast.ArrayDecl(
             type=None,
@@ -1431,7 +2342,16 @@
         p[0] = self._type_modify_decl(decl=p[1], modifier=arr)
 
     def p_direct_abstract_declarator_5(self, p):
-        """ direct_abstract_declarator  : LBRACKET TIMES RBRACKET
+        """direct_abstract_declarator  : LBRACKET TIMES RBRACKET
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = c_ast.ArrayDecl(
             type=c_ast.TypeDecl(None, None, None),
@@ -1440,7 +2360,16 @@
             coord=self._token_coord(p, 1))
 
     def p_direct_abstract_declarator_6(self, p):
-        """ direct_abstract_declarator  : direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
+        """direct_abstract_declarator  : direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         func = c_ast.FuncDecl(
             args=p[3],
@@ -1450,7 +2379,16 @@
         p[0] = self._type_modify_decl(decl=p[1], modifier=func)
 
     def p_direct_abstract_declarator_7(self, p):
-        """ direct_abstract_declarator  : LPAREN parameter_type_list_opt RPAREN
+        """direct_abstract_declarator  : LPAREN parameter_type_list_opt RPAREN
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = c_ast.FuncDecl(
             args=p[2],
@@ -1461,96 +2399,282 @@
     # will always be a list
     #
     def p_block_item(self, p):
-        """ block_item  : declaration
+        """block_item  : declaration
                         | statement
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1] if isinstance(p[1], list) else [p[1]]
 
     # Since we made block_item a list, this just combines lists
     #
     def p_block_item_list(self, p):
-        """ block_item_list : block_item
+        """block_item_list : block_item
                             | block_item_list block_item
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         # Empty block items (plain ';') produce [None], so ignore them
         p[0] = p[1] if (len(p) == 2 or p[2] == [None]) else p[1] + p[2]
 
     def p_compound_statement_1(self, p):
-        """ compound_statement : brace_open block_item_list_opt brace_close """
+        """compound_statement : brace_open block_item_list_opt brace_close
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = c_ast.Compound(
             block_items=p[2],
             coord=self._token_coord(p, 1))
 
     def p_labeled_statement_1(self, p):
-        """ labeled_statement : ID COLON pragmacomp_or_statement """
+        """labeled_statement : ID COLON pragmacomp_or_statement
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = c_ast.Label(p[1], p[3], self._token_coord(p, 1))
 
     def p_labeled_statement_2(self, p):
-        """ labeled_statement : CASE constant_expression COLON pragmacomp_or_statement """
+        """labeled_statement : CASE constant_expression COLON pragmacomp_or_statement
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = c_ast.Case(p[2], [p[4]], self._token_coord(p, 1))
 
     def p_labeled_statement_3(self, p):
-        """ labeled_statement : DEFAULT COLON pragmacomp_or_statement """
+        """labeled_statement : DEFAULT COLON pragmacomp_or_statement
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = c_ast.Default([p[3]], self._token_coord(p, 1))
 
     def p_selection_statement_1(self, p):
-        """ selection_statement : IF LPAREN expression RPAREN pragmacomp_or_statement """
+        """selection_statement : IF LPAREN expression RPAREN pragmacomp_or_statement
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = c_ast.If(p[3], p[5], None, self._token_coord(p, 1))
 
     def p_selection_statement_2(self, p):
-        """ selection_statement : IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement """
+        """selection_statement : IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = c_ast.If(p[3], p[5], p[7], self._token_coord(p, 1))
 
     def p_selection_statement_3(self, p):
-        """ selection_statement : SWITCH LPAREN expression RPAREN pragmacomp_or_statement """
+        """selection_statement : SWITCH LPAREN expression RPAREN pragmacomp_or_statement
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = fix_switch_cases(
                 c_ast.Switch(p[3], p[5], self._token_coord(p, 1)))
 
     def p_iteration_statement_1(self, p):
-        """ iteration_statement : WHILE LPAREN expression RPAREN pragmacomp_or_statement """
+        """iteration_statement : WHILE LPAREN expression RPAREN pragmacomp_or_statement
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = c_ast.While(p[3], p[5], self._token_coord(p, 1))
 
     def p_iteration_statement_2(self, p):
-        """ iteration_statement : DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI """
+        """iteration_statement : DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = c_ast.DoWhile(p[5], p[2], self._token_coord(p, 1))
 
     def p_iteration_statement_3(self, p):
-        """ iteration_statement : FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement """
+        """iteration_statement : FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = c_ast.For(p[3], p[5], p[7], p[9], self._token_coord(p, 1))
 
     def p_iteration_statement_4(self, p):
-        """ iteration_statement : FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement """
+        """iteration_statement : FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = c_ast.For(c_ast.DeclList(p[3], self._token_coord(p, 1)),
                          p[4], p[6], p[8], self._token_coord(p, 1))
 
     def p_jump_statement_1(self, p):
-        """ jump_statement  : GOTO ID SEMI """
+        """jump_statement  : GOTO ID SEMI
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = c_ast.Goto(p[2], self._token_coord(p, 1))
 
     def p_jump_statement_2(self, p):
-        """ jump_statement  : BREAK SEMI """
+        """jump_statement  : BREAK SEMI
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = c_ast.Break(self._token_coord(p, 1))
 
     def p_jump_statement_3(self, p):
-        """ jump_statement  : CONTINUE SEMI """
+        """jump_statement  : CONTINUE SEMI
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = c_ast.Continue(self._token_coord(p, 1))
 
     def p_jump_statement_4(self, p):
-        """ jump_statement  : RETURN expression SEMI
+        """jump_statement  : RETURN expression SEMI
                             | RETURN SEMI
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = c_ast.Return(p[2] if len(p) == 4 else None, self._token_coord(p, 1))
 
     def p_expression_statement(self, p):
-        """ expression_statement : expression_opt SEMI """
+        """expression_statement : expression_opt SEMI
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         if p[1] is None:
             p[0] = c_ast.EmptyStatement(self._token_coord(p, 2))
         else:
             p[0] = p[1]
 
     def p_expression(self, p):
-        """ expression  : assignment_expression
+        """expression  : assignment_expression
                         | expression COMMA assignment_expression
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         if len(p) == 2:
             p[0] = p[1]
@@ -1562,12 +2686,31 @@
             p[0] = p[1]
 
     def p_typedef_name(self, p):
-        """ typedef_name : TYPEID """
+        """typedef_name : TYPEID
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = c_ast.IdentifierType([p[1]], coord=self._token_coord(p, 1))
 
     def p_assignment_expression(self, p):
-        """ assignment_expression   : conditional_expression
+        """assignment_expression   : conditional_expression
                                     | unary_expression assignment_operator assignment_expression
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         if len(p) == 2:
             p[0] = p[1]
@@ -1580,7 +2723,7 @@
     # of PLY. (see precedence declaration above)
     #
     def p_assignment_operator(self, p):
-        """ assignment_operator : EQUALS
+        """assignment_operator : EQUALS
                                 | XOREQUAL
                                 | TIMESEQUAL
                                 | DIVEQUAL
@@ -1591,16 +2734,44 @@
                                 | RSHIFTEQUAL
                                 | ANDEQUAL
                                 | OREQUAL
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1]
 
     def p_constant_expression(self, p):
-        """ constant_expression : conditional_expression """
+        """constant_expression : conditional_expression
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = p[1]
 
     def p_conditional_expression(self, p):
-        """ conditional_expression  : binary_expression
+        """conditional_expression  : binary_expression
                                     | binary_expression CONDOP expression COLON conditional_expression
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         if len(p) == 2:
             p[0] = p[1]
@@ -1608,7 +2779,7 @@
             p[0] = c_ast.TernaryOp(p[1], p[3], p[5], p[1].coord)
 
     def p_binary_expression(self, p):
-        """ binary_expression   : cast_expression
+        """binary_expression   : cast_expression
                                 | binary_expression TIMES binary_expression
                                 | binary_expression DIVIDE binary_expression
                                 | binary_expression MOD binary_expression
@@ -1627,6 +2798,15 @@
                                 | binary_expression XOR binary_expression
                                 | binary_expression LAND binary_expression
                                 | binary_expression LOR binary_expression
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         if len(p) == 2:
             p[0] = p[1]
@@ -1634,27 +2814,75 @@
             p[0] = c_ast.BinaryOp(p[2], p[1], p[3], p[1].coord)
 
     def p_cast_expression_1(self, p):
-        """ cast_expression : unary_expression """
+        """cast_expression : unary_expression
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = p[1]
 
     def p_cast_expression_2(self, p):
-        """ cast_expression : LPAREN type_name RPAREN cast_expression """
+        """cast_expression : LPAREN type_name RPAREN cast_expression
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = c_ast.Cast(p[2], p[4], self._token_coord(p, 1))
 
     def p_unary_expression_1(self, p):
-        """ unary_expression    : postfix_expression """
+        """unary_expression    : postfix_expression
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = p[1]
 
     def p_unary_expression_2(self, p):
-        """ unary_expression    : PLUSPLUS unary_expression
+        """unary_expression    : PLUSPLUS unary_expression
                                 | MINUSMINUS unary_expression
                                 | unary_operator cast_expression
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = c_ast.UnaryOp(p[1], p[2], p[2].coord)
 
     def p_unary_expression_3(self, p):
-        """ unary_expression    : SIZEOF unary_expression
+        """unary_expression    : SIZEOF unary_expression
                                 | SIZEOF LPAREN type_name RPAREN
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = c_ast.UnaryOp(
             p[1],
@@ -1662,70 +2890,183 @@
             self._token_coord(p, 1))
 
     def p_unary_operator(self, p):
-        """ unary_operator  : AND
+        """unary_operator  : AND
                             | TIMES
                             | PLUS
                             | MINUS
                             | NOT
                             | LNOT
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1]
 
     def p_postfix_expression_1(self, p):
-        """ postfix_expression  : primary_expression """
+        """postfix_expression  : primary_expression
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = p[1]
 
     def p_postfix_expression_2(self, p):
-        """ postfix_expression  : postfix_expression LBRACKET expression RBRACKET """
+        """postfix_expression  : postfix_expression LBRACKET expression RBRACKET
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = c_ast.ArrayRef(p[1], p[3], p[1].coord)
 
     def p_postfix_expression_3(self, p):
-        """ postfix_expression  : postfix_expression LPAREN argument_expression_list RPAREN
+        """postfix_expression  : postfix_expression LPAREN argument_expression_list RPAREN
                                 | postfix_expression LPAREN RPAREN
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = c_ast.FuncCall(p[1], p[3] if len(p) == 5 else None, p[1].coord)
 
     def p_postfix_expression_4(self, p):
-        """ postfix_expression  : postfix_expression PERIOD ID
+        """postfix_expression  : postfix_expression PERIOD ID
                                 | postfix_expression PERIOD TYPEID
                                 | postfix_expression ARROW ID
                                 | postfix_expression ARROW TYPEID
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         field = c_ast.ID(p[3], self._token_coord(p, 3))
         p[0] = c_ast.StructRef(p[1], p[2], field, p[1].coord)
 
     def p_postfix_expression_5(self, p):
-        """ postfix_expression  : postfix_expression PLUSPLUS
+        """postfix_expression  : postfix_expression PLUSPLUS
                                 | postfix_expression MINUSMINUS
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = c_ast.UnaryOp('p' + p[2], p[1], p[1].coord)
 
     def p_postfix_expression_6(self, p):
-        """ postfix_expression  : LPAREN type_name RPAREN brace_open initializer_list brace_close
+        """postfix_expression  : LPAREN type_name RPAREN brace_open initializer_list brace_close
                                 | LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = c_ast.CompoundLiteral(p[2], p[5])
 
     def p_primary_expression_1(self, p):
-        """ primary_expression  : identifier """
+        """primary_expression  : identifier
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = p[1]
 
     def p_primary_expression_2(self, p):
-        """ primary_expression  : constant """
+        """primary_expression  : constant
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = p[1]
 
     def p_primary_expression_3(self, p):
-        """ primary_expression  : unified_string_literal
+        """primary_expression  : unified_string_literal
                                 | unified_wstring_literal
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1]
 
     def p_primary_expression_4(self, p):
-        """ primary_expression  : LPAREN expression RPAREN """
+        """primary_expression  : LPAREN expression RPAREN
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = p[2]
 
     def p_primary_expression_5(self, p):
-        """ primary_expression  : OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
+        """primary_expression  : OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         coord = self._token_coord(p, 1)
         p[0] = c_ast.FuncCall(c_ast.ID(p[1], coord),
@@ -1733,9 +3074,18 @@
                               coord)
 
     def p_offsetof_member_designator(self, p):
-        """ offsetof_member_designator : identifier
+        """offsetof_member_designator : identifier
                                          | offsetof_member_designator PERIOD identifier
                                          | offsetof_member_designator LBRACKET expression RBRACKET
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         if len(p) == 2:
             p[0] = p[1]
@@ -1747,8 +3097,17 @@
             raise NotImplementedError("Unexpected parsing state. len(p): %u" % len(p))
 
     def p_argument_expression_list(self, p):
-        """ argument_expression_list    : assignment_expression
+        """argument_expression_list    : assignment_expression
                                         | argument_expression_list COMMA assignment_expression
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         if len(p) == 2: # single expr
             p[0] = c_ast.ExprList([p[1]], p[1].coord)
@@ -1757,15 +3116,34 @@
             p[0] = p[1]
 
     def p_identifier(self, p):
-        """ identifier  : ID """
+        """identifier  : ID
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         p[0] = c_ast.ID(p[1], self._token_coord(p, 1))
 
     def p_constant_1(self, p):
-        """ constant    : INT_CONST_DEC
+        """constant    : INT_CONST_DEC
                         | INT_CONST_OCT
                         | INT_CONST_HEX
                         | INT_CONST_BIN
                         | INT_CONST_CHAR
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         uCount = 0
         lCount = 0
@@ -1784,8 +3162,17 @@
             prefix + 'int', p[1], self._token_coord(p, 1))
 
     def p_constant_2(self, p):
-        """ constant    : FLOAT_CONST
+        """constant    : FLOAT_CONST
                         | HEX_FLOAT_CONST
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         if 'x' in p[1].lower():
             t = 'float'
@@ -1801,8 +3188,17 @@
             t, p[1], self._token_coord(p, 1))
 
     def p_constant_3(self, p):
-        """ constant    : CHAR_CONST
+        """constant    : CHAR_CONST
                         | WCHAR_CONST
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = c_ast.Constant(
             'char', p[1], self._token_coord(p, 1))
@@ -1813,8 +3209,17 @@
     # with the value "hello world"
     #
     def p_unified_string_literal(self, p):
-        """ unified_string_literal  : STRING_LITERAL
+        """unified_string_literal  : STRING_LITERAL
                                     | unified_string_literal STRING_LITERAL
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         if len(p) == 2: # single literal
             p[0] = c_ast.Constant(
@@ -1824,8 +3229,17 @@
             p[0] = p[1]
 
     def p_unified_wstring_literal(self, p):
-        """ unified_wstring_literal : WSTRING_LITERAL
+        """unified_wstring_literal : WSTRING_LITERAL
                                     | unified_wstring_literal WSTRING_LITERAL
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         if len(p) == 2: # single literal
             p[0] = c_ast.Constant(
@@ -1835,22 +3249,62 @@
             p[0] = p[1]
 
     def p_brace_open(self, p):
-        """ brace_open  :   LBRACE
+        """brace_open  :   LBRACE
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1]
         p.set_lineno(0, p.lineno(1))
 
     def p_brace_close(self, p):
-        """ brace_close :   RBRACE
+        """brace_close :   RBRACE
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
         """
         p[0] = p[1]
         p.set_lineno(0, p.lineno(1))
 
     def p_empty(self, p):
+        """
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         'empty : '
         p[0] = None
 
     def p_error(self, p):
+        """
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         # If error recovery is added here in the future, make sure
         # _get_yacc_lookahead_token still works!
         #
