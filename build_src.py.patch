# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/distutils/command/build_src.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/distutils/command/build_src.py
@@ -24,7 +24,21 @@
 
 def subst_vars(target, source, d):
     """Substitute any occurrence of @foo@ by d['foo'] from source file into
-    target."""
+    target.
+
+    Parameters
+    ----------
+    target :
+        
+    source :
+        
+    d :
+        
+
+    Returns
+    -------
+
+    """
     var = re.compile('@([a-zA-Z_]+)@')
     with open(source, 'r') as fs:
         with open(target, 'w') as ft:
@@ -36,6 +50,7 @@
                     ft.write(l)
 
 class build_src(build_ext.build_ext):
+    """ """
 
     description = "build sources from SWIG, F2PY files or a function"
 
@@ -61,6 +76,7 @@
     help_options = []
 
     def initialize_options(self):
+        """ """
         self.extensions = None
         self.package = None
         self.py_modules = None
@@ -80,6 +96,7 @@
         self.verbose_cfg = None
 
     def finalize_options(self):
+        """ """
         self.set_undefined_options('build',
                                    ('build_base', 'build_base'),
                                    ('build_lib', 'build_lib'),
@@ -138,12 +155,14 @@
                     setattr(self, c, v)
 
     def run(self):
+        """ """
         log.info("build_src")
         if not (self.extensions or self.libraries):
             return
         self.build_sources()
 
     def build_sources(self):
+        """ """
 
         if self.inplace:
             self.get_package_dir = \
@@ -164,6 +183,7 @@
         self.build_npy_pkg_config()
 
     def build_data_files_sources(self):
+        """ """
         if not self.data_files:
             return
         log.info('building data_files sources')
@@ -200,6 +220,19 @@
 
 
     def _build_npy_pkg_config(self, info, gd):
+        """
+
+        Parameters
+        ----------
+        info :
+            
+        gd :
+            
+
+        Returns
+        -------
+
+        """
         template, install_dir, subst_dict = info
         template_dir = os.path.dirname(template)
         for k, v in gd.items():
@@ -222,6 +255,7 @@
         return full_install_dir, generated_path
 
     def build_npy_pkg_config(self):
+        """ """
         log.info('build_src: building npy-pkg config files')
 
         # XXX: another ugly workaround to circumvent distutils brain damage. We
@@ -252,6 +286,7 @@
                         [generated]))
 
     def build_py_modules_sources(self):
+        """ """
         if not self.py_modules:
             return
         log.info('building py_modules sources')
@@ -278,6 +313,19 @@
         self.py_modules[:] = new_py_modules
 
     def build_library_sources(self, lib_name, build_info):
+        """
+
+        Parameters
+        ----------
+        lib_name :
+            
+        build_info :
+            
+
+        Returns
+        -------
+
+        """
         sources = list(build_info.get('sources', []))
 
         if not sources:
@@ -302,6 +350,17 @@
         return
 
     def build_extension_sources(self, ext):
+        """
+
+        Parameters
+        ----------
+        ext :
+            
+
+        Returns
+        -------
+
+        """
 
         sources = list(ext.sources)
 
@@ -342,6 +401,19 @@
         ext.sources = sources
 
     def generate_sources(self, sources, extension):
+        """
+
+        Parameters
+        ----------
+        sources :
+            
+        extension :
+            
+
+        Returns
+        -------
+
+        """
         new_sources = []
         func_sources = []
         for source in sources:
@@ -388,12 +460,47 @@
         return new_sources
 
     def filter_py_files(self, sources):
+        """
+
+        Parameters
+        ----------
+        sources :
+            
+
+        Returns
+        -------
+
+        """
         return self.filter_files(sources, ['.py'])
 
     def filter_h_files(self, sources):
+        """
+
+        Parameters
+        ----------
+        sources :
+            
+
+        Returns
+        -------
+
+        """
         return self.filter_files(sources, ['.h', '.hpp', '.inc'])
 
     def filter_files(self, sources, exts = []):
+        """
+
+        Parameters
+        ----------
+        sources :
+            
+        exts :
+             (Default value = [])
+
+        Returns
+        -------
+
+        """
         new_sources = []
         files = []
         for source in sources:
@@ -405,6 +512,19 @@
         return new_sources, files
 
     def template_sources(self, sources, extension):
+        """
+
+        Parameters
+        ----------
+        sources :
+            
+        extension :
+            
+
+        Returns
+        -------
+
+        """
         new_sources = []
         if is_sequence(extension):
             depends = extension[1].get('depends')
@@ -441,7 +561,19 @@
         return new_sources
 
     def pyrex_sources(self, sources, extension):
-        """Pyrex not supported; this remains for Cython support (see below)"""
+        """Pyrex not supported; this remains for Cython support (see below)
+
+        Parameters
+        ----------
+        sources :
+            
+        extension :
+            
+
+        Returns
+        -------
+
+        """
         new_sources = []
         ext_name = extension.name.split('.')[-1]
         for source in sources:
@@ -457,13 +589,41 @@
 
     def generate_a_pyrex_source(self, base, ext_name, source, extension):
         """Pyrex is not supported, but some projects monkeypatch this method.
-
+        
         That allows compiling Cython code, see gh-6955.
         This method will remain here for compatibility reasons.
+
+        Parameters
+        ----------
+        base :
+            
+        ext_name :
+            
+        source :
+            
+        extension :
+            
+
+        Returns
+        -------
+
         """
         return []
 
     def f2py_sources(self, sources, extension):
+        """
+
+        Parameters
+        ----------
+        sources :
+            
+        extension :
+            
+
+        Returns
+        -------
+
+        """
         new_sources = []
         f2py_sources = []
         f_sources = []
@@ -602,6 +762,19 @@
         return new_sources + f_sources
 
     def swig_sources(self, sources, extension):
+        """
+
+        Parameters
+        ----------
+        sources :
+            
+        extension :
+            
+
+        Returns
+        -------
+
+        """
         # Assuming SWIG 1.3.14 or later. See compatibility note in
         #   http://www.swig.org/Doc1.3/Python.html#Python_nn6
 
@@ -725,6 +898,17 @@
 _has_cpp_header = re.compile(r'-[*]-\s*c[+][+]\s*-[*]-', re.I).search
 
 def get_swig_target(source):
+    """
+
+    Parameters
+    ----------
+    source :
+        
+
+    Returns
+    -------
+
+    """
     with open(source, 'r') as f:
         result = None
         line = f.readline()
@@ -735,6 +919,17 @@
     return result
 
 def get_swig_modulename(source):
+    """
+
+    Parameters
+    ----------
+    source :
+        
+
+    Returns
+    -------
+
+    """
     with open(source, 'r') as f:
         name = None
         for line in f:
@@ -745,6 +940,19 @@
     return name
 
 def _find_swig_target(target_dir, name):
+    """
+
+    Parameters
+    ----------
+    target_dir :
+        
+    name :
+        
+
+    Returns
+    -------
+
+    """
     for ext in ['.cpp', '.c']:
         target = os.path.join(target_dir, '%s_wrap%s' % (name, ext))
         if os.path.isfile(target):
@@ -759,6 +967,17 @@
                                           r'__user__[\w_]*)', re.I).match
 
 def get_f2py_modulename(source):
+    """
+
+    Parameters
+    ----------
+    source :
+        
+
+    Returns
+    -------
+
+    """
     name = None
     with open(source) as f:
         for line in f:
