# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/_dtype.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/_dtype.py
@@ -22,6 +22,17 @@
 
 
 def _kind_name(dtype):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+
+    Returns
+    -------
+
+    """
     try:
         return _kind_to_stem[dtype.kind]
     except KeyError:
@@ -50,24 +61,46 @@
 
 
 def _unpack_field(dtype, offset, title=None):
-    """
-    Helper function to normalize the items in dtype.fields.
-
+    """Helper function to normalize the items in dtype.fields.
+    
     Call as:
-
+    
     dtype, offset, title = _unpack_field(*dtype.fields[name])
+
+    Parameters
+    ----------
+    dtype :
+        
+    offset :
+        
+    title :
+         (Default value = None)
+
+    Returns
+    -------
+
     """
     return dtype, offset, title
 
 
 def _isunsized(dtype):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+
+    Returns
+    -------
+
+    """
     # PyDataType_ISUNSIZED
     return dtype.itemsize == 0
 
 
 def _construction_repr(dtype, include_align=False, short=False):
-    """
-    Creates a string repr of the dtype, excluding the 'dtype()' part
+    """Creates a string repr of the dtype, excluding the 'dtype()' part
     surrounding the object. This object may be a string, a list, or
     a dict depending on the nature of the dtype. This
     is the object passed as the first parameter to the dtype
@@ -76,21 +109,17 @@
 
     Parameters
     ----------
-    short : bool
-        If true, this creates a shorter repr using 'kind' and 'itemsize', instead
-        of the longer type name.
-
-    include_align : bool
-        If true, this includes the 'align=True' parameter
-        inside the struct dtype construction dict when needed. Use this flag
-        if you want a proper repr string without the 'dtype()' part around it.
-
-        If false, this does not preserve the
-        'align=True' parameter or sticky NPY_ALIGNED_STRUCT flag for
-        struct arrays like the regular repr does, because the 'align'
-        flag is not part of first dtype constructor parameter. This
-        mode is intended for a full 'repr', where the 'align=True' is
-        provided as the second parameter.
+    dtype :
+        
+    include_align :
+         (Default value = False)
+    short :
+         (Default value = False)
+
+    Returns
+    -------
+
+    
     """
     if dtype.fields is not None:
         return _struct_str(dtype, include_align=include_align)
@@ -101,6 +130,19 @@
 
 
 def _scalar_str(dtype, short):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+    short :
+        
+
+    Returns
+    -------
+
+    """
     byteorder = _byte_order_str(dtype)
 
     if dtype.type == np.bool_:
@@ -158,7 +200,17 @@
 
 
 def _byte_order_str(dtype):
-    """ Normalize byteorder to '<' or '>' """
+    """Normalize byteorder to '<' or '>'
+
+    Parameters
+    ----------
+    dtype :
+        
+
+    Returns
+    -------
+
+    """
     # hack to obtain the native and swapped byte order characters
     swapped = np.dtype(int).newbyteorder('s')
     native = swapped.newbyteorder('s')
@@ -176,6 +228,17 @@
 
 
 def _datetime_metadata_str(dtype):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+
+    Returns
+    -------
+
+    """
     # TODO: this duplicates the C append_metastr_to_string
     unit, count = np.datetime_data(dtype)
     if unit == 'generic':
@@ -187,6 +250,19 @@
 
 
 def _struct_dict_str(dtype, includealignedflag):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+    includealignedflag :
+        
+
+    Returns
+    -------
+
+    """
     # unpack the fields dictionary into ls
     names = dtype.names
     fld_dtypes = []
@@ -231,16 +307,24 @@
 
 
 def _is_packed(dtype):
-    """
-    Checks whether the structured data type in 'dtype'
+    """Checks whether the structured data type in 'dtype'
     has a simple layout, where all the fields are in order,
     and follow each other with no alignment padding.
-
+    
     When this returns true, the dtype can be reconstructed
     from a list of the field names and dtypes with no additional
     dtype parameters.
-
+    
     Duplicates the C `is_dtype_struct_simple_unaligned_layout` function.
+
+    Parameters
+    ----------
+    dtype :
+        
+
+    Returns
+    -------
+
     """
     total_offset = 0
     for name in dtype.names:
@@ -254,6 +338,17 @@
 
 
 def _struct_list_str(dtype):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+
+    Returns
+    -------
+
+    """
     items = []
     for name in dtype.names:
         fld_dtype, fld_offset, title = _unpack_field(*dtype.fields[name])
@@ -280,6 +375,19 @@
 
 
 def _struct_str(dtype, include_align):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+    include_align :
+        
+
+    Returns
+    -------
+
+    """
     # The list str representation can't include the 'align=' flag,
     # so if it is requested and the struct has the aligned flag set,
     # we must use the dict str instead.
@@ -297,6 +405,17 @@
 
 
 def _subarray_str(dtype):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+
+    Returns
+    -------
+
+    """
     base, shape = dtype.subdtype
     return "({}, {})".format(
         _construction_repr(base, short=True),
@@ -305,6 +424,17 @@
 
 
 def _name_includes_bit_suffix(dtype):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+
+    Returns
+    -------
+
+    """
     if dtype.type == np.object_:
         # pointer size varies by system, best to omit it
         return False
@@ -319,6 +449,17 @@
 
 
 def _name_get(dtype):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+
+    Returns
+    -------
+
+    """
     # provides dtype.name.__get__, documented as returning a "bit name"
 
     if dtype.isbuiltin == 2:
