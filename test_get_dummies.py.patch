# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/reshape/test_get_dummies.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/reshape/test_get_dummies.py
@@ -12,30 +12,89 @@
 
 
 class TestGetDummies:
+    """ """
     @pytest.fixture
     def df(self):
+        """ """
         return DataFrame({"A": ["a", "b", "a"], "B": ["b", "b", "c"], "C": [1, 2, 3]})
 
     @pytest.fixture(params=["uint8", "i8", np.float64, bool, None])
     def dtype(self, request):
+        """
+
+        Parameters
+        ----------
+        request :
+            
+
+        Returns
+        -------
+
+        """
         return np.dtype(request.param)
 
     @pytest.fixture(params=["dense", "sparse"])
     def sparse(self, request):
+        """
+
+        Parameters
+        ----------
+        request :
+            
+
+        Returns
+        -------
+
+        """
         # params are strings to simplify reading test results,
         # e.g. TestGetDummies::test_basic[uint8-sparse] instead of [uint8-True]
         return request.param == "sparse"
 
     def effective_dtype(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         if dtype is None:
             return np.uint8
         return dtype
 
     def test_get_dummies_raises_on_dtype_object(self, df):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+
+        Returns
+        -------
+
+        """
         with pytest.raises(ValueError):
             get_dummies(df, dtype="object")
 
     def test_get_dummies_basic(self, sparse, dtype):
+        """
+
+        Parameters
+        ----------
+        sparse :
+            
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         s_list = list("abc")
         s_series = Series(s_list)
         s_series_index = Series(s_list, list("ABC"))
@@ -57,6 +116,19 @@
         tm.assert_frame_equal(result, expected)
 
     def test_get_dummies_basic_types(self, sparse, dtype):
+        """
+
+        Parameters
+        ----------
+        sparse :
+            
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         # GH 10531
         s_list = list("abc")
         s_series = Series(s_list)
@@ -107,6 +179,17 @@
         tm.assert_series_equal(result, expected)
 
     def test_get_dummies_just_na(self, sparse):
+        """
+
+        Parameters
+        ----------
+        sparse :
+            
+
+        Returns
+        -------
+
+        """
         just_na_list = [np.nan]
         just_na_series = Series(just_na_list)
         just_na_series_index = Series(just_na_list, index=["A"])
@@ -124,6 +207,19 @@
         assert res_series_index.index.tolist() == ["A"]
 
     def test_get_dummies_include_na(self, sparse, dtype):
+        """
+
+        Parameters
+        ----------
+        sparse :
+            
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         s = ["a", "b", np.nan]
         res = get_dummies(s, sparse=sparse, dtype=dtype)
         exp = DataFrame(
@@ -153,6 +249,17 @@
         tm.assert_numpy_array_equal(res_just_na.values, exp_just_na.values)
 
     def test_get_dummies_unicode(self, sparse):
+        """
+
+        Parameters
+        ----------
+        sparse :
+            
+
+        Returns
+        -------
+
+        """
         # See GH 6885 - get_dummies chokes on unicode values
         import unicodedata
 
@@ -168,6 +275,19 @@
         tm.assert_frame_equal(res, exp)
 
     def test_dataframe_dummies_all_obj(self, df, sparse):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        sparse :
+            
+
+        Returns
+        -------
+
+        """
         df = df[["A", "B"]]
         result = get_dummies(df, sparse=sparse)
         expected = DataFrame(
@@ -187,6 +307,21 @@
         tm.assert_frame_equal(result, expected)
 
     def test_dataframe_dummies_mix_default(self, df, sparse, dtype):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        sparse :
+            
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         result = get_dummies(df, sparse=sparse, dtype=dtype)
         if sparse:
             arr = SparseArray
@@ -207,6 +342,19 @@
         tm.assert_frame_equal(result, expected)
 
     def test_dataframe_dummies_prefix_list(self, df, sparse):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        sparse :
+            
+
+        Returns
+        -------
+
+        """
         prefixes = ["from_A", "from_B"]
         result = get_dummies(df, prefix=prefixes, sparse=sparse)
         expected = DataFrame(
@@ -228,6 +376,19 @@
         tm.assert_frame_equal(result, expected)
 
     def test_dataframe_dummies_prefix_str(self, df, sparse):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        sparse :
+            
+
+        Returns
+        -------
+
+        """
         # not that you should do this...
         result = get_dummies(df, prefix="bad", sparse=sparse)
         bad_columns = ["bad_a", "bad_b", "bad_b", "bad_c"]
@@ -254,6 +415,19 @@
         tm.assert_frame_equal(result, expected)
 
     def test_dataframe_dummies_subset(self, df, sparse):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        sparse :
+            
+
+        Returns
+        -------
+
+        """
         result = get_dummies(df, prefix=["from_A"], columns=["A"], sparse=sparse)
         expected = DataFrame(
             {
@@ -271,6 +445,19 @@
         tm.assert_frame_equal(result, expected)
 
     def test_dataframe_dummies_prefix_sep(self, df, sparse):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        sparse :
+            
+
+        Returns
+        -------
+
+        """
         result = get_dummies(df, prefix_sep="..", sparse=sparse)
         expected = DataFrame(
             {
@@ -298,14 +485,51 @@
         tm.assert_frame_equal(result, expected)
 
     def test_dataframe_dummies_prefix_bad_length(self, df, sparse):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        sparse :
+            
+
+        Returns
+        -------
+
+        """
         with pytest.raises(ValueError):
             get_dummies(df, prefix=["too few"], sparse=sparse)
 
     def test_dataframe_dummies_prefix_sep_bad_length(self, df, sparse):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        sparse :
+            
+
+        Returns
+        -------
+
+        """
         with pytest.raises(ValueError):
             get_dummies(df, prefix_sep=["bad"], sparse=sparse)
 
     def test_dataframe_dummies_prefix_dict(self, sparse):
+        """
+
+        Parameters
+        ----------
+        sparse :
+            
+
+        Returns
+        -------
+
+        """
         prefixes = {"A": "from_A", "B": "from_B"}
         df = DataFrame({"C": [1, 2, 3], "A": ["a", "b", "a"], "B": ["b", "b", "c"]})
         result = get_dummies(df, prefix=prefixes, sparse=sparse)
@@ -328,6 +552,21 @@
         tm.assert_frame_equal(result, expected)
 
     def test_dataframe_dummies_with_na(self, df, sparse, dtype):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        sparse :
+            
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         df.loc[3, :] = [np.nan, np.nan, np.nan]
         result = get_dummies(df, dummy_na=True, sparse=sparse, dtype=dtype).sort_index(
             axis=1
@@ -359,6 +598,21 @@
         tm.assert_frame_equal(result, expected)
 
     def test_dataframe_dummies_with_categorical(self, df, sparse, dtype):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        sparse :
+            
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         df["cat"] = Categorical(["x", "y", "y"])
         result = get_dummies(df, sparse=sparse, dtype=dtype).sort_index(axis=1)
         if sparse:
@@ -404,12 +658,36 @@
         ],
     )
     def test_dataframe_dummies_unicode(self, get_dummies_kwargs, expected):
+        """
+
+        Parameters
+        ----------
+        get_dummies_kwargs :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # GH22084 get_dummies incorrectly encodes unicode characters
         # in dataframe column names
         result = get_dummies(**get_dummies_kwargs)
         tm.assert_frame_equal(result, expected)
 
     def test_get_dummies_basic_drop_first(self, sparse):
+        """
+
+        Parameters
+        ----------
+        sparse :
+            
+
+        Returns
+        -------
+
+        """
         # GH12402 Add a new parameter `drop_first` to avoid collinearity
         # Basic case
         s_list = list("abc")
@@ -431,6 +709,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_get_dummies_basic_drop_first_one_level(self, sparse):
+        """
+
+        Parameters
+        ----------
+        sparse :
+            
+
+        Returns
+        -------
+
+        """
         # Test the case that categorical variable only has one level.
         s_list = list("aaa")
         s_series = Series(s_list)
@@ -449,6 +738,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_get_dummies_basic_drop_first_NA(self, sparse):
+        """
+
+        Parameters
+        ----------
+        sparse :
+            
+
+        Returns
+        -------
+
+        """
         # Test NA handling together with drop_first
         s_NA = ["a", "b", np.nan]
         res = get_dummies(s_NA, drop_first=True, sparse=sparse)
@@ -473,6 +773,19 @@
         tm.assert_frame_equal(res_just_na, exp_just_na)
 
     def test_dataframe_dummies_drop_first(self, df, sparse):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        sparse :
+            
+
+        Returns
+        -------
+
+        """
         df = df[["A", "B"]]
         result = get_dummies(df, drop_first=True, sparse=sparse)
         expected = DataFrame({"A_b": [0, 1, 0], "B_c": [0, 0, 1]}, dtype=np.uint8)
@@ -481,6 +794,21 @@
         tm.assert_frame_equal(result, expected)
 
     def test_dataframe_dummies_drop_first_with_categorical(self, df, sparse, dtype):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        sparse :
+            
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         df["cat"] = Categorical(["x", "y", "y"])
         result = get_dummies(df, drop_first=True, sparse=sparse)
         expected = DataFrame(
@@ -495,6 +823,19 @@
         tm.assert_frame_equal(result, expected)
 
     def test_dataframe_dummies_drop_first_with_na(self, df, sparse):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        sparse :
+            
+
+        Returns
+        -------
+
+        """
         df.loc[3, :] = [np.nan, np.nan, np.nan]
         result = get_dummies(
             df, dummy_na=True, drop_first=True, sparse=sparse
@@ -522,6 +863,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_get_dummies_int_int(self):
+        """ """
         data = Series([1, 2, 1])
         result = get_dummies(data)
         expected = DataFrame([[1, 0], [0, 1], [1, 0]], columns=[1, 2], dtype=np.uint8)
@@ -535,6 +877,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_get_dummies_int_df(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         data = DataFrame(
             {
                 "A": [1, 2, 1],
@@ -554,6 +907,19 @@
 
     @pytest.mark.parametrize("ordered", [True, False])
     def test_dataframe_dummies_preserve_categorical_dtype(self, dtype, ordered):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+        ordered :
+            
+
+        Returns
+        -------
+
+        """
         # GH13854
         cat = Categorical(list("xy"), categories=list("xyz"), ordered=ordered)
         result = get_dummies(cat, dtype=dtype)
@@ -568,6 +934,17 @@
 
     @pytest.mark.parametrize("sparse", [True, False])
     def test_get_dummies_dont_sparsify_all_columns(self, sparse):
+        """
+
+        Parameters
+        ----------
+        sparse :
+            
+
+        Returns
+        -------
+
+        """
         # GH18914
         df = DataFrame.from_dict(
             OrderedDict([("GDP", [1, 2]), ("Nation", ["AB", "CD"])])
@@ -578,6 +955,17 @@
         tm.assert_frame_equal(df[["GDP"]], df2)
 
     def test_get_dummies_duplicate_columns(self, df):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+
+        Returns
+        -------
+
+        """
         # GH20839
         df.columns = ["A", "A", "A"]
         result = get_dummies(df).sort_index(axis=1)
@@ -593,6 +981,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_get_dummies_all_sparse(self):
+        """ """
         df = DataFrame({"A": [1, 2]})
         result = get_dummies(df, columns=["A"], sparse=True)
         dtype = SparseDtype("uint8", 0)
@@ -606,6 +995,17 @@
 
     @pytest.mark.parametrize("values", ["baz"])
     def test_get_dummies_with_string_values(self, values):
+        """
+
+        Parameters
+        ----------
+        values :
+            
+
+        Returns
+        -------
+
+        """
         # issue #28383
         df = DataFrame(
             {
