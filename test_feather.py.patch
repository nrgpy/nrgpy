# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/test_feather.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/test_feather.py
@@ -21,7 +21,21 @@
 @filter_sparse
 @pytest.mark.single
 class TestFeather:
+    """ """
     def check_error_on_write(self, df, exc):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        exc :
+            
+
+        Returns
+        -------
+
+        """
         # check that we are raising the exception
         # on writing
 
@@ -30,6 +44,23 @@
                 to_feather(df, path)
 
     def check_round_trip(self, df, expected=None, write_kwargs={}, **read_kwargs):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        expected :
+             (Default value = None)
+        write_kwargs :
+             (Default value = {})
+        **read_kwargs :
+            
+
+        Returns
+        -------
+
+        """
 
         if expected is None:
             expected = df
@@ -41,6 +72,7 @@
             tm.assert_frame_equal(result, expected)
 
     def test_error(self):
+        """ """
 
         for obj in [
             pd.Series([1, 2, 3]),
@@ -52,6 +84,7 @@
             self.check_error_on_write(obj, ValueError)
 
     def test_basic(self):
+        """ """
 
         df = pd.DataFrame(
             {
@@ -91,6 +124,7 @@
         self.check_round_trip(df)
 
     def test_duplicate_columns(self):
+        """ """
 
         # https://github.com/wesm/feather/issues/53
         # not currently able to handle duplicate columns
@@ -98,11 +132,13 @@
         self.check_error_on_write(df, ValueError)
 
     def test_stringify_columns(self):
+        """ """
 
         df = pd.DataFrame(np.arange(12).reshape(4, 3)).copy()
         self.check_error_on_write(df, ValueError)
 
     def test_read_columns(self):
+        """ """
         # GH 24025
         df = pd.DataFrame(
             {
@@ -117,11 +153,13 @@
 
     @td.skip_if_no("pyarrow", min_version="0.17.1")
     def read_columns_different_order(self):
+        """ """
         # GH 33878
         df = pd.DataFrame({"A": [1, 2], "B": ["x", "y"], "C": [True, False]})
         self.check_round_trip(df, columns=["B", "A"])
 
     def test_unsupported_other(self):
+        """ """
 
         # mixed python objects
         df = pd.DataFrame({"a": ["a", 1, 2.0]})
@@ -129,11 +167,13 @@
         self.check_error_on_write(df, Exception)
 
     def test_rw_use_threads(self):
+        """ """
         df = pd.DataFrame({"A": np.arange(100000)})
         self.check_round_trip(df, use_threads=True)
         self.check_round_trip(df, use_threads=False)
 
     def test_write_with_index(self):
+        """ """
 
         df = pd.DataFrame({"A": [1, 2, 3]})
         self.check_round_trip(df)
@@ -161,23 +201,37 @@
         self.check_error_on_write(df, ValueError)
 
     def test_path_pathlib(self):
+        """ """
         df = tm.makeDataFrame().reset_index()
         result = tm.round_trip_pathlib(df.to_feather, pd.read_feather)
         tm.assert_frame_equal(df, result)
 
     def test_path_localpath(self):
+        """ """
         df = tm.makeDataFrame().reset_index()
         result = tm.round_trip_localpath(df.to_feather, pd.read_feather)
         tm.assert_frame_equal(df, result)
 
     @td.skip_if_no("pyarrow", min_version="0.16.1.dev")
     def test_passthrough_keywords(self):
+        """ """
         df = tm.makeDataFrame().reset_index()
         self.check_round_trip(df, write_kwargs=dict(version=1))
 
     @td.skip_if_no("pyarrow")
     @tm.network
     def test_http_path(self, feather_file):
+        """
+
+        Parameters
+        ----------
+        feather_file :
+            
+
+        Returns
+        -------
+
+        """
         # GH 29055
         url = (
             "https://raw.githubusercontent.com/pandas-dev/pandas/master/"
