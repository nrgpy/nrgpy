# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tornado/http1connection.py
+++ b/..//venv/lib/python3.8/site-packages/tornado/http1connection.py
@@ -40,6 +40,7 @@
 
 
 class _QuietException(Exception):
+    """ """
     def __init__(self) -> None:
         pass
 
@@ -48,6 +49,13 @@
     """Used with the ``with`` statement when calling delegate methods to
     log any exceptions with the given logger.  Any exceptions caught are
     converted to _QuietException
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, logger: logging.Logger) -> None:
@@ -69,8 +77,7 @@
 
 
 class HTTP1ConnectionParameters(object):
-    """Parameters for `.HTTP1Connection` and `.HTTP1ServerConnection`.
-    """
+    """ """
 
     def __init__(
         self,
@@ -104,9 +111,16 @@
 
 class HTTP1Connection(httputil.HTTPConnection):
     """Implements the HTTP/1.x protocol.
-
+    
     This class can be on its own for clients, or via `HTTP1ServerConnection`
     for servers.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(
@@ -164,14 +178,23 @@
 
     def read_response(self, delegate: httputil.HTTPMessageDelegate) -> Awaitable[bool]:
         """Read a single HTTP response.
-
+        
         Typical client-mode usage is to write a request using `write_headers`,
         `write`, and `finish`, and then call ``read_response``.
-
+        
         :arg delegate: a `.HTTPMessageDelegate`
-
+        
         Returns a `.Future` that resolves to a bool after the full response has
         been read. The result is true if the stream is still open.
+
+        Parameters
+        ----------
+        delegate: httputil.HTTPMessageDelegate :
+            
+
+        Returns
+        -------
+
         """
         if self.params.decompress:
             delegate = _GzipMessageDelegate(delegate, self.params.chunk_size)
@@ -301,9 +324,16 @@
 
     def _clear_callbacks(self) -> None:
         """Clears the callback attributes.
-
+        
         This allows the request handler to be garbage collected more
         quickly in CPython by breaking up reference cycles.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         self._write_callback = None
         self._write_future = None  # type: Optional[Future[None]]
@@ -313,7 +343,7 @@
 
     def set_close_callback(self, callback: Optional[Callable[[], None]]) -> None:
         """Sets a callback that will be run when the connection is closed.
-
+        
         Note that this callback is slightly different from
         `.HTTPMessageDelegate.on_connection_close`: The
         `.HTTPMessageDelegate` method is called when the connection is
@@ -322,10 +352,22 @@
         side this callback is used if the client closes the connection
         after sending its request but before receiving all the
         response.
+
+        Parameters
+        ----------
+        callback: Optional[Callable[[] :
+            
+        None]] :
+            
+
+        Returns
+        -------
+
         """
         self._close_callback = callback
 
     def _on_connection_close(self) -> None:
+        """ """
         # Note that this callback is only registered on the IOStream
         # when we have finished reading the request and are waiting for
         # the application to produce its response.
@@ -338,6 +380,7 @@
         self._clear_callbacks()
 
     def close(self) -> None:
+        """ """
         if self.stream is not None:
             self.stream.close()
         self._clear_callbacks()
@@ -346,11 +389,18 @@
 
     def detach(self) -> iostream.IOStream:
         """Take control of the underlying stream.
-
+        
         Returns the underlying `.IOStream` object and stops all further
         HTTP processing.  May only be called during
         `.HTTPMessageDelegate.headers_received`.  Intended for implementing
         protocols like websockets that tunnel over an HTTP handshake.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         self._clear_callbacks()
         stream = self.stream
@@ -361,15 +411,33 @@
 
     def set_body_timeout(self, timeout: float) -> None:
         """Sets the body timeout for a single request.
-
+        
         Overrides the value from `.HTTP1ConnectionParameters`.
+
+        Parameters
+        ----------
+        timeout: float :
+            
+
+        Returns
+        -------
+
         """
         self._body_timeout = timeout
 
     def set_max_body_size(self, max_body_size: int) -> None:
         """Sets the body size limit for a single request.
-
+        
         Overrides the value from `.HTTP1ConnectionParameters`.
+
+        Parameters
+        ----------
+        max_body_size: int :
+            
+
+        Returns
+        -------
+
         """
         self._max_body_size = max_body_size
 
@@ -379,7 +447,23 @@
         headers: httputil.HTTPHeaders,
         chunk: Optional[bytes] = None,
     ) -> "Future[None]":
-        """Implements `.HTTPConnection.write_headers`."""
+        """Implements `.HTTPConnection.write_headers`.
+
+        Parameters
+        ----------
+        start_line: Union[httputil.RequestStartLine :
+            
+        httputil.ResponseStartLine] :
+            
+        headers: httputil.HTTPHeaders :
+            
+        chunk: Optional[bytes] :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         lines = []
         if self.is_client:
             assert isinstance(start_line, httputil.RequestStartLine)
@@ -467,6 +551,17 @@
         return future
 
     def _format_chunk(self, chunk: bytes) -> bytes:
+        """
+
+        Parameters
+        ----------
+        chunk: bytes :
+            
+
+        Returns
+        -------
+
+        """
         if self._expected_content_remaining is not None:
             self._expected_content_remaining -= len(chunk)
             if self._expected_content_remaining < 0:
@@ -484,10 +579,19 @@
 
     def write(self, chunk: bytes) -> "Future[None]":
         """Implements `.HTTPConnection.write`.
-
+        
         For backwards compatibility it is allowed but deprecated to
         skip `write_headers` and instead call `write()` with a
         pre-encoded header block.
+
+        Parameters
+        ----------
+        chunk: bytes :
+            
+
+        Returns
+        -------
+
         """
         future = None
         if self.stream.closed():
@@ -533,6 +637,17 @@
             future_add_done_callback(self._pending_write, self._finish_request)
 
     def _on_write_complete(self, future: "Future[None]") -> None:
+        """
+
+        Parameters
+        ----------
+        future: "Future[None]" :
+            
+
+        Returns
+        -------
+
+        """
         exc = future.exception()
         if exc is not None and not isinstance(exc, iostream.StreamClosedError):
             future.result()
@@ -548,6 +663,19 @@
     def _can_keep_alive(
         self, start_line: httputil.RequestStartLine, headers: httputil.HTTPHeaders
     ) -> bool:
+        """
+
+        Parameters
+        ----------
+        start_line: httputil.RequestStartLine :
+            
+        headers: httputil.HTTPHeaders :
+            
+
+        Returns
+        -------
+
+        """
         if self.params.no_keep_alive:
             return False
         connection_header = headers.get("Connection")
@@ -566,6 +694,17 @@
         return False
 
     def _finish_request(self, future: "Optional[Future[None]]") -> None:
+        """
+
+        Parameters
+        ----------
+        future: "Optional[Future[None]]" :
+            
+
+        Returns
+        -------
+
+        """
         self._clear_callbacks()
         if not self.is_client and self._disconnect_on_finish:
             self.close()
@@ -577,6 +716,17 @@
             future_set_result_unless_cancelled(self._finish_future, None)
 
     def _parse_headers(self, data: bytes) -> Tuple[str, httputil.HTTPHeaders]:
+        """
+
+        Parameters
+        ----------
+        data: bytes :
+            
+
+        Returns
+        -------
+
+        """
         # The lstrip removes newlines that some implementations sometimes
         # insert between messages of a reused connection.  Per RFC 7230,
         # we SHOULD ignore at least one empty line before the request.
@@ -594,6 +744,21 @@
         headers: httputil.HTTPHeaders,
         delegate: httputil.HTTPMessageDelegate,
     ) -> Optional[Awaitable[None]]:
+        """
+
+        Parameters
+        ----------
+        code: int :
+            
+        headers: httputil.HTTPHeaders :
+            
+        delegate: httputil.HTTPMessageDelegate :
+            
+
+        Returns
+        -------
+
+        """
         if "Content-Length" in headers:
             if "Transfer-Encoding" in headers:
                 # Response cannot contain both Content-Length and
@@ -703,8 +868,7 @@
 
 
 class _GzipMessageDelegate(httputil.HTTPMessageDelegate):
-    """Wraps an `HTTPMessageDelegate` to decode ``Content-Encoding: gzip``.
-    """
+    """Wraps an `HTTPMessageDelegate` to decode ``Content-Encoding: gzip``."""
 
     def __init__(self, delegate: httputil.HTTPMessageDelegate, chunk_size: int) -> None:
         self._delegate = delegate
@@ -716,6 +880,21 @@
         start_line: Union[httputil.RequestStartLine, httputil.ResponseStartLine],
         headers: httputil.HTTPHeaders,
     ) -> Optional[Awaitable[None]]:
+        """
+
+        Parameters
+        ----------
+        start_line: Union[httputil.RequestStartLine :
+            
+        httputil.ResponseStartLine] :
+            
+        headers: httputil.HTTPHeaders :
+            
+
+        Returns
+        -------
+
+        """
         if headers.get("Content-Encoding") == "gzip":
             self._decompressor = GzipDecompressor()
             # Downstream delegates will only see uncompressed data,
@@ -747,6 +926,7 @@
                 await ret
 
     def finish(self) -> None:
+        """ """
         if self._decompressor is not None:
             tail = self._decompressor.flush()
             if tail:
@@ -762,6 +942,7 @@
         return self._delegate.finish()
 
     def on_connection_close(self) -> None:
+        """ """
         return self._delegate.on_connection_close()
 
 
@@ -803,8 +984,17 @@
 
     def start_serving(self, delegate: httputil.HTTPServerConnectionDelegate) -> None:
         """Starts serving requests on this connection.
-
+        
         :arg delegate: a `.HTTPServerConnectionDelegate`
+
+        Parameters
+        ----------
+        delegate: httputil.HTTPServerConnectionDelegate :
+            
+
+        Returns
+        -------
+
         """
         assert isinstance(delegate, httputil.HTTPServerConnectionDelegate)
         fut = gen.convert_yielded(self._server_request_loop(delegate))
