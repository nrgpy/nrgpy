# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/tests/test_events.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/tests/test_events.py
@@ -8,21 +8,36 @@
 
 @events._define_event
 def ping_received():
+    """ """
     pass
 
 
 @events._define_event
 def event_with_argument(argument):
+    """
+
+    Parameters
+    ----------
+    argument :
+        
+
+    Returns
+    -------
+
+    """
     pass
 
 
 class CallbackTests(unittest.TestCase):
+    """ """
     def setUp(self):
+        """ """
         self.em = events.EventManager(get_ipython(),
                                       {'ping_received': ping_received,
                                        'event_with_argument': event_with_argument})
 
     def test_register_unregister(self):
+        """ """
         cb = Mock()
 
         self.em.register('ping_received', cb)        
@@ -34,10 +49,13 @@
         self.assertEqual(cb.call_count, 1)
 
     def test_bare_function_missed_unregister(self):
+        """ """
         def cb1():
+            """ """
             ...
 
         def cb2():
+            """ """
             ...
 
         self.em.register('ping_received', cb1)
@@ -45,30 +63,66 @@
         self.em.unregister('ping_received', cb1)
 
     def test_cb_error(self):
+        """ """
         cb = Mock(side_effect=ValueError)
         self.em.register('ping_received', cb)
         with tt.AssertPrints("Error in callback"):
             self.em.trigger('ping_received')
 
     def test_cb_keyboard_interrupt(self):
+        """ """
         cb = Mock(side_effect=KeyboardInterrupt)
         self.em.register('ping_received', cb)
         with tt.AssertPrints("Error in callback"):
             self.em.trigger('ping_received')
 
     def test_unregister_during_callback(self):
+        """ """
         invoked = [False] * 3
         
         def func1(*_):
+            """
+
+            Parameters
+            ----------
+            *_ :
+                
+
+            Returns
+            -------
+
+            """
             invoked[0] = True
             self.em.unregister('ping_received', func1)
             self.em.register('ping_received', func3)
 
         def func2(*_):
+            """
+
+            Parameters
+            ----------
+            *_ :
+                
+
+            Returns
+            -------
+
+            """
             invoked[1] = True
             self.em.unregister('ping_received', func2)
 
         def func3(*_):
+            """
+
+            Parameters
+            ----------
+            *_ :
+                
+
+            Returns
+            -------
+
+            """
             invoked[2] = True
             
         self.em.register('ping_received', func1)
@@ -79,8 +133,10 @@
         self.assertEqual([func3], self.em.callbacks['ping_received'])
     
     def test_ignore_event_arguments_if_no_argument_required(self):
+        """ """
         call_count = [0]
         def event_with_no_argument():
+            """ """
             call_count[0] += 1
 
         self.em.register('event_with_argument', event_with_no_argument)
