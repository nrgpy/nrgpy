# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/ma/tests/test_mrecords.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/ma/tests/test_mrecords.py
@@ -25,6 +25,7 @@
 
 
 class TestMRecords:
+    """ """
 
     ilist = [1, 2, 3, 4, 5]
     flist = [1.1, 2.2, 3.3, 4.4, 5.5]
@@ -34,6 +35,7 @@
     base = ma.array(list(zip(ilist, flist, slist)), mask=mask, dtype=ddtype)
 
     def test_byview(self):
+        """ """
         # Test creation by view
         base = self.base
         mbase = base.view(mrecarray)
@@ -46,6 +48,7 @@
         assert_equal_records(mbase.view(mrecarray), mbase)
 
     def test_get(self):
+        """ """
         # Tests fields retrieval
         base = self.base.copy()
         mbase = base.view(mrecarray)
@@ -86,6 +89,7 @@
             assert_equal(getattr(mbase_sl, field), base[:2][field])
 
     def test_set_fields(self):
+        """ """
         # Tests setting fields.
         base = self.base.copy()
         mbase = base.view(mrecarray)
@@ -141,6 +145,7 @@
         assert_equal(rdata.num.mask, [1, 0, 0])
 
     def test_set_fields_mask(self):
+        """ """
         # Tests setting the mask of a field.
         base = self.base.copy()
         # This one has already a mask....
@@ -156,6 +161,7 @@
         assert_equal(mbase.a._mask, [0, 0, 0, 1, 0])
 
     def test_set_mask(self):
+        """ """
         base = self.base.copy()
         mbase = base.view(mrecarray)
         # Set the mask to True .......................
@@ -172,6 +178,7 @@
                      np.array([(0, 0, 0)]*5, dtype=bool))
 
     def test_set_mask_fromarray(self):
+        """ """
         base = self.base.copy()
         mbase = base.view(mrecarray)
         # Sets the mask w/ an array
@@ -186,6 +193,7 @@
         assert_equal(mbase.c.mask, [0, 0, 0, 0, 1])
 
     def test_set_mask_fromfields(self):
+        """ """
         mbase = self.base.copy().view(mrecarray)
 
         nmask = np.array(
@@ -203,6 +211,7 @@
         assert_equal(mbase.c.mask, [0, 0, 1, 1, 0])
 
     def test_set_elements(self):
+        """ """
         base = self.base.copy()
         # Set an element to mask .....................
         mbase = base.view(mrecarray).copy()
@@ -235,6 +244,7 @@
         assert_equal(mbase.b._mask, [1, 1, 0, 0, 1])
 
     def test_setslices_hardmask(self):
+        """ """
         # Tests setting slices w/ hardmask.
         base = self.base.copy()
         mbase = base.view(mrecarray)
@@ -264,6 +274,7 @@
             raise TypeError("Should have expected a readable buffer object!")
 
     def test_hardmask(self):
+        """ """
         # Test hardmask
         base = self.base.copy()
         mbase = base.view(mrecarray)
@@ -281,6 +292,7 @@
         assert_equal(mbase['a']._mask, mbase['b']._mask)
 
     def test_pickling(self):
+        """ """
         # Test pickling
         base = self.base.copy()
         mrec = base.view(mrecarray)
@@ -293,6 +305,7 @@
             assert_equal_records(mrec_._mask, mrec._mask)
 
     def test_filled(self):
+        """ """
         # Test filling the array
         _a = ma.array([1, 2, 3], mask=[0, 0, 1], dtype=int)
         _b = ma.array([1.1, 2.2, 3.3], mask=[0, 0, 1], dtype=float)
@@ -308,6 +321,7 @@
                                                dtype='|S8'))
 
     def test_tolist(self):
+        """ """
         # Test tolist.
         _a = ma.array([1, 2, 3], mask=[0, 0, 1], dtype=int)
         _b = ma.array([1.1, 2.2, 3.3], mask=[0, 0, 1], dtype=float)
@@ -321,12 +335,14 @@
                       (None, None, b'three')])
 
     def test_withnames(self):
+        """ """
         # Test the creation w/ format and names
         x = mrecarray(1, formats=float, names='base')
         x[0]['base'] = 10
         assert_equal(x['base'][0], 10)
 
     def test_exotic_formats(self):
+        """ """
         # Test that 'exotic' formats are processed properly
         easy = mrecarray(1, dtype=[('i', int), ('s', '|S8'), ('f', float)])
         easy[0] = masked
@@ -347,8 +363,10 @@
 
 
 class TestView:
+    """ """
 
     def setup(self):
+        """ """
         (a, b) = (np.arange(10), np.random.rand(10))
         ndtype = [('a', float), ('b', float)]
         arr = np.array(list(zip(a, b)), dtype=ndtype)
@@ -358,6 +376,7 @@
         self.data = (mrec, a, b, arr)
 
     def test_view_by_itself(self):
+        """ """
         (mrec, a, b, arr) = self.data
         test = mrec.view()
         assert_(isinstance(test, MaskedRecords))
@@ -365,6 +384,7 @@
         assert_equal_records(test._mask, mrec._mask)
 
     def test_view_simple_dtype(self):
+        """ """
         (mrec, a, b, arr) = self.data
         ntype = (float, 2)
         test = mrec.view(ntype)
@@ -373,6 +393,7 @@
         assert_(test[3, 1] is ma.masked)
 
     def test_view_flexible_type(self):
+        """ """
         (mrec, a, b, arr) = self.data
         alttype = [('A', float), ('B', float)]
         test = mrec.view(alttype)
@@ -385,6 +406,7 @@
 
 ##############################################################################
 class TestMRecordsImport:
+    """ """
 
     _a = ma.array([1, 2, 3], mask=[0, 0, 1], dtype=int)
     _b = ma.array([1.1, 2.2, 3.3], mask=[0, 0, 1], dtype=float)
@@ -398,6 +420,7 @@
     data = (mrec, nrec, ddtype)
 
     def test_fromarrays(self):
+        """ """
         _a = ma.array([1, 2, 3], mask=[0, 0, 1], dtype=int)
         _b = ma.array([1.1, 2.2, 3.3], mask=[0, 0, 1], dtype=float)
         _c = ma.array(['one', 'two', 'three'], mask=[0, 0, 1], dtype='|S8')
@@ -409,6 +432,7 @@
         assert_equal_records(fromarrays(_x, dtype=mrec.dtype), mrec[0])
 
     def test_fromrecords(self):
+        """ """
         # Test construction from records.
         (mrec, nrec, ddtype) = self.data
         #......
@@ -435,6 +459,7 @@
         assert_equal_records(_mrec._mask, mrec._mask)
 
     def test_fromrecords_wmask(self):
+        """ """
         # Tests construction from records w/ mask.
         (mrec, nrec, ddtype) = self.data
 
@@ -456,6 +481,7 @@
         assert_equal(_mrec._mask.tolist(), mrec._mask.tolist())
 
     def test_fromtextfile(self):
+        """ """
         # Tests reading from a text file.
         fcontent = (
 """#
@@ -475,6 +501,7 @@
         assert_equal(mrectxt.C, [1, 2, 3.e+5, -1e-10])
 
     def test_addfield(self):
+        """ """
         # Tests addfield
         (mrec, nrec, ddtype) = self.data
         (d, m) = ([100, 200, 300], [1, 0, 0])
@@ -484,6 +511,7 @@
 
 
 def test_record_array_with_object_field():
+    """ """
     # Trac #1839
     y = ma.masked_array(
         [(1, '2'), (3, '4')],
