# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jupyter_client/tests/test_adapter.py
+++ b/..//venv/lib/python3.8/site-packages/jupyter_client/tests/test_adapter.py
@@ -12,6 +12,7 @@
 
 
 def test_default_version():
+    """ """
     s = Session()
     msg = s.msg("msg_type")
     msg['header'].pop('version')
@@ -20,35 +21,76 @@
     assert adapted['header']['version'] == V4toV5.version
 
 def test_code_to_line_no_code():
+    """ """
     line, pos = code_to_line("", 0)
     assert line == ""
     assert pos == 0
 
 class AdapterTest(TestCase):
+    """ """
 
     def setUp(self):
+        """ """
         self.session = Session()
 
     def adapt(self, msg, version=None):
+        """
+
+        Parameters
+        ----------
+        msg :
+            
+        version :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         original = copy.deepcopy(msg)
         adapted = adapt(msg, version or self.to_version)
         return original, adapted
 
     def check_header(self, msg):
+        """
+
+        Parameters
+        ----------
+        msg :
+            
+
+        Returns
+        -------
+
+        """
         pass
 
 
 class V4toV5TestCase(AdapterTest):
+    """ """
     from_version = 4
     to_version = 5
 
     def msg(self, msg_type, content):
-        """Create a v4 msg (same as v5, minus version header)"""
+        """Create a v4 msg (same as v5, minus version header)
+
+        Parameters
+        ----------
+        msg_type :
+            
+        content :
+            
+
+        Returns
+        -------
+
+        """
         msg = self.session.msg(msg_type, content)
         msg['header'].pop('version')
         return msg
 
     def test_same_version(self):
+        """ """
         msg = self.msg("execute_result",
             content={'status' : 'ok'}
         )
@@ -57,6 +99,7 @@
         self.assertEqual(original, adapted)
 
     def test_no_adapt(self):
+        """ """
         msg = self.msg("input_reply", {'value' : 'some text'})
         v4, v5 = self.adapt(msg)
         self.assertEqual(v5['header']['version'], V4toV5.version)
@@ -64,6 +107,7 @@
         self.assertEqual(v4, v5)
 
     def test_rename_type(self):
+        """ """
         for v5_type, v4_type in [
                 ('execute_result', 'pyout'),
                 ('execute_input', 'pyin'),
@@ -76,6 +120,7 @@
             self.assertEqual(v4['content'], v5['content'])
 
     def test_execute_request(self):
+        """ """
         msg = self.msg("execute_request", {
             'code' : 'a=5',
             'silent' : False,
@@ -91,6 +136,7 @@
         self.assertEqual(v5c['code'], v4c['code'])
 
     def test_execute_reply(self):
+        """ """
         msg = self.msg("execute_reply", {
             'status': 'ok',
             'execution_count': 7,
@@ -107,6 +153,7 @@
                                          ])
 
     def test_complete_request(self):
+        """ """
         msg = self.msg("complete_request", {
             'text' : 'a.is',
             'line' : 'foo = a.is',
@@ -122,6 +169,7 @@
         self.assertEqual(v5c['code'], v4c['line'])
 
     def test_complete_reply(self):
+        """ """
         msg = self.msg("complete_reply", {
             'matched_text' : 'a.is',
             'matches' : ['a.isalnum',
@@ -140,6 +188,7 @@
         self.assertEqual(v5c['cursor_end'], None)
 
     def test_object_info_request(self):
+        """ """
         msg = self.msg("object_info_request", {
             'oname' : 'foo',
             'detail_level' : 1,
@@ -153,6 +202,7 @@
         self.assertEqual(v5c['detail_level'], v4c['detail_level'])
 
     def test_object_info_reply(self):
+        """ """
         msg = self.msg("object_info_reply", {
             'name' : 'foo',
             'found' : True,
@@ -169,6 +219,7 @@
         self.assertEqual(text, '\n'.join([v4c['definition'], v4c['docstring']]))
 
     def test_object_info_reply_not_found(self):
+        """ """
         msg = self.msg("object_info_reply", {
             'name' : 'foo',
             'found' : False,
@@ -185,6 +236,7 @@
         })
 
     def test_kernel_info_reply(self):
+        """ """
         msg = self.msg("kernel_info_reply", {
             'language': 'python',
             'language_version': [2,8,0],
@@ -207,6 +259,7 @@
     # iopub channel
 
     def test_display_data(self):
+        """ """
         jsondata = dict(a=5)
         msg = self.msg("display_data", {
             'data' : {
@@ -225,6 +278,7 @@
     # stdin channel
 
     def test_input_request(self):
+        """ """
         msg = self.msg('input_request', {'prompt': "$>"})
         v4, v5 = self.adapt(msg)
         self.assertEqual(v5['content']['prompt'], v4['content']['prompt'])
@@ -232,13 +286,28 @@
 
 
 class V5toV4TestCase(AdapterTest):
+    """ """
     from_version = 5
     to_version = 4
 
     def msg(self, msg_type, content):
+        """
+
+        Parameters
+        ----------
+        msg_type :
+            
+        content :
+            
+
+        Returns
+        -------
+
+        """
         return self.session.msg(msg_type, content)
 
     def test_same_version(self):
+        """ """
         msg = self.msg("execute_result",
             content={'status' : 'ok'}
         )
@@ -247,6 +316,7 @@
         self.assertEqual(original, adapted)
 
     def test_no_adapt(self):
+        """ """
         msg = self.msg("input_reply", {'value' : 'some text'})
         v5, v4 = self.adapt(msg)
         self.assertNotIn('version', v4['header'])
@@ -254,6 +324,7 @@
         self.assertEqual(v4, v5)
 
     def test_rename_type(self):
+        """ """
         for v5_type, v4_type in [
                 ('execute_result', 'pyout'),
                 ('execute_input', 'pyin'),
@@ -266,6 +337,7 @@
             self.assertEqual(v4['content'], v5['content'])
 
     def test_execute_request(self):
+        """ """
         msg = self.msg("execute_request", {
             'code' : 'a=5',
             'silent' : False,
@@ -279,6 +351,7 @@
         self.assertEqual(v5c['code'], v4c['code'])
 
     def test_complete_request(self):
+        """ """
         msg = self.msg("complete_request", {
             'code' : 'def foo():\n'
                      '    a.is\n'
@@ -295,6 +368,7 @@
         self.assertEqual(v4c['block'], None)
 
     def test_complete_reply(self):
+        """ """
         msg = self.msg("complete_reply", {
             'cursor_start' : 10,
             'cursor_end' : 14,
@@ -312,6 +386,7 @@
         self.assertEqual(v4c['matches'], v5c['matches'])
 
     def test_inspect_request(self):
+        """ """
         msg = self.msg("inspect_request", {
             'code' : 'def foo():\n'
                      '    apple\n'
@@ -327,6 +402,7 @@
         self.assertEqual(v5c['detail_level'], v4c['detail_level'])
 
     def test_inspect_request_token(self):
+        """ """
         line = 'something(range(10), kwarg=smth) ; xxx.xxx.xxx( firstarg, rand(234,23), kwarg1=2,'
         msg = self.msg("inspect_request", {
             'code' : line,
@@ -341,6 +417,7 @@
         self.assertEqual(v5c['detail_level'], v4c['detail_level'])
 
     def test_inspect_reply(self):
+        """ """
         msg = self.msg("inspect_reply", {
             'name' : 'foo',
             'found' : True,
@@ -355,6 +432,7 @@
         self.assertEqual(v4c['found'], False)
 
     def test_kernel_info_reply(self):
+        """ """
         msg = self.msg("kernel_info_reply", {
             'protocol_version': '5.0',
             'implementation': 'ipython',
@@ -380,6 +458,7 @@
     # iopub channel
 
     def test_display_data(self):
+        """ """
         jsondata = dict(a=5)
         msg = self.msg("display_data", {
             'data' : {
@@ -398,6 +477,7 @@
     # stdin channel
 
     def test_input_request(self):
+        """ """
         msg = self.msg('input_request', {'prompt': "$>", 'password' : True})
         v5, v4 = self.adapt(msg)
         self.assertEqual(v5['content']['prompt'], v4['content']['prompt'])
