# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/multi/test_partial_indexing.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/multi/test_partial_indexing.py
@@ -6,6 +6,7 @@
 
 @pytest.fixture
 def df():
+    """ """
     #                        c1
     # 2016-01-01 00:00:00 a   0
     #                     b   1
@@ -30,6 +31,17 @@
 
 
 def test_partial_string_matching_single_index(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
     # partial string matching on a single index
     for df_swap in [df.swaplevel(), df.swaplevel(0), df.swaplevel(0, 1)]:
         df_swap = df_swap.sort_index()
@@ -41,6 +53,17 @@
 
 
 def test_partial_string_timestamp_multiindex(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
     # GH10331
     df_swap = df.swaplevel(0, 1).sort_index()
     SLC = IndexSlice
@@ -86,6 +109,17 @@
 
 
 def test_partial_string_timestamp_multiindex_str_key_raises(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
     # Even though this syntax works on a single index, this is somewhat
     # ambiguous and we don't want to extend this behavior forward to work
     # in multi-indexes. This would amount to selecting a scalar from a
@@ -95,6 +129,17 @@
 
 
 def test_partial_string_timestamp_multiindex_daily_resolution(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
     # GH12685 (partial string with daily resolution or below)
     result = df.loc[IndexSlice["2013-03":"2013-03", :], :]
     expected = df.iloc[118:180]
