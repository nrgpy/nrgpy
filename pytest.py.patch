# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jedi/plugins/pytest.py
+++ b/..//venv/lib/python3.8/site-packages/jedi/plugins/pytest.py
@@ -15,7 +15,31 @@
 
 
 def execute(callback):
+    """
+
+    Parameters
+    ----------
+    callback :
+        
+
+    Returns
+    -------
+
+    """
     def wrapper(value, arguments):
+        """
+
+        Parameters
+        ----------
+        value :
+            
+        arguments :
+            
+
+        Returns
+        -------
+
+        """
         # This might not be necessary anymore in pytest 4/5, definitely needed
         # for pytest 3.
         if value.py__name__() == 'fixture' \
@@ -27,7 +51,29 @@
 
 
 def infer_anonymous_param(func):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
+    """
     def get_returns(value):
+        """
+
+        Parameters
+        ----------
+        value :
+            
+
+        Returns
+        -------
+
+        """
         if value.tree_node.annotation is not None:
             return value.execute_with_values()
 
@@ -41,6 +87,17 @@
             return function_context.get_return_values()
 
     def wrapper(param_name):
+        """
+
+        Parameters
+        ----------
+        param_name :
+            
+
+        Returns
+        -------
+
+        """
         is_pytest_param, param_name_is_function_name = \
             _is_a_pytest_param_and_inherited(param_name)
         if is_pytest_param:
@@ -63,7 +120,29 @@
 
 
 def goto_anonymous_param(func):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
+    """
     def wrapper(param_name):
+        """
+
+        Parameters
+        ----------
+        param_name :
+            
+
+        Returns
+        -------
+
+        """
         is_pytest_param, param_name_is_function_name = \
             _is_a_pytest_param_and_inherited(param_name)
         if is_pytest_param:
@@ -79,7 +158,33 @@
 
 
 def complete_param_names(func):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
+    """
     def wrapper(context, func_name, decorator_nodes):
+        """
+
+        Parameters
+        ----------
+        context :
+            
+        func_name :
+            
+        decorator_nodes :
+            
+
+        Returns
+        -------
+
+        """
         module_context = context.get_root_context()
         if _is_pytest_func(func_name, decorator_nodes):
             names = []
@@ -92,6 +197,21 @@
 
 
 def _goto_pytest_fixture(module_context, name, skip_own_module):
+    """
+
+    Parameters
+    ----------
+    module_context :
+        
+    name :
+        
+    skip_own_module :
+        
+
+    Returns
+    -------
+
+    """
     for module_context in _iter_pytest_modules(module_context, skip_own_module=skip_own_module):
         names = FixtureFilter(module_context).get(name)
         if names:
@@ -99,11 +219,19 @@
 
 
 def _is_a_pytest_param_and_inherited(param_name):
-    """
-    Pytest params are either in a `test_*` function or have a pytest fixture
+    """Pytest params are either in a `test_*` function or have a pytest fixture
     with the decorator @pytest.fixture.
-
+    
     This is a heuristic and will work in most cases.
+
+    Parameters
+    ----------
+    param_name :
+        
+
+    Returns
+    -------
+
     """
     funcdef = search_ancestor(param_name.tree_name, 'funcdef')
     if funcdef is None:  # A lambda
@@ -114,12 +242,38 @@
 
 
 def _is_pytest_func(func_name, decorator_nodes):
+    """
+
+    Parameters
+    ----------
+    func_name :
+        
+    decorator_nodes :
+        
+
+    Returns
+    -------
+
+    """
     return func_name.startswith('test') \
         or any('fixture' in n.get_code() for n in decorator_nodes)
 
 
 @inference_state_method_cache()
 def _iter_pytest_modules(module_context, skip_own_module=False):
+    """
+
+    Parameters
+    ----------
+    module_context :
+        
+    skip_own_module :
+         (Default value = False)
+
+    Returns
+    -------
+
+    """
     if not skip_own_module:
         yield module_context
 
@@ -143,7 +297,19 @@
 
 
 class FixtureFilter(ParserTreeFilter):
+    """ """
     def _filter(self, names):
+        """
+
+        Parameters
+        ----------
+        names :
+            
+
+        Returns
+        -------
+
+        """
         for name in super(FixtureFilter, self)._filter(names):
             funcdef = name.parent
             if funcdef.type == 'funcdef':
@@ -153,6 +319,17 @@
                     yield name
 
     def _is_fixture(self, decorated):
+        """
+
+        Parameters
+        ----------
+        decorated :
+            
+
+        Returns
+        -------
+
+        """
         for decorator in decorated.children:
             dotted_name = decorator.children[1]
             # A heuristic, this makes it faster.
