# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/tslibs/test_liboffsets.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/tslibs/test_liboffsets.py
@@ -14,6 +14,17 @@
 
 @pytest.fixture(params=["start", "end", "business_start", "business_end"])
 def day_opt(request):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     return request.param
 
 
@@ -25,6 +36,21 @@
     ],
 )
 def test_get_last_bday(dt, exp_week_day, exp_last_day):
+    """
+
+    Parameters
+    ----------
+    dt :
+        
+    exp_week_day :
+        
+    exp_last_day :
+        
+
+    Returns
+    -------
+
+    """
     assert dt.weekday() == exp_week_day
     assert get_lastbday(dt.year, dt.month) == exp_last_day
 
@@ -37,6 +63,21 @@
     ],
 )
 def test_get_first_bday(dt, exp_week_day, exp_first_day):
+    """
+
+    Parameters
+    ----------
+    dt :
+        
+    exp_week_day :
+        
+    exp_first_day :
+        
+
+    Returns
+    -------
+
+    """
     assert dt.weekday() == exp_week_day
     assert get_firstbday(dt.year, dt.month) == exp_first_day
 
@@ -53,6 +94,21 @@
     ],
 )
 def test_shift_month_dt(months, day_opt, expected):
+    """
+
+    Parameters
+    ----------
+    months :
+        
+    day_opt :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     dt = datetime(2017, 11, 30)
     assert liboffsets.shift_month(dt, months, day_opt=day_opt) == expected
 
@@ -67,11 +123,27 @@
     ],
 )
 def test_shift_month_ts(months, day_opt, expected):
+    """
+
+    Parameters
+    ----------
+    months :
+        
+    day_opt :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     ts = Timestamp("1929-05-05")
     assert liboffsets.shift_month(ts, months, day_opt=day_opt) == expected
 
 
 def test_shift_month_error():
+    """ """
     dt = datetime(2017, 11, 15)
     day_opt = "this should raise"
 
@@ -90,6 +162,21 @@
 )
 @pytest.mark.parametrize("n", [2, -7, 0])
 def test_roll_qtrday_year(other, expected, n):
+    """
+
+    Parameters
+    ----------
+    other :
+        
+    expected :
+        
+    n :
+        
+
+    Returns
+    -------
+
+    """
     month = 3
     day_opt = "start"  # `other` will be compared to March 1.
 
@@ -107,6 +194,21 @@
 )
 @pytest.mark.parametrize("n", [5, -7, 0])
 def test_roll_qtrday_year2(other, expected, n):
+    """
+
+    Parameters
+    ----------
+    other :
+        
+    expected :
+        
+    n :
+        
+
+    Returns
+    -------
+
+    """
     month = 6
     day_opt = "end"  # `other` will be compared to June 30.
 
@@ -114,6 +216,7 @@
 
 
 def test_get_day_of_month_error():
+    """ """
     # get_day_of_month is not directly exposed.
     # We test it via roll_qtrday.
     dt = datetime(2017, 11, 15)
@@ -130,6 +233,21 @@
 )
 @pytest.mark.parametrize("n", [4, -3])
 def test_roll_qtr_day_not_mod_unequal(day_opt, month, n):
+    """
+
+    Parameters
+    ----------
+    day_opt :
+        
+    month :
+        
+    n :
+        
+
+    Returns
+    -------
+
+    """
     expected = {3: {-3: -2, 4: 4}, 5: {-3: -3, 4: 3}}
 
     other = Timestamp(2072, 10, 1, 6, 17, 18)  # Saturday.
@@ -157,6 +275,25 @@
 )
 @pytest.mark.parametrize("n", [2, -1])
 def test_roll_qtr_day_mod_equal(other, month, exp_dict, n, day_opt):
+    """
+
+    Parameters
+    ----------
+    other :
+        
+    month :
+        
+    exp_dict :
+        
+    n :
+        
+    day_opt :
+        
+
+    Returns
+    -------
+
+    """
     # All cases have (other.month % 3) == (month % 3).
     expected = exp_dict.get(n, {}).get(day_opt, n)
     assert roll_qtrday(other, n, month, day_opt, modby=3) == expected
@@ -167,4 +304,19 @@
 )
 @pytest.mark.parametrize("compare", [29, 1, 31])
 def test_roll_convention(n, expected, compare):
+    """
+
+    Parameters
+    ----------
+    n :
+        
+    expected :
+        
+    compare :
+        
+
+    Returns
+    -------
+
+    """
     assert liboffsets.roll_convention(29, n, compare) == expected[compare]
