# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/parser/test_textreader.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/parser/test_textreader.py
@@ -18,8 +18,20 @@
 
 
 class TestTextReader:
+    """ """
     @pytest.fixture(autouse=True)
     def setup_method(self, datapath):
+        """
+
+        Parameters
+        ----------
+        datapath :
+            
+
+        Returns
+        -------
+
+        """
         self.dirpath = datapath("io", "parser", "data")
         csv1_dirpath = datapath("io", "data", "csv")
         self.csv1 = os.path.join(csv1_dirpath, "test1.csv")
@@ -27,20 +39,24 @@
         self.xls1 = os.path.join(self.dirpath, "test.xls")
 
     def test_file_handle(self):
+        """ """
         with open(self.csv1, "rb") as f:
             reader = TextReader(f)
             reader.read()
 
     def test_string_filename(self):
+        """ """
         reader = TextReader(self.csv1, header=None)
         reader.read()
 
     def test_file_handle_mmap(self):
+        """ """
         with open(self.csv1, "rb") as f:
             reader = TextReader(f, memory_map=True, header=None)
             reader.read()
 
     def test_StringIO(self):
+        """ """
         with open(self.csv1, "rb") as f:
             text = f.read()
         src = BytesIO(text)
@@ -48,6 +64,7 @@
         reader.read()
 
     def test_string_factorize(self):
+        """ """
         # should this be optional?
         data = "a\nb\na\nb\na"
         reader = TextReader(StringIO(data), header=None)
@@ -55,6 +72,7 @@
         assert len(set(map(id, result[0]))) == 2
 
     def test_skipinitialspace(self):
+        """ """
         data = "a,   b\na,   b\na,   b\na,   b"
 
         reader = TextReader(StringIO(data), skipinitialspace=True, header=None)
@@ -68,6 +86,7 @@
         )
 
     def test_parse_booleans(self):
+        """ """
         data = "True\nFalse\nTrue\nTrue"
 
         reader = TextReader(StringIO(data), header=None)
@@ -76,6 +95,7 @@
         assert result[0].dtype == np.bool_
 
     def test_delimit_whitespace(self):
+        """ """
         data = 'a  b\na\t\t "b"\n"a"\t \t b'
 
         reader = TextReader(StringIO(data), delim_whitespace=True, header=None)
@@ -89,6 +109,7 @@
         )
 
     def test_embedded_newline(self):
+        """ """
         data = 'a\n"hello\nthere"\nthis'
 
         reader = TextReader(StringIO(data), header=None)
@@ -98,6 +119,7 @@
         tm.assert_numpy_array_equal(result[0], expected)
 
     def test_euro_decimal(self):
+        """ """
         data = "12345,67\n345,678"
 
         reader = TextReader(StringIO(data), delimiter=":", decimal=",", header=None)
@@ -107,6 +129,7 @@
         tm.assert_almost_equal(result[0], expected)
 
     def test_integer_thousands(self):
+        """ """
         data = "123,456\n12,500"
 
         reader = TextReader(StringIO(data), delimiter=":", thousands=",", header=None)
@@ -116,6 +139,7 @@
         tm.assert_almost_equal(result[0], expected)
 
     def test_integer_thousands_alt(self):
+        """ """
         data = "123.456\n12.500"
 
         reader = TextFileReader(
@@ -127,6 +151,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_skip_bad_lines(self, capsys):
+        """
+
+        Parameters
+        ----------
+        capsys :
+            
+
+        Returns
+        -------
+
+        """
         # too many lines, see #2430 for why
         data = "a:b:c\nd:e:f\ng:h:i\nj:k:l:m\nl:m:n\no:p:q:r"
 
@@ -164,6 +199,7 @@
         assert "Skipping line 6" in captured.err
 
     def test_header_not_enough_lines(self):
+        """ """
         data = "skip this\nskip this\na,b,c\n1,2,3\n4,5,6"
 
         reader = TextReader(StringIO(data), delimiter=",", header=2)
@@ -180,6 +216,7 @@
         assert_array_dicts_equal(recs, expected)
 
     def test_escapechar(self):
+        """ """
         data = '\\"hello world"\n\\"hello world"\n\\"hello world"'
 
         reader = TextReader(StringIO(data), delimiter=",", header=None, escapechar="\\")
@@ -188,21 +225,40 @@
         assert_array_dicts_equal(result, expected)
 
     def test_eof_has_eol(self):
+        """ """
         # handling of new line at EOF
         pass
 
     def test_na_substitution(self):
+        """ """
         pass
 
     def test_numpy_string_dtype(self):
-        data = """\
-a,1
-aa,2
-aaa,3
-aaaa,4
-aaaaa,5"""
+        """data = """\
+        a,1
+        aa,2
+        aaa,3
+        aaaa,4
+        aaaaa,5
+
+        Parameters
+        ----------
+
+        Returns
+        -------
 
         def _make_reader(**kwds):
+            """
+
+            Parameters
+            ----------
+            **kwds :
+                
+
+            Returns
+            -------
+
+            """
             return TextReader(StringIO(data), delimiter=",", header=None, **kwds)
 
         reader = _make_reader(dtype="S5,i4")
@@ -222,14 +278,31 @@
         assert result[1].dtype == "S4"
 
     def test_pass_dtype(self):
-        data = """\
-one,two
-1,a
-2,b
-3,c
-4,d"""
+        """data = """\
+        one,two
+        1,a
+        2,b
+        3,c
+        4,d
+
+        Parameters
+        ----------
+
+        Returns
+        -------
 
         def _make_reader(**kwds):
+            """
+
+            Parameters
+            ----------
+            **kwds :
+                
+
+            Returns
+            -------
+
+            """
             return TextReader(StringIO(data), delimiter=",", **kwds)
 
         reader = _make_reader(dtype={"one": "u1", 1: "S1"})
@@ -248,14 +321,31 @@
         assert result[1].dtype == "O"
 
     def test_usecols(self):
-        data = """\
-a,b,c
-1,2,3
-4,5,6
-7,8,9
-10,11,12"""
+        """data = """\
+        a,b,c
+        1,2,3
+        4,5,6
+        7,8,9
+        10,11,12
+
+        Parameters
+        ----------
+
+        Returns
+        -------
 
         def _make_reader(**kwds):
+            """
+
+            Parameters
+            ----------
+            **kwds :
+                
+
+            Returns
+            -------
+
+            """
             return TextReader(StringIO(data), delimiter=",", **kwds)
 
         reader = _make_reader(usecols=(1, 2))
@@ -267,7 +357,21 @@
         assert (result[2] == exp[2]).all()
 
     def test_cr_delimited(self):
+        """ """
         def _test(text, **kwargs):
+            """
+
+            Parameters
+            ----------
+            text :
+                
+            **kwargs :
+                
+
+            Returns
+            -------
+
+            """
             nice_text = text.replace("\r", "\r\n")
             result = TextReader(StringIO(text), **kwargs).read()
             expected = TextReader(StringIO(nice_text), **kwargs).read()
@@ -296,6 +400,7 @@
         _test(data, delim_whitespace=True)
 
     def test_empty_field_eof(self):
+        """ """
         data = "a,b,c\n1,2,3\n4,,"
 
         result = TextReader(StringIO(data), delimiter=",").read()
@@ -338,11 +443,25 @@
             tm.assert_frame_equal(df, c)
 
     def test_empty_csv_input(self):
+        """ """
         # GH14867
         df = read_csv(StringIO(), chunksize=20, header=None, names=["a", "b", "c"])
         assert isinstance(df, TextFileReader)
 
 
 def assert_array_dicts_equal(left, right):
+    """
+
+    Parameters
+    ----------
+    left :
+        
+    right :
+        
+
+    Returns
+    -------
+
+    """
     for k, v in left.items():
         tm.assert_numpy_array_equal(np.asarray(v), np.asarray(right[k]))
