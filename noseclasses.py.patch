# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/testing/_private/noseclasses.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/testing/_private/noseclasses.py
@@ -26,11 +26,23 @@
 # Modified version of the one in the stdlib, that fixes a python bug (doctests
 # not found in extension modules, https://bugs.python.org/issue3158)
 class NumpyDocTestFinder(doctest.DocTestFinder):
+    """ """
 
     def _from_module(self, module, object):
         """
-        Return true if the given object is defined in the given
-        module.
+
+        Parameters
+        ----------
+        module :
+            
+        object :
+            
+
+        Returns
+        -------
+        type
+            module.
+
         """
         if module is None:
             return True
@@ -56,9 +68,29 @@
             raise ValueError("object must be a class or function")
 
     def _find(self, tests, obj, name, module, source_lines, globs, seen):
-        """
-        Find tests for the given object and any contained objects, and
+        """Find tests for the given object and any contained objects, and
         add them to `tests`.
+
+        Parameters
+        ----------
+        tests :
+            
+        obj :
+            
+        name :
+            
+        module :
+            
+        source_lines :
+            
+        globs :
+            
+        seen :
+            
+
+        Returns
+        -------
+
         """
 
         doctest.DocTestFinder._find(self, tests, obj, name, module,
@@ -105,7 +137,23 @@
 # pass, then see if the expected output string contains flags that
 # tell us to ignore the output
 class NumpyOutputChecker(doctest.OutputChecker):
+    """ """
     def check_output(self, want, got, optionflags):
+        """
+
+        Parameters
+        ----------
+        want :
+            
+        got :
+            
+        optionflags :
+            
+
+        Returns
+        -------
+
+        """
         ret = doctest.OutputChecker.check_output(self, want, got,
                                                  optionflags)
         if not ret:
@@ -134,6 +182,7 @@
 # its constructor that blocks non-default arguments from being passed
 # down into doctest.DocTestCase
 class NumpyDocTestCase(npd.DocTestCase):
+    """ """
     def __init__(self, test, optionflags=0, setUp=None, tearDown=None,
                  checker=None, obj=None, result_var='_'):
         self._result_var = result_var
@@ -147,6 +196,7 @@
 print_state = numpy.get_printoptions()
 
 class NumpyDoctest(npd.Doctest):
+    """ """
     name = 'numpydoctest'   # call nosetests with --with-numpydoctest
     score = 1000  # load late, after doctest builtin
 
@@ -164,6 +214,19 @@
 
     # Don't use the standard doctest option handler; hard-code the option values
     def options(self, parser, env=os.environ):
+        """
+
+        Parameters
+        ----------
+        parser :
+            
+        env :
+             (Default value = os.environ)
+
+        Returns
+        -------
+
+        """
         Plugin.options(self, parser, env)
         # Test doctests in 'test' files / directories. Standard plugin default
         # is False
@@ -173,6 +236,19 @@
         self.doctest_result_var = None
 
     def configure(self, options, config):
+        """
+
+        Parameters
+        ----------
+        options :
+            
+        config :
+            
+
+        Returns
+        -------
+
+        """
         # parent method sets enabled flag from command line --with-numpydoctest
         Plugin.configure(self, options, config)
         self.finder = self.test_finder_class()
@@ -186,8 +262,8 @@
                                       if p.name != 'doctest']
 
     def set_test_context(self, test):
-        """ Configure `test` object to set test context
-
+        """Configure `test` object to set test context
+        
         We set the numpy / scipy standard doctest namespace
 
         Parameters
@@ -198,6 +274,7 @@
         Returns
         -------
         None
+            
 
         Notes
         -----
@@ -228,6 +305,17 @@
     # method), set standard docstring options, and install our own test output
     # checker
     def loadTestsFromModule(self, module):
+        """
+
+        Parameters
+        ----------
+        module :
+            
+
+        Returns
+        -------
+
+        """
         if not self.matches(module.__name__):
             npd.log.debug("Doctest doesn't want module %s", module)
             return
@@ -256,10 +344,22 @@
     # Add an afterContext method to nose.plugins.doctests.Doctest in order
     # to restore print options to the original state after each doctest
     def afterContext(self):
+        """ """
         numpy.set_printoptions(**print_state)
 
     # Ignore NumPy-specific build files that shouldn't be searched for tests
     def wantFile(self, file):
+        """
+
+        Parameters
+        ----------
+        file :
+            
+
+        Returns
+        -------
+
+        """
         bn = os.path.basename(file)
         if bn in self.doctest_ignore:
             return False
@@ -267,9 +367,16 @@
 
 
 class Unplugger:
-    """ Nose plugin to remove named plugin late in loading
-
+    """Nose plugin to remove named plugin late in loading
+    
     By default it removes the "doctest" plugin.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'unplugger'
     enabled = True  # always enabled
@@ -279,26 +386,72 @@
         self.to_unplug = to_unplug
 
     def options(self, parser, env):
+        """
+
+        Parameters
+        ----------
+        parser :
+            
+        env :
+            
+
+        Returns
+        -------
+
+        """
         pass
 
     def configure(self, options, config):
+        """
+
+        Parameters
+        ----------
+        options :
+            
+        config :
+            
+
+        Returns
+        -------
+
+        """
         # Pull named plugin out of plugins list
         config.plugins.plugins = [p for p in config.plugins.plugins
                                   if p.name != self.to_unplug]
 
 
 class KnownFailurePlugin(ErrorClassPlugin):
-    '''Plugin that installs a KNOWNFAIL error class for the
+    """Plugin that installs a KNOWNFAIL error class for the
     KnownFailureClass exception.  When KnownFailure is raised,
     the exception will be logged in the knownfail attribute of the
     result, 'K' or 'KNOWNFAIL' (verbose) will be output, and the
-    exception will not be counted as an error or failure.'''
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
     enabled = True
     knownfail = ErrorClass(KnownFailureException,
                            label='KNOWNFAIL',
                            isfailure=False)
 
     def options(self, parser, env=os.environ):
+        """
+
+        Parameters
+        ----------
+        parser :
+            
+        env :
+             (Default value = os.environ)
+
+        Returns
+        -------
+
+        """
         env_opt = 'NOSE_WITHOUT_KNOWNFAIL'
         parser.add_option('--no-knownfail', action='store_true',
                           dest='noKnownFail', default=env.get(env_opt, False),
@@ -306,6 +459,19 @@
                                'exceptions')
 
     def configure(self, options, conf):
+        """
+
+        Parameters
+        ----------
+        options :
+            
+        conf :
+            
+
+        Returns
+        -------
+
+        """
         if not self.can_configure:
             return
         self.conf = conf
@@ -317,15 +483,43 @@
 
 
 class FPUModeCheckPlugin(Plugin):
+    """Plugin that checks the FPU mode before and after each test,
+    raising failures if the test changed the mode.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
-    Plugin that checks the FPU mode before and after each test,
-    raising failures if the test changed the mode.
-    """
 
     def prepareTestCase(self, test):
+        """
+
+        Parameters
+        ----------
+        test :
+            
+
+        Returns
+        -------
+
+        """
         from numpy.core._multiarray_tests import get_fpu_mode
 
         def run(result):
+            """
+
+            Parameters
+            ----------
+            result :
+                
+
+            Returns
+            -------
+
+            """
             old_mode = get_fpu_mode()
             test.test(result)
             new_mode = get_fpu_mode()
@@ -344,13 +538,21 @@
 # Class allows us to save the results of the tests in runTests - see runTests
 # method docstring for details
 class NumpyTestProgram(nose.core.TestProgram):
+    """ """
     def runTests(self):
         """Run Tests. Returns true on success, false on failure, and
         sets self.success to the same value.
-
+        
         Because nose currently discards the test result object, but we need
         to return it to the user, override TestProgram.runTests to retain
         the result
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         if self.testRunner is None:
             self.testRunner = nose.core.TextTestRunner(stream=self.config.stream,
