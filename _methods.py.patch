# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/_methods.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/_methods.py
@@ -36,27 +36,166 @@
 # small reductions
 def _amax(a, axis=None, out=None, keepdims=False,
           initial=_NoValue, where=True):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    axis :
+         (Default value = None)
+    out :
+         (Default value = None)
+    keepdims :
+         (Default value = False)
+    initial :
+         (Default value = _NoValue)
+    where :
+         (Default value = True)
+
+    Returns
+    -------
+
+    """
     return umr_maximum(a, axis, None, out, keepdims, initial, where)
 
 def _amin(a, axis=None, out=None, keepdims=False,
           initial=_NoValue, where=True):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    axis :
+         (Default value = None)
+    out :
+         (Default value = None)
+    keepdims :
+         (Default value = False)
+    initial :
+         (Default value = _NoValue)
+    where :
+         (Default value = True)
+
+    Returns
+    -------
+
+    """
     return umr_minimum(a, axis, None, out, keepdims, initial, where)
 
 def _sum(a, axis=None, dtype=None, out=None, keepdims=False,
          initial=_NoValue, where=True):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    axis :
+         (Default value = None)
+    dtype :
+         (Default value = None)
+    out :
+         (Default value = None)
+    keepdims :
+         (Default value = False)
+    initial :
+         (Default value = _NoValue)
+    where :
+         (Default value = True)
+
+    Returns
+    -------
+
+    """
     return umr_sum(a, axis, dtype, out, keepdims, initial, where)
 
 def _prod(a, axis=None, dtype=None, out=None, keepdims=False,
           initial=_NoValue, where=True):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    axis :
+         (Default value = None)
+    dtype :
+         (Default value = None)
+    out :
+         (Default value = None)
+    keepdims :
+         (Default value = False)
+    initial :
+         (Default value = _NoValue)
+    where :
+         (Default value = True)
+
+    Returns
+    -------
+
+    """
     return umr_prod(a, axis, dtype, out, keepdims, initial, where)
 
 def _any(a, axis=None, dtype=None, out=None, keepdims=False):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    axis :
+         (Default value = None)
+    dtype :
+         (Default value = None)
+    out :
+         (Default value = None)
+    keepdims :
+         (Default value = False)
+
+    Returns
+    -------
+
+    """
     return umr_any(a, axis, dtype, out, keepdims)
 
 def _all(a, axis=None, dtype=None, out=None, keepdims=False):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    axis :
+         (Default value = None)
+    dtype :
+         (Default value = None)
+    out :
+         (Default value = None)
+    keepdims :
+         (Default value = False)
+
+    Returns
+    -------
+
+    """
     return umr_all(a, axis, dtype, out, keepdims)
 
 def _count_reduce_items(arr, axis):
+    """
+
+    Parameters
+    ----------
+    arr :
+        
+    axis :
+        
+
+    Returns
+    -------
+
+    """
     if axis is None:
         axis = tuple(range(arr.ndim))
     if not isinstance(axis, tuple):
@@ -70,6 +209,17 @@
 # Various clip behavior deprecations, marked with _clip_dep as a prefix.
 
 def _clip_dep_is_scalar_nan(a):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+
+    Returns
+    -------
+
+    """
     # guarded to protect circular imports
     from numpy.core.fromnumeric import ndim
     if ndim(a) != 0:
@@ -80,11 +230,41 @@
         return False
 
 def _clip_dep_is_byte_swapped(a):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+
+    Returns
+    -------
+
+    """
     if isinstance(a, mu.ndarray):
         return not a.dtype.isnative
     return False
 
 def _clip_dep_invoke_with_casting(ufunc, *args, out=None, casting=None, **kwargs):
+    """
+
+    Parameters
+    ----------
+    ufunc :
+        
+    *args :
+        
+    out :
+         (Default value = None)
+    casting :
+         (Default value = None)
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     # normal path
     if casting is not None:
         return ufunc(*args, out=out, casting=casting, **kwargs)
@@ -104,6 +284,29 @@
         return ufunc(*args, out=out, casting="unsafe", **kwargs)
 
 def _clip(a, min=None, max=None, out=None, *, casting=None, **kwargs):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    min :
+         (Default value = None)
+    max :
+         (Default value = None)
+    out :
+         (Default value = None)
+    * :
+        
+    casting :
+         (Default value = None)
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     if min is None and max is None:
         raise ValueError("One of max or min must be given")
 
@@ -141,6 +344,25 @@
             um.clip, a, min, max, out=out, casting=casting, **kwargs)
 
 def _mean(a, axis=None, dtype=None, out=None, keepdims=False):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    axis :
+         (Default value = None)
+    dtype :
+         (Default value = None)
+    out :
+         (Default value = None)
+    keepdims :
+         (Default value = False)
+
+    Returns
+    -------
+
+    """
     arr = asanyarray(a)
 
     is_float16_result = False
@@ -174,6 +396,27 @@
     return ret
 
 def _var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    axis :
+         (Default value = None)
+    dtype :
+         (Default value = None)
+    out :
+         (Default value = None)
+    ddof :
+         (Default value = 0)
+    keepdims :
+         (Default value = False)
+
+    Returns
+    -------
+
+    """
     arr = asanyarray(a)
 
     rcount = _count_reduce_items(arr, axis)
@@ -230,6 +473,27 @@
     return ret
 
 def _std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    axis :
+         (Default value = None)
+    dtype :
+         (Default value = None)
+    out :
+         (Default value = None)
+    ddof :
+         (Default value = 0)
+    keepdims :
+         (Default value = False)
+
+    Returns
+    -------
+
+    """
     ret = _var(a, axis=axis, dtype=dtype, out=out, ddof=ddof,
                keepdims=keepdims)
 
@@ -243,6 +507,23 @@
     return ret
 
 def _ptp(a, axis=None, out=None, keepdims=False):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    axis :
+         (Default value = None)
+    out :
+         (Default value = None)
+    keepdims :
+         (Default value = False)
+
+    Returns
+    -------
+
+    """
     return um.subtract(
         umr_maximum(a, axis, None, out, keepdims),
         umr_minimum(a, axis, None, None, keepdims),
@@ -250,6 +531,19 @@
     )
 
 def _dump(self, file, protocol=2):
+    """
+
+    Parameters
+    ----------
+    file :
+        
+    protocol :
+         (Default value = 2)
+
+    Returns
+    -------
+
+    """
     if hasattr(file, 'write'):
         ctx = contextlib_nullcontext(file)
     else:
@@ -258,4 +552,15 @@
         pickle.dump(self, f, protocol=protocol)
 
 def _dumps(self, protocol=2):
+    """
+
+    Parameters
+    ----------
+    protocol :
+         (Default value = 2)
+
+    Returns
+    -------
+
+    """
     return pickle.dumps(self, protocol=protocol)
