# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jedi/inference/analysis.py
+++ b/..//venv/lib/python3.8/site-packages/jedi/inference/analysis.py
@@ -28,6 +28,7 @@
 
 
 class Error(object):
+    """ """
     def __init__(self, name, module_path, start_pos, message=None):
         self.path = module_path
         self._start_pos = start_pos
@@ -38,14 +39,17 @@
 
     @property
     def line(self):
+        """ """
         return self._start_pos[0]
 
     @property
     def column(self):
+        """ """
         return self._start_pos[1]
 
     @property
     def code(self):
+        """ """
         # The class name start
         first = self.__class__.__name__[0]
         return first + str(CODES[self.name][0])
@@ -74,10 +78,32 @@
 
 
 class Warning(Error):
+    """ """
     pass
 
 
 def add(node_context, error_name, node, message=None, typ=Error, payload=None):
+    """
+
+    Parameters
+    ----------
+    node_context :
+        
+    error_name :
+        
+    node :
+        
+    message :
+         (Default value = None)
+    typ :
+         (Default value = Error)
+    payload :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     exception = CODES[error_name][1]
     if _check_for_exception_catch(node_context, node, exception, payload):
         return
@@ -92,8 +118,16 @@
 
 
 def _check_for_setattr(instance):
-    """
-    Check if there's any setattr method inside an instance. If so, return True.
+    """Check if there's any setattr method inside an instance. If so, return True.
+
+    Parameters
+    ----------
+    instance :
+        
+
+    Returns
+    -------
+
     """
     module = instance.get_root_context()
     node = module.tree_node
@@ -113,6 +147,21 @@
 
 
 def add_attribute_error(name_context, lookup_value, name):
+    """
+
+    Parameters
+    ----------
+    name_context :
+        
+    lookup_value :
+        
+    name :
+        
+
+    Returns
+    -------
+
+    """
     message = ('AttributeError: %s has no attribute %s.' % (lookup_value, name))
     # Check for __getattr__/__getattribute__ existance and issue a warning
     # instead of an error, if that happens.
@@ -128,14 +177,39 @@
 
 
 def _check_for_exception_catch(node_context, jedi_name, exception, payload=None):
-    """
-    Checks if a jedi object (e.g. `Statement`) sits inside a try/catch and
+    """Checks if a jedi object (e.g. `Statement`) sits inside a try/catch and
     doesn't count as an error (if equal to `exception`).
     Also checks `hasattr` for AttributeErrors and uses the `payload` to compare
     it.
     Returns True if the exception was catched.
+
+    Parameters
+    ----------
+    node_context :
+        
+    jedi_name :
+        
+    exception :
+        
+    payload :
+         (Default value = None)
+
+    Returns
+    -------
+
     """
     def check_match(cls, exception):
+        """
+
+        Parameters
+        ----------
+        exception :
+            
+
+        Returns
+        -------
+
+        """
         if not cls.is_class():
             return False
 
@@ -146,6 +220,19 @@
         return False
 
     def check_try_for_except(obj, exception):
+        """
+
+        Parameters
+        ----------
+        obj :
+            
+        exception :
+            
+
+        Returns
+        -------
+
+        """
         # Only nodes in try
         iterator = iter(obj.children)
         for branch_type in iterator:
@@ -174,6 +261,19 @@
                             return True
 
     def check_hasattr(node, suite):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+        suite :
+            
+
+        Returns
+        -------
+
+        """
         try:
             assert suite.start_pos <= jedi_name.start_pos < suite.end_pos
             assert node.type in ('power', 'atom_expr')
