# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/polynomial/tests/test_hermite_e.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/polynomial/tests/test_hermite_e.py
@@ -25,28 +25,46 @@
 
 
 def trim(x):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+
+    Returns
+    -------
+
+    """
     return herme.hermetrim(x, tol=1e-6)
 
 
 class TestConstants:
+    """ """
 
     def test_hermedomain(self):
+        """ """
         assert_equal(herme.hermedomain, [-1, 1])
 
     def test_hermezero(self):
+        """ """
         assert_equal(herme.hermezero, [0])
 
     def test_hermeone(self):
+        """ """
         assert_equal(herme.hermeone, [1])
 
     def test_hermex(self):
+        """ """
         assert_equal(herme.hermex, [0, 1])
 
 
 class TestArithmetic:
+    """ """
     x = np.linspace(-3, 3, 100)
 
     def test_hermeadd(self):
+        """ """
         for i in range(5):
             for j in range(5):
                 msg = f"At i={i}, j={j}"
@@ -57,6 +75,7 @@
                 assert_equal(trim(res), trim(tgt), err_msg=msg)
 
     def test_hermesub(self):
+        """ """
         for i in range(5):
             for j in range(5):
                 msg = f"At i={i}, j={j}"
@@ -67,6 +86,7 @@
                 assert_equal(trim(res), trim(tgt), err_msg=msg)
 
     def test_hermemulx(self):
+        """ """
         assert_equal(herme.hermemulx([0]), [0])
         assert_equal(herme.hermemulx([1]), [0, 1])
         for i in range(1, 5):
@@ -75,6 +95,7 @@
             assert_equal(herme.hermemulx(ser), tgt)
 
     def test_hermemul(self):
+        """ """
         # check values of result
         for i in range(5):
             pol1 = [0]*i + [1]
@@ -89,6 +110,7 @@
                 assert_almost_equal(val3, val1*val2, err_msg=msg)
 
     def test_hermediv(self):
+        """ """
         for i in range(5):
             for j in range(5):
                 msg = f"At i={i}, j={j}"
@@ -100,6 +122,7 @@
                 assert_equal(trim(res), trim(tgt), err_msg=msg)
 
     def test_hermepow(self):
+        """ """
         for i in range(5):
             for j in range(5):
                 msg = f"At i={i}, j={j}"
@@ -110,6 +133,7 @@
 
 
 class TestEvaluation:
+    """ """
     # coefficients of 1 + 2*x + 3*x**2
     c1d = np.array([4., 2., 3.])
     c2d = np.einsum('i,j->ij', c1d, c1d)
@@ -120,6 +144,7 @@
     y = polyval(x, [1., 2., 3.])
 
     def test_hermeval(self):
+        """ """
         #check empty input
         assert_equal(herme.hermeval([], [1]).size, 0)
 
@@ -141,6 +166,7 @@
             assert_equal(herme.hermeval(x, [1, 0, 0]).shape, dims)
 
     def test_hermeval2d(self):
+        """ """
         x1, x2, x3 = self.x
         y1, y2, y3 = self.y
 
@@ -158,6 +184,7 @@
         assert_(res.shape == (2, 3))
 
     def test_hermeval3d(self):
+        """ """
         x1, x2, x3 = self.x
         y1, y2, y3 = self.y
 
@@ -175,6 +202,7 @@
         assert_(res.shape == (2, 3))
 
     def test_hermegrid2d(self):
+        """ """
         x1, x2, x3 = self.x
         y1, y2, y3 = self.y
 
@@ -189,6 +217,7 @@
         assert_(res.shape == (2, 3)*2)
 
     def test_hermegrid3d(self):
+        """ """
         x1, x2, x3 = self.x
         y1, y2, y3 = self.y
 
@@ -204,8 +233,10 @@
 
 
 class TestIntegral:
+    """ """
 
     def test_hermeint(self):
+        """ """
         # check exceptions
         assert_raises(TypeError, herme.hermeint, [0], .5)
         assert_raises(ValueError, herme.hermeint, [0], -1)
@@ -289,6 +320,7 @@
                 assert_almost_equal(trim(res), trim(tgt))
 
     def test_hermeint_axis(self):
+        """ """
         # check that axis keyword works
         c2d = np.random.random((3, 4))
 
@@ -306,8 +338,10 @@
 
 
 class TestDerivative:
+    """ """
 
     def test_hermeder(self):
+        """ """
         # check exceptions
         assert_raises(TypeError, herme.hermeder, [0], .5)
         assert_raises(ValueError, herme.hermeder, [0], -1)
@@ -334,6 +368,7 @@
                 assert_almost_equal(trim(res), trim(tgt))
 
     def test_hermeder_axis(self):
+        """ """
         # check that axis keyword works
         c2d = np.random.random((3, 4))
 
@@ -347,10 +382,12 @@
 
 
 class TestVander:
+    """ """
     # some random values in [-1, 1)
     x = np.random.random((3, 5))*2 - 1
 
     def test_hermevander(self):
+        """ """
         # check for 1d x
         x = np.arange(3)
         v = herme.hermevander(x, 3)
@@ -368,6 +405,7 @@
             assert_almost_equal(v[..., i], herme.hermeval(x, coef))
 
     def test_hermevander2d(self):
+        """ """
         # also tests hermeval2d for non-square coefficient array
         x1, x2, x3 = self.x
         c = np.random.random((2, 3))
@@ -381,6 +419,7 @@
         assert_(van.shape == (1, 5, 6))
 
     def test_hermevander3d(self):
+        """ """
         # also tests hermeval3d for non-square coefficient array
         x1, x2, x3 = self.x
         c = np.random.random((2, 3, 4))
@@ -395,12 +434,36 @@
 
 
 class TestFitting:
+    """ """
 
     def test_hermefit(self):
+        """ """
         def f(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return x*(x - 1)*(x - 2)
 
         def f2(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return x**4 + x**2 + 1
 
         # Test exceptions
@@ -472,23 +535,29 @@
 
 
 class TestCompanion:
+    """ """
 
     def test_raises(self):
+        """ """
         assert_raises(ValueError, herme.hermecompanion, [])
         assert_raises(ValueError, herme.hermecompanion, [1])
 
     def test_dimensions(self):
+        """ """
         for i in range(1, 5):
             coef = [0]*i + [1]
             assert_(herme.hermecompanion(coef).shape == (i, i))
 
     def test_linear_root(self):
+        """ """
         assert_(herme.hermecompanion([1, 2])[0, 0] == -.5)
 
 
 class TestGauss:
+    """ """
 
     def test_100(self):
+        """ """
         x, w = herme.hermegauss(100)
 
         # test orthogonality. Note that the results need to be normalized,
@@ -506,8 +575,10 @@
 
 
 class TestMisc:
+    """ """
 
     def test_hermefromroots(self):
+        """ """
         res = herme.hermefromroots([])
         assert_almost_equal(trim(res), [1])
         for i in range(1, 5):
@@ -520,6 +591,7 @@
             assert_almost_equal(res, tgt)
 
     def test_hermeroots(self):
+        """ """
         assert_almost_equal(herme.hermeroots([1]), [])
         assert_almost_equal(herme.hermeroots([1, 1]), [-1])
         for i in range(2, 5):
@@ -528,6 +600,7 @@
             assert_almost_equal(trim(res), trim(tgt))
 
     def test_hermetrim(self):
+        """ """
         coef = [2, -1, 1, 0]
 
         # Test exceptions
@@ -539,17 +612,21 @@
         assert_equal(herme.hermetrim(coef, 2), [0])
 
     def test_hermeline(self):
+        """ """
         assert_equal(herme.hermeline(3, 4), [3, 4])
 
     def test_herme2poly(self):
+        """ """
         for i in range(10):
             assert_almost_equal(herme.herme2poly([0]*i + [1]), Helist[i])
 
     def test_poly2herme(self):
+        """ """
         for i in range(10):
             assert_almost_equal(herme.poly2herme(Helist[i]), [0]*i + [1])
 
     def test_weight(self):
+        """ """
         x = np.linspace(-5, 5, 11)
         tgt = np.exp(-.5*x**2)
         res = herme.hermeweight(x)
