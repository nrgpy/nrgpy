# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/resample/test_deprecated.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/resample/test_deprecated.py
@@ -24,13 +24,39 @@
 
 @pytest.fixture()
 def _index_factory():
+    """ """
     return period_range
 
 
 @pytest.fixture
 def create_index(_index_factory):
+    """
+
+    Parameters
+    ----------
+    _index_factory :
+        
+
+    Returns
+    -------
+
+    """
     def _create_index(*args, **kwargs):
-        """ return the _index_factory created using the args, kwargs """
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+        type
+            
+
+        """
         return _index_factory(*args, **kwargs)
 
     return _create_index
@@ -38,6 +64,7 @@
 
 # new test to check that all FutureWarning are triggered
 def test_deprecating_on_loffset_and_base():
+    """ """
     # GH 31809
 
     idx = pd.date_range("2001-01-01", periods=4, freq="T")
@@ -64,6 +91,21 @@
 @all_ts
 @pytest.mark.parametrize("arg", ["mean", {"value": "mean"}, ["mean"]])
 def test_resample_loffset_arg_type(frame, create_index, arg):
+    """
+
+    Parameters
+    ----------
+    frame :
+        
+    create_index :
+        
+    arg :
+        
+
+    Returns
+    -------
+
+    """
     # GH 13218, 15002
     df = frame
     expected_means = [df.values[i : i + 2].mean() for i in range(0, len(df.values), 2)]
@@ -89,6 +131,17 @@
     "loffset", [timedelta(minutes=1), "1min", Minute(1), np.timedelta64(1, "m")]
 )
 def test_resample_loffset(loffset):
+    """
+
+    Parameters
+    ----------
+    loffset :
+        
+
+    Returns
+    -------
+
+    """
     # GH 7687
     rng = date_range("1/1/2000 00:00:00", "1/1/2000 00:13:00", freq="min")
     s = Series(np.random.randn(14), index=rng)
@@ -118,6 +171,7 @@
 
 
 def test_resample_loffset_upsample():
+    """ """
     # GH 20744
     rng = date_range("1/1/2000 00:00:00", "1/1/2000 00:13:00", freq="min")
     s = Series(np.random.randn(14), index=rng)
@@ -133,6 +187,7 @@
 
 
 def test_resample_loffset_count():
+    """ """
     # GH 12725
     start_time = "1/1/2000 00:00:00"
     rng = date_range(start_time, periods=100, freq="S")
@@ -157,6 +212,7 @@
 
 
 def test_resample_base():
+    """ """
     rng = date_range("1/1/2000 00:00:00", "1/1/2000 02:00", freq="s")
     ts = Series(np.random.randn(len(rng)), index=rng)
 
@@ -167,6 +223,7 @@
 
 
 def test_resample_float_base():
+    """ """
     # GH25161
     dt = pd.to_datetime(
         ["2018-11-26 16:17:43.51", "2018-11-26 16:17:44.51", "2018-11-26 16:17:45.51"]
@@ -185,6 +242,21 @@
 @pytest.mark.parametrize("kind", ["period", None, "timestamp"])
 @pytest.mark.parametrize("agg_arg", ["mean", {"value": "mean"}, ["mean"]])
 def test_loffset_returns_datetimeindex(frame, kind, agg_arg):
+    """
+
+    Parameters
+    ----------
+    frame :
+        
+    kind :
+        
+    agg_arg :
+        
+
+    Returns
+    -------
+
+    """
     # make sure passing loffset returns DatetimeIndex in all cases
     # basic method taken from Base.test_resample_loffset_arg_type()
     df = frame
@@ -225,6 +297,27 @@
     ],
 )
 def test_resample_with_non_zero_base(start, end, start_freq, end_freq, base, offset):
+    """
+
+    Parameters
+    ----------
+    start :
+        
+    end :
+        
+    start_freq :
+        
+    end_freq :
+        
+    base :
+        
+    offset :
+        
+
+    Returns
+    -------
+
+    """
     # GH 23882
     s = pd.Series(0, index=pd.period_range(start, end, freq=start_freq))
     s = s + np.arange(len(s))
@@ -248,6 +341,7 @@
 
 
 def test_resample_base_with_timedeltaindex():
+    """ """
     # GH 10530
     rng = timedelta_range(start="0s", periods=25, freq="s")
     ts = Series(np.random.randn(len(rng)), index=rng)
