# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jupyter_client/ssh/tunnel.py
+++ b/..//venv/lib/python3.8/site-packages/jupyter_client/ssh/tunnel.py
@@ -25,6 +25,7 @@
 except ImportError:
     paramiko = None
     class SSHException(Exception):
+        """ """
         pass
 else:
     from .forward import forward_tunnel
@@ -38,7 +39,17 @@
 
 
 def select_random_ports(n):
-    """Select and return n random ports that are available."""
+    """Select and return n random ports that are available.
+
+    Parameters
+    ----------
+    n :
+        
+
+    Returns
+    -------
+
+    """
     ports = []
     sockets = []
     for i in range(n):
@@ -61,8 +72,21 @@
     """Attempt to make an ssh connection without a password.
     This is mainly used for requiring password input only once
     when many tunnels may be connected to the same server.
-
+    
     If paramiko is None, the default for the platform is chosen.
+
+    Parameters
+    ----------
+    server :
+        
+    keyfile :
+        
+    paramiko :
+         (Default value = None)
+
+    Returns
+    -------
+
     """
     if paramiko is None:
         paramiko = sys.platform == 'win32'
@@ -74,7 +98,19 @@
 
 
 def _try_passwordless_openssh(server, keyfile):
-    """Try passwordless login with shell ssh command."""
+    """Try passwordless login with shell ssh command.
+
+    Parameters
+    ----------
+    server :
+        
+    keyfile :
+        
+
+    Returns
+    -------
+
+    """
     if pexpect is None:
         raise ImportError("pexpect unavailable, use paramiko")
     cmd = 'ssh -f ' + server
@@ -102,7 +138,19 @@
 
 
 def _try_passwordless_paramiko(server, keyfile):
-    """Try passwordless login with paramiko."""
+    """Try passwordless login with paramiko.
+
+    Parameters
+    ----------
+    server :
+        
+    keyfile :
+        
+
+    Returns
+    -------
+
+    """
     if paramiko is None:
         msg = "Paramiko unavailable, "
         if sys.platform == 'win32':
@@ -126,12 +174,32 @@
 
 def tunnel_connection(socket, addr, server, keyfile=None, password=None, paramiko=None, timeout=60):
     """Connect a socket to an address via an ssh tunnel.
-
+    
     This is a wrapper for socket.connect(addr), when addr is not accessible
     from the local machine.  It simply creates an ssh tunnel using the remaining args,
     and calls socket.connect('tcp://localhost:lport') where lport is the randomly
     selected local port of the tunnel.
 
+    Parameters
+    ----------
+    socket :
+        
+    addr :
+        
+    server :
+        
+    keyfile :
+         (Default value = None)
+    password :
+         (Default value = None)
+    paramiko :
+         (Default value = None)
+    timeout :
+         (Default value = 60)
+
+    Returns
+    -------
+
     """
     new_url, tunnel = open_tunnel(addr, server, keyfile=keyfile, password=password, paramiko=paramiko, timeout=timeout)
     socket.connect(new_url)
@@ -140,14 +208,28 @@
 
 def open_tunnel(addr, server, keyfile=None, password=None, paramiko=None, timeout=60):
     """Open a tunneled connection from a 0MQ url.
-
+    
     For use inside tunnel_connection.
 
-    Returns
-    -------
-
-    (url, tunnel) : (str, object)
-        The 0MQ url that has been forwarded, and the tunnel object
+    Parameters
+    ----------
+    addr :
+        
+    server :
+        
+    keyfile :
+         (Default value = None)
+    password :
+         (Default value = None)
+    paramiko :
+         (Default value = None)
+    timeout :
+         (Default value = 60)
+
+    Returns
+    -------
+
+    
     """
 
     lport = select_random_ports(1)[0]
@@ -170,36 +252,33 @@
     on this machine to localhost:rport on server.  The tunnel
     will automatically close when not in use, remaining open
     for a minimum of timeout seconds for an initial connection.
-
+    
     This creates a tunnel redirecting `localhost:lport` to `remoteip:rport`,
     as seen from `server`.
-
+    
     keyfile and password may be specified, but ssh config is checked for defaults.
 
     Parameters
     ----------
-
-    lport : int
-        local port for connecting to the tunnel from this machine.
-    rport : int
-        port on the remote machine to connect to.
-    server : str
-        The ssh server to connect to. The full ssh server string will be parsed.
-        user@server:port
-    remoteip : str [Default: 127.0.0.1]
-        The remote ip, specifying the destination of the tunnel.
-        Default is localhost, which means that the tunnel would redirect
-        localhost:lport on this machine to localhost:rport on the *server*.
-
-    keyfile : str; path to public key file
-        This specifies a key to be used in ssh login, default None.
-        Regular default ssh keys will be used without specifying this argument.
-    password : str;
-        Your ssh password to the ssh server. Note that if this is left None,
-        you will be prompted for it if passwordless key based login is unavailable.
-    timeout : int [default: 60]
-        The time (in seconds) after which no activity will result in the tunnel
-        closing.  This prevents orphaned tunnels from running forever.
+    lport :
+        
+    rport :
+        
+    server :
+        
+    remoteip :
+         (Default value = '127.0.0.1')
+    keyfile :
+         (Default value = None)
+    password :
+         (Default value = None)
+    timeout :
+         (Default value = 60)
+
+    Returns
+    -------
+
+    
     """
     if pexpect is None:
         raise ImportError("pexpect unavailable, use paramiko_tunnel")
@@ -257,10 +336,32 @@
 
 
 def _stop_tunnel(cmd):
+    """
+
+    Parameters
+    ----------
+    cmd :
+        
+
+    Returns
+    -------
+
+    """
     pexpect.run(cmd)
 
 
 def _split_server(server):
+    """
+
+    Parameters
+    ----------
+    server :
+        
+
+    Returns
+    -------
+
+    """
     if '@' in server:
         username, server = server.split('@', 1)
     else:
@@ -276,42 +377,37 @@
 def paramiko_tunnel(lport, rport, server, remoteip='127.0.0.1', keyfile=None, password=None, timeout=60):
     """launch a tunner with paramiko in a subprocess. This should only be used
     when shell ssh is unavailable (e.g. Windows).
-
+    
     This creates a tunnel redirecting `localhost:lport` to `remoteip:rport`,
     as seen from `server`.
-
+    
     If you are familiar with ssh tunnels, this creates the tunnel:
-
+    
     ssh server -L localhost:lport:remoteip:rport
-
+    
     keyfile and password may be specified, but ssh config is checked for defaults.
 
-
-    Parameters
-    ----------
-
-    lport : int
-        local port for connecting to the tunnel from this machine.
-    rport : int
-        port on the remote machine to connect to.
-    server : str
-        The ssh server to connect to. The full ssh server string will be parsed.
-        user@server:port
-    remoteip : str [Default: 127.0.0.1]
-        The remote ip, specifying the destination of the tunnel.
-        Default is localhost, which means that the tunnel would redirect
-        localhost:lport on this machine to localhost:rport on the *server*.
-
-    keyfile : str; path to public key file
-        This specifies a key to be used in ssh login, default None.
-        Regular default ssh keys will be used without specifying this argument.
-    password : str;
-        Your ssh password to the ssh server. Note that if this is left None,
-        you will be prompted for it if passwordless key based login is unavailable.
-    timeout : int [default: 60]
-        The time (in seconds) after which no activity will result in the tunnel
-        closing.  This prevents orphaned tunnels from running forever.
-
+    Parameters
+    ----------
+    lport :
+        
+    rport :
+        
+    server :
+        
+    remoteip :
+         (Default value = '127.0.0.1')
+    keyfile :
+         (Default value = None)
+    password :
+         (Default value = None)
+    timeout :
+         (Default value = 60)
+
+    Returns
+    -------
+
+    
     """
     if paramiko is None:
         raise ImportError("Paramiko not available")
@@ -331,6 +427,25 @@
 def _paramiko_tunnel(lport, rport, server, remoteip, keyfile=None, password=None):
     """Function for actually starting a paramiko tunnel, to be passed
     to multiprocessing.Process(target=this), and not called directly.
+
+    Parameters
+    ----------
+    lport :
+        
+    rport :
+        
+    server :
+        
+    remoteip :
+        
+    keyfile :
+         (Default value = None)
+    password :
+         (Default value = None)
+
+    Returns
+    -------
+
     """
     username, server, port = _split_server(server)
     client = paramiko.SSHClient()
