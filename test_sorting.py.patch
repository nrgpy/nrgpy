# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/multi/test_sorting.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/multi/test_sorting.py
@@ -11,6 +11,17 @@
 
 
 def test_sortlevel(idx):
+    """
+
+    Parameters
+    ----------
+    idx :
+        
+
+    Returns
+    -------
+
+    """
     tuples = list(idx)
     random.shuffle(tuples)
 
@@ -33,12 +44,14 @@
 
 
 def test_sortlevel_not_sort_remaining():
+    """ """
     mi = MultiIndex.from_tuples([[1, 1, 3], [1, 1, 1]], names=list("ABC"))
     sorted_idx, _ = mi.sortlevel("A", sort_remaining=False)
     assert sorted_idx.equals(mi)
 
 
 def test_sortlevel_deterministic():
+    """ """
     tuples = [
         ("bar", "one"),
         ("foo", "two"),
@@ -67,6 +80,17 @@
 
 
 def test_numpy_argsort(idx):
+    """
+
+    Parameters
+    ----------
+    idx :
+        
+
+    Returns
+    -------
+
+    """
     result = np.argsort(idx)
     expected = idx.argsort()
     tm.assert_numpy_array_equal(result, expected)
@@ -93,6 +117,7 @@
 
 
 def test_unsortedindex():
+    """ """
     # GH 11897
     mi = pd.MultiIndex.from_tuples(
         [("z", "a"), ("x", "a"), ("y", "b"), ("x", "b"), ("y", "a"), ("z", "b")],
@@ -119,6 +144,7 @@
 
 
 def test_unsortedindex_doc_examples():
+    """ """
     # https://pandas.pydata.org/pandas-docs/stable/advanced.html#sorting-a-multiindex  # noqa
     dfm = DataFrame(
         {"jim": [0, 0, 1, 1], "joe": ["x", "x", "z", "y"], "jolie": np.random.rand(4)}
@@ -145,6 +171,7 @@
 
 
 def test_reconstruct_sort():
+    """ """
 
     # starts off lexsorted & monotonic
     mi = MultiIndex.from_arrays([["A", "A", "B", "B", "B"], [1, 2, 1, 2, 3]])
@@ -192,6 +219,7 @@
 
 
 def test_reconstruct_remove_unused():
+    """ """
     # xref to GH 2770
     df = DataFrame(
         [["deleteMe", 1, 9], ["keepMe", 2, 9], ["keepMeToo", 3, 9]],
@@ -227,6 +255,19 @@
     "first_type,second_type", [("int64", "int64"), ("datetime64[D]", "str")]
 )
 def test_remove_unused_levels_large(first_type, second_type):
+    """
+
+    Parameters
+    ----------
+    first_type :
+        
+    second_type :
+        
+
+    Returns
+    -------
+
+    """
     # GH16556
 
     # because tests should be deterministic (and this test in particular
@@ -259,6 +300,19 @@
     "level1", [["w", "x", "y", "z"], ["w", "x", "y", "z", "unused"]]
 )
 def test_remove_unused_nan(level0, level1):
+    """
+
+    Parameters
+    ----------
+    level0 :
+        
+    level1 :
+        
+
+    Returns
+    -------
+
+    """
     # GH 18417
     mi = pd.MultiIndex(
         levels=[level0, level1], codes=[[0, 2, -1, 1, -1], [0, 1, 2, 3, 2]]
@@ -271,6 +325,17 @@
 
 
 def test_argsort(idx):
+    """
+
+    Parameters
+    ----------
+    idx :
+        
+
+    Returns
+    -------
+
+    """
     result = idx.argsort()
     expected = idx.values.argsort()
     tm.assert_numpy_array_equal(result, expected)
