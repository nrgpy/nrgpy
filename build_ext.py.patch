# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/distutils/command/build_ext.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/distutils/command/build_ext.py
@@ -23,6 +23,7 @@
 
 
 class build_ext (old_build_ext):
+    """ """
 
     description = "build C/C++/F extensions (compile/link to build directory)"
 
@@ -43,12 +44,14 @@
     boolean_options = old_build_ext.boolean_options + ['warn-error']
 
     def initialize_options(self):
+        """ """
         old_build_ext.initialize_options(self)
         self.fcompiler = None
         self.parallel = None
         self.warn_error = None
 
     def finalize_options(self):
+        """ """
         if self.parallel:
             try:
                 self.parallel = int(self.parallel)
@@ -78,6 +81,7 @@
                                   )
 
     def run(self):
+        """ """
         if not self.extensions:
             return
 
@@ -293,10 +297,34 @@
                 copy_file(runtime_lib, shared_lib_dir)
 
     def swig_sources(self, sources, extensions=None):
+        """
+
+        Parameters
+        ----------
+        sources :
+            
+        extensions :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         # Do nothing. Swig sources have been handled in build_src command.
         return sources
 
     def build_extension(self, ext):
+        """
+
+        Parameters
+        ----------
+        ext :
+            
+
+        Returns
+        -------
+
+        """
         sources = ext.sources
         if sources is None or not is_sequence(sources):
             raise DistutilsSetupError(
@@ -488,6 +516,17 @@
                target_lang=ext.language)
 
     def _add_dummy_mingwex_sym(self, c_sources):
+        """
+
+        Parameters
+        ----------
+        c_sources :
+            
+
+        Returns
+        -------
+
+        """
         build_src = self.get_finalized_command("build_src").build_src
         build_clib = self.get_finalized_command("build_clib").build_clib
         objects = self.compiler.compile([os.path.join(build_src,
@@ -499,6 +538,25 @@
     def _process_unlinkable_fobjects(self, objects, libraries,
                                      fcompiler, library_dirs,
                                      unlinkable_fobjects):
+        """
+
+        Parameters
+        ----------
+        objects :
+            
+        libraries :
+            
+        fcompiler :
+            
+        library_dirs :
+            
+        unlinkable_fobjects :
+            
+
+        Returns
+        -------
+
+        """
         libraries = list(libraries)
         objects = list(objects)
         unlinkable_fobjects = list(unlinkable_fobjects)
@@ -530,6 +588,21 @@
 
     def _libs_with_msvc_and_fortran(self, fcompiler, c_libraries,
                                     c_library_dirs):
+        """
+
+        Parameters
+        ----------
+        fcompiler :
+            
+        c_libraries :
+            
+        c_library_dirs :
+            
+
+        Returns
+        -------
+
+        """
         if fcompiler is None:
             return
 
@@ -590,6 +663,7 @@
                         c_library_dirs.append(self.build_temp)
 
     def get_source_files(self):
+        """ """
         self.check_extensions_list(self.extensions)
         filenames = []
         for ext in self.extensions:
@@ -597,6 +671,7 @@
         return filenames
 
     def get_outputs(self):
+        """ """
         self.check_extensions_list(self.extensions)
 
         outputs = []
