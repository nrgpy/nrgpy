# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tornado/auth.py
+++ b/..//venv/lib/python3.8/site-packages/tornado/auth.py
@@ -37,6 +37,7 @@
 
     class GoogleOAuth2LoginHandler(tornado.web.RequestHandler,
                                    tornado.auth.GoogleOAuth2Mixin):
+        """ """
         async def get(self):
             if self.get_argument('code', False):
                 user = await self.get_authenticated_user(
@@ -74,15 +75,23 @@
 
 
 class AuthError(Exception):
+    """ """
     pass
 
 
 class OpenIdMixin(object):
     """Abstract implementation of OpenID and Attribute Exchange.
-
+    
     Class attributes:
-
+    
     * ``_OPENID_ENDPOINT``: the identity provider's URI.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def authenticate_redirect(
@@ -91,20 +100,37 @@
         ax_attrs: List[str] = ["name", "email", "language", "username"],
     ) -> None:
         """Redirects to the authentication URL for this service.
-
+        
         After authentication, the service will redirect back to the given
         callback URI with additional parameters including ``openid.mode``.
-
+        
         We request the given attributes for the authenticated user by
         default (name, email, language, and username). If you don't need
         all those attributes for your app, you can request fewer with
         the ax_attrs keyword argument.
-
+        
         .. versionchanged:: 6.0
-
+        
             The ``callback`` argument was removed and this method no
             longer returns an awaitable object. It is now an ordinary
             synchronous function.
+
+        Parameters
+        ----------
+        callback_uri: Optional[str] :
+             (Default value = None)
+        ax_attrs: List[str] :
+             (Default value = ["name")
+        "email" :
+            
+        "language" :
+            
+        "username"] :
+            
+
+        Returns
+        -------
+
         """
         handler = cast(RequestHandler, self)
         callback_uri = callback_uri or handler.request.uri
@@ -151,6 +177,21 @@
         ax_attrs: Iterable[str] = [],
         oauth_scope: Optional[str] = None,
     ) -> Dict[str, str]:
+        """
+
+        Parameters
+        ----------
+        callback_uri: str :
+            
+        ax_attrs: Iterable[str] :
+             (Default value = [])
+        oauth_scope: Optional[str] :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         handler = cast(RequestHandler, self)
         url = urllib.parse.urljoin(handler.request.full_url(), callback_uri)
         args = {
@@ -202,6 +243,17 @@
     def _on_authentication_verified(
         self, response: httpclient.HTTPResponse
     ) -> Dict[str, Any]:
+        """
+
+        Parameters
+        ----------
+        response: httpclient.HTTPResponse :
+            
+
+        Returns
+        -------
+
+        """
         handler = cast(RequestHandler, self)
         if b"is_valid:true" not in response.body:
             raise AuthError("Invalid OpenID response: %r" % response.body)
@@ -217,6 +269,17 @@
                 break
 
         def get_ax_arg(uri: str) -> str:
+            """
+
+            Parameters
+            ----------
+            uri: str :
+                
+
+            Returns
+            -------
+
+            """
             if not ax_ns:
                 return u""
             prefix = "openid." + ax_ns + ".type."
@@ -263,28 +326,42 @@
 
     def get_auth_http_client(self) -> httpclient.AsyncHTTPClient:
         """Returns the `.AsyncHTTPClient` instance to be used for auth requests.
-
+        
         May be overridden by subclasses to use an HTTP client other than
         the default.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         return httpclient.AsyncHTTPClient()
 
 
 class OAuthMixin(object):
     """Abstract implementation of OAuth 1.0 and 1.0a.
-
+    
     See `TwitterMixin` below for an example implementation.
-
+    
     Class attributes:
-
+    
     * ``_OAUTH_AUTHORIZE_URL``: The service's OAuth authorization url.
     * ``_OAUTH_ACCESS_TOKEN_URL``: The service's OAuth access token url.
     * ``_OAUTH_VERSION``: May be either "1.0" or "1.0a".
     * ``_OAUTH_NO_CALLBACKS``: Set this to True if the service requires
       advance registration of callbacks.
-
+    
     Subclasses must also override the `_oauth_get_user_future` and
     `_oauth_consumer_token` methods.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     async def authorize_redirect(
@@ -387,6 +464,21 @@
         callback_uri: Optional[str] = None,
         extra_params: Optional[Dict[str, Any]] = None,
     ) -> str:
+        """
+
+        Parameters
+        ----------
+        callback_uri: Optional[str] :
+             (Default value = None)
+        extra_params: Optional[Dict[str :
+            
+        Any]] :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         handler = cast(RequestHandler, self)
         consumer_token = self._oauth_consumer_token()
         url = self._OAUTH_REQUEST_TOKEN_URL  # type: ignore
@@ -419,6 +511,21 @@
         callback_uri: Optional[str],
         response: httpclient.HTTPResponse,
     ) -> None:
+        """
+
+        Parameters
+        ----------
+        authorize_url: str :
+            
+        callback_uri: Optional[str] :
+            
+        response: httpclient.HTTPResponse :
+            
+
+        Returns
+        -------
+
+        """
         handler = cast(RequestHandler, self)
         request_token = _oauth_parse_response(response.body)
         data = (
@@ -438,6 +545,19 @@
         handler.redirect(authorize_url + "?" + urllib.parse.urlencode(args))
 
     def _oauth_access_token_url(self, request_token: Dict[str, Any]) -> str:
+        """
+
+        Parameters
+        ----------
+        request_token: Dict[str :
+            
+        Any] :
+            
+
+        Returns
+        -------
+
+        """
         consumer_token = self._oauth_consumer_token()
         url = self._OAUTH_ACCESS_TOKEN_URL  # type: ignore
         args = dict(
@@ -465,8 +585,15 @@
 
     def _oauth_consumer_token(self) -> Dict[str, Any]:
         """Subclasses must override this to return their OAuth consumer keys.
-
+        
         The return value should be a `dict` with keys ``key`` and ``secret``.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         raise NotImplementedError()
 
@@ -501,10 +628,28 @@
         parameters: Dict[str, Any] = {},
         method: str = "GET",
     ) -> Dict[str, Any]:
-        """Returns the OAuth parameters as a dict for the given request.
-
-        parameters should include all POST arguments and query string arguments
-        that will be sent with the request.
+        """
+
+        Parameters
+        ----------
+        that :
+            will be sent with the request
+        url: str :
+            
+        access_token: Dict[str :
+            
+        Any] :
+             (Default value = {})
+        parameters: Dict[str :
+            
+        method: str :
+             (Default value = "GET")
+
+        Returns
+        -------
+        type
+            
+
         """
         consumer_token = self._oauth_consumer_token()
         base_args = dict(
@@ -531,23 +676,37 @@
 
     def get_auth_http_client(self) -> httpclient.AsyncHTTPClient:
         """Returns the `.AsyncHTTPClient` instance to be used for auth requests.
-
+        
         May be overridden by subclasses to use an HTTP client other than
         the default.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         return httpclient.AsyncHTTPClient()
 
 
 class OAuth2Mixin(object):
     """Abstract implementation of OAuth 2.0.
-
+    
     See `FacebookGraphMixin` or `GoogleOAuth2Mixin` below for example
     implementations.
-
+    
     Class attributes:
-
+    
     * ``_OAUTH_AUTHORIZE_URL``: The service's authorization url.
     * ``_OAUTH_ACCESS_TOKEN_URL``:  The service's access token url.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def authorize_redirect(
@@ -560,17 +719,38 @@
         response_type: str = "code",
     ) -> None:
         """Redirects the user to obtain OAuth authorization for this service.
-
+        
         Some providers require that you register a redirect URL with
         your application instead of passing one via this method. You
         should call this method to log the user in, and then call
         ``get_authenticated_user`` in the handler for your
         redirect URL to complete the authorization process.
-
+        
         .. versionchanged:: 6.0
-
+        
            The ``callback`` argument and returned awaitable were removed;
            this is now an ordinary synchronous function.
+
+        Parameters
+        ----------
+        redirect_uri: Optional[str] :
+             (Default value = None)
+        client_id: Optional[str] :
+             (Default value = None)
+        client_secret: Optional[str] :
+             (Default value = None)
+        extra_params: Optional[Dict[str :
+            
+        Any]] :
+             (Default value = None)
+        scope: Optional[List[str]] :
+             (Default value = None)
+        response_type: str :
+             (Default value = "code")
+
+        Returns
+        -------
+
         """
         handler = cast(RequestHandler, self)
         args = {"response_type": response_type}
@@ -593,6 +773,27 @@
         code: Optional[str] = None,
         extra_params: Optional[Dict[str, Any]] = None,
     ) -> str:
+        """
+
+        Parameters
+        ----------
+        redirect_uri: Optional[str] :
+             (Default value = None)
+        client_id: Optional[str] :
+             (Default value = None)
+        client_secret: Optional[str] :
+             (Default value = None)
+        code: Optional[str] :
+             (Default value = None)
+        extra_params: Optional[Dict[str :
+            
+        Any]] :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         url = self._OAUTH_ACCESS_TOKEN_URL  # type: ignore
         args = {}  # type: Dict[str, str]
         if redirect_uri is not None:
@@ -625,6 +826,7 @@
 
             class MainHandler(tornado.web.RequestHandler,
                               tornado.auth.FacebookGraphMixin):
+                """ """
                 @tornado.web.authenticated
                 async def get(self):
                     new_entry = await self.oauth2_request(
@@ -665,30 +867,37 @@
 
     def get_auth_http_client(self) -> httpclient.AsyncHTTPClient:
         """Returns the `.AsyncHTTPClient` instance to be used for auth requests.
-
+        
         May be overridden by subclasses to use an HTTP client other than
         the default.
-
+        
         .. versionadded:: 4.3
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         return httpclient.AsyncHTTPClient()
 
 
 class TwitterMixin(OAuthMixin):
     """Twitter OAuth authentication.
-
+    
     To authenticate with Twitter, register your application with
     Twitter at http://twitter.com/apps. Then copy your Consumer Key
     and Consumer Secret to the application
     `~tornado.web.Application.settings` ``twitter_consumer_key`` and
     ``twitter_consumer_secret``. Use this mixin on the handler for the
     URL you registered as your application's callback URL.
-
+    
     When your application is set up, you can use this mixin like this
     to authenticate the user with Twitter and get access to their stream:
-
+    
     .. testcode::
-
+    
         class TwitterLoginHandler(tornado.web.RequestHandler,
                                   tornado.auth.TwitterMixin):
             async def get(self):
@@ -697,14 +906,21 @@
                     # Save the user using e.g. set_secure_cookie()
                 else:
                     await self.authorize_redirect()
-
+    
     .. testoutput::
        :hide:
-
+    
     The user object returned by `~OAuthMixin.get_authenticated_user`
     includes the attributes ``username``, ``name``, ``access_token``,
     and all of the custom Twitter user attributes described at
     https://dev.twitter.com/docs/api/1.1/get/users/show
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     _OAUTH_REQUEST_TOKEN_URL = "https://api.twitter.com/oauth/request_token"
@@ -764,6 +980,7 @@
 
             class MainHandler(tornado.web.RequestHandler,
                               tornado.auth.TwitterMixin):
+                """ """
                 @tornado.web.authenticated
                 async def get(self):
                     new_entry = await self.twitter_request(
@@ -812,6 +1029,7 @@
         return escape.json_decode(response.body)
 
     def _oauth_consumer_token(self) -> Dict[str, Any]:
+        """ """
         handler = cast(RequestHandler, self)
         handler.require_setting("twitter_consumer_key", "Twitter OAuth")
         handler.require_setting("twitter_consumer_secret", "Twitter OAuth")
@@ -833,10 +1051,10 @@
 
 class GoogleOAuth2Mixin(OAuth2Mixin):
     """Google authentication using OAuth2.
-
+    
     In order to use, register your application with Google and copy the
     relevant parameters to your application settings.
-
+    
     * Go to the Google Dev Console at http://console.developers.google.com
     * Select a project, or create a new one.
     * In the sidebar on the left, select APIs & Auth.
@@ -846,8 +1064,15 @@
     * Set the Redirect URI to point to your auth handler
     * Copy the "Client secret" and "Client ID" to the application settings as
       ``{"google_oauth": {"key": CLIENT_ID, "secret": CLIENT_SECRET}}``
-
+    
     .. versionadded:: 3.2
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     _OAUTH_AUTHORIZE_URL = "https://accounts.google.com/o/oauth2/v2/auth"
@@ -875,6 +1100,7 @@
 
             class GoogleOAuth2LoginHandler(tornado.web.RequestHandler,
                                            tornado.auth.GoogleOAuth2Mixin):
+                """ """
                 async def get(self):
                     if self.get_argument('code', False):
                         access = await self.get_authenticated_user(
@@ -945,6 +1171,7 @@
 
             class FacebookGraphLoginHandler(tornado.web.RequestHandler,
                                             tornado.auth.FacebookGraphMixin):
+                """ """
               async def get(self):
                   if self.get_argument("code", False):
                       user = await self.get_authenticated_user(
@@ -1063,6 +1290,7 @@
 
             class MainHandler(tornado.web.RequestHandler,
                               tornado.auth.FacebookGraphMixin):
+                """ """
                 @tornado.web.authenticated
                 async def get(self):
                     new_entry = await self.facebook_request(
@@ -1107,8 +1335,29 @@
     token: Optional[Dict[str, Any]] = None,
 ) -> bytes:
     """Calculates the HMAC-SHA1 OAuth signature for the given request.
-
+    
     See http://oauth.net/core/1.0/#signing_process
+
+    Parameters
+    ----------
+    consumer_token: Dict[str :
+        
+    Any] :
+         (Default value = {})
+    method: str :
+        
+    url: str :
+        
+    parameters: Dict[str :
+        
+    token: Optional[Dict[str :
+        
+    Any]] :
+         (Default value = None)
+
+    Returns
+    -------
+
     """
     parts = urllib.parse.urlparse(url)
     scheme, netloc, path = parts[:3]
@@ -1140,8 +1389,29 @@
     token: Optional[Dict[str, Any]] = None,
 ) -> bytes:
     """Calculates the HMAC-SHA1 OAuth 1.0a signature for the given request.
-
+    
     See http://oauth.net/core/1.0a/#signing_process
+
+    Parameters
+    ----------
+    consumer_token: Dict[str :
+        
+    Any] :
+         (Default value = {})
+    method: str :
+        
+    url: str :
+        
+    parameters: Dict[str :
+        
+    token: Optional[Dict[str :
+        
+    Any]] :
+         (Default value = None)
+
+    Returns
+    -------
+
     """
     parts = urllib.parse.urlparse(url)
     scheme, netloc, path = parts[:3]
@@ -1168,12 +1438,36 @@
 
 
 def _oauth_escape(val: Union[str, bytes]) -> str:
+    """
+
+    Parameters
+    ----------
+    val: Union[str :
+        
+    bytes] :
+        
+
+    Returns
+    -------
+
+    """
     if isinstance(val, unicode_type):
         val = val.encode("utf-8")
     return urllib.parse.quote(val, safe="~")
 
 
 def _oauth_parse_response(body: bytes) -> Dict[str, Any]:
+    """
+
+    Parameters
+    ----------
+    body: bytes :
+        
+
+    Returns
+    -------
+
+    """
     # I can't find an officially-defined encoding for oauth responses and
     # have never seen anyone use non-ascii.  Leave the response in a byte
     # string for python 2, and use utf8 on python 3.
