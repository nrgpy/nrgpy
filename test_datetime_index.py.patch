# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/resample/test_datetime_index.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/resample/test_datetime_index.py
@@ -23,20 +23,44 @@
 
 @pytest.fixture()
 def _index_factory():
+    """ """
     return date_range
 
 
 @pytest.fixture
 def _index_freq():
+    """ """
     return "Min"
 
 
 @pytest.fixture
 def _static_values(index):
+    """
+
+    Parameters
+    ----------
+    index :
+        
+
+    Returns
+    -------
+
+    """
     return np.random.rand(len(index))
 
 
 def test_custom_grouper(index):
+    """
+
+    Parameters
+    ----------
+    index :
+        
+
+    Returns
+    -------
+
+    """
 
     dti = index
     s = Series(np.array([1] * len(dti)), index=dti, dtype="int64")
@@ -103,6 +127,21 @@
     ],
 )
 def test_resample_basic(series, closed, expected):
+    """
+
+    Parameters
+    ----------
+    series :
+        
+    closed :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     s = series
     expected = expected(s)
     result = s.resample("5min", closed=closed, label="right").mean()
@@ -110,6 +149,7 @@
 
 
 def test_resample_integerarray():
+    """ """
     # GH 25580, resample on IntegerArray
     ts = pd.Series(
         range(9), index=pd.date_range("1/1/2000", periods=9, freq="T"), dtype="Int64"
@@ -130,6 +170,17 @@
 
 
 def test_resample_basic_grouper(series):
+    """
+
+    Parameters
+    ----------
+    series :
+        
+
+    Returns
+    -------
+
+    """
     s = series
     result = s.resample("5Min").last()
     grouper = Grouper(freq=Minute(5), closed="left", label="left")
@@ -146,6 +197,21 @@
     [("label", "righttt"), ("closed", "righttt"), ("convention", "starttt")],
 )
 def test_resample_string_kwargs(series, keyword, value):
+    """
+
+    Parameters
+    ----------
+    series :
+        
+    keyword :
+        
+    value :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-19303
     # Check that wrong keyword argument strings raise an error
     msg = f"Unsupported value {value} for `{keyword}`"
@@ -158,6 +224,19 @@
     [("1/1/2000 00:00:00", "1/1/2000 00:13:00", "index")],
 )
 def test_resample_how(series, downsample_method):
+    """
+
+    Parameters
+    ----------
+    series :
+        
+    downsample_method :
+        
+
+    Returns
+    -------
+
+    """
     if downsample_method == "ohlc":
         pytest.skip("covered by test_resample_how_ohlc")
 
@@ -181,6 +260,17 @@
     [("1/1/2000 00:00:00", "1/1/2000 00:13:00", "index")],
 )
 def test_resample_how_ohlc(series):
+    """
+
+    Parameters
+    ----------
+    series :
+        
+
+    Returns
+    -------
+
+    """
     s = series
     grouplist = np.ones_like(s)
     grouplist[0] = 0
@@ -189,6 +279,17 @@
     grouplist[11:] = 3
 
     def _ohlc(group):
+        """
+
+        Parameters
+        ----------
+        group :
+            
+
+        Returns
+        -------
+
+        """
         if isna(group).all():
             return np.repeat(np.nan, 4)
         return [group[0], group.max(), group.min(), group[-1]]
@@ -205,6 +306,17 @@
 
 @pytest.mark.parametrize("func", ["min", "max", "sum", "prod", "mean", "var", "std"])
 def test_numpy_compat(func):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-12811
     s = Series([1, 2, 3, 4, 5], index=date_range("20130101", periods=5, freq="s"))
     r = s.resample("2s")
@@ -218,15 +330,30 @@
 
 
 def test_resample_how_callables():
+    """ """
     # GH#7929
     data = np.arange(5, dtype=np.int64)
     ind = date_range(start="2014-01-01", periods=len(data), freq="d")
     df = DataFrame({"A": data, "B": data}, index=ind)
 
     def fn(x, a=1):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+        a :
+             (Default value = 1)
+
+        Returns
+        -------
+
+        """
         return str(type(x))
 
     class FnClass:
+        """ """
         def __call__(self, x):
             return str(type(x))
 
@@ -243,6 +370,7 @@
 
 
 def test_resample_rounding():
+    """ """
     # GH 8371
     # odd results when rounding is needed
 
@@ -305,6 +433,7 @@
 
 
 def test_resample_basic_from_daily():
+    """ """
     # from daily
     dti = date_range(
         start=datetime(2005, 1, 1), end=datetime(2005, 1, 10), freq="D", name="index"
@@ -363,6 +492,7 @@
 
 
 def test_resample_upsampling_picked_but_not_correct():
+    """ """
 
     # Test for issue #3020
     dates = date_range("01-Jan-2014", "05-Jan-2014", freq="D")
@@ -392,6 +522,7 @@
 
 
 def test_resample_frame_basic():
+    """ """
     df = tm.makeTimeDataFrame()
 
     b = Grouper(freq="M")
@@ -413,6 +544,7 @@
 
 
 def test_resample_upsample():
+    """ """
     # from daily
     dti = date_range(
         start=datetime(2005, 1, 1), end=datetime(2005, 1, 10), freq="D", name="index"
@@ -430,6 +562,7 @@
 
 
 def test_resample_how_method():
+    """ """
     # GH9915
     s = Series(
         [11, 22],
@@ -457,6 +590,7 @@
 
 
 def test_resample_extra_index_point():
+    """ """
     # GH#9756
     index = date_range(start="20150101", end="20150331", freq="BM")
     expected = DataFrame({"A": Series([21, 41, 63], index=index)})
@@ -468,6 +602,7 @@
 
 
 def test_upsample_with_limit():
+    """ """
     rng = date_range("1/1/2000", periods=3, freq="5t")
     ts = Series(np.random.randn(len(rng)), rng)
 
@@ -479,6 +614,21 @@
 @pytest.mark.parametrize("freq", ["5D", "10H", "5Min", "10S"])
 @pytest.mark.parametrize("rule", ["Y", "3M", "15D", "30H", "15Min", "30S"])
 def test_nearest_upsample_with_limit(tz_aware_fixture, freq, rule):
+    """
+
+    Parameters
+    ----------
+    tz_aware_fixture :
+        
+    freq :
+        
+    rule :
+        
+
+    Returns
+    -------
+
+    """
     # GH 33939
     rng = date_range("1/1/2000", periods=3, freq=freq, tz=tz_aware_fixture)
     ts = Series(np.random.randn(len(rng)), rng)
@@ -489,6 +639,17 @@
 
 
 def test_resample_ohlc(series):
+    """
+
+    Parameters
+    ----------
+    series :
+        
+
+    Returns
+    -------
+
+    """
     s = series
 
     grouper = Grouper(freq=Minute(5))
@@ -512,6 +673,7 @@
 
 
 def test_resample_ohlc_result():
+    """ """
 
     # GH 12332
     index = pd.date_range("1-1-2000", "2-15-2000", freq="h")
@@ -542,6 +704,7 @@
 
 
 def test_resample_ohlc_dataframe():
+    """ """
     df = (
         DataFrame(
             {
@@ -587,6 +750,7 @@
 
 
 def test_resample_dup_index():
+    """ """
 
     # GH 4812
     # dup columns with resample raising
@@ -603,6 +767,7 @@
 
 
 def test_resample_reresample():
+    """ """
     dti = date_range(start=datetime(2005, 1, 1), end=datetime(2005, 1, 10), freq="D")
     s = Series(np.random.rand(len(dti)), dti)
     bs = s.resample("B", closed="right", label="right").mean()
@@ -613,6 +778,17 @@
 
 
 def test_resample_timestamp_to_period(simple_date_range_series):
+    """
+
+    Parameters
+    ----------
+    simple_date_range_series :
+        
+
+    Returns
+    -------
+
+    """
     ts = simple_date_range_series("1/1/1990", "1/1/2000")
 
     result = ts.resample("A-DEC", kind="period").mean()
@@ -637,7 +813,19 @@
 
 
 def test_ohlc_5min():
+    """ """
     def _ohlc(group):
+        """
+
+        Parameters
+        ----------
+        group :
+            
+
+        Returns
+        -------
+
+        """
         if isna(group).all():
             return np.repeat(np.nan, 4)
         return [group[0], group.max(), group.min(), group[-1]]
@@ -657,6 +845,7 @@
 
 
 def test_downsample_non_unique():
+    """ """
     rng = date_range("1/1/2000", "2/29/2000")
     rng2 = rng.repeat(5).values
     ts = Series(np.random.randn(len(rng2)), index=rng2)
@@ -670,6 +859,7 @@
 
 
 def test_asfreq_non_unique():
+    """ """
     # GH #1077
     rng = date_range("1/1/2000", "2/29/2000")
     rng2 = rng.repeat(2).values
@@ -681,6 +871,7 @@
 
 
 def test_resample_axis1():
+    """ """
     rng = date_range("1/1/2000", "2/29/2000")
     df = DataFrame(np.random.randn(3, len(rng)), columns=rng, index=["a", "b", "c"])
 
@@ -690,6 +881,7 @@
 
 
 def test_resample_anchored_ticks():
+    """ """
     # If a fixed delta (5 minute, 4 hour) evenly divides a day, we should
     # "anchor" the origin at midnight so we get regular intervals rather
     # than starting from the first timestamp which might start in the
@@ -707,6 +899,7 @@
 
 
 def test_resample_single_group():
+    """ """
     mysum = lambda x: x.sum()
 
     rng = date_range("2000-1-1", "2000-2-10", freq="D")
@@ -728,6 +921,7 @@
 
 
 def test_resample_offset():
+    """ """
     # GH 31809
 
     rng = date_range("1/1/2000 00:00:00", "1/1/2000 02:00", freq="s")
@@ -739,6 +933,7 @@
 
 
 def test_resample_origin():
+    """ """
     # GH 31809
     rng = date_range("2000-01-01 00:00:00", "2000-01-01 02:00", freq="s")
     ts = Series(np.random.randn(len(rng)), index=rng)
@@ -767,6 +962,17 @@
     "origin", ["invalid_value", "epch", "startday", "startt", "2000-30-30", object()],
 )
 def test_resample_bad_origin(origin):
+    """
+
+    Parameters
+    ----------
+    origin :
+        
+
+    Returns
+    -------
+
+    """
     rng = date_range("2000-01-01 00:00:00", "2000-01-01 02:00", freq="s")
     ts = Series(np.random.randn(len(rng)), index=rng)
     msg = (
@@ -781,6 +987,17 @@
     "offset", ["invalid_value", "12dayys", "2000-30-30", object()],
 )
 def test_resample_bad_offset(offset):
+    """
+
+    Parameters
+    ----------
+    offset :
+        
+
+    Returns
+    -------
+
+    """
     rng = date_range("2000-01-01 00:00:00", "2000-01-01 02:00", freq="s")
     ts = Series(np.random.randn(len(rng)), index=rng)
     msg = f"'offset' should be a Timedelta convertible type. Got '{offset}' instead."
@@ -789,6 +1006,7 @@
 
 
 def test_resample_origin_prime_freq():
+    """ """
     # GH 31809
     start, end = "2000-10-01 23:30:00", "2000-10-02 00:30:00"
     rng = pd.date_range(start, end, freq="7min")
@@ -818,6 +1036,7 @@
 
 
 def test_resample_origin_with_tz():
+    """ """
     # GH 31809
     msg = "The origin must have the same timezone as the index."
 
@@ -847,6 +1066,7 @@
 
 
 def test_resample_origin_epoch_with_tz_day_vs_24h():
+    """ """
     # GH 34474
     start, end = "2000-10-01 23:30:00+0500", "2000-12-02 00:30:00+0500"
     rng = pd.date_range(start, end, freq="7min")
@@ -875,10 +1095,26 @@
 
 
 def test_resample_origin_with_day_freq_on_dst():
+    """ """
     # GH 31809
     tz = "America/Chicago"
 
     def _create_series(values, timestamps, freq="D"):
+        """
+
+        Parameters
+        ----------
+        values :
+            
+        timestamps :
+            
+        freq :
+             (Default value = "D")
+
+        Returns
+        -------
+
+        """
         return pd.Series(
             values,
             index=pd.DatetimeIndex(
@@ -930,6 +1166,7 @@
 
 
 def test_resample_daily_anchored():
+    """ """
     rng = date_range("1/1/2000 0:00:00", periods=10000, freq="T")
     ts = Series(np.random.randn(len(rng)), index=rng)
     ts[:2] = np.nan  # so results are the same
@@ -940,6 +1177,7 @@
 
 
 def test_resample_to_period_monthly_buglet():
+    """ """
     # GH #1259
 
     rng = date_range("1/1/2000", "12/31/2000")
@@ -951,6 +1189,7 @@
 
 
 def test_period_with_agg():
+    """ """
 
     # aggregate a period resampler with a lambda
     s2 = Series(
@@ -965,6 +1204,7 @@
 
 
 def test_resample_segfault():
+    """ """
     # GH 8573
     # segfaulting in older versions
     all_wins_and_wagers = [
@@ -983,6 +1223,7 @@
 
 
 def test_resample_dtype_preservation():
+    """ """
 
     # GH 12202
     # validation tests for dtype preservation
@@ -1003,6 +1244,7 @@
 
 
 def test_resample_dtype_coercion():
+    """ """
 
     pytest.importorskip("scipy.interpolate")
 
@@ -1020,6 +1262,7 @@
 
 
 def test_weekly_resample_buglet():
+    """ """
     # #1327
     rng = date_range("1/1/2000", freq="B", periods=20)
     ts = Series(np.random.randn(len(rng)), index=rng)
@@ -1030,6 +1273,7 @@
 
 
 def test_monthly_resample_error():
+    """ """
     # #1451
     dates = date_range("4/16/2012 20:00", periods=5000, freq="h")
     ts = Series(np.random.randn(len(dates)), index=dates)
@@ -1038,6 +1282,7 @@
 
 
 def test_nanosecond_resample_error():
+    """ """
     # GH 12307 - Values falls after last bin when
     # Resampling using pd.tseries.offsets.Nano as period
     start = 1443707890427
@@ -1054,6 +1299,17 @@
 
 
 def test_resample_anchored_intraday(simple_date_range_series):
+    """
+
+    Parameters
+    ----------
+    simple_date_range_series :
+        
+
+    Returns
+    -------
+
+    """
     # #1471, #1458
 
     rng = date_range("1/1/2012", "4/1/2012", freq="100min")
@@ -1099,6 +1355,17 @@
 
 
 def test_resample_anchored_monthstart(simple_date_range_series):
+    """
+
+    Parameters
+    ----------
+    simple_date_range_series :
+        
+
+    Returns
+    -------
+
+    """
     ts = simple_date_range_series("1/1/2000", "12/31/2002")
 
     freqs = ["MS", "BMS", "QS-MAR", "AS-DEC", "AS-JUN"]
@@ -1108,6 +1375,7 @@
 
 
 def test_resample_anchored_multiday():
+    """ """
     # When resampling a range spanning multiple days, ensure that the
     # start date gets used to determine the offset.  Fixes issue where
     # a one day period is not a multiple of the frequency.
@@ -1130,6 +1398,19 @@
 
 
 def test_corner_cases(simple_period_range_series, simple_date_range_series):
+    """
+
+    Parameters
+    ----------
+    simple_period_range_series :
+        
+    simple_date_range_series :
+        
+
+    Returns
+    -------
+
+    """
     # miscellaneous test coverage
 
     rng = date_range("1/1/2000", periods=12, freq="t")
@@ -1152,6 +1433,7 @@
 
 
 def test_anchored_lowercase_buglet():
+    """ """
     dates = date_range("4/16/2012 20:00", periods=50000, freq="s")
     ts = Series(np.random.randn(len(dates)), index=dates)
     # it works!
@@ -1159,6 +1441,7 @@
 
 
 def test_upsample_apply_functions():
+    """ """
     # #1596
     rng = pd.date_range("2012-06-12", periods=4, freq="h")
 
@@ -1169,6 +1452,7 @@
 
 
 def test_resample_not_monotonic():
+    """ """
     rng = pd.date_range("2012-06-12", periods=200, freq="h")
     ts = Series(np.random.randn(len(rng)), index=rng)
 
@@ -1180,6 +1464,7 @@
 
 
 def test_resample_median_bug_1688():
+    """ """
 
     for dtype in ["int64", "int32", "float64", "float32"]:
         df = DataFrame(
@@ -1198,6 +1483,17 @@
 
 
 def test_how_lambda_functions(simple_date_range_series):
+    """
+
+    Parameters
+    ----------
+    simple_date_range_series :
+        
+
+    Returns
+    -------
+
+    """
 
     ts = simple_date_range_series("1/1/2000", "4/1/2000")
 
@@ -1225,6 +1521,7 @@
 
 
 def test_resample_unequal_times():
+    """ """
     # #1772
     start = datetime(1999, 3, 1, 5)
     # end hour is less than start
@@ -1237,6 +1534,7 @@
 
 
 def test_resample_consistency():
+    """ """
 
     # GH 6418
     # resample with bfill / limit / reindex consistency
@@ -1261,6 +1559,7 @@
 
 
 def test_resample_timegrouper():
+    """ """
     # GH 7227
     dates1 = [
         datetime(2014, 10, 1),
@@ -1306,6 +1605,7 @@
 
 
 def test_resample_nunique():
+    """ """
 
     # GH 12352
     df = DataFrame(
@@ -1337,6 +1637,7 @@
 
 
 def test_resample_nunique_preserves_column_level_names():
+    """ """
     # see gh-23222
     df = tm.makeTimeDataFrame(freq="1D").abs()
     df.columns = pd.MultiIndex.from_arrays(
@@ -1347,6 +1648,7 @@
 
 
 def test_resample_nunique_with_date_gap():
+    """ """
     # GH 13453
     index = pd.date_range("1-1-2000", "2-15-2000", freq="h")
     index2 = pd.date_range("4-15-2000", "5-15-2000", freq="h")
@@ -1365,6 +1667,19 @@
 @pytest.mark.parametrize("n", [10000, 100000])
 @pytest.mark.parametrize("k", [10, 100, 1000])
 def test_resample_group_info(n, k):
+    """
+
+    Parameters
+    ----------
+    n :
+        
+    k :
+        
+
+    Returns
+    -------
+
+    """
     # GH10914
 
     # use a fixed seed to always have the same uniques
@@ -1392,6 +1707,7 @@
 
 
 def test_resample_size():
+    """ """
     n = 10000
     dr = date_range("2015-09-19", periods=n, freq="T")
     ts = Series(np.random.randn(n), index=np.random.choice(dr, n))
@@ -1407,6 +1723,7 @@
 
 
 def test_resample_across_dst():
+    """ """
     # The test resamples a DatetimeIndex with values before and after a
     # DST change
     # Issue: 14682
@@ -1439,6 +1756,7 @@
 
 
 def test_groupby_with_dst_time_change():
+    """ """
     # GH 24972
     index = pd.DatetimeIndex(
         [1478064900001000000, 1480037118776792000], tz="UTC"
@@ -1456,6 +1774,7 @@
 
 
 def test_resample_dst_anchor():
+    """ """
     # 5172
     dti = DatetimeIndex([datetime(2012, 11, 4, 23)], tz="US/Eastern")
     df = DataFrame([5], index=dti)
@@ -1541,6 +1860,7 @@
 
 
 def test_downsample_across_dst():
+    """ """
     # GH 8531
     tz = pytz.timezone("Europe/Berlin")
     dt = datetime(2014, 10, 26)
@@ -1554,6 +1874,7 @@
 
 
 def test_downsample_across_dst_weekly():
+    """ """
     # GH 9119, GH 21459
     df = DataFrame(
         index=DatetimeIndex(
@@ -1582,6 +1903,7 @@
 
 
 def test_downsample_dst_at_midnight():
+    """ """
     # GH 25758
     start = datetime(2018, 11, 3, 12)
     end = datetime(2018, 11, 5, 12)
@@ -1600,6 +1922,7 @@
 
 
 def test_resample_with_nat():
+    """ """
     # GH 13020
     index = DatetimeIndex(
         [
@@ -1630,6 +1953,7 @@
 
 
 def test_resample_datetime_values():
+    """ """
     # GH 13119
     # check that datetime dtype is preserved when NaT values are
     # introduced by the resampling
@@ -1650,8 +1974,32 @@
 
 
 def test_resample_apply_with_additional_args(series):
+    """
+
+    Parameters
+    ----------
+    series :
+        
+
+    Returns
+    -------
+
+    """
     # GH 14615
     def f(data, add_arg):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        add_arg :
+            
+
+        Returns
+        -------
+
+        """
         return np.mean(data) * add_arg
 
     multiplier = 10
@@ -1688,6 +2036,25 @@
     ],
 )
 def test_resample_equivalent_offsets(n1, freq1, n2, freq2, k):
+    """
+
+    Parameters
+    ----------
+    n1 :
+        
+    freq1 :
+        
+    n2 :
+        
+    freq2 :
+        
+    k :
+        
+
+    Returns
+    -------
+
+    """
     # GH 24127
     n1_ = n1 * k
     n2_ = n2 * k
@@ -1713,6 +2080,25 @@
     ],
 )
 def test_get_timestamp_range_edges(first, last, freq, exp_first, exp_last):
+    """
+
+    Parameters
+    ----------
+    first :
+        
+    last :
+        
+    freq :
+        
+    exp_first :
+        
+    exp_last :
+        
+
+    Returns
+    -------
+
+    """
     first = pd.Period(first)
     first = first.to_timestamp(first.freq)
     last = pd.Period(last)
@@ -1728,6 +2114,7 @@
 
 
 def test_resample_apply_product():
+    """ """
     # GH 5586
     index = date_range(start="2012-01-31", freq="M", periods=12)
 
