# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexing/test_iloc.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexing/test_iloc.py
@@ -15,7 +15,9 @@
 
 
 class TestiLoc(Base):
+    """ """
     def test_iloc_getitem_int(self):
+        """ """
         # integer
         self.check_result(
             "iloc",
@@ -25,6 +27,7 @@
         )
 
     def test_iloc_getitem_neg_int(self):
+        """ """
         # neg integer
         self.check_result(
             "iloc",
@@ -34,6 +37,7 @@
         )
 
     def test_iloc_getitem_list_int(self):
+        """ """
         self.check_result(
             "iloc",
             [0, 1, 2],
@@ -46,9 +50,11 @@
 
 
 class TestiLoc2:
+    """ """
     # TODO: better name, just separating out things that dont rely on base class
 
     def test_is_scalar_access(self):
+        """ """
         # GH#32085 index with duplicates doesnt matter for _is_scalar_access
         index = pd.Index([1, 2, 1])
         ser = pd.Series(range(3), index=index)
@@ -59,6 +65,7 @@
         assert df.iloc._is_scalar_access((1, 0,))
 
     def test_iloc_exceeds_bounds(self):
+        """ """
 
         # GH6296
         # iloc should allow indexers that exceed the bounds
@@ -144,6 +151,19 @@
 
         # doc example
         def check(result, expected):
+            """
+
+            Parameters
+            ----------
+            result :
+                
+            expected :
+                
+
+            Returns
+            -------
+
+            """
             str(result)
             result.dtypes
             tm.assert_frame_equal(result, expected)
@@ -170,6 +190,23 @@
         ],
     )
     def test_iloc_non_integer_raises(self, index, columns, index_vals, column_vals):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+        columns :
+            
+        index_vals :
+            
+        column_vals :
+            
+
+        Returns
+        -------
+
+        """
         # GH 25753
         df = DataFrame(
             np.random.randn(len(index), len(columns)), index=index, columns=columns
@@ -180,6 +217,17 @@
 
     @pytest.mark.parametrize("dims", [1, 2])
     def test_iloc_getitem_invalid_scalar(self, dims):
+        """
+
+        Parameters
+        ----------
+        dims :
+            
+
+        Returns
+        -------
+
+        """
         # GH 21982
 
         if dims == 1:
@@ -191,6 +239,7 @@
             s.iloc["a"]
 
     def test_iloc_array_not_mutating_negative_indices(self):
+        """ """
 
         # GH 21867
         array_with_neg_numbers = np.array([1, 2, -1])
@@ -205,6 +254,7 @@
         tm.assert_numpy_array_equal(array_with_neg_numbers, array_copy)
 
     def test_iloc_getitem_neg_int_can_reach_first_index(self):
+        """ """
         # GH10547 and GH10779
         # negative integers should be able to reach index 0
         df = DataFrame({"A": [2, 3, 5], "B": [7, 11, 13]})
@@ -232,6 +282,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_iloc_getitem_dups(self):
+        """ """
         # GH 6766
         df1 = DataFrame([{"A": None, "B": 1}, {"A": 2, "B": 2}])
         df2 = DataFrame([{"A": 3, "B": 3}, {"A": 4, "B": 4}])
@@ -246,15 +297,28 @@
         tm.assert_series_equal(result, expected)
 
     def test_iloc_getitem_array(self):
+        """ """
         # TODO: test something here?
         pass
 
     def test_iloc_getitem_bool(self):
+        """ """
         # TODO: test something here?
         pass
 
     @pytest.mark.parametrize("index", [[True, False], [True, False, True, False]])
     def test_iloc_getitem_bool_diff_len(self, index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         # GH26658
         s = Series([1, 2, 3])
         msg = f"Boolean index has wrong length: {len(index)} instead of {len(s)}"
@@ -262,10 +326,12 @@
             _ = s.iloc[index]
 
     def test_iloc_getitem_slice(self):
+        """ """
         # TODO: test something here?
         pass
 
     def test_iloc_getitem_slice_dups(self):
+        """ """
 
         df1 = DataFrame(np.random.randn(10, 4), columns=["A", "A", "B", "B"])
         df2 = DataFrame(
@@ -292,6 +358,7 @@
         tm.assert_frame_equal(df.iloc[10:, 2:], df1)
 
     def test_iloc_setitem(self):
+        """ """
         df = DataFrame(
             np.random.randn(4, 4), index=np.arange(0, 8, 2), columns=np.arange(0, 12, 3)
         )
@@ -312,6 +379,7 @@
         tm.assert_series_equal(s, expected)
 
     def test_iloc_setitem_list(self):
+        """ """
 
         # setitem with an iloc list
         df = DataFrame(
@@ -328,6 +396,7 @@
         tm.assert_frame_equal(df, expected)
 
     def test_iloc_setitem_pandas_object(self):
+        """ """
         # GH 17193
         s_orig = Series([0, 1, 2, 3])
         expected = Series([0, -1, -2, 3])
@@ -341,6 +410,7 @@
         tm.assert_series_equal(s, expected)
 
     def test_iloc_setitem_dups(self):
+        """ """
 
         # GH 6766
         # iloc with a mask aligning from another iloc
@@ -372,6 +442,7 @@
     # TODO: GH#27620 this test used to compare iloc against ix; check if this
     #  is redundant with another test comparing iloc against loc
     def test_iloc_getitem_frame(self):
+        """ """
         df = DataFrame(
             np.random.randn(10, 4), index=range(0, 20, 2), columns=range(0, 8, 2)
         )
@@ -419,6 +490,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_iloc_getitem_labelled_frame(self):
+        """ """
         # try with labelled frame
         df = DataFrame(
             np.random.randn(10, 4), index=list("abcdefghij"), columns=list("ABCD")
@@ -452,6 +524,7 @@
             df.iloc["j", "D"]
 
     def test_iloc_getitem_doc_issue(self):
+        """ """
 
         # multi axis slicing issue with single block
         # surfaced in GH 6059
@@ -494,6 +567,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_iloc_setitem_series(self):
+        """ """
         df = DataFrame(
             np.random.randn(10, 4), index=list("abcdefghij"), columns=list("ABCD")
         )
@@ -526,6 +600,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_iloc_setitem_list_of_lists(self):
+        """ """
 
         # GH 7551
         # list-of-list is set incorrectly in mixed vs. single dtyped frames
@@ -544,6 +619,19 @@
     @pytest.mark.parametrize("indexer", [[0], slice(None, 1, None), np.array([0])])
     @pytest.mark.parametrize("value", [["Z"], np.array(["Z"])])
     def test_iloc_setitem_with_scalar_index(self, indexer, value):
+        """
+
+        Parameters
+        ----------
+        indexer :
+            
+        value :
+            
+
+        Returns
+        -------
+
+        """
         # GH #19474
         # assigning like "df.iloc[0, [0]] = ['Z']" should be evaluated
         # elementwisely, not using "setter('A', ['Z'])".
@@ -555,6 +643,7 @@
         assert is_scalar(result) and result == "Z"
 
     def test_iloc_mask(self):
+        """ """
 
         # GH 3631, iloc with a mask (of a series) should raise
         df = DataFrame(list(range(5)), index=list("ABCDE"), columns=["a"])
@@ -624,6 +713,7 @@
                         )
 
     def test_iloc_non_unique_indexing(self):
+        """ """
 
         # GH 4017, non-unique indexing (on the axis)
         df = DataFrame({"A": [0.1] * 3000, "B": [1] * 3000})
@@ -642,6 +732,7 @@
             df2.loc[idx]
 
     def test_iloc_empty_list_indexer_is_ok(self):
+        """ """
 
         df = tm.makeCustomDataframe(5, 2)
         # vertical empty
@@ -664,6 +755,7 @@
         )
 
     def test_identity_slice_returns_new_object(self):
+        """ """
         # GH13873
         original_df = DataFrame({"a": [1, 2, 3]})
         sliced_df = original_df.iloc[:]
@@ -682,6 +774,7 @@
         assert all(sliced_series[:3] == [7, 8, 9])
 
     def test_indexing_zerodim_np_array(self):
+        """ """
         # GH24919
         df = DataFrame([[1, 2], [3, 4]])
         result = df.iloc[np.array(0)]
@@ -689,6 +782,7 @@
         tm.assert_series_equal(result, s)
 
     def test_series_indexing_zerodim_np_array(self):
+        """ """
         # GH24919
         s = Series([1, 2])
         result = s.iloc[np.array(0)]
@@ -696,6 +790,7 @@
 
     @pytest.mark.xfail(reason="https://github.com/pandas-dev/pandas/issues/33457")
     def test_iloc_setitem_categorical_updates_inplace(self):
+        """ """
         # Mixed dtype ensures we go through take_split_path in setitem_with_indexer
         cat = pd.Categorical(["A", "B", "C"])
         df = pd.DataFrame({1: cat, 2: [1, 2, 3]})
@@ -707,6 +802,7 @@
         tm.assert_categorical_equal(cat, expected)
 
     def test_iloc_with_boolean_operation(self):
+        """ """
         # GH 20627
         result = DataFrame([[0, 1], [2, 3], [4, 5], [6, np.nan]])
         result.iloc[result.index <= 2] *= 2
@@ -727,7 +823,9 @@
 
 
 class TestILocSetItemDuplicateColumns:
+    """ """
     def test_iloc_setitem_scalar_duplicate_columns(self):
+        """ """
         # GH#15686, duplicate columns and mixed dtype
         df1 = pd.DataFrame([{"A": None, "B": 1}, {"A": 2, "B": 2}])
         df2 = pd.DataFrame([{"A": 3, "B": 3}, {"A": 4, "B": 4}])
@@ -739,6 +837,7 @@
         assert df.dtypes.iloc[2] == np.int64
 
     def test_iloc_setitem_list_duplicate_columns(self):
+        """ """
         # GH#22036 setting with same-sized list
         df = pd.DataFrame([[0, "str", "str2"]], columns=["a", "b", "b"])
 
@@ -748,6 +847,7 @@
         tm.assert_frame_equal(df, expected)
 
     def test_iloc_setitem_series_duplicate_columns(self):
+        """ """
         df = pd.DataFrame(
             np.arange(8, dtype=np.int64).reshape(2, 4), columns=["A", "B", "A", "B"]
         )
