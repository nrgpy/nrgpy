# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/indexes/accessors.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/indexes/accessors.py
@@ -28,6 +28,7 @@
 
 
 class Properties(PandasDelegate, PandasObject, NoNewAttributesMixin):
+    """ """
     def __init__(self, data: "Series", orig):
         if not isinstance(data, ABCSeries):
             raise TypeError(
@@ -40,6 +41,7 @@
         self._freeze()
 
     def _get_values(self):
+        """ """
         data = self._parent
         if is_datetime64_dtype(data.dtype):
             return DatetimeIndex(data, copy=False, name=self.name)
@@ -58,6 +60,17 @@
         )
 
     def _delegate_property_get(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         from pandas import Series
 
         values = self._get_values()
@@ -90,12 +103,44 @@
         return result
 
     def _delegate_property_set(self, name, value, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+        value :
+            
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         raise ValueError(
             "modifications to a property of a datetimelike object are not supported. "
             "Change values on the original."
         )
 
     def _delegate_method(self, name, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         from pandas import Series
 
         values = self._get_values()
@@ -125,62 +170,21 @@
     delegate=DatetimeArray, accessors=DatetimeArray._datetimelike_methods, typ="method"
 )
 class DatetimeProperties(Properties):
-    """
-    Accessor object for datetimelike properties of the Series values.
-
-    Examples
-    --------
-    >>> seconds_series = pd.Series(pd.date_range("2000-01-01", periods=3, freq="s"))
-    >>> seconds_series
-    0   2000-01-01 00:00:00
-    1   2000-01-01 00:00:01
-    2   2000-01-01 00:00:02
-    dtype: datetime64[ns]
-    >>> seconds_series.dt.second
-    0    0
-    1    1
-    2    2
-    dtype: int64
-
-    >>> hours_series = pd.Series(pd.date_range("2000-01-01", periods=3, freq="h"))
-    >>> hours_series
-    0   2000-01-01 00:00:00
-    1   2000-01-01 01:00:00
-    2   2000-01-01 02:00:00
-    dtype: datetime64[ns]
-    >>> hours_series.dt.hour
-    0    0
-    1    1
-    2    2
-    dtype: int64
-
-    >>> quarters_series = pd.Series(pd.date_range("2000-01-01", periods=3, freq="q"))
-    >>> quarters_series
-    0   2000-03-31
-    1   2000-06-30
-    2   2000-09-30
-    dtype: datetime64[ns]
-    >>> quarters_series.dt.quarter
-    0    1
-    1    2
-    2    3
-    dtype: int64
-
-    Returns a Series indexed like the original Series.
-    Raises TypeError if the Series does not contain datetimelike values.
-    """
+    """Accessor object for datetimelike properties of the Series values."""
 
     def to_pydatetime(self) -> np.ndarray:
-        """
-        Return the data as an array of native Python datetime objects.
-
+        """Return the data as an array of native Python datetime objects.
+        
         Timezone information is retained if present.
-
+        
         .. warning::
-
+        
            Python's datetime uses microsecond resolution, which is lower than
            pandas (nanosecond). The values are truncated.
 
+        Parameters
+        ----------
+
         Returns
         -------
         numpy.ndarray
@@ -189,27 +193,27 @@
         See Also
         --------
         datetime.datetime : Standard library value for a datetime.
-
         Examples
         --------
+        
+        
+        pandas' nanosecond precision is truncated to microseconds.
         >>> s = pd.Series(pd.date_range('20180310', periods=2))
         >>> s
         0   2018-03-10
         1   2018-03-11
         dtype: datetime64[ns]
-
+        
         >>> s.dt.to_pydatetime()
         array([datetime.datetime(2018, 3, 10, 0, 0),
                datetime.datetime(2018, 3, 11, 0, 0)], dtype=object)
-
-        pandas' nanosecond precision is truncated to microseconds.
-
+        
         >>> s = pd.Series(pd.date_range('20180310', periods=2, freq='ns'))
         >>> s
         0   2018-03-10 00:00:00.000000000
         1   2018-03-10 00:00:00.000000001
         dtype: datetime64[ns]
-
+        
         >>> s.dt.to_pydatetime()
         array([datetime.datetime(2018, 3, 10, 0, 0),
                datetime.datetime(2018, 3, 10, 0, 0)], dtype=object)
@@ -218,14 +222,17 @@
 
     @property
     def freq(self):
+        """ """
         return self._get_values().inferred_freq
 
     def isocalendar(self):
-        """
-        Returns a DataFrame with the year, week, and day calculated according to
+        """Returns a DataFrame with the year, week, and day calculated according to
         the ISO 8601 standard.
-
+        
         .. versionadded:: 1.1.0
+
+        Parameters
+        ----------
 
         Returns
         -------
@@ -236,7 +243,6 @@
         --------
         Timestamp.isocalendar
         datetime.date.isocalendar
-
         Examples
         --------
         >>> ser = pd.to_datetime(pd.Series(["2010-01-01", pd.NaT]))
@@ -253,13 +259,19 @@
 
     @property
     def weekofyear(self):
-        """
-        The week ordinal of the year.
-
+        """The week ordinal of the year.
+        
         .. deprecated:: 1.1.0
-
+        
         Series.dt.weekofyear and Series.dt.week have been deprecated.
         Please use Series.dt.isocalendar().week instead.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         warnings.warn(
             "Series.dt.weekofyear and Series.dt.week have been deprecated.  "
@@ -285,11 +297,16 @@
     typ="method",
 )
 class TimedeltaProperties(Properties):
-    """
-    Accessor object for datetimelike properties of the Series values.
-
+    """Accessor object for datetimelike properties of the Series values.
+    
     Returns a Series indexed like the original Series.
     Raises TypeError if the Series does not contain datetimelike values.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     Examples
     --------
@@ -309,14 +326,16 @@
     """
 
     def to_pytimedelta(self) -> np.ndarray:
-        """
-        Return an array of native `datetime.timedelta` objects.
-
+        """Return an array of native `datetime.timedelta` objects.
+        
         Python's standard `datetime` library uses a different representation
         timedelta's. This method converts a Series of pandas Timedeltas
         to `datetime.timedelta` format with the same length as the original
         Series.
 
+        Parameters
+        ----------
+
         Returns
         -------
         numpy.ndarray
@@ -325,7 +344,6 @@
         See Also
         --------
         datetime.timedelta
-
         Examples
         --------
         >>> s = pd.Series(pd.to_timedelta(np.arange(5), unit="d"))
@@ -336,7 +354,7 @@
         3   3 days
         4   4 days
         dtype: timedelta64[ns]
-
+        
         >>> s.dt.to_pytimedelta()
         array([datetime.timedelta(0), datetime.timedelta(days=1),
         datetime.timedelta(days=2), datetime.timedelta(days=3),
@@ -346,12 +364,15 @@
 
     @property
     def components(self):
-        """
-        Return a Dataframe of the components of the Timedeltas.
+        """Return a Dataframe of the components of the Timedeltas.
+
+        Parameters
+        ----------
 
         Returns
         -------
         DataFrame
+            
 
         Examples
         --------
@@ -375,6 +396,7 @@
 
     @property
     def freq(self):
+        """ """
         return self._get_values().inferred_freq
 
 
@@ -385,11 +407,16 @@
     delegate=PeriodArray, accessors=PeriodArray._datetimelike_methods, typ="method"
 )
 class PeriodProperties(Properties):
-    """
-    Accessor object for datetimelike properties of the Series values.
-
+    """Accessor object for datetimelike properties of the Series values.
+    
     Returns a Series indexed like the original Series.
     Raises TypeError if the Series does not contain datetimelike values.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     Examples
     --------
@@ -410,7 +437,7 @@
     2    2
     3    3
     dtype: int64
-
+    
     >>> hours_series = pd.Series(
     ...     pd.period_range(start="2000-01-01 00:00", end="2000-01-01 03:00", freq="h")
     ... )
@@ -426,7 +453,7 @@
     2    2
     3    3
     dtype: int64
-
+    
     >>> quarters_series = pd.Series(
     ...     pd.period_range(start="2000-01-01", end="2000-12-31", freq="Q-DEC")
     ... )
@@ -448,6 +475,7 @@
 class CombinedDatetimelikeProperties(
     DatetimeProperties, TimedeltaProperties, PeriodProperties
 ):
+    """ """
     def __new__(cls, data: "Series"):
         # CombinedDatetimelikeProperties isn't really instantiated. Instead
         # we need to choose which parent (datetime or timedelta) is
