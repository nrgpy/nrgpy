# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/displayhook.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/displayhook.py
@@ -22,9 +22,16 @@
 
 class DisplayHook(Configurable):
     """The custom IPython displayhook to replace sys.displayhook.
-
+    
     This class does many things, but the basic idea is that it is a callable
     that gets called anytime user code returns a value.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     shell = Instance('IPython.core.interactiveshell.InteractiveShellABC',
@@ -60,6 +67,7 @@
 
     @property
     def prompt_count(self):
+        """ """
         return self.shell.execution_count
 
     #-------------------------------------------------------------------------
@@ -108,9 +116,16 @@
 
     def write_output_prompt(self):
         """Write the output prompt.
-
+        
         The default implementation simply writes the prompt to
         ``sys.stdout``.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         # Use write, not print which adds an extra space.
         sys.stdout.write(self.shell.separate_out)
@@ -120,14 +135,14 @@
 
     def compute_format_data(self, result):
         """Compute format data of the object to be displayed.
-
+        
         The format data is a generalization of the :func:`repr` of an object.
         In the default implementation the format data is a :class:`dict` of
         key value pair where the keys are valid MIME types and the values
         are JSON'able data structure containing the raw data for that MIME
         type. It is up to frontends to determine pick a MIME to to use and
         display that data in an appropriate manner.
-
+        
         This method only computes the format data for the object and should
         NOT actually print or write that to a stream.
 
@@ -139,14 +154,8 @@
 
         Returns
         -------
-        (format_dict, md_dict) : dict
-            format_dict is a :class:`dict` whose keys are valid MIME types and values are
-            JSON'able raw data for that MIME type. It is recommended that
-            all return values of this should always include the "text/plain"
-            MIME type representation of the object.
-            md_dict is a :class:`dict` with the same MIME type keys
-            of metadata associated with each output.
-            
+
+        
         """
         return self.shell.display_formatter.format(result)
 
@@ -155,7 +164,7 @@
 
     def write_format_data(self, format_dict, md_dict=None) -> None:
         """Write the format data dict to the frontend.
-
+        
         This default version of this method simply writes the plain text
         representation of the object to ``sys.stdout``. Subclasses should
         override this method to send the entire `format_dict` to the
@@ -163,10 +172,15 @@
 
         Parameters
         ----------
-        format_dict : dict
-            The format dict for the object passed to `sys.displayhook`.
-        md_dict : dict (optional)
-            The metadata dict to be associated with the display data.
+        format_dict :
+            
+        md_dict :
+             (Default value = None)
+
+        Returns
+        -------
+
+        
         """
         if 'text/plain' not in format_dict:
             # nothing to do
@@ -195,7 +209,17 @@
             print(result_repr.encode(sys.stdout.encoding,'backslashreplace').decode(sys.stdout.encoding))
 
     def update_user_ns(self, result):
-        """Update user_ns with various things like _, __, _1, etc."""
+        """Update user_ns with various things like _, __, _1, etc.
+
+        Parameters
+        ----------
+        result :
+            
+
+        Returns
+        -------
+
+        """
 
         # Avoid recursive reference when displaying _oh/Out
         if self.cache_size and result is not self.shell.user_ns['_oh']:
@@ -231,11 +255,32 @@
                 self.shell.user_ns['_oh'][self.prompt_count] = result
 
     def fill_exec_result(self, result):
+        """
+
+        Parameters
+        ----------
+        result :
+            
+
+        Returns
+        -------
+
+        """
         if self.exec_result is not None:
             self.exec_result.result = result
 
     def log_output(self, format_dict):
-        """Log the output."""
+        """Log the output.
+
+        Parameters
+        ----------
+        format_dict :
+            
+
+        Returns
+        -------
+
+        """
         if 'text/plain' not in format_dict:
             # nothing to do
             return
@@ -283,6 +328,7 @@
         
 
     def flush(self):
+        """ """
         if not self.do_full_cache:
             raise ValueError("You shouldn't have reached the cache flush "
                              "if full caching is not enabled!")
@@ -312,6 +358,7 @@
 
 
 class CapturingDisplayHook(object):
+    """ """
     def __init__(self, shell, outputs=None):
         self.shell = shell
         if outputs is None:
