# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/utils/tests/test_module_paths.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/utils/tests/test_module_paths.py
@@ -37,13 +37,22 @@
 old_syspath = sys.path
 
 def make_empty_file(fname):
+    """
+
+    Parameters
+    ----------
+    fname :
+        
+
+    Returns
+    -------
+
+    """
     open(fname, 'w').close()
 
 
 def setup_module():
-    """Setup testenvironment for the module:
-
-    """
+    """Setup testenvironment for the module:"""
     # Do not mask exceptions here.  In particular, catching WindowsError is a
     # problem because that exception is only defined on Windows...
     os.makedirs(join(TMP_TEST_DIR, "xmod"))
@@ -56,9 +65,16 @@
 
 def teardown_module():
     """Teardown testenvironment for the module:
-
+    
             - Remove tempdir
             - restore sys.path
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     # Note: we remove the parent test dir, which is the root of all test
     # subdirs we may have created.  Use shutil instead of os.removedirs, so
@@ -67,48 +83,76 @@
     sys.path = old_syspath
 
 def test_tempdir():
-    """
-    Ensure the test are done with a temporary file that have a dot somewhere.
-    """
+    """Ensure the test are done with a temporary file that have a dot somewhere."""
     nt.assert_in('.',TMP_TEST_DIR)
 
 
 def test_find_mod_1():
-    """
-    Search for a directory's file path.
+    """Search for a directory's file path.
     Expected output: a path to that directory's __init__.py file.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     modpath = join(TMP_TEST_DIR, "xmod", "__init__.py")
     nt.assert_equal(mp.find_mod("xmod"), modpath)
 
 def test_find_mod_2():
-    """
-    Search for a directory's file path.
+    """Search for a directory's file path.
     Expected output: a path to that directory's __init__.py file.
     TODO: Confirm why this is a duplicate test.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     modpath = join(TMP_TEST_DIR, "xmod", "__init__.py")
     nt.assert_equal(mp.find_mod("xmod"), modpath)
 
 def test_find_mod_3():
-    """
-    Search for a directory + a filename without its .py extension
+    """Search for a directory + a filename without its .py extension
     Expected output: full path with .py extension.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     modpath = join(TMP_TEST_DIR, "xmod", "sub.py")
     nt.assert_equal(mp.find_mod("xmod.sub"), modpath)
 
 def test_find_mod_4():
-    """
-    Search for a filename without its .py extension
+    """Search for a filename without its .py extension
     Expected output: full path with .py extension
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     modpath = join(TMP_TEST_DIR, "pack.py")
     nt.assert_equal(mp.find_mod("pack"), modpath)
 
 def test_find_mod_5():
-    """
-    Search for a filename with a .pyc extension
+    """Search for a filename with a .pyc extension
     Expected output: TODO: do we exclude or include .pyc files?
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     nt.assert_equal(mp.find_mod("packpyc"), None)
