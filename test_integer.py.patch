# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/extension/test_integer.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/extension/test_integer.py
@@ -35,6 +35,7 @@
 
 
 def make_data():
+    """ """
     return list(range(1, 9)) + [pd.NA] + list(range(10, 98)) + [pd.NA] + [99, 100]
 
 
@@ -51,47 +52,126 @@
     ]
 )
 def dtype(request):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     return request.param()
 
 
 @pytest.fixture
 def data(dtype):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+
+    Returns
+    -------
+
+    """
     return integer_array(make_data(), dtype=dtype)
 
 
 @pytest.fixture
 def data_for_twos(dtype):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+
+    Returns
+    -------
+
+    """
     return integer_array(np.ones(100) * 2, dtype=dtype)
 
 
 @pytest.fixture
 def data_missing(dtype):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+
+    Returns
+    -------
+
+    """
     return integer_array([pd.NA, 1], dtype=dtype)
 
 
 @pytest.fixture
 def data_for_sorting(dtype):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+
+    Returns
+    -------
+
+    """
     return integer_array([1, 2, 0], dtype=dtype)
 
 
 @pytest.fixture
 def data_missing_for_sorting(dtype):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+
+    Returns
+    -------
+
+    """
     return integer_array([1, pd.NA, 0], dtype=dtype)
 
 
 @pytest.fixture
 def na_cmp():
+    """ """
     # we are pd.NA
     return lambda x, y: x is pd.NA and y is pd.NA
 
 
 @pytest.fixture
 def na_value():
+    """ """
     return pd.NA
 
 
 @pytest.fixture
 def data_for_grouping(dtype):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+
+    Returns
+    -------
+
+    """
     b = 1
     a = 0
     c = 2
@@ -100,18 +180,57 @@
 
 
 class TestDtype(base.BaseDtypeTests):
+    """ """
     @pytest.mark.skip(reason="using multiple dtypes")
     def test_is_dtype_unboxes_dtype(self):
+        """ """
         # we have multiple dtypes, so skip
         pass
 
 
 class TestArithmeticOps(base.BaseArithmeticOpsTests):
+    """ """
     def check_opname(self, s, op_name, other, exc=None):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+        op_name :
+            
+        other :
+            
+        exc :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         # overwriting to indicate ops don't raise an error
         super().check_opname(s, op_name, other, exc=None)
 
     def _check_op(self, s, op, other, op_name, exc=NotImplementedError):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+        op :
+            
+        other :
+            
+        op_name :
+            
+        exc :
+             (Default value = NotImplementedError)
+
+        Returns
+        -------
+
+        """
         if exc is None:
             if s.dtype.is_unsigned_integer and (op_name == "__rsub__"):
                 # TODO see https://github.com/pandas-dev/pandas/issues/22023
@@ -155,16 +274,66 @@
                 op(s, other)
 
     def _check_divmod_op(self, s, op, other, exc=None):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+        op :
+            
+        other :
+            
+        exc :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         super()._check_divmod_op(s, op, other, None)
 
     @pytest.mark.skip(reason="intNA does not error on ops")
     def test_error(self, data, all_arithmetic_operators):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        all_arithmetic_operators :
+            
+
+        Returns
+        -------
+
+        """
         # other specific errors tested in the integer array specific tests
         pass
 
 
 class TestComparisonOps(base.BaseComparisonOpsTests):
+    """ """
     def _check_op(self, s, op, other, op_name, exc=NotImplementedError):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+        op :
+            
+        other :
+            
+        op_name :
+            
+        exc :
+             (Default value = NotImplementedError)
+
+        Returns
+        -------
+
+        """
         if exc is None:
             result = op(s, other)
             # Override to do the astype to boolean
@@ -175,21 +344,58 @@
                 op(s, other)
 
     def check_opname(self, s, op_name, other, exc=None):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+        op_name :
+            
+        other :
+            
+        exc :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         super().check_opname(s, op_name, other, exc=None)
 
     def _compare_other(self, s, data, op_name, other):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+        data :
+            
+        op_name :
+            
+        other :
+            
+
+        Returns
+        -------
+
+        """
         self.check_opname(s, op_name, other)
 
 
 class TestInterface(base.BaseInterfaceTests):
+    """ """
     pass
 
 
 class TestConstructors(base.BaseConstructorsTests):
+    """ """
     pass
 
 
 class TestReshaping(base.BaseReshapingTests):
+    """ """
     pass
 
     # for test_concat_mixed_dtypes test
@@ -198,20 +404,37 @@
 
 
 class TestGetitem(base.BaseGetitemTests):
+    """ """
     pass
 
 
 class TestSetitem(base.BaseSetitemTests):
+    """ """
     pass
 
 
 class TestMissing(base.BaseMissingTests):
+    """ """
     pass
 
 
 class TestMethods(base.BaseMethodsTests):
+    """ """
     @pytest.mark.skip(reason="uses nullable integer")
     def test_value_counts(self, all_data, dropna):
+        """
+
+        Parameters
+        ----------
+        all_data :
+            
+        dropna :
+            
+
+        Returns
+        -------
+
+        """
         all_data = all_data[:10]
         if dropna:
             other = np.array(all_data[~all_data.isna()])
@@ -226,15 +449,33 @@
 
 
 class TestCasting(base.BaseCastingTests):
+    """ """
     pass
 
 
 class TestGroupby(base.BaseGroupbyTests):
+    """ """
     pass
 
 
 class TestNumericReduce(base.BaseNumericReduceTests):
+    """ """
     def check_reduce(self, s, op_name, skipna):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+        op_name :
+            
+        skipna :
+            
+
+        Returns
+        -------
+
+        """
         # overwrite to ensure pd.NA is tested instead of np.nan
         # https://github.com/pandas-dev/pandas/issues/30958
         result = getattr(s, op_name)(skipna=skipna)
@@ -246,12 +487,15 @@
 
 
 class TestBooleanReduce(base.BaseBooleanReduceTests):
+    """ """
     pass
 
 
 class TestPrinting(base.BasePrintingTests):
+    """ """
     pass
 
 
 class TestParsing(base.BaseParsingTests):
-    pass
+    """ """
+    pass
