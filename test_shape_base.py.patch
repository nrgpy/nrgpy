# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_shape_base.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_shape_base.py
@@ -13,7 +13,9 @@
 
 
 class TestAtleast1d:
+    """ """
     def test_0D_array(self):
+        """ """
         a = array(1)
         b = array(2)
         res = [atleast_1d(a), atleast_1d(b)]
@@ -21,6 +23,7 @@
         assert_array_equal(res, desired)
 
     def test_1D_array(self):
+        """ """
         a = array([1, 2])
         b = array([2, 3])
         res = [atleast_1d(a), atleast_1d(b)]
@@ -28,6 +31,7 @@
         assert_array_equal(res, desired)
 
     def test_2D_array(self):
+        """ """
         a = array([[1, 2], [1, 2]])
         b = array([[2, 3], [2, 3]])
         res = [atleast_1d(a), atleast_1d(b)]
@@ -35,6 +39,7 @@
         assert_array_equal(res, desired)
 
     def test_3D_array(self):
+        """ """
         a = array([[1, 2], [1, 2]])
         b = array([[2, 3], [2, 3]])
         a = array([a, a])
@@ -44,8 +49,7 @@
         assert_array_equal(res, desired)
 
     def test_r1array(self):
-        """ Test to make sure equivalent Travis O's r1array function
-        """
+        """Test to make sure equivalent Travis O's r1array function"""
         assert_(atleast_1d(3).shape == (1,))
         assert_(atleast_1d(3j).shape == (1,))
         assert_(atleast_1d(3.0).shape == (1,))
@@ -53,7 +57,9 @@
 
 
 class TestAtleast2d:
+    """ """
     def test_0D_array(self):
+        """ """
         a = array(1)
         b = array(2)
         res = [atleast_2d(a), atleast_2d(b)]
@@ -61,6 +67,7 @@
         assert_array_equal(res, desired)
 
     def test_1D_array(self):
+        """ """
         a = array([1, 2])
         b = array([2, 3])
         res = [atleast_2d(a), atleast_2d(b)]
@@ -68,6 +75,7 @@
         assert_array_equal(res, desired)
 
     def test_2D_array(self):
+        """ """
         a = array([[1, 2], [1, 2]])
         b = array([[2, 3], [2, 3]])
         res = [atleast_2d(a), atleast_2d(b)]
@@ -75,6 +83,7 @@
         assert_array_equal(res, desired)
 
     def test_3D_array(self):
+        """ """
         a = array([[1, 2], [1, 2]])
         b = array([[2, 3], [2, 3]])
         a = array([a, a])
@@ -84,15 +93,16 @@
         assert_array_equal(res, desired)
 
     def test_r2array(self):
-        """ Test to make sure equivalent Travis O's r2array function
-        """
+        """Test to make sure equivalent Travis O's r2array function"""
         assert_(atleast_2d(3).shape == (1, 1))
         assert_(atleast_2d([3j, 1]).shape == (1, 2))
         assert_(atleast_2d([[[3, 1], [4, 5]], [[3, 5], [1, 2]]]).shape == (2, 2, 2))
 
 
 class TestAtleast3d:
+    """ """
     def test_0D_array(self):
+        """ """
         a = array(1)
         b = array(2)
         res = [atleast_3d(a), atleast_3d(b)]
@@ -100,6 +110,7 @@
         assert_array_equal(res, desired)
 
     def test_1D_array(self):
+        """ """
         a = array([1, 2])
         b = array([2, 3])
         res = [atleast_3d(a), atleast_3d(b)]
@@ -107,6 +118,7 @@
         assert_array_equal(res, desired)
 
     def test_2D_array(self):
+        """ """
         a = array([[1, 2], [1, 2]])
         b = array([[2, 3], [2, 3]])
         res = [atleast_3d(a), atleast_3d(b)]
@@ -114,6 +126,7 @@
         assert_array_equal(res, desired)
 
     def test_3D_array(self):
+        """ """
         a = array([[1, 2], [1, 2]])
         b = array([[2, 3], [2, 3]])
         a = array([a, a])
@@ -124,13 +137,17 @@
 
 
 class TestHstack:
+    """ """
     def test_non_iterable(self):
+        """ """
         assert_raises(TypeError, hstack, 1)
 
     def test_empty_input(self):
+        """ """
         assert_raises(ValueError, hstack, ())
 
     def test_0D_array(self):
+        """ """
         a = array(1)
         b = array(2)
         res = hstack([a, b])
@@ -138,6 +155,7 @@
         assert_array_equal(res, desired)
 
     def test_1D_array(self):
+        """ """
         a = array([1])
         b = array([2])
         res = hstack([a, b])
@@ -145,6 +163,7 @@
         assert_array_equal(res, desired)
 
     def test_2D_array(self):
+        """ """
         a = array([[1], [2]])
         b = array([[1], [2]])
         res = hstack([a, b])
@@ -152,6 +171,7 @@
         assert_array_equal(res, desired)
 
     def test_generator(self):
+        """ """
         with assert_warns(FutureWarning):
             hstack((np.arange(3) for _ in range(2)))
         with assert_warns(FutureWarning):
@@ -159,13 +179,17 @@
 
 
 class TestVstack:
+    """ """
     def test_non_iterable(self):
+        """ """
         assert_raises(TypeError, vstack, 1)
 
     def test_empty_input(self):
+        """ """
         assert_raises(ValueError, vstack, ())
 
     def test_0D_array(self):
+        """ """
         a = array(1)
         b = array(2)
         res = vstack([a, b])
@@ -173,6 +197,7 @@
         assert_array_equal(res, desired)
 
     def test_1D_array(self):
+        """ """
         a = array([1])
         b = array([2])
         res = vstack([a, b])
@@ -180,6 +205,7 @@
         assert_array_equal(res, desired)
 
     def test_2D_array(self):
+        """ """
         a = array([[1], [2]])
         b = array([[1], [2]])
         res = vstack([a, b])
@@ -187,6 +213,7 @@
         assert_array_equal(res, desired)
 
     def test_2D_array2(self):
+        """ """
         a = array([1, 2])
         b = array([1, 2])
         res = vstack([a, b])
@@ -194,18 +221,22 @@
         assert_array_equal(res, desired)
 
     def test_generator(self):
+        """ """
         with assert_warns(FutureWarning):
             vstack((np.arange(3) for _ in range(2)))
 
 
 class TestConcatenate:
+    """ """
     def test_returns_copy(self):
+        """ """
         a = np.eye(3)
         b = np.concatenate([a])
         b[0, 0] = 2
         assert b[0, 0] != a[0, 0]
 
     def test_exceptions(self):
+        """ """
         # test axis must be in bounds
         for ndim in [1, 2, 3]:
             a = np.ones((1,)*ndim)
@@ -247,6 +278,7 @@
         assert_raises(ValueError, concatenate, ())
 
     def test_concatenate_axis_None(self):
+        """ """
         a = np.arange(4, dtype=np.float64).reshape((2, 2))
         b = list(range(3))
         c = ['x']
@@ -268,6 +300,7 @@
         assert_equal(r, rout)
 
     def test_large_concatenate_axis_None(self):
+        """ """
         # When no axis is given, concatenate uses flattened versions.
         # This also had a bug with many arrays (see gh-5979).
         x = np.arange(1, 100)
@@ -279,6 +312,7 @@
         assert_array_equal(x, r)
 
     def test_concatenate(self):
+        """ """
         # Test concatenate function
         # One sequence returns unmodified (but as array)
         r4 = list(range(4))
@@ -321,6 +355,7 @@
         assert_equal(res, rout)
 
     def test_bad_out_shape(self):
+        """ """
         a = array([1, 2])
         b = array([3, 4])
 
@@ -330,6 +365,7 @@
         concatenate((a, b), out=np.empty(4))
 
     def test_out_dtype(self):
+        """ """
         out = np.empty(4, np.float32)
         res = concatenate((array([1, 2]), array([3, 4])), out=out)
         assert_(out is res)
@@ -345,6 +381,7 @@
 
 
 def test_stack():
+    """ """
     # non-iterable input
     assert_raises(TypeError, stack, 1)
 
@@ -403,8 +440,20 @@
 
 
 class TestBlock:
+    """ """
     @pytest.fixture(params=['block', 'force_concatenate', 'force_slicing'])
     def block(self, request):
+        """
+
+        Parameters
+        ----------
+        request :
+            
+
+        Returns
+        -------
+
+        """
         # blocking small arrays and large arrays go through different paths.
         # the algorithm is triggered depending on the number of element
         # copies required.
@@ -413,10 +462,32 @@
         # Ultimately, this should be removed if a single algorithm is found
         # to be faster for both small and large arrays.
         def _block_force_concatenate(arrays):
+            """
+
+            Parameters
+            ----------
+            arrays :
+                
+
+            Returns
+            -------
+
+            """
             arrays, list_ndim, result_ndim, _ = _block_setup(arrays)
             return _block_concatenate(arrays, list_ndim, result_ndim)
 
         def _block_force_slicing(arrays):
+            """
+
+            Parameters
+            ----------
+            arrays :
+                
+
+            Returns
+            -------
+
+            """
             arrays, list_ndim, result_ndim, _ = _block_setup(arrays)
             return _block_slicing(arrays, list_ndim, result_ndim)
 
@@ -430,12 +501,34 @@
             raise ValueError('Unknown blocking request. There is a typo in the tests.')
 
     def test_returns_copy(self, block):
+        """
+
+        Parameters
+        ----------
+        block :
+            
+
+        Returns
+        -------
+
+        """
         a = np.eye(3)
         b = block(a)
         b[0, 0] = 2
         assert b[0, 0] != a[0, 0]
 
     def test_block_total_size_estimate(self, block):
+        """
+
+        Parameters
+        ----------
+        block :
+            
+
+        Returns
+        -------
+
+        """
         _, _, _, total_size = _block_setup([1])
         assert total_size == 1
 
@@ -452,6 +545,17 @@
         assert total_size == 4
 
     def test_block_simple_row_wise(self, block):
+        """
+
+        Parameters
+        ----------
+        block :
+            
+
+        Returns
+        -------
+
+        """
         a_2d = np.ones((2, 2))
         b_2d = 2 * a_2d
         desired = np.array([[1, 1, 2, 2],
@@ -460,6 +564,17 @@
         assert_equal(desired, result)
 
     def test_block_simple_column_wise(self, block):
+        """
+
+        Parameters
+        ----------
+        block :
+            
+
+        Returns
+        -------
+
+        """
         a_2d = np.ones((2, 2))
         b_2d = 2 * a_2d
         expected = np.array([[1, 1],
@@ -470,6 +585,17 @@
         assert_equal(expected, result)
 
     def test_block_with_1d_arrays_row_wise(self, block):
+        """
+
+        Parameters
+        ----------
+        block :
+            
+
+        Returns
+        -------
+
+        """
         # # # 1-D vectors are treated as row arrays
         a = np.array([1, 2, 3])
         b = np.array([2, 3, 4])
@@ -478,6 +604,17 @@
         assert_equal(expected, result)
 
     def test_block_with_1d_arrays_multiple_rows(self, block):
+        """
+
+        Parameters
+        ----------
+        block :
+            
+
+        Returns
+        -------
+
+        """
         a = np.array([1, 2, 3])
         b = np.array([2, 3, 4])
         expected = np.array([[1, 2, 3, 2, 3, 4],
@@ -486,6 +623,17 @@
         assert_equal(expected, result)
 
     def test_block_with_1d_arrays_column_wise(self, block):
+        """
+
+        Parameters
+        ----------
+        block :
+            
+
+        Returns
+        -------
+
+        """
         # # # 1-D vectors are treated as row arrays
         a_1d = np.array([1, 2, 3])
         b_1d = np.array([2, 3, 4])
@@ -495,6 +643,17 @@
         assert_equal(expected, result)
 
     def test_block_mixed_1d_and_2d(self, block):
+        """
+
+        Parameters
+        ----------
+        block :
+            
+
+        Returns
+        -------
+
+        """
         a_2d = np.ones((2, 2))
         b_1d = np.array([2, 2])
         result = block([[a_2d], [b_1d]])
@@ -504,6 +663,17 @@
         assert_equal(expected, result)
 
     def test_block_complicated(self, block):
+        """
+
+        Parameters
+        ----------
+        block :
+            
+
+        Returns
+        -------
+
+        """
         # a bit more complicated
         one_2d = np.array([[1, 1, 1]])
         two_2d = np.array([[2, 2, 2]])
@@ -528,6 +698,17 @@
         assert_equal(result, expected)
 
     def test_nested(self, block):
+        """
+
+        Parameters
+        ----------
+        block :
+            
+
+        Returns
+        -------
+
+        """
         one = np.array([1, 1, 1])
         two = np.array([[2, 2, 2], [2, 2, 2], [2, 2, 2]])
         three = np.array([3, 3, 3])
@@ -558,6 +739,17 @@
         assert_equal(result, expected)
 
     def test_3d(self, block):
+        """
+
+        Parameters
+        ----------
+        block :
+            
+
+        Returns
+        -------
+
+        """
         a000 = np.ones((2, 2, 2), int) * 1
 
         a100 = np.ones((3, 2, 2), int) * 2
@@ -613,6 +805,17 @@
         assert_array_equal(result, expected)
 
     def test_block_with_mismatched_shape(self, block):
+        """
+
+        Parameters
+        ----------
+        block :
+            
+
+        Returns
+        -------
+
+        """
         a = np.array([0, 0])
         b = np.eye(2)
         assert_raises(ValueError, block, [a, b])
@@ -622,10 +825,32 @@
                     [np.ones((2,2)), np.ones((2,2))]]
         assert_raises(ValueError, block, to_block)
     def test_no_lists(self, block):
+        """
+
+        Parameters
+        ----------
+        block :
+            
+
+        Returns
+        -------
+
+        """
         assert_equal(block(1),         np.array(1))
         assert_equal(block(np.eye(3)), np.eye(3))
 
     def test_invalid_nesting(self, block):
+        """
+
+        Parameters
+        ----------
+        block :
+            
+
+        Returns
+        -------
+
+        """
         msg = 'depths are mismatched'
         assert_raises_regex(ValueError, msg, block, [1, [2]])
         assert_raises_regex(ValueError, msg, block, [1, []])
@@ -638,15 +863,48 @@
         ])
 
     def test_empty_lists(self, block):
+        """
+
+        Parameters
+        ----------
+        block :
+            
+
+        Returns
+        -------
+
+        """
         assert_raises_regex(ValueError, 'empty', block, [])
         assert_raises_regex(ValueError, 'empty', block, [[]])
         assert_raises_regex(ValueError, 'empty', block, [[1], []])
 
     def test_tuple(self, block):
+        """
+
+        Parameters
+        ----------
+        block :
+            
+
+        Returns
+        -------
+
+        """
         assert_raises_regex(TypeError, 'tuple', block, ([1, 2], [3, 4]))
         assert_raises_regex(TypeError, 'tuple', block, [(1, 2), (3, 4)])
 
     def test_different_ndims(self, block):
+        """
+
+        Parameters
+        ----------
+        block :
+            
+
+        Returns
+        -------
+
+        """
         a = 1.
         b = 2 * np.ones((1, 2))
         c = 3 * np.ones((1, 1, 3))
@@ -657,6 +915,17 @@
         assert_equal(result, expected)
 
     def test_different_ndims_depths(self, block):
+        """
+
+        Parameters
+        ----------
+        block :
+            
+
+        Returns
+        -------
+
+        """
         a = 1.
         b = 2 * np.ones((1, 2))
         c = 3 * np.ones((1, 2, 3))
@@ -669,6 +938,17 @@
         assert_equal(result, expected)
 
     def test_block_memory_order(self, block):
+        """
+
+        Parameters
+        ----------
+        block :
+            
+
+        Returns
+        -------
+
+        """
         # 3D
         arr_c = np.zeros((3,)*3, order='C')
         arr_f = np.zeros((3,)*3, order='F')
@@ -700,7 +980,9 @@
 
 
 def test_block_dispatcher():
+    """ """
     class ArrayLike:
+        """ """
         pass
     a = ArrayLike()
     b = ArrayLike()
