# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/compat/_inspect.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/compat/_inspect.py
@@ -11,9 +11,17 @@
 
 # ----------------------------------------------------------- type-checking
 def ismethod(object):
-    """Return true if the object is an instance method.
-
-    Instance method objects provide these attributes:
+    """
+
+    Parameters
+    ----------
+    object :
+        
+
+    Returns
+    -------
+    type
+        Instance method objects provide these attributes:
         __doc__         documentation string
         __name__        name with which this method was defined
         im_class        class object in which this method belongs
@@ -24,9 +32,17 @@
     return isinstance(object, types.MethodType)
 
 def isfunction(object):
-    """Return true if the object is a user-defined function.
-
-    Function objects provide these attributes:
+    """
+
+    Parameters
+    ----------
+    object :
+        
+
+    Returns
+    -------
+    type
+        Function objects provide these attributes:
         __doc__         documentation string
         __name__        name with which this function was defined
         func_code       code object containing compiled function bytecode
@@ -39,9 +55,17 @@
     return isinstance(object, types.FunctionType)
 
 def iscode(object):
-    """Return true if the object is a code object.
-
-    Code objects provide these attributes:
+    """
+
+    Parameters
+    ----------
+    object :
+        
+
+    Returns
+    -------
+    type
+        Code objects provide these attributes:
         co_argcount     number of arguments (not including * or ** args)
         co_code         string of raw compiled bytecode
         co_consts       tuple of constants used in the bytecode
@@ -54,7 +78,7 @@
         co_nlocals      number of local variables
         co_stacksize    virtual machine stack space required
         co_varnames     tuple of names of arguments and local variables
-        
+
     """
     return isinstance(object, types.CodeType)
 
@@ -64,10 +88,18 @@
 
 def getargs(co):
     """Get information about the arguments accepted by a code object.
-
+    
     Three things are returned: (args, varargs, varkw), where 'args' is
     a list of argument names (possibly containing nested lists), and
     'varargs' and 'varkw' are the names of the * and ** arguments or None.
+
+    Parameters
+    ----------
+    co :
+        
+
+    Returns
+    -------
 
     """
 
@@ -95,11 +127,19 @@
 
 def getargspec(func):
     """Get the names and default values of a function's arguments.
-
+    
     A tuple of four things is returned: (args, varargs, varkw, defaults).
     'args' is a list of the argument names (it may contain nested lists).
     'varargs' and 'varkw' are the names of the * and ** arguments or None.
     'defaults' is an n-tuple of the default values of the last n arguments.
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
 
     """
 
@@ -112,17 +152,36 @@
 
 def getargvalues(frame):
     """Get information about arguments passed into a particular frame.
-
+    
     A tuple of four things is returned: (args, varargs, varkw, locals).
     'args' is a list of the argument names (it may contain nested lists).
     'varargs' and 'varkw' are the names of the * and ** arguments or None.
     'locals' is the locals dictionary of the given frame.
-    
+
+    Parameters
+    ----------
+    frame :
+        
+
+    Returns
+    -------
+
     """
     args, varargs, varkw = getargs(frame.f_code)
     return args, varargs, varkw, frame.f_locals
 
 def joinseq(seq):
+    """
+
+    Parameters
+    ----------
+    seq :
+        
+
+    Returns
+    -------
+
+    """
     if len(seq) == 1:
         return '(' + seq[0] + ',)'
     else:
@@ -130,6 +189,18 @@
 
 def strseq(object, convert, join=joinseq):
     """Recursively walk a sequence, stringifying each element.
+
+    Parameters
+    ----------
+    object :
+        
+    convert :
+        
+    join :
+         (Default value = joinseq)
+
+    Returns
+    -------
 
     """
     if type(object) in [list, tuple]:
@@ -144,11 +215,35 @@
                   formatvalue=lambda value: '=' + repr(value),
                   join=joinseq):
     """Format an argument spec from the 4 values returned by getargspec.
-
+    
     The first four arguments are (args, varargs, varkw, defaults).  The
     other four arguments are the corresponding optional formatting functions
     that are called to turn names and values into strings.  The ninth
     argument is an optional function to format the sequence of arguments.
+
+    Parameters
+    ----------
+    args :
+        
+    varargs :
+         (Default value = None)
+    varkw :
+         (Default value = None)
+    defaults :
+         (Default value = None)
+    formatarg :
+         (Default value = str)
+    formatvarargs :
+         (Default value = lambda name: '*' + name)
+    formatvarkw :
+         (Default value = lambda name: '**' + name)
+    formatvalue :
+         (Default value = lambda value: '=' + repr(value))
+    join :
+         (Default value = joinseq)
+
+    Returns
+    -------
 
     """
     specs = []
@@ -172,15 +267,56 @@
                     formatvalue=lambda value: '=' + repr(value),
                     join=joinseq):
     """Format an argument spec from the 4 values returned by getargvalues.
-
+    
     The first four arguments are (args, varargs, varkw, locals).  The
     next four arguments are the corresponding optional formatting functions
     that are called to turn names and values into strings.  The ninth
     argument is an optional function to format the sequence of arguments.
 
+    Parameters
+    ----------
+    args :
+        
+    varargs :
+        
+    varkw :
+        
+    locals :
+        
+    formatarg :
+         (Default value = str)
+    formatvarargs :
+         (Default value = lambda name: '*' + name)
+    formatvarkw :
+         (Default value = lambda name: '**' + name)
+    formatvalue :
+         (Default value = lambda value: '=' + repr(value))
+    join :
+         (Default value = joinseq)
+
+    Returns
+    -------
+
     """
     def convert(name, locals=locals,
                 formatarg=formatarg, formatvalue=formatvalue):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+        locals :
+             (Default value = locals)
+        formatarg :
+             (Default value = formatarg)
+        formatvalue :
+             (Default value = formatvalue)
+
+        Returns
+        -------
+
+        """
         return formatarg(name) + formatvalue(locals[name])
     specs = [strseq(arg, convert, join) for arg in args]
 
