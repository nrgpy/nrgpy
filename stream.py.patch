# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/requests_toolbelt/downloadutils/stream.py
+++ b/..//venv/lib/python3.8/site-packages/requests_toolbelt/downloadutils/stream.py
@@ -17,6 +17,17 @@
 
 
 def _get_filename(content_disposition):
+    """
+
+    Parameters
+    ----------
+    content_disposition :
+        
+
+    Returns
+    -------
+
+    """
     for match in _OPTION_HEADER_PIECE_RE.finditer(content_disposition):
         k, v = match.groups()
         if k == 'filename':
@@ -26,25 +37,32 @@
 
 
 def get_download_file_path(response, path):
-    """
-    Given a response and a path, return a file path for a download.
-
+    """Given a response and a path, return a file path for a download.
+    
     If a ``path`` parameter is a directory, this function will parse the
     ``Content-Disposition`` header on the response to determine the name of the
     file as reported by the server, and return a file path in the specified
     directory.
-
+    
     If ``path`` is empty or None, this function will return a path relative
     to the process' current working directory.
-
+    
     If path is a full file path, return it.
 
-    :param response: A Response object from requests
-    :type response: requests.models.Response
-    :param str path: Directory or file path.
-    :returns: full file path to download as
-    :rtype: str
-    :raises: :class:`requests_toolbelt.exceptions.StreamingError`
+    Parameters
+    ----------
+    response : requests.models.Response
+        A Response object from requests
+    str :
+        path: Directory or file path.
+    path :
+        
+
+    Returns
+    -------
+    str
+        full file path to download as
+
     """
     path_is_dir = path and os.path.isdir(path)
 
@@ -70,32 +88,32 @@
 
 def stream_response_to_file(response, path=None, chunksize=_DEFAULT_CHUNKSIZE):
     """Stream a response body to the specified file.
-
+    
     Either use the ``path`` provided or use the name provided in the
     ``Content-Disposition`` header.
-
+    
     .. warning::
-
+    
         If you pass this function an open file-like object as the ``path``
         parameter, the function will not close that file for you.
-
+    
     .. warning::
-
+    
         This function will not automatically close the response object
         passed in as the ``response`` parameter.
-
+    
     If a ``path`` parameter is a directory, this function will parse the
     ``Content-Disposition`` header on the response to determine the name of the
     file as reported by the server, and return a file path in the specified
     directory. If no ``path`` parameter is supplied, this function will default
     to the process' current working directory.
-
-    .. code-block:: python
-
+    
+    .. code-block:: python
+    
         import requests
         from requests_toolbelt import exceptions
         from requests_toolbelt.downloadutils import stream
-
+    
         r = requests.get(url, stream=True)
         try:
             filename = stream.stream_response_to_file(r)
@@ -103,57 +121,65 @@
             # The toolbelt could not find the filename in the
             # Content-Disposition
             print(e.message)
-
+    
     You can also specify the filename as a string. This will be passed to
     the built-in :func:`open` and we will read the content into the file.
-
-    .. code-block:: python
-
-        import requests
-        from requests_toolbelt.downloadutils import stream
-
+    
+    .. code-block:: python
+    
+        import requests
+        from requests_toolbelt.downloadutils import stream
+    
         r = requests.get(url, stream=True)
         filename = stream.stream_response_to_file(r, path='myfile')
-
+    
     If the calculated download file path already exists, this function will
     raise a StreamingError.
-
+    
     Instead, if you want to manage the file object yourself, you need to
     provide either a :class:`io.BytesIO` object or a file opened with the
     `'b'` flag. See the two examples below for more details.
-
-    .. code-block:: python
-
-        import requests
-        from requests_toolbelt.downloadutils import stream
-
+    
+    .. code-block:: python
+    
+        import requests
+        from requests_toolbelt.downloadutils import stream
+    
         with open('myfile', 'wb') as fd:
             r = requests.get(url, stream=True)
             filename = stream.stream_response_to_file(r, path=fd)
-
+    
         print('{0} saved to {1}'.format(url, filename))
-
-    .. code-block:: python
-
+    
+    .. code-block:: python
+    
         import io
         import requests
         from requests_toolbelt.downloadutils import stream
-
+    
         b = io.BytesIO()
         r = requests.get(url, stream=True)
         filename = stream.stream_response_to_file(r, path=b)
         assert filename is None
 
-    :param response: A Response object from requests
-    :type response: requests.models.Response
-    :param path: *(optional)*, Either a string with the path to the location
-        to save the response content, or a file-like object expecting bytes.
-    :type path: :class:`str`, or object with a :meth:`write`
-    :param int chunksize: (optional), Size of chunk to attempt to stream
+    Parameters
+    ----------
+    response : requests.models.Response
+        A Response object from requests
+    path : class:`str`, or object with a :meth:`write`
+        optional)*, Either a string with the path to the location
+        to save the response content, or a file-like object expecting bytes. (Default value = None)
+    int :
+        chunksize: (optional), Size of chunk to attempt to stream
         (default 512B).
-    :returns: The name of the file, if one can be determined, else None
-    :rtype: str
-    :raises: :class:`requests_toolbelt.exceptions.StreamingError`
+    chunksize :
+         (Default value = _DEFAULT_CHUNKSIZE)
+
+    Returns
+    -------
+    str
+        The name of the file, if one can be determined, else None
+
     """
     pre_opened = False
     fd = None
