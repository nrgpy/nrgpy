# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/arrays/_ranges.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/arrays/_ranges.py
@@ -16,8 +16,7 @@
     periods: int,
     freq: BaseOffset,
 ):
-    """
-    Generate a range of dates or timestamps with the spans between dates
+    """Generate a range of dates or timestamps with the spans between dates
     described by the given `freq` DateOffset.
 
     Parameters
@@ -30,10 +29,21 @@
         Number of periods in produced date range.
     freq : Tick
         Describes space between dates in produced date range.
+    start: Union[Timestamp :
+        
+    Timedelta] :
+        
+    end: Union[Timestamp :
+        
+    periods: int :
+        
+    freq: BaseOffset :
+        
 
     Returns
     -------
-    ndarray[np.int64] Representing nanoseconds.
+
+    
     """
     start = start.value if start is not None else None
     end = end.value if end is not None else None
@@ -71,8 +81,7 @@
 def _generate_range_overflow_safe(
     endpoint: int, periods: int, stride: int, side: str = "start"
 ) -> int:
-    """
-    Calculate the second endpoint for passing to np.arange, checking
+    """Calculate the second endpoint for passing to np.arange, checking
     to avoid an integer overflow.  Catch OverflowError and re-raise
     as OutOfBoundsDatetime.
 
@@ -86,14 +95,21 @@
         nanoseconds between periods in the desired range
     side : {'start', 'end'}
         which end of the range `endpoint` refers to
+    endpoint: int :
+        
+    periods: int :
+        
+    stride: int :
+        
+    side: str :
+         (Default value = "start")
 
     Returns
     -------
     other_end : int
-
-    Raises
-    ------
-    OutOfBoundsDatetime
+        
+
+    
     """
     # GH#14187 raise instead of incorrectly wrapping around
     assert side in ["start", "end"]
@@ -138,9 +154,23 @@
 def _generate_range_overflow_safe_signed(
     endpoint: int, periods: int, stride: int, side: str
 ) -> int:
-    """
-    A special case for _generate_range_overflow_safe where `periods * stride`
+    """A special case for _generate_range_overflow_safe where `periods * stride`
     can be calculated without overflowing int64 bounds.
+
+    Parameters
+    ----------
+    endpoint: int :
+        
+    periods: int :
+        
+    stride: int :
+        
+    side: str :
+        
+
+    Returns
+    -------
+
     """
     assert side in ["start", "end"]
     if side == "end":
