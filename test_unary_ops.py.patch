# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/scalar/timestamp/test_unary_ops.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/scalar/timestamp/test_unary_ops.py
@@ -13,6 +13,7 @@
 
 
 class TestTimestampUnaryOps:
+    """ """
 
     # --------------------------------------------------------------
     # Timestamp.round
@@ -29,12 +30,28 @@
         ],
     )
     def test_round_frequencies(self, timestamp, freq, expected):
+        """
+
+        Parameters
+        ----------
+        timestamp :
+            
+        freq :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         dt = Timestamp(timestamp)
         result = dt.round(freq)
         expected = Timestamp(expected)
         assert result == expected
 
     def test_round_tzaware(self):
+        """ """
         dt = Timestamp("20130101 09:10:11", tz="US/Eastern")
         result = dt.round("D")
         expected = Timestamp("20130101", tz="US/Eastern")
@@ -45,6 +62,7 @@
         assert result == dt
 
     def test_round_30min(self):
+        """ """
         # round
         dt = Timestamp("20130104 12:32:00")
         result = dt.round("30Min")
@@ -52,6 +70,7 @@
         assert result == expected
 
     def test_round_subsecond(self):
+        """ """
         # GH#14440 & GH#15578
         result = Timestamp("2016-10-17 12:00:00.0015").round("ms")
         expected = Timestamp("2016-10-17 12:00:00.002000")
@@ -70,10 +89,12 @@
         assert result == expected
 
     def test_round_nonstandard_freq(self):
+        """ """
         with tm.assert_produces_warning(False):
             Timestamp("2016-10-17 12:00:00.001501031").round("1010ns")
 
     def test_round_invalid_arg(self):
+        """ """
         stamp = Timestamp("2000-01-05 05:09:15.13")
         with pytest.raises(ValueError, match=INVALID_FREQ_ERR_MSG):
             stamp.round("foo")
@@ -102,6 +123,23 @@
         ],
     )
     def test_ceil_floor_edge(self, test_input, rounder, freq, expected):
+        """
+
+        Parameters
+        ----------
+        test_input :
+            
+        rounder :
+            
+        freq :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         dt = Timestamp(test_input)
         func = getattr(dt, rounder)
         result = func(freq)
@@ -125,6 +163,23 @@
     )
     @pytest.mark.parametrize("rounder", ["ceil", "floor", "round"])
     def test_round_minute_freq(self, test_input, freq, expected, rounder):
+        """
+
+        Parameters
+        ----------
+        test_input :
+            
+        freq :
+            
+        expected :
+            
+        rounder :
+            
+
+        Returns
+        -------
+
+        """
         # Ensure timestamps that shouldn't round dont!
         # GH#21262
 
@@ -135,12 +190,14 @@
         assert result == expected
 
     def test_ceil(self):
+        """ """
         dt = Timestamp("20130101 09:10:11")
         result = dt.ceil("D")
         expected = Timestamp("20130102")
         assert result == expected
 
     def test_floor(self):
+        """ """
         dt = Timestamp("20130101 09:10:11")
         result = dt.floor("D")
         expected = Timestamp("20130101")
@@ -148,6 +205,17 @@
 
     @pytest.mark.parametrize("method", ["ceil", "round", "floor"])
     def test_round_dst_border_ambiguous(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         # GH 18946 round near "fall back" DST
         ts = Timestamp("2017-10-29 00:00:00", tz="UTC").tz_convert("Europe/Madrid")
         #
@@ -176,6 +244,21 @@
         ],
     )
     def test_round_dst_border_nonexistent(self, method, ts_str, freq):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+        ts_str :
+            
+        freq :
+            
+
+        Returns
+        -------
+
+        """
         # GH 23324 round near "spring forward" DST
         ts = Timestamp(ts_str, tz="America/Chicago")
         result = getattr(ts, method)(freq, nonexistent="shift_forward")
@@ -224,6 +307,19 @@
         ],
     )
     def test_round_int64(self, timestamp, freq):
+        """
+
+        Parameters
+        ----------
+        timestamp :
+            
+        freq :
+            
+
+        Returns
+        -------
+
+        """
         # check that all rounding modes are accurate to int64 precision
         # see GH#22591
         dt = Timestamp(timestamp)
@@ -251,6 +347,7 @@
     # Timestamp.replace
 
     def test_replace_naive(self):
+        """ """
         # GH#14621, GH#7825
         ts = Timestamp("2016-01-01 09:00:00")
         result = ts.replace(hour=0)
@@ -258,6 +355,17 @@
         assert result == expected
 
     def test_replace_aware(self, tz_aware_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_aware_fixture :
+            
+
+        Returns
+        -------
+
+        """
         tz = tz_aware_fixture
         # GH#14621, GH#7825
         # replacing datetime components with and w/o presence of a timezone
@@ -267,6 +375,17 @@
         assert result == expected
 
     def test_replace_preserves_nanos(self, tz_aware_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_aware_fixture :
+            
+
+        Returns
+        -------
+
+        """
         tz = tz_aware_fixture
         # GH#14621, GH#7825
         ts = Timestamp("2016-01-01 09:00:00.000000123", tz=tz)
@@ -275,6 +394,17 @@
         assert result == expected
 
     def test_replace_multiple(self, tz_aware_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_aware_fixture :
+            
+
+        Returns
+        -------
+
+        """
         tz = tz_aware_fixture
         # GH#14621, GH#7825
         # replacing datetime components with and w/o presence of a timezone
@@ -294,6 +424,17 @@
         assert result == expected
 
     def test_replace_invalid_kwarg(self, tz_aware_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_aware_fixture :
+            
+
+        Returns
+        -------
+
+        """
         tz = tz_aware_fixture
         # GH#14621, GH#7825
         ts = Timestamp("2016-01-01 09:00:00.000000123", tz=tz)
@@ -302,6 +443,17 @@
             ts.replace(foo=5)
 
     def test_replace_integer_args(self, tz_aware_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_aware_fixture :
+            
+
+        Returns
+        -------
+
+        """
         tz = tz_aware_fixture
         # GH#14621, GH#7825
         ts = Timestamp("2016-01-01 09:00:00.000000123", tz=tz)
@@ -310,6 +462,7 @@
             ts.replace(hour=0.1)
 
     def test_replace_tzinfo_equiv_tz_localize_none(self):
+        """ """
         # GH#14621, GH#7825
         # assert conversion to naive is the same as replacing tzinfo with None
         ts = Timestamp("2013-11-03 01:59:59.999999-0400", tz="US/Eastern")
@@ -317,6 +470,7 @@
 
     @td.skip_if_windows
     def test_replace_tzinfo(self):
+        """ """
         # GH#15683
         dt = datetime(2016, 3, 27, 1)
         tzinfo = pytz.timezone("CET").localize(dt, is_dst=False).tzinfo
@@ -349,6 +503,19 @@
         ],
     )
     def test_replace_across_dst(self, tz, normalize):
+        """
+
+        Parameters
+        ----------
+        tz :
+            
+        normalize :
+            
+
+        Returns
+        -------
+
+        """
         # GH#18319 check that 1) timezone is correctly normalized and
         # 2) that hour is not incorrectly changed by this normalization
         ts_naive = Timestamp("2017-12-03 16:03:30")
@@ -368,6 +535,7 @@
         assert ts2 == ts2b
 
     def test_replace_dst_border(self):
+        """ """
         # Gh 7825
         t = Timestamp("2013-11-3", tz="America/Chicago")
         result = t.replace(hour=3)
@@ -377,6 +545,19 @@
     @pytest.mark.parametrize("fold", [0, 1])
     @pytest.mark.parametrize("tz", ["dateutil/Europe/London", "Europe/London"])
     def test_replace_dst_fold(self, fold, tz):
+        """
+
+        Parameters
+        ----------
+        fold :
+            
+        tz :
+            
+
+        Returns
+        -------
+
+        """
         # GH 25017
         d = datetime(2019, 10, 27, 2, 30)
         ts = Timestamp(d, tz=tz)
@@ -391,6 +572,19 @@
 
     @pytest.mark.parametrize("arg", ["2013-11-30", "2013-11-30 12:00:00"])
     def test_normalize(self, tz_naive_fixture, arg):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+        arg :
+            
+
+        Returns
+        -------
+
+        """
         tz = tz_naive_fixture
         ts = Timestamp(arg, tz=tz)
         result = ts.normalize()
@@ -398,6 +592,7 @@
         assert result == expected
 
     def test_normalize_pre_epoch_dates(self):
+        """ """
         # GH: 36294
         result = Timestamp("1969-01-01 09:00:00").normalize()
         expected = Timestamp("1969-01-01 00:00:00")
@@ -407,6 +602,7 @@
 
     @td.skip_if_windows
     def test_timestamp(self):
+        """ """
         # GH#17329
         # tz-naive --> treat it as if it were UTC for purposes of timestamp()
         ts = Timestamp.now()
