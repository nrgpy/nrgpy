# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tornado/template.py
+++ b/..//venv/lib/python3.8/site-packages/tornado/template.py
@@ -69,6 +69,19 @@
 
    ### Python code
    def add(x, y):
+     """
+
+     Parameters
+     ----------
+     x :
+         
+     y :
+         
+
+     Returns
+     -------
+
+     """
       return x + y
    template.execute(add=add)
 
@@ -212,12 +225,14 @@
 import typing
 
 if typing.TYPE_CHECKING:
+        """ """
     from typing import Tuple, ContextManager  # noqa: F401
 
 _DEFAULT_AUTOESCAPE = "xhtml_escape"
 
 
 class _UnsetMarker:
+    """ """
     pass
 
 
@@ -226,16 +241,27 @@
 
 def filter_whitespace(mode: str, text: str) -> str:
     """Transform whitespace in ``text`` according to ``mode``.
-
+    
     Available modes are:
-
+    
     * ``all``: Return all whitespace unmodified.
     * ``single``: Collapse consecutive whitespace with a single whitespace
       character, preserving newlines.
     * ``oneline``: Collapse all runs of whitespace into a single space
       character, removing all newlines in the process.
-
+    
     .. versionadded:: 4.3
+
+    Parameters
+    ----------
+    mode: str :
+        
+    text: str :
+        
+
+    Returns
+    -------
+
     """
     if mode == "all":
         return text
@@ -251,9 +277,16 @@
 
 class Template(object):
     """A compiled template.
-
+    
     We compile into Python from the given template_string. You can generate
     the template from variables with generate().
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     # note that the constructor's signature is not extracted with
@@ -335,7 +368,17 @@
             raise
 
     def generate(self, **kwargs: Any) -> bytes:
-        """Generate this template with the given arguments."""
+        """Generate this template with the given arguments.
+
+        Parameters
+        ----------
+        **kwargs: Any :
+            
+
+        Returns
+        -------
+
+        """
         namespace = {
             "escape": escape.xhtml_escape,
             "xhtml_escape": escape.xhtml_escape,
@@ -362,6 +405,17 @@
         return execute()
 
     def _generate_python(self, loader: Optional["BaseLoader"]) -> str:
+        """
+
+        Parameters
+        ----------
+        loader: Optional["BaseLoader"] :
+            
+
+        Returns
+        -------
+
+        """
         buffer = StringIO()
         try:
             # named_blocks maps from names to _NamedBlock objects
@@ -377,6 +431,17 @@
             buffer.close()
 
     def _get_ancestors(self, loader: Optional["BaseLoader"]) -> List["_File"]:
+        """
+
+        Parameters
+        ----------
+        loader: Optional["BaseLoader"] :
+            
+
+        Returns
+        -------
+
+        """
         ancestors = [self.file]
         for chunk in self.file.body.chunks:
             if isinstance(chunk, _ExtendsBlock):
@@ -391,10 +456,17 @@
 
 class BaseLoader(object):
     """Base class for template loaders.
-
+    
     You must use a template loader to use template constructs like
     ``{% extends %}`` and ``{% include %}``. The loader caches all
     templates after they are loaded the first time.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(
@@ -435,11 +507,35 @@
             self.templates = {}
 
     def resolve_path(self, name: str, parent_path: Optional[str] = None) -> str:
-        """Converts a possibly-relative path to absolute (used internally)."""
+        """Converts a possibly-relative path to absolute (used internally).
+
+        Parameters
+        ----------
+        name: str :
+            
+        parent_path: Optional[str] :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         raise NotImplementedError()
 
     def load(self, name: str, parent_path: Optional[str] = None) -> Template:
-        """Loads a template."""
+        """Loads a template.
+
+        Parameters
+        ----------
+        name: str :
+            
+        parent_path: Optional[str] :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         name = self.resolve_path(name, parent_path=parent_path)
         with self.lock:
             if name not in self.templates:
@@ -447,18 +543,41 @@
             return self.templates[name]
 
     def _create_template(self, name: str) -> Template:
+        """
+
+        Parameters
+        ----------
+        name: str :
+            
+
+        Returns
+        -------
+
+        """
         raise NotImplementedError()
 
 
 class Loader(BaseLoader):
-    """A template loader that loads from a single root directory.
-    """
+    """A template loader that loads from a single root directory."""
 
     def __init__(self, root_directory: str, **kwargs: Any) -> None:
         super().__init__(**kwargs)
         self.root = os.path.abspath(root_directory)
 
     def resolve_path(self, name: str, parent_path: Optional[str] = None) -> str:
+        """
+
+        Parameters
+        ----------
+        name: str :
+            
+        parent_path: Optional[str] :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if (
             parent_path
             and not parent_path.startswith("<")
@@ -473,6 +592,17 @@
         return name
 
     def _create_template(self, name: str) -> Template:
+        """
+
+        Parameters
+        ----------
+        name: str :
+            
+
+        Returns
+        -------
+
+        """
         path = os.path.join(self.root, name)
         with open(path, "rb") as f:
             template = Template(f.read(), name=name, loader=self)
@@ -487,6 +617,19 @@
         self.dict = dict
 
     def resolve_path(self, name: str, parent_path: Optional[str] = None) -> str:
+        """
+
+        Parameters
+        ----------
+        name: str :
+            
+        parent_path: Optional[str] :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if (
             parent_path
             and not parent_path.startswith("<")
@@ -498,30 +641,81 @@
         return name
 
     def _create_template(self, name: str) -> Template:
+        """
+
+        Parameters
+        ----------
+        name: str :
+            
+
+        Returns
+        -------
+
+        """
         return Template(self.dict[name], name=name, loader=self)
 
 
 class _Node(object):
+    """ """
     def each_child(self) -> Iterable["_Node"]:
+        """ """
         return ()
 
     def generate(self, writer: "_CodeWriter") -> None:
+        """
+
+        Parameters
+        ----------
+        writer: "_CodeWriter" :
+            
+
+        Returns
+        -------
+
+        """
         raise NotImplementedError()
 
     def find_named_blocks(
         self, loader: Optional[BaseLoader], named_blocks: Dict[str, "_NamedBlock"]
     ) -> None:
+        """
+
+        Parameters
+        ----------
+        loader: Optional[BaseLoader] :
+            
+        named_blocks: Dict[str :
+            
+        "_NamedBlock"] :
+            
+
+        Returns
+        -------
+
+        """
         for child in self.each_child():
             child.find_named_blocks(loader, named_blocks)
 
 
 class _File(_Node):
+    """ """
     def __init__(self, template: Template, body: "_ChunkList") -> None:
         self.template = template
         self.body = body
         self.line = 0
 
     def generate(self, writer: "_CodeWriter") -> None:
+        """
+
+        Parameters
+        ----------
+        writer: "_CodeWriter" :
+            
+
+        Returns
+        -------
+
+        """
         writer.write_line("def _tt_execute():", self.line)
         with writer.indent():
             writer.write_line("_tt_buffer = []", self.line)
@@ -530,22 +724,37 @@
             writer.write_line("return _tt_utf8('').join(_tt_buffer)", self.line)
 
     def each_child(self) -> Iterable["_Node"]:
+        """ """
         return (self.body,)
 
 
 class _ChunkList(_Node):
+    """ """
     def __init__(self, chunks: List[_Node]) -> None:
         self.chunks = chunks
 
     def generate(self, writer: "_CodeWriter") -> None:
+        """
+
+        Parameters
+        ----------
+        writer: "_CodeWriter" :
+            
+
+        Returns
+        -------
+
+        """
         for chunk in self.chunks:
             chunk.generate(writer)
 
     def each_child(self) -> Iterable["_Node"]:
+        """ """
         return self.chunks
 
 
 class _NamedBlock(_Node):
+    """ """
     def __init__(self, name: str, body: _Node, template: Template, line: int) -> None:
         self.name = name
         self.body = body
@@ -553,9 +762,21 @@
         self.line = line
 
     def each_child(self) -> Iterable["_Node"]:
+        """ """
         return (self.body,)
 
     def generate(self, writer: "_CodeWriter") -> None:
+        """
+
+        Parameters
+        ----------
+        writer: "_CodeWriter" :
+            
+
+        Returns
+        -------
+
+        """
         block = writer.named_blocks[self.name]
         with writer.include(block.template, self.line):
             block.body.generate(writer)
@@ -563,16 +784,33 @@
     def find_named_blocks(
         self, loader: Optional[BaseLoader], named_blocks: Dict[str, "_NamedBlock"]
     ) -> None:
+        """
+
+        Parameters
+        ----------
+        loader: Optional[BaseLoader] :
+            
+        named_blocks: Dict[str :
+            
+        "_NamedBlock"] :
+            
+
+        Returns
+        -------
+
+        """
         named_blocks[self.name] = self
         _Node.find_named_blocks(self, loader, named_blocks)
 
 
 class _ExtendsBlock(_Node):
+    """ """
     def __init__(self, name: str) -> None:
         self.name = name
 
 
 class _IncludeBlock(_Node):
+    """ """
     def __init__(self, name: str, reader: "_TemplateReader", line: int) -> None:
         self.name = name
         self.template_name = reader.name
@@ -581,11 +819,37 @@
     def find_named_blocks(
         self, loader: Optional[BaseLoader], named_blocks: Dict[str, _NamedBlock]
     ) -> None:
+        """
+
+        Parameters
+        ----------
+        loader: Optional[BaseLoader] :
+            
+        named_blocks: Dict[str :
+            
+        _NamedBlock] :
+            
+
+        Returns
+        -------
+
+        """
         assert loader is not None
         included = loader.load(self.name, self.template_name)
         included.file.find_named_blocks(loader, named_blocks)
 
     def generate(self, writer: "_CodeWriter") -> None:
+        """
+
+        Parameters
+        ----------
+        writer: "_CodeWriter" :
+            
+
+        Returns
+        -------
+
+        """
         assert writer.loader is not None
         included = writer.loader.load(self.name, self.template_name)
         with writer.include(included, self.line):
@@ -593,15 +857,28 @@
 
 
 class _ApplyBlock(_Node):
+    """ """
     def __init__(self, method: str, line: int, body: _Node) -> None:
         self.method = method
         self.line = line
         self.body = body
 
     def each_child(self) -> Iterable["_Node"]:
+        """ """
         return (self.body,)
 
     def generate(self, writer: "_CodeWriter") -> None:
+        """
+
+        Parameters
+        ----------
+        writer: "_CodeWriter" :
+            
+
+        Returns
+        -------
+
+        """
         method_name = "_tt_apply%d" % writer.apply_counter
         writer.apply_counter += 1
         writer.write_line("def %s():" % method_name, self.line)
@@ -616,15 +893,28 @@
 
 
 class _ControlBlock(_Node):
+    """ """
     def __init__(self, statement: str, line: int, body: _Node) -> None:
         self.statement = statement
         self.line = line
         self.body = body
 
     def each_child(self) -> Iterable[_Node]:
+        """ """
         return (self.body,)
 
     def generate(self, writer: "_CodeWriter") -> None:
+        """
+
+        Parameters
+        ----------
+        writer: "_CodeWriter" :
+            
+
+        Returns
+        -------
+
+        """
         writer.write_line("%s:" % self.statement, self.line)
         with writer.indent():
             self.body.generate(writer)
@@ -633,32 +923,68 @@
 
 
 class _IntermediateControlBlock(_Node):
+    """ """
     def __init__(self, statement: str, line: int) -> None:
         self.statement = statement
         self.line = line
 
     def generate(self, writer: "_CodeWriter") -> None:
+        """
+
+        Parameters
+        ----------
+        writer: "_CodeWriter" :
+            
+
+        Returns
+        -------
+
+        """
         # In case the previous block was empty
         writer.write_line("pass", self.line)
         writer.write_line("%s:" % self.statement, self.line, writer.indent_size() - 1)
 
 
 class _Statement(_Node):
+    """ """
     def __init__(self, statement: str, line: int) -> None:
         self.statement = statement
         self.line = line
 
     def generate(self, writer: "_CodeWriter") -> None:
+        """
+
+        Parameters
+        ----------
+        writer: "_CodeWriter" :
+            
+
+        Returns
+        -------
+
+        """
         writer.write_line(self.statement, self.line)
 
 
 class _Expression(_Node):
+    """ """
     def __init__(self, expression: str, line: int, raw: bool = False) -> None:
         self.expression = expression
         self.line = line
         self.raw = raw
 
     def generate(self, writer: "_CodeWriter") -> None:
+        """
+
+        Parameters
+        ----------
+        writer: "_CodeWriter" :
+            
+
+        Returns
+        -------
+
+        """
         writer.write_line("_tt_tmp = %s" % self.expression, self.line)
         writer.write_line(
             "if isinstance(_tt_tmp, _tt_string_types):" " _tt_tmp = _tt_utf8(_tt_tmp)",
@@ -676,17 +1002,30 @@
 
 
 class _Module(_Expression):
+    """ """
     def __init__(self, expression: str, line: int) -> None:
         super().__init__("_tt_modules." + expression, line, raw=True)
 
 
 class _Text(_Node):
+    """ """
     def __init__(self, value: str, line: int, whitespace: str) -> None:
         self.value = value
         self.line = line
         self.whitespace = whitespace
 
     def generate(self, writer: "_CodeWriter") -> None:
+        """
+
+        Parameters
+        ----------
+        writer: "_CodeWriter" :
+            
+
+        Returns
+        -------
+
+        """
         value = self.value
 
         # Compress whitespace if requested, with a crude heuristic to avoid
@@ -699,13 +1038,25 @@
 
 
 class ParseError(Exception):
-    """Raised for template syntax errors.
-
-    ``ParseError`` instances have ``filename`` and ``lineno`` attributes
-    indicating the position of the error.
-
-    .. versionchanged:: 4.3
-       Added ``filename`` and ``lineno`` attributes.
+    """
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    Raises
+    ------
+    ParseError
+        instances have
+    indicating
+        the position of the error
+    .
+        versionchanged
+    Added
+        filename
+
     """
 
     def __init__(
@@ -722,6 +1073,7 @@
 
 
 class _CodeWriter(object):
+    """ """
     def __init__(
         self,
         file: TextIO,
@@ -738,10 +1090,13 @@
         self._indent = 0
 
     def indent_size(self) -> int:
+        """ """
         return self._indent
 
     def indent(self) -> "ContextManager":
+        """ """
         class Indenter(object):
+            """ """
             def __enter__(_) -> "_CodeWriter":
                 self._indent += 1
                 return self
@@ -753,10 +1108,24 @@
         return Indenter()
 
     def include(self, template: Template, line: int) -> "ContextManager":
+        """
+
+        Parameters
+        ----------
+        template: Template :
+            
+        line: int :
+            
+
+        Returns
+        -------
+
+        """
         self.include_stack.append((self.current_template, line))
         self.current_template = template
 
         class IncludeTemplate(object):
+            """ """
             def __enter__(_) -> "_CodeWriter":
                 return self
 
@@ -768,6 +1137,21 @@
     def write_line(
         self, line: str, line_number: int, indent: Optional[int] = None
     ) -> None:
+        """
+
+        Parameters
+        ----------
+        line: str :
+            
+        line_number: int :
+            
+        indent: Optional[int] :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if indent is None:
             indent = self._indent
         line_comment = "  # %s:%d" % (self.current_template.name, line_number)
@@ -780,6 +1164,7 @@
 
 
 class _TemplateReader(object):
+    """ """
     def __init__(self, name: str, text: str, whitespace: str) -> None:
         self.name = name
         self.text = text
@@ -788,6 +1173,21 @@
         self.pos = 0
 
     def find(self, needle: str, start: int = 0, end: Optional[int] = None) -> int:
+        """
+
+        Parameters
+        ----------
+        needle: str :
+            
+        start: int :
+             (Default value = 0)
+        end: Optional[int] :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         assert start >= 0, start
         pos = self.pos
         start += pos
@@ -802,6 +1202,17 @@
         return index
 
     def consume(self, count: Optional[int] = None) -> str:
+        """
+
+        Parameters
+        ----------
+        count: Optional[int] :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if count is None:
             count = len(self.text) - self.pos
         newpos = self.pos + count
@@ -811,6 +1222,7 @@
         return s
 
     def remaining(self) -> int:
+        """ """
         return len(self.text) - self.pos
 
     def __len__(self) -> int:
@@ -836,10 +1248,32 @@
         return self.text[self.pos :]
 
     def raise_parse_error(self, msg: str) -> None:
+        """
+
+        Parameters
+        ----------
+        msg: str :
+            
+
+        Returns
+        -------
+
+        """
         raise ParseError(msg, self.name, self.line)
 
 
 def _format_code(code: str) -> str:
+    """
+
+    Parameters
+    ----------
+    code: str :
+        
+
+    Returns
+    -------
+
+    """
     lines = code.splitlines()
     format = "%%%dd  %%s\n" % len(repr(len(lines) + 1))
     return "".join([format % (i + 1, line) for (i, line) in enumerate(lines)])
@@ -851,6 +1285,23 @@
     in_block: Optional[str] = None,
     in_loop: Optional[str] = None,
 ) -> _ChunkList:
+    """
+
+    Parameters
+    ----------
+    reader: _TemplateReader :
+        
+    template: Template :
+        
+    in_block: Optional[str] :
+         (Default value = None)
+    in_loop: Optional[str] :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     body = _ChunkList([])
     while True:
         # Find next template directive
