# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pickleshare.py
+++ b/..//venv/lib/python3.8/site-packages/pickleshare.py
@@ -62,12 +62,23 @@
     string_types = (str, unicode)
 
 def gethashfile(key):
+    """
+
+    Parameters
+    ----------
+    key :
+        
+
+    Returns
+    -------
+
+    """
     return ("%02x" % abs(hash(key) % 256))[-2:]
 
 _sentinel = object()
 
 class PickleShareDB(collections_abc.MutableMapping):
-    """ The main 'connection' object for PickleShare database """
+    """The main 'connection' object for PickleShare database"""
     def __init__(self,root):
         """ Return a db object that will manage the specied directory"""
         if not isinstance(root, string_types):
@@ -123,7 +134,21 @@
                 raise
 
     def hset(self, hashroot, key, value):
-        """ hashed set """
+        """hashed set
+
+        Parameters
+        ----------
+        hashroot :
+            
+        key :
+            
+        value :
+            
+
+        Returns
+        -------
+
+        """
         hroot = self.root / hashroot
         if not hroot.is_dir():
             hroot.mkdir()
@@ -135,7 +160,23 @@
 
 
     def hget(self, hashroot, key, default = _sentinel, fast_only = True):
-        """ hashed get """
+        """hashed get
+
+        Parameters
+        ----------
+        hashroot :
+            
+        key :
+            
+        default :
+             (Default value = _sentinel)
+        fast_only :
+             (Default value = True)
+
+        Returns
+        -------
+
+        """
         hroot = self.root / hashroot
         hfile = hroot / gethashfile(key)
 
@@ -154,7 +195,17 @@
         return d.get(key, default)
 
     def hdict(self, hashroot):
-        """ Get all data contained in hashed category 'hashroot' as dict """
+        """Get all data contained in hashed category 'hashroot' as dict
+
+        Parameters
+        ----------
+        hashroot :
+            
+
+        Returns
+        -------
+
+        """
         hfiles = self.keys(hashroot + "/*")
         hfiles.sort()
         last = len(hfiles) and hfiles[-1] or ''
@@ -177,10 +228,18 @@
         return all
 
     def hcompress(self, hashroot):
-        """ Compress category 'hashroot', so hset is fast again
-
+        """Compress category 'hashroot', so hset is fast again
+        
         hget will fail if fast_only is True for compressed items (that were
         hset before hcompress).
+
+        Parameters
+        ----------
+        hashroot :
+            
+
+        Returns
+        -------
 
         """
         hfiles = self.keys(hashroot + "/*")
@@ -211,11 +270,31 @@
             pass
 
     def _normalized(self, p):
-        """ Make a key suitable for user's eyes """
+        """Make a key suitable for user's eyes
+
+        Parameters
+        ----------
+        p :
+            
+
+        Returns
+        -------
+
+        """
         return str(p.relative_to(self.root)).replace('\\','/')
 
     def keys(self, globpat = None):
-        """ All keys in DB, or all keys matching a glob"""
+        """All keys in DB, or all keys matching a glob
+
+        Parameters
+        ----------
+        globpat :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
 
         if globpat is None:
             files = self.root.rglob('*')
@@ -230,11 +309,19 @@
         return len(self.keys())
 
     def uncache(self,*items):
-        """ Removes all, or specified items from cache
-
+        """Removes all, or specified items from cache
+        
         Use this after reading a large amount of large objects
         to free up memory, when you won't be needing the objects
         for a while.
+
+        Parameters
+        ----------
+        *items :
+            
+
+        Returns
+        -------
 
         """
         if not items:
@@ -243,17 +330,28 @@
             self.cache.pop(it,None)
 
     def waitget(self,key, maxwaittime = 60 ):
-        """ Wait (poll) for a key to get a value
-
+        """Wait (poll) for a key to get a value
+        
         Will wait for `maxwaittime` seconds before raising a KeyError.
         The call exits normally if the `key` field in db gets a value
         within the timeout period.
-
+        
         Use this for synchronizing different processes or for ensuring
         that an unfortunately timed "db['key'] = newvalue" operation
         in another process (which causes all 'get' operation to cause a
         KeyError for the duration of pickling) won't screw up your program
         logic.
+
+        Parameters
+        ----------
+        key :
+            
+        maxwaittime :
+             (Default value = 60)
+
+        Returns
+        -------
+
         """
 
         wtimes = [0.2] * 3 + [0.5] * 2 + [1]
@@ -275,7 +373,17 @@
                 tries+=1
 
     def getlink(self,folder):
-        """ Get a convenient link for accessing items  """
+        """Get a convenient link for accessing items
+
+        Parameters
+        ----------
+        folder :
+            
+
+        Returns
+        -------
+
+        """
         return PickleShareLink(self, folder)
 
     def __repr__(self):
@@ -284,13 +392,19 @@
 
 
 class PickleShareLink:
-    """ A shortdand for accessing nested PickleShare data conveniently.
-
+    """A shortdand for accessing nested PickleShare data conveniently.
+    
     Created through PickleShareDB.getlink(), example::
-
+    
         lnk = db.getlink('myobjects/test')
         lnk.foo = 2
         lnk.bar = lnk.foo + 5
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     """
     def __init__(self, db, keydir ):
@@ -308,6 +422,7 @@
             ";".join([Path(k).basename() for k in keys]))
 
 def main():
+    """ """
     import textwrap
     usage = textwrap.dedent("""\
     pickleshare - manage PickleShare databases
