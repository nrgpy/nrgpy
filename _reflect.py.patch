# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jsonschema/_reflect.py
+++ b/..//venv/lib/python3.8/site-packages/jsonschema/_reflect.py
@@ -13,37 +13,58 @@
 
 
 class _NoModuleFound(Exception):
-    """
-    No module was found because none exists.
-    """
+    """No module was found because none exists."""
 
 
 
 class InvalidName(ValueError):
-    """
-    The given name is not a dot-separated list of Python objects.
-    """
+    """The given name is not a dot-separated list of Python objects."""
 
 
 
 class ModuleNotFound(InvalidName):
-    """
-    The module associated with the given name doesn't exist and it can't be
+    """The module associated with the given name doesn't exist and it can't be
     imported.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
 
 
 class ObjectNotFound(InvalidName):
-    """
-    The object associated with the given name doesn't exist and it can't be
+    """The object associated with the given name doesn't exist and it can't be
     imported.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
 
 
 if PY3:
     def reraise(exception, traceback):
+        """
+
+        Parameters
+        ----------
+        exception :
+            
+        traceback :
+            
+
+        Returns
+        -------
+
+        """
         raise exception.with_traceback(traceback)
 else:
     exec("""def reraise(exception, traceback):
@@ -62,20 +83,30 @@
 
 
 def _importAndCheckStack(importName):
-    """
-    Import the given name as a module, then walk the stack to determine whether
+    """Import the given name as a module, then walk the stack to determine whether
     the failure was the module not existing, or some code in the module (for
     example a dependent import) failing.  This can be helpful to determine
     whether any actual application code was run.  For example, to distiguish
     administrative error (entering the wrong module name), from programmer
     error (writing buggy code in a module that fails to import).
 
-    @param importName: The name of the module to import.
-    @type importName: C{str}
-    @raise Exception: if something bad happens.  This can be any type of
+    Parameters
+    ----------
+    importName : C{str}
+        The name of the module to import.
+
+    Returns
+    -------
+
+    Raises
+    ------
+    Exception
+        if something bad happens.  This can be any type of
         exception, since nobody knows what loading some arbitrary code might
         do.
-    @raise _NoModuleFound: if no module was found.
+    _NoModuleFound
+        if no module was found.
+
     """
     try:
         return __import__(importName)
@@ -93,32 +124,40 @@
 
 
 def namedAny(name):
-    """
-    Retrieve a Python object by its fully qualified name from the global Python
+    """Retrieve a Python object by its fully qualified name from the global Python
     module namespace.  The first part of the name, that describes a module,
     will be discovered and imported.  Each subsequent part of the name is
     treated as the name of an attribute of the object specified by all of the
     name which came before it.  For example, the fully-qualified name of this
     object is 'twisted.python.reflect.namedAny'.
 
-    @type name: L{str}
-    @param name: The name of the object to return.
+    Parameters
+    ----------
+    name :
+        The name of the object to return.
 
-    @raise InvalidName: If the name is an empty string, starts or ends with
+    Returns
+    -------
+    type
+        the Python object identified by 'name'.
+
+    Raises
+    ------
+    InvalidName
+        If the name is an empty string, starts or ends with
         a '.', or is otherwise syntactically incorrect.
-
-    @raise ModuleNotFound: If the name is syntactically correct but the
+    ModuleNotFound
+        If the name is syntactically correct but the
         module it specifies cannot be imported because it does not appear to
         exist.
-
-    @raise ObjectNotFound: If the name is syntactically correct, includes at
+    ObjectNotFound
+        If the name is syntactically correct, includes at
         least one '.', but the module it specifies cannot be imported because
         it does not appear to exist.
-
-    @raise AttributeError: If an attribute of an object along the way cannot be
+    AttributeError
+        If an attribute of an object along the way cannot be
         accessed, or a module along the way is not found.
 
-    @return: the Python object identified by 'name'.
     """
     if not name:
         raise InvalidName('Empty module name')
