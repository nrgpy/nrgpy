# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/profiledir.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/profiledir.py
@@ -18,6 +18,7 @@
 #-----------------------------------------------------------------------------
 
 class ProfileDirError(Exception):
+    """ """
     pass
 
 
@@ -27,12 +28,19 @@
 
 class ProfileDir(LoggingConfigurable):
     """An object to manage the profile directory and its resources.
-
+    
     The profile directory is used by all IPython applications, to manage
     configuration, logging and security.
-
+    
     This object knows how to find, create and manage these directories. This
     should be used by any code that wants to handle profiles.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     security_dir_name = Unicode('security')
@@ -54,6 +62,17 @@
     _location_isset = Bool(False) # flag for detecting multiply set location
     @observe('location')
     def _location_changed(self, change):
+        """
+
+        Parameters
+        ----------
+        change :
+            
+
+        Returns
+        -------
+
+        """
         if self._location_isset:
             raise RuntimeError("Cannot set profile location more than once.")
         self._location_isset = True
@@ -70,14 +89,25 @@
     
     def _mkdir(self, path, mode=None):
         """ensure a directory exists at a given path
-
+        
         This is a version of os.mkdir, with the following differences:
-
+        
         - returns True if it created the directory, False otherwise
         - ignores EEXIST, protecting against race conditions where
           the dir may have been created in between the check and
           the creation
         - sets permissions if requested and the dir already exists
+
+        Parameters
+        ----------
+        path :
+            
+        mode :
+             (Default value = None)
+
+        Returns
+        -------
+
         """
         if os.path.exists(path):
             if mode and os.stat(path).st_mode != mode:
@@ -104,10 +134,32 @@
     
     @observe('log_dir')
     def check_log_dir(self, change=None):
+        """
+
+        Parameters
+        ----------
+        change :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         self._mkdir(self.log_dir)
     
     @observe('startup_dir')
     def check_startup_dir(self, change=None):
+        """
+
+        Parameters
+        ----------
+        change :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         self._mkdir(self.startup_dir)
 
         readme = os.path.join(self.startup_dir, 'README')
@@ -121,13 +173,36 @@
 
     @observe('security_dir')
     def check_security_dir(self, change=None):
+        """
+
+        Parameters
+        ----------
+        change :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         self._mkdir(self.security_dir, 0o40700)
 
     @observe('pid_dir')
     def check_pid_dir(self, change=None):
+        """
+
+        Parameters
+        ----------
+        change :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         self._mkdir(self.pid_dir, 0o40700)
 
     def check_dirs(self):
+        """ """
         self.check_security_dir()
         self.check_log_dir()
         self.check_pid_dir()
@@ -135,10 +210,23 @@
 
     def copy_config_file(self, config_file, path=None, overwrite=False):
         """Copy a default config file into the active profile directory.
-
+        
         Default configuration files are kept in :mod:`IPython.core.profile`.
         This function moves these from that location to the working profile
         directory.
+
+        Parameters
+        ----------
+        config_file :
+            
+        path :
+             (Default value = None)
+        overwrite :
+             (Default value = False)
+
+        Returns
+        -------
+
         """
         dst = os.path.join(self.location, config_file)
         if os.path.isfile(dst) and not overwrite:
@@ -155,9 +243,15 @@
 
         Parameters
         ----------
-        profile_dir : str
-            The full path to the profile directory.  If it does exist, it will
-            be used.  If not, it will be created.
+        profile_dir :
+            
+        config :
+             (Default value = None)
+
+        Returns
+        -------
+
+        
         """
         return cls(location=profile_dir, config=config)
 
@@ -167,11 +261,17 @@
 
         Parameters
         ----------
-        path : unicode
-            The path (directory) to put the profile directory in.
-        name : unicode
-            The name of the profile.  The name of the profile directory will
-            be "profile_<profile>".
+        path :
+            
+        name :
+             (Default value = u'default')
+        config :
+             (Default value = None)
+
+        Returns
+        -------
+
+        
         """
         if not os.path.isdir(path):
             raise ProfileDirError('Directory not found: %s' % path)
@@ -181,21 +281,27 @@
     @classmethod
     def find_profile_dir_by_name(cls, ipython_dir, name=u'default', config=None):
         """Find an existing profile dir by profile name, return its ProfileDir.
-
+        
         This searches through a sequence of paths for a profile dir.  If it
         is not found, a :class:`ProfileDirError` exception will be raised.
-
+        
         The search path algorithm is:
         1. ``os.getcwd()``
         2. ``ipython_dir``
 
         Parameters
         ----------
-        ipython_dir : unicode or str
-            The IPython directory to use.
-        name : unicode or str
-            The name of the profile.  The name of the profile directory
-            will be "profile_<profile>".
+        ipython_dir :
+            
+        name :
+             (Default value = u'default')
+        config :
+             (Default value = None)
+
+        Returns
+        -------
+
+        
         """
         dirname = u'profile_' + name
         paths = [os.getcwd(), ipython_dir]
@@ -209,13 +315,20 @@
     @classmethod
     def find_profile_dir(cls, profile_dir, config=None):
         """Find/create a profile dir and return its ProfileDir.
-
+        
         This will create the profile directory if it doesn't exist.
 
         Parameters
         ----------
-        profile_dir : unicode or str
-            The path of the profile directory.
+        profile_dir :
+            
+        config :
+             (Default value = None)
+
+        Returns
+        -------
+
+        
         """
         profile_dir = expand_path(profile_dir)
         if not os.path.isdir(profile_dir):
