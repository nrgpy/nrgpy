# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/profileapp.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/profileapp.py
@@ -95,7 +95,17 @@
 
 
 def list_profiles_in(path):
-    """list profiles in a given root directory"""
+    """list profiles in a given root directory
+
+    Parameters
+    ----------
+    path :
+        
+
+    Returns
+    -------
+
+    """
     profiles = []
 
     # for python 3.6+ rewrite to: with os.scandir(path) as dirlist:
@@ -120,18 +130,31 @@
 
 
 class ProfileLocate(BaseIPythonApplication):
-    description = """print the path to an IPython profile dir"""
+    """description = """print the path to an IPython profile dir"""
     
     def parse_command_line(self, argv=None):
+        """
+
+        Parameters
+        ----------
+        argv :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         super(ProfileLocate, self).parse_command_line(argv)
         if self.extra_args:
             self.profile = self.extra_args[0]
     
     def start(self):
+        """ """
         print(self.profile_dir.location)
 
 
 class ProfileList(Application):
+    """ """
     name = u'ipython-profile'
     description = list_help
     examples = _list_examples
@@ -157,11 +180,22 @@
 
 
     def _print_profiles(self, profiles):
-        """print list of profiles, indented."""
+        """print list of profiles, indented.
+
+        Parameters
+        ----------
+        profiles :
+            
+
+        Returns
+        -------
+
+        """
         for profile in profiles:
             print('    %s' % profile)
 
     def list_profile_dirs(self):
+        """ """
         profiles = list_bundled_profiles()
         if profiles:
             print()
@@ -190,6 +224,7 @@
         print()
 
     def start(self):
+        """ """
         self.list_profile_dirs()
 
 
@@ -205,14 +240,17 @@
 
 
 class ProfileCreate(BaseIPythonApplication):
+    """ """
     name = u'ipython-profile'
     description = create_help
     examples = _create_examples
     auto_create = Bool(True)
     def _log_format_default(self):
+        """ """
         return "[%(name)s] %(message)s"
 
     def _copy_config_files_default(self):
+        """ """
         return True
 
     parallel = Bool(False,
@@ -221,6 +259,17 @@
 
     @observe('parallel')
     def _parallel_changed(self, change):
+        """
+
+        Parameters
+        ----------
+        change :
+            
+
+        Returns
+        -------
+
+        """
         parallel_files = [   'ipcontroller_config.py',
                             'ipengine_config.py',
                             'ipcluster_config.py'
@@ -234,6 +283,17 @@
                     self.config_files.remove(cf)
 
     def parse_command_line(self, argv):
+        """
+
+        Parameters
+        ----------
+        argv :
+            
+
+        Returns
+        -------
+
+        """
         super(ProfileCreate, self).parse_command_line(argv)
         # accept positional arg as profile name
         if self.extra_args:
@@ -244,7 +304,17 @@
     classes = [ProfileDir]
     
     def _import_app(self, app_path):
-        """import an app class"""
+        """import an app class
+
+        Parameters
+        ----------
+        app_path :
+            
+
+        Returns
+        -------
+
+        """
         app = None
         name = app_path.rsplit('.', 1)[-1]
         try:
@@ -256,6 +326,7 @@
         return app
 
     def init_config_files(self):
+        """ """
         super(ProfileCreate, self).init_config_files()
         # use local imports, since these classes may import from here
         from IPython.terminal.ipapp import TerminalIPythonApp
@@ -286,10 +357,12 @@
             app.init_config_files()
 
     def stage_default_config_file(self):
+        """ """
         pass
 
 
 class ProfileApp(Application):
+    """ """
     name = u'ipython profile'
     description = profile_help
     examples = _main_examples
@@ -301,6 +374,7 @@
     ))
 
     def start(self):
+        """ """
         if self.subapp is None:
             print("No subcommand specified. Must specify one of: %s"%(self.subcommands.keys()))
             print()
