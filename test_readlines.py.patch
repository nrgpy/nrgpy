# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/json/test_readlines.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/json/test_readlines.py
@@ -12,11 +12,13 @@
 
 @pytest.fixture
 def lines_json_df():
+    """ """
     df = pd.DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]})
     return df.to_json(lines=True, orient="records")
 
 
 def test_read_jsonl():
+    """ """
     # GH9180
     result = read_json('{"a": 1, "b": 2}\n{"b":2, "a" :1}\n', lines=True)
     expected = DataFrame([[1, 2], [1, 2]], columns=["a", "b"])
@@ -24,6 +26,7 @@
 
 
 def test_read_jsonl_unicode_chars():
+    """ """
     # GH15132: non-ascii unicode characters
     # \u201d == RIGHT DOUBLE QUOTATION MARK
 
@@ -42,6 +45,7 @@
 
 
 def test_to_jsonl():
+    """ """
     # GH9180
     df = DataFrame([[1, 2], [1, 2]], columns=["a", "b"])
     result = df.to_json(orient="records", lines=True)
@@ -64,6 +68,19 @@
 
 @pytest.mark.parametrize("chunksize", [1, 1.0])
 def test_readjson_chunks(lines_json_df, chunksize):
+    """
+
+    Parameters
+    ----------
+    lines_json_df :
+        
+    chunksize :
+        
+
+    Returns
+    -------
+
+    """
     # Basic test that read_json(chunks=True) gives the same result as
     # read_json(chunks=False)
     # GH17048: memory usage when lines=True
@@ -76,12 +93,24 @@
 
 
 def test_readjson_chunksize_requires_lines(lines_json_df):
+    """
+
+    Parameters
+    ----------
+    lines_json_df :
+        
+
+    Returns
+    -------
+
+    """
     msg = "chunksize can only be passed if lines=True"
     with pytest.raises(ValueError, match=msg):
         pd.read_json(StringIO(lines_json_df), lines=False, chunksize=2)
 
 
 def test_readjson_chunks_series():
+    """ """
     # Test reading line-format JSON to Series with chunksize param
     s = pd.Series({"A": 1, "B": 2})
 
@@ -95,6 +124,17 @@
 
 
 def test_readjson_each_chunk(lines_json_df):
+    """
+
+    Parameters
+    ----------
+    lines_json_df :
+        
+
+    Returns
+    -------
+
+    """
     # Other tests check that the final result of read_json(chunksize=True)
     # is correct. This checks the intermediate chunks.
     chunks = list(pd.read_json(StringIO(lines_json_df), lines=True, chunksize=2))
@@ -103,6 +143,7 @@
 
 
 def test_readjson_chunks_from_file():
+    """ """
     with tm.ensure_clean("test.json") as path:
         df = pd.DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]})
         df.to_json(path, lines=True, orient="records")
@@ -113,6 +154,17 @@
 
 @pytest.mark.parametrize("chunksize", [None, 1])
 def test_readjson_chunks_closes(chunksize):
+    """
+
+    Parameters
+    ----------
+    chunksize :
+        
+
+    Returns
+    -------
+
+    """
     with tm.ensure_clean("test.json") as path:
         df = pd.DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]})
         df.to_json(path, lines=True, orient="records")
@@ -141,6 +193,19 @@
 
 @pytest.mark.parametrize("chunksize", [0, -1, 2.2, "foo"])
 def test_readjson_invalid_chunksize(lines_json_df, chunksize):
+    """
+
+    Parameters
+    ----------
+    lines_json_df :
+        
+    chunksize :
+        
+
+    Returns
+    -------
+
+    """
     msg = r"'chunksize' must be an integer >=1"
 
     with pytest.raises(ValueError, match=msg):
@@ -149,22 +214,29 @@
 
 @pytest.mark.parametrize("chunksize", [None, 1, 2])
 def test_readjson_chunks_multiple_empty_lines(chunksize):
-    j = """
-
+    """j = """
+    
     {"A":1,"B":4}
-
-
-
+    
+    
+    
     {"A":2,"B":5}
-
-
-
-
-
-
-
+    
+    
+    
+    
+    
+    
+    
     {"A":3,"B":6}
-    """
+
+    Parameters
+    ----------
+    chunksize :
+        
+
+    Returns
+    -------
     orig = pd.DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]})
     test = pd.read_json(j, lines=True, chunksize=chunksize)
     if chunksize is not None:
@@ -173,6 +245,17 @@
 
 
 def test_readjson_unicode(monkeypatch):
+    """
+
+    Parameters
+    ----------
+    monkeypatch :
+        
+
+    Returns
+    -------
+
+    """
     with tm.ensure_clean("test.json") as path:
         monkeypatch.setattr("_bootlocale.getpreferredencoding", lambda l: "cp949")
         with open(path, "w", encoding="utf-8") as f:
@@ -185,6 +268,17 @@
 
 @pytest.mark.parametrize("nrows", [1, 2])
 def test_readjson_nrows(nrows):
+    """
+
+    Parameters
+    ----------
+    nrows :
+        
+
+    Returns
+    -------
+
+    """
     # GH 33916
     # Test reading line-format JSON to Series with nrows param
     jsonl = """{"a": 1, "b": 2}
@@ -198,6 +292,19 @@
 
 @pytest.mark.parametrize("nrows,chunksize", [(2, 2), (4, 2)])
 def test_readjson_nrows_chunks(nrows, chunksize):
+    """
+
+    Parameters
+    ----------
+    nrows :
+        
+    chunksize :
+        
+
+    Returns
+    -------
+
+    """
     # GH 33916
     # Test reading line-format JSON to Series with nrows and chunksize param
     jsonl = """{"a": 1, "b": 2}
@@ -211,6 +318,7 @@
 
 
 def test_readjson_nrows_requires_lines():
+    """ """
     # GH 33916
     # Test ValuError raised if nrows is set without setting lines in read_json
     jsonl = """{"a": 1, "b": 2}
@@ -223,6 +331,17 @@
 
 
 def test_readjson_lines_chunks_fileurl(datapath):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     # GH 27135
     # Test reading line-format JSON from file url
     df_list_expected = [
