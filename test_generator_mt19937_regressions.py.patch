# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/random/tests/test_generator_mt19937_regressions.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/random/tests/test_generator_mt19937_regressions.py
@@ -7,8 +7,10 @@
 
 
 class TestRegression:
+    """ """
 
     def test_VonMises_range(self):
+        """ """
         # Make sure generated random variables are in [-pi, pi].
         # Regression test for ticket #986.
         for mu in np.linspace(-7., 7., 5):
@@ -16,6 +18,7 @@
             assert_(np.all(r > -np.pi) and np.all(r <= np.pi))
 
     def test_hypergeometric_range(self):
+        """ """
         # Test for ticket #921
         assert_(np.all(mt19937.hypergeometric(3, 18, 11, size=10) < 4))
         assert_(np.all(mt19937.hypergeometric(18, 3, 11, size=10) > 0))
@@ -25,6 +28,7 @@
         assert_(mt19937.hypergeometric(*args) > 0)
 
     def test_logseries_convergence(self):
+        """ """
         # Test for ticket #923
         N = 1000
         mt19937 = Generator(MT19937(0))
@@ -41,6 +45,7 @@
         assert_(freq < 0.23, msg)
 
     def test_shuffle_mixed_dimension(self):
+        """ """
         # Test for trac ticket #2074
         for t in [[1, 2, 3, None],
                   [(1, 1), (2, 2), (3, 3), None],
@@ -53,6 +58,7 @@
             assert_array_equal(np.array(shuffled, dtype=object), expected)
 
     def test_call_within_randomstate(self):
+        """ """
         # Check that custom BitGenerator does not call into global state
         res = np.array([1, 8, 0, 1, 5, 3, 3, 8, 1, 4])
         for i in range(3):
@@ -62,6 +68,7 @@
             assert_array_equal(m.choice(10, size=10, p=np.ones(10)/10.), res)
 
     def test_multivariate_normal_size_types(self):
+        """ """
         # Test for multivariate_normal issue with 'size' argument.
         # Check that the multivariate_normal size argument can be a
         # numpy integer.
@@ -70,6 +77,7 @@
         mt19937.multivariate_normal([0], [[0]], size=np.int64(1))
 
     def test_beta_small_parameters(self):
+        """ """
         # Test that beta with small a and b parameters does not produce
         # NaNs due to roundoff errors causing 0 / 0, gh-5851
         mt19937 = Generator(MT19937(1234567890))
@@ -77,6 +85,7 @@
         assert_(not np.any(np.isnan(x)), 'Nans in mt19937.beta')
 
     def test_choice_sum_of_probs_tolerance(self):
+        """ """
         # The sum of probs should be 1.0 with some tolerance.
         # For low precision dtypes the tolerance was too tight.
         # See numpy github issue 6123.
@@ -91,6 +100,7 @@
                 mt19937.choice(a, p=probs*0.9)
 
     def test_shuffle_of_array_of_different_length_strings(self):
+        """ """
         # Test that permuting an array of different length strings
         # will not cause a segfault on garbage collection
         # Tests gh-7710
@@ -106,6 +116,7 @@
         gc.collect()
 
     def test_shuffle_of_array_of_objects(self):
+        """ """
         # Test that permuting an array of objects will not cause
         # a segfault on garbage collection.
         # See gh-7719
@@ -120,7 +131,9 @@
         gc.collect()
 
     def test_permutation_subclass(self):
+        """ """
         class N(np.ndarray):
+            """ """
             pass
 
         mt19937 = Generator(MT19937(1))
@@ -130,6 +143,7 @@
         assert_array_equal(orig, np.arange(3).view(N))
 
         class M:
+            """ """
             a = np.arange(5)
 
             def __array__(self):
@@ -142,6 +156,7 @@
         assert_array_equal(m.__array__(), np.arange(5))
 
     def test_gamma_0(self):
+        """ """
         assert mt19937.standard_gamma(0.0) == 0.0
         assert_array_equal(mt19937.standard_gamma([0.0]), 0.0)
 
