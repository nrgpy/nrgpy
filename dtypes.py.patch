# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/dtypes/dtypes.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/dtypes/dtypes.py
@@ -42,10 +42,16 @@
 
 
 class PandasExtensionDtype(ExtensionDtype):
-    """
-    A np.dtype duck-typed class, suitable for holding a custom dtype.
-
+    """A np.dtype duck-typed class, suitable for holding a custom dtype.
+    
     THIS IS NOT A REAL NUMPY DTYPE
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     type: Any
@@ -85,22 +91,19 @@
 
     @classmethod
     def reset_cache(cls) -> None:
-        """ clear the cache """
+        """clear the cache"""
         cls._cache = {}
 
 
 class CategoricalDtypeType(type):
-    """
-    the type of CategoricalDtype, this metaclass determines subclass ability
-    """
+    """the type of CategoricalDtype, this metaclass determines subclass ability"""
 
     pass
 
 
 @register_extension_dtype
 class CategoricalDtype(PandasExtensionDtype, ExtensionDtype):
-    """
-    Type for categorical data with the categories and orderedness.
+    """Type for categorical data with the categories and orderedness.
 
     Parameters
     ----------
@@ -114,27 +117,29 @@
         used in operations that combine categoricals, e.g. astype, and will resolve to
         False if there is no existing ordered to maintain.
 
+    Returns
+    -------
+
     Attributes
     ----------
     categories
     ordered
-
     Methods
     -------
     None
-
     See Also
     --------
     Categorical : Represent a categorical variable in classic R / S-plus fashion.
-
     Notes
     -----
     This class is useful for specifying the type of a ``Categorical``
     independent of the values. See :ref:`categorical.categoricaldtype`
     for more.
-
     Examples
     --------
+    
+    An empty CategoricalDtype with a specific dtype can be created
+    by providing an empty index. As follows,
     >>> t = pd.CategoricalDtype(categories=['b', 'a'], ordered=True)
     >>> pd.Series(['a', 'b', 'a', 'c'], dtype=t)
     0      a
@@ -143,10 +148,7 @@
     3    NaN
     dtype: category
     Categories (2, object): ['b' < 'a']
-
-    An empty CategoricalDtype with a specific dtype can be created
-    by providing an empty index. As follows,
-
+    
     >>> pd.CategoricalDtype(pd.DatetimeIndex([])).categories.dtype
     dtype('<M8[ns]')
     """
@@ -167,6 +169,19 @@
     def _from_fastpath(
         cls, categories=None, ordered: Optional[bool] = None
     ) -> "CategoricalDtype":
+        """
+
+        Parameters
+        ----------
+        categories :
+             (Default value = None)
+        ordered: Optional[bool] :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         self = cls.__new__(cls)
         self._finalize(categories, ordered, fastpath=True)
         return self
@@ -175,6 +190,21 @@
     def _from_categorical_dtype(
         cls, dtype: "CategoricalDtype", categories=None, ordered: Ordered = None
     ) -> "CategoricalDtype":
+        """
+
+        Parameters
+        ----------
+        dtype: "CategoricalDtype" :
+            
+        categories :
+             (Default value = None)
+        ordered: Ordered :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if categories is ordered is None:
             return dtype
         if categories is None:
@@ -191,15 +221,14 @@
         ordered: Optional[bool] = None,
         dtype: Optional["CategoricalDtype"] = None,
     ) -> "CategoricalDtype":
-        """
-        Construct dtype from the input parameters used in :class:`Categorical`.
-
+        """Construct dtype from the input parameters used in :class:`Categorical`.
+        
         This constructor method specifically does not do the factorization
         step, if that is needed to find the categories. This constructor may
         therefore return ``CategoricalDtype(categories=None, ordered=None)``,
         which may not be useful. Additional steps may therefore have to be
         taken to create the final dtype.
-
+        
         The return dtype is specified from the inputs in this prioritized
         order:
         1. if dtype is a CategoricalDtype, return dtype
@@ -213,21 +242,28 @@
         Parameters
         ----------
         values : list-like, optional
-            The list-like must be 1-dimensional.
+            The list-like must be 1-dimensional. (Default value = None)
         categories : list-like, optional
-            Categories for the CategoricalDtype.
+            Categories for the CategoricalDtype. (Default value = None)
         ordered : bool, optional
             Designating if the categories are ordered.
         dtype : CategoricalDtype or the string "category", optional
             If ``CategoricalDtype``, cannot be used together with
             `categories` or `ordered`.
+        ordered: Optional[bool] :
+             (Default value = None)
+        dtype: Optional["CategoricalDtype"] :
+             (Default value = None)
 
         Returns
         -------
         CategoricalDtype
+            
 
         Examples
         --------
+        
+        The supplied dtype takes precedence over values' dtype:
         >>> pd.CategoricalDtype._from_values_or_dtype()
         CategoricalDtype(categories=None, ordered=None)
         >>> pd.CategoricalDtype._from_values_or_dtype(
@@ -244,9 +280,7 @@
             ...
         ValueError: Cannot specify `categories` or `ordered` together with
         `dtype`.
-
-        The supplied dtype takes precedence over values' dtype:
-
+        
         >>> pd.CategoricalDtype._from_values_or_dtype(c, dtype=dtype2)
         CategoricalDtype(categories=['x', 'y'], ordered=False)
         """
@@ -280,23 +314,21 @@
 
     @classmethod
     def construct_from_string(cls, string: str_type) -> "CategoricalDtype":
-        """
-        Construct a CategoricalDtype from a string.
+        """Construct a CategoricalDtype from a string.
 
         Parameters
         ----------
         string : str
             Must be the string "category" in order to be successfully constructed.
+        string: str_type :
+            
 
         Returns
         -------
         CategoricalDtype
             Instance of the dtype.
 
-        Raises
-        ------
-        TypeError
-            If a CategoricalDtype cannot be constructed from the input.
+        
         """
         if not isinstance(string, str):
             raise TypeError(
@@ -310,6 +342,21 @@
         return cls(ordered=None)
 
     def _finalize(self, categories, ordered: Ordered, fastpath: bool = False) -> None:
+        """
+
+        Parameters
+        ----------
+        categories :
+            
+        ordered: Ordered :
+            
+        fastpath: bool :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
 
         if ordered is not None:
             self.validate_ordered(ordered)
@@ -392,6 +439,19 @@
 
     @staticmethod
     def _hash_categories(categories, ordered: Ordered = True) -> int:
+        """
+
+        Parameters
+        ----------
+        categories :
+            
+        ordered: Ordered :
+             (Default value = True)
+
+        Returns
+        -------
+
+        """
         from pandas.core.dtypes.common import DT64NS_DTYPE, is_datetime64tz_dtype
 
         from pandas.core.util.hashing import (
@@ -432,50 +492,48 @@
 
     @classmethod
     def construct_array_type(cls) -> Type["Categorical"]:
-        """
-        Return the array type associated with this dtype.
-
-        Returns
-        -------
-        type
-        """
+        """Return the array type associated with this dtype."""
         from pandas import Categorical  # noqa: F811
 
         return Categorical
 
     @staticmethod
     def validate_ordered(ordered: Ordered) -> None:
-        """
-        Validates that we have a valid ordered parameter. If
+        """Validates that we have a valid ordered parameter. If
         it is not a boolean, a TypeError will be raised.
 
         Parameters
         ----------
         ordered : object
             The parameter to be verified.
-
-        Raises
-        ------
-        TypeError
-            If 'ordered' is not a boolean.
+        ordered: Ordered :
+            
+
+        Returns
+        -------
+
+        
         """
         if not is_bool(ordered):
             raise TypeError("'ordered' must either be 'True' or 'False'")
 
     @staticmethod
     def validate_categories(categories, fastpath: bool = False):
-        """
-        Validates that we have good categories
+        """Validates that we have good categories
 
         Parameters
         ----------
         categories : array-like
+            
         fastpath : bool
             Whether to skip nan and uniqueness checks
-
-        Returns
-        -------
-        categories : Index
+        fastpath: bool :
+             (Default value = False)
+
+        Returns
+        -------
+
+        
         """
         from pandas.core.indexes.base import Index
 
@@ -502,17 +560,22 @@
     def update_dtype(
         self, dtype: Union[str_type, "CategoricalDtype"]
     ) -> "CategoricalDtype":
-        """
-        Returns a CategoricalDtype with categories and ordered taken from dtype
+        """Returns a CategoricalDtype with categories and ordered taken from dtype
         if specified, otherwise falling back to self if unspecified
 
         Parameters
         ----------
         dtype : CategoricalDtype
-
-        Returns
-        -------
-        new_dtype : CategoricalDtype
+            
+        dtype: Union[str_type :
+            
+        "CategoricalDtype"] :
+            
+
+        Returns
+        -------
+
+        
         """
         if isinstance(dtype, str) and dtype == "category":
             # dtype='category' should not change anything
@@ -536,25 +599,33 @@
 
     @property
     def categories(self):
-        """
-        An ``Index`` containing the unique categories allowed.
-        """
+        """An ``Index`` containing the unique categories allowed."""
         return self._categories
 
     @property
     def ordered(self) -> Ordered:
-        """
-        Whether the categories have an ordered relationship.
-        """
+        """Whether the categories have an ordered relationship."""
         return self._ordered
 
     @property
     def _is_boolean(self) -> bool:
+        """ """
         from pandas.core.dtypes.common import is_bool_dtype
 
         return is_bool_dtype(self.categories)
 
     def _get_common_dtype(self, dtypes: List[DtypeObj]) -> Optional[DtypeObj]:
+        """
+
+        Parameters
+        ----------
+        dtypes: List[DtypeObj] :
+            
+
+        Returns
+        -------
+
+        """
         from pandas.core.arrays.sparse import SparseDtype
 
         # check if we have all categorical dtype with identical categories
@@ -587,9 +658,8 @@
 
 @register_extension_dtype
 class DatetimeTZDtype(PandasExtensionDtype):
-    """
-    An ExtensionDtype for timezone-aware datetime data.
-
+    """An ExtensionDtype for timezone-aware datetime data.
+    
     **This is not an actual numpy dtype**, but a duck type.
 
     Parameters
@@ -600,25 +670,26 @@
     tz : str, int, or datetime.tzinfo
         The timezone.
 
+    Returns
+    -------
+
+    Raises
+    ------
+    pytz.UnknownTimeZoneError
+        When the requested timezone cannot be found.
+
     Attributes
     ----------
     unit
     tz
-
     Methods
     -------
     None
-
-    Raises
-    ------
-    pytz.UnknownTimeZoneError
-        When the requested timezone cannot be found.
-
     Examples
     --------
     >>> pd.DatetimeTZDtype(tz='UTC')
     datetime64[ns, UTC]
-
+    
     >>> pd.DatetimeTZDtype(tz='dateutil/US/Central')
     datetime64[ns, tzfile('/usr/share/zoneinfo/US/Central')]
     """
@@ -666,35 +737,24 @@
 
     @property
     def unit(self) -> str_type:
-        """
-        The precision of the datetime data.
-        """
+        """The precision of the datetime data."""
         return self._unit
 
     @property
     def tz(self):
-        """
-        The timezone.
-        """
+        """The timezone."""
         return self._tz
 
     @classmethod
     def construct_array_type(cls) -> Type["DatetimeArray"]:
-        """
-        Return the array type associated with this dtype.
-
-        Returns
-        -------
-        type
-        """
+        """Return the array type associated with this dtype."""
         from pandas.core.arrays import DatetimeArray  # noqa: F811
 
         return DatetimeArray
 
     @classmethod
     def construct_from_string(cls, string: str_type) -> "DatetimeTZDtype":
-        """
-        Construct a DatetimeTZDtype from a string.
+        """Construct a DatetimeTZDtype from a string.
 
         Parameters
         ----------
@@ -702,6 +762,11 @@
             The string alias for this DatetimeTZDtype.
             Should be formatted like ``datetime64[ns, <tz>]``,
             where ``<tz>`` is the timezone name.
+        string: str_type :
+            
+
+        Returns
+        -------
 
         Examples
         --------
@@ -762,9 +827,8 @@
 
 @register_extension_dtype
 class PeriodDtype(dtypes.PeriodDtypeBase, PandasExtensionDtype):
-    """
-    An ExtensionDtype for Period data.
-
+    """An ExtensionDtype for Period data.
+    
     **This is not an actual numpy dtype**, but a duck type.
 
     Parameters
@@ -772,19 +836,20 @@
     freq : str or DateOffset
         The frequency of this PeriodDtype.
 
+    Returns
+    -------
+
     Attributes
     ----------
     freq
-
     Methods
     -------
     None
-
     Examples
     --------
     >>> pd.PeriodDtype(freq='D')
     period[D]
-
+    
     >>> pd.PeriodDtype(freq=pd.offsets.MonthEnd())
     period[M]
     """
@@ -831,13 +896,22 @@
 
     @property
     def freq(self):
-        """
-        The frequency object of this PeriodDtype.
-        """
+        """The frequency object of this PeriodDtype."""
         return self._freq
 
     @classmethod
     def _parse_dtype_strict(cls, freq):
+        """
+
+        Parameters
+        ----------
+        freq :
+            
+
+        Returns
+        -------
+
+        """
         if isinstance(freq, str):
             if freq.startswith("period[") or freq.startswith("Period["):
                 m = cls._match.search(freq)
@@ -852,9 +926,17 @@
 
     @classmethod
     def construct_from_string(cls, string: str_type) -> "PeriodDtype":
-        """
-        Strict construction from a string, raise a TypeError if not
+        """Strict construction from a string, raise a TypeError if not
         possible
+
+        Parameters
+        ----------
+        string: str_type :
+            
+
+        Returns
+        -------
+
         """
         if (
             isinstance(string, str)
@@ -878,10 +960,12 @@
 
     @property
     def name(self) -> str_type:
+        """ """
         return f"period[{self.freq.freqstr}]"
 
     @property
     def na_value(self):
+        """ """
         return NaT
 
     def __hash__(self) -> int:
@@ -906,8 +990,17 @@
     @classmethod
     def is_dtype(cls, dtype: object) -> bool:
         """
-        Return a boolean if we if the passed type is an actual dtype that we
-        can match (via string or type)
+
+        Parameters
+        ----------
+        dtype: object :
+            
+
+        Returns
+        -------
+        type
+            can match (via string or type)
+
         """
         if isinstance(dtype, str):
             # PeriodDtype can be instantiated from freq string like "U",
@@ -926,13 +1019,7 @@
 
     @classmethod
     def construct_array_type(cls) -> Type["PeriodArray"]:
-        """
-        Return the array type associated with this dtype.
-
-        Returns
-        -------
-        type
-        """
+        """Return the array type associated with this dtype."""
         from pandas.core.arrays import PeriodArray
 
         return PeriodArray
@@ -965,9 +1052,8 @@
 
 @register_extension_dtype
 class IntervalDtype(PandasExtensionDtype):
-    """
-    An ExtensionDtype for Interval data.
-
+    """An ExtensionDtype for Interval data.
+    
     **This is not an actual numpy dtype**, but a duck type.
 
     Parameters
@@ -975,14 +1061,15 @@
     subtype : str, np.dtype
         The dtype of the Interval bounds.
 
+    Returns
+    -------
+
     Attributes
     ----------
     subtype
-
     Methods
     -------
     None
-
     Examples
     --------
     >>> pd.IntervalDtype(subtype='int64')
@@ -1044,29 +1131,29 @@
 
     @property
     def subtype(self):
-        """
-        The dtype of the Interval bounds.
-        """
+        """The dtype of the Interval bounds."""
         return self._subtype
 
     @classmethod
     def construct_array_type(cls) -> Type["IntervalArray"]:
-        """
-        Return the array type associated with this dtype.
-
-        Returns
-        -------
-        type
-        """
+        """Return the array type associated with this dtype."""
         from pandas.core.arrays import IntervalArray
 
         return IntervalArray
 
     @classmethod
     def construct_from_string(cls, string):
-        """
-        attempt to construct this type from a string, raise a TypeError
+        """attempt to construct this type from a string, raise a TypeError
         if its not possible
+
+        Parameters
+        ----------
+        string :
+            
+
+        Returns
+        -------
+
         """
         if not isinstance(string, str):
             raise TypeError(
@@ -1086,6 +1173,7 @@
 
     @property
     def type(self):
+        """ """
         return Interval
 
     def __str__(self) -> str_type:
@@ -1119,8 +1207,17 @@
     @classmethod
     def is_dtype(cls, dtype: object) -> bool:
         """
-        Return a boolean if we if the passed type is an actual dtype that we
-        can match (via string or type)
+
+        Parameters
+        ----------
+        dtype: object :
+            
+
+        Returns
+        -------
+        type
+            can match (via string or type)
+
         """
         if isinstance(dtype, str):
             if dtype.lower().startswith("interval"):
