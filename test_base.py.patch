# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/interval/test_base.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/interval/test_base.py
@@ -7,21 +7,50 @@
 
 
 class TestBase(Base):
-    """
-    Tests specific to the shared common index tests; unrelated tests should be placed
+    """Tests specific to the shared common index tests; unrelated tests should be placed
     in test_interval.py or the specific test file (e.g. test_astype.py)
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     _holder = IntervalIndex
 
     @pytest.fixture
     def index(self):
+        """ """
         return tm.makeIntervalIndex(10)
 
     def create_index(self, closed="right"):
+        """
+
+        Parameters
+        ----------
+        closed :
+             (Default value = "right")
+
+        Returns
+        -------
+
+        """
         return IntervalIndex.from_breaks(range(11), closed=closed)
 
     def test_equals(self, closed):
+        """
+
+        Parameters
+        ----------
+        closed :
+            
+
+        Returns
+        -------
+
+        """
         expected = IntervalIndex.from_breaks(np.arange(5), closed=closed)
         assert expected.equals(expected)
         assert expected.equals(expected.copy())
@@ -50,14 +79,27 @@
             assert not expected.equals(expected_other_closed)
 
     def test_repr_max_seq_item_setting(self):
+        """ """
         # override base test: not a valid repr as we use interval notation
         pass
 
     def test_repr_roundtrip(self):
+        """ """
         # override base test: not a valid repr as we use interval notation
         pass
 
     def test_take(self, closed):
+        """
+
+        Parameters
+        ----------
+        closed :
+            
+
+        Returns
+        -------
+
+        """
         index = self.create_index(closed=closed)
 
         result = index.take(range(10))
@@ -69,6 +111,19 @@
 
     @pytest.mark.parametrize("klass", [list, tuple, np.array, Series])
     def test_where(self, closed, klass):
+        """
+
+        Parameters
+        ----------
+        closed :
+            
+        klass :
+            
+
+        Returns
+        -------
+
+        """
         idx = self.create_index(closed=closed)
         cond = [True] * len(idx)
         expected = idx
@@ -81,6 +136,7 @@
         tm.assert_index_equal(result, expected)
 
     def test_getitem_2d_deprecated(self):
+        """ """
         # GH#30588 multi-dim indexing is deprecated, but raising is also acceptable
         idx = self.create_index()
         with pytest.raises(ValueError, match="multi-dimensional indexing not allowed"):
