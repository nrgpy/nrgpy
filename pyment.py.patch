# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pyment/pyment.py
+++ b/..//venv/lib/python3.8/site-packages/pyment/pyment.py
@@ -31,6 +31,12 @@
     """This class allow to manage several python scripts docstrings.
     It is used to parse and rewrite in a Pythonic way all the functions', methods' and classes' docstrings.
     The changes are then provided in a patch file.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     """
     def __init__(self, input_file, input_style=None, output_style='reST', quotes='"""', first_line=True,
@@ -69,7 +75,13 @@
     def _parse(self):
         """Parses the input file's content and generates a list of its elements/docstrings.
 
-        :returns: the list of elements
+        Parameters
+        ----------
+
+        Returns
+        -------
+        type
+            the list of elements
 
         """
         #TODO manage decorators
@@ -190,8 +202,13 @@
         without any docstring, so set the class docstring with __init__one,
         and let __init__ without docstring.
 
-        :returns: True if done
-        :rtype: boolean
+        Parameters
+        ----------
+
+        Returns
+        -------
+        boolean
+            True if done
 
         """
         result = False
@@ -222,8 +239,13 @@
     def get_output_docs(self):
         """Return the output docstrings once formatted
 
-        :returns: the formatted docstrings
-        :rtype: list
+        Parameters
+        ----------
+
+        Returns
+        -------
+        list
+            the formatted docstrings
 
         """
         if not self.parsed:
@@ -235,8 +257,15 @@
 
     def compute_before_after(self):
         """Compute the list of lines before and after the proposed docstring changes.
-
+        
         :return: tuple of before,after where each is a list of lines of python code.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         if not self.parsed:
             self._parse()
@@ -262,13 +291,20 @@
     def diff(self, source_path='', target_path='', which=-1):
         """Build the diff between original docstring and proposed docstring.
 
-        :type which: int
-          -> -1 means all the dosctrings of the file
-          -> >=0 means the index of the docstring to proceed (Default value = -1)
-        :param source_path:  (Default value = '')
-        :param target_path:  (Default value = '')
-        :returns: the resulted diff
-        :rtype: List[str]
+        Parameters
+        ----------
+        source_path :
+            Default value = '')
+        target_path :
+            Default value = '')
+        which :
+             (Default value = -1)
+
+        Returns
+        -------
+        List[str]
+            the resulted diff
+
         """
         list_from, list_to = self.compute_before_after()
 
@@ -289,11 +325,18 @@
     def get_patch_lines(self, source_path, target_path):
         """Return the diff between source_path and target_path
 
-        :param source_path: name of the original file (Default value = '')
-        :param target_path: name of the final file (Default value = '')
-
-        :return: the diff as a list of \n terminated lines
-        :rtype: List[str]
+        Parameters
+        ----------
+        source_path :
+            name of the original file (Default value = '')
+        target_path :
+            name of the final file (Default value = '')
+
+        Returns
+        -------
+        List[str]
+            the diff as a list of \n terminated lines
+
         """
         diff = self.diff(source_path, target_path)
 
@@ -302,11 +345,18 @@
     def write_patch_file(self, patch_file, lines_to_write):
         """Write lines_to_write to a the file called patch_file
 
-        :param patch_file: file name of the patch to generate
-        :param lines_to_write: lines to write to the file - they should be \n terminated
-        :type lines_to_write: list[str]
-
-        :return: None
+        Parameters
+        ----------
+        patch_file :
+            file name of the patch to generate
+        lines_to_write : list[str]
+            lines to write to the file - they should be \n terminated
+
+        Returns
+        -------
+        type
+            None
+
         """
         with open(patch_file, 'w') as f:
             f.writelines(lines_to_write)
@@ -314,10 +364,16 @@
     def overwrite_source_file(self, lines_to_write):
         """overwrite the file with line_to_write
 
-        :param lines_to_write: lines to write to the file - they should be \n terminated
-        :type lines_to_write: List[str]
-
-        :return: None
+        Parameters
+        ----------
+        lines_to_write : List[str]
+            lines to write to the file - they should be \n terminated
+
+        Returns
+        -------
+        type
+            None
+
         """
         tmp_filename = '{0}.writing'.format(self.input_file)
         ok = False
@@ -335,10 +391,16 @@
                 os.unlink(tmp_filename)
 
     def _windows_rename(self, tmp_filename):
-        """ Workaround the fact that os.rename raises an OSError on Windows
-        
-        :param tmp_filename: The file to rename
-    
+        """Workaround the fact that os.rename raises an OSError on Windows
+
+        Parameters
+        ----------
+        tmp_filename :
+            The file to rename
+
+        Returns
+        -------
+
         """
 
         os.remove(self.input_file) if os.path.isfile(self.input_file) else None
@@ -347,8 +409,13 @@
     def proceed(self):
         """Parses the input file and generates/converts the docstrings.
 
-        :return: the list of docstrings
-        :rtype: list of dictionaries
+        Parameters
+        ----------
+
+        Returns
+        -------
+        list of dictionaries
+            the list of docstrings
 
         """
         self._parse()
