# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/extension/base/missing.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/extension/base/missing.py
@@ -7,7 +7,19 @@
 
 
 class BaseMissingTests(BaseExtensionTests):
+    """ """
     def test_isna(self, data_missing):
+        """
+
+        Parameters
+        ----------
+        data_missing :
+            
+
+        Returns
+        -------
+
+        """
         expected = np.array([True, False])
 
         result = pd.isna(data_missing)
@@ -23,17 +35,50 @@
         self.assert_series_equal(result, expected)
 
     def test_dropna_array(self, data_missing):
+        """
+
+        Parameters
+        ----------
+        data_missing :
+            
+
+        Returns
+        -------
+
+        """
         result = data_missing.dropna()
         expected = data_missing[[1]]
         self.assert_extension_array_equal(result, expected)
 
     def test_dropna_series(self, data_missing):
+        """
+
+        Parameters
+        ----------
+        data_missing :
+            
+
+        Returns
+        -------
+
+        """
         ser = pd.Series(data_missing)
         result = ser.dropna()
         expected = ser.iloc[[1]]
         self.assert_series_equal(result, expected)
 
     def test_dropna_frame(self, data_missing):
+        """
+
+        Parameters
+        ----------
+        data_missing :
+            
+
+        Returns
+        -------
+
+        """
         df = pd.DataFrame({"A": data_missing})
 
         # defaults
@@ -53,24 +98,68 @@
         self.assert_frame_equal(result, expected)
 
     def test_fillna_scalar(self, data_missing):
+        """
+
+        Parameters
+        ----------
+        data_missing :
+            
+
+        Returns
+        -------
+
+        """
         valid = data_missing[1]
         result = data_missing.fillna(valid)
         expected = data_missing.fillna(valid)
         self.assert_extension_array_equal(result, expected)
 
     def test_fillna_limit_pad(self, data_missing):
+        """
+
+        Parameters
+        ----------
+        data_missing :
+            
+
+        Returns
+        -------
+
+        """
         arr = data_missing.take([1, 0, 0, 0, 1])
         result = pd.Series(arr).fillna(method="ffill", limit=2)
         expected = pd.Series(data_missing.take([1, 1, 1, 0, 1]))
         self.assert_series_equal(result, expected)
 
     def test_fillna_limit_backfill(self, data_missing):
+        """
+
+        Parameters
+        ----------
+        data_missing :
+            
+
+        Returns
+        -------
+
+        """
         arr = data_missing.take([1, 0, 0, 0, 1])
         result = pd.Series(arr).fillna(method="backfill", limit=2)
         expected = pd.Series(data_missing.take([1, 0, 1, 1, 1]))
         self.assert_series_equal(result, expected)
 
     def test_fillna_series(self, data_missing):
+        """
+
+        Parameters
+        ----------
+        data_missing :
+            
+
+        Returns
+        -------
+
+        """
         fill_value = data_missing[1]
         ser = pd.Series(data_missing)
 
@@ -91,6 +180,19 @@
         self.assert_series_equal(result, ser)
 
     def test_fillna_series_method(self, data_missing, fillna_method):
+        """
+
+        Parameters
+        ----------
+        data_missing :
+            
+        fillna_method :
+            
+
+        Returns
+        -------
+
+        """
         fill_value = data_missing[1]
 
         if fillna_method == "ffill":
@@ -106,6 +208,17 @@
         self.assert_series_equal(result, expected)
 
     def test_fillna_frame(self, data_missing):
+        """
+
+        Parameters
+        ----------
+        data_missing :
+            
+
+        Returns
+        -------
+
+        """
         fill_value = data_missing[1]
 
         result = pd.DataFrame({"A": data_missing, "B": [1, 2]}).fillna(fill_value)
@@ -122,6 +235,17 @@
         self.assert_frame_equal(result, expected)
 
     def test_fillna_fill_other(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         result = pd.DataFrame({"A": data, "B": [np.nan] * len(data)}).fillna({"B": 0.0})
 
         expected = pd.DataFrame({"A": data, "B": [0.0] * len(result)})
@@ -129,6 +253,17 @@
         self.assert_frame_equal(result, expected)
 
     def test_use_inf_as_na_no_effect(self, data_missing):
+        """
+
+        Parameters
+        ----------
+        data_missing :
+            
+
+        Returns
+        -------
+
+        """
         ser = pd.Series(data_missing)
         expected = ser.isna()
         with pd.option_context("mode.use_inf_as_na", True):
