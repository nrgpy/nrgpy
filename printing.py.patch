# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/io/formats/printing.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/io/formats/printing.py
@@ -27,10 +27,9 @@
 
 
 def adjoin(space: int, *lists: List[str], **kwargs) -> str:
-    """
-    Glues together two sets of strings using the amount of space requested.
+    """Glues together two sets of strings using the amount of space requested.
     The idea is to prettify.
-
+    
     ----------
     space : int
         number of spaces for padding
@@ -41,6 +40,19 @@
         handling.
     justfunc : callable
         function used to justify str. Needed for unicode handling.
+
+    Parameters
+    ----------
+    space: int :
+        
+    *lists: List[str] :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
     """
     strlen = kwargs.pop("strlen", len)
     justfunc = kwargs.pop("justfunc", justify)
@@ -62,8 +74,20 @@
 
 
 def justify(texts: Iterable[str], max_len: int, mode: str = "right") -> List[str]:
-    """
-    Perform ljust, center, rjust against string or list-like
+    """Perform ljust, center, rjust against string or list-like
+
+    Parameters
+    ----------
+    texts: Iterable[str] :
+        
+    max_len: int :
+        
+    mode: str :
+         (Default value = "right")
+
+    Returns
+    -------
+
     """
     if mode == "left":
         return [x.ljust(max_len) for x in texts]
@@ -100,11 +124,25 @@
 def _pprint_seq(
     seq: Sequence, _nest_lvl: int = 0, max_seq_items: Optional[int] = None, **kwds
 ) -> str:
-    """
-    internal. pprinter for iterables. you should probably use pprint_thing()
+    """internal. pprinter for iterables. you should probably use pprint_thing()
     rather than calling this directly.
-
+    
     bounds length of printed sequence, depending on options
+
+    Parameters
+    ----------
+    seq: Sequence :
+        
+    _nest_lvl: int :
+         (Default value = 0)
+    max_seq_items: Optional[int] :
+         (Default value = None)
+    **kwds :
+        
+
+    Returns
+    -------
+
     """
     if isinstance(seq, set):
         fmt = "{{{body}}}"
@@ -135,9 +173,23 @@
 def _pprint_dict(
     seq: Mapping, _nest_lvl: int = 0, max_seq_items: Optional[int] = None, **kwds
 ) -> str:
-    """
-    internal. pprinter for iterables. you should probably use pprint_thing()
+    """internal. pprinter for iterables. you should probably use pprint_thing()
     rather than calling this directly.
+
+    Parameters
+    ----------
+    seq: Mapping :
+        
+    _nest_lvl: int :
+         (Default value = 0)
+    max_seq_items: Optional[int] :
+         (Default value = None)
+    **kwds :
+        
+
+    Returns
+    -------
+
     """
     fmt = "{{{things}}}"
     pairs = []
@@ -171,13 +223,13 @@
     quote_strings: bool = False,
     max_seq_items: Optional[int] = None,
 ) -> str:
-    """
-    This function is the sanctioned way of converting objects
+    """This function is the sanctioned way of converting objects
     to a string representation and properly handles nested sequences.
 
     Parameters
     ----------
     thing : anything to be formatted
+        
     _nest_lvl : internal use only. pprint_thing() is mutually-recursive
         with pprint_sequence, this argument is used to keep track of the
         current nesting level, and limit it.
@@ -188,15 +240,41 @@
         Whether the input escape characters replaces or adds to the defaults
     max_seq_items : int or None, default None
         Pass through to other pretty printers to limit sequence printing
-
-    Returns
-    -------
-    str
+    thing: Any :
+        
+    _nest_lvl: int :
+         (Default value = 0)
+    escape_chars: Optional[EscapeChars] :
+         (Default value = None)
+    default_escapes: bool :
+         (Default value = False)
+    quote_strings: bool :
+         (Default value = False)
+    max_seq_items: Optional[int] :
+         (Default value = None)
+
+    Returns
+    -------
+
+    
     """
 
     def as_escaped_string(
         thing: Any, escape_chars: Optional[EscapeChars] = escape_chars
     ) -> str:
+        """
+
+        Parameters
+        ----------
+        thing: Any :
+            
+        escape_chars: Optional[EscapeChars] :
+             (Default value = escape_chars)
+
+        Returns
+        -------
+
+        """
         translate = {"\t": r"\t", "\n": r"\n", "\r": r"\r"}
         if isinstance(escape_chars, dict):
             if default_escapes:
@@ -239,11 +317,37 @@
 def pprint_thing_encoded(
     object, encoding: str = "utf-8", errors: str = "replace"
 ) -> bytes:
+    """
+
+    Parameters
+    ----------
+    object :
+        
+    encoding: str :
+         (Default value = "utf-8")
+    errors: str :
+         (Default value = "replace")
+
+    Returns
+    -------
+
+    """
     value = pprint_thing(object)  # get unicode representation of object
     return value.encode(encoding, errors)
 
 
 def _enable_data_resource_formatter(enable: bool) -> None:
+    """
+
+    Parameters
+    ----------
+    enable: bool :
+        
+
+    Returns
+    -------
+
+    """
     if "IPython" not in sys.modules:
         # definitely not in IPython
         return
@@ -263,6 +367,7 @@
             from IPython.core.formatters import BaseFormatter
 
             class TableSchemaFormatter(BaseFormatter):
+                """ """
                 print_method = "_repr_data_resource_"
                 _return_type = (dict,)
 
@@ -277,6 +382,19 @@
 
 
 def default_pprint(thing: Any, max_seq_items: Optional[int] = None) -> str:
+    """
+
+    Parameters
+    ----------
+    thing: Any :
+        
+    max_seq_items: Optional[int] :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return pprint_thing(
         thing,
         escape_chars=("\t", "\r", "\n"),
@@ -293,8 +411,7 @@
     indent_for_name: bool = True,
     line_break_each_value: bool = False,
 ) -> str:
-    """
-    Return the formatted obj as a unicode string
+    """Return the formatted obj as a unicode string
 
     Parameters
     ----------
@@ -313,12 +430,22 @@
         If True, inserts a line break for each value of ``obj``.
         If False, only break lines when the a line of values gets wider
         than the display width.
-
         .. versionadded:: 0.25.0
-
-    Returns
-    -------
-    summary string
+    formatter: Callable :
+        
+    is_justify: bool :
+         (Default value = True)
+    name: Optional[str] :
+         (Default value = None)
+    indent_for_name: bool :
+         (Default value = True)
+    line_break_each_value: bool :
+         (Default value = False)
+
+    Returns
+    -------
+
+    
     """
     from pandas.io.formats.console import get_console_size
     from pandas.io.formats.format import _get_adjustment
@@ -355,6 +482,25 @@
     def _extend_line(
         s: str, line: str, value: str, display_width: int, next_line_prefix: str
     ) -> Tuple[str, str]:
+        """
+
+        Parameters
+        ----------
+        s: str :
+            
+        line: str :
+            
+        value: str :
+            
+        display_width: int :
+            
+        next_line_prefix: str :
+            
+
+        Returns
+        -------
+
+        """
 
         if adj.len(line.rstrip()) + adj.len(value.rstrip()) >= display_width:
             s += line.rstrip()
@@ -363,6 +509,17 @@
         return s, line
 
     def best_len(values: List[str]) -> int:
+        """
+
+        Parameters
+        ----------
+        values: List[str] :
+            
+
+        Returns
+        -------
+
+        """
         if values:
             return max(adj.len(x) for x in values)
         else:
@@ -460,13 +617,18 @@
 def _justify(
     head: List[Sequence[str]], tail: List[Sequence[str]]
 ) -> Tuple[List[Tuple[str, ...]], List[Tuple[str, ...]]]:
-    """
-    Justify items in head and tail, so they are right-aligned when stacked.
+    """Justify items in head and tail, so they are right-aligned when stacked.
 
     Parameters
     ----------
     head : list-like of list-likes of strings
+        
     tail : list-like of list-likes of strings
+        
+    head: List[Sequence[str]] :
+        
+    tail: List[Sequence[str]] :
+        
 
     Returns
     -------
@@ -505,8 +667,7 @@
 def format_object_attrs(
     obj: Sequence, include_dtype: bool = True
 ) -> List[Tuple[str, Union[str, int]]]:
-    """
-    Return a list of tuples of the (attr, formatted_value)
+    """Return a list of tuples of the (attr, formatted_value)
     for common attrs, including dtype, name, length
 
     Parameters
@@ -515,11 +676,15 @@
         must be iterable
     include_dtype : bool
         If False, dtype won't be in the returned list
-
-    Returns
-    -------
-    list of 2-tuple
-
+    obj: Sequence :
+        
+    include_dtype: bool :
+         (Default value = True)
+
+    Returns
+    -------
+
+    
     """
     attrs: List[Tuple[str, Union[str, int]]] = []
     if hasattr(obj, "dtype") and include_dtype:
