# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/tests/test_ctypeslib.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/tests/test_ctypeslib.py
@@ -36,7 +36,9 @@
 @pytest.mark.skipif(sys.platform == 'cygwin',
                     reason="Known to fail on cygwin")
 class TestLoadLibrary:
+    """ """
     def test_basic(self):
+        """ """
         try:
             # Should succeed
             load_library('_multiarray_umath', np.core._multiarray_umath.__file__)
@@ -46,6 +48,7 @@
             print(msg)
 
     def test_basic2(self):
+        """ """
         # Regression for #801: load_library with a full library name
         # (including extension) does not work.
         try:
@@ -62,7 +65,9 @@
 
 
 class TestNdpointer:
+    """ """
     def test_dtype(self):
+        """ """
         dt = np.intc
         p = ndpointer(dtype=dt)
         assert_(p.from_param(np.array([1], dt)))
@@ -90,6 +95,7 @@
             assert_(p.from_param(np.zeros((10,), dt2)))
 
     def test_ndim(self):
+        """ """
         p = ndpointer(ndim=0)
         assert_(p.from_param(np.array(1)))
         assert_raises(TypeError, p.from_param, np.array([1]))
@@ -100,6 +106,7 @@
         assert_(p.from_param(np.array([[1]])))
 
     def test_shape(self):
+        """ """
         p = ndpointer(shape=(1, 2))
         assert_(p.from_param(np.array([[1, 2]])))
         assert_raises(TypeError, p.from_param, np.array([[1], [2]]))
@@ -107,6 +114,7 @@
         assert_(p.from_param(np.array(1)))
 
     def test_flags(self):
+        """ """
         x = np.array([[1, 2], [3, 4]], order='F')
         p = ndpointer(flags='FORTRAN')
         assert_(p.from_param(x))
@@ -117,6 +125,7 @@
         assert_raises(TypeError, p.from_param, np.array([[1, 2], [3, 4]]))
 
     def test_cache(self):
+        """ """
         assert_(ndpointer(dtype=np.float64) is ndpointer(dtype=np.float64))
 
         # shapes are normalized
@@ -129,8 +138,9 @@
 @pytest.mark.skipif(ctypes is None,
                     reason="ctypes not available on this python installation")
 class TestNdpointerCFunc:
+    """ """
     def test_arguments(self):
-        """ Test that arguments are coerced from arrays """
+        """Test that arguments are coerced from arrays"""
         c_forward_pointer.restype = ctypes.c_void_p
         c_forward_pointer.argtypes = (ndpointer(ndim=2),)
 
@@ -154,7 +164,17 @@
         ]
     )
     def test_return(self, dt):
-        """ Test that return values are coerced to arrays """
+        """Test that return values are coerced to arrays
+
+        Parameters
+        ----------
+        dt :
+            
+
+        Returns
+        -------
+
+        """
         arr = np.zeros((2, 3), dt)
         ptr_type = ndpointer(shape=arr.shape, dtype=arr.dtype)
 
@@ -171,7 +191,7 @@
         )
 
     def test_vague_return_value(self):
-        """ Test that vague ndpointer return values do not promote to arrays """
+        """Test that vague ndpointer return values do not promote to arrays"""
         arr = np.zeros((2, 3))
         ptr_type = ndpointer(dtype=arr.dtype)
 
@@ -185,7 +205,9 @@
 @pytest.mark.skipif(ctypes is None,
                     reason="ctypes not available on this python installation")
 class TestAsArray:
+    """ """
     def test_array(self):
+        """ """
         from ctypes import c_int
 
         pair_t = c_int * 2
@@ -197,6 +219,7 @@
         assert_array_equal(a, np.array([[1, 2], [3, 4], [5, 6]]))
 
     def test_pointer(self):
+        """ """
         from ctypes import c_int, cast, POINTER
 
         p = cast((c_int * 10)(*range(10)), POINTER(c_int))
@@ -213,9 +236,11 @@
         assert_raises(TypeError, as_array, p)
 
     def test_struct_array_pointer(self):
+        """ """
         from ctypes import c_int16, Structure, pointer
 
         class Struct(Structure):
+            """ """
             _fields_ = [('a', c_int16)]
 
         Struct3 = 3 * Struct
@@ -231,6 +256,17 @@
         ], dtype=[('a', np.int16)])
 
         def check(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             assert_equal(x.dtype, expected.dtype)
             assert_equal(x, expected)
 
@@ -241,6 +277,7 @@
         check(as_array(pointer(c_array[0][0]), shape=(2, 3)))
 
     def test_reference_cycles(self):
+        """ """
         # related to gh-6511
         import ctypes
 
@@ -261,6 +298,7 @@
             del newpnt, b
 
     def test_segmentation_fault(self):
+        """ """
         arr = np.zeros((224, 224, 3))
         c_arr = np.ctypeslib.as_ctypes(arr)
         arr_ref = weakref.ref(arr)
@@ -276,8 +314,9 @@
 @pytest.mark.skipif(ctypes is None,
                     reason="ctypes not available on this python installation")
 class TestAsCtypesType:
-    """ Test conversion from dtypes to ctypes types """
+    """Test conversion from dtypes to ctypes types"""
     def test_scalar(self):
+        """ """
         dt = np.dtype('<u2')
         ct = np.ctypeslib.as_ctypes_type(dt)
         assert_equal(ct, ctypes.c_uint16.__ctype_le__)
@@ -291,11 +330,13 @@
         assert_equal(ct, ctypes.c_uint16)
 
     def test_subarray(self):
+        """ """
         dt = np.dtype((np.int32, (2, 3)))
         ct = np.ctypeslib.as_ctypes_type(dt)
         assert_equal(ct, 2 * (3 * ctypes.c_int32))
 
     def test_structure(self):
+        """ """
         dt = np.dtype([
             ('a', np.uint16),
             ('b', np.uint32),
@@ -310,6 +351,7 @@
         ])
 
     def test_structure_aligned(self):
+        """ """
         dt = np.dtype([
             ('a', np.uint16),
             ('b', np.uint32),
@@ -325,6 +367,7 @@
         ])
 
     def test_union(self):
+        """ """
         dt = np.dtype(dict(
             names=['a', 'b'],
             offsets=[0, 0],
@@ -340,6 +383,7 @@
         ])
 
     def test_padded_union(self):
+        """ """
         dt = np.dtype(dict(
             names=['a', 'b'],
             offsets=[0, 0],
@@ -357,6 +401,7 @@
         ])
 
     def test_overlapping(self):
+        """ """
         dt = np.dtype(dict(
             names=['a', 'b'],
             offsets=[0, 2],
