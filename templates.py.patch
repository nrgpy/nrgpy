# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pygments/lexers/templates.py
+++ b/..//venv/lib/python3.8/site-packages/pygments/lexers/templates.py
@@ -48,14 +48,20 @@
 
 
 class ErbLexer(Lexer):
-    """
-    Generic `ERB <http://ruby-doc.org/core/classes/ERB.html>`_ (Ruby Templating)
+    """Generic `ERB <http://ruby-doc.org/core/classes/ERB.html>`_ (Ruby Templating)
     lexer.
-
+    
     Just highlights ruby code between the preprocessor directives, other data
     is left untouched by the lexer.
-
+    
     All options are also forwarded to the `RubyLexer`.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'ERB'
@@ -70,10 +76,18 @@
         Lexer.__init__(self, **options)
 
     def get_tokens_unprocessed(self, text):
-        """
-        Since ERB doesn't allow "<%" and other tags inside of ruby
+        """Since ERB doesn't allow "<%" and other tags inside of ruby
         blocks we have to use a split approach here that fails for
         that too.
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
         """
         tokens = self._block_re.split(text)
         tokens.reverse()
@@ -138,16 +152,33 @@
             return
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         if '<%' in text and '%>' in text:
             return 0.4
 
 
 class SmartyLexer(RegexLexer):
-    """
-    Generic `Smarty <http://smarty.php.net/>`_ template lexer.
-
+    """Generic `Smarty <http://smarty.php.net/>`_ template lexer.
+    
     Just highlights smarty code between the preprocessor directives, other
     data is left untouched by the lexer.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Smarty'
@@ -186,6 +217,17 @@
     }
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         rv = 0.0
         if re.search(r'\{if\s+.*?\}.*?\{/if\}', text):
             rv += 0.15
@@ -199,11 +241,17 @@
 
 
 class VelocityLexer(RegexLexer):
-    """
-    Generic `Velocity <http://velocity.apache.org/>`_ template lexer.
-
+    """Generic `Velocity <http://velocity.apache.org/>`_ template lexer.
+    
     Just highlights velocity directives and variable references, other
     data is left untouched by the lexer.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Velocity'
@@ -267,6 +315,17 @@
     }
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         rv = 0.0
         if re.search(r'#\{?macro\}?\(.*?\).*?#\{?end\}?', text):
             rv += 0.25
@@ -281,9 +340,14 @@
 
 
 class VelocityHtmlLexer(DelegatingLexer):
-    """
-    Subclass of the `VelocityLexer` that highlights unlexed data
+    """Subclass of the `VelocityLexer` that highlights unlexed data
     with the `HtmlLexer`.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     """
 
@@ -297,9 +361,14 @@
 
 
 class VelocityXmlLexer(DelegatingLexer):
-    """
-    Subclass of the `VelocityLexer` that highlights unlexed data
+    """Subclass of the `VelocityLexer` that highlights unlexed data
     with the `XmlLexer`.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     """
 
@@ -312,6 +381,17 @@
         super().__init__(XmlLexer, VelocityLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         rv = VelocityLexer.analyse_text(text) - 0.01
         if looks_like_xml(text):
             rv += 0.4
@@ -319,12 +399,18 @@
 
 
 class DjangoLexer(RegexLexer):
-    """
-    Generic `django <http://www.djangoproject.com/documentation/templates/>`_
+    """Generic `django <http://www.djangoproject.com/documentation/templates/>`_
     and `jinja <https://jinja.pocoo.org/jinja/>`_ template lexer.
-
+    
     It just highlights django/jinja code between the preprocessor directives,
     other data is left untouched by the lexer.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Django/Jinja'
@@ -391,6 +477,17 @@
     }
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         rv = 0.0
         if re.search(r'\{%\s*(block|extends)', text) is not None:
             rv += 0.4
@@ -402,13 +499,19 @@
 
 
 class MyghtyLexer(RegexLexer):
-    """
-    Generic `myghty templates`_ lexer. Code that isn't Myghty
+    """Generic `myghty templates`_ lexer. Code that isn't Myghty
     markup is yielded as `Token.Other`.
-
+    
     .. versionadded:: 0.6
-
+    
     .. _myghty templates: http://www.myghty.org/
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Myghty'
@@ -450,11 +553,17 @@
 
 
 class MyghtyHtmlLexer(DelegatingLexer):
-    """
-    Subclass of the `MyghtyLexer` that highlights unlexed data
+    """Subclass of the `MyghtyLexer` that highlights unlexed data
     with the `HtmlLexer`.
-
+    
     .. versionadded:: 0.6
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'HTML+Myghty'
@@ -466,11 +575,17 @@
 
 
 class MyghtyXmlLexer(DelegatingLexer):
-    """
-    Subclass of the `MyghtyLexer` that highlights unlexed data
+    """Subclass of the `MyghtyLexer` that highlights unlexed data
     with the `XmlLexer`.
-
+    
     .. versionadded:: 0.6
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'XML+Myghty'
@@ -482,11 +597,17 @@
 
 
 class MyghtyJavascriptLexer(DelegatingLexer):
-    """
-    Subclass of the `MyghtyLexer` that highlights unlexed data
+    """Subclass of the `MyghtyLexer` that highlights unlexed data
     with the `JavascriptLexer`.
-
+    
     .. versionadded:: 0.6
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'JavaScript+Myghty'
@@ -500,11 +621,17 @@
 
 
 class MyghtyCssLexer(DelegatingLexer):
-    """
-    Subclass of the `MyghtyLexer` that highlights unlexed data
+    """Subclass of the `MyghtyLexer` that highlights unlexed data
     with the `CssLexer`.
-
+    
     .. versionadded:: 0.6
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'CSS+Myghty'
@@ -516,13 +643,19 @@
 
 
 class MasonLexer(RegexLexer):
-    """
-    Generic `mason templates`_ lexer. Stolen from Myghty lexer. Code that isn't
+    """Generic `mason templates`_ lexer. Stolen from Myghty lexer. Code that isn't
     Mason markup is HTML.
-
+    
     .. _mason templates: http://www.masonhq.com/
-
+    
     .. versionadded:: 1.4
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Mason'
     aliases = ['mason']
@@ -564,6 +697,17 @@
     }
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         result = 0.0
         if re.search(r'</%(class|doc|init)%>', text) is not None:
             result = 1.0
@@ -573,13 +717,19 @@
 
 
 class MakoLexer(RegexLexer):
-    """
-    Generic `mako templates`_ lexer. Code that isn't Mako
+    """Generic `mako templates`_ lexer. Code that isn't Mako
     markup is yielded as `Token.Other`.
-
+    
     .. versionadded:: 0.7
-
+    
     .. _mako templates: http://www.makotemplates.org/
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Mako'
@@ -641,11 +791,17 @@
 
 
 class MakoHtmlLexer(DelegatingLexer):
-    """
-    Subclass of the `MakoLexer` that highlights unlexed data
+    """Subclass of the `MakoLexer` that highlights unlexed data
     with the `HtmlLexer`.
-
+    
     .. versionadded:: 0.7
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'HTML+Mako'
@@ -657,11 +813,17 @@
 
 
 class MakoXmlLexer(DelegatingLexer):
-    """
-    Subclass of the `MakoLexer` that highlights unlexed data
+    """Subclass of the `MakoLexer` that highlights unlexed data
     with the `XmlLexer`.
-
+    
     .. versionadded:: 0.7
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'XML+Mako'
@@ -673,11 +835,17 @@
 
 
 class MakoJavascriptLexer(DelegatingLexer):
-    """
-    Subclass of the `MakoLexer` that highlights unlexed data
+    """Subclass of the `MakoLexer` that highlights unlexed data
     with the `JavascriptLexer`.
-
+    
     .. versionadded:: 0.7
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'JavaScript+Mako'
@@ -691,11 +859,17 @@
 
 
 class MakoCssLexer(DelegatingLexer):
-    """
-    Subclass of the `MakoLexer` that highlights unlexed data
+    """Subclass of the `MakoLexer` that highlights unlexed data
     with the `CssLexer`.
-
+    
     .. versionadded:: 0.7
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'CSS+Mako'
@@ -709,11 +883,20 @@
 # Genshi and Cheetah lexers courtesy of Matt Good.
 
 class CheetahPythonLexer(Lexer):
-    """
-    Lexer for handling Cheetah's special $ tokens in Python syntax.
-    """
+    """Lexer for handling Cheetah's special $ tokens in Python syntax."""
 
     def get_tokens_unprocessed(self, text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         pylexer = PythonLexer(**self.options)
         for pos, type_, value in pylexer.get_tokens_unprocessed(text):
             if type_ == Token.Error and value == '$':
@@ -722,13 +905,19 @@
 
 
 class CheetahLexer(RegexLexer):
-    """
-    Generic `cheetah templates`_ lexer. Code that isn't Cheetah
+    """Generic `cheetah templates`_ lexer. Code that isn't Cheetah
     markup is yielded as `Token.Other`.  This also works for
     `spitfire templates`_ which use the same syntax.
-
+    
     .. _cheetah templates: http://www.cheetahtemplate.org/
     .. _spitfire templates: http://code.google.com/p/spitfire/
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Cheetah'
@@ -766,9 +955,15 @@
 
 
 class CheetahHtmlLexer(DelegatingLexer):
-    """
-    Subclass of the `CheetahLexer` that highlights unlexed data
+    """Subclass of the `CheetahLexer` that highlights unlexed data
     with the `HtmlLexer`.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'HTML+Cheetah'
@@ -780,9 +975,15 @@
 
 
 class CheetahXmlLexer(DelegatingLexer):
-    """
-    Subclass of the `CheetahLexer` that highlights unlexed data
+    """Subclass of the `CheetahLexer` that highlights unlexed data
     with the `XmlLexer`.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'XML+Cheetah'
@@ -794,9 +995,15 @@
 
 
 class CheetahJavascriptLexer(DelegatingLexer):
-    """
-    Subclass of the `CheetahLexer` that highlights unlexed data
+    """Subclass of the `CheetahLexer` that highlights unlexed data
     with the `JavascriptLexer`.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'JavaScript+Cheetah'
@@ -814,9 +1021,15 @@
 
 
 class GenshiTextLexer(RegexLexer):
-    """
-    A lexer that highlights `genshi <http://genshi.edgewall.org/>`_ text
+    """A lexer that highlights `genshi <http://genshi.edgewall.org/>`_ text
     templates.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Genshi Text'
@@ -849,9 +1062,15 @@
 
 
 class GenshiMarkupLexer(RegexLexer):
-    """
-    Base lexer for Genshi markup, used by `HtmlGenshiLexer` and
+    """Base lexer for Genshi markup, used by `HtmlGenshiLexer` and
     `GenshiLexer`.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     flags = re.DOTALL
@@ -913,9 +1132,15 @@
 
 
 class HtmlGenshiLexer(DelegatingLexer):
-    """
-    A lexer that highlights `genshi <http://genshi.edgewall.org/>`_ and
+    """A lexer that highlights `genshi <http://genshi.edgewall.org/>`_ and
     `kid <http://kid-templating.org/>`_ kid HTML templates.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'HTML+Genshi'
@@ -927,6 +1152,17 @@
         super().__init__(HtmlLexer, GenshiMarkupLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         rv = 0.0
         if re.search(r'\$\{.*?\}', text) is not None:
             rv += 0.2
@@ -936,9 +1172,15 @@
 
 
 class GenshiLexer(DelegatingLexer):
-    """
-    A lexer that highlights `genshi <http://genshi.edgewall.org/>`_ and
+    """A lexer that highlights `genshi <http://genshi.edgewall.org/>`_ and
     `kid <http://kid-templating.org/>`_ kid XML templates.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Genshi'
@@ -951,6 +1193,17 @@
         super().__init__(XmlLexer, GenshiMarkupLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         rv = 0.0
         if re.search(r'\$\{.*?\}', text) is not None:
             rv += 0.2
@@ -960,9 +1213,7 @@
 
 
 class JavascriptGenshiLexer(DelegatingLexer):
-    """
-    A lexer that highlights javascript code in genshi text templates.
-    """
+    """A lexer that highlights javascript code in genshi text templates."""
 
     name = 'JavaScript+Genshi Text'
     aliases = ['js+genshitext', 'js+genshi', 'javascript+genshitext',
@@ -976,13 +1227,22 @@
         super().__init__(JavascriptLexer, GenshiTextLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         return GenshiLexer.analyse_text(text) - 0.05
 
 
 class CssGenshiLexer(DelegatingLexer):
-    """
-    A lexer that highlights CSS definitions in genshi text templates.
-    """
+    """A lexer that highlights CSS definitions in genshi text templates."""
 
     name = 'CSS+Genshi Text'
     aliases = ['css+genshitext', 'css+genshi']
@@ -993,15 +1253,32 @@
         super().__init__(CssLexer, GenshiTextLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         return GenshiLexer.analyse_text(text) - 0.05
 
 
 class RhtmlLexer(DelegatingLexer):
-    """
-    Subclass of the ERB lexer that highlights the unlexed data with the
+    """Subclass of the ERB lexer that highlights the unlexed data with the
     html lexer.
-
+    
     Nested Javascript and CSS is highlighted too.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'RHTML'
@@ -1014,6 +1291,17 @@
         super().__init__(HtmlLexer, ErbLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         rv = ErbLexer.analyse_text(text) - 0.01
         if html_doctype_matches(text):
             # one more than the XmlErbLexer returns
@@ -1022,9 +1310,15 @@
 
 
 class XmlErbLexer(DelegatingLexer):
-    """
-    Subclass of `ErbLexer` which highlights data outside preprocessor
+    """Subclass of `ErbLexer` which highlights data outside preprocessor
     directives with the `XmlLexer`.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'XML+Ruby'
@@ -1036,6 +1330,17 @@
         super().__init__(XmlLexer, ErbLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         rv = ErbLexer.analyse_text(text) - 0.01
         if looks_like_xml(text):
             rv += 0.4
@@ -1043,9 +1348,7 @@
 
 
 class CssErbLexer(DelegatingLexer):
-    """
-    Subclass of `ErbLexer` which highlights unlexed data with the `CssLexer`.
-    """
+    """Subclass of `ErbLexer` which highlights unlexed data with the `CssLexer`."""
 
     name = 'CSS+Ruby'
     aliases = ['css+erb', 'css+ruby']
@@ -1056,13 +1359,30 @@
         super().__init__(CssLexer, ErbLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         return ErbLexer.analyse_text(text) - 0.05
 
 
 class JavascriptErbLexer(DelegatingLexer):
-    """
-    Subclass of `ErbLexer` which highlights unlexed data with the
+    """Subclass of `ErbLexer` which highlights unlexed data with the
     `JavascriptLexer`.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'JavaScript+Ruby'
@@ -1076,14 +1396,31 @@
         super().__init__(JavascriptLexer, ErbLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         return ErbLexer.analyse_text(text) - 0.05
 
 
 class HtmlPhpLexer(DelegatingLexer):
-    """
-    Subclass of `PhpLexer` that highlights unhandled data with the `HtmlLexer`.
-
+    """Subclass of `PhpLexer` that highlights unhandled data with the `HtmlLexer`.
+    
     Nested Javascript and CSS is highlighted too.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'HTML+PHP'
@@ -1099,6 +1436,17 @@
         super().__init__(HtmlLexer, PhpLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         rv = PhpLexer.analyse_text(text) - 0.01
         if html_doctype_matches(text):
             rv += 0.5
@@ -1106,9 +1454,7 @@
 
 
 class XmlPhpLexer(DelegatingLexer):
-    """
-    Subclass of `PhpLexer` that highlights unhandled data with the `XmlLexer`.
-    """
+    """Subclass of `PhpLexer` that highlights unhandled data with the `XmlLexer`."""
 
     name = 'XML+PHP'
     aliases = ['xml+php']
@@ -1119,6 +1465,17 @@
         super().__init__(XmlLexer, PhpLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         rv = PhpLexer.analyse_text(text) - 0.01
         if looks_like_xml(text):
             rv += 0.4
@@ -1126,9 +1483,7 @@
 
 
 class CssPhpLexer(DelegatingLexer):
-    """
-    Subclass of `PhpLexer` which highlights unmatched data with the `CssLexer`.
-    """
+    """Subclass of `PhpLexer` which highlights unmatched data with the `CssLexer`."""
 
     name = 'CSS+PHP'
     aliases = ['css+php']
@@ -1139,13 +1494,30 @@
         super().__init__(CssLexer, PhpLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         return PhpLexer.analyse_text(text) - 0.05
 
 
 class JavascriptPhpLexer(DelegatingLexer):
-    """
-    Subclass of `PhpLexer` which highlights unmatched data with the
+    """Subclass of `PhpLexer` which highlights unmatched data with the
     `JavascriptLexer`.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'JavaScript+PHP'
@@ -1159,15 +1531,32 @@
         super().__init__(JavascriptLexer, PhpLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         return PhpLexer.analyse_text(text)
 
 
 class HtmlSmartyLexer(DelegatingLexer):
-    """
-    Subclass of the `SmartyLexer` that highlights unlexed data with the
+    """Subclass of the `SmartyLexer` that highlights unlexed data with the
     `HtmlLexer`.
-
+    
     Nested Javascript and CSS is highlighted too.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'HTML+Smarty'
@@ -1179,6 +1568,17 @@
         super().__init__(HtmlLexer, SmartyLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         rv = SmartyLexer.analyse_text(text) - 0.01
         if html_doctype_matches(text):
             rv += 0.5
@@ -1186,9 +1586,15 @@
 
 
 class XmlSmartyLexer(DelegatingLexer):
-    """
-    Subclass of the `SmartyLexer` that highlights unlexed data with the
+    """Subclass of the `SmartyLexer` that highlights unlexed data with the
     `XmlLexer`.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'XML+Smarty'
@@ -1200,6 +1606,17 @@
         super().__init__(XmlLexer, SmartyLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         rv = SmartyLexer.analyse_text(text) - 0.01
         if looks_like_xml(text):
             rv += 0.4
@@ -1207,9 +1624,15 @@
 
 
 class CssSmartyLexer(DelegatingLexer):
-    """
-    Subclass of the `SmartyLexer` that highlights unlexed data with the
+    """Subclass of the `SmartyLexer` that highlights unlexed data with the
     `CssLexer`.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'CSS+Smarty'
@@ -1221,13 +1644,30 @@
         super().__init__(CssLexer, SmartyLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         return SmartyLexer.analyse_text(text) - 0.05
 
 
 class JavascriptSmartyLexer(DelegatingLexer):
-    """
-    Subclass of the `SmartyLexer` that highlights unlexed data with the
+    """Subclass of the `SmartyLexer` that highlights unlexed data with the
     `JavascriptLexer`.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'JavaScript+Smarty'
@@ -1241,15 +1681,32 @@
         super().__init__(JavascriptLexer, SmartyLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         return SmartyLexer.analyse_text(text) - 0.05
 
 
 class HtmlDjangoLexer(DelegatingLexer):
-    """
-    Subclass of the `DjangoLexer` that highlights unlexed data with the
+    """Subclass of the `DjangoLexer` that highlights unlexed data with the
     `HtmlLexer`.
-
+    
     Nested Javascript and CSS is highlighted too.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'HTML+Django/Jinja'
@@ -1261,6 +1718,17 @@
         super().__init__(HtmlLexer, DjangoLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         rv = DjangoLexer.analyse_text(text) - 0.01
         if html_doctype_matches(text):
             rv += 0.5
@@ -1268,9 +1736,15 @@
 
 
 class XmlDjangoLexer(DelegatingLexer):
-    """
-    Subclass of the `DjangoLexer` that highlights unlexed data with the
+    """Subclass of the `DjangoLexer` that highlights unlexed data with the
     `XmlLexer`.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'XML+Django/Jinja'
@@ -1282,6 +1756,17 @@
         super().__init__(XmlLexer, DjangoLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         rv = DjangoLexer.analyse_text(text) - 0.01
         if looks_like_xml(text):
             rv += 0.4
@@ -1289,9 +1774,15 @@
 
 
 class CssDjangoLexer(DelegatingLexer):
-    """
-    Subclass of the `DjangoLexer` that highlights unlexed data with the
+    """Subclass of the `DjangoLexer` that highlights unlexed data with the
     `CssLexer`.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'CSS+Django/Jinja'
@@ -1303,13 +1794,30 @@
         super().__init__(CssLexer, DjangoLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         return DjangoLexer.analyse_text(text) - 0.05
 
 
 class JavascriptDjangoLexer(DelegatingLexer):
-    """
-    Subclass of the `DjangoLexer` that highlights unlexed data with the
+    """Subclass of the `DjangoLexer` that highlights unlexed data with the
     `JavascriptLexer`.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'JavaScript+Django/Jinja'
@@ -1327,15 +1835,32 @@
         super().__init__(JavascriptLexer, DjangoLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         return DjangoLexer.analyse_text(text) - 0.05
 
 
 class JspRootLexer(RegexLexer):
-    """
-    Base for the `JspLexer`. Yields `Token.Other` for area outside of
+    """Base for the `JspLexer`. Yields `Token.Other` for area outside of
     JSP tags.
-
+    
     .. versionadded:: 0.7
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     tokens = {
@@ -1356,10 +1881,16 @@
 
 
 class JspLexer(DelegatingLexer):
-    """
-    Lexer for Java Server Pages.
-
+    """Lexer for Java Server Pages.
+    
     .. versionadded:: 0.7
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Java Server Page'
     aliases = ['jsp']
@@ -1370,6 +1901,17 @@
         super().__init__(XmlLexer, JspRootLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         rv = JavaLexer.analyse_text(text) - 0.01
         if looks_like_xml(text):
             rv += 0.4
@@ -1379,10 +1921,16 @@
 
 
 class EvoqueLexer(RegexLexer):
-    """
-    For files using the Evoque templating system.
-
+    """For files using the Evoque templating system.
+    
     .. versionadded:: 1.1
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Evoque'
     aliases = ['evoque']
@@ -1431,16 +1979,32 @@
     }
 
     def analyse_text(text):
-        """Evoque templates use $evoque, which is unique."""
+        """Evoque templates use $evoque, which is unique.
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         if '$evoque' in text:
             return 1
 
 class EvoqueHtmlLexer(DelegatingLexer):
-    """
-    Subclass of the `EvoqueLexer` that highlights unlexed data with the
+    """Subclass of the `EvoqueLexer` that highlights unlexed data with the
     `HtmlLexer`.
-
+    
     .. versionadded:: 1.1
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'HTML+Evoque'
     aliases = ['html+evoque']
@@ -1451,15 +2015,32 @@
         super().__init__(HtmlLexer, EvoqueLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         return EvoqueLexer.analyse_text(text)
 
 
 class EvoqueXmlLexer(DelegatingLexer):
-    """
-    Subclass of the `EvoqueLexer` that highlights unlexed data with the
+    """Subclass of the `EvoqueLexer` that highlights unlexed data with the
     `XmlLexer`.
-
+    
     .. versionadded:: 1.1
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'XML+Evoque'
     aliases = ['xml+evoque']
@@ -1470,13 +2051,22 @@
         super().__init__(XmlLexer, EvoqueLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         return EvoqueLexer.analyse_text(text)
 
 
 class ColdfusionLexer(RegexLexer):
-    """
-    Coldfusion statements
-    """
+    """Coldfusion statements"""
     name = 'cfstatement'
     aliases = ['cfs']
     filenames = []
@@ -1522,9 +2112,7 @@
 
 
 class ColdfusionMarkupLexer(RegexLexer):
-    """
-    Coldfusion markup only
-    """
+    """Coldfusion markup only"""
     name = 'Coldfusion'
     aliases = ['cf']
     filenames = []
@@ -1568,9 +2156,7 @@
 
 
 class ColdfusionHtmlLexer(DelegatingLexer):
-    """
-    Coldfusion markup in html
-    """
+    """Coldfusion markup in html"""
     name = 'Coldfusion HTML'
     aliases = ['cfm']
     filenames = ['*.cfm', '*.cfml']
@@ -1581,10 +2167,16 @@
 
 
 class ColdfusionCFCLexer(DelegatingLexer):
-    """
-    Coldfusion markup/script components
-
+    """Coldfusion markup/script components
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Coldfusion CFC'
     aliases = ['cfc']
@@ -1596,10 +2188,16 @@
 
 
 class SspLexer(DelegatingLexer):
-    """
-    Lexer for Scalate Server Pages.
-
+    """Lexer for Scalate Server Pages.
+    
     .. versionadded:: 1.4
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Scalate Server Page'
     aliases = ['ssp']
@@ -1610,6 +2208,17 @@
         super().__init__(XmlLexer, JspRootLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         rv = 0.0
         if re.search(r'val \w+\s*:', text):
             rv += 0.6
@@ -1621,11 +2230,17 @@
 
 
 class TeaTemplateRootLexer(RegexLexer):
-    """
-    Base for the `TeaTemplateLexer`. Yields `Token.Other` for area outside of
+    """Base for the `TeaTemplateLexer`. Yields `Token.Other` for area outside of
     code blocks.
-
+    
     .. versionadded:: 1.5
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     tokens = {
@@ -1643,10 +2258,16 @@
 
 
 class TeaTemplateLexer(DelegatingLexer):
-    """
-    Lexer for `Tea Templates <http://teatrove.org/>`_.
-
+    """Lexer for `Tea Templates <http://teatrove.org/>`_.
+    
     .. versionadded:: 1.5
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Tea'
     aliases = ['tea']
@@ -1657,6 +2278,17 @@
         super().__init__(XmlLexer, TeaTemplateRootLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         rv = TeaLangLexer.analyse_text(text) - 0.01
         if looks_like_xml(text):
             rv += 0.4
@@ -1666,13 +2298,19 @@
 
 
 class LassoHtmlLexer(DelegatingLexer):
-    """
-    Subclass of the `LassoLexer` which highlights unhandled data with the
+    """Subclass of the `LassoLexer` which highlights unhandled data with the
     `HtmlLexer`.
-
+    
     Nested JavaScript and CSS is also highlighted.
-
+    
     .. versionadded:: 1.6
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'HTML+Lasso'
@@ -1687,6 +2325,17 @@
         super().__init__(HtmlLexer, LassoLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         rv = LassoLexer.analyse_text(text) - 0.01
         if html_doctype_matches(text):  # same as HTML lexer
             rv += 0.5
@@ -1694,11 +2343,17 @@
 
 
 class LassoXmlLexer(DelegatingLexer):
-    """
-    Subclass of the `LassoLexer` which highlights unhandled data with the
+    """Subclass of the `LassoLexer` which highlights unhandled data with the
     `XmlLexer`.
-
+    
     .. versionadded:: 1.6
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'XML+Lasso'
@@ -1711,6 +2366,17 @@
         super().__init__(XmlLexer, LassoLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         rv = LassoLexer.analyse_text(text) - 0.01
         if looks_like_xml(text):
             rv += 0.4
@@ -1718,11 +2384,17 @@
 
 
 class LassoCssLexer(DelegatingLexer):
-    """
-    Subclass of the `LassoLexer` which highlights unhandled data with the
+    """Subclass of the `LassoLexer` which highlights unhandled data with the
     `CssLexer`.
-
+    
     .. versionadded:: 1.6
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'CSS+Lasso'
@@ -1735,6 +2407,17 @@
         super().__init__(CssLexer, LassoLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         rv = LassoLexer.analyse_text(text) - 0.05
         if re.search(r'\w+:.+?;', text):
             rv += 0.1
@@ -1744,11 +2427,17 @@
 
 
 class LassoJavascriptLexer(DelegatingLexer):
-    """
-    Subclass of the `LassoLexer` which highlights unhandled data with the
+    """Subclass of the `LassoLexer` which highlights unhandled data with the
     `JavascriptLexer`.
-
+    
     .. versionadded:: 1.6
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'JavaScript+Lasso'
@@ -1763,18 +2452,35 @@
         super().__init__(JavascriptLexer, LassoLexer, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         rv = LassoLexer.analyse_text(text) - 0.05
         return rv
 
 
 class HandlebarsLexer(RegexLexer):
-    """
-    Generic `handlebars <http://handlebarsjs.com/>` template lexer.
-
+    """Generic `handlebars <http://handlebarsjs.com/>` template lexer.
+    
     Highlights only the Handlebars template tags (stuff between `{{` and `}}`).
     Everything else is left for a delegating lexer.
-
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = "Handlebars"
@@ -1844,11 +2550,17 @@
 
 
 class HandlebarsHtmlLexer(DelegatingLexer):
-    """
-    Subclass of the `HandlebarsLexer` that highlights unlexed data with the
+    """Subclass of the `HandlebarsLexer` that highlights unlexed data with the
     `HtmlLexer`.
-
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = "HTML+Handlebars"
@@ -1861,13 +2573,19 @@
 
 
 class YamlJinjaLexer(DelegatingLexer):
-    """
-    Subclass of the `DjangoLexer` that highlights unlexed data with the
+    """Subclass of the `DjangoLexer` that highlights unlexed data with the
     `YamlLexer`.
-
+    
     Commonly used in Saltstack salt states.
-
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'YAML+Jinja'
@@ -1880,11 +2598,17 @@
 
 
 class LiquidLexer(RegexLexer):
-    """
-    Lexer for `Liquid templates
+    """Lexer for `Liquid templates
     <http://www.rubydoc.info/github/Shopify/liquid>`_.
-
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'liquid'
     aliases = ['liquid']
@@ -2086,13 +2810,19 @@
 
 
 class TwigLexer(RegexLexer):
-    """
-    `Twig <http://twig.sensiolabs.org/>`_ template lexer.
-
+    """`Twig <http://twig.sensiolabs.org/>`_ template lexer.
+    
     It just highlights Twig code between the preprocessor directives,
     other data is left untouched by the lexer.
-
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Twig'
@@ -2169,11 +2899,17 @@
 
 
 class TwigHtmlLexer(DelegatingLexer):
-    """
-    Subclass of the `TwigLexer` that highlights unlexed data with the
+    """Subclass of the `TwigLexer` that highlights unlexed data with the
     `HtmlLexer`.
-
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = "HTML+Twig"
@@ -2186,16 +2922,22 @@
 
 
 class Angular2Lexer(RegexLexer):
-    """
-    Generic
+    """Generic
     `angular2 <http://victorsavkin.com/post/119943127151/angular-2-template-syntax>`_
     template lexer.
-
+    
     Highlights only the Angular template tags (stuff between `{{` and `}}` and
     special attributes: '(event)=', '[property]=', '[(twoWayBinding)]=').
     Everything else is left for a delegating lexer.
-
+    
     .. versionadded:: 2.1
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = "Angular2"
@@ -2250,11 +2992,17 @@
 
 
 class Angular2HtmlLexer(DelegatingLexer):
-    """
-    Subclass of the `Angular2Lexer` that highlights unlexed data with the
+    """Subclass of the `Angular2Lexer` that highlights unlexed data with the
     `HtmlLexer`.
-
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = "HTML + Angular2"
