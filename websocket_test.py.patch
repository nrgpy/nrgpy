# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tornado/test/websocket_test.py
+++ b/..//venv/lib/python3.8/site-packages/tornado/test/websocket_test.py
@@ -40,27 +40,60 @@
 
 class TestWebSocketHandler(WebSocketHandler):
     """Base class for testing handlers that exposes the on_close event.
-
+    
     This allows for tests to see the close code and reason on the
     server side.
 
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def initialize(self, close_future=None, compression_options=None):
+        """
+
+        Parameters
+        ----------
+        close_future :
+             (Default value = None)
+        compression_options :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         self.close_future = close_future
         self.compression_options = compression_options
 
     def get_compression_options(self):
+        """ """
         return self.compression_options
 
     def on_close(self):
+        """ """
         if self.close_future is not None:
             self.close_future.set_result((self.close_code, self.close_reason))
 
 
 class EchoHandler(TestWebSocketHandler):
+    """ """
     @gen.coroutine
     def on_message(self, message):
+        """
+
+        Parameters
+        ----------
+        message :
+            
+
+        Returns
+        -------
+
+        """
         try:
             yield self.write_message(message, isinstance(message, bytes))
         except asyncio.CancelledError:
@@ -70,12 +103,26 @@
 
 
 class ErrorInOnMessageHandler(TestWebSocketHandler):
+    """ """
     def on_message(self, message):
+        """
+
+        Parameters
+        ----------
+        message :
+            
+
+        Returns
+        -------
+
+        """
         1 / 0
 
 
 class HeaderHandler(TestWebSocketHandler):
+    """ """
     def open(self):
+        """ """
         methods_to_test = [
             functools.partial(self.write, "This should not work"),
             functools.partial(self.redirect, "http://localhost/elsewhere"),
@@ -97,52 +144,109 @@
 
 
 class HeaderEchoHandler(TestWebSocketHandler):
+    """ """
     def set_default_headers(self):
+        """ """
         self.set_header("X-Extra-Response-Header", "Extra-Response-Value")
 
     def prepare(self):
+        """ """
         for k, v in self.request.headers.get_all():
             if k.lower().startswith("x-test"):
                 self.set_header(k, v)
 
 
 class NonWebSocketHandler(RequestHandler):
+    """ """
     def get(self):
+        """ """
         self.write("ok")
 
 
 class RedirectHandler(RequestHandler):
+    """ """
     def get(self):
+        """ """
         self.redirect("/echo")
 
 
 class CloseReasonHandler(TestWebSocketHandler):
+    """ """
     def open(self):
+        """ """
         self.on_close_called = False
         self.close(1001, "goodbye")
 
 
 class AsyncPrepareHandler(TestWebSocketHandler):
+    """ """
     @gen.coroutine
     def prepare(self):
+        """ """
         yield gen.moment
 
     def on_message(self, message):
+        """
+
+        Parameters
+        ----------
+        message :
+            
+
+        Returns
+        -------
+
+        """
         self.write_message(message)
 
 
 class PathArgsHandler(TestWebSocketHandler):
+    """ """
     def open(self, arg):
+        """
+
+        Parameters
+        ----------
+        arg :
+            
+
+        Returns
+        -------
+
+        """
         self.write_message(arg)
 
 
 class CoroutineOnMessageHandler(TestWebSocketHandler):
+    """ """
     def initialize(self, **kwargs):
+        """
+
+        Parameters
+        ----------
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         super().initialize(**kwargs)
         self.sleeping = 0
 
     @gen.coroutine
     def on_message(self, message):
+        """
+
+        Parameters
+        ----------
+        message :
+            
+
+        Returns
+        -------
+
+        """
         if self.sleeping > 0:
             self.write_message("another coroutine is already sleeping")
         self.sleeping += 1
@@ -152,16 +256,51 @@
 
 
 class RenderMessageHandler(TestWebSocketHandler):
+    """ """
     def on_message(self, message):
+        """
+
+        Parameters
+        ----------
+        message :
+            
+
+        Returns
+        -------
+
+        """
         self.write_message(self.render_string("message.html", message=message))
 
 
 class SubprotocolHandler(TestWebSocketHandler):
+    """ """
     def initialize(self, **kwargs):
+        """
+
+        Parameters
+        ----------
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         super().initialize(**kwargs)
         self.select_subprotocol_called = False
 
     def select_subprotocol(self, subprotocols):
+        """
+
+        Parameters
+        ----------
+        subprotocols :
+            
+
+        Returns
+        -------
+
+        """
         if self.select_subprotocol_called:
             raise Exception("select_subprotocol called twice")
         self.select_subprotocol_called = True
@@ -170,49 +309,95 @@
         return None
 
     def open(self):
+        """ """
         if not self.select_subprotocol_called:
             raise Exception("select_subprotocol not called")
         self.write_message("subprotocol=%s" % self.selected_subprotocol)
 
 
 class OpenCoroutineHandler(TestWebSocketHandler):
+    """ """
     def initialize(self, test, **kwargs):
+        """
+
+        Parameters
+        ----------
+        test :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         super().initialize(**kwargs)
         self.test = test
         self.open_finished = False
 
     @gen.coroutine
     def open(self):
+        """ """
         yield self.test.message_sent.wait()
         yield gen.sleep(0.010)
         self.open_finished = True
 
     def on_message(self, message):
+        """
+
+        Parameters
+        ----------
+        message :
+            
+
+        Returns
+        -------
+
+        """
         if not self.open_finished:
             raise Exception("on_message called before open finished")
         self.write_message("ok")
 
 
 class ErrorInOpenHandler(TestWebSocketHandler):
+    """ """
     def open(self):
+        """ """
         raise Exception("boom")
 
 
 class ErrorInAsyncOpenHandler(TestWebSocketHandler):
+    """ """
     async def open(self):
         await asyncio.sleep(0)
         raise Exception("boom")
 
 
 class NoDelayHandler(TestWebSocketHandler):
+    """ """
     def open(self):
+        """ """
         self.set_nodelay(True)
         self.write_message("hello")
 
 
 class WebSocketBaseTestCase(AsyncHTTPTestCase):
+    """ """
     @gen.coroutine
     def ws_connect(self, path, **kwargs):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         ws = yield websocket_connect(
             "ws://127.0.0.1:%d%s" % (self.get_http_port(), path), **kwargs
         )
@@ -220,7 +405,9 @@
 
 
 class WebSocketTest(WebSocketBaseTestCase):
+    """ """
     def get_app(self):
+        """ """
         self.close_future = Future()  # type: Future[None]
         return Application(
             [
@@ -277,19 +464,23 @@
         )
 
     def get_http_client(self):
+        """ """
         # These tests require HTTP/1; force the use of SimpleAsyncHTTPClient.
         return SimpleAsyncHTTPClient()
 
     def tearDown(self):
+        """ """
         super().tearDown()
         RequestHandler._template_loaders.clear()
 
     def test_http_request(self):
+        """ """
         # WS server, HTTP client.
         response = self.fetch("/echo")
         self.assertEqual(response.code, 400)
 
     def test_missing_websocket_key(self):
+        """ """
         response = self.fetch(
             "/echo",
             headers={
@@ -301,6 +492,7 @@
         self.assertEqual(response.code, 400)
 
     def test_bad_websocket_version(self):
+        """ """
         response = self.fetch(
             "/echo",
             headers={
@@ -313,12 +505,14 @@
 
     @gen_test
     def test_websocket_gen(self):
+        """ """
         ws = yield self.ws_connect("/echo")
         yield ws.write_message("hello")
         response = yield ws.read_message()
         self.assertEqual(response, "hello")
 
     def test_websocket_callbacks(self):
+        """ """
         websocket_connect(
             "ws://127.0.0.1:%d/echo" % self.get_http_port(), callback=self.stop
         )
@@ -333,6 +527,7 @@
 
     @gen_test
     def test_binary_message(self):
+        """ """
         ws = yield self.ws_connect("/echo")
         ws.write_message(b"hello \xe9", binary=True)
         response = yield ws.read_message()
@@ -340,6 +535,7 @@
 
     @gen_test
     def test_unicode_message(self):
+        """ """
         ws = yield self.ws_connect("/echo")
         ws.write_message(u"hello \u00e9")
         response = yield ws.read_message()
@@ -347,6 +543,7 @@
 
     @gen_test
     def test_render_message(self):
+        """ """
         ws = yield self.ws_connect("/render")
         ws.write_message("hello")
         response = yield ws.read_message()
@@ -354,6 +551,7 @@
 
     @gen_test
     def test_error_in_on_message(self):
+        """ """
         ws = yield self.ws_connect("/error_in_on_message")
         ws.write_message("hello")
         with ExpectLog(app_log, "Uncaught exception"):
@@ -362,22 +560,26 @@
 
     @gen_test
     def test_websocket_http_fail(self):
+        """ """
         with self.assertRaises(HTTPError) as cm:
             yield self.ws_connect("/notfound")
         self.assertEqual(cm.exception.code, 404)
 
     @gen_test
     def test_websocket_http_success(self):
+        """ """
         with self.assertRaises(WebSocketError):
             yield self.ws_connect("/non_ws")
 
     @gen_test
     def test_websocket_http_redirect(self):
+        """ """
         with self.assertRaises(HTTPError):
             yield self.ws_connect("/redirect")
 
     @gen_test
     def test_websocket_network_fail(self):
+        """ """
         sock, port = bind_unused_port()
         sock.close()
         with self.assertRaises(IOError):
@@ -388,6 +590,7 @@
 
     @gen_test
     def test_websocket_close_buffered_data(self):
+        """ """
         ws = yield websocket_connect("ws://127.0.0.1:%d/echo" % self.get_http_port())
         ws.write_message("hello")
         ws.write_message("world")
@@ -396,6 +599,7 @@
 
     @gen_test
     def test_websocket_headers(self):
+        """ """
         # Ensure that arbitrary headers can be passed through websocket_connect.
         ws = yield websocket_connect(
             HTTPRequest(
@@ -408,6 +612,7 @@
 
     @gen_test
     def test_websocket_header_echo(self):
+        """ """
         # Ensure that headers can be returned in the response.
         # Specifically, that arbitrary headers passed through websocket_connect
         # can be returned.
@@ -424,6 +629,7 @@
 
     @gen_test
     def test_server_close_reason(self):
+        """ """
         ws = yield self.ws_connect("/close_reason")
         msg = yield ws.read_message()
         # A message of None means the other side closed the connection.
@@ -439,6 +645,7 @@
 
     @gen_test
     def test_client_close_reason(self):
+        """ """
         ws = yield self.ws_connect("/echo")
         ws.close(1001, "goodbye")
         code, reason = yield self.close_future
@@ -447,6 +654,7 @@
 
     @gen_test
     def test_write_after_close(self):
+        """ """
         ws = yield self.ws_connect("/close_reason")
         msg = yield ws.read_message()
         self.assertIs(msg, None)
@@ -455,6 +663,7 @@
 
     @gen_test
     def test_async_prepare(self):
+        """ """
         # Previously, an async prepare method triggered a bug that would
         # result in a timeout on test shutdown (and a memory leak).
         ws = yield self.ws_connect("/async_prepare")
@@ -464,12 +673,14 @@
 
     @gen_test
     def test_path_args(self):
+        """ """
         ws = yield self.ws_connect("/path_args/hello")
         res = yield ws.read_message()
         self.assertEqual(res, "hello")
 
     @gen_test
     def test_coroutine(self):
+        """ """
         ws = yield self.ws_connect("/coroutine")
         # Send both messages immediately, coroutine must process one at a time.
         yield ws.write_message("hello1")
@@ -481,6 +692,7 @@
 
     @gen_test
     def test_check_origin_valid_no_path(self):
+        """ """
         port = self.get_http_port()
 
         url = "ws://127.0.0.1:%d/echo" % port
@@ -493,6 +705,7 @@
 
     @gen_test
     def test_check_origin_valid_with_path(self):
+        """ """
         port = self.get_http_port()
 
         url = "ws://127.0.0.1:%d/echo" % port
@@ -505,6 +718,7 @@
 
     @gen_test
     def test_check_origin_invalid_partial_url(self):
+        """ """
         port = self.get_http_port()
 
         url = "ws://127.0.0.1:%d/echo" % port
@@ -516,6 +730,7 @@
 
     @gen_test
     def test_check_origin_invalid(self):
+        """ """
         port = self.get_http_port()
 
         url = "ws://127.0.0.1:%d/echo" % port
@@ -530,6 +745,7 @@
 
     @gen_test
     def test_check_origin_invalid_subdomains(self):
+        """ """
         port = self.get_http_port()
 
         url = "ws://localhost:%d/echo" % port
@@ -544,6 +760,7 @@
 
     @gen_test
     def test_subprotocols(self):
+        """ """
         ws = yield self.ws_connect(
             "/subprotocol", subprotocols=["badproto", "goodproto"]
         )
@@ -553,6 +770,7 @@
 
     @gen_test
     def test_subprotocols_not_offered(self):
+        """ """
         ws = yield self.ws_connect("/subprotocol")
         self.assertIs(ws.selected_subprotocol, None)
         res = yield ws.read_message()
@@ -560,6 +778,7 @@
 
     @gen_test
     def test_open_coroutine(self):
+        """ """
         self.message_sent = Event()
         ws = yield self.ws_connect("/open_coroutine")
         yield ws.write_message("hello")
@@ -569,6 +788,7 @@
 
     @gen_test
     def test_error_in_open(self):
+        """ """
         with ExpectLog(app_log, "Uncaught exception"):
             ws = yield self.ws_connect("/error_in_open")
             res = yield ws.read_message()
@@ -576,6 +796,7 @@
 
     @gen_test
     def test_error_in_async_open(self):
+        """ """
         with ExpectLog(app_log, "Uncaught exception"):
             ws = yield self.ws_connect("/error_in_async_open")
             res = yield ws.read_message()
@@ -583,13 +804,26 @@
 
     @gen_test
     def test_nodelay(self):
+        """ """
         ws = yield self.ws_connect("/nodelay")
         res = yield ws.read_message()
         self.assertEqual(res, "hello")
 
 
 class NativeCoroutineOnMessageHandler(TestWebSocketHandler):
+    """ """
     def initialize(self, **kwargs):
+        """
+
+        Parameters
+        ----------
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         super().initialize(**kwargs)
         self.sleeping = 0
 
@@ -603,11 +837,14 @@
 
 
 class WebSocketNativeCoroutineTest(WebSocketBaseTestCase):
+    """ """
     def get_app(self):
+        """ """
         return Application([("/native", NativeCoroutineOnMessageHandler)])
 
     @gen_test
     def test_native_coroutine(self):
+        """ """
         ws = yield self.ws_connect("/native")
         # Send both messages immediately, coroutine must process one at a time.
         yield ws.write_message("hello1")
@@ -619,15 +856,30 @@
 
 
 class CompressionTestMixin(object):
+    """ """
     MESSAGE = "Hello world. Testing 123 123"
 
     def get_app(self):
+        """ """
         class LimitedHandler(TestWebSocketHandler):
+            """ """
             @property
             def max_message_size(self):
+                """ """
                 return 1024
 
             def on_message(self, message):
+                """
+
+                Parameters
+                ----------
+                message :
+                    
+
+                Returns
+                -------
+
+                """
                 self.write_message(str(len(message)))
 
         return Application(
@@ -646,16 +898,42 @@
         )
 
     def get_server_compression_options(self):
+        """ """
         return None
 
     def get_client_compression_options(self):
+        """ """
         return None
 
     def verify_wire_bytes(self, bytes_in: int, bytes_out: int) -> None:
+        """
+
+        Parameters
+        ----------
+        bytes_in: int :
+            
+        bytes_out: int :
+            
+
+        Returns
+        -------
+
+        """
         raise NotImplementedError()
 
     @gen_test
     def test_message_sizes(self: typing.Any):
+        """
+
+        Parameters
+        ----------
+        self: typing.Any :
+            
+
+        Returns
+        -------
+
+        """
         ws = yield self.ws_connect(
             "/echo", compression_options=self.get_client_compression_options()
         )
@@ -671,6 +949,17 @@
 
     @gen_test
     def test_size_limit(self: typing.Any):
+        """
+
+        Parameters
+        ----------
+        self: typing.Any :
+            
+
+        Returns
+        -------
+
+        """
         ws = yield self.ws_connect(
             "/limited", compression_options=self.get_client_compression_options()
         )
@@ -689,34 +978,70 @@
     """Specialization of CompressionTestMixin when we expect no compression."""
 
     def verify_wire_bytes(self: typing.Any, bytes_in, bytes_out):
+        """
+
+        Parameters
+        ----------
+        self: typing.Any :
+            
+        bytes_in :
+            
+        bytes_out :
+            
+
+        Returns
+        -------
+
+        """
         # Bytes out includes the 4-byte mask key per message.
         self.assertEqual(bytes_out, 3 * (len(self.MESSAGE) + 6))
         self.assertEqual(bytes_in, 3 * (len(self.MESSAGE) + 2))
 
 
 class NoCompressionTest(UncompressedTestMixin, WebSocketBaseTestCase):
+    """ """
     pass
 
 
 # If only one side tries to compress, the extension is not negotiated.
 class ServerOnlyCompressionTest(UncompressedTestMixin, WebSocketBaseTestCase):
+    """ """
     def get_server_compression_options(self):
+        """ """
         return {}
 
 
 class ClientOnlyCompressionTest(UncompressedTestMixin, WebSocketBaseTestCase):
+    """ """
     def get_client_compression_options(self):
+        """ """
         return {}
 
 
 class DefaultCompressionTest(CompressionTestMixin, WebSocketBaseTestCase):
+    """ """
     def get_server_compression_options(self):
+        """ """
         return {}
 
     def get_client_compression_options(self):
+        """ """
         return {}
 
     def verify_wire_bytes(self, bytes_in, bytes_out):
+        """
+
+        Parameters
+        ----------
+        bytes_in :
+            
+        bytes_out :
+            
+
+        Returns
+        -------
+
+        """
         self.assertLess(bytes_out, 3 * (len(self.MESSAGE) + 6))
         self.assertLess(bytes_in, 3 * (len(self.MESSAGE) + 2))
         # Bytes out includes the 4 bytes mask key per message.
@@ -724,11 +1049,36 @@
 
 
 class MaskFunctionMixin(object):
+    """ """
     # Subclasses should define self.mask(mask, data)
     def mask(self, mask: bytes, data: bytes) -> bytes:
+        """
+
+        Parameters
+        ----------
+        mask: bytes :
+            
+        data: bytes :
+            
+
+        Returns
+        -------
+
+        """
         raise NotImplementedError()
 
     def test_mask(self: typing.Any):
+        """
+
+        Parameters
+        ----------
+        self: typing.Any :
+            
+
+        Returns
+        -------
+
+        """
         self.assertEqual(self.mask(b"abcd", b""), b"")
         self.assertEqual(self.mask(b"abcd", b"b"), b"\x03")
         self.assertEqual(self.mask(b"abcd", b"54321"), b"TVPVP")
@@ -747,26 +1097,69 @@
 
 
 class PythonMaskFunctionTest(MaskFunctionMixin, unittest.TestCase):
+    """ """
     def mask(self, mask, data):
+        """
+
+        Parameters
+        ----------
+        mask :
+            
+        data :
+            
+
+        Returns
+        -------
+
+        """
         return _websocket_mask_python(mask, data)
 
 
 @unittest.skipIf(speedups is None, "tornado.speedups module not present")
 class CythonMaskFunctionTest(MaskFunctionMixin, unittest.TestCase):
+    """ """
     def mask(self, mask, data):
+        """
+
+        Parameters
+        ----------
+        mask :
+            
+        data :
+            
+
+        Returns
+        -------
+
+        """
         return speedups.websocket_mask(mask, data)
 
 
 class ServerPeriodicPingTest(WebSocketBaseTestCase):
+    """ """
     def get_app(self):
+        """ """
         class PingHandler(TestWebSocketHandler):
+            """ """
             def on_pong(self, data):
+                """
+
+                Parameters
+                ----------
+                data :
+                    
+
+                Returns
+                -------
+
+                """
                 self.write_message("got pong")
 
         return Application([("/", PingHandler)], websocket_ping_interval=0.01)
 
     @gen_test
     def test_server_ping(self):
+        """ """
         ws = yield self.ws_connect("/")
         for i in range(3):
             response = yield ws.read_message()
@@ -775,15 +1168,30 @@
 
 
 class ClientPeriodicPingTest(WebSocketBaseTestCase):
+    """ """
     def get_app(self):
+        """ """
         class PingHandler(TestWebSocketHandler):
+            """ """
             def on_ping(self, data):
+                """
+
+                Parameters
+                ----------
+                data :
+                    
+
+                Returns
+                -------
+
+                """
                 self.write_message("got ping")
 
         return Application([("/", PingHandler)])
 
     @gen_test
     def test_client_ping(self):
+        """ """
         ws = yield self.ws_connect("/", ping_interval=0.01)
         for i in range(3):
             response = yield ws.read_message()
@@ -792,15 +1200,30 @@
 
 
 class ManualPingTest(WebSocketBaseTestCase):
+    """ """
     def get_app(self):
+        """ """
         class PingHandler(TestWebSocketHandler):
+            """ """
             def on_ping(self, data):
+                """
+
+                Parameters
+                ----------
+                data :
+                    
+
+                Returns
+                -------
+
+                """
                 self.write_message(data, binary=isinstance(data, bytes))
 
         return Application([("/", PingHandler)])
 
     @gen_test
     def test_manual_ping(self):
+        """ """
         ws = yield self.ws_connect("/")
 
         self.assertRaises(ValueError, ws.ping, "a" * 126)
@@ -816,11 +1239,14 @@
 
 
 class MaxMessageSizeTest(WebSocketBaseTestCase):
+    """ """
     def get_app(self):
+        """ """
         return Application([("/", EchoHandler)], websocket_max_message_size=1024)
 
     @gen_test
     def test_large_message(self):
+        """ """
         ws = yield self.ws_connect("/")
 
         # Write a message that is allowed.
