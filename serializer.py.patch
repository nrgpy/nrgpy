# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/bleach/_vendor/html5lib/serializer.py
+++ b/..//venv/lib/python3.8/site-packages/bleach/_vendor/html5lib/serializer.py
@@ -40,6 +40,17 @@
 
 
 def htmlentityreplace_errors(exc):
+    """
+
+    Parameters
+    ----------
+    exc :
+        
+
+    Returns
+    -------
+
+    """
     if isinstance(exc, (UnicodeEncodeError, UnicodeTranslateError)):
         res = []
         codepoints = []
@@ -74,26 +85,39 @@
 
 def serialize(input, tree="etree", encoding=None, **serializer_opts):
     """Serializes the input token stream using the specified treewalker
-
+    
     :arg input: the token stream to serialize
-
+    
     :arg tree: the treewalker to use
-
+    
     :arg encoding: the encoding to use
-
+    
     :arg serializer_opts: any options to pass to the
         :py:class:`html5lib.serializer.HTMLSerializer` that gets created
 
-    :returns: the tree serialized as a string
-
-    Example:
+    Parameters
+    ----------
+    input :
+        
+    tree :
+         (Default value = "etree")
+    encoding :
+         (Default value = None)
+    **serializer_opts :
+        
+
+    Returns
+    -------
+    type
+        the tree serialized as a string
+        
+        Example:
 
     >>> from html5lib.html5parser import parse
     >>> from html5lib.serializer import serialize
     >>> token_stream = parse('<html><body><p>Hi!</p></body></html>')
     >>> serialize(token_stream, omit_optional_tags=False)
     '<html><head></head><body><p>Hi!</p></body></html>'
-
     """
     # XXX: Should we cache this?
     walker = treewalkers.getTreeWalker(tree)
@@ -102,6 +126,7 @@
 
 
 class HTMLSerializer(object):
+    """ """
 
     # attribute quoting options
     quote_attr_values = "legacy"  # be secure by default
@@ -222,6 +247,17 @@
         self.strict = False
 
     def encode(self, string):
+        """
+
+        Parameters
+        ----------
+        string :
+            
+
+        Returns
+        -------
+
+        """
         assert(isinstance(string, text_type))
         if self.encoding:
             return string.encode(self.encoding, "htmlentityreplace")
@@ -229,6 +265,17 @@
             return string
 
     def encodeStrict(self, string):
+        """
+
+        Parameters
+        ----------
+        string :
+            
+
+        Returns
+        -------
+
+        """
         assert(isinstance(string, text_type))
         if self.encoding:
             return string.encode(self.encoding, "strict")
@@ -236,6 +283,19 @@
             return string
 
     def serialize(self, treewalker, encoding=None):
+        """
+
+        Parameters
+        ----------
+        treewalker :
+            
+        encoding :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         # pylint:disable=too-many-nested-blocks
         self.encoding = encoding
         in_cdata = False
@@ -374,14 +434,24 @@
 
     def render(self, treewalker, encoding=None):
         """Serializes the stream from the treewalker into a string
-
+        
         :arg treewalker: the treewalker to serialize
-
+        
         :arg encoding: the string encoding to use
 
-        :returns: the serialized tree
-
-        Example:
+        Parameters
+        ----------
+        treewalker :
+            
+        encoding :
+             (Default value = None)
+
+        Returns
+        -------
+        type
+            the serialized tree
+            
+            Example:
 
         >>> from html5lib import parse, getTreeWalker
         >>> from html5lib.serializer import HTMLSerializer
@@ -390,7 +460,6 @@
         >>> serializer = HTMLSerializer(omit_optional_tags=False)
         >>> serializer.render(walker(token_stream))
         '<html><head></head><body>Hi!</body></html>'
-
         """
         if encoding:
             return b"".join(list(self.serialize(treewalker, encoding)))
@@ -398,6 +467,17 @@
             return "".join(list(self.serialize(treewalker)))
 
     def serializeError(self, data="XXX ERROR MESSAGE NEEDED"):
+        """
+
+        Parameters
+        ----------
+        data :
+             (Default value = "XXX ERROR MESSAGE NEEDED")
+
+        Returns
+        -------
+
+        """
         # XXX The idea is to make data mandatory.
         self.errors.append(data)
         if self.strict:
