# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/groupby/test_counting.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/groupby/test_counting.py
@@ -19,7 +19,9 @@
 
 
 class TestCounting:
+    """ """
     def test_cumcount(self):
+        """ """
         df = DataFrame([["a"], ["a"], ["a"], ["b"], ["a"]], columns=["A"])
         g = df.groupby("A")
         sg = g.A
@@ -30,6 +32,7 @@
         tm.assert_series_equal(expected, sg.cumcount())
 
     def test_cumcount_empty(self):
+        """ """
         ge = DataFrame().groupby(level=0)
         se = Series(dtype=object).groupby(level=0)
 
@@ -40,6 +43,7 @@
         tm.assert_series_equal(e, se.cumcount())
 
     def test_cumcount_dupe_index(self):
+        """ """
         df = DataFrame(
             [["a"], ["a"], ["a"], ["b"], ["a"]], columns=["A"], index=[0] * 5
         )
@@ -52,6 +56,7 @@
         tm.assert_series_equal(expected, sg.cumcount())
 
     def test_cumcount_mi(self):
+        """ """
         mi = MultiIndex.from_tuples([[0, 1], [1, 2], [2, 2], [2, 2], [1, 0]])
         df = DataFrame([["a"], ["a"], ["a"], ["b"], ["a"]], columns=["A"], index=mi)
         g = df.groupby("A")
@@ -63,6 +68,7 @@
         tm.assert_series_equal(expected, sg.cumcount())
 
     def test_cumcount_groupby_not_col(self):
+        """ """
         df = DataFrame(
             [["a"], ["a"], ["a"], ["b"], ["a"]], columns=["A"], index=[0] * 5
         )
@@ -75,6 +81,7 @@
         tm.assert_series_equal(expected, sg.cumcount())
 
     def test_ngroup(self):
+        """ """
         df = DataFrame({"A": list("aaaba")})
         g = df.groupby("A")
         sg = g.A
@@ -85,6 +92,7 @@
         tm.assert_series_equal(expected, sg.ngroup())
 
     def test_ngroup_distinct(self):
+        """ """
         df = DataFrame({"A": list("abcde")})
         g = df.groupby("A")
         sg = g.A
@@ -95,6 +103,7 @@
         tm.assert_series_equal(expected, sg.ngroup())
 
     def test_ngroup_one_group(self):
+        """ """
         df = DataFrame({"A": [0] * 5})
         g = df.groupby("A")
         sg = g.A
@@ -105,6 +114,7 @@
         tm.assert_series_equal(expected, sg.ngroup())
 
     def test_ngroup_empty(self):
+        """ """
         ge = DataFrame().groupby(level=0)
         se = Series(dtype=object).groupby(level=0)
 
@@ -115,12 +125,14 @@
         tm.assert_series_equal(e, se.ngroup())
 
     def test_ngroup_series_matches_frame(self):
+        """ """
         df = DataFrame({"A": list("aaaba")})
         s = Series(list("aaaba"))
 
         tm.assert_series_equal(df.groupby(s).ngroup(), s.groupby(s).ngroup())
 
     def test_ngroup_dupe_index(self):
+        """ """
         df = DataFrame({"A": list("aaaba")}, index=[0] * 5)
         g = df.groupby("A")
         sg = g.A
@@ -131,6 +143,7 @@
         tm.assert_series_equal(expected, sg.ngroup())
 
     def test_ngroup_mi(self):
+        """ """
         mi = MultiIndex.from_tuples([[0, 1], [1, 2], [2, 2], [2, 2], [1, 0]])
         df = DataFrame({"A": list("aaaba")}, index=mi)
         g = df.groupby("A")
@@ -141,6 +154,7 @@
         tm.assert_series_equal(expected, sg.ngroup())
 
     def test_ngroup_groupby_not_col(self):
+        """ """
         df = DataFrame({"A": list("aaaba")}, index=[0] * 5)
         g = df.groupby([0, 0, 0, 1, 0])
         sg = g.A
@@ -151,6 +165,7 @@
         tm.assert_series_equal(expected, sg.ngroup())
 
     def test_ngroup_descending(self):
+        """ """
         df = DataFrame(["a", "a", "b", "a", "b"], columns=["A"])
         g = df.groupby(["A"])
 
@@ -162,6 +177,7 @@
         tm.assert_series_equal(descending, g.ngroup(ascending=False))
 
     def test_ngroup_matches_cumcount(self):
+        """ """
         # verify one manually-worked out case works
         df = DataFrame(
             [["a", "x"], ["a", "y"], ["b", "x"], ["a", "x"], ["b", "y"]],
@@ -177,6 +193,7 @@
         tm.assert_series_equal(g_cumcount, expected_cumcount)
 
     def test_ngroup_cumcount_pair(self):
+        """ """
         # brute force comparison for all small series
         for p in product(range(3), repeat=4):
             df = DataFrame({"a": p})
@@ -190,6 +207,7 @@
             tm.assert_series_equal(g.cumcount(), Series(cumcounted))
 
     def test_ngroup_respects_groupby_order(self):
+        """ """
         np.random.seed(0)
         df = DataFrame({"a": np.random.choice(list("abcdef"), 100)})
         for sort_flag in (False, True):
@@ -215,6 +233,17 @@
         ],
     )
     def test_count_with_datetimelike(self, datetimelike):
+        """
+
+        Parameters
+        ----------
+        datetimelike :
+            
+
+        Returns
+        -------
+
+        """
         # test for #13393, where DataframeGroupBy.count() fails
         # when counting a datetimelike column.
 
@@ -225,6 +254,7 @@
         tm.assert_frame_equal(expected, res)
 
     def test_count_with_only_nans_in_first_group(self):
+        """ """
         # GH21956
         df = DataFrame({"A": [np.nan, np.nan], "B": ["a", "b"], "C": [1, 2]})
         result = df.groupby(["A", "B"]).C.count()
@@ -233,6 +263,7 @@
         tm.assert_series_equal(result, expected, check_index_type=False)
 
     def test_count_groupby_column_with_nan_in_groupby_column(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/32841
         df = DataFrame({"A": [1, 1, 1, 1, 1], "B": [5, 4, np.NaN, 3, 0]})
         res = df.groupby(["B"]).count()
@@ -243,6 +274,7 @@
 
 
 def test_groupby_timedelta_cython_count():
+    """ """
     df = DataFrame(
         {"g": list("ab" * 2), "delt": np.arange(4).astype("timedelta64[ns]")}
     )
@@ -252,6 +284,7 @@
 
 
 def test_count():
+    """ """
     n = 1 << 15
     dr = date_range("2015-08-30", periods=n // 10, freq="T")
 
@@ -281,6 +314,7 @@
 
 
 def test_count_non_nulls():
+    """ """
     # GH#5610
     # count counts non-nulls
     df = pd.DataFrame(
@@ -301,6 +335,7 @@
 
 
 def test_count_object():
+    """ """
     df = pd.DataFrame({"a": ["a"] * 3 + ["b"] * 3, "c": [2] * 3 + [3] * 3})
     result = df.groupby("c").a.count()
     expected = pd.Series([3, 3], index=pd.Index([2, 3], name="c"), name="a")
@@ -313,6 +348,7 @@
 
 
 def test_count_cross_type():
+    """ """
     # GH8169
     vals = np.hstack(
         (np.random.randint(0, 5, (100, 2)), np.random.randint(0, 2, (100, 2)))
@@ -330,6 +366,7 @@
 
 
 def test_lower_int_prec_count():
+    """ """
     df = DataFrame(
         {
             "a": np.array([0, 1, 2, 100], np.int8),
@@ -346,10 +383,13 @@
 
 
 def test_count_uses_size_on_exception():
+    """ """
     class RaisingObjectException(Exception):
+        """ """
         pass
 
     class RaisingObject:
+        """ """
         def __init__(self, msg="I will raise inside Cython"):
             super().__init__()
             self.msg = msg
