# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/matrixlib/tests/test_interaction.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/matrixlib/tests/test_interaction.py
@@ -14,6 +14,7 @@
 
 
 def test_fancy_indexing():
+    """ """
     # The matrix class messes with the shape. While this is always
     # weird (getitem is not used, it does not have setitem nor knows
     # about fancy indexing), this tests gh-3110
@@ -29,6 +30,7 @@
 
 
 def test_polynomial_mapdomain():
+    """ """
     # test that polynomial preserved matrix subtype.
     # 2018-04-29: moved here from polynomial.tests.polyutils.
     dom1 = [0, 4]
@@ -39,6 +41,7 @@
 
 
 def test_sort_matrix_none():
+    """ """
     # 2018-04-29: moved here from core.tests.test_multiarray
     a = np.matrix([[2, 1, 0]])
     actual = np.sort(a, axis=None)
@@ -48,6 +51,7 @@
 
 
 def test_partition_matrix_none():
+    """ """
     # gh-4301
     # 2018-04-29: moved here from core.tests.test_multiarray
     a = np.matrix([[2, 1, 0]])
@@ -58,6 +62,7 @@
 
 
 def test_dot_scalar_and_matrix_of_objects():
+    """ """
     # Ticket #2469
     # 2018-04-29: moved here from core.tests.test_multiarray
     arr = np.matrix([1, 2], dtype=object)
@@ -67,6 +72,7 @@
 
 
 def test_inner_scalar_and_matrix():
+    """ """
     # 2018-04-29: moved here from core.tests.test_multiarray
     for dt in np.typecodes['AllInteger'] + np.typecodes['AllFloat'] + '?':
         sca = np.array(3, dtype=dt)[()]
@@ -77,6 +83,7 @@
 
 
 def test_inner_scalar_and_matrix_of_objects():
+    """ """
     # Ticket #4482
     # 2018-04-29: moved here from core.tests.test_multiarray
     arr = np.matrix([1, 2], dtype=object)
@@ -86,6 +93,7 @@
 
 
 def test_iter_allocate_output_subtype():
+    """ """
     # Make sure that the subtype with priority wins
     # 2018-04-29: moved here from core.tests.test_nditer, given the
     # matrix specific shape test.
@@ -113,6 +121,7 @@
 
 
 def like_function():
+    """ """
     # 2018-04-29: moved here from core.tests.test_numeric
     a = np.matrix([[1, 2], [3, 4]])
     for like_function in np.zeros_like, np.ones_like, np.empty_like:
@@ -124,6 +133,7 @@
 
 
 def test_array_astype():
+    """ """
     # 2018-04-29: copied here from core.tests.test_api
     # subok=True passes through a matrix
     a = np.matrix([[0, 1, 2], [3, 4, 5]], dtype='f4')
@@ -143,6 +153,7 @@
 
 
 def test_stack():
+    """ """
     # 2018-04-29: copied here from core.tests.test_shape_base
     # check np.matrix cannot be stacked
     m = np.matrix([[1, 2], [3, 4]])
@@ -151,6 +162,7 @@
 
 
 def test_object_scalar_multiply():
+    """ """
     # Tickets #2469 and #4482
     # 2018-04-29: moved here from core.tests.test_ufunc
     arr = np.matrix([1, 2], dtype=object)
@@ -160,6 +172,7 @@
 
 
 def test_nanfunctions_matrices():
+    """ """
     # Check that it works and that type and
     # shape are preserved
     # 2018-04-29: moved here from core.tests.test_nanfunctions
@@ -201,6 +214,7 @@
 
 
 def test_nanfunctions_matrices_general():
+    """ """
     # Check that it works and that type and
     # shape are preserved
     # 2018-04-29: moved here from core.tests.test_nanfunctions
@@ -229,6 +243,7 @@
 
 
 def test_average_matrix():
+    """ """
     # 2018-04-29: moved here from core.tests.test_function_base.
     y = np.matrix(np.random.rand(5, 5))
     assert_array_equal(y.mean(0), np.average(y, 0))
@@ -242,6 +257,7 @@
 
 
 def test_trapz_matrix():
+    """ """
     # Test to make sure matrices give the same answer as ndarrays
     # 2018-04-29: moved here from core.tests.test_function_base.
     x = np.linspace(0, 5)
@@ -254,16 +270,29 @@
 
 
 def test_ediff1d_matrix():
+    """ """
     # 2018-04-29: moved here from core.tests.test_arraysetops.
     assert(isinstance(np.ediff1d(np.matrix(1)), np.matrix))
     assert(isinstance(np.ediff1d(np.matrix(1), to_begin=1), np.matrix))
 
 
 def test_apply_along_axis_matrix():
+    """ """
     # this test is particularly malicious because matrix
     # refuses to become 1d
     # 2018-04-29: moved here from core.tests.test_shape_base.
     def double(row):
+        """
+
+        Parameters
+        ----------
+        row :
+            
+
+        Returns
+        -------
+
+        """
         return row * 2
 
     m = np.matrix([[0, 1], [2, 3]])
@@ -279,6 +308,7 @@
 
 
 def test_kron_matrix():
+    """ """
     # 2018-04-29: moved here from core.tests.test_shape_base.
     a = np.ones([2, 2])
     m = np.asmatrix(a)
@@ -289,8 +319,10 @@
 
 
 class TestConcatenatorMatrix:
+    """ """
     # 2018-04-29: moved here from core.tests.test_index_tricks.
     def test_matrix(self):
+        """ """
         a = [1, 2]
         b = [3, 4]
 
@@ -306,11 +338,13 @@
         assert_raises(ValueError, lambda: np.r_['rc', a, b])
 
     def test_matrix_scalar(self):
+        """ """
         r = np.r_['r', [1, 2], 3]
         assert_equal(type(r), np.matrix)
         assert_equal(np.array(r), [[1, 2, 3]])
 
     def test_matrix_builder(self):
+        """ """
         a = np.array([1])
         b = np.array([2])
         c = np.array([3])
@@ -323,6 +357,7 @@
 
 
 def test_array_equal_error_message_matrix():
+    """ """
     # 2018-04-29: moved here from testing.tests.test_utils.
     with pytest.raises(AssertionError) as exc_info:
         assert_equal(np.array([1, 2]), np.matrix([1, 2]))
@@ -338,6 +373,7 @@
 
 
 def test_array_almost_equal_matrix():
+    """ """
     # Matrix slicing keeps things 2-D, while array does not necessarily.
     # See gh-8452.
     # 2018-04-29: moved here from testing.tests.test_utils.
