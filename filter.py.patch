# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pygments/filter.py
+++ b/..//venv/lib/python3.8/site-packages/pygments/filter.py
@@ -11,12 +11,37 @@
 
 
 def apply_filters(stream, filters, lexer=None):
-    """
-    Use this method to apply an iterable of filters to
+    """Use this method to apply an iterable of filters to
     a stream. If lexer is given it's forwarded to the
     filter, otherwise the filter receives `None`.
+
+    Parameters
+    ----------
+    stream :
+        
+    filters :
+        
+    lexer :
+         (Default value = None)
+
+    Returns
+    -------
+
     """
     def _apply(filter_, stream):
+        """
+
+        Parameters
+        ----------
+        filter_ :
+            
+        stream :
+            
+
+        Returns
+        -------
+
+        """
         yield from filter_.filter(lexer, stream)
     for filter_ in filters:
         stream = _apply(filter_, stream)
@@ -24,13 +49,21 @@
 
 
 def simplefilter(f):
-    """
-    Decorator that converts a function into a filter::
-
+    """Decorator that converts a function into a filter::
+    
         @simplefilter
         def lowercase(self, lexer, stream, options):
             for ttype, value in stream:
                 yield ttype, value.lower()
+
+    Parameters
+    ----------
+    f :
+        
+
+    Returns
+    -------
+
     """
     return type(f.__name__, (FunctionFilter,), {
         '__module__': getattr(f, '__module__'),
@@ -40,24 +73,49 @@
 
 
 class Filter:
-    """
-    Default filter. Subclass this class or use the `simplefilter`
+    """Default filter. Subclass this class or use the `simplefilter`
     decorator to create own filters.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, **options):
         self.options = options
 
     def filter(self, lexer, stream):
+        """
+
+        Parameters
+        ----------
+        lexer :
+            
+        stream :
+            
+
+        Returns
+        -------
+
+        """
         raise NotImplementedError()
 
 
 class FunctionFilter(Filter):
-    """
-    Abstract class used by `simplefilter` to create simple
+    """Abstract class used by `simplefilter` to create simple
     function filters on the fly. The `simplefilter` decorator
     automatically creates subclasses of this class for
     functions passed to it.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     function = None
 
@@ -68,5 +126,18 @@
         Filter.__init__(self, **options)
 
     def filter(self, lexer, stream):
+        """
+
+        Parameters
+        ----------
+        lexer :
+            
+        stream :
+            
+
+        Returns
+        -------
+
+        """
         # pylint: disable=not-callable
         yield from self.function(lexer, stream, self.options)
