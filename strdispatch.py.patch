# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/utils/strdispatch.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/utils/strdispatch.py
@@ -10,8 +10,14 @@
 # Code begins
 class StrDispatch(object):
     """Dispatch (lookup) a set of strings / regexps for match.
+    
+    Example:
 
-    Example:
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     >>> dis = StrDispatch()
     >>> dis.add_s('hei',34, priority = 4)
@@ -26,21 +32,59 @@
         self.regexs = {}
 
     def add_s(self, s, obj, priority= 0 ):
-        """ Adds a target 'string' for dispatching """
+        """Adds a target 'string' for dispatching
+
+        Parameters
+        ----------
+        s :
+            
+        obj :
+            
+        priority :
+             (Default value = 0)
+
+        Returns
+        -------
+
+        """
 
         chain = self.strs.get(s, CommandChainDispatcher())
         chain.add(obj,priority)
         self.strs[s] = chain
 
     def add_re(self, regex, obj, priority= 0 ):
-        """ Adds a target regexp for dispatching """
+        """Adds a target regexp for dispatching
+
+        Parameters
+        ----------
+        regex :
+            
+        obj :
+            
+        priority :
+             (Default value = 0)
+
+        Returns
+        -------
+
+        """
 
         chain = self.regexs.get(regex, CommandChainDispatcher())
         chain.add(obj,priority)
         self.regexs[regex] = chain
 
     def dispatch(self, key):
-        """ Get a seq of Commandchain objects that match key """
+        """Get a seq of Commandchain objects that match key
+
+        Parameters
+        ----------
+        key :
+            
+
+        Returns
+        -------
+
+        """
         if key in self.strs:
             yield self.strs[key]
 
@@ -55,13 +99,34 @@
         return "<Strdispatch %s, %s>" % (self.strs, self.regexs)
 
     def s_matches(self, key):
+        """
+
+        Parameters
+        ----------
+        key :
+            
+
+        Returns
+        -------
+
+        """
         if key not in self.strs:
              return
         for el in self.strs[key]:
             yield el[1]
 
     def flat_matches(self, key):
-        """ Yield all 'value' targets, without priority """
+        """Yield all 'value' targets, without priority
+
+        Parameters
+        ----------
+        key :
+            
+
+        Returns
+        -------
+
+        """
         for val in self.dispatch(key):
             for el in val:
                 yield el[1] # only value, no priority
