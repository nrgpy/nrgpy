# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/requests_toolbelt/adapters/x509.py
+++ b/..//venv/lib/python3.8/site-packages/requests_toolbelt/adapters/x509.py
@@ -33,52 +33,59 @@
 
 
 class X509Adapter(HTTPAdapter):
-    r"""Adapter for use with X.509 certificates.
-
+    """r"""Adapter for use with X.509 certificates.
+    
     Provides an interface for Requests sessions to contact HTTPS urls and
     authenticate  with an X.509 cert by implementing the Transport Adapter
     interface. This class will need to be manually instantiated and mounted
     to the session
 
-    :param pool_connections: The number of urllib3 connection pools to
-           cache.
-    :param pool_maxsize: The maximum number of connections to save in the
-            pool.
-    :param max_retries: The maximum number of retries each connection
+    Parameters
+    ----------
+    pool_connections :
+        The number of urllib3 connection pools to
+        cache.
+    pool_maxsize :
+        The maximum number of connections to save in the
+        pool.
+    max_retries :
+        The maximum number of retries each connection
         should attempt. Note, this applies only to failed DNS lookups,
         socket connections and connection timeouts, never to requests where
         data has made it to the server. By default, Requests does not retry
         failed connections. If you need granular control over the
         conditions under which we retry a request, import urllib3's
         ``Retry`` class and pass that instead.
-    :param pool_block: Whether the connection pool should block for
-            connections.
-
-    :param bytes cert_bytes:
+    pool_block :
+        Whether the connection pool should block for
+        connections.
+    bytes :
+        cert_bytes:
         bytes object containing contents of a cryptography.x509Certificate
         object using the encoding specified by the ``encoding`` parameter.
-    :param bytes pk_bytes:
+    bytes :
+        pk_bytes:
         bytes object containing contents of a object that implements
         ``cryptography.hazmat.primitives.serialization.PrivateFormat``
         using the encoding specified by the ``encoding`` parameter.
-    :param password:
+    password :
         string or utf8 encoded bytes containing the passphrase used for the
         private key. None if unencrypted. Defaults to None.
-    :param encoding:
+    encoding : class: `cryptography.hazmat.primitives.serialization.Encoding`
+
+Usage::
         Enumeration detailing the encoding method used on the ``cert_bytes``
         parameter. Can be either PEM or DER. Defaults to PEM.
-    :type encoding:
-        :class: `cryptography.hazmat.primitives.serialization.Encoding`
-
-    Usage::
-
-      >>> import requests
+
+    Returns
+    -------
+
+    >>> import requests
       >>> from requests_toolbelt.adapters.x509 import X509Adapter
       >>> s = requests.Session()
       >>> a = X509Adapter(max_retries=3,
                 cert_bytes=b'...', pk_bytes=b'...', encoding='...'
       >>> s.mount('https://', a)
-    """
 
     def __init__(self, *args, **kwargs):
         self._check_version()
@@ -109,16 +116,43 @@
         super(X509Adapter, self).__init__(*args, **kwargs)
 
     def init_poolmanager(self, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         if self.ssl_context:
             kwargs['ssl_context'] = self.ssl_context
         return super(X509Adapter, self).init_poolmanager(*args, **kwargs)
 
     def proxy_manager_for(self, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         if self.ssl_context:
             kwargs['ssl_context'] = self.ssl_context
         return super(X509Adapter, self).proxy_manager_for(*args, **kwargs)
 
     def _check_version(self):
+        """ """
         if PyOpenSSLContext is None:
             raise exc.VersionMismatchError(
                 "The X509Adapter requires at least Requests 2.12.0 to be "
@@ -129,7 +163,17 @@
 
 
 def check_cert_dates(cert):
-    """Verify that the supplied client cert is not invalid."""
+    """Verify that the supplied client cert is not invalid.
+
+    Parameters
+    ----------
+    cert :
+        
+
+    Returns
+    -------
+
+    """
 
     now = datetime.utcnow()
     if cert.not_valid_after < now or cert.not_valid_before > now:
@@ -143,17 +187,29 @@
                        encoding=Encoding.PEM):
     """Create an SSL Context with the supplied cert/password.
 
-    :param cert_bytes array of bytes containing the cert encoded
-           using the method supplied in the ``encoding`` parameter
-    :param pk_bytes array of bytes containing the private key encoded
-           using the method supplied in the ``encoding`` parameter
-    :param password array of bytes containing the passphrase to be used
-           with the supplied private key. None if unencrypted.
-           Defaults to None.
-    :param encoding ``cryptography.hazmat.primitives.serialization.Encoding``
-            details the encoding method used on the ``cert_bytes``  and
-            ``pk_bytes`` parameters. Can be either PEM or DER.
-            Defaults to PEM.
+    Parameters
+    ----------
+    cert_bytes :
+        array of bytes containing the cert encoded
+        using the method supplied in the ``encoding`` parameter
+    pk_bytes :
+        array of bytes containing the private key encoded
+        using the method supplied in the ``encoding`` parameter
+    password :
+        array of bytes containing the passphrase to be used
+        with the supplied private key. None if unencrypted.
+        Defaults to None.
+    encoding :
+        cryptography.hazmat.primitives.serialization.Encoding``
+        details the encoding method used on the ``cert_bytes``  and
+        ``pk_bytes`` parameters. Can be either PEM or DER.
+        Defaults to PEM.
+    cert_byes :
+        
+
+    Returns
+    -------
+
     """
     backend = default_backend()
 
