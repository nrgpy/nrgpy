# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/extensions/tests/test_autoreload.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/extensions/tests/test_autoreload.py
@@ -36,6 +36,7 @@
 noop = lambda *a, **kw: None
 
 class FakeShell:
+    """ """
 
     def __init__(self):
         self.ns = {}
@@ -48,17 +49,63 @@
     register_magics = set_hook = noop
 
     def run_code(self, code):
+        """
+
+        Parameters
+        ----------
+        code :
+            
+
+        Returns
+        -------
+
+        """
         self.events.trigger('pre_run_cell')
         exec(code, self.user_ns)
         self.auto_magics.post_execute_hook()
 
     def push(self, items):
+        """
+
+        Parameters
+        ----------
+        items :
+            
+
+        Returns
+        -------
+
+        """
         self.ns.update(items)
 
     def magic_autoreload(self, parameter):
+        """
+
+        Parameters
+        ----------
+        parameter :
+            
+
+        Returns
+        -------
+
+        """
         self.auto_magics.autoreload(parameter)
 
     def magic_aimport(self, parameter, stream=None):
+        """
+
+        Parameters
+        ----------
+        parameter :
+            
+        stream :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         self.auto_magics.aimport(parameter, stream=stream)
         self.auto_magics.post_execute_hook()
 
@@ -71,12 +118,14 @@
     filename_chars = "abcdefghijklmopqrstuvwxyz0123456789"
 
     def setUp(self):
+        """ """
         self.test_dir = tempfile.mkdtemp()
         self.old_sys_path = list(sys.path)
         sys.path.insert(0, self.test_dir)
         self.shell = FakeShell()
 
     def tearDown(self):
+        """ """
         shutil.rmtree(self.test_dir)
         sys.path = self.old_sys_path
 
@@ -85,6 +134,7 @@
         self.shell = None
 
     def get_module(self):
+        """ """
         module_name = "tmpmod_" + "".join(random.sample(self.filename_chars,20))
         if module_name in sys.modules:
             del sys.modules[module_name]
@@ -92,14 +142,23 @@
         return module_name, file_name
 
     def write_file(self, filename, content):
-        """
-        Write a file, and force a timestamp difference of at least one second
+        """Write a file, and force a timestamp difference of at least one second
+
+        Parameters
+        ----------
+        filename :
+            
+        content :
+            
+
+        Returns
+        -------
 
         Notes
         -----
         Python's .pyc files record the timestamp of their compilation
         with a time resolution of one second.
-
+        
         Therefore, we need to force a timestamp difference between .py
         and .pyc, without having the .py file be timestamped in the
         future, and without changing the timestamp of the .pyc file
@@ -115,6 +174,17 @@
             f.write(content)
 
     def new_module(self, code):
+        """
+
+        Parameters
+        ----------
+        code :
+            
+
+        Returns
+        -------
+
+        """
         code = textwrap.dedent(code)
         mod_name, mod_fn = self.get_module()
         with open(mod_fn, 'w') as f:
@@ -126,8 +196,16 @@
 #-----------------------------------------------------------------------------
 
 def pickle_get_current_class(obj):
-    """
-    Original issue comes from pickle; hence the name.
+    """Original issue comes from pickle; hence the name.
+
+    Parameters
+    ----------
+    obj :
+        
+
+    Returns
+    -------
+
     """
     name = obj.__class__.__name__
     module_name = getattr(obj, "__module__", None)
@@ -137,19 +215,27 @@
     return obj2
 
 class TestAutoreload(Fixture):
+    """ """
 
     def test_reload_enums(self):
-        mod_name, mod_fn = self.new_module(textwrap.dedent("""
+        """mod_name, mod_fn = self.new_module(textwrap.dedent("""
                                 from enum import Enum
                                 class MyEnum(Enum):
                                     A = 'A'
                                     B = 'B'
                             """))
+
+        Parameters
+        ----------
+
+        Returns
+        -------
         self.shell.magic_autoreload("2")
         self.shell.magic_aimport(mod_name)
         self.write_file(mod_fn, textwrap.dedent("""
                                 from enum import Enum
                                 class MyEnum(Enum):
+                                    """ """
                                     A = 'A'
                                     B = 'B'
                                     C = 'C'
@@ -158,11 +244,14 @@
             self.shell.run_code("pass")  # trigger another reload
 
     def test_reload_class_type(self):
+        """ """
         self.shell.magic_autoreload("2")
         mod_name, mod_fn = self.new_module(
             """
             class Test():
+                """ """
                 def meth(self):
+                    """ """
                     return "old"
         """
         )
@@ -176,7 +265,9 @@
             mod_fn,
             """
             class Test():
+                """ """
                 def meth(self):
+                    """ """
                     return "new"
         """,
         )
@@ -194,9 +285,11 @@
         self.shell.run_code("p = pickle.dumps(test)")
 
     def test_reload_class_attributes(self):
+        """ """
         self.shell.magic_autoreload("2")
         mod_name, mod_fn = self.new_module(textwrap.dedent("""
                                 class MyClass:
+                                    """ """
 
                                     def __init__(self, a=10):
                                         self.a = a
@@ -204,6 +297,7 @@
                                         # self.toto = 33
 
                                     def square(self):
+                                        """ """
                                         print('compute square')
                                         return self.a*self.a
                             """
@@ -227,12 +321,24 @@
             textwrap.dedent(
                 """
                             class MyClass:
+                                """ """
 
                                 def __init__(self, a=10):
                                     self.a = a
                                     self.b = 11
 
                                 def power(self, p):
+                                    """
+
+                                    Parameters
+                                    ----------
+                                    p :
+                                        
+
+                                    Returns
+                                    -------
+
+                                    """
                                     print('compute power '+str(p))
                                     return self.a**p
                             """
@@ -253,9 +359,17 @@
                 self.shell.run_code("{object_name}.toto".format(object_name=object_name))
 
     def _check_smoketest(self, use_aimport=True):
-        """
-        Functional test for the automatic reloader using either
+        """Functional test for the automatic reloader using either
         '%autoreload 1' or '%autoreload 2'
+
+        Parameters
+        ----------
+        use_aimport :
+             (Default value = True)
+
+        Returns
+        -------
+
         """
 
         mod_name, mod_fn = self.new_module("""
@@ -264,22 +378,47 @@
 z = 123  # this item will be deleted
 
 def foo(y):
+    """
+
+    Parameters
+    ----------
+    y :
+        
+
+    Returns
+    -------
+
+    """
     return y + 3
 
 class Baz(object):
+    """ """
     def __init__(self, x):
         self.x = x
     def bar(self, y):
+        """
+
+        Parameters
+        ----------
+        y :
+            
+
+        Returns
+        -------
+
+        """
         return self.x + y
     @property
     def quux(self):
+        """ """
         return 42
     def zzz(self):
-        '''This method will be deleted below'''
+        """This method will be deleted below"""
         return 99
 
 class Bar:    # old-style class: weakref doesn't work for it on Python < 2.7
     def foo(self):
+    """ """
         return 1
 """)
 
@@ -314,6 +453,7 @@
         old_obj2 = mod.Bar()
 
         def check_module_contents():
+            """ """
             nt.assert_equal(mod.x, 9)
             nt.assert_equal(mod.z, 123)
 
@@ -353,23 +493,50 @@
 x = 10
 
 def foo(y):
+    """
+
+    Parameters
+    ----------
+    y :
+        
+
+    Returns
+    -------
+
+    """
     return y + 4
 
 class Baz(object):
+    """ """
     def __init__(self, x):
         self.x = x
     def bar(self, y):
+        """
+
+        Parameters
+        ----------
+        y :
+            
+
+        Returns
+        -------
+
+        """
         return self.x + y + 1
     @property
     def quux(self):
+        """ """
         return 43
 
 class Bar:    # old-style class
+    """ """
     def foo(self):
+        """ """
         return 2
 """)
 
         def check_module_contents():
+            """ """
             nt.assert_equal(mod.x, 10)
             nt.assert_false(hasattr(mod, 'z'))
 
@@ -436,9 +603,11 @@
         nt.assert_equal(mod.x, -99)
 
     def test_smoketest_aimport(self):
+        """ """
         self._check_smoketest(use_aimport=True)
 
     def test_smoketest_autoreload(self):
+        """ """
         self._check_smoketest(use_aimport=False)
 
 
