# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/utils/timing.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/utils/timing.py
@@ -26,35 +26,64 @@
     def clocku():
         """clocku() -> floating point number
 
-        Return the *USER* CPU time in seconds since the start of the process.
-        This is done via a call to resource.getrusage, so it avoids the
-        wraparound problems in time.clock()."""
+        Parameters
+        ----------
+
+        Returns
+        -------
+        type
+            This is done via a call to resource.getrusage, so it avoids the
+            wraparound problems in time.clock().
+
+        """
 
         return resource.getrusage(resource.RUSAGE_SELF)[0]
 
     def clocks():
         """clocks() -> floating point number
 
-        Return the *SYSTEM* CPU time in seconds since the start of the process.
-        This is done via a call to resource.getrusage, so it avoids the
-        wraparound problems in time.clock()."""
+        Parameters
+        ----------
+
+        Returns
+        -------
+        type
+            This is done via a call to resource.getrusage, so it avoids the
+            wraparound problems in time.clock().
+
+        """
 
         return resource.getrusage(resource.RUSAGE_SELF)[1]
 
     def clock():
         """clock() -> floating point number
 
-        Return the *TOTAL USER+SYSTEM* CPU time in seconds since the start of
-        the process.  This is done via a call to resource.getrusage, so it
-        avoids the wraparound problems in time.clock()."""
+        Parameters
+        ----------
+
+        Returns
+        -------
+        type
+            the process.  This is done via a call to resource.getrusage, so it
+            avoids the wraparound problems in time.clock().
+
+        """
 
         u,s = resource.getrusage(resource.RUSAGE_SELF)[:2]
         return u+s
 
     def clock2():
         """clock2() -> (t_user,t_system)
+        
+        Similar to clock(), but return a tuple of user/system times.
 
-        Similar to clock(), but return a tuple of user/system times."""
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         return resource.getrusage(resource.RUSAGE_SELF)[:2]
 except ImportError:
     # There is no distinction of user/system time under windows, so we just use
@@ -62,23 +91,47 @@
     clocku = clocks = clock = time.perf_counter
     def clock2():
         """Under windows, system CPU time can't be measured.
+        
+        This just returns perf_counter() and zero.
 
-        This just returns perf_counter() and zero."""
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         return time.perf_counter(),0.0
 
     
 def timings_out(reps,func,*args,**kw):
     """timings_out(reps,func,*args,**kw) -> (t_total,t_per_call,output)
-
+    
     Execute a function reps times, return a tuple with the elapsed total
     CPU time in seconds, the time per call and the function's output.
-
+    
     Under Unix, the return value is the sum of user+system time consumed by
     the process, computed via the resource module.  This prevents problems
     related to the wraparound effect which the time.clock() function has.
+    
+    Under Windows the return value is in wall clock seconds. See the
+    documentation for the time module for more details.
 
-    Under Windows the return value is in wall clock seconds. See the
-    documentation for the time module for more details."""
+    Parameters
+    ----------
+    reps :
+        
+    func :
+        
+    *args :
+        
+    **kw :
+        
+
+    Returns
+    -------
+
+    """
 
     reps = int(reps)
     assert reps >=1, 'reps must be >= 1'
@@ -98,19 +151,49 @@
 
 def timings(reps,func,*args,**kw):
     """timings(reps,func,*args,**kw) -> (t_total,t_per_call)
-
+    
     Execute a function reps times, return a tuple with the elapsed total CPU
     time in seconds and the time per call. These are just the first two values
-    in timings_out()."""
+    in timings_out().
+
+    Parameters
+    ----------
+    reps :
+        
+    func :
+        
+    *args :
+        
+    **kw :
+        
+
+    Returns
+    -------
+
+    """
 
     return timings_out(reps,func,*args,**kw)[0:2]
 
 
 def timing(func,*args,**kw):
     """timing(func,*args,**kw) -> t_total
+    
+    Execute a function once, return the elapsed total CPU time in
+    seconds. This is just the first value in timings_out().
 
-    Execute a function once, return the elapsed total CPU time in
-    seconds. This is just the first value in timings_out()."""
+    Parameters
+    ----------
+    func :
+        
+    *args :
+        
+    **kw :
+        
+
+    Returns
+    -------
+
+    """
 
     return timings_out(1,func,*args,**kw)[0]
 
