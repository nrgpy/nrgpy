# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/parso/python/pep8.py
+++ b/..//venv/lib/python3.8/site-packages/parso/python/pep8.py
@@ -25,6 +25,7 @@
 
 
 class IndentationTypes(object):
+    """ """
     VERTICAL_BRACKET = object()
     HANGING_BRACKET = object()
     BACKSLASH = object()
@@ -33,6 +34,7 @@
 
 
 class IndentationNode(object):
+    """ """
     type = IndentationTypes.SUITE
 
     def __init__(self, config, indentation, parent=None):
@@ -43,6 +45,7 @@
         return '<%s>' % self.__class__.__name__
 
     def get_latest_suite_node(self):
+        """ """
         n = self
         while n is not None:
             if n.type == IndentationTypes.SUITE:
@@ -52,6 +55,7 @@
 
 
 class BracketNode(IndentationNode):
+    """ """
     def __init__(self, config, leaf, parent, in_suite_introducer=False):
         self.leaf = leaf
 
@@ -106,9 +110,15 @@
 
 
 class ImplicitNode(BracketNode):
-    """
-    Implicit indentation after keyword arguments, default arguments,
+    """Implicit indentation after keyword arguments, default arguments,
     annotations and dict values.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     def __init__(self, config, leaf, parent):
         super(ImplicitNode, self).__init__(config, leaf, parent)
@@ -120,6 +130,7 @@
 
 
 class BackslashNode(IndentationNode):
+    """ """
     type = IndentationTypes.BACKSLASH
 
     def __init__(self, config, parent_indentation, containing_leaf, spacing, parent=None):
@@ -145,10 +156,22 @@
 
 
 def _is_magic_name(name):
+    """
+
+    Parameters
+    ----------
+    name :
+        
+
+    Returns
+    -------
+
+    """
     return name.value.startswith('__') and name.value.endswith('__')
 
 
 class PEP8Normalizer(ErrorFinder):
+    """ """
     def __init__(self, *args, **kwargs):
         super(PEP8Normalizer, self).__init__(*args, **kwargs)
         self._previous_part = None
@@ -173,12 +196,34 @@
 
     @contextmanager
     def visit_node(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         with super(PEP8Normalizer, self).visit_node(node):
             with self._visit_node(node):
                 yield
 
     @contextmanager
     def _visit_node(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         typ = node.type
 
         if typ in 'import_name':
@@ -280,16 +325,43 @@
                 self._wanted_newline_count = self._get_wanted_blank_lines_count()
 
     def _check_tabs_spaces(self, spacing):
+        """
+
+        Parameters
+        ----------
+        spacing :
+            
+
+        Returns
+        -------
+
+        """
         if self._wrong_indentation_char in spacing.value:
             self.add_issue(spacing, 101, 'Indentation contains ' + self._indentation_type)
             return True
         return False
 
     def _get_wanted_blank_lines_count(self):
+        """ """
         suite_node = self._indentation_tos.get_latest_suite_node()
         return int(suite_node.parent is None) + 1
 
     def _reset_newlines(self, spacing, leaf, is_comment=False):
+        """
+
+        Parameters
+        ----------
+        spacing :
+            
+        leaf :
+            
+        is_comment :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         self._max_new_lines_in_prefix = \
             max(self._max_new_lines_in_prefix, self._newline_count)
 
@@ -341,6 +413,17 @@
         self._newline_count = 0
 
     def visit_leaf(self, leaf):
+        """
+
+        Parameters
+        ----------
+        leaf :
+            
+
+        Returns
+        -------
+
+        """
         super(PEP8Normalizer, self).visit_leaf(leaf)
         for part in leaf._split_prefix():
             if part.type == 'spacing':
@@ -375,6 +458,21 @@
         return leaf.value
 
     def _visit_part(self, part, spacing, leaf):
+        """
+
+        Parameters
+        ----------
+        part :
+            
+        spacing :
+            
+        leaf :
+            
+
+        Returns
+        -------
+
+        """
         value = part.value
         type_ = part.type
         if type_ == 'error_leaf':
@@ -519,6 +617,19 @@
         self._previous_spacing = spacing
 
     def _check_line_length(self, part, spacing):
+        """
+
+        Parameters
+        ----------
+        part :
+            
+        spacing :
+            
+
+        Returns
+        -------
+
+        """
         if part.type == 'backslash':
             last_column = part.start_pos[1] + 1
         else:
@@ -542,11 +653,46 @@
                 )
 
     def _check_spacing(self, part, spacing):
+        """
+
+        Parameters
+        ----------
+        part :
+            
+        spacing :
+            
+
+        Returns
+        -------
+
+        """
         def add_if_spaces(*args):
+            """
+
+            Parameters
+            ----------
+            *args :
+                
+
+            Returns
+            -------
+
+            """
             if spaces:
                 return self.add_issue(*args)
 
         def add_not_spaces(*args):
+            """
+
+            Parameters
+            ----------
+            *args :
+                
+
+            Returns
+            -------
+
+            """
             if not spaces:
                 return self.add_issue(*args)
 
@@ -629,6 +775,17 @@
                         add_if_spaces(spacing, 211, message)
 
     def _analyse_non_prefix(self, leaf):
+        """
+
+        Parameters
+        ----------
+        leaf :
+            
+
+        Returns
+        -------
+
+        """
         typ = leaf.type
         if typ == 'name' and leaf.value in ('l', 'O', 'I'):
             if leaf.is_definition():
@@ -685,6 +842,21 @@
                 self.add_issue(leaf, 391, 'Blank line at end of file')
 
     def add_issue(self, node, code, message):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+        code :
+            
+        message :
+            
+
+        Returns
+        -------
+
+        """
         if self._previous_leaf is not None:
             if search_ancestor(self._previous_leaf, 'error_node') is not None:
                 return
@@ -701,6 +873,7 @@
 
 
 class PEP8NormalizerConfig(ErrorFinderConfig):
+    """ """
     normalizer_class = PEP8Normalizer
     """
     Normalizing to PEP8. Not really implemented, yet.
@@ -720,8 +893,20 @@
 # TODO this is not yet ready.
 #@PEP8Normalizer.register_rule(type='endmarker')
 class BlankLineAtEnd(Rule):
+    """ """
     code = 392
     message = 'Blank line at end of file'
 
     def is_issue(self, leaf):
+        """
+
+        Parameters
+        ----------
+        leaf :
+            
+
+        Returns
+        -------
+
+        """
         return self._newline_count >= 2
