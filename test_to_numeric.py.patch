# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/tools/test_to_numeric.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/tools/test_to_numeric.py
@@ -11,26 +11,81 @@
 
 @pytest.fixture(params=[None, "ignore", "raise", "coerce"])
 def errors(request):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     return request.param
 
 
 @pytest.fixture(params=[True, False])
 def signed(request):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     return request.param
 
 
 @pytest.fixture(params=[lambda x: x, str], ids=["identity", "str"])
 def transform(request):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     return request.param
 
 
 @pytest.fixture(params=[47393996303418497800, 100000000000000000000])
 def large_val(request):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     return request.param
 
 
 @pytest.fixture(params=[True, False])
 def multiple_elts(request):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     return request.param
 
 
@@ -42,6 +97,17 @@
     ]
 )
 def transform_assert_equal(request):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     return request.param
 
 
@@ -53,6 +119,19 @@
     ],
 )
 def test_empty(input_kwargs, result_kwargs):
+    """
+
+    Parameters
+    ----------
+    input_kwargs :
+        
+    result_kwargs :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-16302
     ser = Series([], dtype=object)
     result = to_numeric(ser, **input_kwargs)
@@ -63,6 +142,17 @@
 
 @pytest.mark.parametrize("last_val", ["7", 7])
 def test_series(last_val):
+    """
+
+    Parameters
+    ----------
+    last_val :
+        
+
+    Returns
+    -------
+
+    """
     ser = Series(["1", "-3.14", last_val])
     result = to_numeric(ser)
 
@@ -80,6 +170,17 @@
     ],
 )
 def test_series_numeric(data):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+
+    Returns
+    -------
+
+    """
     ser = Series(data, index=list("ABCD"), name="EFG")
 
     result = to_numeric(ser)
@@ -97,6 +198,19 @@
     ],
 )
 def test_error(data, msg):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+    msg :
+        
+
+    Returns
+    -------
+
+    """
     ser = Series(data)
 
     with pytest.raises(ValueError, match=msg):
@@ -107,6 +221,19 @@
     "errors,exp_data", [("ignore", [1, -3.14, "apple"]), ("coerce", [1, -3.14, np.nan])]
 )
 def test_ignore_error(errors, exp_data):
+    """
+
+    Parameters
+    ----------
+    errors :
+        
+    exp_data :
+        
+
+    Returns
+    -------
+
+    """
     ser = Series([1, -3.14, "apple"])
     result = to_numeric(ser, errors=errors)
 
@@ -124,6 +251,19 @@
     ],
 )
 def test_bool_handling(errors, exp):
+    """
+
+    Parameters
+    ----------
+    errors :
+        
+    exp :
+        
+
+    Returns
+    -------
+
+    """
     ser = Series([True, False, "apple"])
 
     if isinstance(exp, str):
@@ -137,6 +277,7 @@
 
 
 def test_list():
+    """ """
     ser = ["1", "-3.14", "7"]
     res = to_numeric(ser)
 
@@ -154,6 +295,19 @@
     ],
 )
 def test_list_numeric(data, arr_kwargs):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+    arr_kwargs :
+        
+
+    Returns
+    -------
+
+    """
     result = to_numeric(data)
     expected = np.array(data, **arr_kwargs)
     tm.assert_numpy_array_equal(result, expected)
@@ -161,6 +315,17 @@
 
 @pytest.mark.parametrize("kwargs", [dict(dtype="O"), dict()])
 def test_numeric(kwargs):
+    """
+
+    Parameters
+    ----------
+    kwargs :
+        
+
+    Returns
+    -------
+
+    """
     data = [1, -3.14, 7]
 
     ser = Series(data, **kwargs)
@@ -180,6 +345,17 @@
     ],
 )
 def test_numeric_df_columns(columns):
+    """
+
+    Parameters
+    ----------
+    columns :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-14827
     df = DataFrame(
         dict(
@@ -207,6 +383,19 @@
     ],
 )
 def test_numeric_embedded_arr_likes(data, exp_data):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+    exp_data :
+        
+
+    Returns
+    -------
+
+    """
     # Test to_numeric with embedded lists and arrays
     df = DataFrame(dict(a=data))
     df["a"] = df["a"].apply(to_numeric)
@@ -216,6 +405,7 @@
 
 
 def test_all_nan():
+    """ """
     ser = Series(["a", "b", "c"])
     result = to_numeric(ser, errors="coerce")
 
@@ -224,6 +414,17 @@
 
 
 def test_type_check(errors):
+    """
+
+    Parameters
+    ----------
+    errors :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-11776
     df = DataFrame({"a": [1, -3.14, 7], "b": ["4", "5", "6"]})
     kwargs = dict(errors=errors) if errors is not None else dict()
@@ -235,11 +436,43 @@
 
 @pytest.mark.parametrize("val", [1, 1.1, 20001])
 def test_scalar(val, signed, transform):
+    """
+
+    Parameters
+    ----------
+    val :
+        
+    signed :
+        
+    transform :
+        
+
+    Returns
+    -------
+
+    """
     val = -val if signed else val
     assert to_numeric(transform(val)) == float(val)
 
 
 def test_really_large_scalar(large_val, signed, transform, errors):
+    """
+
+    Parameters
+    ----------
+    large_val :
+        
+    signed :
+        
+    transform :
+        
+    errors :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-24910
     kwargs = dict(errors=errors) if errors is not None else dict()
     val = -large_val if signed else large_val
@@ -257,6 +490,25 @@
 
 
 def test_really_large_in_arr(large_val, signed, transform, multiple_elts, errors):
+    """
+
+    Parameters
+    ----------
+    large_val :
+        
+    signed :
+        
+    transform :
+        
+    multiple_elts :
+        
+    errors :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-24910
     kwargs = dict(errors=errors) if errors is not None else dict()
     val = -large_val if signed else large_val
@@ -296,6 +548,23 @@
 
 
 def test_really_large_in_arr_consistent(large_val, signed, multiple_elts, errors):
+    """
+
+    Parameters
+    ----------
+    large_val :
+        
+    signed :
+        
+    multiple_elts :
+        
+    errors :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-24910
     #
     # Even if we discover that we have to hold float, does not mean
@@ -334,6 +603,19 @@
     ],
 )
 def test_scalar_fail(errors, checker):
+    """
+
+    Parameters
+    ----------
+    errors :
+        
+    checker :
+        
+
+    Returns
+    -------
+
+    """
     scalar = "fail"
 
     if isinstance(checker, str):
@@ -345,6 +627,19 @@
 
 @pytest.mark.parametrize("data", [[1, 2, 3], [1.0, np.nan, 3, np.nan]])
 def test_numeric_dtypes(data, transform_assert_equal):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+    transform_assert_equal :
+        
+
+    Returns
+    -------
+
+    """
     transform, assert_equal = transform_assert_equal
     data = transform(data)
 
@@ -360,6 +655,21 @@
     ],
 )
 def test_str(data, exp, transform_assert_equal):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+    exp :
+        
+    transform_assert_equal :
+        
+
+    Returns
+    -------
+
+    """
     transform, assert_equal = transform_assert_equal
     result = to_numeric(transform(data))
 
@@ -368,6 +678,19 @@
 
 
 def test_datetime_like(tz_naive_fixture, transform_assert_equal):
+    """
+
+    Parameters
+    ----------
+    tz_naive_fixture :
+        
+    transform_assert_equal :
+        
+
+    Returns
+    -------
+
+    """
     transform, assert_equal = transform_assert_equal
     idx = pd.date_range("20130101", periods=3, tz=tz_naive_fixture)
 
@@ -377,6 +700,17 @@
 
 
 def test_timedelta(transform_assert_equal):
+    """
+
+    Parameters
+    ----------
+    transform_assert_equal :
+        
+
+    Returns
+    -------
+
+    """
     transform, assert_equal = transform_assert_equal
     idx = pd.timedelta_range("1 days", periods=3, freq="D")
 
@@ -386,6 +720,17 @@
 
 
 def test_period(transform_assert_equal):
+    """
+
+    Parameters
+    ----------
+    transform_assert_equal :
+        
+
+    Returns
+    -------
+
+    """
     transform, assert_equal = transform_assert_equal
 
     idx = pd.period_range("2011-01", periods=3, freq="M", name="")
@@ -409,6 +754,19 @@
     ],
 )
 def test_non_hashable(errors, expected):
+    """
+
+    Parameters
+    ----------
+    errors :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-13324
     ser = Series([[10.0, 2], 1.0, "apple"])
 
@@ -421,6 +779,7 @@
 
 
 def test_downcast_invalid_cast():
+    """ """
     # see gh-13352
     data = ["1", 2, 3]
     invalid_downcast = "unsigned-integer"
@@ -431,6 +790,7 @@
 
 
 def test_errors_invalid_value():
+    """ """
     # see gh-26466
     data = ["1", 2, 3]
     invalid_error_value = "invalid"
@@ -461,6 +821,21 @@
     ],
 )
 def test_downcast_basic(data, kwargs, exp_dtype):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+    kwargs :
+        
+    exp_dtype :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-13352
     result = to_numeric(data, **kwargs)
     expected = np.array([1, 2, 3], dtype=exp_dtype)
@@ -477,6 +852,19 @@
     ],
 )
 def test_signed_downcast(data, signed_downcast):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+    signed_downcast :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-13352
     smallest_int_dtype = np.dtype(np.typecodes["Integer"][0])
     expected = np.array([1, 2, 3], dtype=smallest_int_dtype)
@@ -486,6 +874,7 @@
 
 
 def test_ignore_downcast_invalid_data():
+    """ """
     # If we can't successfully cast the given
     # data to a numeric dtype, do not bother
     # with the downcast parameter.
@@ -497,6 +886,7 @@
 
 
 def test_ignore_downcast_neg_to_unsigned():
+    """ """
     # Cannot cast to an unsigned integer
     # because we have a negative number.
     data = ["-1", 2, 3]
@@ -520,6 +910,21 @@
     ],
 )
 def test_ignore_downcast_cannot_convert_float(data, expected, downcast):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+    expected :
+        
+    downcast :
+        
+
+    Returns
+    -------
+
+    """
     # Cannot cast to an integer (signed or unsigned)
     # because we have a float number.
     res = to_numeric(data, downcast=downcast)
@@ -531,6 +936,19 @@
     [("integer", np.int16), ("signed", np.int16), ("unsigned", np.uint16)],
 )
 def test_downcast_not8bit(downcast, expected_dtype):
+    """
+
+    Parameters
+    ----------
+    downcast :
+        
+    expected_dtype :
+        
+
+    Returns
+    -------
+
+    """
     # the smallest integer dtype need not be np.(u)int8
     data = ["256", 257, 258]
 
@@ -562,6 +980,21 @@
     ],
 )
 def test_downcast_limits(dtype, downcast, min_max):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+    downcast :
+        
+    min_max :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-14404: test the limits of each downcast.
     series = to_numeric(Series(min_max), downcast=downcast)
     assert series.dtype == dtype
@@ -577,6 +1010,19 @@
     ],
 )
 def test_downcast_uint64(ser, expected):
+    """
+
+    Parameters
+    ----------
+    ser :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-14422:
     # BUG: to_numeric doesn't work uint64 numbers
 
@@ -599,6 +1045,19 @@
     ],
 )
 def test_coerce_uint64_conflict(data, exp_data):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+    exp_data :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-17007 and gh-17125
     #
     # Still returns float despite the uint64-nan conflict,
@@ -616,6 +1075,19 @@
     ],
 )
 def test_non_coerce_uint64_conflict(errors, exp):
+    """
+
+    Parameters
+    ----------
+    errors :
+        
+    exp :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-17007 and gh-17125
     #
     # For completeness.
@@ -632,6 +1104,19 @@
 @pytest.mark.parametrize("dc1", ["integer", "float", "unsigned"])
 @pytest.mark.parametrize("dc2", ["integer", "float", "unsigned"])
 def test_downcast_empty(dc1, dc2):
+    """
+
+    Parameters
+    ----------
+    dc1 :
+        
+    dc2 :
+        
+
+    Returns
+    -------
+
+    """
     # GH32493
 
     tm.assert_numpy_array_equal(
@@ -642,6 +1127,7 @@
 
 
 def test_failure_to_convert_uint64_string_to_NaN():
+    """ """
     # GH 32394
     result = to_numeric("uint64", errors="coerce")
     assert np.isnan(result)
