# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/lib/ufunclike.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/lib/ufunclike.py
@@ -14,13 +14,36 @@
 
 
 def _deprecate_out_named_y(f):
-    """
-    Allow the out argument to be passed as the name `y` (deprecated)
-
+    """Allow the out argument to be passed as the name `y` (deprecated)
+    
     In future, this decorator should be removed.
+
+    Parameters
+    ----------
+    f :
+        
+
+    Returns
+    -------
+
     """
     @functools.wraps(f)
     def func(x, out=None, **kwargs):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+        out :
+             (Default value = None)
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         if 'y' in kwargs:
             if 'out' in kwargs:
                 raise TypeError(
@@ -39,14 +62,37 @@
 
 
 def _fix_out_named_y(f):
-    """
-    Allow the out argument to be passed as the name `y` (deprecated)
-
+    """Allow the out argument to be passed as the name `y` (deprecated)
+    
     This decorator should only be used if _deprecate_out_named_y is used on
     a corresponding dispatcher function.
+
+    Parameters
+    ----------
+    f :
+        
+
+    Returns
+    -------
+
     """
     @functools.wraps(f)
     def func(x, out=None, **kwargs):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+        out :
+             (Default value = None)
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         if 'y' in kwargs:
             # we already did error checking in _deprecate_out_named_y
             out = kwargs.pop('y')
@@ -56,8 +102,16 @@
 
 
 def _fix_and_maybe_deprecate_out_named_y(f):
-    """
-    Use the appropriate decorator, depending upon if dispatching is being used.
+    """Use the appropriate decorator, depending upon if dispatching is being used.
+
+    Parameters
+    ----------
+    f :
+        
+
+    Returns
+    -------
+
     """
     if ARRAY_FUNCTION_ENABLED:
         return _fix_out_named_y(f)
@@ -67,15 +121,27 @@
 
 @_deprecate_out_named_y
 def _dispatcher(x, out=None):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+    out :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (x, out)
 
 
 @array_function_dispatch(_dispatcher, verify=False, module='numpy')
 @_fix_and_maybe_deprecate_out_named_y
 def fix(x, out=None):
-    """
-    Round to nearest integer towards zero.
-
+    """Round to nearest integer towards zero.
+    
     Round an array of floats element-wise to nearest integer towards zero.
     The rounded values are returned as floats.
 
@@ -86,7 +152,7 @@
     out : ndarray, optional
         A location into which the result is stored. If provided, it must have
         a shape that the input broadcasts to. If not provided or None, a
-        freshly-allocated array is returned.
+        freshly-allocated array is returned. (Default value = None)
 
     Returns
     -------
@@ -94,7 +160,6 @@
         A float array with the same dimensions as the input.
         If second argument is not supplied then a float array is returned
         with the rounded values.
-
         If a second argument is supplied the result is stored there.
         The return value `out` is then a reference to that array.
 
@@ -102,7 +167,6 @@
     --------
     trunc, floor, ceil
     around : Round to given number of decimals
-
     Examples
     --------
     >>> np.fix(3.14)
@@ -111,7 +175,6 @@
     3.0
     >>> np.fix([2.1, 2.9, -2.1, -2.9])
     array([ 2.,  2., -2., -2.])
-
     """
     # promote back to an array if flattened
     res = nx.asanyarray(nx.ceil(x, out=out))
@@ -127,8 +190,7 @@
 @array_function_dispatch(_dispatcher, verify=False, module='numpy')
 @_fix_and_maybe_deprecate_out_named_y
 def isposinf(x, out=None):
-    """
-    Test element-wise for positive infinity, return result as bool array.
+    """Test element-wise for positive infinity, return result as bool array.
 
     Parameters
     ----------
@@ -137,7 +199,7 @@
     out : array_like, optional
         A location into which the result is stored. If provided, it must have a
         shape that the input broadcasts to. If not provided or None, a
-        freshly-allocated boolean array is returned.
+        freshly-allocated boolean array is returned. (Default value = None)
 
     Returns
     -------
@@ -147,7 +209,6 @@
         with values True where the corresponding element of the input is
         positive infinity and values False where the element of the input is
         not positive infinity.
-
         If a second argument is supplied the result is stored there. If the
         type of that array is a numeric type the result is represented as zeros
         and ones, if the type is boolean then as False and True.
@@ -156,16 +217,14 @@
     See Also
     --------
     isinf, isneginf, isfinite, isnan
-
     Notes
     -----
     NumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic
     (IEEE 754).
-
+    
     Errors result if the second argument is also supplied when x is a scalar
     input, if first and second arguments have different shapes, or if the
     first argument has complex values
-
     Examples
     --------
     >>> np.isposinf(np.PINF)
@@ -176,14 +235,13 @@
     False
     >>> np.isposinf([-np.inf, 0., np.inf])
     array([False, False,  True])
-
+    
     >>> x = np.array([-np.inf, 0., np.inf])
     >>> y = np.array([2, 2, 2])
     >>> np.isposinf(x, y)
     array([0, 0, 1])
     >>> y
     array([0, 0, 1])
-
     """
     is_inf = nx.isinf(x)
     try:
@@ -198,8 +256,7 @@
 @array_function_dispatch(_dispatcher, verify=False, module='numpy')
 @_fix_and_maybe_deprecate_out_named_y
 def isneginf(x, out=None):
-    """
-    Test element-wise for negative infinity, return result as bool array.
+    """Test element-wise for negative infinity, return result as bool array.
 
     Parameters
     ----------
@@ -208,7 +265,7 @@
     out : array_like, optional
         A location into which the result is stored. If provided, it must have a
         shape that the input broadcasts to. If not provided or None, a
-        freshly-allocated boolean array is returned.
+        freshly-allocated boolean array is returned. (Default value = None)
 
     Returns
     -------
@@ -218,7 +275,6 @@
         returned with values True where the corresponding element of the
         input is negative infinity and values False where the element of
         the input is not negative infinity.
-
         If a second argument is supplied the result is stored there. If the
         type of that array is a numeric type the result is represented as
         zeros and ones, if the type is boolean then as False and True. The
@@ -227,16 +283,14 @@
     See Also
     --------
     isinf, isposinf, isnan, isfinite
-
     Notes
     -----
     NumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic
     (IEEE 754).
-
+    
     Errors result if the second argument is also supplied when x is a scalar
     input, if first and second arguments have different shapes, or if the
     first argument has complex values.
-
     Examples
     --------
     >>> np.isneginf(np.NINF)
@@ -247,14 +301,13 @@
     False
     >>> np.isneginf([-np.inf, 0., np.inf])
     array([ True, False, False])
-
+    
     >>> x = np.array([-np.inf, 0., np.inf])
     >>> y = np.array([2, 2, 2])
     >>> np.isneginf(x, y)
     array([1, 0, 0])
     >>> y
     array([1, 0, 0])
-
     """
     is_inf = nx.isinf(x)
     try:
