# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/parser/test_parse_dates.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/parser/test_parse_dates.py
@@ -36,6 +36,17 @@
 
 
 def test_separator_date_conflict(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # Regression test for gh-4678
     #
     # Make sure thousands separator and
@@ -58,28 +69,39 @@
 
 @pytest.mark.parametrize("keep_date_col", [True, False])
 def test_multiple_date_col_custom(all_parsers, keep_date_col):
-    data = """\
-KORD,19990127, 19:00:00, 18:56:00, 0.8100, 2.8100, 7.2000, 0.0000, 280.0000
-KORD,19990127, 20:00:00, 19:56:00, 0.0100, 2.2100, 7.2000, 0.0000, 260.0000
-KORD,19990127, 21:00:00, 20:56:00, -0.5900, 2.2100, 5.7000, 0.0000, 280.0000
-KORD,19990127, 21:00:00, 21:18:00, -0.9900, 2.0100, 3.6000, 0.0000, 270.0000
-KORD,19990127, 22:00:00, 21:56:00, -0.5900, 1.7100, 5.1000, 0.0000, 290.0000
-KORD,19990127, 23:00:00, 22:56:00, -0.5900, 1.7100, 4.6000, 0.0000, 280.0000
-"""
+    """data = """\
+    KORD,19990127, 19:00:00, 18:56:00, 0.8100, 2.8100, 7.2000, 0.0000, 280.0000
+    KORD,19990127, 20:00:00, 19:56:00, 0.0100, 2.2100, 7.2000, 0.0000, 260.0000
+    KORD,19990127, 21:00:00, 20:56:00, -0.5900, 2.2100, 5.7000, 0.0000, 280.0000
+    KORD,19990127, 21:00:00, 21:18:00, -0.9900, 2.0100, 3.6000, 0.0000, 270.0000
+    KORD,19990127, 22:00:00, 21:56:00, -0.5900, 1.7100, 5.1000, 0.0000, 290.0000
+    KORD,19990127, 23:00:00, 22:56:00, -0.5900, 1.7100, 4.6000, 0.0000, 280.0000
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    keep_date_col :
+        
+
+    Returns
+    -------
     parser = all_parsers
 
     def date_parser(*date_cols):
-        """
-        Test date parser.
+        """Test date parser.
 
         Parameters
         ----------
         date_cols : args
             The list of data columns to parse.
+        *date_cols :
+            
 
         Returns
         -------
-        parsed : Series
+
+        
         """
         return parsing.try_parse_dates(parsing.concat_date_cols(date_cols))
 
@@ -202,6 +224,19 @@
 @pytest.mark.parametrize("container", [list, tuple, Index, Series])
 @pytest.mark.parametrize("dim", [1, 2])
 def test_concat_date_col_fail(container, dim):
+    """
+
+    Parameters
+    ----------
+    container :
+        
+    dim :
+        
+
+    Returns
+    -------
+
+    """
     msg = "not all elements from date_cols are numpy arrays"
     value = "19990127"
 
@@ -213,14 +248,23 @@
 
 @pytest.mark.parametrize("keep_date_col", [True, False])
 def test_multiple_date_col(all_parsers, keep_date_col):
-    data = """\
-KORD,19990127, 19:00:00, 18:56:00, 0.8100, 2.8100, 7.2000, 0.0000, 280.0000
-KORD,19990127, 20:00:00, 19:56:00, 0.0100, 2.2100, 7.2000, 0.0000, 260.0000
-KORD,19990127, 21:00:00, 20:56:00, -0.5900, 2.2100, 5.7000, 0.0000, 280.0000
-KORD,19990127, 21:00:00, 21:18:00, -0.9900, 2.0100, 3.6000, 0.0000, 270.0000
-KORD,19990127, 22:00:00, 21:56:00, -0.5900, 1.7100, 5.1000, 0.0000, 290.0000
-KORD,19990127, 23:00:00, 22:56:00, -0.5900, 1.7100, 4.6000, 0.0000, 280.0000
-"""
+    """data = """\
+    KORD,19990127, 19:00:00, 18:56:00, 0.8100, 2.8100, 7.2000, 0.0000, 280.0000
+    KORD,19990127, 20:00:00, 19:56:00, 0.0100, 2.2100, 7.2000, 0.0000, 260.0000
+    KORD,19990127, 21:00:00, 20:56:00, -0.5900, 2.2100, 5.7000, 0.0000, 280.0000
+    KORD,19990127, 21:00:00, 21:18:00, -0.9900, 2.0100, 3.6000, 0.0000, 270.0000
+    KORD,19990127, 22:00:00, 21:56:00, -0.5900, 1.7100, 5.1000, 0.0000, 290.0000
+    KORD,19990127, 23:00:00, 22:56:00, -0.5900, 1.7100, 4.6000, 0.0000, 280.0000
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    keep_date_col :
+        
+
+    Returns
+    -------
     parser = all_parsers
     result = parser.read_csv(
         StringIO(data),
@@ -334,13 +378,20 @@
 
 
 def test_date_col_as_index_col(all_parsers):
-    data = """\
-KORD,19990127 19:00:00, 18:56:00, 0.8100, 2.8100, 7.2000, 0.0000, 280.0000
-KORD,19990127 20:00:00, 19:56:00, 0.0100, 2.2100, 7.2000, 0.0000, 260.0000
-KORD,19990127 21:00:00, 20:56:00, -0.5900, 2.2100, 5.7000, 0.0000, 280.0000
-KORD,19990127 21:00:00, 21:18:00, -0.9900, 2.0100, 3.6000, 0.0000, 270.0000
-KORD,19990127 22:00:00, 21:56:00, -0.5900, 1.7100, 5.1000, 0.0000, 290.0000
-"""
+    """data = """\
+    KORD,19990127 19:00:00, 18:56:00, 0.8100, 2.8100, 7.2000, 0.0000, 280.0000
+    KORD,19990127 20:00:00, 19:56:00, 0.0100, 2.2100, 7.2000, 0.0000, 260.0000
+    KORD,19990127 21:00:00, 20:56:00, -0.5900, 2.2100, 5.7000, 0.0000, 280.0000
+    KORD,19990127 21:00:00, 21:18:00, -0.9900, 2.0100, 3.6000, 0.0000, 270.0000
+    KORD,19990127 22:00:00, 21:56:00, -0.5900, 1.7100, 5.1000, 0.0000, 290.0000
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
     parser = all_parsers
     result = parser.read_csv(
         StringIO(data), header=None, prefix="X", parse_dates=[1], index_col=1
@@ -371,6 +422,17 @@
 
 
 def test_multiple_date_cols_int_cast(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     data = (
         "KORD,19990127, 19:00:00, 18:56:00, 0.8100\n"
         "KORD,19990127, 20:00:00, 19:56:00, 0.0100\n"
@@ -429,6 +491,17 @@
 
 
 def test_multiple_date_col_timestamp_parse(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """05/31/2012,15:30:00.029,1306.25,1,E,0,,1306.25
 05/31/2012,15:30:00.029,1306.25,8,E,0,,1306.25"""
@@ -463,6 +536,17 @@
 
 
 def test_multiple_date_cols_with_header(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """\
 ID,date,NominalTime,ActualTime,TDew,TAir,Windspeed,Precip,WindDir
@@ -573,6 +657,23 @@
     ],
 )
 def test_multiple_date_col_name_collision(all_parsers, data, parse_dates, msg):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    data :
+        
+    parse_dates :
+        
+    msg :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
 
     with pytest.raises(ValueError, match=msg):
@@ -580,6 +681,17 @@
 
 
 def test_date_parser_int_bug(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-3071
     parser = all_parsers
     data = (
@@ -632,6 +744,17 @@
 
 
 def test_nat_parse(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-3062
     parser = all_parsers
     df = DataFrame(
@@ -647,11 +770,18 @@
 
 
 def test_csv_custom_parser(all_parsers):
-    data = """A,B,C
-20090101,a,1,2
-20090102,b,3,4
-20090103,c,4,5
-"""
+    """data = """A,B,C
+    20090101,a,1,2
+    20090102,b,3,4
+    20090103,c,4,5
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
     parser = all_parsers
     result = parser.read_csv(
         StringIO(data), date_parser=lambda x: datetime.strptime(x, "%Y%m%d")
@@ -661,11 +791,18 @@
 
 
 def test_parse_dates_implicit_first_col(all_parsers):
-    data = """A,B,C
-20090101,a,1,2
-20090102,b,3,4
-20090103,c,4,5
-"""
+    """data = """A,B,C
+    20090101,a,1,2
+    20090102,b,3,4
+    20090103,c,4,5
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
     parser = all_parsers
     result = parser.read_csv(StringIO(data), parse_dates=True)
 
@@ -674,11 +811,18 @@
 
 
 def test_parse_dates_string(all_parsers):
-    data = """date,A,B,C
-20090101,a,1,2
-20090102,b,3,4
-20090103,c,4,5
-"""
+    """data = """date,A,B,C
+    20090101,a,1,2
+    20090102,b,3,4
+    20090103,c,4,5
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
     parser = all_parsers
     result = parser.read_csv(StringIO(data), index_col="date", parse_dates=["date"])
     # freq doesnt round-trip
@@ -697,11 +841,20 @@
 @pytest.mark.xfail(reason="yearfirst is not surfaced in read_*")
 @pytest.mark.parametrize("parse_dates", [[["date", "time"]], [[0, 1]]])
 def test_yy_format_with_year_first(all_parsers, parse_dates):
-    data = """date,time,B,C
-090131,0010,1,2
-090228,1020,3,4
-090331,0830,5,6
-"""
+    """data = """date,time,B,C
+    090131,0010,1,2
+    090228,1020,3,4
+    090331,0830,5,6
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    parse_dates :
+        
+
+    Returns
+    -------
     parser = all_parsers
     result = parser.read_csv(StringIO(data), index_col=0, parse_dates=parse_dates)
     index = DatetimeIndex(
@@ -719,6 +872,19 @@
 
 @pytest.mark.parametrize("parse_dates", [[0, 2], ["a", "c"]])
 def test_parse_dates_column_list(all_parsers, parse_dates):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    parse_dates :
+        
+
+    Returns
+    -------
+
+    """
     data = "a,b,c\n01/01/2010,1,15/02/2010"
     parser = all_parsers
 
@@ -735,17 +901,26 @@
 
 @pytest.mark.parametrize("index_col", [[0, 1], [1, 0]])
 def test_multi_index_parse_dates(all_parsers, index_col):
-    data = """index1,index2,A,B,C
-20090101,one,a,1,2
-20090101,two,b,3,4
-20090101,three,c,4,5
-20090102,one,a,1,2
-20090102,two,b,3,4
-20090102,three,c,4,5
-20090103,one,a,1,2
-20090103,two,b,3,4
-20090103,three,c,4,5
-"""
+    """data = """index1,index2,A,B,C
+    20090101,one,a,1,2
+    20090101,two,b,3,4
+    20090101,three,c,4,5
+    20090102,one,a,1,2
+    20090102,two,b,3,4
+    20090102,three,c,4,5
+    20090103,one,a,1,2
+    20090103,two,b,3,4
+    20090103,three,c,4,5
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    index_col :
+        
+
+    Returns
+    -------
     parser = all_parsers
     index = MultiIndex.from_product(
         [
@@ -780,6 +955,19 @@
 
 @pytest.mark.parametrize("kwargs", [dict(dayfirst=True), dict(day_first=True)])
 def test_parse_dates_custom_euro_format(all_parsers, kwargs):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    kwargs :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """foo,bar,baz
 31/01/2010,1,2
@@ -821,6 +1009,17 @@
 
 
 def test_parse_tz_aware(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # See gh-1693
     parser = all_parsers
     data = "Date,x\n2012-06-13T01:39:00Z,0.5"
@@ -838,6 +1037,21 @@
     [({"nominal": [1, 2]}, "nominal"), ({"nominal": [1, 2]}, 0), ([[1, 2]], 0)],
 )
 def test_multiple_date_cols_index(all_parsers, parse_dates, index_col):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    parse_dates :
+        
+    index_col :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """
 ID,date,NominalTime,ActualTime,TDew,TAir,Windspeed,Precip,WindDir
@@ -934,6 +1148,17 @@
 
 
 def test_multiple_date_cols_chunked(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """\
 ID,date,nominalTime,actualTime,A,B,C,D,E
@@ -1026,6 +1251,17 @@
 
 
 def test_multiple_date_col_named_index_compat(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """\
 ID,date,nominalTime,actualTime,A,B,C,D,E
@@ -1049,6 +1285,17 @@
 
 
 def test_multiple_date_col_multiple_index_compat(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """\
 ID,date,nominalTime,actualTime,A,B,C,D,E
@@ -1070,6 +1317,19 @@
 
 @pytest.mark.parametrize("kwargs", [dict(), dict(index_col="C")])
 def test_read_with_parse_dates_scalar_non_bool(all_parsers, kwargs):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    kwargs :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-5636
     parser = all_parsers
     msg = (
@@ -1085,6 +1345,19 @@
 
 @pytest.mark.parametrize("parse_dates", [(1,), np.array([4, 5]), {1, 3, 3}])
 def test_read_with_parse_dates_invalid_type(all_parsers, parse_dates):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    parse_dates :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     msg = (
         "Only booleans, lists, and dictionaries "
@@ -1100,6 +1373,21 @@
 @pytest.mark.parametrize("cache_dates", [True, False])
 @pytest.mark.parametrize("value", ["nan", "0", ""])
 def test_bad_date_parse(all_parsers, cache_dates, value):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    cache_dates :
+        
+    value :
+        
+
+    Returns
+    -------
+
+    """
     # if we have an invalid date make sure that we handle this with
     # and w/o the cache properly
     parser = all_parsers
@@ -1116,6 +1404,17 @@
 
 
 def test_parse_dates_empty_string(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-2263
     parser = all_parsers
     data = "Date,test\n2012-01-01,1\n,2"
@@ -1159,6 +1458,23 @@
     ],
 )
 def test_parse_dates_no_convert_thousands(all_parsers, data, kwargs, expected):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    data :
+        
+    kwargs :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-14066
     parser = all_parsers
 
@@ -1167,12 +1483,19 @@
 
 
 def test_parse_date_time_multi_level_column_name(all_parsers):
-    data = """\
-D,T,A,B
-date, time,a,b
-2001-01-05, 09:00:00, 0.0, 10.
-2001-01-06, 00:00:00, 1.0, 11.
-"""
+    """data = """\
+    D,T,A,B
+    date, time,a,b
+    2001-01-05, 09:00:00, 0.0, 10.
+    2001-01-06, 00:00:00, 1.0, 11.
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
     parser = all_parsers
     result = parser.read_csv(
         StringIO(data),
@@ -1262,6 +1585,23 @@
     ],
 )
 def test_parse_date_time(all_parsers, data, kwargs, expected):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    data :
+        
+    kwargs :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     result = parser.read_csv(StringIO(data), date_parser=conv.parse_date_time, **kwargs)
 
@@ -1273,6 +1613,17 @@
 
 
 def test_parse_date_fields(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = "year,month,day,a\n2001,01,10,10.\n2001,02,1,11."
     result = parser.read_csv(
@@ -1290,6 +1641,17 @@
 
 
 def test_parse_date_all_fields(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """\
 year,month,day,hour,minute,second,a,b
@@ -1313,6 +1675,17 @@
 
 
 def test_datetime_fractional_seconds(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """\
 year,month,day,hour,minute,second,a,b
@@ -1336,6 +1709,17 @@
 
 
 def test_generic(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = "year,month,day,a\n2001,01,10,10.\n2001,02,1,11."
 
@@ -1353,6 +1737,17 @@
 
 
 def test_date_parser_resolution_if_not_ns(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-10245
     parser = all_parsers
     data = """\
@@ -1363,6 +1758,19 @@
 """
 
     def date_parser(dt, time):
+        """
+
+        Parameters
+        ----------
+        dt :
+            
+        time :
+            
+
+        Returns
+        -------
+
+        """
         return np_array_datetime64_compat(dt + "T" + time + "Z", dtype="datetime64[s]")
 
     result = parser.read_csv(
@@ -1386,6 +1794,17 @@
 
 
 def test_parse_date_column_with_empty_string(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-6428
     parser = all_parsers
     data = "case,opdate\n7,10/18/2006\n7,10/18/2008\n621, "
@@ -1411,6 +1830,23 @@
 )
 @pytest.mark.parametrize("parse_dates", [True, False])
 def test_parse_date_float(all_parsers, data, expected, parse_dates):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    data :
+        
+    expected :
+        
+    parse_dates :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-2697
     #
     # Date parsing should fail, so we leave the data untouched
@@ -1422,6 +1858,17 @@
 
 
 def test_parse_timezone(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-22256
     parser = all_parsers
     data = """dt,val
@@ -1454,6 +1901,19 @@
     ["32/32/2019", "02/30/2019", "13/13/2019", "13/2019", "a3/11/2018", "10/11/2o17"],
 )
 def test_invalid_parse_delimited_date(all_parsers, date_string):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    date_string :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     expected = DataFrame({0: [date_string]}, dtype="object")
     result = parser.read_csv(StringIO(date_string), header=None, parse_dates=[0])
@@ -1474,6 +1934,23 @@
     ],
 )
 def test_parse_delimited_date_swap(all_parsers, date_string, dayfirst, expected):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    date_string :
+        
+    dayfirst :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     expected = DataFrame({0: [expected]}, dtype="datetime64[ns]")
     result = parser.read_csv(
@@ -1483,6 +1960,21 @@
 
 
 def _helper_hypothesis_delimited_date(call, date_string, **kwargs):
+    """
+
+    Parameters
+    ----------
+    call :
+        
+    date_string :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     msg, result = None, None
     try:
         result = call(date_string, **kwargs)
@@ -1501,6 +1993,23 @@
     ["%d %m %Y", "%m %d %Y", "%m %Y", "%Y %m %d", "%y %m %d", "%Y%m%d", "%y%m%d"],
 )
 def test_hypothesis_delimited_date(date_format, dayfirst, delimiter, test_datetime):
+    """
+
+    Parameters
+    ----------
+    date_format :
+        
+    dayfirst :
+        
+    delimiter :
+        
+    test_datetime :
+        
+
+    Returns
+    -------
+
+    """
     if date_format == "%m %Y" and delimiter == ".":
         pytest.skip(
             "parse_datetime_string cannot reliably tell whether \
@@ -1547,6 +2056,25 @@
 def test_missing_parse_dates_column_raises(
     all_parsers, names, usecols, parse_dates, missing_cols
 ):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    names :
+        
+    usecols :
+        
+    parse_dates :
+        
+    missing_cols :
+        
+
+    Returns
+    -------
+
+    """
     # gh-31251 column names provided in parse_dates could be missing.
     parser = all_parsers
     content = StringIO("date,time,val\n2020-01-31,04:20:32,32\n")
