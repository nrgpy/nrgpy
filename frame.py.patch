# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/utils/frame.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/utils/frame.py
@@ -28,21 +28,24 @@
     *names : str
         One or more variable names which will be extracted from the caller's
         frame.
-
     depth : integer, optional
         How many frames in the stack to walk when looking for your variables.
         The default is 0, which will use the frame where the call was made.
+    **kw :
+        
 
+    Returns
+    -------
 
     Examples
     --------
     ::
-
+    
         In [2]: def func(x):
            ...:     y = 1
            ...:     print(sorted(extract_vars('x','y').items()))
            ...:
-
+    
         In [3]: func('hello')
         [('x', 'hello'), ('y', 1)]
     """
@@ -55,13 +58,23 @@
 
 def extract_vars_above(*names):
     """Extract a set of variables by name from another frame.
-
+    
     Similar to extractVars(), but with a specified depth of 1, so that names
     are extracted exactly from above the caller.
-
+    
     This is simply a convenience function so that the very common case (for us)
     of skipping exactly 1 frame doesn't have to construct a special dict for
-    keyword passing."""
+    keyword passing.
+
+    Parameters
+    ----------
+    *names :
+        
+
+    Returns
+    -------
+
+    """
 
     callerNS = sys._getframe(2).f_locals
     return dict((k,callerNS[k]) for k in names)
@@ -69,14 +82,26 @@
 
 def debugx(expr,pre_msg=''):
     """Print the value of an expression from the caller's frame.
-
+    
     Takes an expression, evaluates it in the caller's frame and prints both
     the given expression and the resulting value (as well as a debug mark
     indicating the name of the calling function.  The input must be of a form
     suitable for eval().
+    
+    An optional message can be passed, which will be prepended to the printed
+    expr->value pair.
 
-    An optional message can be passed, which will be prepended to the printed
-    expr->value pair."""
+    Parameters
+    ----------
+    expr :
+        
+    pre_msg :
+         (Default value = '')
+
+    Returns
+    -------
+
+    """
 
     cf = sys._getframe(1)
     print('[DBG:%s] %s%s -> %r' % (cf.f_code.co_name,pre_msg,expr,
@@ -87,7 +112,17 @@
 #def debugx(expr,pre_msg=''): pass
 
 def extract_module_locals(depth=0):
-    """Returns (module, locals) of the function `depth` frames away from the caller"""
+    """Returns (module, locals) of the function `depth` frames away from the caller
+
+    Parameters
+    ----------
+    depth :
+         (Default value = 0)
+
+    Returns
+    -------
+
+    """
     f = sys._getframe(depth + 1)
     global_ns = f.f_globals
     module = sys.modules[global_ns['__name__']]
