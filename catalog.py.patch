# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/babel/messages/catalog.py
+++ b/..//venv/lib/python3.8/site-packages/babel/messages/catalog.py
@@ -42,6 +42,17 @@
 
 
 def _parse_datetime_header(value):
+    """
+
+    Parameters
+    ----------
+    value :
+        
+
+    Returns
+    -------
+
+    """
     match = re.match(r'^(?P<datetime>.*?)(?P<tzoffset>[+-]\d{4})?$', value)
 
     tt = time.strptime(match.group('datetime'), '%Y-%m-%d %H:%M')
@@ -120,6 +131,17 @@
     def __cmp__(self, other):
         """Compare Messages, taking into account plural ids"""
         def values_to_compare(obj):
+            """
+
+            Parameters
+            ----------
+            obj :
+                
+
+            Returns
+            -------
+
+            """
             if isinstance(obj, Message) and obj.pluralizable:
                 return obj.id[0], obj.context or ''
             return obj.id, obj.context or ''
@@ -144,6 +166,7 @@
         return self.__cmp__(other) != 0
 
     def clone(self):
+        """ """
         return Message(*map(copy, (self.id, self.string, self.locations,
                                    self.flags, self.auto_comments,
                                    self.user_comments, self.previous_id,
@@ -154,10 +177,16 @@
         are only performed if the catalog is provided.  This method returns
         a sequence of `TranslationError` objects.
 
-        :rtype: ``iterator``
-        :param catalog: A catalog instance that is passed to the checkers
-        :see: `Catalog.check` for a way to perform checks for all messages
-              in a catalog.
+        Parameters
+        ----------
+        catalog :
+            A catalog instance that is passed to the checkers
+            :see: `Catalog.check` for a way to perform checks for all messages
+            in a catalog. (Default value = None)
+
+        Returns
+        -------
+
         """
         from babel.messages.checkers import checkers
         errors = []
@@ -170,41 +199,17 @@
 
     @property
     def fuzzy(self):
-        """Whether the translation is fuzzy.
-
-        >>> Message('foo').fuzzy
-        False
-        >>> msg = Message('foo', 'foo', flags=['fuzzy'])
-        >>> msg.fuzzy
-        True
-        >>> msg
-        <Message 'foo' (flags: ['fuzzy'])>
-
-        :type:  `bool`"""
+        """Whether the translation is fuzzy."""
         return 'fuzzy' in self.flags
 
     @property
     def pluralizable(self):
-        """Whether the message is plurizable.
-
-        >>> Message('foo').pluralizable
-        False
-        >>> Message(('foo', 'bar')).pluralizable
-        True
-
-        :type:  `bool`"""
+        """Whether the message is plurizable."""
         return isinstance(self.id, (list, tuple))
 
     @property
     def python_format(self):
-        """Whether the message contains Python-style parameters.
-
-        >>> Message('foo %(name)s bar').python_format
-        True
-        >>> Message(('foo %(name)s', 'foo %(name)s')).python_format
-        True
-
-        :type:  `bool`"""
+        """Whether the message contains Python-style parameters."""
         ids = self.id
         if not isinstance(ids, (list, tuple)):
             ids = [ids]
@@ -212,8 +217,20 @@
 
 
 class TranslationError(Exception):
-    """Exception thrown by translation checkers when invalid message
-    translations are encountered."""
+    """
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    Raises
+    ------
+    translations
+        are encountered
+
+    """
 
 
 DEFAULT_HEADER = u"""\
@@ -226,6 +243,17 @@
 
 if PY2:
     def _parse_header(header_string):
+        """
+
+        Parameters
+        ----------
+        header_string :
+            
+
+        Returns
+        -------
+
+        """
         # message_from_string only works for str, not for unicode
         headers = message_from_string(header_string.encode('utf8'))
         decoded_headers = {}
@@ -301,6 +329,17 @@
         self._plural_expr = None
 
     def _set_locale(self, locale):
+        """
+
+        Parameters
+        ----------
+        locale :
+            
+
+        Returns
+        -------
+
+        """
         if locale is None:
             self._locale_identifier = None
             self._locale = None
@@ -322,15 +361,18 @@
         raise TypeError('`locale` must be a Locale, a locale identifier string, or None; got %r' % locale)
 
     def _get_locale(self):
+        """ """
         return self._locale
 
     def _get_locale_identifier(self):
+        """ """
         return self._locale_identifier
 
     locale = property(_get_locale, _set_locale)
     locale_identifier = property(_get_locale_identifier)
 
     def _get_header_comment(self):
+        """ """
         comment = self._header_comment
         year = datetime.now(LOCALTZ).strftime('%Y')
         if hasattr(self.revision_date, 'strftime'):
@@ -345,6 +387,17 @@
         return comment
 
     def _set_header_comment(self, string):
+        """
+
+        Parameters
+        ----------
+        string :
+            
+
+        Returns
+        -------
+
+        """
         self._header_comment = string
 
     header_comment = property(_get_header_comment, _set_header_comment, doc="""\
@@ -381,6 +434,7 @@
     """)
 
     def _get_mime_headers(self):
+        """ """
         headers = []
         headers.append(('Project-Id-Version',
                         '%s %s' % (self.project, self.version)))
@@ -413,6 +467,17 @@
         return headers
 
     def _set_mime_headers(self, headers):
+        """
+
+        Parameters
+        ----------
+        headers :
+            
+
+        Returns
+        -------
+
+        """
         for name, value in headers:
             name = force_text(name.lower(), encoding=self.charset)
             value = force_text(value, encoding=self.charset)
@@ -497,14 +562,7 @@
 
     @property
     def num_plurals(self):
-        """The number of plurals used by the catalog or locale.
-
-        >>> Catalog(locale='en').num_plurals
-        2
-        >>> Catalog(locale='ga').num_plurals
-        5
-
-        :type: `int`"""
+        """The number of plurals used by the catalog or locale."""
         if self._num_plurals is None:
             num = 2
             if self.locale:
@@ -514,16 +572,7 @@
 
     @property
     def plural_expr(self):
-        """The plural expression used by the catalog or locale.
-
-        >>> Catalog(locale='en').plural_expr
-        '(n != 1)'
-        >>> Catalog(locale='ga').plural_expr
-        '(n==1 ? 0 : n==2 ? 1 : n>=3 && n<=6 ? 2 : n>=7 && n<=10 ? 3 : 4)'
-        >>> Catalog(locale='ding').plural_expr  # unknown locale
-        '(n != 1)'
-
-        :type: `string_types`"""
+        """The plural expression used by the catalog or locale."""
         if self._plural_expr is None:
             expr = '(n != 1)'
             if self.locale:
@@ -533,14 +582,7 @@
 
     @property
     def plural_forms(self):
-        """Return the plural forms declaration for the locale.
-
-        >>> Catalog(locale='en').plural_forms
-        'nplurals=2; plural=(n != 1)'
-        >>> Catalog(locale='pt_BR').plural_forms
-        'nplurals=2; plural=(n > 1)'
-
-        :type: `str`"""
+        """Return the plural forms declaration for the locale."""
         return 'nplurals=%s; plural=%s' % (self.num_plurals, self.plural_expr)
 
     def __contains__(self, id):
@@ -638,29 +680,44 @@
     def add(self, id, string=None, locations=(), flags=(), auto_comments=(),
             user_comments=(), previous_id=(), lineno=None, context=None):
         """Add or update the message with the specified ID.
+        
+        
+        This method simply constructs a `Message` object with the given
+        arguments and invokes `__setitem__` with that object.
+
+        Parameters
+        ----------
+        id :
+            the message ID, or a ``(singular, plural)`` tuple for
+            pluralizable messages
+        string :
+            the translated message string, or a
+            ``(singular, plural)`` tuple for pluralizable messages (Default value = None)
+        locations :
+            a sequence of ``(filename, lineno)`` tuples (Default value = ())
+        flags :
+            a set or sequence of flags (Default value = ())
+        auto_comments :
+            a sequence of automatic comments (Default value = ())
+        user_comments :
+            a sequence of user comments (Default value = ())
+        previous_id :
+            the previous message ID, or a ``(singular, plural)``
+            tuple for pluralizable messages (Default value = ())
+        lineno :
+            the line number on which the msgid line was found in the
+            PO file, if any (Default value = None)
+        context :
+            the message context (Default value = None)
+
+        Returns
+        -------
 
         >>> catalog = Catalog()
         >>> catalog.add(u'foo')
         <Message ...>
         >>> catalog[u'foo']
         <Message u'foo' (flags: [])>
-
-        This method simply constructs a `Message` object with the given
-        arguments and invokes `__setitem__` with that object.
-
-        :param id: the message ID, or a ``(singular, plural)`` tuple for
-                   pluralizable messages
-        :param string: the translated message string, or a
-                       ``(singular, plural)`` tuple for pluralizable messages
-        :param locations: a sequence of ``(filename, lineno)`` tuples
-        :param flags: a set or sequence of flags
-        :param auto_comments: a sequence of automatic comments
-        :param user_comments: a sequence of user comments
-        :param previous_id: the previous message ID, or a ``(singular, plural)``
-                            tuple for pluralizable messages
-        :param lineno: the line number on which the msgid line was found in the
-                       PO file, if any
-        :param context: the message context
         """
         message = Message(id, string, list(locations), flags, auto_comments,
                           user_comments, previous_id, lineno=lineno,
@@ -670,12 +727,17 @@
 
     def check(self):
         """Run various validation checks on the translations in the catalog.
-
+        
         For every message which fails validation, this method yield a
         ``(message, errors)`` tuple, where ``message`` is the `Message` object
         and ``errors`` is a sequence of `TranslationError` objects.
 
-        :rtype: ``iterator``
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         for message in self._messages.values():
             errors = message.check(catalog=self)
@@ -685,16 +747,32 @@
     def get(self, id, context=None):
         """Return the message with the specified ID and context.
 
-        :param id: the message ID
-        :param context: the message context, or ``None`` for no context
+        Parameters
+        ----------
+        id :
+            the message ID
+        context :
+            the message context, or ``None`` for no context (Default value = None)
+
+        Returns
+        -------
+
         """
         return self._messages.get(self._key_for(id, context))
 
     def delete(self, id, context=None):
         """Delete the message with the specified ID and context.
 
-        :param id: the message ID
-        :param context: the message context, or ``None`` for no context
+        Parameters
+        ----------
+        id :
+            the message ID
+        context :
+            the message context, or ``None`` for no context (Default value = None)
+
+        Returns
+        -------
+
         """
         key = self._key_for(id, context)
         if key in self._messages:
@@ -702,6 +780,29 @@
 
     def update(self, template, no_fuzzy_matching=False, update_header_comment=False, keep_user_comments=True):
         """Update the catalog based on the given template catalog.
+        
+        
+        
+        
+        
+        
+        Messages that are in the catalog but not in the template are removed
+        from the main collection, but can still be accessed via the `obsolete`
+        member:
+
+        Parameters
+        ----------
+        template :
+            the reference catalog, usually read from a POT file
+        no_fuzzy_matching :
+            whether to use fuzzy matching of message IDs (Default value = False)
+        update_header_comment :
+             (Default value = False)
+        keep_user_comments :
+             (Default value = True)
+
+        Returns
+        -------
 
         >>> from babel.messages import Catalog
         >>> template = Catalog()
@@ -719,39 +820,32 @@
         >>> catalog.add(('salad', 'salads'), (u'Salat', u'Salate'),
         ...             locations=[('util.py', 38)])
         <Message ...>
-
+        
         >>> catalog.update(template)
         >>> len(catalog)
         3
-
+        
         >>> msg1 = catalog['green']
         >>> msg1.string
         >>> msg1.locations
         [('main.py', 99)]
-
+        
         >>> msg2 = catalog['blue']
         >>> msg2.string
         u'blau'
         >>> msg2.locations
         [('main.py', 100)]
-
+        
         >>> msg3 = catalog['salad']
         >>> msg3.string
         (u'Salat', u'Salate')
         >>> msg3.locations
         [('util.py', 42)]
-
-        Messages that are in the catalog but not in the template are removed
-        from the main collection, but can still be accessed via the `obsolete`
-        member:
-
+        
         >>> 'head' in catalog
         False
         >>> list(catalog.obsolete.values())
         [<Message 'head' (flags: [])>]
-
-        :param template: the reference catalog, usually read from a POT file
-        :param no_fuzzy_matching: whether to use fuzzy matching of message IDs
         """
         messages = self._messages
         remaining = messages.copy()
@@ -767,6 +861,21 @@
         fuzzy_matches = set()
 
         def _merge(message, oldkey, newkey):
+            """
+
+            Parameters
+            ----------
+            message :
+                
+            oldkey :
+                
+            newkey :
+                
+
+            Returns
+            -------
+
+            """
             message = message.clone()
             fuzzy = False
             if oldkey != newkey:
@@ -842,6 +951,17 @@
         """The key for a message is just the singular ID even for pluralizable
         messages, but is a ``(msgid, msgctxt)`` tuple for context-specific
         messages.
+
+        Parameters
+        ----------
+        id :
+            
+        context :
+             (Default value = None)
+
+        Returns
+        -------
+
         """
         key = id
         if isinstance(key, (list, tuple)):
