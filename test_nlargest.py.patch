# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/series/methods/test_nlargest.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/series/methods/test_nlargest.py
@@ -30,16 +30,22 @@
 
 @pytest.fixture
 def s_main_dtypes():
-    """
-    A DataFrame with many dtypes
-
+    """A DataFrame with many dtypes
+    
     * datetime
     * datetimetz
     * timedelta
     * [u]int{8,16,32,64}
     * float{32,64}
-
+    
     The columns are the name of the dtype.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     df = pd.DataFrame(
         {
@@ -70,11 +76,38 @@
 
 @pytest.fixture(params=main_dtypes)
 def s_main_dtypes_split(request, s_main_dtypes):
-    """Each series in s_main_dtypes."""
+    """Each series in s_main_dtypes.
+
+    Parameters
+    ----------
+    request :
+        
+    s_main_dtypes :
+        
+
+    Returns
+    -------
+
+    """
     return s_main_dtypes[request.param]
 
 
 def assert_check_nselect_boundary(vals, dtype, method):
+    """
+
+    Parameters
+    ----------
+    vals :
+        
+    dtype :
+        
+    method :
+        
+
+    Returns
+    -------
+
+    """
     # helper function for 'test_boundary_{dtype}' tests
     ser = Series(vals, dtype=dtype)
     result = getattr(ser, method)(3)
@@ -84,6 +117,7 @@
 
 
 class TestSeriesNLargestNSmallest:
+    """ """
     @pytest.mark.parametrize(
         "r",
         [
@@ -97,6 +131,17 @@
         ],
     )
     def test_nlargest_error(self, r):
+        """
+
+        Parameters
+        ----------
+        r :
+            
+
+        Returns
+        -------
+
+        """
         dt = r.dtype
         msg = f"Cannot use method 'n(larg|small)est' with dtype {dt}"
         args = 2, len(r), 0, -1
@@ -106,6 +151,17 @@
                 method(arg)
 
     def test_nsmallest_nlargest(self, s_main_dtypes_split):
+        """
+
+        Parameters
+        ----------
+        s_main_dtypes_split :
+            
+
+        Returns
+        -------
+
+        """
         # float, int, datetime64 (use i8), timedelts64 (same),
         # object that are numbers, object that are strings
         ser = s_main_dtypes_split
@@ -125,6 +181,7 @@
         tm.assert_series_equal(ser.nlargest(len(ser) + 1), ser.iloc[[4, 0, 1, 3, 2]])
 
     def test_nlargest_misc(self):
+        """ """
 
         ser = Series([3.0, np.nan, 1, 2, 5])
         tm.assert_series_equal(ser.nlargest(), ser.iloc[[4, 0, 3, 2]])
@@ -155,6 +212,17 @@
 
     @pytest.mark.parametrize("n", range(1, 5))
     def test_nlargest_n(self, n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
 
         # GH 13412
         ser = Series([1, 4, 3, 2], index=[0, 0, 1, 1])
@@ -167,6 +235,19 @@
         tm.assert_series_equal(result, expected)
 
     def test_nlargest_boundary_integer(self, nselect_method, any_int_dtype):
+        """
+
+        Parameters
+        ----------
+        nselect_method :
+            
+        any_int_dtype :
+            
+
+        Returns
+        -------
+
+        """
         # GH#21426
         dtype_info = np.iinfo(any_int_dtype)
         min_val, max_val = dtype_info.min, dtype_info.max
@@ -174,6 +255,19 @@
         assert_check_nselect_boundary(vals, any_int_dtype, nselect_method)
 
     def test_nlargest_boundary_float(self, nselect_method, float_dtype):
+        """
+
+        Parameters
+        ----------
+        nselect_method :
+            
+        float_dtype :
+            
+
+        Returns
+        -------
+
+        """
         # GH#21426
         dtype_info = np.finfo(float_dtype)
         min_val, max_val = dtype_info.min, dtype_info.max
@@ -183,6 +277,19 @@
 
     @pytest.mark.parametrize("dtype", ["datetime64[ns]", "timedelta64[ns]"])
     def test_nlargest_boundary_datetimelike(self, nselect_method, dtype):
+        """
+
+        Parameters
+        ----------
+        nselect_method :
+            
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         # GH#21426
         # use int64 bounds and +1 to min_val since true minimum is NaT
         # (include min_val/NaT at end to maintain same expected_idxr)
@@ -192,6 +299,7 @@
         assert_check_nselect_boundary(vals, dtype, nselect_method)
 
     def test_nlargest_duplicate_keep_all_ties(self):
+        """ """
         # see GH#16818
         ser = Series([10, 9, 8, 7, 7, 7, 7, 6])
         result = ser.nlargest(4, keep="all")
@@ -206,6 +314,19 @@
         "data,expected", [([True, False], [True]), ([True, False, True, True], [True])]
     )
     def test_nlargest_boolean(self, data, expected):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # GH#26154 : ensure True > False
         ser = Series(data)
         result = ser.nlargest(1)
