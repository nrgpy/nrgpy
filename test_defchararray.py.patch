# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_defchararray.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_defchararray.py
@@ -10,7 +10,9 @@
 kw_unicode_false = {'unicode': False}
 
 class TestBasic:
+    """ """
     def test_from_object_array(self):
+        """ """
         A = np.array([['abc', 2],
                       ['long   ', '0123456789']], dtype='O')
         B = np.char.array(A)
@@ -19,6 +21,7 @@
                                [b'long', b'0123456789']])
 
     def test_from_object_array_unicode(self):
+        """ """
         A = np.array([['abc', u'Sigma \u03a3'],
                       ['long   ', '0123456789']], dtype='O')
         assert_raises(ValueError, np.char.array, (A,))
@@ -28,6 +31,7 @@
                                ['long', '0123456789']])
 
     def test_from_string_array(self):
+        """ """
         A = np.array([[b'abc', b'foo'],
                       [b'long   ', b'0123456789']])
         assert_equal(A.dtype.type, np.string_)
@@ -45,6 +49,7 @@
         assert_(C[0, 0] == A[0, 0])
 
     def test_from_unicode_array(self):
+        """ """
         A = np.array([['abc', u'Sigma \u03a3'],
                       ['long   ', '0123456789']])
         assert_equal(A.dtype.type, np.unicode_)
@@ -58,22 +63,26 @@
         assert_equal(B.shape, A.shape)
 
         def fail():
+            """ """
             np.char.array(A, **kw_unicode_false)
 
         assert_raises(UnicodeEncodeError, fail)
 
     def test_unicode_upconvert(self):
+        """ """
         A = np.char.array(['abc'])
         B = np.char.array([u'\u03a3'])
         assert_(issubclass((A + B).dtype.type, np.unicode_))
 
     def test_from_string(self):
+        """ """
         A = np.char.array(b'abc')
         assert_equal(len(A), 1)
         assert_equal(len(A[0]), 3)
         assert_(issubclass(A.dtype.type, np.string_))
 
     def test_from_unicode(self):
+        """ """
         A = np.char.array(u'\u03a3')
         assert_equal(len(A), 1)
         assert_equal(len(A[0]), 1)
@@ -81,64 +90,82 @@
         assert_(issubclass(A.dtype.type, np.unicode_))
 
 class TestVecString:
+    """ """
     def test_non_existent_method(self):
-
-        def fail():
+        """ """
+
+        def fail():
+            """ """
             _vec_string('a', np.string_, 'bogus')
 
         assert_raises(AttributeError, fail)
 
     def test_non_string_array(self):
-
-        def fail():
+        """ """
+
+        def fail():
+            """ """
             _vec_string(1, np.string_, 'strip')
 
         assert_raises(TypeError, fail)
 
     def test_invalid_args_tuple(self):
-
-        def fail():
+        """ """
+
+        def fail():
+            """ """
             _vec_string(['a'], np.string_, 'strip', 1)
 
         assert_raises(TypeError, fail)
 
     def test_invalid_type_descr(self):
-
-        def fail():
+        """ """
+
+        def fail():
+            """ """
             _vec_string(['a'], 'BOGUS', 'strip')
 
         assert_raises(TypeError, fail)
 
     def test_invalid_function_args(self):
-
-        def fail():
+        """ """
+
+        def fail():
+            """ """
             _vec_string(['a'], np.string_, 'strip', (1,))
 
         assert_raises(TypeError, fail)
 
     def test_invalid_result_type(self):
-
-        def fail():
+        """ """
+
+        def fail():
+            """ """
             _vec_string(['a'], np.int_, 'strip')
 
         assert_raises(TypeError, fail)
 
     def test_broadcast_error(self):
-
-        def fail():
+        """ """
+
+        def fail():
+            """ """
             _vec_string([['abc', 'def']], np.int_, 'find', (['a', 'd', 'j'],))
 
         assert_raises(ValueError, fail)
 
 
 class TestWhitespace:
+    """ """
     def setup(self):
+        """ """
         self.A = np.array([['abc ', '123  '],
                            ['789 ', 'xyz ']]).view(np.chararray)
         self.B = np.array([['abc', '123'],
                            ['789', 'xyz']]).view(np.chararray)
 
     def test1(self):
+        """ """
         assert_(np.all(self.A == self.B))
         assert_(np.all(self.A >= self.B))
         assert_(np.all(self.A <= self.B))
@@ -147,42 +174,54 @@
         assert_(not np.any(self.A != self.B))
 
 class TestChar:
+    """ """
     def setup(self):
+        """ """
         self.A = np.array('abc1', dtype='c').view(np.chararray)
 
     def test_it(self):
+        """ """
         assert_equal(self.A.shape, (4,))
         assert_equal(self.A.upper()[:2].tobytes(), b'AB')
 
 class TestComparisons:
+    """ """
     def setup(self):
+        """ """
         self.A = np.array([['abc', '123'],
                            ['789', 'xyz']]).view(np.chararray)
         self.B = np.array([['efg', '123  '],
                            ['051', 'tuv']]).view(np.chararray)
 
     def test_not_equal(self):
+        """ """
         assert_array_equal((self.A != self.B), [[True, False], [True, True]])
 
     def test_equal(self):
+        """ """
         assert_array_equal((self.A == self.B), [[False, True], [False, False]])
 
     def test_greater_equal(self):
+        """ """
         assert_array_equal((self.A >= self.B), [[False, True], [True, True]])
 
     def test_less_equal(self):
+        """ """
         assert_array_equal((self.A <= self.B), [[True, True], [False, False]])
 
     def test_greater(self):
+        """ """
         assert_array_equal((self.A > self.B), [[False, False], [True, True]])
 
     def test_less(self):
+        """ """
         assert_array_equal((self.A < self.B), [[True, False], [False, False]])
 
 class TestComparisonsMixed1(TestComparisons):
     """Ticket #1276"""
 
     def setup(self):
+        """ """
         TestComparisons.setup(self)
         self.B = np.array([['efg', '123  '],
                            ['051', 'tuv']], np.unicode_).view(np.chararray)
@@ -191,12 +230,15 @@
     """Ticket #1276"""
 
     def setup(self):
+        """ """
         TestComparisons.setup(self)
         self.A = np.array([['abc', '123'],
                            ['789', 'xyz']], np.unicode_).view(np.chararray)
 
 class TestInformation:
+    """ """
     def setup(self):
+        """ """
         self.A = np.array([[' abc ', ''],
                            ['12345', 'MixedCase'],
                            ['123 \t 345 \0 ', 'UPPER']]).view(np.chararray)
@@ -205,11 +247,13 @@
                            [u'123 \t 345 \0 ', u'UPPER']]).view(np.chararray)
 
     def test_len(self):
+        """ """
         assert_(issubclass(np.char.str_len(self.A).dtype.type, np.integer))
         assert_array_equal(np.char.str_len(self.A), [[5, 0], [5, 9], [12, 5]])
         assert_array_equal(np.char.str_len(self.B), [[3, 0], [5, 9], [12, 5]])
 
     def test_count(self):
+        """ """
         assert_(issubclass(self.A.count('').dtype.type, np.integer))
         assert_array_equal(self.A.count('a'), [[1, 0], [0, 1], [0, 0]])
         assert_array_equal(self.A.count('123'), [[0, 0], [1, 0], [1, 0]])
@@ -221,16 +265,19 @@
         # assert_array_equal(self.B.count('\0'), [[0, 0], [0, 0], [1, 0]])
 
     def test_endswith(self):
+        """ """
         assert_(issubclass(self.A.endswith('').dtype.type, np.bool_))
         assert_array_equal(self.A.endswith(' '), [[1, 0], [0, 0], [1, 0]])
         assert_array_equal(self.A.endswith('3', 0, 3), [[0, 0], [1, 0], [1, 0]])
 
         def fail():
+            """ """
             self.A.endswith('3', 'fdjk')
 
         assert_raises(TypeError, fail)
 
     def test_find(self):
+        """ """
         assert_(issubclass(self.A.find('a').dtype.type, np.integer))
         assert_array_equal(self.A.find('a'), [[1, -1], [-1, 6], [-1, -1]])
         assert_array_equal(self.A.find('3'), [[-1, -1], [2, -1], [2, -1]])
@@ -238,8 +285,10 @@
         assert_array_equal(self.A.find(['1', 'P']), [[-1, -1], [0, -1], [0, 1]])
 
     def test_index(self):
-
-        def fail():
+        """ """
+
+        def fail():
+            """ """
             self.A.index('a')
 
         assert_raises(ValueError, fail)
@@ -247,34 +296,42 @@
         assert_(issubclass(np.char.index('abcba', 'b').dtype.type, np.integer))
 
     def test_isalnum(self):
+        """ """
         assert_(issubclass(self.A.isalnum().dtype.type, np.bool_))
         assert_array_equal(self.A.isalnum(), [[False, False], [True, True], [False, True]])
 
     def test_isalpha(self):
+        """ """
         assert_(issubclass(self.A.isalpha().dtype.type, np.bool_))
         assert_array_equal(self.A.isalpha(), [[False, False], [False, True], [False, True]])
 
     def test_isdigit(self):
+        """ """
         assert_(issubclass(self.A.isdigit().dtype.type, np.bool_))
         assert_array_equal(self.A.isdigit(), [[False, False], [True, False], [False, False]])
 
     def test_islower(self):
+        """ """
         assert_(issubclass(self.A.islower().dtype.type, np.bool_))
         assert_array_equal(self.A.islower(), [[True, False], [False, False], [False, False]])
 
     def test_isspace(self):
+        """ """
         assert_(issubclass(self.A.isspace().dtype.type, np.bool_))
         assert_array_equal(self.A.isspace(), [[False, False], [False, False], [False, False]])
 
     def test_istitle(self):
+        """ """
         assert_(issubclass(self.A.istitle().dtype.type, np.bool_))
         assert_array_equal(self.A.istitle(), [[False, False], [False, False], [False, False]])
 
     def test_isupper(self):
+        """ """
         assert_(issubclass(self.A.isupper().dtype.type, np.bool_))
         assert_array_equal(self.A.isupper(), [[False, False], [False, False], [False, True]])
 
     def test_rfind(self):
+        """ """
         assert_(issubclass(self.A.rfind('a').dtype.type, np.integer))
         assert_array_equal(self.A.rfind('a'), [[1, -1], [-1, 6], [-1, -1]])
         assert_array_equal(self.A.rfind('3'), [[-1, -1], [2, -1], [6, -1]])
@@ -282,8 +339,10 @@
         assert_array_equal(self.A.rfind(['1', 'P']), [[-1, -1], [0, -1], [0, 2]])
 
     def test_rindex(self):
-
-        def fail():
+        """ """
+
+        def fail():
+            """ """
             self.A.rindex('a')
 
         assert_raises(ValueError, fail)
@@ -291,18 +350,22 @@
         assert_(issubclass(np.char.rindex('abcba', 'b').dtype.type, np.integer))
 
     def test_startswith(self):
+        """ """
         assert_(issubclass(self.A.startswith('').dtype.type, np.bool_))
         assert_array_equal(self.A.startswith(' '), [[1, 0], [0, 0], [0, 0]])
         assert_array_equal(self.A.startswith('1', 0, 3), [[0, 0], [1, 0], [1, 0]])
 
         def fail():
+            """ """
             self.A.startswith('3', 'fdjk')
 
         assert_raises(TypeError, fail)
 
 
 class TestMethods:
+    """ """
     def setup(self):
+        """ """
         self.A = np.array([[' abc ', ''],
                            ['12345', 'MixedCase'],
                            ['123 \t 345 \0 ', 'UPPER']],
@@ -312,6 +375,7 @@
                            [u'123 \t 345 \0 ', u'UPPER']]).view(np.chararray)
 
     def test_capitalize(self):
+        """ """
         tgt = [[b' abc ', b''],
                [b'12345', b'Mixedcase'],
                [b'123 \t 345 \0 ', b'Upper']]
@@ -325,6 +389,7 @@
         assert_array_equal(self.B.capitalize(), tgt)
 
     def test_center(self):
+        """ """
         assert_(issubclass(self.A.center(10).dtype.type, np.string_))
         C = self.A.center([10, 20])
         assert_array_equal(np.char.str_len(C), [[10, 20], [10, 20], [12, 20]])
@@ -340,18 +405,22 @@
         assert_array_equal(C, tgt)
 
     def test_decode(self):
+        """ """
         A = np.char.array([b'\\u03a3'])
         assert_(A.decode('unicode-escape')[0] == '\u03a3')
 
     def test_encode(self):
+        """ """
         B = self.B.encode('unicode_escape')
         assert_(B[0][0] == str(' \\u03a3 ').encode('latin1'))
 
     def test_expandtabs(self):
+        """ """
         T = self.A.expandtabs()
         assert_(T[2, 0] == b'123      345 \0')
 
     def test_join(self):
+        """ """
         # NOTE: list(b'123') == [49, 50, 51]
         #       so that b','.join(b'123') results to an error on Py3
         A0 = self.A.decode('ascii')
@@ -364,6 +433,7 @@
         assert_array_equal(np.char.join([',', '#'], A0), tgt)
 
     def test_ljust(self):
+        """ """
         assert_(issubclass(self.A.ljust(10).dtype.type, np.string_))
 
         C = self.A.ljust([10, 20])
@@ -381,6 +451,7 @@
         assert_array_equal(C, tgt)
 
     def test_lower(self):
+        """ """
         tgt = [[b' abc ', b''],
                [b'12345', b'mixedcase'],
                [b'123 \t 345 \0 ', b'upper']]
@@ -394,6 +465,7 @@
         assert_array_equal(self.B.lower(), tgt)
 
     def test_lstrip(self):
+        """ """
         tgt = [[b'abc ', b''],
                [b'12345', b'MixedCase'],
                [b'123 \t 345 \0 ', b'UPPER']]
@@ -412,6 +484,7 @@
         assert_array_equal(self.B.lstrip(), tgt)
 
     def test_partition(self):
+        """ """
         P = self.A.partition([b'3', b'M'])
         tgt = [[(b' abc ', b'', b''), (b'', b'', b'')],
                [(b'12', b'3', b'45'), (b'', b'M', b'ixedCase')],
@@ -420,6 +493,7 @@
         assert_array_equal(P, tgt)
 
     def test_replace(self):
+        """ """
         R = self.A.replace([b'3', b'a'],
                            [b'##########', b'@'])
         tgt = [[b' abc ', b''],
@@ -429,6 +503,7 @@
         assert_array_equal(R, tgt)
 
     def test_rjust(self):
+        """ """
         assert_(issubclass(self.A.rjust(10).dtype.type, np.string_))
 
         C = self.A.rjust([10, 20])
@@ -446,6 +521,7 @@
         assert_array_equal(C, tgt)
 
     def test_rpartition(self):
+        """ """
         P = self.A.rpartition([b'3', b'M'])
         tgt = [[(b'', b'', b' abc '), (b'', b'', b'')],
                [(b'12', b'3', b'45'), (b'', b'M', b'ixedCase')],
@@ -454,6 +530,7 @@
         assert_array_equal(P, tgt)
 
     def test_rsplit(self):
+        """ """
         A = self.A.rsplit(b'3')
         tgt = [[[b' abc '], [b'']],
                [[b'12', b'45'], [b'MixedCase']],
@@ -462,6 +539,7 @@
         assert_equal(A.tolist(), tgt)
 
     def test_rstrip(self):
+        """ """
         assert_(issubclass(self.A.rstrip().dtype.type, np.string_))
 
         tgt = [[b' abc', b''],
@@ -482,6 +560,7 @@
         assert_array_equal(self.B.rstrip(), tgt)
 
     def test_strip(self):
+        """ """
         tgt = [[b'abc', b''],
                [b'12345', b'MixedCase'],
                [b'123 \t 345', b'UPPER']]
@@ -500,6 +579,7 @@
         assert_array_equal(self.B.strip(), tgt)
 
     def test_split(self):
+        """ """
         A = self.A.split(b'3')
         tgt = [
                [[b' abc '], [b'']],
@@ -509,12 +589,14 @@
         assert_equal(A.tolist(), tgt)
 
     def test_splitlines(self):
+        """ """
         A = np.char.array(['abc\nfds\nwer']).splitlines()
         assert_(issubclass(A.dtype.type, np.object_))
         assert_(A.shape == (1,))
         assert_(len(A[0]) == 3)
 
     def test_swapcase(self):
+        """ """
         tgt = [[b' ABC ', b''],
                [b'12345', b'mIXEDcASE'],
                [b'123 \t 345 \0 ', b'upper']]
@@ -528,6 +610,7 @@
         assert_array_equal(self.B.swapcase(), tgt)
 
     def test_title(self):
+        """ """
         tgt = [[b' Abc ', b''],
                [b'12345', b'Mixedcase'],
                [b'123 \t 345 \0 ', b'Upper']]
@@ -541,6 +624,7 @@
         assert_array_equal(self.B.title(), tgt)
 
     def test_upper(self):
+        """ """
         tgt = [[b' ABC ', b''],
                [b'12345', b'MIXEDCASE'],
                [b'123 \t 345 \0 ', b'UPPER']]
@@ -554,8 +638,10 @@
         assert_array_equal(self.B.upper(), tgt)
 
     def test_isnumeric(self):
-
-        def fail():
+        """ """
+
+        def fail():
+            """ """
             self.A.isnumeric()
 
         assert_raises(TypeError, fail)
@@ -564,8 +650,10 @@
                 [False, False], [True, False], [False, False]])
 
     def test_isdecimal(self):
-
-        def fail():
+        """ """
+
+        def fail():
+            """ """
             self.A.isdecimal()
 
         assert_raises(TypeError, fail)
@@ -575,24 +663,29 @@
 
 
 class TestOperations:
+    """ """
     def setup(self):
+        """ """
         self.A = np.array([['abc', '123'],
                            ['789', 'xyz']]).view(np.chararray)
         self.B = np.array([['efg', '456'],
                            ['051', 'tuv']]).view(np.chararray)
 
     def test_add(self):
+        """ """
         AB = np.array([['abcefg', '123456'],
                        ['789051', 'xyztuv']]).view(np.chararray)
         assert_array_equal(AB, (self.A + self.B))
         assert_(len((self.A + self.B)[0][0]) == 6)
 
     def test_radd(self):
+        """ """
         QA = np.array([['qabc', 'q123'],
                        ['q789', 'qxyz']]).view(np.chararray)
         assert_array_equal(QA, ('q' + self.A))
 
     def test_mul(self):
+        """ """
         A = self.A
         for r in (2, 3, 5, 7, 197):
             Ar = np.array([[A[0, 0]*r, A[0, 1]*r],
@@ -606,6 +699,7 @@
                 A*ob
 
     def test_rmul(self):
+        """ """
         A = self.A
         for r in (2, 3, 5, 7, 197):
             Ar = np.array([[A[0, 0]*r, A[0, 1]*r],
@@ -633,6 +727,7 @@
         assert_array_equal(A2, (A % [[1, 2], [3, 4]]))
 
     def test_rmod(self):
+        """ """
         assert_(("%s" % self.A) == str(self.A))
         assert_(("%r" % self.A) == repr(self.A))
 
