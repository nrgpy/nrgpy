# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/ma/tests/test_old_ma.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/ma/tests/test_old_ma.py
@@ -25,6 +25,21 @@
 
 
 def eq(v, w, msg=''):
+    """
+
+    Parameters
+    ----------
+    v :
+        
+    w :
+        
+    msg :
+         (Default value = '')
+
+    Returns
+    -------
+
+    """
     result = allclose(v, w)
     if not result:
         print("Not eq:%s\n%s\n----%s" % (msg, str(v), str(w)))
@@ -32,8 +47,10 @@
 
 
 class TestMa:
+    """ """
 
     def setup(self):
+        """ """
         x = np.array([1., 1., 1., -2., pi/2.0, 4., 5., -10., 10., 1., 2., 3.])
         y = np.array([5., 0., 3., 2., -1., -4., 0., -10., 10., 1., 0., 3.])
         a10 = 10.
@@ -49,6 +66,7 @@
         self.d = (x, y, a10, m1, m2, xm, ym, z, zm, xf, s)
 
     def test_testBasic1d(self):
+        """ """
         # Test of basic array creation and properties in 1 dimension.
         (x, y, a10, m1, m2, xm, ym, z, zm, xf, s) = self.d
         assert_(not isMaskedArray(x))
@@ -63,6 +81,7 @@
         assert_(eq(x, xm))
 
     def test_testBasic2d(self):
+        """ """
         # Test of basic array creation and properties in 2 dimensions.
         for s in [(4, 3), (6, 2)]:
             (x, y, a10, m1, m2, xm, ym, z, zm, xf, s) = self.d
@@ -85,6 +104,7 @@
             self.setup()
 
     def test_testArithmetic(self):
+        """ """
         # Test of basic arithmetic.
         (x, y, a10, m1, m2, xm, ym, z, zm, xf, s) = self.d
         a2d = array([[1, 2], [0, 4]])
@@ -123,12 +143,14 @@
                 assert_(eq(np.divide(x, y), divide(xm, ym)))
 
     def test_testMixedArithmetic(self):
+        """ """
         na = np.array([1])
         ma = array([1])
         assert_(isinstance(na + ma, MaskedArray))
         assert_(isinstance(ma + na, MaskedArray))
 
     def test_testUfuncs1(self):
+        """ """
         # Test various functions such as sin, cos.
         (x, y, a10, m1, m2, xm, ym, z, zm, xf, s) = self.d
         assert_(eq(np.cos(x), cos(xm)))
@@ -160,6 +182,7 @@
         assert_(eq(np.concatenate((x, y, x)), concatenate((x, ym, x))))
 
     def test_xtestCount(self):
+        """ """
         # Test count
         ott = array([0., 1., 2., 3.], mask=[1, 0, 0, 0])
         assert_(count(ott).dtype.type is np.intp)
@@ -175,6 +198,7 @@
         assert_(eq([1, 2], count(ott, 0)))
 
     def test_testMinMax(self):
+        """ """
         # Test minimum and maximum.
         (x, y, a10, m1, m2, xm, ym, z, zm, xf, s) = self.d
         xr = np.ravel(x)  # max doesn't work if shaped
@@ -185,6 +209,7 @@
         assert_(eq(min(xr), minimum.reduce(xmr)))
 
     def test_testAddSumProd(self):
+        """ """
         # Test add, sum, product.
         (x, y, a10, m1, m2, xm, ym, z, zm, xf, s) = self.d
         assert_(eq(np.add.reduce(x), add.reduce(x)))
@@ -206,6 +231,7 @@
             assert_(eq(np.product(x, 1), product(x, 1)))
 
     def test_testCI(self):
+        """ """
         # Test of conversions and indexing
         x1 = np.array([1, 2, 4, 3])
         x2 = array(x1, mask=[1, 0, 0, 0])
@@ -256,6 +282,7 @@
         assert_(x1[1:1].shape == (0,))
 
     def test_testCopySize(self):
+        """ """
         # Tests of some subtle points of copying and sizing.
         n = [0, 0, 1, 0, 0]
         m = make_mask(n)
@@ -307,6 +334,7 @@
         assert_(eq(y5, y6))
 
     def test_testPut(self):
+        """ """
         # Test of put
         d = arange(5)
         n = [0, 0, 0, 1, 1]
@@ -329,6 +357,7 @@
         assert_(eq(x, [-1, 100, 200, 0, 0]))
 
     def test_testPut2(self):
+        """ """
         # Test of put
         d = arange(5)
         x = array(d, mask=[0, 0, 0, 0, 0])
@@ -355,6 +384,7 @@
         assert_(eq(x, [0, 1, 10, 40, 4]))
 
     def test_testMaPut(self):
+        """ """
         (x, y, a10, m1, m2, xm, ym, z, zm, xf, s) = self.d
         m = [1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1]
         i = np.nonzero(m)[0]
@@ -362,6 +392,7 @@
         assert_(all(take(ym, i, axis=0) == zm))
 
     def test_testOddFeatures(self):
+        """ """
         # Test of other odd features
         x = arange(20)
         x = x.reshape(4, 5)
@@ -463,6 +494,7 @@
         assert_(eq(z, [99, 1, 1, 99, 99, 99]))
 
     def test_testMinMax2(self):
+        """ """
         # Test of minimum, maximum.
         assert_(eq(minimum([1, 2, 3], [4, 0, 9]), [1, 0, 3]))
         assert_(eq(maximum([1, 2, 3], [4, 0, 9]), [4, 2, 9]))
@@ -476,6 +508,7 @@
         assert_(maximum.reduce(x) == 4)
 
     def test_testTakeTransposeInnerOuter(self):
+        """ """
         # Test of take, transpose, inner, outer products
         x = arange(24)
         y = np.arange(24)
@@ -496,6 +529,7 @@
         assert_(t[2] == 3)
 
     def test_testInplace(self):
+        """ """
         # Test of inplace operations and rich comparisons
         y = arange(10)
 
@@ -546,6 +580,7 @@
         assert_(eq(x, y + 1.))
 
     def test_testPickle(self):
+        """ """
         # Test of pickling
         x = arange(12)
         x[4:10:2] = masked
@@ -556,6 +591,7 @@
             assert_(eq(x, y))
 
     def test_testMasked(self):
+        """ """
         # Test of masked element
         xx = arange(6)
         xx[1] = masked
@@ -564,6 +600,7 @@
         assert_equal(filled(xx[1], 0), 0)
 
     def test_testAverage1(self):
+        """ """
         # Test of average.
         ott = array([0., 1., 2., 3.], mask=[1, 0, 0, 0])
         assert_(eq(2.0, average(ott, axis=0)))
@@ -583,6 +620,7 @@
         assert_(eq(wts, [1., 0.]))
 
     def test_testAverage2(self):
+        """ """
         # More tests of average.
         w1 = [0, 1, 1, 1, 1, 0]
         w2 = [[0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 1]]
@@ -641,6 +679,7 @@
         assert_(eq(a2dma, [1.5, 4.0]))
 
     def test_testToPython(self):
+        """ """
         assert_equal(1, int(array(1)))
         assert_equal(1.0, float(array(1)))
         assert_equal(1, int(array([[[1]]])))
@@ -650,6 +689,7 @@
         assert_raises(ValueError, bool, array([0, 0], mask=[0, 1]))
 
     def test_testScalarArithmetic(self):
+        """ """
         xm = array(0, mask=1)
         #TODO FIXME: Find out what the following raises a warning in r8247
         with np.errstate(divide='ignore'):
@@ -665,6 +705,7 @@
         assert_equal(str(xm), str(masked_print_option))
 
     def test_testArrayMethods(self):
+        """ """
         a = array([1, 3, 2])
         assert_(eq(a.any(), a._data.any()))
         assert_(eq(a.all(), a._data.all()))
@@ -682,15 +723,18 @@
         assert_(eq(m.transpose(), m._data.transpose()))
 
     def test_testArrayAttributes(self):
+        """ """
         a = array([1, 3, 2])
         assert_equal(a.ndim, 1)
 
     def test_testAPI(self):
+        """ """
         assert_(not [m for m in dir(np.ndarray)
                      if m not in dir(MaskedArray) and
                      not m.startswith('_')])
 
     def test_testSingleElementSubscript(self):
+        """ """
         a = array([1, 3, 2])
         b = array([1, 3, 2], mask=[1, 0, 1])
         assert_equal(a[0].shape, ())
@@ -699,11 +743,14 @@
 
 
 class TestUfuncs:
+    """ """
     def setup(self):
+        """ """
         self.d = (array([1.0, 0, -1, pi / 2] * 2, mask=[0, 1] + [0] * 6),
                   array([1.0, 0, -1, pi / 2] * 2, mask=[1, 0] + [0] * 6),)
 
     def test_testUfuncRegression(self):
+        """ """
         f_invalid_ignore = [
             'sqrt', 'arctanh', 'arcsin', 'arccos',
             'arccosh', 'arctanh', 'log', 'log10', 'divide',
@@ -741,6 +788,7 @@
             assert_(eqmask(ur.mask, mr.mask))
 
     def test_reduce(self):
+        """ """
         a = self.d[0]
         assert_(not alltrue(a, axis=0))
         assert_(sometrue(a, axis=0))
@@ -748,6 +796,7 @@
         assert_equal(product(a, axis=0), 0)
 
     def test_minmax(self):
+        """ """
         a = arange(1, 13).reshape(3, 4)
         amask = masked_where(a < 5, a)
         assert_equal(amask.max(), a.max())
@@ -758,14 +807,17 @@
         assert_(amask.min(1)[0].mask)
 
     def test_nonzero(self):
+        """ """
         for t in "?bhilqpBHILQPfdgFDGO":
             x = array([1, 0, 2, 0], mask=[0, 0, 1, 1])
             assert_(eq(nonzero(x), [0]))
 
 
 class TestArrayMethods:
+    """ """
 
     def setup(self):
+        """ """
         x = np.array([8.375, 7.545, 8.828, 8.5, 1.757, 5.928,
                       8.43, 7.78, 9.865, 5.878, 8.979, 4.732,
                       3.012, 6.022, 5.095, 3.116, 5.238, 3.957,
@@ -788,6 +840,7 @@
         self.d = (x, X, XX, m, mx, mX, mXX)
 
     def test_trace(self):
+        """ """
         (x, X, XX, m, mx, mX, mXX,) = self.d
         mXdiag = mX.diagonal()
         assert_equal(mX.trace(), mX.diagonal().compressed().sum())
@@ -796,6 +849,7 @@
                                            axis=0)))
 
     def test_clip(self):
+        """ """
         (x, X, XX, m, mx, mX, mXX,) = self.d
         clipped = mx.clip(2, 8)
         assert_(eq(clipped.mask, mx.mask))
@@ -803,6 +857,7 @@
         assert_(eq(clipped._data, mx._data.clip(2, 8)))
 
     def test_ptp(self):
+        """ """
         (x, X, XX, m, mx, mX, mXX,) = self.d
         (n, m) = X.shape
         assert_equal(mx.ptp(), mx.compressed().ptp())
@@ -816,6 +871,7 @@
         assert_(eq(mX.ptp(1), rows))
 
     def test_swapaxes(self):
+        """ """
         (x, X, XX, m, mx, mX, mXX,) = self.d
         mXswapped = mX.swapaxes(0, 1)
         assert_(eq(mXswapped[-1], mX[:, -1]))
@@ -823,6 +879,7 @@
         assert_equal(mXXswapped.shape, (2, 2, 3, 3))
 
     def test_cumprod(self):
+        """ """
         (x, X, XX, m, mx, mX, mXX,) = self.d
         mXcp = mX.cumprod(0)
         assert_(eq(mXcp._data, mX.filled(1).cumprod(0)))
@@ -830,6 +887,7 @@
         assert_(eq(mXcp._data, mX.filled(1).cumprod(1)))
 
     def test_cumsum(self):
+        """ """
         (x, X, XX, m, mx, mX, mXX,) = self.d
         mXcp = mX.cumsum(0)
         assert_(eq(mXcp._data, mX.filled(0).cumsum(0)))
@@ -837,6 +895,7 @@
         assert_(eq(mXcp._data, mX.filled(0).cumsum(1)))
 
     def test_varstd(self):
+        """ """
         (x, X, XX, m, mx, mX, mXX,) = self.d
         assert_(eq(mX.var(axis=None), mX.compressed().var()))
         assert_(eq(mX.std(axis=None), mX.compressed().std()))
@@ -851,6 +910,19 @@
 
 
 def eqmask(m1, m2):
+    """
+
+    Parameters
+    ----------
+    m1 :
+        
+    m2 :
+        
+
+    Returns
+    -------
+
+    """
     if m1 is nomask:
         return m2 is nomask
     if m2 is nomask:
