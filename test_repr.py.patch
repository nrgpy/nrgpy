# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/series/test_repr.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/series/test_repr.py
@@ -19,7 +19,9 @@
 
 
 class TestSeriesRepr:
+    """ """
     def test_multilevel_name_print(self):
+        """ """
         index = MultiIndex(
             levels=[["foo", "bar", "baz", "qux"], ["one", "two", "three"]],
             codes=[[0, 0, 0, 1, 1, 2, 2, 3, 3, 3], [0, 1, 2, 0, 1, 1, 2, 0, 1, 2]],
@@ -44,6 +46,7 @@
         assert repr(s) == expected
 
     def test_name_printing(self):
+        """ """
         # Test small Series.
         s = Series([0, 1, 2])
 
@@ -66,6 +69,21 @@
         assert "Name: test" in repr(s)
 
     def test_repr(self, datetime_series, string_series, object_series):
+        """
+
+        Parameters
+        ----------
+        datetime_series :
+            
+        string_series :
+            
+        object_series :
+            
+
+        Returns
+        -------
+
+        """
         str(datetime_series)
         str(string_series)
         str(string_series.astype(int))
@@ -131,11 +149,23 @@
         assert repr(s) == "Series([], dtype: int64)"
 
     def test_tidy_repr(self):
+        """ """
         a = Series(["\u05d0"] * 1000)
         a.name = "title1"
         repr(a)  # should not raise exception
 
     def test_repr_bool_fails(self, capsys):
+        """
+
+        Parameters
+        ----------
+        capsys :
+            
+
+        Returns
+        -------
+
+        """
         s = Series([DataFrame(np.random.randn(2, 2)) for i in range(5)])
 
         # It works (with no Cython exception barf)!
@@ -145,6 +175,7 @@
         assert captured.err == ""
 
     def test_repr_name_iterable_indexable(self):
+        """ """
         s = Series([1, 2, 3], name=np.int64(3))
 
         # it works!
@@ -154,6 +185,7 @@
         repr(s)
 
     def test_repr_should_return_str(self):
+        """ """
         # https://docs.python.org/3/reference/datamodel.html#object.__repr__
         # ...The return value must be a string object.
 
@@ -165,15 +197,18 @@
         assert type(df.__repr__() == str)  # both py2 / 3
 
     def test_repr_max_rows(self):
+        """ """
         # GH 6863
         with pd.option_context("max_rows", None):
             str(Series(range(1001)))  # should not raise exception
 
     def test_unicode_string_with_unicode(self):
+        """ """
         df = Series(["\u05d0"], name="\u05d1")
         str(df)
 
     def test_str_to_bytes_raises(self):
+        """ """
         # GH 26447
         df = Series(["abc"], name="abc")
         msg = "^'str' object cannot be interpreted as an integer$"
@@ -181,6 +216,7 @@
             bytes(df)
 
     def test_timeseries_repr_object_dtype(self):
+        """ """
         index = Index(
             [datetime(2000, 1, 1) + timedelta(i) for i in range(1000)], dtype=object
         )
@@ -194,16 +230,21 @@
         repr(ts2).splitlines()[-1]
 
     def test_latex_repr(self):
-        result = r"""\begin{tabular}{ll}
-\toprule
-{} &         0 \\
-\midrule
-0 &  $\alpha$ \\
-1 &         b \\
-2 &         c \\
-\bottomrule
-\end{tabular}
-"""
+        """result = r"""\begin{tabular}{ll}
+        \toprule
+        {} & 0 \\
+        \midrule
+        0 &  $\alpha$ \\
+        1 & b \\
+        2 & c \\
+        \bottomrule
+        \end{tabular}
+
+        Parameters
+        ----------
+
+        Returns
+        -------
         with option_context("display.latex.escape", False, "display.latex.repr", True):
             s = Series([r"$\alpha$", "b", "c"])
             assert result == s._repr_latex_()
@@ -211,6 +252,7 @@
         assert s._repr_latex_() is None
 
     def test_index_repr_in_frame_with_nan(self):
+        """ """
         # see gh-25061
         i = Index([1, np.nan])
         s = Series([1, 2], index=i)
@@ -219,12 +261,14 @@
         assert repr(s) == exp
 
     def test_format_pre_1900_dates(self):
+        """ """
         rng = date_range("1/1/1850", "1/1/1950", freq="A-DEC")
         rng.format()
         ts = Series(1, index=rng)
         repr(ts)
 
     def test_series_repr_nat(self):
+        """ """
         series = Series([0, 1000, 2000, pd.NaT.value], dtype="M8[ns]")
 
         result = repr(series)
@@ -239,10 +283,13 @@
 
 
 class TestCategoricalRepr:
+    """ """
     def test_categorical_repr_unicode(self):
+        """ """
         # see gh-21002
 
         class County:
+            """ """
             name = "San Sebasti√°n"
             state = "PR"
 
@@ -257,6 +304,7 @@
         str(ser)
 
     def test_categorical_repr(self):
+        """ """
         a = Series(Categorical([1, 2, 3, 4]))
         exp = (
             "0    1\n1    2\n2    3\n3    4\n"
@@ -284,6 +332,7 @@
         assert exp == a.__str__()
 
     def test_categorical_series_repr(self):
+        """ """
         s = Series(Categorical([1, 2, 3]))
         exp = """0    1
 1    2
@@ -310,6 +359,7 @@
         assert repr(s) == exp
 
     def test_categorical_series_repr_ordered(self):
+        """ """
         s = Series(Categorical([1, 2, 3], ordered=True))
         exp = """0    1
 1    2
@@ -336,6 +386,7 @@
         assert repr(s) == exp
 
     def test_categorical_series_repr_datetime(self):
+        """ """
         idx = date_range("2011-01-01 09:00", freq="H", periods=5)
         s = Series(Categorical(idx))
         exp = """0   2011-01-01 09:00:00
@@ -364,6 +415,7 @@
         assert repr(s) == exp
 
     def test_categorical_series_repr_datetime_ordered(self):
+        """ """
         idx = date_range("2011-01-01 09:00", freq="H", periods=5)
         s = Series(Categorical(idx, ordered=True))
         exp = """0   2011-01-01 09:00:00
@@ -392,6 +444,7 @@
         assert repr(s) == exp
 
     def test_categorical_series_repr_period(self):
+        """ """
         idx = period_range("2011-01-01 09:00", freq="H", periods=5)
         s = Series(Categorical(idx))
         exp = """0    2011-01-01 09:00
@@ -418,6 +471,7 @@
         assert repr(s) == exp
 
     def test_categorical_series_repr_period_ordered(self):
+        """ """
         idx = period_range("2011-01-01 09:00", freq="H", periods=5)
         s = Series(Categorical(idx, ordered=True))
         exp = """0    2011-01-01 09:00
@@ -444,6 +498,7 @@
         assert repr(s) == exp
 
     def test_categorical_series_repr_timedelta(self):
+        """ """
         idx = timedelta_range("1 days", periods=5)
         s = Series(Categorical(idx))
         exp = """0   1 days
@@ -476,6 +531,7 @@
         assert repr(s) == exp
 
     def test_categorical_series_repr_timedelta_ordered(self):
+        """ """
         idx = timedelta_range("1 days", periods=5)
         s = Series(Categorical(idx, ordered=True))
         exp = """0   1 days
