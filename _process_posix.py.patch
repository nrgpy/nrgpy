# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/utils/_process_posix.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/utils/_process_posix.py
@@ -32,7 +32,17 @@
 #-----------------------------------------------------------------------------
 
 def _find_cmd(cmd):
-    """Find the full path to a command using which."""
+    """Find the full path to a command using which.
+
+    Parameters
+    ----------
+    cmd :
+        
+
+    Returns
+    -------
+
+    """
 
     path = sp.Popen(['/usr/bin/env', 'which', cmd],
                     stdout=sp.PIPE, stderr=sp.PIPE).communicate()[0]
@@ -40,8 +50,7 @@
 
 
 class ProcessHandler(object):
-    """Execute subprocesses under the control of pexpect.
-    """
+    """Execute subprocesses under the control of pexpect."""
     # Timeout in seconds to wait on each reading of the subprocess' output.
     # This should not be set too low to avoid cpu overusage from our side,
     # since we read in a loop whose period is controlled by this timeout.
@@ -59,6 +68,7 @@
 
     @property
     def sh(self):
+        """ """
         if self._sh is None:
             shell_name = os.environ.get("SHELL", "sh")
             self._sh = pexpect.which(shell_name)
@@ -82,15 +92,12 @@
         Parameters
         ----------
         cmd : str
-          A command to be executed in the system shell.
+            A command to be executed in the system shell.
 
         Returns
         -------
-        output : str
-          A string containing the combination of stdout and stderr from the
-        subprocess, in whatever order the subprocess originally wrote to its
-        file descriptors (so the order of the information in this string is the
-        correct order as would be seen if running the command in a terminal).
+
+        
         """
         try:
             return pexpect.run(self.sh, args=['-c', cmd]).replace('\r\n', '\n')
@@ -103,15 +110,12 @@
         Parameters
         ----------
         cmd : str
-          A command to be executed in the system shell.
+            A command to be executed in the system shell.
 
         Returns
         -------
-        output : str
-          A string containing the combination of stdout and stderr from the
-        subprocess, in whatever order the subprocess originally wrote to its
-        file descriptors (so the order of the information in this string is the
-        correct order as would be seen if running the command in a terminal).
+
+        
         """
         try:
             return pexpect.run(self.sh, args=['-c', cmd]).replace('\r\n', '\n')
@@ -124,11 +128,12 @@
         Parameters
         ----------
         cmd : str
-          A command to be executed in the system shell.
+            A command to be executed in the system shell.
 
         Returns
         -------
-        int : child's exitstatus
+
+        
         """
         # Get likely encoding for the output.
         enc = DEFAULT_ENCODING
@@ -212,6 +217,17 @@
 system = ProcessHandler().system
 
 def check_pid(pid):
+    """
+
+    Parameters
+    ----------
+    pid :
+        
+
+    Returns
+    -------
+
+    """
     try:
         os.kill(pid, 0)
     except OSError as err:
