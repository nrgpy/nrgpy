# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/tslibs/test_array_to_datetime.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/tslibs/test_array_to_datetime.py
@@ -32,6 +32,19 @@
     ],
 )
 def test_parsing_valid_dates(data, expected):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     arr = np.array(data, dtype=object)
     result, _ = tslib.array_to_datetime(arr)
 
@@ -49,6 +62,19 @@
     ],
 )
 def test_parsing_timezone_offsets(dt_string, expected_tz):
+    """
+
+    Parameters
+    ----------
+    dt_string :
+        
+    expected_tz :
+        
+
+    Returns
+    -------
+
+    """
     # All of these datetime strings with offsets are equivalent
     # to the same datetime after the timezone offset is added.
     arr = np.array(["01-01-2013 00:00:00"], dtype=object)
@@ -62,6 +88,7 @@
 
 
 def test_parsing_non_iso_timezone_offset():
+    """ """
     dt_string = "01-01-2013T00:00:00.000000000+0000"
     arr = np.array([dt_string], dtype=object)
 
@@ -73,6 +100,7 @@
 
 
 def test_parsing_different_timezone_offsets():
+    """ """
     # see gh-17697
     data = ["2015-11-18 15:30:00+05:30", "2015-11-18 15:30:00+06:30"]
     data = np.array(data, dtype=object)
@@ -94,6 +122,17 @@
     "data", [["-352.737091", "183.575577"], ["1", "2", "3", "4", "5"]]
 )
 def test_number_looking_strings_not_into_datetime(data):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-4601
     #
     # These strings don't look like datetimes, so
@@ -116,6 +155,19 @@
 )
 @pytest.mark.parametrize("errors", ["coerce", "raise"])
 def test_coerce_outside_ns_bounds(invalid_date, errors):
+    """
+
+    Parameters
+    ----------
+    invalid_date :
+        
+    errors :
+        
+
+    Returns
+    -------
+
+    """
     arr = np.array([invalid_date], dtype="object")
     kwargs = dict(values=arr, errors=errors)
 
@@ -132,6 +184,7 @@
 
 
 def test_coerce_outside_ns_bounds_one_valid():
+    """ """
     arr = np.array(["1/1/1000", "1/1/2000"], dtype=object)
     result, _ = tslib.array_to_datetime(arr, errors="coerce")
 
@@ -143,6 +196,17 @@
 
 @pytest.mark.parametrize("errors", ["ignore", "coerce"])
 def test_coerce_of_invalid_datetimes(errors):
+    """
+
+    Parameters
+    ----------
+    errors :
+        
+
+    Returns
+    -------
+
+    """
     arr = np.array(["01-01-2013", "not_a_date", "1"], dtype=object)
     kwargs = dict(values=arr, errors=errors)
 
@@ -162,6 +226,7 @@
 
 
 def test_to_datetime_barely_out_of_bounds():
+    """ """
     # see gh-19382, gh-19529
     #
     # Close enough to bounds that dropping nanos
@@ -174,6 +239,7 @@
 
 
 class SubDatetime(datetime):
+    """ """
     pass
 
 
@@ -186,6 +252,19 @@
     ],
 )
 def test_datetime_subclass(data, expected):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     # GH 25851
     # ensure that subclassed datetime works with
     # array_to_datetime
