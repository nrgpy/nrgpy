# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pygments/lexers/textfmts.py
+++ b/..//venv/lib/python3.8/site-packages/pygments/lexers/textfmts.py
@@ -22,9 +22,7 @@
 
 
 class IrcLogsLexer(RegexLexer):
-    """
-    Lexer for IRC logs in *irssi*, *xchat* or *weechat* style.
-    """
+    """Lexer for IRC logs in *irssi*, *xchat* or *weechat* style."""
 
     name = 'IRC logs'
     aliases = ['irc']
@@ -85,10 +83,16 @@
 
 
 class GettextLexer(RegexLexer):
-    """
-    Lexer for Gettext catalog files.
-
+    """Lexer for Gettext catalog files.
+    
     .. versionadded:: 0.9
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Gettext Catalog'
     aliases = ['pot', 'po']
@@ -113,10 +117,16 @@
 
 
 class HttpLexer(RegexLexer):
-    """
-    Lexer for HTTP sessions.
-
+    """Lexer for HTTP sessions.
+    
     .. versionadded:: 1.5
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'HTTP'
@@ -125,11 +135,36 @@
     flags = re.DOTALL
 
     def get_tokens_unprocessed(self, text, stack=('root',)):
-        """Reset the content-type state."""
+        """Reset the content-type state.
+
+        Parameters
+        ----------
+        text :
+            
+        stack :
+             (Default value = ('root')
+        ) :
+            
+
+        Returns
+        -------
+
+        """
         self.content_type = None
         return RegexLexer.get_tokens_unprocessed(self, text, stack)
 
     def header_callback(self, match):
+        """
+
+        Parameters
+        ----------
+        match :
+            
+
+        Returns
+        -------
+
+        """
         if match.group(1).lower() == 'content-type':
             content_type = match.group(5).strip()
             if ';' in content_type:
@@ -143,11 +178,33 @@
         yield match.start(6), Text, match.group(6)
 
     def continuous_header_callback(self, match):
+        """
+
+        Parameters
+        ----------
+        match :
+            
+
+        Returns
+        -------
+
+        """
         yield match.start(1), Text, match.group(1)
         yield match.start(2), Literal, match.group(2)
         yield match.start(3), Text, match.group(3)
 
     def content_callback(self, match):
+        """
+
+        Parameters
+        ----------
+        match :
+            
+
+        Returns
+        -------
+
+        """
         content_type = getattr(self, 'content_type', None)
         content = match.group()
         offset = match.start()
@@ -195,15 +252,32 @@
     }
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         return text.startswith(('GET /', 'POST /', 'PUT /', 'DELETE /', 'HEAD /',
                                 'OPTIONS /', 'TRACE /', 'PATCH /'))
 
 
 class TodotxtLexer(RegexLexer):
-    """
-    Lexer for `Todo.txt <http://todotxt.com/>`_ todo list format.
-
+    """Lexer for `Todo.txt <http://todotxt.com/>`_ todo list format.
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Todotxt'
@@ -300,22 +374,39 @@
 
 
 class NotmuchLexer(RegexLexer):
-    """
-    For `Notmuch <https://notmuchmail.org/>`_ email text format.
-
+    """For `Notmuch <https://notmuchmail.org/>`_ email text format.
+    
     .. versionadded:: 2.5
-
+    
     Additional options accepted:
-
+    
     `body_lexer`
         If given, highlight the contents of the message body with the specified
         lexer, else guess it according to the body content (default: ``None``).
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Notmuch'
     aliases = ['notmuch']
 
     def _highlight_code(self, match):
+        """
+
+        Parameters
+        ----------
+        match :
+            
+
+        Returns
+        -------
+
+        """
         code = match.group(1)
 
         try:
@@ -374,6 +465,17 @@
     }
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         return 1.0 if text.startswith('\fmessage{') else 0.0
 
     def __init__(self, **options):
@@ -382,10 +484,16 @@
 
 
 class KernelLogLexer(RegexLexer):
-    """
-    For Linux Kernel log ("dmesg") output.
-
+    """For Linux Kernel log ("dmesg") output.
+    
     .. versionadded:: 2.6
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Kernel log'
     aliases = ['kmsg', 'dmesg']
