# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/tests/test_debugger.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/tests/test_debugger.py
@@ -28,16 +28,23 @@
 #-----------------------------------------------------------------------------
 
 class _FakeInput(object):
-    """
-    A fake input stream for pdb's interactive debugger.  Whenever a
+    """A fake input stream for pdb's interactive debugger.  Whenever a
     line is read, print it (to simulate the user typing it), and then
-    return it.  The set of lines to return is specified in the
-    constructor; they should not have trailing newlines.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+    type
+        constructor; they should not have trailing newlines.
+
     """
     def __init__(self, lines):
         self.lines = iter(lines)
 
     def readline(self):
+        """ """
         line = next(self.lines)
         print(line)
         return line+'\n'
@@ -60,6 +67,7 @@
 #-----------------------------------------------------------------------------
 
 def test_longer_repr():
+    """ """
     try:
         from reprlib import repr as trepr  # Py 3
     except ImportError:
@@ -77,9 +85,24 @@
     nt.assert_equal(trepr(a), ar)
 
 def test_ipdb_magics():
-    '''Test calling some IPython magics from ipdb.
-
+    """Test calling some IPython magics from ipdb.
+    
     First, set up some test functions and classes which we can inspect.
+    
+    
+    
+    
+    Create a function which triggers ipdb.
+    
+    
+    
+    Restore previous trace function, e.g. for coverage.py
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     >>> class ExampleClass(object):
     ...    """Docstring for ExampleClass."""
@@ -88,19 +111,17 @@
     ...        pass
     ...    def __str__(self):
     ...        return "ExampleClass()"
-
+    
     >>> def example_function(x, y, z="hello"):
     ...     """Docstring for example_function."""
     ...     pass
-
+    
     >>> old_trace = sys.gettrace()
-
-    Create a function which triggers ipdb.
-
+    
     >>> def trigger_ipdb():
     ...    a = ExampleClass()
     ...    debugger.Pdb().set_trace()
-
+    
     >>> with PdbTestInput([
     ...    'pdef example_function',
     ...    'pdoc ExampleClass',
@@ -159,21 +180,29 @@
     <BLANKLINE>
     ipdb> continue
     
-    Restore previous trace function, e.g. for coverage.py    
-    
     >>> sys.settrace(old_trace)
-    '''
 
 def test_ipdb_magics2():
-    '''Test ipdb with a very short function.
-    
+    """Test ipdb with a very short function.
+    
+    
+    
+    Run ipdb.
+    
+    
+    Restore previous trace function, e.g. for coverage.py
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     >>> old_trace = sys.gettrace()
-
+    
     >>> def bar():
     ...     pass
-
-    Run ipdb.
-
+    
     >>> with PdbTestInput([
     ...    'continue',
     ... ]):
@@ -184,19 +213,28 @@
     <BLANKLINE>
     ipdb> continue
     
-    Restore previous trace function, e.g. for coverage.py    
-    
     >>> sys.settrace(old_trace)
-    '''
+    """
 
 def can_quit():
-    '''Test that quit work in ipydb
+    """Test that quit work in ipydb
+    
+    
+    
+    
+    Restore previous trace function, e.g. for coverage.py
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     >>> old_trace = sys.gettrace()
-
+    
     >>> def bar():
     ...     pass
-
+    
     >>> with PdbTestInput([
     ...    'quit',
     ... ]):
@@ -206,21 +244,30 @@
     ----> 2    pass
     <BLANKLINE>
     ipdb> quit
-
+    
+    >>> sys.settrace(old_trace)
+    """
+
+
+def can_exit():
+    """Test that quit work in ipydb
+    
+    
+    
+    
     Restore previous trace function, e.g. for coverage.py
 
-    >>> sys.settrace(old_trace)
-    '''
-
-
-def can_exit():
-    '''Test that quit work in ipydb
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     >>> old_trace = sys.gettrace()
-
+    
     >>> def bar():
     ...     pass
-
+    
     >>> with PdbTestInput([
     ...    'exit',
     ... ]):
@@ -230,21 +277,39 @@
     ----> 2    pass
     <BLANKLINE>
     ipdb> exit
-
-    Restore previous trace function, e.g. for coverage.py
-
+    
     >>> sys.settrace(old_trace)
-    '''
+    """
 
 
 def test_interruptible_core_debugger():
     """The debugger can be interrupted.
-
+    
     The presumption is there is some mechanism that causes a KeyboardInterrupt
     (this is implemented in ipykernel).  We want to ensure the
     KeyboardInterrupt cause debugging to cease.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     def raising_input(msg="", called=[0]):
+        """
+
+        Parameters
+        ----------
+        msg :
+             (Default value = "")
+        called :
+             (Default value = [0])
+
+        Returns
+        -------
+
+        """
         called[0] += 1
         if called[0] == 1:
             raise KeyboardInterrupt()
@@ -262,8 +327,15 @@
 @skip_win32
 def test_xmode_skip():
     """that xmode skip frames
-
+    
     Not as a doctest as pytest does not run doctests.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     import pexpect
     env = os.environ.copy()
@@ -281,10 +353,12 @@
     block = dedent(
         """
 def f():
+    """ """
     __tracebackhide__ = True
     g()
 
 def g():
+    """ """
     raise ValueError
 
 f()
@@ -299,10 +373,12 @@
     block = dedent(
         """
 def f():
+    """ """
     __tracebackhide__ = True
     g()
 
 def g():
+    """ """
     from IPython.core.debugger import set_trace
     set_trace()
 
