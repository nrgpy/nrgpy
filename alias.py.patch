# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/alias.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/alias.py
@@ -38,8 +38,7 @@
 shell_line_split = re.compile(r'^(\s*)()(\S+)(.*$)')
 
 def default_aliases():
-    """Return list of shell aliases to auto-define.
-    """
+    """ """
     # Note: the aliases defined here should be safe to use on a kernel
     # regardless of what frontend it is attached to.  Frontends that use a
     # kernel in-process can define additional aliases that will only work in
@@ -111,16 +110,25 @@
 
 
 class AliasError(Exception):
+    """ """
     pass
 
 
 class InvalidAliasError(AliasError):
+    """ """
     pass
 
 class Alias(object):
     """Callable object storing the details of one alias.
-
+    
     Instances are registered as magic functions to allow use of aliases.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     # Prepare blacklist
@@ -190,6 +198,7 @@
 #-----------------------------------------------------------------------------
 
 class AliasManager(Configurable):
+    """ """
 
     default_aliases = List(default_aliases()).tag(config=True)
     user_aliases = List(default_value=[]).tag(config=True)
@@ -202,6 +211,7 @@
         self.init_aliases()
 
     def init_aliases(self):
+        """ """
         # Load default & user aliases
         for name, cmd in self.default_aliases + self.user_aliases:
             if cmd.startswith('ls ') and self.shell.colors == 'NoColor':
@@ -210,11 +220,24 @@
 
     @property
     def aliases(self):
+        """ """
         return [(n, func.cmd) for (n, func) in self.linemagics.items()
                             if isinstance(func, Alias)]
 
     def soft_define_alias(self, name, cmd):
-        """Define an alias, but don't raise on an AliasError."""
+        """Define an alias, but don't raise on an AliasError.
+
+        Parameters
+        ----------
+        name :
+            
+        cmd :
+            
+
+        Returns
+        -------
+
+        """
         try:
             self.define_alias(name, cmd)
         except AliasError as e:
@@ -222,35 +245,92 @@
 
     def define_alias(self, name, cmd):
         """Define a new alias after validating it.
-
+        
         This will raise an :exc:`AliasError` if there are validation
         problems.
+
+        Parameters
+        ----------
+        name :
+            
+        cmd :
+            
+
+        Returns
+        -------
+
         """
         caller = Alias(shell=self.shell, name=name, cmd=cmd)
         self.shell.magics_manager.register_function(caller, magic_kind='line',
                                                     magic_name=name)
 
     def get_alias(self, name):
-        """Return an alias, or None if no alias by that name exists."""
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+        type
+            
+
+        """
         aname = self.linemagics.get(name, None)
         return aname if isinstance(aname, Alias) else None
 
     def is_alias(self, name):
-        """Return whether or not a given name has been defined as an alias"""
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+        type
+            
+
+        """
         return self.get_alias(name) is not None
 
     def undefine_alias(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         if self.is_alias(name):
             del self.linemagics[name]
         else:
             raise ValueError('%s is not an alias' % name)
 
     def clear_aliases(self):
+        """ """
         for name, cmd in self.aliases:
             self.undefine_alias(name)
 
     def retrieve_alias(self, name):
-        """Retrieve the command to which an alias expands."""
+        """Retrieve the command to which an alias expands.
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         caller = self.get_alias(name)
         if caller:
             return caller.cmd
