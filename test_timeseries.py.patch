# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/series/test_timeseries.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/series/test_timeseries.py
@@ -7,13 +7,16 @@
 
 
 class TestTimeSeries:
+    """ """
     def test_timeseries_coercion(self):
+        """ """
         idx = tm.makeDateIndex(10000)
         ser = Series(np.random.randn(len(idx)), idx.astype(object))
         assert ser.index.is_all_dates
         assert isinstance(ser.index, DatetimeIndex)
 
     def test_contiguous_boolean_preserve_freq(self):
+        """ """
         rng = date_range("1/1/2000", "3/1/2000", freq="B")
 
         mask = np.zeros(len(rng), dtype=bool)
@@ -29,6 +32,7 @@
         assert masked.freq is None
 
     def test_promote_datetime_date(self):
+        """ """
         rng = date_range("1/1/2000", periods=20)
         ts = Series(np.random.randn(20), index=rng)
 
@@ -53,6 +57,7 @@
         tm.assert_numpy_array_equal(result, expected)
 
     def test_groupby_count_dateparseerror(self):
+        """ """
         dr = date_range(start="1/1/2012", freq="5min", periods=10)
 
         # BAD Example, datetimes first
@@ -67,10 +72,22 @@
         tm.assert_series_equal(result, expected)
 
     def test_series_map_box_timedelta(self):
+        """ """
         # GH 11349
         s = Series(timedelta_range("1 day 1 s", periods=5, freq="h"))
 
         def f(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return x.total_seconds()
 
         s.map(f)
@@ -78,6 +95,7 @@
         DataFrame(s).applymap(f)
 
     def test_asfreq_resample_set_correct_freq(self):
+        """ """
         # GH5613
         # we test if .asfreq() and .resample() set the correct value for .freq
         df = pd.DataFrame(
@@ -96,6 +114,7 @@
         assert df.resample("D").asfreq().index.freq == "D"
 
     def test_view_tz(self):
+        """ """
         # GH#24024
         ser = pd.Series(pd.date_range("2000", periods=4, tz="US/Central"))
         result = ser.view("i8")
@@ -111,6 +130,17 @@
 
     @pytest.mark.parametrize("tz", [None, "US/Central"])
     def test_asarray_object_dt64(self, tz):
+        """
+
+        Parameters
+        ----------
+        tz :
+            
+
+        Returns
+        -------
+
+        """
         ser = pd.Series(pd.date_range("2000", periods=2, tz=tz))
 
         with tm.assert_produces_warning(None):
@@ -123,6 +153,7 @@
         tm.assert_numpy_array_equal(result, expected)
 
     def test_asarray_tz_naive(self):
+        """ """
         # This shouldn't produce a warning.
         ser = pd.Series(pd.date_range("2000", periods=2))
         expected = np.array(["2000-01-01", "2000-01-02"], dtype="M8[ns]")
@@ -131,6 +162,7 @@
         tm.assert_numpy_array_equal(result, expected)
 
     def test_asarray_tz_aware(self):
+        """ """
         tz = "US/Central"
         ser = pd.Series(pd.date_range("2000", periods=2, tz=tz))
         expected = np.array(["2000-01-01T06", "2000-01-02T06"], dtype="M8[ns]")
