# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test_mixins.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test_mixins.py
@@ -9,6 +9,7 @@
 # docstring for NDArrayOperatorsMixin.
 
 class ArrayLike(np.lib.mixins.NDArrayOperatorsMixin):
+    """ """
     def __init__(self, value):
         self.value = np.asarray(value)
 
@@ -50,6 +51,17 @@
 
 
 def wrap_array_like(result):
+    """
+
+    Parameters
+    ----------
+    result :
+        
+
+    Returns
+    -------
+
+    """
     if type(result) is tuple:
         return tuple(ArrayLike(r) for r in result)
     else:
@@ -57,6 +69,21 @@
 
 
 def _assert_equal_type_and_value(result, expected, err_msg=None):
+    """
+
+    Parameters
+    ----------
+    result :
+        
+    expected :
+        
+    err_msg :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     assert_equal(type(result), type(expected), err_msg=err_msg)
     if isinstance(result, tuple):
         assert_equal(len(result), len(expected), err_msg=err_msg)
@@ -92,10 +119,23 @@
 
 
 class TestNDArrayOperatorsMixin:
+    """ """
 
     def test_array_like_add(self):
+        """ """
 
         def check(result):
+            """
+
+            Parameters
+            ----------
+            result :
+                
+
+            Returns
+            -------
+
+            """
             _assert_equal_type_and_value(result, ArrayLike(0))
 
         check(ArrayLike(0) + 0)
@@ -111,6 +151,7 @@
         check(np.array(0) + ArrayLike(np.array(0)))
 
     def test_inplace(self):
+        """ """
         array_like = ArrayLike(np.array([0]))
         array_like += 1
         _assert_equal_type_and_value(array_like, ArrayLike(np.array([1])))
@@ -120,6 +161,7 @@
         _assert_equal_type_and_value(array, ArrayLike(np.array([1])))
 
     def test_opt_out(self):
+        """ """
 
         class OptOut:
             """Object that opts out of __array_ufunc__."""
@@ -148,6 +190,7 @@
             opt_out - array_like
 
     def test_subclass(self):
+        """ """
 
         class SubArrayLike(ArrayLike):
             """Should take precedence over ArrayLike."""
@@ -158,6 +201,7 @@
         _assert_equal_type_and_value(y + x, y)
 
     def test_object(self):
+        """ """
         x = ArrayLike(0)
         obj = object()
         with assert_raises(TypeError):
@@ -168,6 +212,7 @@
             x += obj
 
     def test_unary_methods(self):
+        """ """
         array = np.array([-1, 0, 1, 2])
         array_like = ArrayLike(array)
         for op in [operator.neg,
@@ -177,6 +222,7 @@
             _assert_equal_type_and_value(op(array_like), ArrayLike(op(array)))
 
     def test_forward_binary_methods(self):
+        """ """
         array = np.array([-1, 0, 1, 2])
         array_like = ArrayLike(array)
         for op in _ALL_BINARY_OPERATORS:
@@ -186,6 +232,7 @@
             _assert_equal_type_and_value(expected, actual, err_msg=err_msg)
 
     def test_reflected_binary_methods(self):
+        """ """
         for op in _ALL_BINARY_OPERATORS:
             expected = wrap_array_like(op(2, 1))
             actual = op(2, ArrayLike(1))
@@ -193,6 +240,7 @@
             _assert_equal_type_and_value(expected, actual, err_msg=err_msg)
 
     def test_matmul(self):
+        """ """
         array = np.array([1, 2], dtype=np.float64)
         array_like = ArrayLike(array)
         expected = ArrayLike(np.float64(5))
@@ -203,11 +251,13 @@
             expected, operator.matmul(array, array_like))
 
     def test_ufunc_at(self):
+        """ """
         array = ArrayLike(np.array([1, 2, 3, 4]))
         assert_(np.negative.at(array, np.array([0, 1])) is None)
         _assert_equal_type_and_value(array, ArrayLike([-1, -2, 3, 4]))
 
     def test_ufunc_two_outputs(self):
+        """ """
         mantissa, exponent = np.frexp(2 ** -3)
         expected = (ArrayLike(mantissa), ArrayLike(exponent))
         _assert_equal_type_and_value(
