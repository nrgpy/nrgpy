# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/arrays/sparse/test_accessor.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/arrays/sparse/test_accessor.py
@@ -11,8 +11,10 @@
 
 
 class TestSeriesAccessor:
+    """ """
     # TODO: collect other Series accessor tests
     def test_to_dense(self):
+        """ """
         s = pd.Series([0, 1, 0, 10], dtype="Sparse[int64]")
         result = s.sparse.to_dense()
         expected = pd.Series([0, 1, 0, 10])
@@ -20,7 +22,9 @@
 
 
 class TestFrameAccessor:
+    """ """
     def test_accessor_raises(self):
+        """ """
         df = pd.DataFrame({"A": [0, 1]})
         with pytest.raises(AttributeError, match="sparse"):
             df.sparse
@@ -30,6 +34,21 @@
     @pytest.mark.parametrize("dtype", ["float64", "int64"])
     @td.skip_if_no_scipy
     def test_from_spmatrix(self, format, labels, dtype):
+        """
+
+        Parameters
+        ----------
+        format :
+            
+        labels :
+            
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         import scipy.sparse
 
         sp_dtype = SparseDtype(dtype, np.array(0, dtype=dtype).item())
@@ -44,6 +63,17 @@
     @pytest.mark.parametrize("format", ["csc", "csr", "coo"])
     @td.skip_if_no_scipy
     def test_from_spmatrix_including_explicit_zero(self, format):
+        """
+
+        Parameters
+        ----------
+        format :
+            
+
+        Returns
+        -------
+
+        """
         import scipy.sparse
 
         mat = scipy.sparse.random(10, 2, density=0.5, format=format)
@@ -59,6 +89,17 @@
     )
     @td.skip_if_no_scipy
     def test_from_spmatrix_columns(self, columns):
+        """
+
+        Parameters
+        ----------
+        columns :
+            
+
+        Returns
+        -------
+
+        """
         import scipy.sparse
 
         dtype = SparseDtype("float64", 0.0)
@@ -70,6 +111,7 @@
 
     @td.skip_if_no_scipy
     def test_to_coo(self):
+        """ """
         import scipy.sparse
 
         df = pd.DataFrame({"A": [0, 1, 0], "B": [1, 0, 0]}, dtype="Sparse[int64, 0]")
@@ -78,6 +120,7 @@
         assert (result != expected).nnz == 0
 
     def test_to_dense(self):
+        """ """
         df = pd.DataFrame(
             {
                 "A": SparseArray([1, 0], dtype=SparseDtype("int64", 0)),
@@ -93,6 +136,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_density(self):
+        """ """
         df = pd.DataFrame(
             {
                 "A": SparseArray([1, 0, 2, 1], fill_value=0),
@@ -107,6 +151,19 @@
     @pytest.mark.parametrize("dense_index", [True, False])
     @td.skip_if_no_scipy
     def test_series_from_coo(self, dtype, dense_index):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+        dense_index :
+            
+
+        Returns
+        -------
+
+        """
         import scipy.sparse
 
         A = scipy.sparse.eye(3, format="coo", dtype=dtype)
@@ -120,6 +177,7 @@
 
     @td.skip_if_no_scipy
     def test_series_from_coo_incorrect_format_raises(self):
+        """ """
         # gh-26554
         import scipy.sparse
 
@@ -130,6 +188,7 @@
             pd.Series.sparse.from_coo(m)
 
     def test_with_column_named_sparse(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/30758
         df = pd.DataFrame({"sparse": pd.arrays.SparseArray([1, 2])})
         assert isinstance(df.sparse, pd.core.arrays.sparse.accessor.SparseFrameAccessor)
