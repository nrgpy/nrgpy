# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/terminal/tests/test_interactivshell.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/terminal/tests/test_interactivshell.py
@@ -15,8 +15,10 @@
 import nose.tools as nt
 
 class TestElide(unittest.TestCase):
+    """ """
 
     def test_elide(self):
+        """ """
         _elide('concatenate((a1, a2, ...), axis', '') # do not raise
         _elide('concatenate((a1, a2, ..), . axis', '') # do not raise
         nt.assert_equal(_elide('aaaa.bbbb.ccccc.dddddd.eeeee.fffff.gggggg.hhhhhh',''), 'aaaa.b…g.hhhhhh')
@@ -26,27 +28,42 @@
         nt.assert_equal(_elide(test_string, ''), expect_stirng)
 
     def test_elide_typed_normal(self):
+        """ """
         nt.assert_equal(_elide('the quick brown fox jumped over the lazy dog', 'the quick brown fox', min_elide=10), 'the…fox jumped over the lazy dog')
 
 
     def test_elide_typed_short_match(self):
-        """
-        if the match is too short we don't elide.
+        """if the match is too short we don't elide.
         avoid the "the...the"
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         nt.assert_equal(_elide('the quick brown fox jumped over the lazy dog', 'the', min_elide=10), 'the quick brown fox jumped over the lazy dog')
 
     def test_elide_typed_no_match(self):
-        """
-        if the match is too short we don't elide.
+        """if the match is too short we don't elide.
         avoid the "the...the"
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         # here we typed red instead of brown
         nt.assert_equal(_elide('the quick brown fox jumped over the lazy dog', 'the quick red fox', min_elide=10), 'the quick brown fox jumped over the lazy dog')
 
 class TestContextAwareCompletion(unittest.TestCase):
+    """ """
 
     def test_adjust_completion_text_based_on_context(self):
+        """ """
         # Adjusted case
         nt.assert_equal(_adjust_completion_text_based_on_context('arg1=', 'func1(a=)', 7), 'arg1')
 
@@ -60,8 +77,15 @@
 
 class mock_input_helper(object):
     """Machinery for tests of the main interact loop.
-
+    
     Used by the mock_input decorator.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     def __init__(self, testgen):
         self.testgen = testgen
@@ -77,6 +101,7 @@
         self.ip.prompt_for_code = self.orig_prompt_for_code
 
     def fake_input(self):
+        """ """
         try:
             return next(self.testgen)
         except StopIteration:
@@ -89,11 +114,21 @@
 
 def mock_input(testfunc):
     """Decorator for tests of the main interact loop.
-
+    
     Write the test as a generator, yield-ing the input strings, which IPython
     will see as if they were typed in at the prompt.
+
+    Parameters
+    ----------
+    testfunc :
+        
+
+    Returns
+    -------
+
     """
     def test_method(self):
+        """ """
         testgen = testfunc(self)
         with mock_input_helper(testgen) as mih:
             mih.ip.interact()
@@ -111,13 +146,27 @@
 # Test classes -----------------------------------------------------------------
 
 class InteractiveShellTestCase(unittest.TestCase):
+    """ """
     def rl_hist_entries(self, rl, n):
-        """Get last n readline history entries as a list"""
+        """Get last n readline history entries as a list
+
+        Parameters
+        ----------
+        rl :
+            
+        n :
+            
+
+        Returns
+        -------
+
+        """
         return [rl.get_history_item(rl.get_current_history_length() - x)
                 for x in range(n - 1, -1, -1)]
     
     @mock_input
     def test_inputtransformer_syntaxerror(self):
+        """ """
         ip = get_ipython()
         ip.input_transformers_post.append(syntax_error_transformer)
 
@@ -136,16 +185,19 @@
             ip.input_transformers_post.remove(syntax_error_transformer)
 
     def test_plain_text_only(self):
+        """ """
         ip = get_ipython()
         formatter = ip.display_formatter
         assert formatter.active_types == ['text/plain']
         assert not formatter.ipython_display_formatter.enabled
 
         class Test(object):
+            """ """
             def __repr__(self):
                 return "<Test %i>" % id(self)
 
             def _repr_html_(self):
+                """ """
                 return '<html>'
 
         # verify that HTML repr isn't computed
@@ -154,7 +206,9 @@
         self.assertEqual(data, {'text/plain': repr(obj)})
 
         class Test2(Test):
+            """ """
             def _ipython_display_(self):
+                """ """
                 from IPython.display import display
                 display('<custom>')
 
@@ -167,7 +221,17 @@
         assert captured.stdout == ''
 
 def syntax_error_transformer(lines):
-    """Transformer that throws SyntaxError if 'syntaxerror' is in the code."""
+    """Transformer that throws SyntaxError if 'syntaxerror' is in the code.
+
+    Parameters
+    ----------
+    lines :
+        
+
+    Returns
+    -------
+
+    """
     for line in lines:
         pos = line.find('syntaxerror')
         if pos >= 0:
@@ -179,6 +243,7 @@
 
 
 class TerminalMagicsTestCase(unittest.TestCase):
+    """ """
     def test_paste_magics_blankline(self):
         """Test that code with a blank line doesn't get split (gh-3246)."""
         ip = get_ipython()
