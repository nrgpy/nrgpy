# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/parso/pgen2/grammar_parser.py
+++ b/..//venv/lib/python3.8/site-packages/parso/pgen2/grammar_parser.py
@@ -11,9 +11,7 @@
 
 
 class GrammarParser():
-    """
-    The parser for Python grammar files.
-    """
+    """The parser for Python grammar files."""
     def __init__(self, bnf_grammar):
         self._bnf_grammar = bnf_grammar
         self.generator = tokenize(
@@ -23,6 +21,7 @@
         self._gettoken()  # Initialize lookahead
 
     def parse(self):
+        """ """
         # grammar: (NEWLINE | rule)* ENDMARKER
         while self.type != PythonTokenTypes.ENDMARKER:
             while self.type == PythonTokenTypes.NEWLINE:
@@ -38,6 +37,7 @@
             yield a, z
 
     def _parse_rhs(self):
+        """ """
         # rhs: items ('|' items)*
         a, z = self._parse_items()
         if self.value != "|":
@@ -58,6 +58,7 @@
             return aa, zz
 
     def _parse_items(self):
+        """ """
         # items: item+
         a, b = self._parse_item()
         while self.type in (PythonTokenTypes.NAME, PythonTokenTypes.STRING) \
@@ -69,6 +70,7 @@
         return a, b
 
     def _parse_item(self):
+        """ """
         # item: '[' rhs ']' | atom ['+' | '*']
         if self.value == "[":
             self._gettoken()
@@ -94,6 +96,7 @@
                 return a, a
 
     def _parse_atom(self):
+        """ """
         # atom: '(' rhs ')' | NAME | STRING
         if self.value == "(":
             self._gettoken()
@@ -112,6 +115,19 @@
                               self.type, self.value)
 
     def _expect(self, type_, value=None):
+        """
+
+        Parameters
+        ----------
+        type_ :
+            
+        value :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if self.type != type_:
             self._raise_error("expected %s, got %s [%s]",
                               type_, self.type, self.value)
@@ -122,10 +138,24 @@
         return value
 
     def _gettoken(self):
+        """ """
         tup = next(self.generator)
         self.type, self.value, self.begin, prefix = tup
 
     def _raise_error(self, msg, *args):
+        """
+
+        Parameters
+        ----------
+        msg :
+            
+        *args :
+            
+
+        Returns
+        -------
+
+        """
         if args:
             try:
                 msg = msg % args
@@ -137,6 +167,7 @@
 
 
 class NFAArc(object):
+    """ """
     def __init__(self, next_, nonterminal_or_string):
         self.next = next_
         self.nonterminal_or_string = nonterminal_or_string
@@ -146,11 +177,25 @@
 
 
 class NFAState(object):
+    """ """
     def __init__(self, from_rule):
         self.from_rule = from_rule
         self.arcs = []  # List[nonterminal (str), NFAState]
 
     def add_arc(self, next_, nonterminal_or_string=None):
+        """
+
+        Parameters
+        ----------
+        next_ :
+            
+        nonterminal_or_string :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         assert nonterminal_or_string is None or isinstance(nonterminal_or_string, str)
         assert isinstance(next_, NFAState)
         self.arcs.append(NFAArc(next_, nonterminal_or_string))
