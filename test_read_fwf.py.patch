# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/parser/test_read_fwf.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/parser/test_read_fwf.py
@@ -18,14 +18,19 @@
 
 
 def test_basic():
-    data = """\
-A         B            C            D
-201158    360.242940   149.910199   11950.7
-201159    444.953632   166.985655   11788.4
-201160    364.136849   183.628767   11806.2
-201161    413.836124   184.375703   11916.8
-201162    502.953953   173.237159   12468.3
-"""
+    """data = """\
+    A     B            C            D
+    201158360.242940   149.910199   11950.7
+    201159444.953632   166.985655   11788.4
+    201160364.136849   183.628767   11806.2
+    201161413.836124   184.375703   11916.8
+    201162502.953953   173.237159   12468.3
+
+    Parameters
+    ----------
+
+    Returns
+    -------
     result = read_fwf(StringIO(data))
     expected = DataFrame(
         [
@@ -41,14 +46,19 @@
 
 
 def test_colspecs():
-    data = """\
-A   B     C            D            E
-201158    360.242940   149.910199   11950.7
-201159    444.953632   166.985655   11788.4
-201160    364.136849   183.628767   11806.2
-201161    413.836124   184.375703   11916.8
-201162    502.953953   173.237159   12468.3
-"""
+    """data = """\
+    A   B C            D            E
+    201158360.242940   149.910199   11950.7
+    201159444.953632   166.985655   11788.4
+    201160364.136849   183.628767   11806.2
+    201161413.836124   184.375703   11916.8
+    201162502.953953   173.237159   12468.3
+
+    Parameters
+    ----------
+
+    Returns
+    -------
     colspecs = [(0, 4), (4, 8), (8, 20), (21, 33), (34, 43)]
     result = read_fwf(StringIO(data), colspecs=colspecs)
 
@@ -66,14 +76,19 @@
 
 
 def test_widths():
-    data = """\
-A    B    C            D            E
-2011 58   360.242940   149.910199   11950.7
-2011 59   444.953632   166.985655   11788.4
-2011 60   364.136849   183.628767   11806.2
-2011 61   413.836124   184.375703   11916.8
-2011 62   502.953953   173.237159   12468.3
-"""
+    """data = """\
+    AB    C            D            E
+    2011 58   360.242940   149.910199   11950.7
+    2011 59   444.953632   166.985655   11788.4
+    2011 60   364.136849   183.628767   11806.2
+    2011 61   413.836124   184.375703   11916.8
+    2011 62   502.953953   173.237159   12468.3
+
+    Parameters
+    ----------
+
+    Returns
+    -------
     result = read_fwf(StringIO(data), widths=[5, 5, 13, 13, 7])
 
     expected = DataFrame(
@@ -90,6 +105,7 @@
 
 
 def test_non_space_filler():
+    """ """
     # From Thomas Kluyver:
     #
     # Apparently, some non-space filler characters can be seen, this is
@@ -121,14 +137,19 @@
 
 
 def test_over_specified():
-    data = """\
-A   B     C            D            E
-201158    360.242940   149.910199   11950.7
-201159    444.953632   166.985655   11788.4
-201160    364.136849   183.628767   11806.2
-201161    413.836124   184.375703   11916.8
-201162    502.953953   173.237159   12468.3
-"""
+    """data = """\
+    A   B C            D            E
+    201158360.242940   149.910199   11950.7
+    201159444.953632   166.985655   11788.4
+    201160364.136849   183.628767   11806.2
+    201161413.836124   184.375703   11916.8
+    201162502.953953   173.237159   12468.3
+
+    Parameters
+    ----------
+
+    Returns
+    -------
     colspecs = [(0, 4), (4, 8), (8, 20), (21, 33), (34, 43)]
 
     with pytest.raises(ValueError, match="must specify only one of"):
@@ -136,27 +157,37 @@
 
 
 def test_under_specified():
-    data = """\
-A   B     C            D            E
-201158    360.242940   149.910199   11950.7
-201159    444.953632   166.985655   11788.4
-201160    364.136849   183.628767   11806.2
-201161    413.836124   184.375703   11916.8
-201162    502.953953   173.237159   12468.3
-"""
+    """data = """\
+    A   B C            D            E
+    201158360.242940   149.910199   11950.7
+    201159444.953632   166.985655   11788.4
+    201160364.136849   183.628767   11806.2
+    201161413.836124   184.375703   11916.8
+    201162502.953953   173.237159   12468.3
+
+    Parameters
+    ----------
+
+    Returns
+    -------
     with pytest.raises(ValueError, match="Must specify either"):
         read_fwf(StringIO(data), colspecs=None, widths=None)
 
 
 def test_read_csv_compat():
-    csv_data = """\
-A,B,C,D,E
-2011,58,360.242940,149.910199,11950.7
-2011,59,444.953632,166.985655,11788.4
-2011,60,364.136849,183.628767,11806.2
-2011,61,413.836124,184.375703,11916.8
-2011,62,502.953953,173.237159,12468.3
-"""
+    """csv_data = """\
+    A,B,C,D,E
+    2011,58,360.242940,149.910199,11950.7
+    2011,59,444.953632,166.985655,11788.4
+    2011,60,364.136849,183.628767,11806.2
+    2011,61,413.836124,184.375703,11916.8
+    2011,62,502.953953,173.237159,12468.3
+
+    Parameters
+    ----------
+
+    Returns
+    -------
     expected = read_csv(StringIO(csv_data), engine="python")
 
     fwf_data = """\
@@ -173,6 +204,7 @@
 
 
 def test_bytes_io_input():
+    """ """
     result = read_fwf(
         BytesIO("שלום\nשלום".encode("utf8")), widths=[2, 2], encoding="utf8"
     )
@@ -181,14 +213,19 @@
 
 
 def test_fwf_colspecs_is_list_or_tuple():
-    data = """index,A,B,C,D
-foo,2,3,4,5
-bar,7,8,9,10
-baz,12,13,14,15
-qux,12,13,14,15
-foo2,12,13,14,15
-bar2,12,13,14,15
-"""
+    """data = """index,A,B,C,D
+    foo,2,3,4,5
+    bar,7,8,9,10
+    baz,12,13,14,15
+    qux,12,13,14,15
+    foo2,12,13,14,15
+    bar2,12,13,14,15
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     msg = "column specifications must be a list or tuple.+"
 
@@ -197,14 +234,19 @@
 
 
 def test_fwf_colspecs_is_list_or_tuple_of_two_element_tuples():
-    data = """index,A,B,C,D
-foo,2,3,4,5
-bar,7,8,9,10
-baz,12,13,14,15
-qux,12,13,14,15
-foo2,12,13,14,15
-bar2,12,13,14,15
-"""
+    """data = """index,A,B,C,D
+    foo,2,3,4,5
+    bar,7,8,9,10
+    baz,12,13,14,15
+    qux,12,13,14,15
+    foo2,12,13,14,15
+    bar2,12,13,14,15
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     msg = "Each column specification must be.+"
 
@@ -222,6 +264,19 @@
     ],
 )
 def test_fwf_colspecs_none(colspecs, exp_data):
+    """
+
+    Parameters
+    ----------
+    colspecs :
+        
+    exp_data :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-7079
     data = """\
 123456
@@ -243,6 +298,19 @@
     ],
 )
 def test_fwf_colspecs_infer_nrows(infer_nrows, exp_data):
+    """
+
+    Parameters
+    ----------
+    infer_nrows :
+        
+    exp_data :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-15138
     data = """\
   1  2
@@ -255,6 +323,7 @@
 
 
 def test_fwf_regression():
+    """ """
     # see gh-3594
     #
     # Turns out "T060" is parsable as a datetime slice!
@@ -301,8 +370,14 @@
 
 
 def test_fwf_for_uint8():
-    data = """1421302965.213420    PRI=3 PGN=0xef00      DST=0x17 SRC=0x28    04 154 00 00 00 00 00 127
-1421302964.226776    PRI=6 PGN=0xf002               SRC=0x47    243 00 00 255 247 00 00 71"""  # noqa
+    """data = """1421302965.213420PRI=3 PGN=0xef00      DST=0x17 SRC=0x28    04 154 00 00 00 00 00 127
+    1421302964.226776PRI=6 PGN=0xf002               SRC=0x47    243 00 00 255 247 00 00 71"""  # noqa
+
+    Parameters
+    ----------
+
+    Returns
+    -------
     df = read_fwf(
         StringIO(data),
         colspecs=[(0, 17), (25, 26), (33, 37), (49, 51), (58, 62), (63, 1000)],
@@ -328,10 +403,17 @@
 
 @pytest.mark.parametrize("comment", ["#", "~", "!"])
 def test_fwf_comment(comment):
-    data = """\
-  1   2.   4  #hello world
-  5  NaN  10.0
-"""
+    """data = """\
+      1   2.   4  #hello world
+      5  NaN  10.0
+
+    Parameters
+    ----------
+    comment :
+        
+
+    Returns
+    -------
     data = data.replace("#", comment)
 
     colspecs = [(0, 3), (4, 9), (9, 25)]
@@ -343,10 +425,17 @@
 
 @pytest.mark.parametrize("thousands", [",", "#", "~"])
 def test_fwf_thousands(thousands):
-    data = """\
- 1 2,334.0    5
-10   13     10.
-"""
+    """data = """\
+     1 2,334.05
+    10   13 10.
+
+    Parameters
+    ----------
+    thousands :
+        
+
+    Returns
+    -------
     data = data.replace(",", thousands)
 
     colspecs = [(0, 3), (3, 11), (12, 16)]
@@ -360,6 +449,17 @@
 
 @pytest.mark.parametrize("header", [True, False])
 def test_bool_header_arg(header):
+    """
+
+    Parameters
+    ----------
+    header :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-6114
     data = """\
 MyColumn
@@ -374,6 +474,7 @@
 
 
 def test_full_file():
+    """ """
     # File with all values.
     test = """index                             A    B    C
 2000-01-03T00:00:00  0.980268513777    3  foo
@@ -391,6 +492,7 @@
 
 
 def test_full_file_with_missing():
+    """ """
     # File with missing values.
     test = """index                             A    B    C
 2000-01-03T00:00:00  0.980268513777    3  foo
@@ -408,6 +510,7 @@
 
 
 def test_full_file_with_spaces():
+    """ """
     # File with spaces in columns.
     test = """
 Account                 Name  Balance     CreditLimit   AccountCreated
@@ -427,6 +530,7 @@
 
 
 def test_full_file_with_spaces_and_missing():
+    """ """
     # File with spaces and missing values in columns.
     test = """
 Account               Name    Balance     CreditLimit   AccountCreated
@@ -446,6 +550,7 @@
 
 
 def test_messed_up_data():
+    """ """
     # Completely messed up file.
     test = """
    Account          Name             Balance     Credit Limit   Account Created
@@ -465,14 +570,20 @@
 
 
 def test_multiple_delimiters():
-    test = r"""
-col1~~~~~col2  col3++++++++++++++++++col4
-~~22.....11.0+++foo~~~~~~~~~~Keanu Reeves
-  33+++122.33\\\bar.........Gerard Butler
-++44~~~~12.01   baz~~Jennifer Love Hewitt
-~~55       11+++foo++++Jada Pinkett-Smith
-..66++++++.03~~~bar           Bill Murray
-""".strip(
+    """test = r"""
+    col1~~~~~col2  col3++++++++++++++++++col4
+    ~~22.....11.0+++foo~~~~~~~~~~Keanu Reeves
+      33+++122.33\\\bar.........Gerard Butler
+    ++44~~~~12.01   baz~~Jennifer Love Hewitt
+    ~~55   11+++foo++++Jada Pinkett-Smith
+    ..66++++++.03~~~bar       Bill Murray
+    """.strip(
+
+    Parameters
+    ----------
+
+    Returns
+    -------
         "\r\n"
     )
     delimiter = " +~.\\"
@@ -484,11 +595,17 @@
 
 
 def test_variable_width_unicode():
-    data = """
-שלום שלום
-ום   שלל
-של   ום
-""".strip(
+    """data = """
+    שלום שלום
+    ום   שלל
+    של   ום
+    """.strip(
+
+    Parameters
+    ----------
+
+    Returns
+    -------
         "\r\n"
     )
     encoding = "utf8"
@@ -503,10 +620,17 @@
 
 @pytest.mark.parametrize("dtype", [dict(), {"a": "float64", "b": str, "c": "int32"}])
 def test_dtype(dtype):
-    data = """ a    b    c
-1    2    3.2
-3    4    5.2
-"""
+    """data = """ ab    c
+    12    3.2
+    34    5.2
+
+    Parameters
+    ----------
+    dtype :
+        
+
+    Returns
+    -------
     colspecs = [(0, 5), (5, 10), (10, None)]
     result = read_fwf(StringIO(data), colspecs=colspecs, dtype=dtype)
 
@@ -521,6 +645,7 @@
 
 
 def test_skiprows_inference():
+    """ """
     # see gh-11256
     data = """
 Text contained in the file header
@@ -537,13 +662,19 @@
 
 
 def test_skiprows_by_index_inference():
-    data = """
-To be skipped
-Not  To  Be  Skipped
-Once more to be skipped
-123  34   8      123
-456  78   9      456
-""".strip()
+    """data = """
+    To be skipped
+    Not  To  Be  Skipped
+    Once more to be skipped
+    123  34   8  123
+    456  78   9  456
+    """.strip()
+
+    Parameters
+    ----------
+
+    Returns
+    -------
     skiprows = [0, 2]
     expected = read_csv(StringIO(data), skiprows=skiprows, delim_whitespace=True)
 
@@ -552,11 +683,17 @@
 
 
 def test_skiprows_inference_empty():
-    data = """
-AA   BBB  C
-12   345  6
-78   901  2
-""".strip()
+    """data = """
+    AA   BBB  C
+    12   345  6
+    78   901  2
+    """.strip()
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     msg = "No rows from which to infer column width"
     with pytest.raises(EmptyDataError, match=msg):
@@ -564,6 +701,7 @@
 
 
 def test_whitespace_preservation():
+    """ """
     # see gh-16772
     header = None
     csv_data = """
@@ -581,6 +719,7 @@
 
 
 def test_default_delimiter():
+    """ """
     header = None
     csv_data = """
 a,bbb
@@ -596,10 +735,20 @@
 
 @pytest.mark.parametrize("infer", [True, False, None])
 def test_fwf_compression(compression_only, infer):
-    data = """1111111111
+    """data = """1111111111
     2222222222
     3333333333""".strip()
 
+    Parameters
+    ----------
+    compression_only :
+        
+    infer :
+        
+
+    Returns
+    -------
+
     compression = compression_only
     extension = "gz" if compression == "gzip" else compression
 
