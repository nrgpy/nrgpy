# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/utils/_process_common.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/utils/_process_common.py
@@ -27,10 +27,20 @@
 
 def read_no_interrupt(p):
     """Read from a pipe ignoring EINTR errors.
-
+    
     This is necessary because when reading from pipes with GUI event loops
     running in the background, often interrupts are raised that stop the
-    command from completing."""
+    command from completing.
+
+    Parameters
+    ----------
+    p :
+        
+
+    Returns
+    -------
+
+    """
     import errno
 
     try:
@@ -42,29 +52,28 @@
 
 def process_handler(cmd, callback, stderr=subprocess.PIPE):
     """Open a command in a shell subprocess and execute a callback.
-
+    
     This function provides common scaffolding for creating subprocess.Popen()
     calls.  It creates a Popen object and then calls the callback with it.
 
     Parameters
     ----------
     cmd : str or list
-      A command to be executed by the system, using :class:`subprocess.Popen`.
-      If a string is passed, it will be run in the system shell. If a list is
-      passed, it will be used directly as arguments.
-
+        A command to be executed by the system, using :class:`subprocess.Popen`.
+        If a string is passed, it will be run in the system shell. If a list is
+        passed, it will be used directly as arguments.
     callback : callable
-      A one-argument function that will be called with the Popen object.
-
+        A one-argument function that will be called with the Popen object.
     stderr : file descriptor number, optional
-      By default this is set to ``subprocess.PIPE``, but you can also pass the
-      value ``subprocess.STDOUT`` to force the subprocess' stderr to go into
-      the same file descriptor as its stdout.  This is useful to read stdout
-      and stderr combined in the order they are generated.
-
-    Returns
-    -------
-    The return value of the provided callback is returned.
+        By default this is set to ``subprocess.PIPE``, but you can also pass the
+        value ``subprocess.STDOUT`` to force the subprocess' stderr to go into
+        the same file descriptor as its stdout.  This is useful to read stdout
+        and stderr combined in the order they are generated.
+
+    Returns
+    -------
+
+    
     """
     sys.stdout.flush()
     sys.stderr.flush()
@@ -117,15 +126,12 @@
     Parameters
     ----------
     cmd : str or list
-      A command to be executed in the system shell.
-
-    Returns
-    -------
-    output : str
-      A string containing the combination of stdout and stderr from the
-    subprocess, in whatever order the subprocess originally wrote to its
-    file descriptors (so the order of the information in this string is the
-    correct order as would be seen if running the command in a terminal).
+        A command to be executed in the system shell.
+
+    Returns
+    -------
+
+    
     """
     out = process_handler(cmd, lambda p: p.communicate()[0], subprocess.STDOUT)
     if out is None:
@@ -135,37 +141,36 @@
 
 def getoutputerror(cmd):
     """Return (standard output, standard error) of executing cmd in a shell.
-
+    
     Accepts the same arguments as os.system().
 
     Parameters
     ----------
     cmd : str or list
-      A command to be executed in the system shell.
-
-    Returns
-    -------
-    stdout : str
-    stderr : str
+        A command to be executed in the system shell.
+
+    Returns
+    -------
+
+    
     """
     return get_output_error_code(cmd)[:2]
 
 def get_output_error_code(cmd):
     """Return (standard output, standard error, return code) of executing cmd
     in a shell.
-
+    
     Accepts the same arguments as os.system().
 
     Parameters
     ----------
     cmd : str or list
-      A command to be executed in the system shell.
-
-    Returns
-    -------
-    stdout : str
-    stderr : str
-    returncode: int
+        A command to be executed in the system shell.
+
+    Returns
+    -------
+
+    
     """
 
     out_err, p = process_handler(cmd, lambda p: (p.communicate(), p))
@@ -176,15 +181,28 @@
 
 def arg_split(s, posix=False, strict=True):
     """Split a command line's arguments in a shell-like manner.
-
+    
     This is a modified version of the standard library's shlex.split()
     function, but with a default of posix=False for splitting, so that quotes
     in inputs are respected.
-
+    
     if strict=False, then any errors shlex.split would raise will result in the
     unparsed remainder being the last element of the list, rather than raising.
     This is because we sometimes use arg_split to parse things other than
     command-line args.
+
+    Parameters
+    ----------
+    s :
+        
+    posix :
+         (Default value = False)
+    strict :
+         (Default value = True)
+
+    Returns
+    -------
+
     """
 
     lex = shlex.shlex(s, posix=posix)
