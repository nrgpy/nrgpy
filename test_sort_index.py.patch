# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/series/methods/test_sort_index.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/series/methods/test_sort_index.py
@@ -8,11 +8,34 @@
 
 
 class TestSeriesSortIndex:
+    """ """
     def test_sort_index_name(self, datetime_series):
+        """
+
+        Parameters
+        ----------
+        datetime_series :
+            
+
+        Returns
+        -------
+
+        """
         result = datetime_series.sort_index(ascending=False)
         assert result.name == datetime_series.name
 
     def test_sort_index(self, datetime_series):
+        """
+
+        Parameters
+        ----------
+        datetime_series :
+            
+
+        Returns
+        -------
+
+        """
         datetime_series.index = datetime_series.index._with_freq(None)
 
         rindex = list(datetime_series.index)
@@ -47,6 +70,17 @@
             random_order.sort_index(level=0, axis=1)
 
     def test_sort_index_inplace(self, datetime_series):
+        """
+
+        Parameters
+        ----------
+        datetime_series :
+            
+
+        Returns
+        -------
+
+        """
         datetime_series.index = datetime_series.index._with_freq(None)
 
         # For GH#11402
@@ -72,6 +106,7 @@
         tm.assert_series_equal(random_order, expected)
 
     def test_sort_index_level(self):
+        """ """
         mi = MultiIndex.from_tuples([[1, 1, 3], [1, 1, 1]], names=list("ABC"))
         s = Series([1, 2], mi)
         backwards = s.iloc[[1, 0]]
@@ -90,6 +125,17 @@
 
     @pytest.mark.parametrize("level", ["A", 0])  # GH#21052
     def test_sort_index_multiindex(self, level):
+        """
+
+        Parameters
+        ----------
+        level :
+            
+
+        Returns
+        -------
+
+        """
 
         mi = MultiIndex.from_tuples([[1, 1, 3], [1, 1, 1]], names=list("ABC"))
         s = Series([1, 2], mi)
@@ -105,6 +151,7 @@
         tm.assert_series_equal(s, res)
 
     def test_sort_index_kind(self):
+        """ """
         # GH#14444 & GH#13589:  Add support for sort algo choosing
         series = Series(index=[3, 2, 1, 4, 3], dtype=object)
         expected_series = Series(index=[1, 2, 3, 3, 4], dtype=object)
@@ -119,6 +166,7 @@
         tm.assert_series_equal(expected_series, index_sorted_series)
 
     def test_sort_index_na_position(self):
+        """ """
         series = Series(index=[3, 2, 1, 4, 3, np.nan], dtype=object)
         expected_series_first = Series(index=[np.nan, 1, 2, 3, 3, 4], dtype=object)
 
@@ -131,6 +179,7 @@
         tm.assert_series_equal(expected_series_last, index_sorted_series)
 
     def test_sort_index_intervals(self):
+        """ """
         s = Series(
             [np.nan, 1, 2, 3], IntervalIndex.from_arrays([0, 1, 2, 3], [1, 2, 3, 4])
         )
@@ -158,6 +207,27 @@
     def test_sort_index_ignore_index(
         self, inplace, original_list, sorted_list, ascending, ignore_index, output_index
     ):
+        """
+
+        Parameters
+        ----------
+        inplace :
+            
+        original_list :
+            
+        sorted_list :
+            
+        ascending :
+            
+        ignore_index :
+            
+        output_index :
+            
+
+        Returns
+        -------
+
+        """
         # GH 30114
         ser = Series(original_list)
         expected = Series(sorted_list, index=output_index)
@@ -177,6 +247,7 @@
         tm.assert_series_equal(ser, Series(original_list))
 
     def test_sort_index_ascending_list(self):
+        """ """
         # GH#16934
 
         # Set up a Series with a three level MultiIndex
@@ -201,7 +272,9 @@
 
 
 class TestSeriesSortIndexKey:
+    """ """
     def test_sort_index_multiindex_key(self):
+        """ """
         mi = MultiIndex.from_tuples([[1, 1, 3], [1, 1, 1]], names=list("ABC"))
         s = Series([1, 2], mi)
         backwards = s.iloc[[1, 0]]
@@ -213,6 +286,7 @@
         tm.assert_series_equal(backwards, result)
 
     def test_sort_index_multiindex_key_multi_level(self):
+        """ """
         mi = MultiIndex.from_tuples([[1, 1, 3], [1, 1, 1]], names=list("ABC"))
         s = Series([1, 2], mi)
         backwards = s.iloc[[1, 0]]
@@ -224,6 +298,7 @@
         tm.assert_series_equal(backwards, result)
 
     def test_sort_index_key(self):
+        """ """
         series = Series(np.arange(6, dtype="int64"), index=list("aaBBca"))
 
         result = series.sort_index()
@@ -239,6 +314,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_sort_index_key_int(self):
+        """ """
         series = Series(np.arange(6, dtype="int64"), index=np.arange(6, dtype="int64"))
 
         result = series.sort_index()
@@ -252,6 +328,17 @@
         tm.assert_series_equal(result, series)
 
     def test_sort_index_kind_key(self, sort_by_key):
+        """
+
+        Parameters
+        ----------
+        sort_by_key :
+            
+
+        Returns
+        -------
+
+        """
         # GH #14444 & #13589:  Add support for sort algo choosing
         series = Series(index=[3, 2, 1, 4, 3], dtype=object)
         expected_series = Series(index=[1, 2, 3, 3, 4], dtype=object)
@@ -266,6 +353,7 @@
         tm.assert_series_equal(expected_series, index_sorted_series)
 
     def test_sort_index_kind_neg_key(self):
+        """ """
         # GH #14444 & #13589:  Add support for sort algo choosing
         series = Series(index=[3, 2, 1, 4, 3], dtype=object)
         expected_series = Series(index=[4, 3, 3, 2, 1], dtype=object)
@@ -280,6 +368,17 @@
         tm.assert_series_equal(expected_series, index_sorted_series)
 
     def test_sort_index_na_position_key(self, sort_by_key):
+        """
+
+        Parameters
+        ----------
+        sort_by_key :
+            
+
+        Returns
+        -------
+
+        """
         series = Series(index=[3, 2, 1, 4, 3, np.nan], dtype=object)
         expected_series_first = Series(index=[np.nan, 1, 2, 3, 3, 4], dtype=object)
 
@@ -292,11 +391,13 @@
         tm.assert_series_equal(expected_series_last, index_sorted_series)
 
     def test_changes_length_raises(self):
+        """ """
         s = Series([1, 2, 3])
         with pytest.raises(ValueError, match="change the shape"):
             s.sort_index(key=lambda x: x[:1])
 
     def test_sort_values_key_type(self):
+        """ """
         s = Series([1, 2, 3], DatetimeIndex(["2008-10-24", "2008-11-23", "2007-12-22"]))
 
         result = s.sort_index(key=lambda x: x.month)
