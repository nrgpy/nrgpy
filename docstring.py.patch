# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pyment/docstring.py
+++ b/..//venv/lib/python3.8/site-packages/pyment/docstring.py
@@ -27,8 +27,15 @@
 def isin_alone(elems, line):
     """Check if an element from a list is the only element of a string.
 
-    :type elems: list
-    :type line: str
+    Parameters
+    ----------
+    elems :
+        
+    line :
+        
+
+    Returns
+    -------
 
     """
     found = False
@@ -42,8 +49,15 @@
 def isin_start(elems, line):
     """Check if an element from a list starts a string.
 
-    :type elems: list
-    :type line: str
+    Parameters
+    ----------
+    elems :
+        
+    line :
+        
+
+    Returns
+    -------
 
     """
     found = False
@@ -58,8 +72,15 @@
 def isin(elems, line):
     """Check if an element from a list is in a string.
 
-    :type elems: list
-    :type line: str
+    Parameters
+    ----------
+    elems :
+        
+    line :
+        
+
+    Returns
+    -------
 
     """
     found = False
@@ -73,7 +94,13 @@
 def get_leading_spaces(data):
     """Get the leading space of a string if it is not empty
 
-    :type data: str
+    Parameters
+    ----------
+    data :
+        
+
+    Returns
+    -------
 
     """
     spaces = ''
@@ -135,12 +162,15 @@
         return self.opt[key]
 
     def get_optional_sections(self):
+        """ """
         return self.optional_sections
 
     def get_excluded_sections(self):
+        """ """
         return self.excluded_sections
 
     def get_mandatory_sections(self):
+        """ """
         return [s for s in self.opt
                 if s not in self.optional_sections and
                    s not in self.excluded_sections]
@@ -151,8 +181,13 @@
         The section is a section key (e.g. 'Parameters') followed by underline
         (made by -), then the content
 
-        :param data: the data to proceed
-        :type data: str
+        Parameters
+        ----------
+        data : str
+            the data to proceed
+
+        Returns
+        -------
 
         """
         start = -1
@@ -170,8 +205,15 @@
     def get_section_key_line(self, data, key):
         """Get the next section line for a given key.
 
-        :param data: the data to proceed
-        :param key: the key
+        Parameters
+        ----------
+        data :
+            the data to proceed
+        key :
+            the key
+
+        Returns
+        -------
 
         """
         start = 0
@@ -195,7 +237,13 @@
         The ending line number is the line after the end of the section or -1 if
         the section is at the end.
 
-        :param data: the data to proceed
+        Parameters
+        ----------
+        data :
+            the data to proceed
+
+        Returns
+        -------
 
         """
         end = -1
@@ -209,8 +257,15 @@
         Each element is a tuple (key=None, description, type=None).
         Note that the tuple's element can differ depending on the key.
 
-        :param data: the data to proceed
-        :param key: the key
+        Parameters
+        ----------
+        data :
+            the data to proceed
+        key :
+            the key
+
+        Returns
+        -------
 
         """
         key_list = []
@@ -254,7 +309,13 @@
         """Get the list of attributes.
         The list contains tuples (name, desc, type=None)
 
-        :param data: the data to proceed
+        Parameters
+        ----------
+        data :
+            the data to proceed
+
+        Returns
+        -------
 
         """
         return self.get_list_key(data, 'attr')
@@ -263,7 +324,13 @@
         """Get the list of parameters.
         The list contains tuples (name, desc, type=None)
 
-        :param data: the data to proceed
+        Parameters
+        ----------
+        data :
+            the data to proceed
+
+        Returns
+        -------
 
         """
         return self.get_list_key(data, 'param')
@@ -272,7 +339,13 @@
         """Get the list of return elements/values.
         The list contains tuples (name=None, desc, type)
 
-        :param data: the data to proceed
+        Parameters
+        ----------
+        data :
+            the data to proceed
+
+        Returns
+        -------
 
         """
         return_list = []
@@ -289,7 +362,13 @@
         """Get the list of exceptions.
         The list contains tuples (name, desc)
 
-        :param data: the data to proceed
+        Parameters
+        ----------
+        data :
+            the data to proceed
+
+        Returns
+        -------
 
         """
         return_list = []
@@ -303,7 +382,13 @@
     def get_raw_not_managed(self, data):
         """Get elements not managed. They can be used as is.
 
-        :param data: the data to proceed
+        Parameters
+        ----------
+        data :
+            the data to proceed
+
+        Returns
+        -------
 
         """
         keys = ['also', 'ref', 'note', 'other', 'example', 'method', 'attr']
@@ -331,8 +416,15 @@
     def get_key_section_header(self, key, spaces):
         """Get the key of the header section
 
-        :param key: the key name
-        :param spaces: spaces to set at the beginning of the header
+        Parameters
+        ----------
+        key :
+            the key name
+        spaces :
+            spaces to set at the beginning of the header
+
+        Returns
+        -------
 
         """
         if key == 'param':
@@ -405,7 +497,13 @@
         The ending line number is the line after the end of the section or -1 if
         the section is at the end.
 
-        :param data: the data to proceed
+        Parameters
+        ----------
+        data :
+            the data to proceed
+
+        Returns
+        -------
 
         """
         end = -1
@@ -417,8 +515,15 @@
     def get_section_key_line(self, data, key):
         """Get the next section line for a given key.
 
-        :param data: the data to proceed
-        :param key: the key
+        Parameters
+        ----------
+        data :
+            the data to proceed
+        key :
+            the key
+
+        Returns
+        -------
 
         """
         start = 0
@@ -439,8 +544,15 @@
         Each element is a tuple (key=None, description, type=None).
         Note that the tuple's element can differ depending on the key.
 
-        :param data: the data to proceed
-        :param key: the key
+        Parameters
+        ----------
+        data :
+            the data to proceed
+        key :
+            the key
+
+        Returns
+        -------
 
         """
         # TODO: see how to factorize this with groups and numpydoc
@@ -505,7 +617,13 @@
         """Get the list of parameters.
         The list contains tuples (name, desc, type=None)
 
-        :param data: the data to proceed
+        Parameters
+        ----------
+        data :
+            the data to proceed
+
+        Returns
+        -------
 
         """
         return self.get_list_key(data, 'param')
@@ -514,7 +632,13 @@
         """Get the list of returned values.
         The list contains tuples (name=None, desc, type=None)
 
-        :param data: the data to proceed
+        Parameters
+        ----------
+        data :
+            the data to proceed
+
+        Returns
+        -------
 
         """
         return_list = []
@@ -533,7 +657,13 @@
         """Get the list of exceptions.
         The list contains tuples (name, desc)
 
-        :param data: the data to proceed
+        Parameters
+        ----------
+        data :
+            the data to proceed
+
+        Returns
+        -------
 
         """
         return_list = []
@@ -557,8 +687,15 @@
         The section is a section key (e.g. 'Parameters:')
         then the content
 
-        :param data: a list of strings containing the docstring's lines
-        :returns: the index of next section else -1
+        Parameters
+        ----------
+        data :
+            a list of strings containing the docstring's lines
+
+        Returns
+        -------
+        type
+            the index of next section else -1
 
         """
         start = -1
@@ -571,8 +708,15 @@
     def get_key_section_header(self, key, spaces):
         """Get the key of the section header
 
-        :param key: the key name
-        :param spaces: spaces to set at the beginning of the header
+        Parameters
+        ----------
+        key :
+            the key name
+        spaces :
+            spaces to set at the beginning of the header
+
+        Returns
+        -------
 
         """
         if key in self.section_headers:
@@ -592,6 +736,12 @@
     - 'google': the numpy format for docstrings (using an external module)
     - 'numpydoc': the numpy format for docstrings (using an external module)
 
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     # TODO: enhance style dependent separation
     # TODO: add set methods to generate style specific outputs
@@ -618,7 +768,7 @@
 
     def _set_available_styles(self):
         """Set the internal styles list and available options in a structure as following:
-
+        
             param: javadoc: name = '@param'
                             sep  = ':'
                    reST:    name = ':param'
@@ -628,11 +778,17 @@
                             sep  = ':'
                    ...
             ...
-
+        
         And sets the internal groups style:
             param:  'params', 'args', 'parameters', 'arguments'
             return: 'returns', 'return'
             raise:  'raises', 'raise', 'exceptions', 'exception'
+
+        Parameters
+        ----------
+
+        Returns
+        -------
 
         """
         options_tagstyle = {'keys': ['param', 'type', 'returns', 'return', 'rtype', 'raise'],
@@ -659,10 +815,15 @@
         """Determine the style of a docstring,
         and sets it as the default input one for the instance.
 
-        :param data: the docstring's data to recognize.
-        :type data: str
-        :returns: the style detected else 'unknown'
-        :rtype: str
+        Parameters
+        ----------
+        data : str
+            the docstring's data to recognize.
+
+        Returns
+        -------
+        str
+            the style detected else 'unknown'
 
         """
         # evaluate styles with keys
@@ -706,8 +867,13 @@
     def set_input_style(self, style):
         """Set the input docstring style
 
-        :param style: style to set for input docstring
-        :type style: str
+        Parameters
+        ----------
+        style : str
+            style to set for input docstring
+
+        Returns
+        -------
 
         """
         self.style['in'] = style
@@ -715,8 +881,13 @@
     def set_output_style(self, style):
         """Set the output docstring style
 
-        :param style: style to set for output docstring
-        :type style: str
+        Parameters
+        ----------
+        style : str
+            style to set for output docstring
+
+        Returns
+        -------
 
         """
         self.style['out'] = style
@@ -724,7 +895,13 @@
     def _get_options(self, style):
         """Get the list of keywords for a particular style
 
-        :param style: the style that the keywords are wanted
+        Parameters
+        ----------
+        style :
+            the style that the keywords are wanted
+
+        Returns
+        -------
 
         """
         return [self.opt[o][style]['name'] for o in self.opt]
@@ -733,9 +910,16 @@
         """Get the name of a key in current style.
         e.g.: in javadoc style, the returned key for 'param' is '@param'
 
-        :param key: the key wanted (param, type, return, rtype,..)
-        :param target: the target docstring is 'in' for the input or
-          'out' for the output to generate. (Default value = 'in')
+        Parameters
+        ----------
+        key :
+            the key wanted (param, type, return, rtype,..)
+        target :
+            the target docstring is 'in' for the input or
+            'out' for the output to generate. (Default value = 'in')
+
+        Returns
+        -------
 
         """
         target = 'out' if target == 'out' else 'in'
@@ -745,9 +929,16 @@
         """Get the separator of current style.
         e.g.: in reST and javadoc style, it is ":"
 
-        :param key: the key which separator is wanted (param, type, return, rtype,..) (Default value = 'param')
-        :param target: the target docstring is 'in' for the input or
-          'out' for the output to generate. (Default value = 'in')
+        Parameters
+        ----------
+        key :
+            the key which separator is wanted (param, type, return, rtype,..) (Default value = 'param')
+        target :
+            the target docstring is 'in' for the input or
+            'out' for the output to generate. (Default value = 'in')
+
+        Returns
+        -------
 
         """
         target = 'out' if target == 'out' else 'in'
@@ -758,8 +949,13 @@
     def set_known_parameters(self, params):
         """Set known parameters names.
 
-        :param params: the docstring parameters names
-        :type params: list
+        Parameters
+        ----------
+        params : list
+            the docstring parameters names
+
+        Returns
+        -------
 
         """
         self.params = params
@@ -767,9 +963,15 @@
     def get_doctests_indexes(self, data):
         """Extract Doctests if found and return it
 
-        :param data: string to parse
-        :return: index of start and index of end of the doctest, else (-1, -1)
-        :rtype: tuple
+        Parameters
+        ----------
+        data :
+            string to parse
+
+        Returns
+        -------
+        tuple
+            index of start and index of end of the doctest, else (-1, -1)
 
         """
         start, end = -1, -1
@@ -787,9 +989,17 @@
     def get_group_key_line(self, data, key):
         """Get the next group-style key's line number.
 
-        :param data: string to parse
-        :param key: the key category
-        :returns: the found line number else -1
+        Parameters
+        ----------
+        data :
+            string to parse
+        key :
+            the key category
+
+        Returns
+        -------
+        type
+            the found line number else -1
 
         """
         idx = -1
@@ -805,9 +1015,17 @@
     def get_group_key_index(self, data, key):
         """Get the next groups style's starting line index for a key
 
-        :param data: string to parse
-        :param key: the key category
-        :returns: the index if found else -1
+        Parameters
+        ----------
+        data :
+            string to parse
+        key :
+            the key category
+
+        Returns
+        -------
+        type
+            the index if found else -1
 
         """
         idx = -1
@@ -821,8 +1039,15 @@
     def get_group_line(self, data):
         """Get the next group-style key's line.
 
-        :param data: the data to proceed
-        :returns: the line number
+        Parameters
+        ----------
+        data :
+            the data to proceed
+
+        Returns
+        -------
+        type
+            the line number
 
         """
         idx = -1
@@ -835,8 +1060,15 @@
     def get_group_index(self, data):
         """Get the next groups style's starting line index
 
-        :param data: string to parse
-        :returns: the index if found else -1
+        Parameters
+        ----------
+        data :
+            string to parse
+
+        Returns
+        -------
+        type
+            the index if found else -1
 
         """
         idx = -1
@@ -850,12 +1082,19 @@
     def get_key_index(self, data, key, starting=True):
         """Get from a docstring the next option with a given key.
 
-        :param data: string to parse
-        :param starting: does the key element must start the line (Default value = True)
-        :type starting: boolean
-        :param key: the key category. Can be 'param', 'type', 'return', ...
-        :returns: index of found element else -1
-        :rtype: integer
+        Parameters
+        ----------
+        data :
+            string to parse
+        starting : boolean
+            does the key element must start the line (Default value = True)
+        key :
+            the key category. Can be 'param', 'type', 'return', ...
+
+        Returns
+        -------
+        integer
+            index of found element else -1
 
         """
         key = self.opt[key][self.style['in']]['name']
@@ -888,11 +1127,17 @@
         """Get from a docstring the next option.
         In javadoc style it could be @param, @return, @type,...
 
-        :param data: string to parse
-        :param starting: does the key element must start the line (Default value = True)
-        :type starting: boolean
-        :returns: index of found element else -1
-        :rtype: integer
+        Parameters
+        ----------
+        data :
+            string to parse
+        starting : boolean
+            does the key element must start the line (Default value = True)
+
+        Returns
+        -------
+        integer
+            index of found element else -1
 
         """
         idx = len(data)
@@ -905,20 +1150,38 @@
         return idx
 
     def get_elem_desc(self, data, key):
-        """TODO """
+        """TODO
+
+        Parameters
+        ----------
+        data :
+            
+        key :
+            
+
+        Returns
+        -------
+
+        """
 
     def get_elem_param(self):
-        """TODO """
+        """TODO"""
 
     def get_raise_indexes(self, data):
         """Get from a docstring the next raise name indexes.
         In javadoc style it is after @raise.
 
-        :param data: string to parse
-        :returns: start and end indexes of found element else (-1, -1)
-          or else (-2, -2) if try to use params style but no parameters were provided.
-          Note: the end index is the index after the last name character
-        :rtype: tuple
+        Parameters
+        ----------
+        data :
+            string to parse
+
+        Returns
+        -------
+        tuple
+            start and end indexes of found element else (-1, -1)
+            or else (-2, -2) if try to use params style but no parameters were provided.
+            Note: the end index is the index after the last name character
 
         """
         start, end = -1, -1
@@ -946,10 +1209,17 @@
         """Get from a docstring the next raise's description.
         In javadoc style it is after @param.
 
-        :param data: string to parse
-        :param prev: index after the param element name (Default value = None)
-        :returns: start and end indexes of found element else (-1, -1)
-        :rtype: tuple
+        Parameters
+        ----------
+        data :
+            string to parse
+        prev :
+            index after the param element name (Default value = None)
+
+        Returns
+        -------
+        tuple
+            start and end indexes of found element else (-1, -1)
 
         """
         start, end = -1, -1
@@ -980,11 +1250,17 @@
         """Get from a docstring the next parameter name indexes.
         In javadoc style it is after @param.
 
-        :param data: string to parse
-        :returns: start and end indexes of found element else (-1, -1)
-          or else (-2, -2) if try to use params style but no parameters were provided.
-          Note: the end index is the index after the last name character
-        :rtype: tuple
+        Parameters
+        ----------
+        data :
+            string to parse
+
+        Returns
+        -------
+        tuple
+            start and end indexes of found element else (-1, -1)
+            or else (-2, -2) if try to use params style but no parameters were provided.
+            Note: the end index is the index after the last name character
 
         """
         # TODO: new method to extract an element's name so will be available for @param and @types and other styles (:param, \param)
@@ -1028,10 +1304,17 @@
         """Get from a docstring the next parameter's description.
         In javadoc style it is after @param.
 
-        :param data: string to parse
-        :param prev: index after the param element name (Default value = None)
-        :returns: start and end indexes of found element else (-1, -1)
-        :rtype: tuple
+        Parameters
+        ----------
+        data :
+            string to parse
+        prev :
+            index after the param element name (Default value = None)
+
+        Returns
+        -------
+        tuple
+            start and end indexes of found element else (-1, -1)
 
         """
         start, end = -1, -1
@@ -1062,13 +1345,21 @@
         """Get from a docstring a parameter type indexes.
         In javadoc style it is after @type.
 
-        :param data: string to parse
-        :param name: the name of the parameter (Default value = None)
-        :param prev: index after the previous element (param or param's description) (Default value = None)
-        :returns: start and end indexes of found element else (-1, -1)
-          Note: the end index is the index after the last included character or -1 if
-          reached the end
-        :rtype: tuple
+        Parameters
+        ----------
+        data :
+            string to parse
+        name :
+            the name of the parameter (Default value = None)
+        prev :
+            index after the previous element (param or param's description) (Default value = None)
+
+        Returns
+        -------
+        tuple
+            start and end indexes of found element else (-1, -1)
+            Note: the end index is the index after the last included character or -1 if
+            reached the end
 
         """
         start, end = -1, -1
@@ -1100,11 +1391,17 @@
         """Get from a docstring the return parameter description indexes.
         In javadoc style it is after @return.
 
-        :param data: string to parse
-        :returns: start and end indexes of found element else (-1, -1)
-          Note: the end index is the index after the last included character or -1 if
-          reached the end
-        :rtype: tuple
+        Parameters
+        ----------
+        data :
+            string to parse
+
+        Returns
+        -------
+        tuple
+            start and end indexes of found element else (-1, -1)
+            Note: the end index is the index after the last included character or -1 if
+            reached the end
 
         """
         start, end = -1, -1
@@ -1139,11 +1436,17 @@
         """Get from a docstring the return parameter type indexes.
         In javadoc style it is after @rtype.
 
-        :param data: string to parse
-        :returns: start and end indexes of found element else (-1, -1)
-          Note: the end index is the index after the last included character or -1 if
-          reached the end
-        :rtype: tuple
+        Parameters
+        ----------
+        data :
+            string to parse
+
+        Returns
+        -------
+        tuple
+            start and end indexes of found element else (-1, -1)
+            Note: the end index is the index after the last included character or -1 if
+            reached the end
 
         """
         start, end = -1, -1
@@ -1267,8 +1570,13 @@
     def get_input_docstring(self):
         """Get the input raw docstring.
 
-        :returns: the input docstring if any.
-        :rtype: str or None
+        Parameters
+        ----------
+
+        Returns
+        -------
+        str or None
+            the input docstring if any.
 
         """
         return self.docs['in']['raw']
@@ -1276,8 +1584,13 @@
     def get_input_style(self):
         """Get the input docstring style
 
-        :returns: the style for input docstring
-        :rtype: style: str
+        Parameters
+        ----------
+
+        Returns
+        -------
+        style: str
+            the style for input docstring
 
         """
         # TODO: use a getter
@@ -1286,8 +1599,13 @@
     def set_input_style(self, style):
         """Sets the input docstring style
 
-        :param style: style to set for input docstring
-        :type style: str
+        Parameters
+        ----------
+        style : str
+            style to set for input docstring
+
+        Returns
+        -------
 
         """
         # TODO: use a setter
@@ -1296,8 +1614,13 @@
     def get_output_style(self):
         """Sets the output docstring style
 
-        :returns: the style for output docstring
-        :rtype: style: str
+        Parameters
+        ----------
+
+        Returns
+        -------
+        style: str
+            the style for output docstring
 
         """
         # TODO: use a getter
@@ -1306,8 +1629,13 @@
     def set_output_style(self, style):
         """Sets the output docstring style
 
-        :param style: style to set for output docstring
-        :type style: str
+        Parameters
+        ----------
+        style : str
+            style to set for output docstring
+
+        Returns
+        -------
 
         """
         # TODO: use a setter
@@ -1316,7 +1644,13 @@
     def get_spaces(self):
         """Get the output docstring initial spaces.
 
-        :returns: the spaces
+        Parameters
+        ----------
+
+        Returns
+        -------
+        type
+            the spaces
 
         """
         return self.docs['out']['spaces']
@@ -1324,7 +1658,13 @@
     def set_spaces(self, spaces):
         """Set for output docstring the initial spaces.
 
-        :param spaces: the spaces to set
+        Parameters
+        ----------
+        spaces :
+            the spaces to set
+
+        Returns
+        -------
 
         """
         self.docs['out']['spaces'] = spaces
@@ -1336,7 +1676,13 @@
         methode                  -> name
         param1, param2='default' -> parameters
 
-        :param raw: raw data of the element (def or class). (Default value = None)
+        Parameters
+        ----------
+        raw :
+            raw data of the element (def or class). (Default value = None)
+
+        Returns
+        -------
 
         """
         # TODO: retrieve return from element external code (in parameter)
@@ -1374,8 +1720,15 @@
         """Extract the doctests if found.
         If there are doctests, they are removed from the input data and set on
         a specific buffer as they won't be altered.
-
+        
         :return: True if found and proceeded else False
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         result = False
         data = self.docs['in']['raw']
@@ -1486,6 +1839,12 @@
         """Extract parameters description and type from docstring. The internal computed parameters list is
         composed by tuples (parameter, description, type).
 
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         if self.dst.style['in'] == 'numpydoc':
             data = '\n'.join([d.rstrip().replace(self.docs['out']['spaces'], '', 1) for d in self.docs['in']['raw'].splitlines()])
@@ -1553,6 +1912,12 @@
         """Extract raises description from docstring. The internal computed raises list is
         composed by tuples (raise, description).
 
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         if self.dst.style['in'] == 'numpydoc':
             data = '\n'.join([d.rstrip().replace(self.docs['out']['spaces'], '', 1) for d in self.docs['in']['raw'].splitlines()])
@@ -1624,7 +1989,13 @@
     def parse_docs(self, raw=None):
         """Parses the docstring
 
-        :param raw: the data to parse if not internally provided (Default value = None)
+        Parameters
+        ----------
+        raw :
+            the data to parse if not internally provided (Default value = None)
+
+        Returns
+        -------
 
         """
         if raw is not None:
@@ -1722,7 +2093,13 @@
     def _set_raw_params(self, sep):
         """Set the output raw parameters section
 
-        :param sep: the separator of current style
+        Parameters
+        ----------
+        sep :
+            the separator of current style
+
+        Returns
+        -------
 
         """
         raw = '\n'
@@ -1782,7 +2159,13 @@
     def _set_raw_raise(self, sep):
         """Set the output raw exception section
 
-        :param sep: the separator of current style
+        Parameters
+        ----------
+        sep :
+            the separator of current style
+
+        Returns
+        -------
 
         """
         raw = ''
@@ -1828,7 +2211,13 @@
     def _set_raw_return(self, sep):
         """Set the output raw return section
 
-        :param sep: the separator of current style
+        Parameters
+        ----------
+        sep :
+            the separator of current style
+
+        Returns
+        -------
 
         """
         raw = ''
@@ -1965,7 +2354,13 @@
     def get_raw_docs(self):
         """Generates raw docstring
 
-        :returns: the raw docstring
+        Parameters
+        ----------
+
+        Returns
+        -------
+        type
+            the raw docstring
 
         """
         if not self.generated_docs:
