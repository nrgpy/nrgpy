# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/series/test_combine_concat.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/series/test_combine_concat.py
@@ -6,10 +6,22 @@
 
 
 class TestSeriesConcat:
+    """ """
     @pytest.mark.parametrize(
         "dtype", ["float64", "int8", "uint8", "bool", "m8[ns]", "M8[ns]"]
     )
     def test_concat_empty_series_dtypes_match_roundtrips(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         dtype = np.dtype(dtype)
 
         result = pd.concat([Series(dtype=dtype)])
@@ -19,11 +31,25 @@
         assert result.dtype == dtype
 
     def test_concat_empty_series_dtypes_roundtrips(self):
+        """ """
 
         # round-tripping with self & like self
         dtypes = map(np.dtype, ["float64", "int8", "uint8", "bool", "m8[ns]", "M8[ns]"])
 
         def int_result_type(dtype, dtype2):
+            """
+
+            Parameters
+            ----------
+            dtype :
+                
+            dtype2 :
+                
+
+            Returns
+            -------
+
+            """
             typs = {dtype.kind, dtype2.kind}
             if not len(typs - {"i", "u", "b"}) and (
                 dtype.kind == "i" or dtype2.kind == "i"
@@ -36,6 +62,19 @@
             return None
 
         def float_result_type(dtype, dtype2):
+            """
+
+            Parameters
+            ----------
+            dtype :
+                
+            dtype2 :
+                
+
+            Returns
+            -------
+
+            """
             typs = {dtype.kind, dtype2.kind}
             if not len(typs - {"f", "i", "u"}) and (
                 dtype.kind == "f" or dtype2.kind == "f"
@@ -44,6 +83,19 @@
             return None
 
         def get_result_type(dtype, dtype2):
+            """
+
+            Parameters
+            ----------
+            dtype :
+                
+            dtype2 :
+                
+
+            Returns
+            -------
+
+            """
             result = float_result_type(dtype, dtype2)
             if result is not None:
                 return result
@@ -78,10 +130,26 @@
         ],
     )
     def test_concat_empty_series_dtypes(self, left, right, expected):
+        """
+
+        Parameters
+        ----------
+        left :
+            
+        right :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         result = pd.concat([Series(dtype=left), Series(dtype=right)])
         assert result.dtype == expected
 
     def test_concat_empty_series_dtypes_triple(self):
+        """ """
 
         assert (
             pd.concat(
@@ -91,6 +159,7 @@
         )
 
     def test_concat_empty_series_dtype_category_with_array(self):
+        """ """
         # GH 18515
         assert (
             pd.concat(
@@ -100,6 +169,7 @@
         )
 
     def test_concat_empty_series_dtypes_sparse(self):
+        """ """
         result = pd.concat(
             [
                 Series(dtype="float64").astype("Sparse"),
