# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexing/test_scalar.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexing/test_scalar.py
@@ -10,9 +10,36 @@
 
 
 class TestScalar(Base):
+    """ """
     @pytest.mark.parametrize("kind", ["series", "frame"])
     def test_at_and_iat_get(self, kind):
+        """
+
+        Parameters
+        ----------
+        kind :
+            
+
+        Returns
+        -------
+
+        """
         def _check(f, func, values=False):
+            """
+
+            Parameters
+            ----------
+            f :
+                
+            func :
+                
+            values :
+                 (Default value = False)
+
+            Returns
+            -------
+
+            """
 
             if f is not None:
                 indices = self.generate_indices(f, values)
@@ -39,7 +66,33 @@
 
     @pytest.mark.parametrize("kind", ["series", "frame"])
     def test_at_and_iat_set(self, kind):
+        """
+
+        Parameters
+        ----------
+        kind :
+            
+
+        Returns
+        -------
+
+        """
         def _check(f, func, values=False):
+            """
+
+            Parameters
+            ----------
+            f :
+                
+            func :
+                
+            values :
+                 (Default value = False)
+
+            Returns
+            -------
+
+            """
 
             if f is not None:
                 indices = self.generate_indices(f, values)
@@ -66,9 +119,11 @@
 
 
 class TestScalar2:
+    """ """
     # TODO: Better name, just separating things that dont need Base class
 
     def test_at_iat_coercion(self):
+        """ """
 
         # as timestamp is not a tuple!
         dates = date_range("1/1/2000", periods=8)
@@ -96,9 +151,11 @@
             assert result == expected
 
     def test_iat_invalid_args(self):
+        """ """
         pass
 
     def test_imethods_with_dups(self):
+        """ """
 
         # GH6493
         # iat/iloc with dups
@@ -129,6 +186,7 @@
         assert result == 2
 
     def test_frame_at_with_duplicate_axes(self):
+        """ """
         # GH#33041
         arr = np.random.randn(6).reshape(3, 2)
         df = DataFrame(arr, columns=["A", "A"])
@@ -147,6 +205,7 @@
         tm.assert_series_equal(df.iloc[1], expected)
 
     def test_frame_at_with_duplicate_axes_requires_scalar_lookup(self):
+        """ """
         # GH#33041 check that falling back to loc doesn't allow non-scalar
         #  args to slip in
 
@@ -169,6 +228,7 @@
             df.at[:, "A"] = 1
 
     def test_series_at_raises_type_error(self):
+        """ """
         # at should not fallback
         # GH 7814
         # GH#31724 .at should match .loc
@@ -184,6 +244,7 @@
             ser.loc[0]
 
     def test_frame_raises_key_error(self):
+        """ """
         # GH#31724 .at should match .loc
         df = DataFrame({"A": [1, 2, 3]}, index=list("abc"))
         result = df.at["a", "A"]
@@ -197,6 +258,7 @@
             df.loc["a", 0]
 
     def test_series_at_raises_key_error(self):
+        """ """
         # GH#31724 .at should match .loc
 
         ser = Series([1, 2, 3], index=[3, 2, 1])
@@ -212,6 +274,7 @@
             ser.loc["a"]
 
     def test_frame_at_raises_key_error(self):
+        """ """
         # GH#31724 .at should match .loc
 
         df = DataFrame({0: [1, 2, 3]}, index=[3, 2, 1])
@@ -233,6 +296,7 @@
 
     # TODO: belongs somewhere else?
     def test_getitem_list_missing_key(self):
+        """ """
         # GH 13822, incorrect error string with non-unique columns when missing
         # column is accessed
         df = DataFrame({"x": [1.0], "y": [2.0], "z": [3.0]})
@@ -243,6 +307,7 @@
             df[["x", "y", "z"]]
 
     def test_at_with_tz(self):
+        """ """
         # gh-15822
         df = DataFrame(
             {
@@ -264,6 +329,17 @@
         assert result == expected
 
     def test_series_set_tz_timestamp(self, tz_naive_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+
+        Returns
+        -------
+
+        """
         # GH 25506
         ts = Timestamp("2017-08-05 00:00:00+0100", tz=tz_naive_fixture)
         result = Series(ts)
@@ -272,6 +348,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_mixed_index_at_iat_loc_iloc_series(self):
+        """ """
         # GH 19860
         s = Series([1, 2, 3, 4, 5], index=["a", "b", "c", 1, 2])
         for el, item in s.items():
@@ -285,6 +362,7 @@
             s.loc[4]
 
     def test_mixed_index_at_iat_loc_iloc_dataframe(self):
+        """ """
         # GH 19860
         df = DataFrame(
             [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]], columns=["a", "b", "c", 1, 2]
@@ -303,6 +381,7 @@
             df.loc[0, 3]
 
     def test_iat_setter_incompatible_assignment(self):
+        """ """
         # GH 23236
         result = DataFrame({"a": [0, 1], "b": [4, 5]})
         result.iat[0, 0] = None
@@ -310,6 +389,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_getitem_zerodim_np_array(self):
+        """ """
         # GH24924
         # dataframe __getitem__
         df = DataFrame([[1, 2], [3, 4]])
@@ -324,6 +404,7 @@
 
 
 def test_iat_dont_wrap_object_datetimelike():
+    """ """
     # GH#32809 .iat calls go through DataFrame._get_value, should not
     #  call maybe_box_datetimelike
     dti = date_range("2016-01-01", periods=3)
@@ -345,6 +426,7 @@
 
 
 def test_iat_series_with_period_index():
+    """ """
     # GH 4390, iat incorrectly indexing
     index = period_range("1/1/2001", periods=10)
     ser = Series(np.random.randn(10), index=index)
@@ -354,6 +436,7 @@
 
 
 def test_at_with_tuple_index_get():
+    """ """
     # GH 26989
     # DataFrame.at getter works with Index of tuples
     df = DataFrame({"a": [1, 2]}, index=[(1, 2), (3, 4)])
@@ -367,6 +450,7 @@
 
 
 def test_at_with_tuple_index_set():
+    """ """
     # GH 26989
     # DataFrame.at setter works with Index of tuples
     df = DataFrame({"a": [1, 2]}, index=[(1, 2), (3, 4)])
@@ -382,6 +466,7 @@
 
 
 def test_multiindex_at_get():
+    """ """
     # GH 26989
     # DataFrame.at and DataFrame.loc getter works with MultiIndex
     df = DataFrame({"a": [1, 2]}, index=[[1, 2], [3, 4]])
@@ -397,6 +482,7 @@
 
 
 def test_multiindex_at_set():
+    """ """
     # GH 26989
     # DataFrame.at and DataFrame.loc setter works with MultiIndex
     df = DataFrame({"a": [1, 2]}, index=[[1, 2], [3, 4]])
