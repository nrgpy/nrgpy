# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/reshape/test_melt.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/reshape/test_melt.py
@@ -7,7 +7,19 @@
 
 
 class TestMelt:
+    """ """
     def setup_method(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         self.df = tm.makeTimeDataFrame()[:10]
         self.df["id1"] = (self.df["A"] > 0).astype(np.int64)
         self.df["id2"] = (self.df["B"] > 0).astype(np.int64)
@@ -26,10 +38,12 @@
         self.df1.columns.names = ["CAP", "low"]
 
     def test_top_level_method(self):
+        """ """
         result = melt(self.df)
         assert result.columns.tolist() == ["variable", "value"]
 
     def test_method_signatures(self):
+        """ """
         tm.assert_frame_equal(self.df.melt(), melt(self.df))
 
         tm.assert_frame_equal(
@@ -45,6 +59,7 @@
         tm.assert_frame_equal(self.df1.melt(col_level=0), melt(self.df1, col_level=0))
 
     def test_default_col_names(self):
+        """ """
         result = self.df.melt()
         assert result.columns.tolist() == ["variable", "value"]
 
@@ -55,6 +70,7 @@
         assert result2.columns.tolist() == ["id1", "id2", "variable", "value"]
 
     def test_value_vars(self):
+        """ """
         result3 = self.df.melt(id_vars=["id1", "id2"], value_vars="A")
         assert len(result3) == 10
 
@@ -71,6 +87,7 @@
         tm.assert_frame_equal(result4, expected4)
 
     def test_value_vars_types(self):
+        """ """
         # GH 15348
         expected = DataFrame(
             {
@@ -87,6 +104,7 @@
             tm.assert_frame_equal(result, expected)
 
     def test_vars_work_with_multiindex(self):
+        """ """
         expected = DataFrame(
             {
                 ("A", "a"): self.df1[("A", "a")],
@@ -132,10 +150,28 @@
     def test_single_vars_work_with_multiindex(
         self, id_vars, value_vars, col_level, expected
     ):
+        """
+
+        Parameters
+        ----------
+        id_vars :
+            
+        value_vars :
+            
+        col_level :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         result = self.df1.melt(id_vars, value_vars, col_level=col_level)
         tm.assert_frame_equal(result, expected)
 
     def test_tuple_vars_fail_with_multiindex(self):
+        """ """
         # melt should fail with an informative error message if
         # the columns have a MultiIndex and a tuple is passed
         # for id_vars or value_vars.
@@ -154,6 +190,7 @@
                 self.df1.melt(id_vars=id_vars, value_vars=value_vars)
 
     def test_custom_var_name(self):
+        """ """
         result5 = self.df.melt(var_name=self.var_name)
         assert result5.columns.tolist() == ["var", "value"]
 
@@ -183,6 +220,7 @@
         tm.assert_frame_equal(result9, expected9)
 
     def test_custom_value_name(self):
+        """ """
         result10 = self.df.melt(value_name=self.value_name)
         assert result10.columns.tolist() == ["variable", "val"]
 
@@ -212,6 +250,7 @@
         tm.assert_frame_equal(result14, expected14)
 
     def test_custom_var_and_value_name(self):
+        """ """
 
         result15 = self.df.melt(var_name=self.var_name, value_name=self.value_name)
         assert result15.columns.tolist() == ["var", "val"]
@@ -257,12 +296,14 @@
         assert result20.columns.tolist() == ["foo", "value"]
 
     def test_col_level(self):
+        """ """
         res1 = self.df1.melt(col_level=0)
         res2 = self.df1.melt(col_level="CAP")
         assert res1.columns.tolist() == ["CAP", "value"]
         assert res2.columns.tolist() == ["CAP", "value"]
 
     def test_multiindex(self):
+        """ """
         res = self.df1.melt()
         assert res.columns.tolist() == ["CAP", "low", "value"]
 
@@ -275,6 +316,17 @@
         ],
     )
     def test_pandas_dtypes(self, col):
+        """
+
+        Parameters
+        ----------
+        col :
+            
+
+        Returns
+        -------
+
+        """
         # GH 15785
         df = DataFrame(
             {"klass": range(5), "col": col, "attr1": [1, 0, 0, 0, 0], "attr2": col}
@@ -295,6 +347,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_preserve_category(self):
+        """ """
         # GH 15853
         data = DataFrame({"A": [1, 2], "B": pd.Categorical(["X", "Y"])})
         result = pd.melt(data, ["B"], ["A"])
@@ -305,6 +358,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_melt_missing_columns_raises(self):
+        """ """
         # GH-23575
         # This test is to ensure that pandas raises an error if melting is
         # attempted with column names absent from the dataframe
@@ -342,6 +396,7 @@
             multi.melt(["A"], ["F"], col_level=0)
 
     def test_melt_mixed_int_str_id_vars(self):
+        """ """
         # GH 29718
         df = DataFrame({0: ["foo"], "a": ["bar"], "b": [1], "d": [2]})
         result = melt(df, id_vars=[0, "a"], value_vars=["b", "d"])
@@ -351,6 +406,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_melt_mixed_int_str_value_vars(self):
+        """ """
         # GH 29718
         df = DataFrame({0: ["foo"], "a": ["bar"]})
         result = melt(df, value_vars=[0, "a"])
@@ -358,6 +414,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_ignore_index(self):
+        """ """
         # GH 17440
         df = DataFrame({"foo": [0], "bar": [1]}, index=["first"])
         result = melt(df, ignore_index=False)
@@ -367,6 +424,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_ignore_multiindex(self):
+        """ """
         # GH 17440
         index = pd.MultiIndex.from_tuples(
             [("first", "second"), ("first", "third")], names=["baz", "foobar"]
@@ -385,6 +443,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_ignore_index_name_and_type(self):
+        """ """
         # GH 17440
         index = pd.Index(["foo", "bar"], dtype="category", name="baz")
         df = DataFrame({"x": [0, 1], "y": [2, 3]}, index=index)
@@ -400,7 +459,9 @@
 
 
 class TestLreshape:
+    """ """
     def test_pairs(self):
+        """ """
         data = {
             "birthdt": [
                 "08jan2009",
@@ -631,7 +692,9 @@
 
 
 class TestWideToLong:
+    """ """
     def test_simple(self):
+        """ """
         np.random.seed(123)
         x = np.random.randn(3)
         df = pd.DataFrame(
@@ -657,6 +720,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_stubs(self):
+        """ """
         # GH9204
         df = pd.DataFrame([[0, 1, 2, 3, 8], [4, 5, 6, 7, 9]])
         df.columns = ["id", "inc1", "inc2", "edu1", "edu2"]
@@ -668,6 +732,7 @@
         assert stubs == ["inc", "edu"]
 
     def test_separating_character(self):
+        """ """
         # GH14779
         np.random.seed(123)
         x = np.random.randn(3)
@@ -694,6 +759,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_escapable_characters(self):
+        """ """
         np.random.seed(123)
         x = np.random.randn(3)
         df = pd.DataFrame(
@@ -721,6 +787,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_unbalanced(self):
+        """ """
         # test that we can have a varying amount of time variables
         df = pd.DataFrame(
             {
@@ -744,6 +811,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_character_overlap(self):
+        """ """
         # Test we handle overlapping characters in both id_vars and value_vars
         df = pd.DataFrame(
             {
@@ -774,6 +842,7 @@
         tm.assert_frame_equal(result.sort_index(axis=1), expected.sort_index(axis=1))
 
     def test_invalid_separator(self):
+        """ """
         # if an invalid separator is supplied a empty data frame is returned
         sep = "nope!"
         df = pd.DataFrame(
@@ -804,6 +873,7 @@
         tm.assert_frame_equal(result.sort_index(axis=1), expected.sort_index(axis=1))
 
     def test_num_string_disambiguation(self):
+        """ """
         # Test that we can disambiguate number value_vars from
         # string value_vars
         df = pd.DataFrame(
@@ -837,6 +907,7 @@
         tm.assert_frame_equal(result.sort_index(axis=1), expected.sort_index(axis=1))
 
     def test_invalid_suffixtype(self):
+        """ """
         # If all stubs names end with a string, but a numeric suffix is
         # assumed,  an empty data frame is returned
         df = pd.DataFrame(
@@ -866,6 +937,7 @@
         tm.assert_frame_equal(result.sort_index(axis=1), expected.sort_index(axis=1))
 
     def test_multiple_id_columns(self):
+        """ """
         # Taken from http://www.ats.ucla.edu/stat/stata/modules/reshapel.htm
         df = pd.DataFrame(
             {
@@ -907,6 +979,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_non_unique_idvars(self):
+        """ """
         # GH16382
         # Raise an error message if non unique id vars (i) are passed
         df = pd.DataFrame(
@@ -917,6 +990,7 @@
             wide_to_long(df, ["A_A", "B_B"], i="x", j="colname")
 
     def test_cast_j_int(self):
+        """ """
         df = pd.DataFrame(
             {
                 "actor_1": ["CCH Pounder", "Johnny Depp", "Christoph Waltz"],
@@ -956,6 +1030,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_identical_stubnames(self):
+        """ """
         df = pd.DataFrame(
             {
                 "A2010": [1.0, 2.0],
@@ -969,6 +1044,7 @@
             wide_to_long(df, ["A", "B"], i="A", j="colname")
 
     def test_nonnumeric_suffix(self):
+        """ """
         df = pd.DataFrame(
             {
                 "treatment_placebo": [1.0, 2.0],
@@ -992,6 +1068,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_mixed_type_suffix(self):
+        """ """
         df = pd.DataFrame(
             {
                 "A": ["X1", "X2"],
@@ -1015,6 +1092,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_float_suffix(self):
+        """ """
         df = pd.DataFrame(
             {
                 "treatment_1.1": [1.0, 2.0],
@@ -1039,6 +1117,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_col_substring_of_stubname(self):
+        """ """
         # GH22468
         # Don't raise ValueError when a column name is a substring
         # of a stubname that's been passed as a string
@@ -1057,6 +1136,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_warn_of_column_name_value(self):
+        """ """
         # GH34731
         # raise a warning if the resultant value column name matches
         # a name in the dataframe already (default name is "value")
