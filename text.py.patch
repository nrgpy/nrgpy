# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/utils/text.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/utils/text.py
@@ -25,21 +25,30 @@
 
 class LSString(str):
     """String derivative with a special access attributes.
-
+    
     These are normal strings, but with the special attributes:
-
+    
         .l (or .list) : value as list (split on newlines).
         .n (or .nlstr): original value (the string itself).
         .s (or .spstr): value as whitespace-separated string.
         .p (or .paths): list of path objects (requires path.py package)
-
+    
     Any values which require transformations are computed only once and
     cached.
-
+    
     Such strings are very useful to efficiently interact with the shell, which
-    typically only understands whitespace-separated options for commands."""
+    typically only understands whitespace-separated options for commands.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
 
     def get_list(self):
+        """ """
         try:
             return self.__list
         except AttributeError:
@@ -49,6 +58,7 @@
     l = list = property(get_list)
 
     def get_spstr(self):
+        """ """
         try:
             return self.__spstr
         except AttributeError:
@@ -58,11 +68,13 @@
     s = spstr = property(get_spstr)
 
     def get_nlstr(self):
+        """ """
         return self
 
     n = nlstr = property(get_nlstr)
 
     def get_paths(self):
+        """ """
         try:
             return self.__paths
         except AttributeError:
@@ -86,23 +98,33 @@
 
 class SList(list):
     """List derivative with a special access attributes.
-
+    
     These are normal lists, but with the special attributes:
-
+    
     * .l (or .list) : value as list (the list itself).
     * .n (or .nlstr): value as a string, joined on newlines.
     * .s (or .spstr): value as a string, joined on spaces.
     * .p (or .paths): list of path objects (requires path.py package)
-
+    
     Any values which require transformations are computed only once and
-    cached."""
+    cached.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
 
     def get_list(self):
+        """ """
         return self
 
     l = list = property(get_list)
 
     def get_spstr(self):
+        """ """
         try:
             return self.__spstr
         except AttributeError:
@@ -112,6 +134,7 @@
     s = spstr = property(get_spstr)
 
     def get_nlstr(self):
+        """ """
         try:
             return self.__nlstr
         except AttributeError:
@@ -121,6 +144,7 @@
     n = nlstr = property(get_nlstr)
 
     def get_paths(self):
+        """ """
         try:
             return self.__paths
         except AttributeError:
@@ -130,22 +154,46 @@
     p = paths = property(get_paths)
 
     def grep(self, pattern, prune = False, field = None):
-        """ Return all strings matching 'pattern' (a regex or callable)
-
-        This is case-insensitive. If prune is true, return all items
-        NOT matching the pattern.
-
-        If field is specified, the match must occur in the specified
-        whitespace-separated field.
-
-        Examples::
-
+        """
+
+        Parameters
+        ----------
+        pattern :
+            
+        prune :
+             (Default value = False)
+        field :
+             (Default value = None)
+
+        Returns
+        -------
+        type
+            This is case-insensitive. If prune is true, return all items
+            NOT matching the pattern.
+            
+            If field is specified, the match must occur in the specified
+            whitespace-separated field.
+            
+            Examples::
+            
             a.grep( lambda x: x.startswith('C') )
             a.grep('Cha.*log', prune=1)
             a.grep('chm', field=-1)
+
         """
 
         def match_target(s):
+            """
+
+            Parameters
+            ----------
+            s :
+                
+
+            Returns
+            -------
+
+            """
             if field is None:
                 return s
             parts = s.split()
@@ -165,23 +213,32 @@
             return SList([el for el in self if not pred(match_target(el))])
 
     def fields(self, *fields):
-        """ Collect whitespace-separated fields from string list
-
+        """Collect whitespace-separated fields from string list
+        
         Allows quick awk-like usage of string lists.
-
+        
         Example data (in var a, created by 'a = !ls -l')::
-
+        
             -rwxrwxrwx  1 ville None      18 Dec 14  2006 ChangeLog
             drwxrwxrwx+ 6 ville None       0 Oct 24 18:05 IPython
-
+        
         * ``a.fields(0)`` is ``['-rwxrwxrwx', 'drwxrwxrwx+']``
         * ``a.fields(1,0)`` is ``['1 -rwxrwxrwx', '6 drwxrwxrwx+']``
           (note the joining by space).
         * ``a.fields(-1)`` is ``['ChangeLog', 'IPython']``
-
+        
         IndexErrors are ignored.
-
+        
         Without args, fields() just split()'s the strings.
+
+        Parameters
+        ----------
+        *fields :
+            
+
+        Returns
+        -------
+
         """
         if len(fields) == 0:
             return [el.split() for el in self]
@@ -201,13 +258,23 @@
         return res
 
     def sort(self,field= None,  nums = False):
-        """ sort by specified fields (see fields())
-
+        """sort by specified fields (see fields())
+        
         Example::
-
+        
             a.sort(1, nums = True)
-
+        
         Sorts a by second field, in numerical order (so that 21 > 3)
+
+        Parameters
+        ----------
+        field :
+             (Default value = None)
+        nums :
+             (Default value = False)
+
+        Returns
+        -------
 
         """
 
@@ -248,28 +315,26 @@
 
 def indent(instr,nspaces=4, ntabs=0, flatten=False):
     """Indent a string a given number of spaces or tabstops.
-
+    
     indent(str,nspaces=4,ntabs=0) -> indent str by ntabs+nspaces.
 
     Parameters
     ----------
-
     instr : basestring
         The string to be indented.
     nspaces : int (default: 4)
-        The number of spaces to be indented.
+        The number of spaces to be indented. (Default value = 4)
     ntabs : int (default: 0)
-        The number of tabs to be indented.
+        The number of tabs to be indented. (Default value = 0)
     flatten : bool (default: False)
         Whether to scrub existing indentation.  If True, all lines will be
         aligned to the same indentation.  If False, existing indentation will
-        be strictly increased.
-
-    Returns
-    -------
-
-    str|unicode : string indented by ntabs and nspaces.
-
+        be strictly increased. (Default value = False)
+
+    Returns
+    -------
+
+    
     """
     if instr is None:
         return
@@ -289,16 +354,24 @@
     """Always return a list of strings, given a string or list of strings
     as input.
 
+    Parameters
+    ----------
+    arg :
+        
+
+    Returns
+    -------
+
     Examples
     --------
     ::
-
+    
         In [7]: list_strings('A single string')
         Out[7]: ['A single string']
-
+    
         In [8]: list_strings(['A single string in a list'])
         Out[8]: ['A single string in a list']
-
+    
         In [9]: list_strings(['A','list','of','strings'])
         Out[9]: ['A', 'list', 'of', 'strings']
     """
@@ -312,19 +385,30 @@
 def marquee(txt='',width=78,mark='*'):
     """Return the input string centered in a 'marquee'.
 
+    Parameters
+    ----------
+    txt :
+         (Default value = '')
+    width :
+         (Default value = 78)
+    mark :
+         (Default value = '*')
+
+    Returns
+    -------
+
     Examples
     --------
     ::
-
+    
         In [16]: marquee('A test',40)
         Out[16]: '**************** A test ****************'
-
+    
         In [17]: marquee('A test',40,'-')
         Out[17]: '---------------- A test ----------------'
-
+    
         In [18]: marquee('A test',40,' ')
         Out[18]: '                 A test                 '
-
     """
     if not txt:
         return (mark*width)[:width]
@@ -337,7 +421,19 @@
 ini_spaces_re = re.compile(r'^(\s+)')
 
 def num_ini_spaces(strng):
-    """Return the number of initial spaces in a string"""
+    """
+
+    Parameters
+    ----------
+    strng :
+        
+
+    Returns
+    -------
+    type
+        
+
+    """
 
     ini_spaces = ini_spaces_re.match(strng)
     if ini_spaces:
@@ -348,8 +444,18 @@
 
 def format_screen(strng):
     """Format a string for screen printing.
-
-    This removes some latex-type format codes."""
+    
+    This removes some latex-type format codes.
+
+    Parameters
+    ----------
+    strng :
+        
+
+    Returns
+    -------
+
+    """
     # Paragraph continue
     par_re = re.compile(r'\\$',re.MULTILINE)
     strng = par_re.sub('',strng)
@@ -358,13 +464,22 @@
 
 def dedent(text):
     """Equivalent of textwrap.dedent that ignores unindented first line.
-
+    
     This means it will still dedent strings like:
     '''foo
     is a bar
     '''
-
+    
     For use in wrap_paragraphs.
+
+    Parameters
+    ----------
+    text :
+        
+
+    Returns
+    -------
+
     """
 
     if text.startswith('\n'):
@@ -385,14 +500,21 @@
 
 def wrap_paragraphs(text, ncols=80):
     """Wrap multiple paragraphs to fit a specified width.
-
+    
     This is equivalent to textwrap.wrap, but with support for multiple
     paragraphs, as separated by empty lines.
 
-    Returns
-    -------
-
-    list of complete paragraphs, wrapped to fill `ncols` columns.
+    Parameters
+    ----------
+    text :
+        
+    ncols :
+         (Default value = 80)
+
+    Returns
+    -------
+
+    
     """
     paragraph_re = re.compile(r'\n(\s*\n)+', re.MULTILINE)
     text = dedent(text).strip()
@@ -410,9 +532,18 @@
 
 
 def long_substr(data):
-    """Return the longest common substring in a list of strings.
-    
-    Credit: http://stackoverflow.com/questions/2892931/longest-common-substring-from-more-than-two-strings-python
+    """
+
+    Parameters
+    ----------
+    data :
+        
+
+    Returns
+    -------
+    type
+        Credit: http://stackoverflow.com/questions/2892931/longest-common-substring-from-more-than-two-strings-python
+
     """
     substr = ''
     if len(data) > 1 and len(data[0]) > 0:
@@ -427,30 +558,34 @@
 
 def strip_email_quotes(text):
     """Strip leading email quotation characters ('>').
-
+    
     Removes any combination of leading '>' interspersed with whitespace that
     appears *identically* in all lines of the input text.
 
     Parameters
     ----------
     text : str
+        
+
+    Returns
+    -------
 
     Examples
     --------
-
+    
     Simple uses::
-
+    
         In [2]: strip_email_quotes('> > text')
         Out[2]: 'text'
-
+    
         In [3]: strip_email_quotes('> > text\\n> > more')
         Out[3]: 'text\\nmore'
-
+    
     Note how only the common prefix that appears in all lines is stripped::
-
+    
         In [4]: strip_email_quotes('> > text\\n> > more\\n> more...')
         Out[4]: '> text\\n> more\\nmore...'
-
+    
     So if any line has no quote marks ('>') , then none are stripped from any
     of them ::
     
@@ -473,13 +608,17 @@
     return text
 
 def strip_ansi(source):
-    """
-    Remove ansi escape codes from text.
-    
-    Parameters
-    ----------
-    source : str
-        Source to remove the ansi from
+    """Remove ansi escape codes from text.
+
+    Parameters
+    ----------
+    source :
+        
+
+    Returns
+    -------
+
+    
     """
     return re.sub(r'\033\[(\d|;)+?m', '', source)
 
@@ -494,18 +633,39 @@
     This is to be used in templating cases, such as the parallel batch
     script templates, where simple arithmetic on arguments is useful.
 
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     Examples
     --------
     ::
-
+    
         In [1]: f = EvalFormatter()
         In [2]: f.format('{n//4}', n=8)
         Out[2]: '2'
-
+    
         In [3]: f.format("{greeting[slice(2,4)]}", greeting="Hello")
         Out[3]: 'll'
     """
     def get_field(self, name, args, kwargs):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+        args :
+            
+        kwargs :
+            
+
+        Returns
+        -------
+
+        """
         v = eval(name, kwargs)
         return v, name
 
@@ -521,24 +681,45 @@
     
     Note that this version allows slicing using [1:2], so you cannot specify
     a format string. Use :class:`EvalFormatter` to permit format strings.
-    
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     Examples
     --------
     ::
-
+    
         In [1]: f = FullEvalFormatter()
         In [2]: f.format('{n//4}', n=8)
         Out[2]: '2'
-
+    
         In [3]: f.format('{list(range(5))[2:4]}')
         Out[3]: '[2, 3]'
-
+    
         In [4]: f.format('{3*2}')
         Out[4]: '6'
     """
     # copied from Formatter._vformat with minor changes to allow eval
     # and replace the format_spec code with slicing
     def vformat(self, format_string:str, args, kwargs)->str:
+        """
+
+        Parameters
+        ----------
+        format_string:str :
+            
+        args :
+            
+        kwargs :
+            
+
+        Returns
+        -------
+
+        """
         result = []
         for literal_text, field_name, format_spec, conversion in \
                 self.parse(format_string):
@@ -574,22 +755,39 @@
     access only. Standard {foo} replacement also works, and allows full
     evaluation of its arguments.
 
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     Examples
     --------
     ::
-
+    
         In [1]: f = DollarFormatter()
         In [2]: f.format('{n//4}', n=8)
         Out[2]: '2'
-
+    
         In [3]: f.format('23 * 76 is $result', result=23*76)
         Out[3]: '23 * 76 is 1748'
-
+    
         In [4]: f.format('$a or {b}', a=1, b=2)
         Out[4]: '1 or 2'
     """
     _dollar_pattern_ignore_single_quote = re.compile(r"(.*?)\$(\$?[\w\.]+)(?=([^']*'[^']*')*[^']*$)")
     def parse(self, fmt_string):
+        """
+
+        Parameters
+        ----------
+        fmt_string :
+            
+
+        Returns
+        -------
+
+        """
         for literal_txt, field_name, format_spec, conversion \
                     in Formatter.parse(self, fmt_string):
             
@@ -614,7 +812,21 @@
 #-----------------------------------------------------------------------------
 
 def _col_chunks(l, max_rows, row_first=False):
-    """Yield successive max_rows-sized column chunks from l."""
+    """Yield successive max_rows-sized column chunks from l.
+
+    Parameters
+    ----------
+    l :
+        
+    max_rows :
+        
+    row_first :
+         (Default value = False)
+
+    Returns
+    -------
+
+    """
     if row_first:
         ncols = (len(l) // max_rows) + (len(l) % max_rows > 0)
         for i in range(ncols):
@@ -625,7 +837,23 @@
 
 
 def _find_optimal(rlist, row_first=False, separator_size=2, displaywidth=80):
-    """Calculate optimal info to columnize a list of string"""
+    """Calculate optimal info to columnize a list of string
+
+    Parameters
+    ----------
+    rlist :
+        
+    row_first :
+         (Default value = False)
+    separator_size :
+         (Default value = 2)
+    displaywidth :
+         (Default value = 80)
+
+    Returns
+    -------
+
+    """
     for max_rows in range(1, len(rlist) + 1):
         col_widths = list(map(max, _col_chunks(rlist, max_rows, row_first)))
         sumlength = sum(col_widths)
@@ -640,7 +868,23 @@
 
 
 def _get_or_default(mylist, i, default=None):
-    """return list item number, or default if don't exist"""
+    """
+
+    Parameters
+    ----------
+    mylist :
+        
+    i :
+        
+    default :
+         (Default value = None)
+
+    Returns
+    -------
+    type
+        
+
+    """
     if i >= len(mylist):
         return default
     else :
@@ -652,8 +896,7 @@
 
     Parameters
     ----------
-
-    items
+    items :
         list of strings to columize
     row_first : (default False)
         Whether to compute columns for a row-first matrix instead of
@@ -664,33 +907,33 @@
         How much characters will be used as a separation between each columns.
     displaywidth : int (default=80)
         The width of the area onto which the columns should enter
-
-    Returns
-    -------
-
+    *args :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
     strings_matrix
-
         nested list of string, the outer most list contains as many list as
         rows, the innermost lists have each as many element as columns. If the
         total number of elements in `items` does not equal the product of
         rows*columns, the last element of some lists are filled with `None`.
-
     dict_info
         some info to make columnize easier:
-
         num_columns
-          number of columns
+        number of columns
         max_rows
-          maximum number of rows (final number may be less)
+        maximum number of rows (final number may be less)
         column_widths
-          list of with of each columns
+        list of with of each columns
         optimal_separator_width
-          best separator width between columns
+        best separator width between columns
 
     Examples
     --------
     ::
-
+    
         In [1]: l = ['aaa','b','cc','d','eeeee','f','g','h','i','j','k','l']
         In [2]: list, info = compute_item_matrix(l, displaywidth=12)
         In [3]: list
@@ -708,26 +951,26 @@
 
 
 def columnize(items, row_first=False, separator='  ', displaywidth=80, spread=False):
-    """ Transform a list of strings into a single string with columns.
+    """Transform a list of strings into a single string with columns.
 
     Parameters
     ----------
     items : sequence of strings
         The strings to process.
-
     row_first : (default False)
         Whether to compute columns for a row-first matrix instead of
         column-first (default).
-
     separator : str, optional [default is two spaces]
-        The string that separates columns.
-
+        The string that separates columns. (Default value = '  ')
     displaywidth : int, optional [default is 80]
-        Width of the display in number of characters.
-
-    Returns
-    -------
-    The formatted string.
+        Width of the display in number of characters. (Default value = 80)
+    spread :
+         (Default value = False)
+
+    Returns
+    -------
+
+    
     """
     if not items:
         return '\n'
@@ -741,7 +984,24 @@
 
 def get_text_list(list_, last_sep=' and ', sep=", ", wrap_item_with=""):
     """
-    Return a string with a natural enumeration of items
+
+    Parameters
+    ----------
+    list_ :
+        
+    last_sep :
+         (Default value = ' and ')
+    sep :
+         (Default value = ")
+    " :
+        
+    wrap_item_with :
+         (Default value = "")
+
+    Returns
+    -------
+    type
+        
 
     >>> get_text_list(['a', 'b', 'c', 'd'])
     'a, b, c and d'
