# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/reshape/test_crosstab.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/reshape/test_crosstab.py
@@ -6,7 +6,19 @@
 
 
 class TestCrosstab:
+    """ """
     def setup_method(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         df = DataFrame(
             {
                 "A": [
@@ -57,12 +69,14 @@
         self.df = df.append(df, ignore_index=True)
 
     def test_crosstab_single(self):
+        """ """
         df = self.df
         result = crosstab(df["A"], df["C"])
         expected = df.groupby(["A", "C"]).size().unstack()
         tm.assert_frame_equal(result, expected.fillna(0).astype(np.int64))
 
     def test_crosstab_multiple(self):
+        """ """
         df = self.df
 
         result = crosstab(df["A"], [df["B"], df["C"]])
@@ -76,6 +90,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_crosstab_ndarray(self):
+        """ """
         a = np.random.randint(0, 5, size=100)
         b = np.random.randint(0, 3, size=100)
         c = np.random.randint(0, 10, size=100)
@@ -96,6 +111,7 @@
         assert result.columns.name == "col_0"
 
     def test_crosstab_non_aligned(self):
+        """ """
         # GH 17005
         a = Series([0, 1, 1], index=["a", "b", "c"])
         b = Series([3, 4, 3, 4, 3], index=["a", "b", "c", "d", "f"])
@@ -114,6 +130,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_crosstab_margins(self):
+        """ """
         a = np.random.randint(0, 7, size=100)
         b = np.random.randint(0, 3, size=100)
         c = np.random.randint(0, 5, size=100)
@@ -144,6 +161,7 @@
         tm.assert_series_equal(all_rows, exp_rows)
 
     def test_crosstab_margins_set_margin_name(self):
+        """ """
         # GH 15972
         a = np.random.randint(0, 7, size=100)
         b = np.random.randint(0, 3, size=100)
@@ -194,6 +212,7 @@
                 )
 
     def test_crosstab_pass_values(self):
+        """ """
         a = np.random.randint(0, 7, size=100)
         b = np.random.randint(0, 3, size=100)
         c = np.random.randint(0, 5, size=100)
@@ -211,6 +230,7 @@
         tm.assert_frame_equal(table, expected)
 
     def test_crosstab_dropna(self):
+        """ """
         # GH 3820
         a = np.array(["foo", "foo", "foo", "bar", "bar", "foo", "foo"], dtype=object)
         b = np.array(["one", "one", "two", "one", "two", "two", "two"], dtype=object)
@@ -225,6 +245,7 @@
         tm.assert_index_equal(res.columns, m)
 
     def test_crosstab_no_overlap(self):
+        """ """
         # GS 10291
 
         s1 = Series([1, 2, 3], index=[1, 2, 3])
@@ -236,6 +257,7 @@
         tm.assert_frame_equal(actual, expected)
 
     def test_margin_dropna(self):
+        """ """
         # GH 12577
         # pivot_table counts null into margin ('All')
         # when margins=true and dropna=true
@@ -333,6 +355,7 @@
         tm.assert_frame_equal(actual, expected)
 
     def test_crosstab_normalize(self):
+        """ """
         # Issue 12578
         df = DataFrame(
             {"a": [1, 2, 2, 2, 2], "b": [3, 3, 4, 4, 4], "c": [1, 1, np.nan, 1, 1]}
@@ -414,6 +437,7 @@
         tm.assert_frame_equal(test_case, norm_sum)
 
     def test_crosstab_with_empties(self):
+        """ """
         # Check handling of empties
         df = DataFrame(
             {
@@ -443,6 +467,7 @@
         tm.assert_frame_equal(nans, calculated)
 
     def test_crosstab_errors(self):
+        """ """
         # Issue 12578
 
         df = DataFrame(
@@ -469,6 +494,7 @@
             crosstab(df.a, df.b, normalize="all", margins=42)
 
     def test_crosstab_with_categorial_columns(self):
+        """ """
         # GH 8860
         df = DataFrame(
             {
@@ -491,6 +517,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_crosstab_with_numpy_size(self):
+        """ """
         # GH 4003
         df = DataFrame(
             {
@@ -534,6 +561,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_crosstab_dup_index_names(self):
+        """ """
         # GH 13279
         s = Series(range(3), name="foo")
 
@@ -546,6 +574,17 @@
 
     @pytest.mark.parametrize("names", [["a", ("b", "c")], [("a", "b"), "c"]])
     def test_crosstab_tuple_name(self, names):
+        """
+
+        Parameters
+        ----------
+        names :
+            
+
+        Returns
+        -------
+
+        """
         s1 = Series(range(3), name=names[0])
         s2 = Series(range(1, 4), name=names[1])
 
@@ -556,6 +595,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_crosstab_both_tuple_names(self):
+        """ """
         # GH 18321
         s1 = Series(range(3), name=("a", "b"))
         s2 = Series(range(3), name=("c", "d"))
@@ -569,6 +609,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_crosstab_unsorted_order(self):
+        """ """
         df = DataFrame({"b": [3, 1, 2], "a": [5, 4, 6]}, index=["C", "A", "B"])
         result = crosstab(df.index, [df.b, df.a])
         e_idx = Index(["A", "B", "C"], name="row_0")
@@ -579,6 +620,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_crosstab_normalize_multiple_columns(self):
+        """ """
         # GH 15150
         df = DataFrame(
             {
@@ -619,6 +661,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_margin_normalize(self):
+        """ """
         # GH 27500
         df = DataFrame(
             {
