# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jsonschema/tests/test_cli.py
+++ b/..//venv/lib/python3.8/site-packages/jsonschema/tests/test_cli.py
@@ -9,34 +9,81 @@
 
 
 def fake_validator(*errors):
+    """
+
+    Parameters
+    ----------
+    *errors :
+        
+
+    Returns
+    -------
+
+    """
     errors = list(reversed(errors))
 
     class FakeValidator(object):
+        """ """
         def __init__(self, *args, **kwargs):
             pass
 
         def iter_errors(self, instance):
+            """
+
+            Parameters
+            ----------
+            instance :
+                
+
+            Returns
+            -------
+
+            """
             if errors:
                 return errors.pop()
             return []
 
         def check_schema(self, schema):
+            """
+
+            Parameters
+            ----------
+            schema :
+                
+
+            Returns
+            -------
+
+            """
             pass
 
     return FakeValidator
 
 
 class TestParser(TestCase):
+    """ """
 
     FakeValidator = fake_validator()
     instance_file = "foo.json"
     schema_file = "schema.json"
 
     def setUp(self):
+        """ """
         cli.open = self.fake_open
         self.addCleanup(delattr, cli, "open")
 
     def fake_open(self, path):
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
         if path == self.instance_file:
             contents = ""
         elif path == self.schema_file:
@@ -46,6 +93,7 @@
         return NativeIO(json.dumps(contents))
 
     def test_find_validator_by_fully_qualified_object_name(self):
+        """ """
         arguments = cli.parse_args(
             [
                 "--validator",
@@ -57,6 +105,7 @@
         self.assertIs(arguments["validator"], self.FakeValidator)
 
     def test_find_validator_in_jsonschema(self):
+        """ """
         arguments = cli.parse_args(
             [
                 "--validator", "Draft4Validator",
@@ -68,7 +117,9 @@
 
 
 class TestCLI(TestCase):
+    """ """
     def test_draft3_schema_draft4_validator(self):
+        """ """
         stdout, stderr = NativeIO(), NativeIO()
         with self.assertRaises(SchemaError):
             cli.run(
@@ -89,6 +140,7 @@
             )
 
     def test_successful_validation(self):
+        """ """
         stdout, stderr = NativeIO(), NativeIO()
         exit_code = cli.run(
             {
@@ -105,6 +157,7 @@
         self.assertEqual(exit_code, 0)
 
     def test_unsuccessful_validation(self):
+        """ """
         error = ValidationError("I am an error!", instance=1)
         stdout, stderr = NativeIO(), NativeIO()
         exit_code = cli.run(
@@ -122,6 +175,7 @@
         self.assertEqual(exit_code, 1)
 
     def test_unsuccessful_validation_multiple_instances(self):
+        """ """
         first_errors = [
             ValidationError("9", instance=1),
             ValidationError("8", instance=1),
@@ -143,6 +197,7 @@
         self.assertEqual(exit_code, 1)
 
     def test_version(self):
+        """ """
         version = subprocess.check_output(
             [sys.executable, "-m", "jsonschema", "--version"],
             stderr=subprocess.STDOUT,
