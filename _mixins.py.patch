# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/arrays/_mixins.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/arrays/_mixins.py
@@ -13,18 +13,26 @@
 
 
 class NDArrayBackedExtensionArray(ExtensionArray):
-    """
-    ExtensionArray that is backed by a single NumPy ndarray.
-    """
+    """ExtensionArray that is backed by a single NumPy ndarray."""
 
     _ndarray: np.ndarray
 
     def _from_backing_data(self: _T, arr: np.ndarray) -> _T:
-        """
-        Construct a new ExtensionArray `new_array` with `arr` as its _ndarray.
-
+        """Construct a new ExtensionArray `new_array` with `arr` as its _ndarray.
+        
         This should round-trip:
             self == self._from_backing_data(self._ndarray)
+
+        Parameters
+        ----------
+        self: _T :
+            
+        arr: np.ndarray :
+            
+
+        Returns
+        -------
+
         """
         raise AbstractMethodError(self)
 
@@ -36,6 +44,23 @@
         allow_fill: bool = False,
         fill_value: Any = None,
     ) -> _T:
+        """
+
+        Parameters
+        ----------
+        self: _T :
+            
+        indices: Sequence[int] :
+            
+        allow_fill: bool :
+             (Default value = False)
+        fill_value: Any :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if allow_fill:
             fill_value = self._validate_fill_value(fill_value)
 
@@ -45,21 +70,20 @@
         return self._from_backing_data(new_data)
 
     def _validate_fill_value(self, fill_value):
-        """
-        If a fill_value is passed to `take` convert it to a representation
+        """If a fill_value is passed to `take` convert it to a representation
         suitable for self._ndarray, raising ValueError if this is not possible.
 
         Parameters
         ----------
         fill_value : object
+            
 
         Returns
         -------
         fill_value : native representation
-
-        Raises
-        ------
-        ValueError
+            
+
+        
         """
         raise AbstractMethodError(self)
 
@@ -69,6 +93,7 @@
     #  the _index_data kludge in libreduction
     @property
     def shape(self) -> Tuple[int, ...]:
+        """ """
         return self._ndarray.shape
 
     def __len__(self) -> int:
@@ -76,38 +101,104 @@
 
     @cache_readonly
     def ndim(self) -> int:
+        """ """
         return len(self.shape)
 
     @cache_readonly
     def size(self) -> int:
+        """ """
         return np.prod(self.shape)
 
     @cache_readonly
     def nbytes(self) -> int:
+        """ """
         return self._ndarray.nbytes
 
     def reshape(self: _T, *args, **kwargs) -> _T:
+        """
+
+        Parameters
+        ----------
+        self: _T :
+            
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         new_data = self._ndarray.reshape(*args, **kwargs)
         return self._from_backing_data(new_data)
 
     def ravel(self: _T, *args, **kwargs) -> _T:
+        """
+
+        Parameters
+        ----------
+        self: _T :
+            
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         new_data = self._ndarray.ravel(*args, **kwargs)
         return self._from_backing_data(new_data)
 
     @property
     def T(self: _T) -> _T:
+        """
+
+        Parameters
+        ----------
+        self: _T :
+            
+
+        Returns
+        -------
+
+        """
         new_data = self._ndarray.T
         return self._from_backing_data(new_data)
 
     # ------------------------------------------------------------------------
 
     def copy(self: _T) -> _T:
+        """
+
+        Parameters
+        ----------
+        self: _T :
+            
+
+        Returns
+        -------
+
+        """
         new_data = self._ndarray.copy()
         return self._from_backing_data(new_data)
 
     def repeat(self: _T, repeats, axis=None) -> _T:
-        """
-        Repeat elements of an array.
+        """Repeat elements of an array.
+
+        Parameters
+        ----------
+        self: _T :
+            
+        repeats :
+            
+        axis :
+             (Default value = None)
+
+        Returns
+        -------
 
         See Also
         --------
@@ -118,5 +209,16 @@
         return self._from_backing_data(new_data)
 
     def unique(self: _T) -> _T:
+        """
+
+        Parameters
+        ----------
+        self: _T :
+            
+
+        Returns
+        -------
+
+        """
         new_data = unique(self._ndarray)
         return self._from_backing_data(new_data)
