# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_scalar_methods.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_scalar_methods.py
@@ -11,6 +11,7 @@
 
 
 class TestAsIntegerRatio:
+    """ """
     # derived in part from the cpython test "test_floatasratio"
 
     @pytest.mark.parametrize("ftype", [
@@ -22,11 +23,37 @@
         (11.5, (23, 2)),
         ])
     def test_small(self, ftype, f, ratio):
+        """
+
+        Parameters
+        ----------
+        ftype :
+            
+        f :
+            
+        ratio :
+            
+
+        Returns
+        -------
+
+        """
         assert_equal(ftype(f).as_integer_ratio(), ratio)
 
     @pytest.mark.parametrize("ftype", [
         np.half, np.single, np.double, np.longdouble])
     def test_simple_fractions(self, ftype):
+        """
+
+        Parameters
+        ----------
+        ftype :
+            
+
+        Returns
+        -------
+
+        """
         R = fractions.Fraction
         assert_equal(R(0, 1),
                      R(*ftype(0.0).as_integer_ratio()))
@@ -40,11 +67,23 @@
     @pytest.mark.parametrize("ftype", [
         np.half, np.single, np.double, np.longdouble])
     def test_errors(self, ftype):
+        """
+
+        Parameters
+        ----------
+        ftype :
+            
+
+        Returns
+        -------
+
+        """
         assert_raises(OverflowError, ftype('inf').as_integer_ratio)
         assert_raises(OverflowError, ftype('-inf').as_integer_ratio)
         assert_raises(ValueError, ftype('nan').as_integer_ratio)
 
     def test_against_known_values(self):
+        """ """
         R = fractions.Fraction
         assert_equal(R(1075, 512),
                      R(*np.half(2.1).as_integer_ratio()))
@@ -88,6 +127,21 @@
         )
     ])
     def test_roundtrip(self, ftype, frac_vals, exp_vals):
+        """
+
+        Parameters
+        ----------
+        ftype :
+            
+        frac_vals :
+            
+        exp_vals :
+            
+
+        Returns
+        -------
+
+        """
         for frac, exp in zip(frac_vals, exp_vals):
             f = np.ldexp(frac, exp, dtype=ftype)
             n, d = f.as_integer_ratio()
