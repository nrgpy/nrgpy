# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/inputsplitter.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/inputsplitter.py
@@ -76,17 +76,19 @@
 
 def num_ini_spaces(s):
     """Return the number of initial spaces in a string.
-
+    
     Note that tabs are counted as a single space.  For now, we do *not* support
     mixing of tabs and spaces in the user's input.
 
     Parameters
     ----------
     s : string
+        
 
     Returns
     -------
-    n : int
+
+    
     """
 
     ini_spaces = ini_spaces_re.match(s)
@@ -102,6 +104,7 @@
 # The 2 classes below have the same API as TokenInfo, but don't try to look up
 # a token type name that they won't find.
 class IncompleteString:
+    """ """
     type = exact_type = INCOMPLETE_STRING
     def __init__(self, s, start, end, line):
         self.s = s
@@ -110,6 +113,7 @@
         self.line = line
 
 class InMultilineStatement:
+    """ """
     type = exact_type = IN_MULTILINE_STATEMENT
     def __init__(self, pos, line):
         self.s = ''
@@ -118,10 +122,19 @@
 
 def partial_tokens(s):
     """Iterate over tokens from a possibly-incomplete string of code.
-
+    
     This adds two special token types: INCOMPLETE_STRING and
     IN_MULTILINE_STATEMENT. These can only occur as the last token yielded, and
     represent the two main ways for code to be incomplete.
+
+    Parameters
+    ----------
+    s :
+        
+
+    Returns
+    -------
+
     """
     readline = io.StringIO(s).readline
     token = tokenize.TokenInfo(tokenize.NEWLINE, '', (1, 0), (1, 0), '')
@@ -142,7 +155,17 @@
             raise
 
 def find_next_indent(code):
-    """Find the number of spaces for the next line of indentation"""
+    """Find the number of spaces for the next line of indentation
+
+    Parameters
+    ----------
+    code :
+        
+
+    Returns
+    -------
+
+    """
     tokens = list(partial_tokens(code))
     if tokens[-1].type == tokenize.ENDMARKER:
         tokens.pop()
@@ -158,6 +181,17 @@
     # Find the indents used before
     prev_indents = [0]
     def _add_indent(n):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+
+        Returns
+        -------
+
+        """
         if n != prev_indents[-1]:
             prev_indents.append(n)
 
@@ -204,13 +238,18 @@
 
 def last_blank(src):
     """Determine if the input source ends in a blank.
-
+    
     A blank is either a newline or a line consisting of whitespace.
 
     Parameters
     ----------
-    src : string
-      A single or multiline string.
+    src :
+        
+
+    Returns
+    -------
+
+    
     """
     if not src: return False
     ll  = src.splitlines()[-1]
@@ -222,13 +261,18 @@
 
 def last_two_blanks(src):
     """Determine if the input source ends in two blanks.
-
+    
     A blank is either a newline or a line consisting of whitespace.
 
     Parameters
     ----------
-    src : string
-      A single or multiline string.
+    src :
+        
+
+    Returns
+    -------
+
+    
     """
     if not src: return False
     # The logic here is tricky: I couldn't get a regexp to work and pass all
@@ -245,26 +289,35 @@
 
 def remove_comments(src):
     """Remove all comments from input source.
-
+    
     Note: comments are NOT recognized inside of strings!
 
     Parameters
     ----------
     src : string
-      A single or multiline input string.
+        A single or multiline input string.
 
     Returns
     -------
-    String with all Python comments removed.
+
+    
     """
 
     return re.sub('#.*', '', src)
 
 
 def get_input_encoding():
-    """Return the default standard input encoding.
-
-    If sys.stdin has no encoding, 'ascii' is returned."""
+    """
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+    type
+        If sys.stdin has no encoding, 'ascii' is returned.
+
+    """
     # There are strange environments for which sys.stdin.encoding is None. We
     # ensure that a valid encoding is returned.
     encoding = getattr(sys.stdin, 'encoding', None)
@@ -277,17 +330,17 @@
 #-----------------------------------------------------------------------------
 
 class InputSplitter(object):
-    r"""An object that can accumulate lines of Python source before execution.
-
+    """r"""An object that can accumulate lines of Python source before execution.
+    
     This object is designed to be fed python source line-by-line, using
     :meth:`push`. It will return on each push whether the currently pushed
     code could be executed already. In addition, it provides a method called
     :meth:`push_accepts_more` that can be used to query whether more input
     can be pushed into a single interactive block.
-
+    
     This is a simple example of how an interactive terminal-based client can use
     this tool::
-
+    
         isp = InputSplitter()
         while isp.push_accepts_more():
             indent = ' '*isp.indent_spaces
@@ -295,7 +348,12 @@
             line = indent + raw_input(prompt)
             isp.push(line)
         print 'Input source was:\n', isp.source_reset(),
-    """
+
+    Parameters
+    ----------
+
+    Returns
+    -------
     # A cache for storing the current indentation
     # The first value stores the most recently processed source input
     # The second value is the number of spaces for the current indentation 
@@ -343,8 +401,7 @@
         self._is_invalid = False
 
     def source_reset(self):
-        """Return the input source and perform a full reset.
-        """
+        """ """
         out = self.source
         self.reset()
         return out
@@ -353,20 +410,16 @@
         """Return whether a block of code is ready to execute, or should be continued
         
         This is a non-stateful API, and will reset the state of this InputSplitter.
-        
+
         Parameters
         ----------
         source : string
-          Python input code, which can be multiline.
-        
+            Python input code, which can be multiline.
+
         Returns
         -------
-        status : str
-          One of 'complete', 'incomplete', or 'invalid' if source is not a
-          prefix of valid code.
-        indent_spaces : int or None
-          The number of spaces by which to indent the next line of code. If
-          status is not 'incomplete', this is None.
+
+        
         """
         self.reset()
         try:
@@ -387,25 +440,24 @@
 
     def push(self, lines:str) -> bool:
         """Push one or more lines of input.
-
+        
         This stores the given lines and returns a status code indicating
         whether the code forms a complete Python block or not.
-
+        
         Any exceptions generated in compilation are swallowed, but if an
         exception was produced, the method returns True.
 
         Parameters
         ----------
         lines : string
-          One or more lines of Python input.
+            One or more lines of Python input.
+        lines:str :
+            
 
         Returns
         -------
-        is_complete : boolean
-          True if the current input source (the result of the current input
-          plus prior inputs) forms a complete Python execution block.  Note that
-          this value is also stored as a private attribute (``_is_complete``), so it
-          can be queried at any time.
+
+        
         """
         assert isinstance(lines, str)
         self._store(lines)
@@ -443,24 +495,31 @@
 
     def push_accepts_more(self):
         """Return whether a block of interactive input can accept more input.
-
+        
         This method is meant to be used by line-oriented frontends, who need to
         guess whether a block is complete or not based solely on prior and
         current input lines.  The InputSplitter considers it has a complete
         interactive block and will not accept more input when either:
         
         * A SyntaxError is raised
-
+        
         * The code is complete and consists of a single line or a single
           non-compound statement
-
+        
         * The code is complete and has a blank line at the end
-
+        
         If the current input produces a syntax error, this method immediately
-        returns False but does *not* raise the syntax error exception, as
-        typically clients will want to send invalid syntax to an execution
-        backend which might convert the invalid syntax into valid Python via
-        one of the dynamic IPython mechanisms.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+        type
+            typically clients will want to send invalid syntax to an execution
+            backend which might convert the invalid syntax into valid Python via
+            one of the dynamic IPython mechanisms.
+
         """
 
         # With incomplete input, unconditionally accept more
@@ -497,6 +556,7 @@
         return True
 
     def get_indent_spaces(self):
+        """ """
         sourcefor, n = self._indent_spaces_cache
         if sourcefor == self.source:
             return n
@@ -513,9 +573,23 @@
 
     def _store(self, lines, buffer=None, store='source'):
         """Store one or more lines of input.
-
+        
         If input lines are not newline-terminated, a newline is automatically
-        appended."""
+        appended.
+
+        Parameters
+        ----------
+        lines :
+            
+        buffer :
+             (Default value = None)
+        store :
+             (Default value = 'source')
+
+        Returns
+        -------
+
+        """
 
         if buffer is None:
             buffer = self._buffer
@@ -527,6 +601,17 @@
         setattr(self, store, self._set_source(buffer))
 
     def _set_source(self, buffer):
+        """
+
+        Parameters
+        ----------
+        buffer :
+            
+
+        Returns
+        -------
+
+        """
         return u''.join(buffer)
 
 
@@ -585,6 +670,7 @@
     
     @property
     def transforms(self):
+        """ """
         "Quick access to all transformers."
         return self.physical_line_transforms + \
             [self.assemble_logical_lines] + self.logical_line_transforms + \
@@ -593,7 +679,15 @@
     @property
     def transforms_in_use(self):
         """Transformers, excluding logical line transformers if we're in a
-        Python line."""
+        Python line.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         t = self.physical_line_transforms[:]
         if not self.within_python_line:
             t += [self.assemble_logical_lines] + self.logical_line_transforms
@@ -616,6 +710,7 @@
                 pass
     
     def flush_transformers(self):
+        """ """
         def _flush(transform, outs):
             """yield transformed lines
             
@@ -625,6 +720,17 @@
             outs: an iterable of previously transformed inputs.
                  Each may be multiline, which will be passed
                  one line at a time to transform.
+
+            Parameters
+            ----------
+            transform :
+                
+            outs :
+                
+
+            Returns
+            -------
+
             """
             for out in outs:
                 for line in out.splitlines():
@@ -647,13 +753,13 @@
             self._store('\n'.join(out))
 
     def raw_reset(self):
-        """Return raw input only and perform a full reset.
-        """
+        """ """
         out = self.source_raw
         self.reset()
         return out
     
     def source_reset(self):
+        """ """
         try:
             self.flush_transformers()
             return self.source
@@ -661,6 +767,7 @@
             self.reset()
 
     def push_accepts_more(self):
+        """ """
         if self.transformer_accumulating:
             return True
         else:
@@ -668,6 +775,15 @@
 
     def transform_cell(self, cell):
         """Process and translate a cell of input.
+
+        Parameters
+        ----------
+        cell :
+            
+
+        Returns
+        -------
+
         """
         self.reset()
         try:
@@ -679,26 +795,25 @@
 
     def push(self, lines:str) -> bool:
         """Push one or more lines of IPython input.
-
+        
         This stores the given lines and returns a status code indicating
         whether the code forms a complete Python block or not, after processing
         all input lines for special IPython syntax.
-
+        
         Any exceptions generated in compilation are swallowed, but if an
         exception was produced, the method returns True.
 
         Parameters
         ----------
         lines : string
-          One or more lines of Python input.
+            One or more lines of Python input.
+        lines:str :
+            
 
         Returns
         -------
-        is_complete : boolean
-          True if the current input source (the result of the current input
-          plus prior inputs) forms a complete Python execution block.  Note that
-          this value is also stored as a private attribute (_is_complete), so it
-          can be queried at any time.
+
+        
         """
         assert isinstance(lines, str)
         # We must ensure all input is pure unicode
@@ -733,8 +848,28 @@
         is accumulating lines.
         
         Sets self.transformer_accumulating as a side effect.
+
+        Parameters
+        ----------
+        line :
+            
+
+        Returns
+        -------
+
         """
         def _accumulating(dbg):
+            """
+
+            Parameters
+            ----------
+            dbg :
+                
+
+            Returns
+            -------
+
+            """
             #print(dbg)
             self.transformer_accumulating = True
             return None
