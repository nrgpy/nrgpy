# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/arithmetic/test_datetime64.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/arithmetic/test_datetime64.py
@@ -40,11 +40,25 @@
 
 
 class TestDatetime64ArrayLikeComparisons:
+    """ """
     # Comparison tests for datetime64 vectors fully parametrized over
     #  DataFrame/Series/DatetimeIndex/DatetimeArray.  Ideally all comparison
     #  tests will eventually end up here.
 
     def test_compare_zerodim(self, tz_naive_fixture, box_with_array):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # Test comparison with zero-dimensional array is unboxed
         tz = tz_naive_fixture
         box = box_with_array
@@ -78,6 +92,21 @@
         ],
     )
     def test_dt64arr_cmp_scalar_invalid(self, other, tz_naive_fixture, box_with_array):
+        """
+
+        Parameters
+        ----------
+        other :
+            
+        tz_naive_fixture :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#22074, GH#15966
         tz = tz_naive_fixture
 
@@ -101,6 +130,19 @@
         ],
     )
     def test_dt64arr_cmp_arraylike_invalid(self, other, tz_naive_fixture):
+        """
+
+        Parameters
+        ----------
+        other :
+            
+        tz_naive_fixture :
+            
+
+        Returns
+        -------
+
+        """
         # We don't parametrize this over box_with_array because listlike
         #  other plays poorly with assert_invalid_comparison reversed checks
         tz = tz_naive_fixture
@@ -109,6 +151,17 @@
         assert_invalid_comparison(dta, other, tm.to_array)
 
     def test_dt64arr_cmp_mixed_invalid(self, tz_naive_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+
+        Returns
+        -------
+
+        """
         tz = tz_naive_fixture
 
         dta = date_range("1970-01-01", freq="h", periods=5, tz=tz)._data
@@ -132,6 +185,19 @@
             dta >= other
 
     def test_dt64arr_nat_comparison(self, tz_naive_fixture, box_with_array):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#22242, GH#22163 DataFrame considered NaT == ts incorrectly
         tz = tz_naive_fixture
         box = box_with_array
@@ -150,6 +216,7 @@
 
 
 class TestDatetime64SeriesComparison:
+    """ """
     # TODO: moved from tests.series.test_operators; needs cleanup
 
     @pytest.mark.parametrize(
@@ -172,6 +239,23 @@
     @pytest.mark.parametrize("reverse", [True, False])
     @pytest.mark.parametrize("dtype", [None, object])
     def test_nat_comparisons(self, dtype, index_or_series, reverse, pair):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+        index_or_series :
+            
+        reverse :
+            
+        pair :
+            
+
+        Returns
+        -------
+
+        """
         box = index_or_series
         l, r = pair
         if reverse:
@@ -201,6 +285,19 @@
         tm.assert_series_equal(left <= right, expected)
 
     def test_comparison_invalid(self, tz_naive_fixture, box_with_array):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#4968
         # invalid date/int comparisons
         tz = tz_naive_fixture
@@ -222,6 +319,21 @@
     )
     @pytest.mark.parametrize("dtype", [None, object])
     def test_nat_comparisons_scalar(self, dtype, data, box_with_array):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+        data :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         if box_with_array is tm.to_array and dtype is object:
             # dont bother testing ndarray comparison methods as this fails
             #  on older numpys (since they check object identity)
@@ -256,6 +368,17 @@
 
     @pytest.mark.parametrize("val", [datetime(2000, 1, 4), datetime(2000, 1, 5)])
     def test_series_comparison_scalars(self, val):
+        """
+
+        Parameters
+        ----------
+        val :
+            
+
+        Returns
+        -------
+
+        """
         series = Series(date_range("1/1/2000", periods=10))
 
         result = series > val
@@ -266,6 +389,19 @@
         "left,right", [("lt", "gt"), ("le", "ge"), ("eq", "eq"), ("ne", "ne")]
     )
     def test_timestamp_compare_series(self, left, right):
+        """
+
+        Parameters
+        ----------
+        left :
+            
+        right :
+            
+
+        Returns
+        -------
+
+        """
         # see gh-4982
         # Make sure we can compare Timestamps on the right AND left hand side.
         ser = pd.Series(pd.date_range("20010101", periods=10), name="dates")
@@ -298,6 +434,17 @@
         tm.assert_series_equal(result, expected)
 
     def test_dt64arr_timestamp_equality(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#11034
         xbox = box_with_array if box_with_array is not pd.Index else np.ndarray
 
@@ -330,6 +477,7 @@
 
 
 class TestDatetimeIndexComparisons:
+    """ """
 
     # TODO: moved from tests.indexes.test_base; parametrize and de-duplicate
     @pytest.mark.parametrize(
@@ -337,6 +485,17 @@
         [operator.eq, operator.ne, operator.gt, operator.lt, operator.ge, operator.le],
     )
     def test_comparators(self, op):
+        """
+
+        Parameters
+        ----------
+        op :
+            
+
+        Returns
+        -------
+
+        """
         index = tm.makeDateIndex(100)
         element = index[len(index) // 2]
         element = Timestamp(element).to_datetime64()
@@ -353,6 +512,19 @@
         [datetime(2016, 1, 1), Timestamp("2016-01-01"), np.datetime64("2016-01-01")],
     )
     def test_dti_cmp_datetimelike(self, other, tz_naive_fixture):
+        """
+
+        Parameters
+        ----------
+        other :
+            
+        tz_naive_fixture :
+            
+
+        Returns
+        -------
+
+        """
         tz = tz_naive_fixture
         dti = pd.date_range("2016-01-01", periods=2, tz=tz)
         if tz is not None:
@@ -383,6 +555,19 @@
 
     @pytest.mark.parametrize("dtype", [None, object])
     def test_dti_cmp_nat(self, dtype, box_with_array):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         if box_with_array is tm.to_array and dtype is object:
             # dont bother testing ndarray comparison methods as this fails
             #  on older numpys (since they check object identity)
@@ -428,6 +613,7 @@
         tm.assert_equal(pd.NaT > lhs, expected)
 
     def test_dti_cmp_nat_behaves_like_float_cmp_nan(self):
+        """ """
         fidx1 = pd.Index([1.0, np.nan, 3.0, np.nan, 5.0, 7.0])
         fidx2 = pd.Index([2.0, 3.0, np.nan, np.nan, 6.0, 7.0])
 
@@ -528,6 +714,19 @@
         [operator.eq, operator.ne, operator.gt, operator.ge, operator.lt, operator.le],
     )
     def test_comparison_tzawareness_compat(self, op, box_with_array):
+        """
+
+        Parameters
+        ----------
+        op :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#18162
         box = box_with_array
 
@@ -576,6 +775,19 @@
         [operator.eq, operator.ne, operator.gt, operator.ge, operator.lt, operator.le],
     )
     def test_comparison_tzawareness_compat_scalars(self, op, box_with_array):
+        """
+
+        Parameters
+        ----------
+        op :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#18162
         dr = pd.date_range("2016-01-01", periods=6)
         dz = dr.tz_localize("US/Pacific")
@@ -616,6 +828,23 @@
     def test_scalar_comparison_tzawareness(
         self, op, other, tz_aware_fixture, box_with_array
     ):
+        """
+
+        Parameters
+        ----------
+        op :
+            
+        other :
+            
+        tz_aware_fixture :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         tz = tz_aware_fixture
         dti = pd.date_range("2016-01-01", periods=2, tz=tz)
 
@@ -631,6 +860,17 @@
         [operator.eq, operator.ne, operator.gt, operator.ge, operator.lt, operator.le],
     )
     def test_nat_comparison_tzawareness(self, op):
+        """
+
+        Parameters
+        ----------
+        op :
+            
+
+        Returns
+        -------
+
+        """
         # GH#19276
         # tzaware DatetimeIndex should not raise when compared to NaT
         dti = pd.DatetimeIndex(
@@ -644,6 +884,17 @@
         tm.assert_numpy_array_equal(result, expected)
 
     def test_dti_cmp_str(self, tz_naive_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+
+        Returns
+        -------
+
+        """
         # GH#22074
         # regardless of tz, we expect these comparisons are valid
         tz = tz_naive_fixture
@@ -675,6 +926,7 @@
         tm.assert_numpy_array_equal(result, expected)
 
     def test_dti_cmp_list(self):
+        """ """
         rng = date_range("1/1/2000", periods=10)
 
         result = rng == list(rng)
@@ -691,6 +943,17 @@
         ids=lambda x: type(x).__name__,
     )
     def test_dti_cmp_tdi_tzawareness(self, other):
+        """
+
+        Parameters
+        ----------
+        other :
+            
+
+        Returns
+        -------
+
+        """
         # GH#22074
         # reversion test that we _don't_ call _assert_tzawareness_compat
         # when comparing against TimedeltaIndex
@@ -714,6 +977,7 @@
             dti >= other
 
     def test_dti_cmp_object_dtype(self):
+        """ """
         # GH#22074
         dti = date_range("2000-01-01", periods=10, tz="Asia/Tokyo")
 
@@ -743,6 +1007,7 @@
 
 
 class TestDatetime64Arithmetic:
+    """ """
     # This class is intended for "finished" tests that are fully parametrized
     #  over DataFrame/Series/Index/DatetimeArray
 
@@ -752,6 +1017,21 @@
     def test_dt64arr_add_timedeltalike_scalar(
         self, tz_naive_fixture, two_hours, box_with_array
     ):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+        two_hours :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#22005, GH#22163 check DataFrame doesn't raise TypeError
         tz = tz_naive_fixture
 
@@ -767,6 +1047,21 @@
     def test_dt64arr_iadd_timedeltalike_scalar(
         self, tz_naive_fixture, two_hours, box_with_array
     ):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+        two_hours :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         tz = tz_naive_fixture
 
         rng = pd.date_range("2000-01-01", "2000-02-01", tz=tz)
@@ -781,6 +1076,21 @@
     def test_dt64arr_sub_timedeltalike_scalar(
         self, tz_naive_fixture, two_hours, box_with_array
     ):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+        two_hours :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         tz = tz_naive_fixture
 
         rng = pd.date_range("2000-01-01", "2000-02-01", tz=tz)
@@ -795,6 +1105,21 @@
     def test_dt64arr_isub_timedeltalike_scalar(
         self, tz_naive_fixture, two_hours, box_with_array
     ):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+        two_hours :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         tz = tz_naive_fixture
 
         rng = pd.date_range("2000-01-01", "2000-02-01", tz=tz)
@@ -808,6 +1133,17 @@
 
     # TODO: redundant with test_dt64arr_add_timedeltalike_scalar
     def test_dt64arr_add_td64_scalar(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # scalar timedeltas/np.timedelta64 objects
         # operate with np.timedelta64 correctly
         ser = Series([Timestamp("20130101 9:01"), Timestamp("20130101 9:02")])
@@ -835,6 +1171,19 @@
         tm.assert_equal(result, expected)
 
     def test_dt64arr_add_sub_td64_nat(self, box_with_array, tz_naive_fixture):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        tz_naive_fixture :
+            
+
+        Returns
+        -------
+
+        """
         # GH#23320 special handling for timedelta64("NaT")
         tz = tz_naive_fixture
 
@@ -856,6 +1205,19 @@
             other - obj
 
     def test_dt64arr_add_sub_td64ndarray(self, tz_naive_fixture, box_with_array):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
 
         tz = tz_naive_fixture
         dti = pd.date_range("2016-01-01", periods=3, tz=tz)
@@ -893,6 +1255,19 @@
         ],
     )
     def test_dt64arr_sub_dtscalar(self, box_with_array, ts):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        ts :
+            
+
+        Returns
+        -------
+
+        """
         # GH#8554, GH#22163 DataFrame op should _not_ return dt64 dtype
         idx = pd.date_range("2013-01-01", periods=3)._with_freq(None)
         idx = tm.box_expected(idx, box_with_array)
@@ -904,6 +1279,17 @@
         tm.assert_equal(result, expected)
 
     def test_dt64arr_sub_datetime64_not_ns(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#7996, GH#22163 ensure non-nano datetime64 is converted to nano
         #  for DataFrame operation
         dt64 = np.datetime64("2013-01-01")
@@ -922,6 +1308,17 @@
         tm.assert_equal(result, -expected)
 
     def test_dt64arr_sub_timestamp(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         ser = pd.date_range("2014-03-17", periods=2, freq="D", tz="US/Eastern")
         ser = ser._with_freq(None)
         ts = ser[0]
@@ -935,6 +1332,17 @@
         tm.assert_equal(ts - ser, -expected)
 
     def test_dt64arr_sub_NaT(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#18808
         dti = pd.DatetimeIndex([pd.NaT, pd.Timestamp("19900315")])
         ser = tm.box_expected(dti, box_with_array)
@@ -956,6 +1364,19 @@
     # Subtraction of datetime-like array-like
 
     def test_dt64arr_sub_dt64object_array(self, box_with_array, tz_naive_fixture):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        tz_naive_fixture :
+            
+
+        Returns
+        -------
+
+        """
         dti = pd.date_range("2016-01-01", periods=3, tz=tz_naive_fixture)
         expected = dti - dti
 
@@ -970,6 +1391,17 @@
         tm.assert_equal(result, expected)
 
     def test_dt64arr_naive_sub_dt64ndarray(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         dti = pd.date_range("2016-01-01", periods=3, tz=None)
         dt64vals = dti.values
 
@@ -984,6 +1416,19 @@
     def test_dt64arr_aware_sub_dt64ndarray_raises(
         self, tz_aware_fixture, box_with_array
     ):
+        """
+
+        Parameters
+        ----------
+        tz_aware_fixture :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
 
         tz = tz_aware_fixture
         dti = pd.date_range("2016-01-01", periods=3, tz=tz)
@@ -1000,6 +1445,19 @@
     # Addition of datetime-like others (invalid)
 
     def test_dt64arr_add_dt64ndarray_raises(self, tz_naive_fixture, box_with_array):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
 
         tz = tz_naive_fixture
         dti = pd.date_range("2016-01-01", periods=3, tz=tz)
@@ -1013,6 +1471,17 @@
             dt64vals + dtarr
 
     def test_dt64arr_add_timestamp_raises(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#22163 ensure DataFrame doesn't cast Timestamp to i8
         idx = DatetimeIndex(["2011-01-01", "2011-01-02"])
         idx = tm.box_expected(idx, box_with_array)
@@ -1038,6 +1507,21 @@
     )
     @pytest.mark.parametrize("dti_freq", [None, "D"])
     def test_dt64arr_add_sub_invalid(self, dti_freq, other, box_with_array):
+        """
+
+        Parameters
+        ----------
+        dti_freq :
+            
+        other :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         dti = DatetimeIndex(["2011-01-01", "2011-01-02"], freq=dti_freq)
         dtarr = tm.box_expected(dti, box_with_array)
         msg = "|".join(
@@ -1056,6 +1540,23 @@
     def test_dt64arr_add_sub_parr(
         self, dti_freq, pi_freq, box_with_array, box_with_array2
     ):
+        """
+
+        Parameters
+        ----------
+        dti_freq :
+            
+        pi_freq :
+            
+        box_with_array :
+            
+        box_with_array2 :
+            
+
+        Returns
+        -------
+
+        """
         # GH#20049 subtracting PeriodIndex should raise TypeError
         dti = pd.DatetimeIndex(["2011-01-01", "2011-01-02"], freq=dti_freq)
         pi = dti.to_period(pi_freq)
@@ -1073,6 +1574,19 @@
         assert_invalid_addsub_type(dtarr, parr, msg)
 
     def test_dt64arr_addsub_time_objects_raises(self, box_with_array, tz_naive_fixture):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        tz_naive_fixture :
+            
+
+        Returns
+        -------
+
+        """
         # https://github.com/pandas-dev/pandas/issues/10329
 
         tz = tz_naive_fixture
@@ -1128,12 +1642,24 @@
 
 
 class TestDatetime64DateOffsetArithmetic:
+    """ """
 
     # -------------------------------------------------------------
     # Tick DateOffsets
 
     # TODO: parametrize over timezone?
     def test_dt64arr_series_add_tick_DateOffset(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#4532
         # operate with pd.offsets
         ser = Series([Timestamp("20130101 9:01"), Timestamp("20130101 9:02")])
@@ -1151,6 +1677,17 @@
         tm.assert_equal(result2, expected)
 
     def test_dt64arr_series_sub_tick_DateOffset(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#4532
         # operate with pd.offsets
         ser = Series([Timestamp("20130101 9:01"), Timestamp("20130101 9:02")])
@@ -1174,6 +1711,19 @@
         "cls_name", ["Day", "Hour", "Minute", "Second", "Milli", "Micro", "Nano"]
     )
     def test_dt64arr_add_sub_tick_DateOffset_smoke(self, cls_name, box_with_array):
+        """
+
+        Parameters
+        ----------
+        cls_name :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#4532
         # smoke tests for valid DateOffsets
         ser = Series([Timestamp("20130101 9:01"), Timestamp("20130101 9:02")])
@@ -1185,6 +1735,19 @@
         ser - offset_cls(5)
 
     def test_dti_add_tick_tzaware(self, tz_aware_fixture, box_with_array):
+        """
+
+        Parameters
+        ----------
+        tz_aware_fixture :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#21610, GH#22163 ensure DataFrame doesn't return object-dtype
         tz = tz_aware_fixture
         if tz == "US/Pacific":
@@ -1214,6 +1777,17 @@
     # RelativeDelta DateOffsets
 
     def test_dt64arr_add_sub_relativedelta_offsets(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#10699
         vec = DatetimeIndex(
             [
@@ -1320,6 +1894,23 @@
     def test_dt64arr_add_sub_DateOffsets(
         self, box_with_array, n, normalize, cls_and_kwargs
     ):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        n :
+            
+        normalize :
+            
+        cls_and_kwargs :
+            
+
+        Returns
+        -------
+
+        """
         # GH#10699
         # assert vectorized operation matches pointwise operations
 
@@ -1381,6 +1972,17 @@
                 offset - vec
 
     def test_dt64arr_add_sub_DateOffset(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#10699
         s = date_range("2000-01-01", "2000-01-31", name="a")
         s = tm.box_expected(s, box_with_array)
@@ -1453,6 +2055,25 @@
     def test_dt64arr_add_sub_offset_array(
         self, tz_naive_fixture, box_with_array, box_other, op, other
     ):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+        box_with_array :
+            
+        box_other :
+            
+        op :
+            
+        other :
+            
+
+        Returns
+        -------
+
+        """
         # GH#18849
         # GH#10699 array of offsets
 
@@ -1527,6 +2148,27 @@
     def test_dti_add_sub_nonzero_mth_offset(
         self, op, offset, exp, exp_freq, tz_aware_fixture, box_with_array
     ):
+        """
+
+        Parameters
+        ----------
+        op :
+            
+        offset :
+            
+        exp :
+            
+        exp_freq :
+            
+        tz_aware_fixture :
+            
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH 26258
         tz = tz_aware_fixture
         date = date_range(start="01 Jan 2014", end="01 Jan 2017", freq="AS", tz=tz)
@@ -1540,9 +2182,21 @@
 
 
 class TestDatetime64OverflowHandling:
+    """ """
     # TODO: box + de-duplicate
 
     def test_dt64_overflow_masking(self, box_with_array):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+
+        Returns
+        -------
+
+        """
         # GH#25317
         left = Series([Timestamp("1969-12-31")])
         right = Series([NaT])
@@ -1557,6 +2211,7 @@
         tm.assert_equal(result, expected)
 
     def test_dt64_series_arith_overflow(self):
+        """ """
         # GH#12534, fixed by GH#19024
         dt = pd.Timestamp("1700-01-31")
         td = pd.Timedelta("20000 Days")
@@ -1591,6 +2246,7 @@
         tm.assert_series_equal(res, -expected)
 
     def test_datetimeindex_sub_timestamp_overflow(self):
+        """ """
         dtimax = pd.to_datetime(["now", pd.Timestamp.max])
         dtimin = pd.to_datetime(["now", pd.Timestamp.min])
 
@@ -1629,6 +2285,7 @@
                 dtimin - variant
 
     def test_datetimeindex_sub_datetimeindex_overflow(self):
+        """ """
         # GH#22492, GH#22508
         dtimax = pd.to_datetime(["now", pd.Timestamp.max])
         dtimin = pd.to_datetime(["now", pd.Timestamp.min])
@@ -1664,7 +2321,9 @@
 
 
 class TestTimestampSeriesArithmetic:
+    """ """
     def test_empty_series_add_sub(self):
+        """ """
         # GH#13844
         a = Series(dtype="M8[ns]")
         b = Series(dtype="m8[ns]")
@@ -1676,6 +2335,7 @@
             b - a
 
     def test_operators_datetimelike(self):
+        """ """
 
         # ## timedelta64 ###
         td1 = Series([timedelta(minutes=5, seconds=3)] * 3)
@@ -1710,6 +2370,7 @@
         dt1 + td1
 
     def test_dt64ser_sub_datetime_dtype(self):
+        """ """
         ts = Timestamp(datetime(1993, 1, 7, 13, 30, 00))
         dt = datetime(1993, 6, 22, 13, 30)
         ser = Series([ts])
@@ -1721,10 +2382,34 @@
     # needs to be de-duplicated and parametrized over `box` classes
 
     def test_operators_datetimelike_invalid(self, all_arithmetic_operators):
+        """
+
+        Parameters
+        ----------
+        all_arithmetic_operators :
+            
+
+        Returns
+        -------
+
+        """
         # these are all TypeEror ops
         op_str = all_arithmetic_operators
 
         def check(get_ser, test_ser):
+            """
+
+            Parameters
+            ----------
+            get_ser :
+                
+            test_ser :
+                
+
+            Returns
+            -------
+
+            """
 
             # check that we are getting a TypeError
             # with 'operate' (from core/ops.py) for the ops that are not
@@ -1771,6 +2456,7 @@
             check(dt2, td2)
 
     def test_sub_single_tz(self):
+        """ """
         # GH#12290
         s1 = Series([pd.Timestamp("2016-02-10", tz="America/Sao_Paulo")])
         s2 = Series([pd.Timestamp("2016-02-08", tz="America/Sao_Paulo")])
@@ -1782,6 +2468,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_dt64tz_series_sub_dtitz(self):
+        """ """
         # GH#19071 subtracting tzaware DatetimeIndex from tzaware Series
         # (with same tz) raises, fixed by #19024
         dti = pd.date_range("1999-09-30", periods=10, tz="US/Pacific")
@@ -1794,6 +2481,7 @@
         tm.assert_series_equal(res, expected)
 
     def test_sub_datetime_compat(self):
+        """ """
         # see GH#14088
         s = Series([datetime(2016, 8, 23, 12, tzinfo=pytz.utc), pd.NaT])
         dt = datetime(2016, 8, 22, 12, tzinfo=pytz.utc)
@@ -1802,6 +2490,7 @@
         tm.assert_series_equal(s - Timestamp(dt), exp)
 
     def test_dt64_series_add_mixed_tick_DateOffset(self):
+        """ """
         # GH#4532
         # operate with pd.offsets
         s = Series([Timestamp("20130101 9:01"), Timestamp("20130101 9:02")])
@@ -1821,6 +2510,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_datetime64_ops_nat(self):
+        """ """
         # GH#11349
         datetime_series = Series([NaT, Timestamp("19900315")])
         nat_series_dtype_timestamp = Series([NaT, NaT], dtype="datetime64[ns]")
@@ -1867,6 +2557,19 @@
     )
     @pytest.mark.parametrize("one", [1, 1.0, np.array(1)])
     def test_dt64_mul_div_numeric_invalid(self, one, dt64_series):
+        """
+
+        Parameters
+        ----------
+        one :
+            
+        dt64_series :
+            
+
+        Returns
+        -------
+
+        """
         # multiplication
         msg = "cannot perform .* with this index type"
         with pytest.raises(TypeError, match=msg):
@@ -1883,6 +2586,19 @@
     # TODO: parametrize over box
     @pytest.mark.parametrize("op", ["__add__", "__radd__", "__sub__", "__rsub__"])
     def test_dt64_series_add_intlike(self, tz_naive_fixture, op):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+        op :
+            
+
+        Returns
+        -------
+
+        """
         # GH#19123
         tz = tz_naive_fixture
         dti = pd.DatetimeIndex(["2016-01-02", "2016-02-03", "NaT"], tz=tz)
@@ -1910,6 +2626,7 @@
     # Timezone-Centric Tests
 
     def test_operators_datetimelike_with_timezones(self):
+        """ """
         tz = "US/Eastern"
         dt1 = Series(date_range("2000-01-01 09:00:00", periods=5, tz=tz), name="foo")
         dt2 = dt1.copy()
@@ -1972,11 +2689,25 @@
 
 
 class TestDatetimeIndexArithmetic:
+    """ """
 
     # -------------------------------------------------------------
     # Binary operations DatetimeIndex and int
 
     def test_dti_addsub_int(self, tz_naive_fixture, one):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+        one :
+            
+
+        Returns
+        -------
+
+        """
         # Variants of `one` for #19012
         tz = tz_naive_fixture
         rng = pd.date_range("2000-01-01 09:00", freq="H", periods=10, tz=tz)
@@ -1997,6 +2728,19 @@
     @pytest.mark.parametrize("freq", ["H", "D"])
     @pytest.mark.parametrize("int_holder", [np.array, pd.Index])
     def test_dti_add_intarray_tick(self, int_holder, freq):
+        """
+
+        Parameters
+        ----------
+        int_holder :
+            
+        freq :
+            
+
+        Returns
+        -------
+
+        """
         # GH#19959
         dti = pd.date_range("2016-01-01", periods=2, freq=freq)
         other = int_holder([4, -1])
@@ -2007,6 +2751,19 @@
     @pytest.mark.parametrize("freq", ["W", "M", "MS", "Q"])
     @pytest.mark.parametrize("int_holder", [np.array, pd.Index])
     def test_dti_add_intarray_non_tick(self, int_holder, freq):
+        """
+
+        Parameters
+        ----------
+        int_holder :
+            
+        freq :
+            
+
+        Returns
+        -------
+
+        """
         # GH#19959
         dti = pd.date_range("2016-01-01", periods=2, freq=freq)
         other = int_holder([4, -1])
@@ -2016,6 +2773,17 @@
 
     @pytest.mark.parametrize("int_holder", [np.array, pd.Index])
     def test_dti_add_intarray_no_freq(self, int_holder):
+        """
+
+        Parameters
+        ----------
+        int_holder :
+            
+
+        Returns
+        -------
+
+        """
         # GH#19959
         dti = pd.DatetimeIndex(["2016-01-01", "NaT", "2017-04-05 06:07:08"])
         other = int_holder([9, 4, -1])
@@ -2028,6 +2796,17 @@
     # Binary operations DatetimeIndex and TimedeltaIndex/array
 
     def test_dti_add_tdi(self, tz_naive_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+
+        Returns
+        -------
+
+        """
         # GH#17558
         tz = tz_naive_fixture
         dti = DatetimeIndex([Timestamp("2017-01-01", tz=tz)] * 10)
@@ -2050,6 +2829,17 @@
         tm.assert_index_equal(result, expected)
 
     def test_dti_iadd_tdi(self, tz_naive_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+
+        Returns
+        -------
+
+        """
         # GH#17558
         tz = tz_naive_fixture
         dti = DatetimeIndex([Timestamp("2017-01-01", tz=tz)] * 10)
@@ -2076,6 +2866,17 @@
         tm.assert_index_equal(result, expected)
 
     def test_dti_sub_tdi(self, tz_naive_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+
+        Returns
+        -------
+
+        """
         # GH#17558
         tz = tz_naive_fixture
         dti = DatetimeIndex([Timestamp("2017-01-01", tz=tz)] * 10)
@@ -2100,6 +2901,17 @@
             tdi.values - dti
 
     def test_dti_isub_tdi(self, tz_naive_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+
+        Returns
+        -------
+
+        """
         # GH#17558
         tz = tz_naive_fixture
         dti = DatetimeIndex([Timestamp("2017-01-01", tz=tz)] * 10)
@@ -2149,6 +2961,21 @@
     )
     @pytest.mark.parametrize("tz", [None, "US/Eastern"])
     def test_add_datetimelike_and_dtarr(self, box_with_array, addend, tz):
+        """
+
+        Parameters
+        ----------
+        box_with_array :
+            
+        addend :
+            
+        tz :
+            
+
+        Returns
+        -------
+
+        """
         # GH#9631
         dti = DatetimeIndex(["2011-01-01", "2011-01-02"]).tz_localize(tz)
         dtarr = tm.box_expected(dti, box_with_array)
@@ -2162,6 +2989,17 @@
     # -------------------------------------------------------------
 
     def test_dta_add_sub_index(self, tz_naive_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+
+        Returns
+        -------
+
+        """
         # Check that DatetimeArray defers to Index classes
         dti = date_range("20130101", periods=3, tz=tz_naive_fixture)
         dta = dti.array
@@ -2179,6 +3017,7 @@
         tm.assert_index_equal(result, expected)
 
     def test_sub_dti_dti(self):
+        """ """
         # previously performed setop (deprecated in 0.16.0), now changed to
         # return subtraction -> TimeDeltaIndex (GH ...)
 
@@ -2226,6 +3065,17 @@
 
     @pytest.mark.parametrize("op", [operator.add, operator.sub])
     def test_timedelta64_equal_timedelta_supported_ops(self, op):
+        """
+
+        Parameters
+        ----------
+        op :
+            
+
+        Returns
+        -------
+
+        """
         ser = Series(
             [
                 Timestamp("20130301"),
@@ -2238,6 +3088,17 @@
         intervals = ["D", "h", "m", "s", "us"]
 
         def timedelta64(*args):
+            """
+
+            Parameters
+            ----------
+            *args :
+                
+
+            Returns
+            -------
+
+            """
             # see casting notes in NumPy gh-12927
             return np.sum(list(starmap(np.timedelta64, zip(args, intervals))))
 
@@ -2250,6 +3111,7 @@
             tm.assert_series_equal(lhs, rhs)
 
     def test_ops_nat_mixed_datetime64_timedelta64(self):
+        """ """
         # GH#11349
         timedelta_series = Series([NaT, Timedelta("1s")])
         datetime_series = Series([NaT, Timestamp("19900315")])
@@ -2319,6 +3181,7 @@
         )
 
     def test_ufunc_coercions(self):
+        """ """
         idx = date_range("2011-01-01", periods=3, freq="2D", name="x")
 
         delta = np.timedelta64(1, "D")
@@ -2354,6 +3217,19 @@
             assert result.freq == exp.freq
 
     def test_dti_add_series(self, tz_naive_fixture, names):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+        names :
+            
+
+        Returns
+        -------
+
+        """
         # GH#13905
         tz = tz_naive_fixture
         index = DatetimeIndex(
@@ -2380,6 +3256,23 @@
     def test_dti_addsub_offset_arraylike(
         self, tz_naive_fixture, names, op, index_or_series
     ):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+        names :
+            
+        op :
+            
+        index_or_series :
+            
+
+        Returns
+        -------
+
+        """
         # GH#18849, GH#19744
         box = pd.Index
         other_box = index_or_series
@@ -2403,6 +3296,21 @@
     def test_dti_addsub_object_arraylike(
         self, tz_naive_fixture, box_with_array, other_box
     ):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+        box_with_array :
+            
+        other_box :
+            
+
+        Returns
+        -------
+
+        """
         tz = tz_naive_fixture
 
         dti = pd.date_range("2017-01-01", periods=2, tz=tz)
@@ -2432,6 +3340,19 @@
 @pytest.mark.parametrize("years", [-1, 0, 1])
 @pytest.mark.parametrize("months", [-2, 0, 2])
 def test_shift_months(years, months):
+    """
+
+    Parameters
+    ----------
+    years :
+        
+    months :
+        
+
+    Returns
+    -------
+
+    """
     dti = DatetimeIndex(
         [
             Timestamp("2000-01-05 00:15:00"),
@@ -2449,6 +3370,7 @@
 
 
 def test_dt64arr_addsub_object_dtype_2d():
+    """ """
     # block-wise DataFrame operations will require operating on 2D
     #  DatetimeArray/TimedeltaArray, so check that specifically.
     dti = pd.date_range("1994-02-13", freq="2W", periods=4)
