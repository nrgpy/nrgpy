# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/babel/messages/checkers.py
+++ b/..//venv/lib/python3.8/site-packages/babel/messages/checkers.py
@@ -24,7 +24,19 @@
 
 
 def num_plurals(catalog, message):
-    """Verify the number of plurals in the translation."""
+    """Verify the number of plurals in the translation.
+
+    Parameters
+    ----------
+    catalog :
+        
+    message :
+        
+
+    Returns
+    -------
+
+    """
     if not message.pluralizable:
         if not isinstance(message.string, string_types):
             raise TranslationError("Found plural forms for non-pluralizable "
@@ -44,7 +56,19 @@
 
 
 def python_format(catalog, message):
-    """Verify the format string placeholders in the translation."""
+    """Verify the format string placeholders in the translation.
+
+    Parameters
+    ----------
+    catalog :
+        
+    message :
+        
+
+    Returns
+    -------
+
+    """
     if 'python-format' not in message.flags:
         return
     msgids = message.id
@@ -64,34 +88,58 @@
     msgid of a message and `alternative` one of the `msgstr`\\s.  The two
     arguments are not interchangeable as `alternative` may contain less
     placeholders if `format` uses named placeholders.
-
+    
     The behavior of this function is undefined if the string does not use
     string formattings.
-
+    
     If the string formatting of `alternative` is compatible to `format` the
     function returns `None`, otherwise a `TranslationError` is raised.
-
+    
     Examples for compatible format strings:
+    
+    
+    Example for an incompatible format strings:
+    
+    
+    This function is used by the `python_format` checker.
+
+    Parameters
+    ----------
+    format :
+        The original format string
+    alternative :
+        The alternative format string that should be checked
+        against format
+
+    Returns
+    -------
+
+    Raises
+    ------
+    TranslationError
+        on formatting errors
 
     >>> _validate_format('Hello %s!', 'Hallo %s!')
     >>> _validate_format('Hello %i!', 'Hallo %d!')
-
-    Example for an incompatible format strings:
-
+    
     >>> _validate_format('Hello %(name)s!', 'Hallo %s!')
     Traceback (most recent call last):
       ...
     TranslationError: the format strings are of different kinds
-
-    This function is used by the `python_format` checker.
-
-    :param format: The original format string
-    :param alternative: The alternative format string that should be checked
-                        against format
-    :raises TranslationError: on formatting errors
     """
 
     def _parse(string):
+        """
+
+        Parameters
+        ----------
+        string :
+            
+
+        Returns
+        -------
+
+        """
         result = []
         for match in PYTHON_FORMAT.finditer(string):
             name, format, typechar = match.groups()
@@ -101,6 +149,19 @@
         return result
 
     def _compatible(a, b):
+        """
+
+        Parameters
+        ----------
+        a :
+            
+        b :
+            
+
+        Returns
+        -------
+
+        """
         if a == b:
             return True
         for set in _string_format_compatibilities:
@@ -109,6 +170,17 @@
         return False
 
     def _check_positional(results):
+        """
+
+        Parameters
+        ----------
+        results :
+            
+
+        Returns
+        -------
+
+        """
         positional = None
         for name, char in results:
             if positional is None:
@@ -155,6 +227,7 @@
 
 
 def _find_checkers():
+    """ """
     checkers = []
     try:
         from pkg_resources import working_set
