# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/async_helpers.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/async_helpers.py
@@ -20,9 +20,7 @@
 class _AsyncIORunner:
 
     def __call__(self, coro):
-        """
-        Handler for asyncio autoawait
-        """
+    """Handler for asyncio autoawait"""
         import asyncio
 
         return asyncio.get_event_loop().run_until_complete(coro)
@@ -34,8 +32,16 @@
 
 
 def _curio_runner(coroutine):
-    """
-    handler for curio autoawait
+    """handler for curio autoawait
+
+    Parameters
+    ----------
+    coroutine :
+        
+
+    Returns
+    -------
+
     """
     import curio
 
@@ -43,6 +49,17 @@
 
 
 def _trio_runner(async_fn):
+    """
+
+    Parameters
+    ----------
+    async_fn :
+        
+
+    Returns
+    -------
+
+    """
     import trio
 
     async def loc(coro):
@@ -56,12 +73,19 @@
 
 
 def _pseudo_sync_runner(coro):
-    """
-    A runner that does not really allow async execution, and just advance the coroutine.
-
+    """A runner that does not really allow async execution, and just advance the coroutine.
+    
     See discussion in https://github.com/python-trio/trio/issues/608,
-
+    
     Credit to Nathaniel Smith
+
+    Parameters
+    ----------
+    coro :
+        
+
+    Returns
+    -------
 
     """
     try:
@@ -77,8 +101,17 @@
 
 def _asyncify(code: str) -> str:
     """wrap code in async def definition.
-
+    
     And setup a bit of context to run it later.
+
+    Parameters
+    ----------
+    code: str :
+        
+
+    Returns
+    -------
+
     """
     res = dedent(
         """
@@ -93,10 +126,16 @@
 
 
 class _AsyncSyntaxErrorVisitor(ast.NodeVisitor):
-    """
-    Find syntax errors that would be an error in an async repl, but because
+    """Find syntax errors that would be an error in an async repl, but because
     the implementation involves wrapping the repl in an async function, it
     is erroneously allowed (e.g. yield or return at the top level)
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     def __init__(self):
         if sys.version_info >= (3,8):
@@ -105,6 +144,17 @@
         super().__init__()
 
     def generic_visit(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         func_types = (ast.FunctionDef, ast.AsyncFunctionDef)
         invalid_types_by_depth = {
             0: (ast.Return, ast.Yield, ast.YieldFrom),
@@ -123,12 +173,20 @@
 
 
 def _async_parse_cell(cell: str) -> ast.AST:
-    """
-    This is a compatibility shim for pre-3.7 when async outside of a function
+    """This is a compatibility shim for pre-3.7 when async outside of a function
     is a syntax error at the parse stage.
-
+    
     It will return an abstract syntax tree parsed as if async and await outside
     of a function were not a syntax error.
+
+    Parameters
+    ----------
+    cell: str :
+        
+
+    Returns
+    -------
+
     """
     if sys.version_info < (3, 7):
         # Prior to 3.7 you need to asyncify before parse
@@ -140,14 +198,23 @@
 
 def _should_be_async(cell: str) -> bool:
     """Detect if a block of code need to be wrapped in an `async def`
-
+    
     Attempt to parse the block of code, it it compile we're fine.
     Otherwise we  wrap if and try to compile.
-
+    
     If it works, assume it should be async. Otherwise Return False.
-
+    
     Not handled yet: If the block of code has a return statement as the top
     level, it will be seen as async. This is a know limitation.
+
+    Parameters
+    ----------
+    cell: str :
+        
+
+    Returns
+    -------
+
     """
     if sys.version_info > (3, 8):
         try:
