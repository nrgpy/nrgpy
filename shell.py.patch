# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pygments/lexers/shell.py
+++ b/..//venv/lib/python3.8/site-packages/pygments/lexers/shell.py
@@ -27,10 +27,16 @@
 
 
 class BashLexer(RegexLexer):
-    """
-    Lexer for (ba|k|z|)sh shell scripts.
-
+    """Lexer for (ba|k|z|)sh shell scripts.
+    
     .. versionadded:: 0.6
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Bash'
@@ -121,6 +127,17 @@
     }
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         if shebang_matches(text, r'(ba|z|)sh'):
             return 1
         if text.startswith('$ '):
@@ -128,10 +145,16 @@
 
 
 class SlurmBashLexer(BashLexer):
-    """
-    Lexer for (ba|k|z|)sh Slurm scripts.
-
+    """Lexer for (ba|k|z|)sh Slurm scripts.
+    
     .. versionadded:: 2.4
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Slurm'
@@ -141,6 +164,17 @@
     EXTRA_KEYWORDS = {'srun'}
 
     def get_tokens_unprocessed(self, text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         for index, token, value in BashLexer.get_tokens_unprocessed(self, text):
             if token is Text and value in self.EXTRA_KEYWORDS:
                 yield index, Name.Builtin, value
@@ -150,15 +184,32 @@
                 yield index, token, value
 
 class ShellSessionBaseLexer(Lexer):
+    """Base lexer for simplistic shell sessions.
+    
+    .. versionadded:: 2.1
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
-    Base lexer for simplistic shell sessions.
-
-    .. versionadded:: 2.1
-    """
 
     _venv = re.compile(r'^(\([^)]*\))(\s*)')
 
     def get_tokens_unprocessed(self, text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         innerlexer = self._innerLexerCls(**self.options)
 
         pos = 0
@@ -216,10 +267,16 @@
 
 
 class BashSessionLexer(ShellSessionBaseLexer):
-    """
-    Lexer for simplistic shell sessions.
-
+    """Lexer for simplistic shell sessions.
+    
     .. versionadded:: 1.1
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Bash Session'
@@ -235,10 +292,16 @@
 
 
 class BatchLexer(RegexLexer):
-    """
-    Lexer for the DOS/Windows Batch file format.
-
+    """Lexer for the DOS/Windows Batch file format.
+    
     .. versionadded:: 0.7
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Batchfile'
     aliases = ['bat', 'batch', 'dosbatch', 'winbatch']
@@ -281,6 +344,41 @@
                           _space=_space, _start_label=_start_label,
                           _stoken=_stoken, _token_terminator=_token_terminator,
                           _variable=_variable, _ws=_ws):
+        """
+
+        Parameters
+        ----------
+        compound :
+            
+        _core_token :
+             (Default value = _core_token)
+        _core_token_compound :
+             (Default value = _core_token_compound)
+        _keyword_terminator :
+             (Default value = _keyword_terminator)
+        _nl :
+             (Default value = _nl)
+        _punct :
+             (Default value = _punct)
+        _string :
+             (Default value = _string)
+        _space :
+             (Default value = _space)
+        _start_label :
+             (Default value = _start_label)
+        _stoken :
+             (Default value = _stoken)
+        _token_terminator :
+             (Default value = _token_terminator)
+        _variable :
+             (Default value = _variable)
+        _ws :
+             (Default value = _ws)
+
+        Returns
+        -------
+
+        """
         rest = '(?:%s|%s|[^"%%%s%s%s])*' % (_string, _variable, _nl, _punct,
                                             ')' if compound else '')
         rest_of_line = r'(?:(?:[^%s^]|\^[%s]?[\w\W])*)' % (_nl, _nl)
@@ -363,6 +461,33 @@
                            _space=_space, _start_label=_start_label,
                            _token=_token, _token_compound=_token_compound,
                            _ws=_ws):
+        """
+
+        Parameters
+        ----------
+        compound :
+            
+        _label :
+             (Default value = _label)
+        _label_compound :
+             (Default value = _label_compound)
+        _nl :
+             (Default value = _nl)
+        _space :
+             (Default value = _space)
+        _start_label :
+             (Default value = _start_label)
+        _token :
+             (Default value = _token)
+        _token_compound :
+             (Default value = _token_compound)
+        _ws :
+             (Default value = _ws)
+
+        Returns
+        -------
+
+        """
         suffix = '/compound' if compound else ''
         state = []
         if compound:
@@ -381,6 +506,29 @@
     def _make_arithmetic_state(compound, _nl=_nl, _punct=_punct,
                                _string=_string, _variable=_variable,
                                _ws=_ws, _nlws=_nlws):
+        """
+
+        Parameters
+        ----------
+        compound :
+            
+        _nl :
+             (Default value = _nl)
+        _punct :
+             (Default value = _punct)
+        _string :
+             (Default value = _string)
+        _variable :
+             (Default value = _variable)
+        _ws :
+             (Default value = _ws)
+        _nlws :
+             (Default value = _nlws)
+
+        Returns
+        -------
+
+        """
         op = r'=+\-*/!~'
         state = []
         if compound:
@@ -402,6 +550,21 @@
 
     def _make_call_state(compound, _label=_label,
                          _label_compound=_label_compound):
+        """
+
+        Parameters
+        ----------
+        compound :
+            
+        _label :
+             (Default value = _label)
+        _label_compound :
+             (Default value = _label_compound)
+
+        Returns
+        -------
+
+        """
         state = []
         if compound:
             state.append((r'(?=\))', Text, '#pop'))
@@ -412,6 +575,29 @@
     def _make_label_state(compound, _label=_label,
                           _label_compound=_label_compound, _nl=_nl,
                           _punct=_punct, _string=_string, _variable=_variable):
+        """
+
+        Parameters
+        ----------
+        compound :
+            
+        _label :
+             (Default value = _label)
+        _label_compound :
+             (Default value = _label_compound)
+        _nl :
+             (Default value = _nl)
+        _punct :
+             (Default value = _punct)
+        _string :
+             (Default value = _string)
+        _variable :
+             (Default value = _variable)
+
+        Returns
+        -------
+
+        """
         state = []
         if compound:
             state.append((r'(?=\))', Text, '#pop'))
@@ -427,6 +613,33 @@
                              _nl=_nl, _punct=_punct, _stoken=_stoken,
                              _string=_string, _space=_space,
                              _variable=_variable, _nlws=_nlws):
+        """
+
+        Parameters
+        ----------
+        compound :
+            
+        _core_token_compound :
+             (Default value = _core_token_compound)
+        _nl :
+             (Default value = _nl)
+        _punct :
+             (Default value = _punct)
+        _stoken :
+             (Default value = _stoken)
+        _string :
+             (Default value = _string)
+        _space :
+             (Default value = _space)
+        _variable :
+             (Default value = _variable)
+        _nlws :
+             (Default value = _nlws)
+
+        Returns
+        -------
+
+        """
         stoken_compound = (r'(?:[%s]+|(?:%s|%s|%s)+)' %
                            (_punct, _string, _variable, _core_token_compound))
         return [
@@ -545,10 +758,16 @@
 
 
 class MSDOSSessionLexer(ShellSessionBaseLexer):
-    """
-    Lexer for simplistic MSDOS sessions.
-
+    """Lexer for simplistic MSDOS sessions.
+    
     .. versionadded:: 2.1
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'MSDOS Session'
@@ -562,10 +781,16 @@
 
 
 class TcshLexer(RegexLexer):
-    """
-    Lexer for tcsh scripts.
-
+    """Lexer for tcsh scripts.
+    
     .. versionadded:: 0.10
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Tcsh'
@@ -630,10 +855,16 @@
 
 
 class TcshSessionLexer(ShellSessionBaseLexer):
-    """
-    Lexer for Tcsh sessions.
-
+    """Lexer for Tcsh sessions.
+    
     .. versionadded:: 2.1
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Tcsh Session'
@@ -647,10 +878,16 @@
 
 
 class PowerShellLexer(RegexLexer):
-    """
-    For Windows PowerShell code.
-
+    """For Windows PowerShell code.
+    
     .. versionadded:: 1.5
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'PowerShell'
     aliases = ['powershell', 'posh', 'ps1', 'psm1']
@@ -761,10 +998,16 @@
 
 
 class PowerShellSessionLexer(ShellSessionBaseLexer):
-    """
-    Lexer for simplistic Windows PowerShell sessions.
-
+    """Lexer for simplistic Windows PowerShell sessions.
+    
     .. versionadded:: 2.1
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'PowerShell Session'
@@ -778,10 +1021,16 @@
 
 
 class FishShellLexer(RegexLexer):
-    """
-    Lexer for Fish shell scripts.
-
+    """Lexer for Fish shell scripts.
+    
     .. versionadded:: 2.1
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Fish'
@@ -850,11 +1099,17 @@
     }
 
 class ExeclineLexer(RegexLexer):
-    """
-    Lexer for Laurent Bercot's execline language
+    """Lexer for Laurent Bercot's execline language
     (https://skarnet.org/software/execline).
-
+    
     .. versionadded:: 2.7
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'execline'
@@ -905,5 +1160,16 @@
     }
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         if shebang_matches(text, r'execlineb'):
             return 1
