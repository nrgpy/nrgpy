# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_cpu_features.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_cpu_features.py
@@ -2,6 +2,21 @@
 from numpy.core._multiarray_umath import __cpu_features__
 
 def assert_features_equal(actual, desired, fname):
+    """
+
+    Parameters
+    ----------
+    actual :
+        
+    desired :
+        
+    fname :
+        
+
+    Returns
+    -------
+
+    """
     __tracebackhide__ = True  # Hide traceback for py.test
     actual, desired = str(actual), str(desired)
     if actual == desired:
@@ -49,15 +64,18 @@
     ) % (fname, actual, desired, error_report))
 
 class AbstractTest(object):
+    """ """
     features = []
     features_groups = {}
     features_map = {}
     features_flags = set()
 
     def load_flags(self):
+        """ """
         # a hook
         pass
     def test_features(self):
+        """ """
         self.load_flags()
         for gname, features in self.features_groups.items():
             test_features = [self.cpu_have(f) for f in features]
@@ -69,6 +87,17 @@
             assert_features_equal(npy_have, cpu_have, feature_name)
 
     def cpu_have(self, feature_name):
+        """
+
+        Parameters
+        ----------
+        feature_name :
+            
+
+        Returns
+        -------
+
+        """
         map_names = self.features_map.get(feature_name, feature_name)
         if isinstance(map_names, str):
             return map_names in self.features_flags
@@ -78,9 +107,31 @@
         return False
 
     def load_flags_cpuinfo(self, magic_key):
+        """
+
+        Parameters
+        ----------
+        magic_key :
+            
+
+        Returns
+        -------
+
+        """
         self.features_flags = self.get_cpuinfo_item(magic_key)
 
     def get_cpuinfo_item(self, magic_key):
+        """
+
+        Parameters
+        ----------
+        magic_key :
+            
+
+        Returns
+        -------
+
+        """
         values = set()
         with open('/proc/cpuinfo') as fd:
             for line in fd:
@@ -92,6 +143,7 @@
         return values
 
     def load_flags_auxv(self):
+        """ """
         import subprocess
         auxv = subprocess.check_output(['/bin/true'], env=dict(LD_SHOW_AUXV="1"))
         for at in auxv.split(b'\n'):
@@ -108,6 +160,7 @@
 is_x86   = re.match("^(amd64|x86|i386|i686)", machine, re.IGNORECASE)
 @pytest.mark.skipif(not is_linux or not is_x86, reason="Only for Linux and x86")
 class Test_X86_Features(AbstractTest):
+    """ """
     features = [
         "MMX", "SSE", "SSE2", "SSE3", "SSSE3", "SSE41", "POPCNT", "SSE42",
         "AVX", "F16C", "XOP", "FMA4", "FMA3", "AVX2", "AVX512F", "AVX512CD",
@@ -132,20 +185,24 @@
         AVX5124FMAPS="AVX512_4FMAPS", AVX5124VNNIW="AVX512_4VNNIW", AVX512VPOPCNTDQ="AVX512_VPOPCNTDQ",
     )
     def load_flags(self):
+        """ """
         self.load_flags_cpuinfo("flags")
 
 is_power = re.match("^(powerpc|ppc)64", machine, re.IGNORECASE)
 @pytest.mark.skipif(not is_linux or not is_power, reason="Only for Linux and Power")
 class Test_POWER_Features(AbstractTest):
+    """ """
     features = ["VSX", "VSX2", "VSX3"]
     features_map = dict(VSX2="ARCH_2_07", VSX3="ARCH_3_00")
 
     def load_flags(self):
+        """ """
         self.load_flags_auxv()
 
 is_arm = re.match("^(arm|aarch64)", machine, re.IGNORECASE)
 @pytest.mark.skipif(not is_linux or not is_arm, reason="Only for Linux and ARM")
 class Test_ARM_Features(AbstractTest):
+    """ """
     features = [
         "NEON", "ASIMD", "FPHP", "ASIMDHP", "ASIMDDP", "ASIMDFHM"
     ]
@@ -154,6 +211,7 @@
         NEON_VFPV4 = ["NEON", "VFPV4"],
     )
     def load_flags(self):
+        """ """
         self.load_flags_cpuinfo("Features")
         arch = self.get_cpuinfo_item("CPU architecture")
         # in case of mounting virtual filesystem of aarch64 kernel
