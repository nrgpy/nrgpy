# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexing/multiindex/test_setitem.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexing/multiindex/test_setitem.py
@@ -9,13 +9,47 @@
 
 
 class TestMultiIndexSetItem:
+    """ """
     def test_setitem_multiindex(self):
+        """ """
         for index_fn in ("loc",):
 
             def assert_equal(a, b):
+                """
+
+                Parameters
+                ----------
+                a :
+                    
+                b :
+                    
+
+                Returns
+                -------
+
+                """
                 assert a == b
 
             def check(target, indexers, value, compare_fn, expected=None):
+                """
+
+                Parameters
+                ----------
+                target :
+                    
+                indexers :
+                    
+                value :
+                    
+                compare_fn :
+                    
+                expected :
+                     (Default value = None)
+
+                Returns
+                -------
+
+                """
                 fn = getattr(target, index_fn)
                 fn.__setitem__(indexers, value)
                 result = fn.__getitem__(indexers)
@@ -118,6 +152,7 @@
             )
 
     def test_multiindex_setitem(self):
+        """ """
 
         # GH 3738
         # setting with a multi-index right hand side
@@ -172,6 +207,7 @@
         tm.assert_frame_equal(df, expected)
 
     def test_multiindex_assignment(self):
+        """ """
 
         # GH3777 part 2
 
@@ -232,6 +268,19 @@
         f_index = np.arange(5)
 
         def f(name, df2):
+            """
+
+            Parameters
+            ----------
+            name :
+                
+            df2 :
+                
+
+            Returns
+            -------
+
+            """
             return Series(np.arange(df2.shape[0]), name=df2.index.values[0]).reindex(
                 f_index
             )
@@ -247,6 +296,17 @@
             df.loc[name, "new_col"] = new_vals
 
     def test_series_setitem(self, multiindex_year_month_day_dataframe_random_data):
+        """
+
+        Parameters
+        ----------
+        multiindex_year_month_day_dataframe_random_data :
+            
+
+        Returns
+        -------
+
+        """
         ymd = multiindex_year_month_day_dataframe_random_data
         s = ymd["A"]
 
@@ -263,6 +323,17 @@
             s[49]
 
     def test_frame_getitem_setitem_boolean(self, multiindex_dataframe_random_data):
+        """
+
+        Parameters
+        ----------
+        multiindex_dataframe_random_data :
+            
+
+        Returns
+        -------
+
+        """
         frame = multiindex_dataframe_random_data
         df = frame.T.copy()
         values = df.values
@@ -288,6 +359,7 @@
             df[df * 0] = 2
 
     def test_frame_getitem_setitem_multislice(self):
+        """ """
         levels = [["t1", "t2"], ["a", "b", "c"]]
         codes = [[0, 0, 0, 1, 1], [0, 1, 2, 0, 1]]
         midx = MultiIndex(codes=codes, levels=levels, names=[None, "id"])
@@ -311,6 +383,7 @@
         tm.assert_frame_equal(df, result)
 
     def test_frame_setitem_multi_column(self):
+        """ """
         df = DataFrame(randn(10, 4), columns=[["a", "a", "b", "b"], [0, 1, 0, 1]])
 
         cp = df.copy()
@@ -347,6 +420,17 @@
     def test_getitem_setitem_tuple_plus_columns(
         self, multiindex_year_month_day_dataframe_random_data
     ):
+        """
+
+        Parameters
+        ----------
+        multiindex_year_month_day_dataframe_random_data :
+            
+
+        Returns
+        -------
+
+        """
         # GH #1013
         ymd = multiindex_year_month_day_dataframe_random_data
         df = ymd[:5]
@@ -356,6 +440,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_getitem_setitem_slice_integers(self):
+        """ """
         index = MultiIndex(
             levels=[[0, 1, 2], [0, 2]], codes=[[0, 0, 1, 1, 2, 2], [0, 1, 0, 1, 0, 1]]
         )
@@ -380,6 +465,17 @@
         assert (series.loc[1:2] == 7).values.all()
 
     def test_setitem_change_dtype(self, multiindex_dataframe_random_data):
+        """
+
+        Parameters
+        ----------
+        multiindex_dataframe_random_data :
+            
+
+        Returns
+        -------
+
+        """
         frame = multiindex_dataframe_random_data
         dft = frame.T
         s = dft["foo", "two"]
@@ -391,6 +487,17 @@
         tm.assert_series_equal(reindexed["foo", "two"], s > s.median())
 
     def test_set_column_scalar_with_loc(self, multiindex_dataframe_random_data):
+        """
+
+        Parameters
+        ----------
+        multiindex_dataframe_random_data :
+            
+
+        Returns
+        -------
+
+        """
         frame = multiindex_dataframe_random_data
         subset = frame.index[[1, 4, 5]]
 
@@ -402,6 +509,7 @@
         assert (frame.loc[subset, "B"] == 97).all()
 
     def test_nonunique_assignment_1750(self):
+        """ """
         df = DataFrame(
             [[1, 1, "x", "X"], [1, 1, "y", "Y"], [1, 2, "z", "Z"]], columns=list("ABCD")
         )
@@ -414,6 +522,7 @@
         assert (df.xs((1, 1))["C"] == "_").all()
 
     def test_astype_assignment_with_dups(self):
+        """ """
 
         # GH 4686
         # assignment with dups that has a dtype change
@@ -425,6 +534,7 @@
         tm.assert_index_equal(df.index, index)
 
     def test_setitem_nonmonotonic(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/31449
         index = pd.MultiIndex.from_tuples(
             [("a", "c"), ("b", "x"), ("a", "d")], names=["l1", "l2"]
@@ -436,6 +546,17 @@
 
 
 def test_frame_setitem_view_direct(multiindex_dataframe_random_data):
+    """
+
+    Parameters
+    ----------
+    multiindex_dataframe_random_data :
+        
+
+    Returns
+    -------
+
+    """
     # this works because we are modifying the underlying array
     # really a no-no
     df = multiindex_dataframe_random_data.T
@@ -444,6 +565,17 @@
 
 
 def test_frame_setitem_copy_raises(multiindex_dataframe_random_data):
+    """
+
+    Parameters
+    ----------
+    multiindex_dataframe_random_data :
+        
+
+    Returns
+    -------
+
+    """
     # will raise/warn as its chained assignment
     df = multiindex_dataframe_random_data.T
     msg = "A value is trying to be set on a copy of a slice from a DataFrame"
@@ -452,6 +584,17 @@
 
 
 def test_frame_setitem_copy_no_write(multiindex_dataframe_random_data):
+    """
+
+    Parameters
+    ----------
+    multiindex_dataframe_random_data :
+        
+
+    Returns
+    -------
+
+    """
     frame = multiindex_dataframe_random_data.T
     expected = frame
     df = frame.copy()
