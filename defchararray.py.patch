# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/defchararray.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/defchararray.py
@@ -47,12 +47,20 @@
 
 
 def _use_unicode(*args):
-    """
-    Helper function for determining the output type of some string
+    """Helper function for determining the output type of some string
     operations.
-
+    
     For an operation on two ndarrays, if at least one is unicode, the
     result should be unicode.
+
+    Parameters
+    ----------
+    *args :
+        
+
+    Returns
+    -------
+
     """
     for x in args:
         if (isinstance(x, str) or
@@ -61,20 +69,36 @@
     return string_
 
 def _to_string_or_unicode_array(result):
-    """
-    Helper function to cast a result back into a string or unicode array
+    """Helper function to cast a result back into a string or unicode array
     if an object array must be used as an intermediary.
+
+    Parameters
+    ----------
+    result :
+        
+
+    Returns
+    -------
+
     """
     return numpy.asarray(result.tolist())
 
 def _clean_args(*args):
-    """
-    Helper function for delegating arguments to Python string
+    """Helper function for delegating arguments to Python string
     functions.
-
+    
     Many of the Python string operations that have optional arguments
     do not use 'None' to indicate a default value.  In these cases,
     we need to remove all None arguments, and those following them.
+
+    Parameters
+    ----------
+    *args :
+        
+
+    Returns
+    -------
+
     """
     newargs = []
     for chk in args:
@@ -84,10 +108,18 @@
     return newargs
 
 def _get_num_chars(a):
-    """
-    Helper function that returns the number of characters per field in
+    """Helper function that returns the number of characters per field in
     a string or unicode array.  This is to abstract out the fact that
     for a unicode array this is itemsize / 4.
+
+    Parameters
+    ----------
+    a :
+        
+
+    Returns
+    -------
+
     """
     if issubclass(a.dtype.type, unicode_):
         return a.itemsize // 4
@@ -95,14 +127,26 @@
 
 
 def _binary_op_dispatcher(x1, x2):
+    """
+
+    Parameters
+    ----------
+    x1 :
+        
+    x2 :
+        
+
+    Returns
+    -------
+
+    """
     return (x1, x2)
 
 
 @array_function_dispatch(_binary_op_dispatcher)
 def equal(x1, x2):
-    """
-    Return (x1 == x2) element-wise.
-
+    """Return (x1 == x2) element-wise.
+    
     Unlike `numpy.equal`, this comparison is performed by first
     stripping whitespace characters from the end of the string.  This
     behavior is provided for backward-compatibility with numarray.
@@ -111,6 +155,10 @@
     ----------
     x1, x2 : array_like of str or unicode
         Input arrays of the same shape.
+    x1 :
+        
+    x2 :
+        
 
     Returns
     -------
@@ -126,9 +174,8 @@
 
 @array_function_dispatch(_binary_op_dispatcher)
 def not_equal(x1, x2):
-    """
-    Return (x1 != x2) element-wise.
-
+    """Return (x1 != x2) element-wise.
+    
     Unlike `numpy.not_equal`, this comparison is performed by first
     stripping whitespace characters from the end of the string.  This
     behavior is provided for backward-compatibility with numarray.
@@ -137,6 +184,10 @@
     ----------
     x1, x2 : array_like of str or unicode
         Input arrays of the same shape.
+    x1 :
+        
+    x2 :
+        
 
     Returns
     -------
@@ -152,9 +203,8 @@
 
 @array_function_dispatch(_binary_op_dispatcher)
 def greater_equal(x1, x2):
-    """
-    Return (x1 >= x2) element-wise.
-
+    """Return (x1 >= x2) element-wise.
+    
     Unlike `numpy.greater_equal`, this comparison is performed by
     first stripping whitespace characters from the end of the string.
     This behavior is provided for backward-compatibility with
@@ -164,6 +214,10 @@
     ----------
     x1, x2 : array_like of str or unicode
         Input arrays of the same shape.
+    x1 :
+        
+    x2 :
+        
 
     Returns
     -------
@@ -179,9 +233,8 @@
 
 @array_function_dispatch(_binary_op_dispatcher)
 def less_equal(x1, x2):
-    """
-    Return (x1 <= x2) element-wise.
-
+    """Return (x1 <= x2) element-wise.
+    
     Unlike `numpy.less_equal`, this comparison is performed by first
     stripping whitespace characters from the end of the string.  This
     behavior is provided for backward-compatibility with numarray.
@@ -190,6 +243,10 @@
     ----------
     x1, x2 : array_like of str or unicode
         Input arrays of the same shape.
+    x1 :
+        
+    x2 :
+        
 
     Returns
     -------
@@ -205,9 +262,8 @@
 
 @array_function_dispatch(_binary_op_dispatcher)
 def greater(x1, x2):
-    """
-    Return (x1 > x2) element-wise.
-
+    """Return (x1 > x2) element-wise.
+    
     Unlike `numpy.greater`, this comparison is performed by first
     stripping whitespace characters from the end of the string.  This
     behavior is provided for backward-compatibility with numarray.
@@ -216,6 +272,10 @@
     ----------
     x1, x2 : array_like of str or unicode
         Input arrays of the same shape.
+    x1 :
+        
+    x2 :
+        
 
     Returns
     -------
@@ -231,9 +291,8 @@
 
 @array_function_dispatch(_binary_op_dispatcher)
 def less(x1, x2):
-    """
-    Return (x1 < x2) element-wise.
-
+    """Return (x1 < x2) element-wise.
+    
     Unlike `numpy.greater`, this comparison is performed by first
     stripping whitespace characters from the end of the string.  This
     behavior is provided for backward-compatibility with numarray.
@@ -242,6 +301,10 @@
     ----------
     x1, x2 : array_like of str or unicode
         Input arrays of the same shape.
+    x1 :
+        
+    x2 :
+        
 
     Returns
     -------
@@ -256,17 +319,28 @@
 
 
 def _unary_op_dispatcher(a):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+
+    Returns
+    -------
+
+    """
     return (a,)
 
 
 @array_function_dispatch(_unary_op_dispatcher)
 def str_len(a):
-    """
-    Return len(a) element-wise.
+    """Return len(a) element-wise.
 
     Parameters
     ----------
     a : array_like of str or unicode
+        
 
     Returns
     -------
@@ -285,9 +359,8 @@
 
 @array_function_dispatch(_binary_op_dispatcher)
 def add(x1, x2):
-    """
-    Return element-wise string concatenation for two arrays of str or unicode.
-
+    """Return element-wise string concatenation for two arrays of str or unicode.
+    
     Arrays `x1` and `x2` must have the same shape.
 
     Parameters
@@ -299,10 +372,8 @@
 
     Returns
     -------
-    add : ndarray
-        Output array of `string_` or `unicode_`, depending on input types
-        of the same shape as `x1` and `x2`.
-
+
+    
     """
     arr1 = numpy.asarray(x1)
     arr2 = numpy.asarray(x2)
@@ -312,29 +383,41 @@
 
 
 def _multiply_dispatcher(a, i):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    i :
+        
+
+    Returns
+    -------
+
+    """
     return (a,)
 
 
 @array_function_dispatch(_multiply_dispatcher)
 def multiply(a, i):
-    """
-    Return (a * i), that is string multiple concatenation,
+    """Return (a * i), that is string multiple concatenation,
     element-wise.
-
+    
     Values in `i` of less than 0 are treated as 0 (which yields an
     empty string).
 
     Parameters
     ----------
     a : array_like of str or unicode
-
+        
     i : array_like of ints
-
-    Returns
-    -------
-    out : ndarray
-        Output array of str or unicode, depending on input types
-
+        
+
+    Returns
+    -------
+
+    
     """
     a_arr = numpy.asarray(a)
     i_arr = numpy.asarray(i)
@@ -346,22 +429,34 @@
 
 
 def _mod_dispatcher(a, values):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    values :
+        
+
+    Returns
+    -------
+
+    """
     return (a, values)
 
 
 @array_function_dispatch(_mod_dispatcher)
 def mod(a, values):
-    """
-    Return (a % i), that is pre-Python 2.6 string formatting
+    """Return (a % i), that is pre-Python 2.6 string formatting
     (interpolation), element-wise for a pair of array_likes of str
     or unicode.
 
     Parameters
     ----------
     a : array_like of str or unicode
-
+        
     values : array_like of values
-       These values will be element-wise interpolated into the string.
+        These values will be element-wise interpolated into the string.
 
     Returns
     -------
@@ -371,7 +466,6 @@
     See also
     --------
     str.__mod__
-
     """
     return _to_string_or_unicode_array(
         _vec_string(a, object_, '__mod__', (values,)))
@@ -379,12 +473,11 @@
 
 @array_function_dispatch(_unary_op_dispatcher)
 def capitalize(a):
-    """
-    Return a copy of `a` with only the first character of each element
+    """Return a copy of `a` with only the first character of each element
     capitalized.
-
+    
     Calls `str.capitalize` element-wise.
-
+    
     For 8-bit strings, this method is locale-dependent.
 
     Parameters
@@ -401,7 +494,6 @@
     See also
     --------
     str.capitalize
-
     Examples
     --------
     >>> c = np.array(['a1b2','1b2a','b2a1','2a1b'],'S4'); c
@@ -410,28 +502,41 @@
     >>> np.char.capitalize(c)
     array(['A1b2', '1b2a', 'B2a1', '2a1b'],
         dtype='|S4')
-
     """
     a_arr = numpy.asarray(a)
     return _vec_string(a_arr, a_arr.dtype, 'capitalize')
 
 
 def _center_dispatcher(a, width, fillchar=None):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    width :
+        
+    fillchar :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (a,)
 
 
 @array_function_dispatch(_center_dispatcher)
 def center(a, width, fillchar=' '):
-    """
-    Return a copy of `a` with its elements centered in a string of
+    """Return a copy of `a` with its elements centered in a string of
     length `width`.
-
+    
     Calls `str.center` element-wise.
 
     Parameters
     ----------
     a : array_like of str or unicode
-
+        
     width : int
         The length of the resulting strings
     fillchar : str or unicode, optional
@@ -446,7 +551,6 @@
     See also
     --------
     str.center
-
     """
     a_arr = numpy.asarray(a)
     width_arr = numpy.asarray(width)
@@ -458,27 +562,46 @@
 
 
 def _count_dispatcher(a, sub, start=None, end=None):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    sub :
+        
+    start :
+         (Default value = None)
+    end :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (a,)
 
 
 @array_function_dispatch(_count_dispatcher)
 def count(a, sub, start=0, end=None):
-    """
-    Returns an array with the number of non-overlapping occurrences of
+    """Returns an array with the number of non-overlapping occurrences of
     substring `sub` in the range [`start`, `end`].
-
+    
     Calls `str.count` element-wise.
 
     Parameters
     ----------
     a : array_like of str or unicode
-
+        
     sub : str or unicode
-       The substring to search for.
-
+        The substring to search for.
     start, end : int, optional
-       Optional arguments `start` and `end` are interpreted as slice
-       notation to specify the range in which to count.
+        Optional arguments `start` and `end` are interpreted as slice
+        notation to specify the range in which to count.
+    start :
+         (Default value = 0)
+    end :
+         (Default value = None)
 
     Returns
     -------
@@ -488,7 +611,6 @@
     See also
     --------
     str.count
-
     Examples
     --------
     >>> c = np.array(['aAaAaA', '  aA  ', 'abBABba'])
@@ -502,20 +624,33 @@
     array([2, 1, 1])
     >>> np.char.count(c, 'A', start=1, end=3)
     array([1, 0, 0])
-
     """
     return _vec_string(a, int_, 'count', [sub, start] + _clean_args(end))
 
 
 def _code_dispatcher(a, encoding=None, errors=None):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    encoding :
+         (Default value = None)
+    errors :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (a,)
 
 
 @array_function_dispatch(_code_dispatcher)
 def decode(a, encoding=None, errors=None):
-    """
-    Calls `str.decode` element-wise.
-
+    """Calls `str.decode` element-wise.
+    
     The set of available codecs comes from the Python standard library,
     and may be extended at runtime.  For more information, see the
     :mod:`codecs` module.
@@ -523,25 +658,23 @@
     Parameters
     ----------
     a : array_like of str or unicode
-
+        
     encoding : str, optional
-       The name of an encoding
-
+        The name of an encoding (Default value = None)
     errors : str, optional
-       Specifies how to handle encoding errors
+        Specifies how to handle encoding errors (Default value = None)
 
     Returns
     -------
     out : ndarray
+        
 
     See also
     --------
     str.decode
-
     Notes
     -----
     The type of the result will depend on the encoding specified.
-
     Examples
     --------
     >>> c = np.array(['aAaAaA', '  aA  ', 'abBABba'])
@@ -551,7 +684,6 @@
     array(['\\x81\\xc1\\x81\\xc1\\x81\\xc1', '@@\\x81\\xc1@@',
         '\\x81\\x82\\xc2\\xc1\\xc2\\x82\\x81'],
         dtype='|S7')
-
     """
     return _to_string_or_unicode_array(
         _vec_string(a, object_, 'decode', _clean_args(encoding, errors)))
@@ -559,9 +691,8 @@
 
 @array_function_dispatch(_code_dispatcher)
 def encode(a, encoding=None, errors=None):
-    """
-    Calls `str.encode` element-wise.
-
+    """Calls `str.encode` element-wise.
+    
     The set of available codecs comes from the Python standard library,
     and may be extended at runtime. For more information, see the codecs
     module.
@@ -569,51 +700,69 @@
     Parameters
     ----------
     a : array_like of str or unicode
-
+        
     encoding : str, optional
-       The name of an encoding
-
+        The name of an encoding (Default value = None)
     errors : str, optional
-       Specifies how to handle encoding errors
+        Specifies how to handle encoding errors (Default value = None)
 
     Returns
     -------
     out : ndarray
+        
 
     See also
     --------
     str.encode
-
     Notes
     -----
     The type of the result will depend on the encoding specified.
-
     """
     return _to_string_or_unicode_array(
         _vec_string(a, object_, 'encode', _clean_args(encoding, errors)))
 
 
 def _endswith_dispatcher(a, suffix, start=None, end=None):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    suffix :
+        
+    start :
+         (Default value = None)
+    end :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (a,)
 
 
 @array_function_dispatch(_endswith_dispatcher)
 def endswith(a, suffix, start=0, end=None):
-    """
-    Returns a boolean array which is `True` where the string element
+    """Returns a boolean array which is `True` where the string element
     in `a` ends with `suffix`, otherwise `False`.
-
+    
     Calls `str.endswith` element-wise.
 
     Parameters
     ----------
     a : array_like of str or unicode
-
+        
     suffix : str
-
+        
     start, end : int, optional
         With optional `start`, test beginning at that position. With
         optional `end`, stop comparing at that position.
+    start :
+         (Default value = 0)
+    end :
+         (Default value = None)
 
     Returns
     -------
@@ -623,7 +772,6 @@
     See also
     --------
     str.endswith
-
     Examples
     --------
     >>> s = np.array(['foo', 'bar'])
@@ -635,24 +783,35 @@
     array([False,  True])
     >>> np.char.endswith(s, 'a', start=1, end=2)
     array([False,  True])
-
     """
     return _vec_string(
         a, bool_, 'endswith', [suffix, start] + _clean_args(end))
 
 
 def _expandtabs_dispatcher(a, tabsize=None):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    tabsize :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (a,)
 
 
 @array_function_dispatch(_expandtabs_dispatcher)
 def expandtabs(a, tabsize=8):
-    """
-    Return a copy of each string element where all tab characters are
+    """Return a copy of each string element where all tab characters are
     replaced by one or more spaces.
-
+    
     Calls `str.expandtabs` element-wise.
-
+    
     Return a copy of each string element where all tab characters are
     replaced by one or more spaces, depending on the current column
     and the given `tabsize`. The column number is reset to zero after
@@ -675,7 +834,6 @@
     See also
     --------
     str.expandtabs
-
     """
     return _to_string_or_unicode_array(
         _vec_string(a, object_, 'expandtabs', (tabsize,)))
@@ -683,12 +841,11 @@
 
 @array_function_dispatch(_count_dispatcher)
 def find(a, sub, start=0, end=None):
-    """
-    For each element, return the lowest index in the string where
+    """For each element, return the lowest index in the string where
     substring `sub` is found.
-
+    
     Calls `str.find` element-wise.
-
+    
     For each element, return the lowest index in the string where
     substring `sub` is found, such that `sub` is contained in the
     range [`start`, `end`].
@@ -696,12 +853,16 @@
     Parameters
     ----------
     a : array_like of str or unicode
-
+        
     sub : str or unicode
-
+        
     start, end : int, optional
         Optional arguments `start` and `end` are interpreted as in
         slice notation.
+    start :
+         (Default value = 0)
+    end :
+         (Default value = None)
 
     Returns
     -------
@@ -711,7 +872,6 @@
     See also
     --------
     str.find
-
     """
     return _vec_string(
         a, int_, 'find', [sub, start] + _clean_args(end))
@@ -719,18 +879,22 @@
 
 @array_function_dispatch(_count_dispatcher)
 def index(a, sub, start=0, end=None):
-    """
-    Like `find`, but raises `ValueError` when the substring is not found.
-
+    """Like `find`, but raises `ValueError` when the substring is not found.
+    
     Calls `str.index` element-wise.
 
     Parameters
     ----------
     a : array_like of str or unicode
-
+        
     sub : str or unicode
-
+        
     start, end : int, optional
+        
+    start :
+         (Default value = 0)
+    end :
+         (Default value = None)
 
     Returns
     -------
@@ -740,7 +904,6 @@
     See also
     --------
     find, str.find
-
     """
     return _vec_string(
         a, int_, 'index', [sub, start] + _clean_args(end))
@@ -748,17 +911,17 @@
 
 @array_function_dispatch(_unary_op_dispatcher)
 def isalnum(a):
-    """
-    Returns true for each element if all characters in the string are
+    """Returns true for each element if all characters in the string are
     alphanumeric and there is at least one character, false otherwise.
-
+    
     Calls `str.isalnum` element-wise.
-
+    
     For 8-bit strings, this method is locale-dependent.
 
     Parameters
     ----------
     a : array_like of str or unicode
+        
 
     Returns
     -------
@@ -774,17 +937,17 @@
 
 @array_function_dispatch(_unary_op_dispatcher)
 def isalpha(a):
-    """
-    Returns true for each element if all characters in the string are
+    """Returns true for each element if all characters in the string are
     alphabetic and there is at least one character, false otherwise.
-
+    
     Calls `str.isalpha` element-wise.
-
+    
     For 8-bit strings, this method is locale-dependent.
 
     Parameters
     ----------
     a : array_like of str or unicode
+        
 
     Returns
     -------
@@ -800,17 +963,17 @@
 
 @array_function_dispatch(_unary_op_dispatcher)
 def isdigit(a):
-    """
-    Returns true for each element if all characters in the string are
+    """Returns true for each element if all characters in the string are
     digits and there is at least one character, false otherwise.
-
+    
     Calls `str.isdigit` element-wise.
-
+    
     For 8-bit strings, this method is locale-dependent.
 
     Parameters
     ----------
     a : array_like of str or unicode
+        
 
     Returns
     -------
@@ -826,18 +989,18 @@
 
 @array_function_dispatch(_unary_op_dispatcher)
 def islower(a):
-    """
-    Returns true for each element if all cased characters in the
+    """Returns true for each element if all cased characters in the
     string are lowercase and there is at least one cased character,
     false otherwise.
-
+    
     Calls `str.islower` element-wise.
-
+    
     For 8-bit strings, this method is locale-dependent.
 
     Parameters
     ----------
     a : array_like of str or unicode
+        
 
     Returns
     -------
@@ -853,18 +1016,18 @@
 
 @array_function_dispatch(_unary_op_dispatcher)
 def isspace(a):
-    """
-    Returns true for each element if there are only whitespace
+    """Returns true for each element if there are only whitespace
     characters in the string and there is at least one character,
     false otherwise.
-
+    
     Calls `str.isspace` element-wise.
-
+    
     For 8-bit strings, this method is locale-dependent.
 
     Parameters
     ----------
     a : array_like of str or unicode
+        
 
     Returns
     -------
@@ -880,17 +1043,17 @@
 
 @array_function_dispatch(_unary_op_dispatcher)
 def istitle(a):
-    """
-    Returns true for each element if the element is a titlecased
+    """Returns true for each element if the element is a titlecased
     string and there is at least one character, false otherwise.
-
+    
     Call `str.istitle` element-wise.
-
+    
     For 8-bit strings, this method is locale-dependent.
 
     Parameters
     ----------
     a : array_like of str or unicode
+        
 
     Returns
     -------
@@ -906,18 +1069,18 @@
 
 @array_function_dispatch(_unary_op_dispatcher)
 def isupper(a):
-    """
-    Returns true for each element if all cased characters in the
+    """Returns true for each element if all cased characters in the
     string are uppercase and there is at least one character, false
     otherwise.
-
+    
     Call `str.isupper` element-wise.
-
+    
     For 8-bit strings, this method is locale-dependent.
 
     Parameters
     ----------
     a : array_like of str or unicode
+        
 
     Returns
     -------
@@ -932,21 +1095,35 @@
 
 
 def _join_dispatcher(sep, seq):
+    """
+
+    Parameters
+    ----------
+    sep :
+        
+    seq :
+        
+
+    Returns
+    -------
+
+    """
     return (sep, seq)
 
 
 @array_function_dispatch(_join_dispatcher)
 def join(sep, seq):
-    """
-    Return a string which is the concatenation of the strings in the
+    """Return a string which is the concatenation of the strings in the
     sequence `seq`.
-
+    
     Calls `str.join` element-wise.
 
     Parameters
     ----------
     sep : array_like of str or unicode
+        
     seq : array_like of str or unicode
+        
 
     Returns
     -------
@@ -963,25 +1140,39 @@
 
 
 def _just_dispatcher(a, width, fillchar=None):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    width :
+        
+    fillchar :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (a,)
 
 
 @array_function_dispatch(_just_dispatcher)
 def ljust(a, width, fillchar=' '):
-    """
-    Return an array with the elements of `a` left-justified in a
+    """Return an array with the elements of `a` left-justified in a
     string of length `width`.
-
+    
     Calls `str.ljust` element-wise.
 
     Parameters
     ----------
     a : array_like of str or unicode
-
+        
     width : int
         The length of the resulting strings
     fillchar : str or unicode, optional
-        The character to use for padding
+        The character to use for padding (Default value = ' ')
 
     Returns
     -------
@@ -991,7 +1182,6 @@
     See also
     --------
     str.ljust
-
     """
     a_arr = numpy.asarray(a)
     width_arr = numpy.asarray(width)
@@ -1004,11 +1194,10 @@
 
 @array_function_dispatch(_unary_op_dispatcher)
 def lower(a):
-    """
-    Return an array with the elements converted to lowercase.
-
+    """Return an array with the elements converted to lowercase.
+    
     Call `str.lower` element-wise.
-
+    
     For 8-bit strings, this method is locale-dependent.
 
     Parameters
@@ -1024,36 +1213,45 @@
     See also
     --------
     str.lower
-
     Examples
     --------
     >>> c = np.array(['A1B C', '1BCA', 'BCA1']); c
     array(['A1B C', '1BCA', 'BCA1'], dtype='<U5')
     >>> np.char.lower(c)
     array(['a1b c', '1bca', 'bca1'], dtype='<U5')
-
     """
     a_arr = numpy.asarray(a)
     return _vec_string(a_arr, a_arr.dtype, 'lower')
 
 
 def _strip_dispatcher(a, chars=None):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    chars :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (a,)
 
 
 @array_function_dispatch(_strip_dispatcher)
 def lstrip(a, chars=None):
-    """
-    For each element in `a`, return a copy with the leading characters
+    """For each element in `a`, return a copy with the leading characters
     removed.
-
+    
     Calls `str.lstrip` element-wise.
 
     Parameters
     ----------
     a : array-like, {str, unicode}
         Input array.
-
     chars : {str, unicode}, optional
         The `chars` argument is a string specifying the set of
         characters to be removed. If omitted or None, the `chars`
@@ -1069,19 +1267,17 @@
     See also
     --------
     str.lstrip
-
     Examples
     --------
+    
+    The 'a' variable is unstripped from c[1] because whitespace leading.
     >>> c = np.array(['aAaAaA', '  aA  ', 'abBABba'])
     >>> c
     array(['aAaAaA', '  aA  ', 'abBABba'], dtype='<U7')
-
-    The 'a' variable is unstripped from c[1] because whitespace leading.
-
+    
     >>> np.char.lstrip(c, 'a')
     array(['AaAaA', '  aA  ', 'bBABba'], dtype='<U7')
-
-
+    
     >>> np.char.lstrip(c, 'A') # leaves c unchanged
     array(['aAaAaA', '  aA  ', 'abBABba'], dtype='<U7')
     >>> (np.char.lstrip(c, ' ') == np.char.lstrip(c, '')).all()
@@ -1090,23 +1286,34 @@
     False
     >>> (np.char.lstrip(c, ' ') == np.char.lstrip(c, None)).all()
     True
-
     """
     a_arr = numpy.asarray(a)
     return _vec_string(a_arr, a_arr.dtype, 'lstrip', (chars,))
 
 
 def _partition_dispatcher(a, sep):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    sep :
+        
+
+    Returns
+    -------
+
+    """
     return (a,)
 
 
 @array_function_dispatch(_partition_dispatcher)
 def partition(a, sep):
-    """
-    Partition each element in `a` around `sep`.
-
+    """Partition each element in `a` around `sep`.
+    
     Calls `str.partition` element-wise.
-
+    
     For each element in `a`, split the element as the first
     occurrence of `sep`, and return 3 strings containing the part
     before the separator, the separator itself, and the part after
@@ -1130,33 +1337,52 @@
     See also
     --------
     str.partition
-
     """
     return _to_string_or_unicode_array(
         _vec_string(a, object_, 'partition', (sep,)))
 
 
 def _replace_dispatcher(a, old, new, count=None):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    old :
+        
+    new :
+        
+    count :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (a,)
 
 
 @array_function_dispatch(_replace_dispatcher)
 def replace(a, old, new, count=None):
-    """
-    For each element in `a`, return a copy of the string with all
+    """For each element in `a`, return a copy of the string with all
     occurrences of substring `old` replaced by `new`.
-
+    
     Calls `str.replace` element-wise.
 
     Parameters
     ----------
     a : array-like of str or unicode
-
+        
     old, new : str or unicode
-
+        
     count : int, optional
         If the optional argument `count` is given, only the first
-        `count` occurrences are replaced.
+        `count` occurrences are replaced. (Default value = None)
+    old :
+        
+    new :
+        
 
     Returns
     -------
@@ -1166,7 +1392,6 @@
     See also
     --------
     str.replace
-
     """
     return _to_string_or_unicode_array(
         _vec_string(
@@ -1175,32 +1400,34 @@
 
 @array_function_dispatch(_count_dispatcher)
 def rfind(a, sub, start=0, end=None):
-    """
-    For each element in `a`, return the highest index in the string
+    """For each element in `a`, return the highest index in the string
     where substring `sub` is found, such that `sub` is contained
     within [`start`, `end`].
-
+    
     Calls `str.rfind` element-wise.
 
     Parameters
     ----------
     a : array-like of str or unicode
-
+        
     sub : str or unicode
-
+        
     start, end : int, optional
         Optional arguments `start` and `end` are interpreted as in
         slice notation.
+    start :
+         (Default value = 0)
+    end :
+         (Default value = None)
 
     Returns
     -------
     out : ndarray
-       Output array of ints.  Return -1 on failure.
+        Output array of ints.  Return -1 on failure.
 
     See also
     --------
     str.rfind
-
     """
     return _vec_string(
         a, int_, 'rfind', [sub, start] + _clean_args(end))
@@ -1208,29 +1435,32 @@
 
 @array_function_dispatch(_count_dispatcher)
 def rindex(a, sub, start=0, end=None):
-    """
-    Like `rfind`, but raises `ValueError` when the substring `sub` is
+    """Like `rfind`, but raises `ValueError` when the substring `sub` is
     not found.
-
+    
     Calls `str.rindex` element-wise.
 
     Parameters
     ----------
     a : array-like of str or unicode
-
+        
     sub : str or unicode
-
+        
     start, end : int, optional
+        
+    start :
+         (Default value = 0)
+    end :
+         (Default value = None)
 
     Returns
     -------
     out : ndarray
-       Output array of ints.
+        Output array of ints.
 
     See also
     --------
     rfind, str.rindex
-
     """
     return _vec_string(
         a, int_, 'rindex', [sub, start] + _clean_args(end))
@@ -1238,20 +1468,19 @@
 
 @array_function_dispatch(_just_dispatcher)
 def rjust(a, width, fillchar=' '):
-    """
-    Return an array with the elements of `a` right-justified in a
+    """Return an array with the elements of `a` right-justified in a
     string of length `width`.
-
+    
     Calls `str.rjust` element-wise.
 
     Parameters
     ----------
     a : array_like of str or unicode
-
+        
     width : int
         The length of the resulting strings
     fillchar : str or unicode, optional
-        The character to use for padding
+        The character to use for padding (Default value = ' ')
 
     Returns
     -------
@@ -1261,7 +1490,6 @@
     See also
     --------
     str.rjust
-
     """
     a_arr = numpy.asarray(a)
     width_arr = numpy.asarray(width)
@@ -1274,11 +1502,10 @@
 
 @array_function_dispatch(_partition_dispatcher)
 def rpartition(a, sep):
-    """
-    Partition (split) each element around the right-most separator.
-
+    """Partition (split) each element around the right-most separator.
+    
     Calls `str.rpartition` element-wise.
-
+    
     For each element in `a`, split the element as the last
     occurrence of `sep`, and return 3 strings containing the part
     before the separator, the separator itself, and the part after
@@ -1302,47 +1529,59 @@
     See also
     --------
     str.rpartition
-
     """
     return _to_string_or_unicode_array(
         _vec_string(a, object_, 'rpartition', (sep,)))
 
 
 def _split_dispatcher(a, sep=None, maxsplit=None):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    sep :
+         (Default value = None)
+    maxsplit :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (a,)
 
 
 @array_function_dispatch(_split_dispatcher)
 def rsplit(a, sep=None, maxsplit=None):
-    """
-    For each element in `a`, return a list of the words in the
+    """For each element in `a`, return a list of the words in the
     string, using `sep` as the delimiter string.
-
+    
     Calls `str.rsplit` element-wise.
-
+    
     Except for splitting from the right, `rsplit`
     behaves like `split`.
 
     Parameters
     ----------
     a : array_like of str or unicode
-
+        
     sep : str or unicode, optional
         If `sep` is not specified or None, any whitespace string
-        is a separator.
+        is a separator. (Default value = None)
     maxsplit : int, optional
         If `maxsplit` is given, at most `maxsplit` splits are done,
-        the rightmost ones.
+        the rightmost ones. (Default value = None)
 
     Returns
     -------
     out : ndarray
-       Array of list objects
+        Array of list objects
 
     See also
     --------
     str.rsplit, split
-
     """
     # This will return an array of lists of different sizes, so we
     # leave it as an object array
@@ -1351,27 +1590,39 @@
 
 
 def _strip_dispatcher(a, chars=None):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    chars :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (a,)
 
 
 @array_function_dispatch(_strip_dispatcher)
 def rstrip(a, chars=None):
-    """
-    For each element in `a`, return a copy with the trailing
+    """For each element in `a`, return a copy with the trailing
     characters removed.
-
+    
     Calls `str.rstrip` element-wise.
 
     Parameters
     ----------
     a : array-like of str or unicode
-
+        
     chars : str or unicode, optional
-       The `chars` argument is a string specifying the set of
-       characters to be removed. If omitted or None, the `chars`
-       argument defaults to removing whitespace. The `chars` argument
-       is not a suffix; rather, all combinations of its values are
-       stripped.
+        The `chars` argument is a string specifying the set of
+        characters to be removed. If omitted or None, the `chars`
+        argument defaults to removing whitespace. The `chars` argument
+        is not a suffix; rather, all combinations of its values are
+        stripped.
 
     Returns
     -------
@@ -1381,7 +1632,6 @@
     See also
     --------
     str.rstrip
-
     Examples
     --------
     >>> c = np.array(['aAaAaA', 'abBABba'], dtype='S7'); c
@@ -1393,7 +1643,6 @@
     >>> np.char.rstrip(c, b'A')
     array(['aAaAa', 'abBABba'],
         dtype='|S7')
-
     """
     a_arr = numpy.asarray(a)
     return _vec_string(a_arr, a_arr.dtype, 'rstrip', (chars,))
@@ -1401,22 +1650,20 @@
 
 @array_function_dispatch(_split_dispatcher)
 def split(a, sep=None, maxsplit=None):
-    """
-    For each element in `a`, return a list of the words in the
+    """For each element in `a`, return a list of the words in the
     string, using `sep` as the delimiter string.
-
+    
     Calls `str.split` element-wise.
 
     Parameters
     ----------
     a : array_like of str or unicode
-
+        
     sep : str or unicode, optional
-       If `sep` is not specified or None, any whitespace string is a
-       separator.
-
+        If `sep` is not specified or None, any whitespace string is a
+        separator. (Default value = None)
     maxsplit : int, optional
-        If `maxsplit` is given, at most `maxsplit` splits are done.
+        If `maxsplit` is given, at most `maxsplit` splits are done. (Default value = None)
 
     Returns
     -------
@@ -1426,7 +1673,6 @@
     See also
     --------
     str.split, rsplit
-
     """
     # This will return an array of lists of different sizes, so we
     # leave it as an object array
@@ -1435,24 +1681,36 @@
 
 
 def _splitlines_dispatcher(a, keepends=None):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    keepends :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (a,)
 
 
 @array_function_dispatch(_splitlines_dispatcher)
 def splitlines(a, keepends=None):
-    """
-    For each element in `a`, return a list of the lines in the
+    """For each element in `a`, return a list of the lines in the
     element, breaking at line boundaries.
-
+    
     Calls `str.splitlines` element-wise.
 
     Parameters
     ----------
     a : array_like of str or unicode
-
+        
     keepends : bool, optional
         Line breaks are not included in the resulting list unless
-        keepends is given and true.
+        keepends is given and true. (Default value = None)
 
     Returns
     -------
@@ -1462,33 +1720,52 @@
     See also
     --------
     str.splitlines
-
     """
     return _vec_string(
         a, object_, 'splitlines', _clean_args(keepends))
 
 
 def _startswith_dispatcher(a, prefix, start=None, end=None):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    prefix :
+        
+    start :
+         (Default value = None)
+    end :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (a,)
 
 
 @array_function_dispatch(_startswith_dispatcher)
 def startswith(a, prefix, start=0, end=None):
-    """
-    Returns a boolean array which is `True` where the string element
+    """Returns a boolean array which is `True` where the string element
     in `a` starts with `prefix`, otherwise `False`.
-
+    
     Calls `str.startswith` element-wise.
 
     Parameters
     ----------
     a : array_like of str or unicode
-
+        
     prefix : str
-
+        
     start, end : int, optional
         With optional `start`, test beginning at that position. With
         optional `end`, stop comparing at that position.
+    start :
+         (Default value = 0)
+    end :
+         (Default value = None)
 
     Returns
     -------
@@ -1498,7 +1775,6 @@
     See also
     --------
     str.startswith
-
     """
     return _vec_string(
         a, bool_, 'startswith', [prefix, start] + _clean_args(end))
@@ -1506,22 +1782,21 @@
 
 @array_function_dispatch(_strip_dispatcher)
 def strip(a, chars=None):
-    """
-    For each element in `a`, return a copy with the leading and
+    """For each element in `a`, return a copy with the leading and
     trailing characters removed.
-
+    
     Calls `str.strip` element-wise.
 
     Parameters
     ----------
     a : array-like of str or unicode
-
+        
     chars : str or unicode, optional
-       The `chars` argument is a string specifying the set of
-       characters to be removed. If omitted or None, the `chars`
-       argument defaults to removing whitespace. The `chars` argument
-       is not a prefix or suffix; rather, all combinations of its
-       values are stripped.
+        The `chars` argument is a string specifying the set of
+        characters to be removed. If omitted or None, the `chars`
+        argument defaults to removing whitespace. The `chars` argument
+        is not a prefix or suffix; rather, all combinations of its
+        values are stripped.
 
     Returns
     -------
@@ -1531,7 +1806,6 @@
     See also
     --------
     str.strip
-
     Examples
     --------
     >>> c = np.array(['aAaAaA', '  aA  ', 'abBABba'])
@@ -1543,7 +1817,6 @@
     array(['AaAaA', '  aA  ', 'bBABb'], dtype='<U7')
     >>> np.char.strip(c, 'A') # 'A' unstripped from c[1] because (unprinted) ws trails
     array(['aAaAa', '  aA  ', 'abBABba'], dtype='<U7')
-
     """
     a_arr = numpy.asarray(a)
     return _vec_string(a_arr, a_arr.dtype, 'strip', _clean_args(chars))
@@ -1551,12 +1824,11 @@
 
 @array_function_dispatch(_unary_op_dispatcher)
 def swapcase(a):
-    """
-    Return element-wise a copy of the string with
+    """Return element-wise a copy of the string with
     uppercase characters converted to lowercase and vice versa.
-
+    
     Calls `str.swapcase` element-wise.
-
+    
     For 8-bit strings, this method is locale-dependent.
 
     Parameters
@@ -1572,7 +1844,6 @@
     See also
     --------
     str.swapcase
-
     Examples
     --------
     >>> c=np.array(['a1B c','1b Ca','b Ca1','cA1b'],'S5'); c
@@ -1581,7 +1852,6 @@
     >>> np.char.swapcase(c)
     array(['A1b C', '1B cA', 'B cA1', 'Ca1B'],
         dtype='|S5')
-
     """
     a_arr = numpy.asarray(a)
     return _vec_string(a_arr, a_arr.dtype, 'swapcase')
@@ -1589,14 +1859,13 @@
 
 @array_function_dispatch(_unary_op_dispatcher)
 def title(a):
-    """
-    Return element-wise title cased version of string or unicode.
-
+    """Return element-wise title cased version of string or unicode.
+    
     Title case words start with uppercase characters, all remaining cased
     characters are lowercase.
-
+    
     Calls `str.title` element-wise.
-
+    
     For 8-bit strings, this method is locale-dependent.
 
     Parameters
@@ -1612,7 +1881,6 @@
     See also
     --------
     str.title
-
     Examples
     --------
     >>> c=np.array(['a1b c','1b ca','b ca1','ca1b'],'S5'); c
@@ -1621,33 +1889,47 @@
     >>> np.char.title(c)
     array(['A1B C', '1B Ca', 'B Ca1', 'Ca1B'],
         dtype='|S5')
-
     """
     a_arr = numpy.asarray(a)
     return _vec_string(a_arr, a_arr.dtype, 'title')
 
 
 def _translate_dispatcher(a, table, deletechars=None):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    table :
+        
+    deletechars :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     return (a,)
 
 
 @array_function_dispatch(_translate_dispatcher)
 def translate(a, table, deletechars=None):
-    """
-    For each element in `a`, return a copy of the string where all
+    """For each element in `a`, return a copy of the string where all
     characters occurring in the optional argument `deletechars` are
     removed, and the remaining characters have been mapped through the
     given translation table.
-
+    
     Calls `str.translate` element-wise.
 
     Parameters
     ----------
     a : array-like of str or unicode
-
+        
     table : str of length 256
-
+        
     deletechars : str
+         (Default value = None)
 
     Returns
     -------
@@ -1657,7 +1939,6 @@
     See also
     --------
     str.translate
-
     """
     a_arr = numpy.asarray(a)
     if issubclass(a_arr.dtype.type, unicode_):
@@ -1670,11 +1951,10 @@
 
 @array_function_dispatch(_unary_op_dispatcher)
 def upper(a):
-    """
-    Return an array with the elements converted to uppercase.
-
+    """Return an array with the elements converted to uppercase.
+    
     Calls `str.upper` element-wise.
-
+    
     For 8-bit strings, this method is locale-dependent.
 
     Parameters
@@ -1690,28 +1970,38 @@
     See also
     --------
     str.upper
-
     Examples
     --------
     >>> c = np.array(['a1b c', '1bca', 'bca1']); c
     array(['a1b c', '1bca', 'bca1'], dtype='<U5')
     >>> np.char.upper(c)
     array(['A1B C', '1BCA', 'BCA1'], dtype='<U5')
-
     """
     a_arr = numpy.asarray(a)
     return _vec_string(a_arr, a_arr.dtype, 'upper')
 
 
 def _zfill_dispatcher(a, width):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    width :
+        
+
+    Returns
+    -------
+
+    """
     return (a,)
 
 
 @array_function_dispatch(_zfill_dispatcher)
 def zfill(a, width):
-    """
-    Return the numeric string left-filled with zeros
-
+    """Return the numeric string left-filled with zeros
+    
     Calls `str.zfill` element-wise.
 
     Parameters
@@ -1729,7 +2019,6 @@
     See also
     --------
     str.zfill
-
     """
     a_arr = numpy.asarray(a)
     width_arr = numpy.asarray(width)
@@ -1740,12 +2029,11 @@
 
 @array_function_dispatch(_unary_op_dispatcher)
 def isnumeric(a):
-    """
-    For each element, return True if there are only numeric
+    """For each element, return True if there are only numeric
     characters in the element.
-
+    
     Calls `unicode.isnumeric` element-wise.
-
+    
     Numeric characters include digit characters, and all characters
     that have the Unicode numeric value property, e.g. ``U+2155,
     VULGAR FRACTION ONE FIFTH``.
@@ -1763,7 +2051,6 @@
     See also
     --------
     unicode.isnumeric
-
     """
     if _use_unicode(a) != unicode_:
         raise TypeError("isnumeric is only available for Unicode strings and arrays")
@@ -1772,12 +2059,11 @@
 
 @array_function_dispatch(_unary_op_dispatcher)
 def isdecimal(a):
-    """
-    For each element, return True if there are only decimal
+    """For each element, return True if there are only decimal
     characters in the element.
-
+    
     Calls `unicode.isdecimal` element-wise.
-
+    
     Decimal characters include digit characters, and all characters
     that can be used to form decimal-radix numbers,
     e.g. ``U+0660, ARABIC-INDIC DIGIT ZERO``.
@@ -1795,7 +2081,6 @@
     See also
     --------
     unicode.isdecimal
-
     """
     if _use_unicode(a) != unicode_:
         raise TypeError("isnumeric is only available for Unicode strings and arrays")
@@ -1804,39 +2089,64 @@
 
 @set_module('numpy')
 class chararray(ndarray):
-    """
-    chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0,
+    """chararray(shape, itemsize=1, unicode=False, buffer=None, offset=0,
               strides=None, order=None)
-
+    
     Provides a convenient view on arrays of string and unicode values.
-
+    
     .. note::
        The `chararray` class exists for backwards compatibility with
        Numarray, it is not recommended for new development. Starting from numpy
        1.4, if one needs arrays of strings, it is recommended to use arrays of
        `dtype` `object_`, `string_` or `unicode_`, and use the free functions
        in the `numpy.char` module for fast vectorized string operations.
-
+    
     Versus a regular NumPy array of type `str` or `unicode`, this
     class adds the following functionality:
-
+    
       1) values automatically have whitespace removed from the end
          when indexed
-
+    
       2) comparison operators automatically remove whitespace from the
          end when comparing values
-
+    
       3) vectorized string operations are provided as methods
          (e.g. `.endswith`) and infix operators (e.g. ``"+", "*", "%"``)
-
+    
     chararrays should be created using `numpy.char.array` or
     `numpy.char.asarray`, rather than this constructor directly.
-
+    
     This constructor creates the array, using `buffer` (with `offset`
     and `strides`) if it is not ``None``. If `buffer` is ``None``, then
     constructs a new array with `strides` in "C order", unless both
     ``len(shape) >= 2`` and ``order='F'``, in which case `strides`
     is in "Fortran order".
+
+    Parameters
+    ----------
+    shape : tuple
+        Shape of the array.
+    itemsize : int, optional
+        Length of each array element, in number of characters. Default is 1.
+    unicode : bool, optional
+        Are the array elements of type unicode (True) or string (False).
+        Default is False.
+    buffer : object exposing the buffer interface or str, optional
+        Memory address of the start of the array data.  Default is None,
+        in which case a new array is created.
+    offset : int, optional
+        Fixed stride displacement from the beginning of an axis?
+        Default is 0. Needs to be >=0.
+    strides : array_like of ints, optional
+        Strides for the array (see `ndarray.strides` for full description).
+        Default is None.
+    order : {'C', 'F'}, optional
+        The order in which the array data is stored in memory: 'C' ->
+        "row major" order (the default), 'F' -> "column major"
+        (Fortran) order.
+
+    Returns
+    -------
 
     Methods
     -------
@@ -1902,30 +2212,6 @@
     upper
     view
     zfill
-
-    Parameters
-    ----------
-    shape : tuple
-        Shape of the array.
-    itemsize : int, optional
-        Length of each array element, in number of characters. Default is 1.
-    unicode : bool, optional
-        Are the array elements of type unicode (True) or string (False).
-        Default is False.
-    buffer : object exposing the buffer interface or str, optional
-        Memory address of the start of the array data.  Default is None,
-        in which case a new array is created.
-    offset : int, optional
-        Fixed stride displacement from the beginning of an axis?
-        Default is 0. Needs to be >=0.
-    strides : array_like of ints, optional
-        Strides for the array (see `ndarray.strides` for full description).
-        Default is None.
-    order : {'C', 'F'}, optional
-        The order in which the array data is stored in memory: 'C' ->
-        "row major" order (the default), 'F' -> "column major"
-        (Fortran) order.
-
     Examples
     --------
     >>> charar = np.chararray((3, 3))
@@ -1934,14 +2220,13 @@
     chararray([[b'a', b'a', b'a'],
                [b'a', b'a', b'a'],
                [b'a', b'a', b'a']], dtype='|S1')
-
+    
     >>> charar = np.chararray(charar.shape, itemsize=5)
     >>> charar[:] = 'abc'
     >>> charar
     chararray([[b'abc', b'abc', b'abc'],
                [b'abc', b'abc', b'abc'],
                [b'abc', b'abc', b'abc']], dtype='|S5')
-
     """
     def __new__(subtype, shape, itemsize=1, unicode=False, buffer=None,
                 offset=0, strides=None, order='C'):
@@ -2120,11 +2405,22 @@
         return NotImplemented
 
     def argsort(self, axis=-1, kind=None, order=None):
-        """
-        Return the indices that sort the array lexicographically.
-
+        """Return the indices that sort the array lexicographically.
+        
         For full documentation see `numpy.argsort`, for which this method is
         in fact merely a "thin wrapper."
+
+        Parameters
+        ----------
+        axis :
+             (Default value = -1)
+        kind :
+             (Default value = None)
+        order :
+             (Default value = None)
+
+        Returns
+        -------
 
         Examples
         --------
@@ -2135,28 +2431,40 @@
         >>> c[c.argsort()]
         chararray(['1b ca', 'Ca1b', 'a1b c', 'b ca1'],
               dtype='|S5')
-
         """
         return self.__array__().argsort(axis, kind, order)
     argsort.__doc__ = ndarray.argsort.__doc__
 
     def capitalize(self):
-        """
-        Return a copy of `self` with only the first character of each element
+        """Return a copy of `self` with only the first character of each element
         capitalized.
 
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         See also
         --------
         char.capitalize
-
         """
         return asarray(capitalize(self))
 
     def center(self, width, fillchar=' '):
-        """
-        Return a copy of `self` with its elements centered in a
+        """Return a copy of `self` with its elements centered in a
         string of length `width`.
 
+        Parameters
+        ----------
+        width :
+            
+        fillchar :
+             (Default value = ' ')
+
+        Returns
+        -------
+
         See also
         --------
         center
@@ -2164,226 +2472,347 @@
         return asarray(center(self, width, fillchar))
 
     def count(self, sub, start=0, end=None):
-        """
-        Returns an array with the number of non-overlapping occurrences of
+        """Returns an array with the number of non-overlapping occurrences of
         substring `sub` in the range [`start`, `end`].
 
+        Parameters
+        ----------
+        sub :
+            
+        start :
+             (Default value = 0)
+        end :
+             (Default value = None)
+
+        Returns
+        -------
+
         See also
         --------
         char.count
-
         """
         return count(self, sub, start, end)
 
     def decode(self, encoding=None, errors=None):
-        """
-        Calls `str.decode` element-wise.
+        """Calls `str.decode` element-wise.
+
+        Parameters
+        ----------
+        encoding :
+             (Default value = None)
+        errors :
+             (Default value = None)
+
+        Returns
+        -------
 
         See also
         --------
         char.decode
-
         """
         return decode(self, encoding, errors)
 
     def encode(self, encoding=None, errors=None):
-        """
-        Calls `str.encode` element-wise.
+        """Calls `str.encode` element-wise.
+
+        Parameters
+        ----------
+        encoding :
+             (Default value = None)
+        errors :
+             (Default value = None)
+
+        Returns
+        -------
 
         See also
         --------
         char.encode
-
         """
         return encode(self, encoding, errors)
 
     def endswith(self, suffix, start=0, end=None):
-        """
-        Returns a boolean array which is `True` where the string element
+        """Returns a boolean array which is `True` where the string element
         in `self` ends with `suffix`, otherwise `False`.
 
+        Parameters
+        ----------
+        suffix :
+            
+        start :
+             (Default value = 0)
+        end :
+             (Default value = None)
+
+        Returns
+        -------
+
         See also
         --------
         char.endswith
-
         """
         return endswith(self, suffix, start, end)
 
     def expandtabs(self, tabsize=8):
-        """
-        Return a copy of each string element where all tab characters are
+        """Return a copy of each string element where all tab characters are
         replaced by one or more spaces.
 
+        Parameters
+        ----------
+        tabsize :
+             (Default value = 8)
+
+        Returns
+        -------
+
         See also
         --------
         char.expandtabs
-
         """
         return asarray(expandtabs(self, tabsize))
 
     def find(self, sub, start=0, end=None):
-        """
-        For each element, return the lowest index in the string where
+        """For each element, return the lowest index in the string where
         substring `sub` is found.
 
+        Parameters
+        ----------
+        sub :
+            
+        start :
+             (Default value = 0)
+        end :
+             (Default value = None)
+
+        Returns
+        -------
+
         See also
         --------
         char.find
-
         """
         return find(self, sub, start, end)
 
     def index(self, sub, start=0, end=None):
-        """
-        Like `find`, but raises `ValueError` when the substring is not found.
+        """Like `find`, but raises `ValueError` when the substring is not found.
+
+        Parameters
+        ----------
+        sub :
+            
+        start :
+             (Default value = 0)
+        end :
+             (Default value = None)
+
+        Returns
+        -------
 
         See also
         --------
         char.index
-
         """
         return index(self, sub, start, end)
 
     def isalnum(self):
-        """
-        Returns true for each element if all characters in the string
+        """Returns true for each element if all characters in the string
         are alphanumeric and there is at least one character, false
         otherwise.
 
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         See also
         --------
         char.isalnum
-
         """
         return isalnum(self)
 
     def isalpha(self):
-        """
-        Returns true for each element if all characters in the string
+        """Returns true for each element if all characters in the string
         are alphabetic and there is at least one character, false
         otherwise.
 
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         See also
         --------
         char.isalpha
-
         """
         return isalpha(self)
 
     def isdigit(self):
-        """
-        Returns true for each element if all characters in the string are
+        """Returns true for each element if all characters in the string are
         digits and there is at least one character, false otherwise.
 
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         See also
         --------
         char.isdigit
-
         """
         return isdigit(self)
 
     def islower(self):
-        """
-        Returns true for each element if all cased characters in the
+        """Returns true for each element if all cased characters in the
         string are lowercase and there is at least one cased character,
         false otherwise.
 
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         See also
         --------
         char.islower
-
         """
         return islower(self)
 
     def isspace(self):
-        """
-        Returns true for each element if there are only whitespace
+        """Returns true for each element if there are only whitespace
         characters in the string and there is at least one character,
         false otherwise.
 
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         See also
         --------
         char.isspace
-
         """
         return isspace(self)
 
     def istitle(self):
-        """
-        Returns true for each element if the element is a titlecased
+        """Returns true for each element if the element is a titlecased
         string and there is at least one character, false otherwise.
 
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         See also
         --------
         char.istitle
-
         """
         return istitle(self)
 
     def isupper(self):
-        """
-        Returns true for each element if all cased characters in the
+        """Returns true for each element if all cased characters in the
         string are uppercase and there is at least one character, false
         otherwise.
 
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         See also
         --------
         char.isupper
-
         """
         return isupper(self)
 
     def join(self, seq):
-        """
-        Return a string which is the concatenation of the strings in the
+        """Return a string which is the concatenation of the strings in the
         sequence `seq`.
 
+        Parameters
+        ----------
+        seq :
+            
+
+        Returns
+        -------
+
         See also
         --------
         char.join
-
         """
         return join(self, seq)
 
     def ljust(self, width, fillchar=' '):
-        """
-        Return an array with the elements of `self` left-justified in a
+        """Return an array with the elements of `self` left-justified in a
         string of length `width`.
 
+        Parameters
+        ----------
+        width :
+            
+        fillchar :
+             (Default value = ' ')
+
+        Returns
+        -------
+
         See also
         --------
         char.ljust
-
         """
         return asarray(ljust(self, width, fillchar))
 
     def lower(self):
-        """
-        Return an array with the elements of `self` converted to
+        """Return an array with the elements of `self` converted to
         lowercase.
 
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         See also
         --------
         char.lower
-
         """
         return asarray(lower(self))
 
     def lstrip(self, chars=None):
-        """
-        For each element in `self`, return a copy with the leading characters
+        """For each element in `self`, return a copy with the leading characters
         removed.
 
+        Parameters
+        ----------
+        chars :
+             (Default value = None)
+
+        Returns
+        -------
+
         See also
         --------
         char.lstrip
-
         """
         return asarray(lstrip(self, chars))
 
     def partition(self, sep):
-        """
-        Partition each element in `self` around `sep`.
+        """Partition each element in `self` around `sep`.
+
+        Parameters
+        ----------
+        sep :
+            
+
+        Returns
+        -------
 
         See also
         --------
@@ -2392,57 +2821,102 @@
         return asarray(partition(self, sep))
 
     def replace(self, old, new, count=None):
-        """
-        For each element in `self`, return a copy of the string with all
+        """For each element in `self`, return a copy of the string with all
         occurrences of substring `old` replaced by `new`.
 
+        Parameters
+        ----------
+        old :
+            
+        new :
+            
+        count :
+             (Default value = None)
+
+        Returns
+        -------
+
         See also
         --------
         char.replace
-
         """
         return asarray(replace(self, old, new, count))
 
     def rfind(self, sub, start=0, end=None):
-        """
-        For each element in `self`, return the highest index in the string
+        """For each element in `self`, return the highest index in the string
         where substring `sub` is found, such that `sub` is contained
         within [`start`, `end`].
 
+        Parameters
+        ----------
+        sub :
+            
+        start :
+             (Default value = 0)
+        end :
+             (Default value = None)
+
+        Returns
+        -------
+
         See also
         --------
         char.rfind
-
         """
         return rfind(self, sub, start, end)
 
     def rindex(self, sub, start=0, end=None):
-        """
-        Like `rfind`, but raises `ValueError` when the substring `sub` is
+        """Like `rfind`, but raises `ValueError` when the substring `sub` is
         not found.
 
+        Parameters
+        ----------
+        sub :
+            
+        start :
+             (Default value = 0)
+        end :
+             (Default value = None)
+
+        Returns
+        -------
+
         See also
         --------
         char.rindex
-
         """
         return rindex(self, sub, start, end)
 
     def rjust(self, width, fillchar=' '):
-        """
-        Return an array with the elements of `self`
+        """Return an array with the elements of `self`
         right-justified in a string of length `width`.
 
+        Parameters
+        ----------
+        width :
+            
+        fillchar :
+             (Default value = ' ')
+
+        Returns
+        -------
+
         See also
         --------
         char.rjust
-
         """
         return asarray(rjust(self, width, fillchar))
 
     def rpartition(self, sep):
-        """
-        Partition each element in `self` around `sep`.
+        """Partition each element in `self` around `sep`.
+
+        Parameters
+        ----------
+        sep :
+            
+
+        Returns
+        -------
 
         See also
         --------
@@ -2451,226 +2925,282 @@
         return asarray(rpartition(self, sep))
 
     def rsplit(self, sep=None, maxsplit=None):
-        """
-        For each element in `self`, return a list of the words in
+        """For each element in `self`, return a list of the words in
         the string, using `sep` as the delimiter string.
 
+        Parameters
+        ----------
+        sep :
+             (Default value = None)
+        maxsplit :
+             (Default value = None)
+
+        Returns
+        -------
+
         See also
         --------
         char.rsplit
-
         """
         return rsplit(self, sep, maxsplit)
 
     def rstrip(self, chars=None):
-        """
-        For each element in `self`, return a copy with the trailing
+        """For each element in `self`, return a copy with the trailing
         characters removed.
 
+        Parameters
+        ----------
+        chars :
+             (Default value = None)
+
+        Returns
+        -------
+
         See also
         --------
         char.rstrip
-
         """
         return asarray(rstrip(self, chars))
 
     def split(self, sep=None, maxsplit=None):
-        """
-        For each element in `self`, return a list of the words in the
+        """For each element in `self`, return a list of the words in the
         string, using `sep` as the delimiter string.
 
+        Parameters
+        ----------
+        sep :
+             (Default value = None)
+        maxsplit :
+             (Default value = None)
+
+        Returns
+        -------
+
         See also
         --------
         char.split
-
         """
         return split(self, sep, maxsplit)
 
     def splitlines(self, keepends=None):
-        """
-        For each element in `self`, return a list of the lines in the
+        """For each element in `self`, return a list of the lines in the
         element, breaking at line boundaries.
 
+        Parameters
+        ----------
+        keepends :
+             (Default value = None)
+
+        Returns
+        -------
+
         See also
         --------
         char.splitlines
-
         """
         return splitlines(self, keepends)
 
     def startswith(self, prefix, start=0, end=None):
-        """
-        Returns a boolean array which is `True` where the string element
+        """Returns a boolean array which is `True` where the string element
         in `self` starts with `prefix`, otherwise `False`.
 
+        Parameters
+        ----------
+        prefix :
+            
+        start :
+             (Default value = 0)
+        end :
+             (Default value = None)
+
+        Returns
+        -------
+
         See also
         --------
         char.startswith
-
         """
         return startswith(self, prefix, start, end)
 
     def strip(self, chars=None):
-        """
-        For each element in `self`, return a copy with the leading and
+        """For each element in `self`, return a copy with the leading and
         trailing characters removed.
 
+        Parameters
+        ----------
+        chars :
+             (Default value = None)
+
+        Returns
+        -------
+
         See also
         --------
         char.strip
-
         """
         return asarray(strip(self, chars))
 
     def swapcase(self):
-        """
-        For each element in `self`, return a copy of the string with
+        """For each element in `self`, return a copy of the string with
         uppercase characters converted to lowercase and vice versa.
 
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         See also
         --------
         char.swapcase
-
         """
         return asarray(swapcase(self))
 
     def title(self):
-        """
-        For each element in `self`, return a titlecased version of the
+        """For each element in `self`, return a titlecased version of the
         string: words start with uppercase characters, all remaining cased
         characters are lowercase.
 
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         See also
         --------
         char.title
-
         """
         return asarray(title(self))
 
     def translate(self, table, deletechars=None):
-        """
-        For each element in `self`, return a copy of the string where
+        """For each element in `self`, return a copy of the string where
         all characters occurring in the optional argument
         `deletechars` are removed, and the remaining characters have
         been mapped through the given translation table.
 
+        Parameters
+        ----------
+        table :
+            
+        deletechars :
+             (Default value = None)
+
+        Returns
+        -------
+
         See also
         --------
         char.translate
-
         """
         return asarray(translate(self, table, deletechars))
 
     def upper(self):
-        """
-        Return an array with the elements of `self` converted to
+        """Return an array with the elements of `self` converted to
         uppercase.
 
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         See also
         --------
         char.upper
-
         """
         return asarray(upper(self))
 
     def zfill(self, width):
-        """
-        Return the numeric string left-filled with zeros in a string of
+        """Return the numeric string left-filled with zeros in a string of
         length `width`.
 
+        Parameters
+        ----------
+        width :
+            
+
+        Returns
+        -------
+
         See also
         --------
         char.zfill
-
         """
         return asarray(zfill(self, width))
 
     def isnumeric(self):
-        """
-        For each element in `self`, return True if there are only
+        """For each element in `self`, return True if there are only
         numeric characters in the element.
 
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         See also
         --------
         char.isnumeric
-
         """
         return isnumeric(self)
 
     def isdecimal(self):
-        """
-        For each element in `self`, return True if there are only
+        """For each element in `self`, return True if there are only
         decimal characters in the element.
 
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         See also
         --------
         char.isdecimal
-
         """
         return isdecimal(self)
 
 
 def array(obj, itemsize=None, copy=True, unicode=None, order=None):
-    """
-    Create a `chararray`.
-
+    """Create a `chararray`.
+    
     .. note::
        This class is provided for numarray backward-compatibility.
        New code (not concerned with numarray compatibility) should use
        arrays of type `string_` or `unicode_` and use the free functions
        in :mod:`numpy.char <numpy.core.defchararray>` for fast
        vectorized string operations instead.
-
+    
     Versus a regular NumPy array of type `str` or `unicode`, this
     class adds the following functionality:
-
+    
       1) values automatically have whitespace removed from the end
          when indexed
-
+    
       2) comparison operators automatically remove whitespace from the
          end when comparing values
-
+    
       3) vectorized string operations are provided as methods
          (e.g. `str.endswith`) and infix operators (e.g. ``+, *, %``)
 
     Parameters
     ----------
-    obj : array of str or unicode-like
-
-    itemsize : int, optional
-        `itemsize` is the number of characters per scalar in the
-        resulting array.  If `itemsize` is None, and `obj` is an
-        object array or a Python list, the `itemsize` will be
-        automatically determined.  If `itemsize` is provided and `obj`
-        is of type str or unicode, then the `obj` string will be
-        chunked into `itemsize` pieces.
-
-    copy : bool, optional
-        If true (default), then the object is copied.  Otherwise, a copy
-        will only be made if __array__ returns a copy, if obj is a
-        nested sequence, or if a copy is needed to satisfy any of the other
-        requirements (`itemsize`, unicode, `order`, etc.).
-
-    unicode : bool, optional
-        When true, the resulting `chararray` can contain Unicode
-        characters, when false only 8-bit characters.  If unicode is
-        None and `obj` is one of the following:
-
-          - a `chararray`,
-          - an ndarray of type `str` or `unicode`
-          - a Python str or unicode object,
-
-        then the unicode setting of the output array will be
-        automatically determined.
-
-    order : {'C', 'F', 'A'}, optional
-        Specify the order of the array.  If order is 'C' (default), then the
-        array will be in C-contiguous order (last-index varies the
-        fastest).  If order is 'F', then the returned array
-        will be in Fortran-contiguous order (first-index varies the
-        fastest).  If order is 'A', then the returned array may
-        be in any order (either C-, Fortran-contiguous, or even
-        discontiguous).
+    obj :
+        
+    itemsize :
+         (Default value = None)
+    copy :
+         (Default value = True)
+    unicode :
+         (Default value = None)
+    order :
+         (Default value = None)
+
+    Returns
+    -------
+
+    
     """
     if isinstance(obj, (bytes, str)):
         if unicode is None:
@@ -2744,52 +3274,36 @@
 
 
 def asarray(obj, itemsize=None, unicode=None, order=None):
-    """
-    Convert the input to a `chararray`, copying the data only if
+    """Convert the input to a `chararray`, copying the data only if
     necessary.
-
+    
     Versus a regular NumPy array of type `str` or `unicode`, this
     class adds the following functionality:
-
+    
       1) values automatically have whitespace removed from the end
          when indexed
-
+    
       2) comparison operators automatically remove whitespace from the
          end when comparing values
-
+    
       3) vectorized string operations are provided as methods
          (e.g. `str.endswith`) and infix operators (e.g. ``+``, ``*``,``%``)
 
     Parameters
     ----------
-    obj : array of str or unicode-like
-
-    itemsize : int, optional
-        `itemsize` is the number of characters per scalar in the
-        resulting array.  If `itemsize` is None, and `obj` is an
-        object array or a Python list, the `itemsize` will be
-        automatically determined.  If `itemsize` is provided and `obj`
-        is of type str or unicode, then the `obj` string will be
-        chunked into `itemsize` pieces.
-
-    unicode : bool, optional
-        When true, the resulting `chararray` can contain Unicode
-        characters, when false only 8-bit characters.  If unicode is
-        None and `obj` is one of the following:
-
-          - a `chararray`,
-          - an ndarray of type `str` or 'unicode`
-          - a Python str or unicode object,
-
-        then the unicode setting of the output array will be
-        automatically determined.
-
-    order : {'C', 'F'}, optional
-        Specify the order of the array.  If order is 'C' (default), then the
-        array will be in C-contiguous order (last-index varies the
-        fastest).  If order is 'F', then the returned array
-        will be in Fortran-contiguous order (first-index varies the
-        fastest).
+    obj :
+        
+    itemsize :
+         (Default value = None)
+    unicode :
+         (Default value = None)
+    order :
+         (Default value = None)
+
+    Returns
+    -------
+
+    
     """
     return array(obj, itemsize, copy=False,
                  unicode=unicode, order=order)
