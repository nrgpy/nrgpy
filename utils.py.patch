# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tqdm/utils.py
+++ b/..//venv/lib/python3.8/site-packages/tqdm/utils.py
@@ -64,6 +64,7 @@
             from collections import MutableMapping
 
             class _OrderedDict(dict, MutableMapping):
+                """ """
                 # Methods with direct access to underlying attributes
                 def __init__(self, *args, **kwds):
                     if len(args) > 1:
@@ -74,6 +75,7 @@
                     self.update(*args, **kwds)
 
                 def clear(self):
+                    """ """
                     del self._keys[:]
                     dict.clear(self)
 
@@ -93,6 +95,7 @@
                     return reversed(self._keys)
 
                 def popitem(self):
+                    """ """
                     if not self:
                         raise KeyError
                     key = self._keys.pop()
@@ -118,10 +121,24 @@
                     return '%s({%s})' % (self.__class__.__name__, pairs)
 
                 def copy(self):
+                    """ """
                     return self.__class__(self)
 
                 @classmethod
                 def fromkeys(cls, iterable, value=None):
+                    """
+
+                    Parameters
+                    ----------
+                    iterable :
+                        
+                    value :
+                         (Default value = None)
+
+                    Returns
+                    -------
+
+                    """
                     d = cls()
                     for key in iterable:
                         d[key] = value
@@ -129,11 +146,7 @@
 
 
 class FormatReplace(object):
-    """
-    >>> a = FormatReplace('something')
-    >>> "{:5d}".format(a)
-    'something'
-    """
+    """ """
     def __init__(self, replace=''):
         self.replace = replace
         self.format_called = 0
@@ -165,6 +178,7 @@
 
 
 class ObjectWrapper(object):
+    """ """
     def __getattr__(self, name):
         return getattr(self._wrapped, name)
 
@@ -172,14 +186,36 @@
         return setattr(self._wrapped, name, value)
 
     def wrapper_getattr(self, name):
-        """Actual `self.getattr` rather than self._wrapped.getattr"""
+        """Actual `self.getattr` rather than self._wrapped.getattr
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         try:
             return object.__getattr__(self, name)
         except AttributeError:  # py2
             return getattr(self, name)
 
     def wrapper_setattr(self, name, value):
-        """Actual `self.setattr` rather than self._wrapped.setattr"""
+        """Actual `self.setattr` rather than self._wrapped.setattr
+
+        Parameters
+        ----------
+        name :
+            
+        value :
+            
+
+        Returns
+        -------
+
+        """
         return object.__setattr__(self, name, value)
 
     def __init__(self, wrapped):
@@ -190,9 +226,15 @@
 
 
 class SimpleTextIOWrapper(ObjectWrapper):
-    """
-    Change only `.write()` of the wrapped object by encoding the passed
+    """Change only `.write()` of the wrapped object by encoding the passed
     value and passing the result to the wrapped object's `.write()` method.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     # pylint: disable=too-few-public-methods
     def __init__(self, wrapped, encoding):
@@ -200,8 +242,16 @@
         self.wrapper_setattr('encoding', encoding)
 
     def write(self, s):
-        """
-        Encode `s` and pass to the wrapped object's `.write()` method.
+        """Encode `s` and pass to the wrapped object's `.write()` method.
+
+        Parameters
+        ----------
+        s :
+            
+
+        Returns
+        -------
+
         """
         return self._wrapped.write(s.encode(self.wrapper_getattr('encoding')))
 
@@ -210,15 +260,36 @@
 
 
 class DisableOnWriteError(ObjectWrapper):
-    """
-    Disable the given `tqdm_instance` upon `write()` or `flush()` errors.
-    """
+    """Disable the given `tqdm_instance` upon `write()` or `flush()` errors."""
     @staticmethod
     def disable_on_exception(tqdm_instance, func):
-        """
-        Quietly set `tqdm_instance.miniters=inf` if `func` raises `errno=5`.
+        """Quietly set `tqdm_instance.miniters=inf` if `func` raises `errno=5`.
+
+        Parameters
+        ----------
+        tqdm_instance :
+            
+        func :
+            
+
+        Returns
+        -------
+
         """
         def inner(*args, **kwargs):
+            """
+
+            Parameters
+            ----------
+            *args :
+                
+            **kwargs :
+                
+
+            Returns
+            -------
+
+            """
             try:
                 return func(*args, **kwargs)
             except (IOError, OSError) as e:
@@ -246,15 +317,36 @@
 
 class CallbackIOWrapper(ObjectWrapper):
     def __init__(self, callback, stream, method="read"):
-        """
-        Wrap a given `file`-like object's `read()` or `write()` to report
+    """Wrap a given `file`-like object's `read()` or `write()` to report
         lengths to the given `callback`
-        """
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
         super(CallbackIOWrapper, self).__init__(stream)
         func = getattr(stream, method)
         if method == "write":
             @wraps(func)
             def write(data, *args, **kwargs):
+                """
+
+                Parameters
+                ----------
+                data :
+                    
+                *args :
+                    
+                **kwargs :
+                    
+
+                Returns
+                -------
+
+                """
                 res = func(data, *args, **kwargs)
                 callback(len(data))
                 return res
@@ -262,6 +354,19 @@
         elif method == "read":
             @wraps(func)
             def read(*args, **kwargs):
+                """
+
+                Parameters
+                ----------
+                *args :
+                    
+                **kwargs :
+                    
+
+                Returns
+                -------
+
+                """
                 data = func(*args, **kwargs)
                 callback(len(data))
                 return data
@@ -271,6 +376,17 @@
 
 
 def _is_utf(encoding):
+    """
+
+    Parameters
+    ----------
+    encoding :
+        
+
+    Returns
+    -------
+
+    """
     try:
         u'\u2588\u2589'.encode(encoding)
     except UnicodeEncodeError:  # pragma: no cover
@@ -285,6 +401,17 @@
 
 
 def _supports_unicode(fp):
+    """
+
+    Parameters
+    ----------
+    fp :
+        
+
+    Returns
+    -------
+
+    """
     try:
         return _is_utf(fp.encoding)
     except AttributeError:
@@ -292,6 +419,17 @@
 
 
 def _is_ascii(s):
+    """
+
+    Parameters
+    ----------
+    s :
+        
+
+    Returns
+    -------
+
+    """
     if isinstance(s, str):
         for c in s:
             if ord(c) > 255:
@@ -302,8 +440,15 @@
 
 def _screen_shape_wrapper():  # pragma: no cover
     """
-    Return a function which returns console dimensions (width, height).
-    Supported: linux, osx, windows, cygwin.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+    type
+        Supported: linux, osx, windows, cygwin.
+
     """
     _screen_shape = None
     if IS_WIN:
@@ -316,6 +461,17 @@
 
 
 def _screen_shape_windows(fp):  # pragma: no cover
+    """
+
+    Parameters
+    ----------
+    fp :
+        
+
+    Returns
+    -------
+
+    """
     try:
         from ctypes import windll, create_string_buffer
         import struct
@@ -340,7 +496,17 @@
 
 
 def _screen_shape_tput(*_):  # pragma: no cover
-    """cygwin xterm (windows)"""
+    """cygwin xterm (windows)
+
+    Parameters
+    ----------
+    *_ :
+        
+
+    Returns
+    -------
+
+    """
     try:
         import shlex
         return [int(subprocess.check_call(shlex.split('tput ' + i))) - 1
@@ -351,6 +517,17 @@
 
 
 def _screen_shape_linux(fp):  # pragma: no cover
+    """
+
+    Parameters
+    ----------
+    fp :
+        
+
+    Returns
+    -------
+
+    """
 
     try:
         from termios import TIOCGWINSZ
@@ -371,8 +548,15 @@
 
 def _environ_cols_wrapper():  # pragma: no cover
     """
-    Return a function which returns console width.
-    Supported: linux, osx, windows, cygwin.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+    type
+        Supported: linux, osx, windows, cygwin.
+
     """
     warn("Use `_screen_shape_wrapper()(file)[0]` instead of"
          " `_environ_cols_wrapper()(file)`", DeprecationWarning, stacklevel=2)
@@ -382,12 +566,24 @@
 
     @wraps(shape)
     def inner(fp):
+        """
+
+        Parameters
+        ----------
+        fp :
+            
+
+        Returns
+        -------
+
+        """
         return shape(fp)[0]
 
     return inner
 
 
 def _term_move_up():  # pragma: no cover
+    """ """
     return '' if (os.name == 'nt') and (colorama is None) else '\x1b[A'
 
 
@@ -398,21 +594,50 @@
     _text_width = len
 else:
     def _text_width(s):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+
+        Returns
+        -------
+
+        """
         return sum(
             2 if east_asian_width(ch) in 'FW' else 1 for ch in _unicode(s))
 
 
 def disp_len(data):
-    """
-    Returns the real on-screen length of a string which may contain
+    """Returns the real on-screen length of a string which may contain
     ANSI control codes and wide chars.
+
+    Parameters
+    ----------
+    data :
+        
+
+    Returns
+    -------
+
     """
     return _text_width(RE_ANSI.sub('', data))
 
 
 def disp_trim(data, length):
-    """
-    Trim a string which may contain ANSI control characters.
+    """Trim a string which may contain ANSI control characters.
+
+    Parameters
+    ----------
+    data :
+        
+    length :
+        
+
+    Returns
+    -------
+
     """
     if len(data) == disp_len(data):
         return data[:length]
