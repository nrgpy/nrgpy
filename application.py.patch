# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/application.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/application.py
@@ -88,6 +88,21 @@
 class ProfileAwareConfigLoader(PyFileConfigLoader):
     """A Python file config loader that is aware of IPython profiles."""
     def load_subconfig(self, fname, path=None, profile=None):
+        """
+
+        Parameters
+        ----------
+        fname :
+            
+        path :
+             (Default value = None)
+        profile :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if profile is not None:
             try:
                 profile_dir = ProfileDir.find_profile_dir_by_name(
@@ -100,6 +115,7 @@
         return super(ProfileAwareConfigLoader, self).load_subconfig(fname, path=path)
 
 class BaseIPythonApplication(Application):
+    """ """
 
     name = u'ipython'
     description = Unicode(u'IPython: an enhanced interactive Python shell.')
@@ -119,9 +135,21 @@
     config_file_name = Unicode()
     @default('config_file_name')
     def _config_file_name_default(self):
+        """ """
         return self.name.replace('-','_') + u'_config.py'
     @observe('config_file_name')
     def _config_file_name_changed(self, change):
+        """
+
+        Parameters
+        ----------
+        change :
+            
+
+        Returns
+        -------
+
+        """
         if change['new'] != change['old']:
             self.config_file_specified.add(change['new'])
 
@@ -133,6 +161,7 @@
     config_file_paths = List(Unicode())
     @default('config_file_paths')
     def _config_file_paths_default(self):
+        """ """
         return [os.getcwd()]
 
     extra_config_file = Unicode(
@@ -142,6 +171,17 @@
     """).tag(config=True)
     @observe('extra_config_file')
     def _extra_config_file_changed(self, change):
+        """
+
+        Parameters
+        ----------
+        change :
+            
+
+        Returns
+        -------
+
+        """
         old = change['old']
         new = change['new']
         try:
@@ -157,6 +197,17 @@
     
     @observe('profile')
     def _profile_changed(self, change):
+        """
+
+        Parameters
+        ----------
+        change :
+            
+
+        Returns
+        -------
+
+        """
         self.builtin_profile_dir = os.path.join(
                 get_ipython_package_dir(), u'config', u'profile', change['new']
         )
@@ -171,6 +222,7 @@
     ).tag(config=True)
     @default('ipython_dir')
     def _ipython_dir_default(self):
+        """ """
         d = get_ipython_dir()
         self._ipython_dir_changed({
             'name': 'ipython_dir',
@@ -183,6 +235,7 @@
     profile_dir = Instance(ProfileDir, allow_none=True)
     @default('profile_dir')
     def _profile_dir_default(self):
+        """ """
         # avoid recursion
         if self._in_init_profile_dir:
             return
@@ -200,6 +253,7 @@
     config_files = List(Unicode())
     @default('config_files')
     def _config_files_default(self):
+        """ """
         return [self.config_file_name]
 
     copy_config_files = Bool(False,
@@ -235,6 +289,19 @@
     deprecated_subcommands = {}
     
     def initialize_subcommand(self, subc, argv=None):
+        """
+
+        Parameters
+        ----------
+        subc :
+            
+        argv :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if subc in self.deprecated_subcommands:
             self.log.warning("Subcommand `ipython {sub}` is deprecated and will be removed "
                              "in future versions.".format(sub=subc))
@@ -247,6 +314,7 @@
         self.crash_handler = self.crash_handler_class(self)
         sys.excepthook = self.excepthook
         def unset_crashhandler():
+            """ """
             sys.excepthook = sys.__excepthook__
         atexit.register(unset_crashhandler)
     
@@ -255,6 +323,19 @@
         
         set self.verbose_crash=True to use our full crashhandler, instead of
         a regular traceback with a short message (crash_handler_lite)
+
+        Parameters
+        ----------
+        etype :
+            
+        evalue :
+            
+        tb :
+            
+
+        Returns
+        -------
+
         """
         
         if self.verbose_crash:
@@ -264,6 +345,17 @@
 
     @observe('ipython_dir')
     def _ipython_dir_changed(self, change):
+        """
+
+        Parameters
+        ----------
+        change :
+            
+
+        Returns
+        -------
+
+        """
         old = change['old']
         new = change['new']
         if old is not Undefined:
@@ -288,20 +380,29 @@
 
     def load_config_file(self, suppress_errors=IPYTHON_SUPPRESS_CONFIG_ERRORS):
         """Load the config file.
-
+        
         By default, errors in loading config are handled, and a warning
         printed on screen. For testing, the suppress_errors option is set
         to False, so errors will make tests fail.
-
+        
         `suppress_errors` default value is to be `None` in which case the
         behavior default to the one of `traitlets.Application`.
-
+        
         The default value can be set :
            - to `False` by setting 'IPYTHON_SUPPRESS_CONFIG_ERRORS' environment variable to '0', or 'false' (case insensitive).
            - to `True` by setting 'IPYTHON_SUPPRESS_CONFIG_ERRORS' environment variable to '1' or 'true' (case insensitive).
            - to `None` by setting 'IPYTHON_SUPPRESS_CONFIG_ERRORS' environment variable to '' (empty string) or leaving it unset.
-
+        
         Any other value are invalid, and will make IPython exit with a non-zero return code.
+
+        Parameters
+        ----------
+        suppress_errors :
+             (Default value = IPYTHON_SUPPRESS_CONFIG_ERRORS)
+
+        Returns
+        -------
+
         """
 
 
@@ -446,6 +547,17 @@
 
     @catch_config_error
     def initialize(self, argv=None):
+        """
+
+        Parameters
+        ----------
+        argv :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         # don't hook up crash handler before parsing command-line
         self.parse_command_line(argv)
         self.init_crash_handler()
