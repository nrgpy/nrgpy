# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/datetimes/test_to_period.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/datetimes/test_to_period.py
@@ -20,7 +20,9 @@
 
 
 class TestToPeriod:
+    """ """
     def test_dti_to_period(self):
+        """ """
         dti = date_range(start="1/1/2005", end="12/1/2005", freq="M")
         pi1 = dti.to_period()
         pi2 = dti.to_period(freq="D")
@@ -44,6 +46,17 @@
 
     @pytest.mark.parametrize("month", MONTHS)
     def test_to_period_quarterly(self, month):
+        """
+
+        Parameters
+        ----------
+        month :
+            
+
+        Returns
+        -------
+
+        """
         # make sure we can make the round trip
         freq = f"Q-{month}"
         rng = period_range("1989Q3", "1991Q3", freq=freq)
@@ -53,17 +66,40 @@
 
     @pytest.mark.parametrize("off", ["BQ", "QS", "BQS"])
     def test_to_period_quarterlyish(self, off):
+        """
+
+        Parameters
+        ----------
+        off :
+            
+
+        Returns
+        -------
+
+        """
         rng = date_range("01-Jan-2012", periods=8, freq=off)
         prng = rng.to_period()
         assert prng.freq == "Q-DEC"
 
     @pytest.mark.parametrize("off", ["BA", "AS", "BAS"])
     def test_to_period_annualish(self, off):
+        """
+
+        Parameters
+        ----------
+        off :
+            
+
+        Returns
+        -------
+
+        """
         rng = date_range("01-Jan-2012", periods=8, freq=off)
         prng = rng.to_period()
         assert prng.freq == "A-DEC"
 
     def test_to_period_monthish(self):
+        """ """
         offsets = ["MS", "BM"]
         for off in offsets:
             rng = date_range("01-Jan-2012", periods=8, freq=off)
@@ -78,6 +114,7 @@
             date_range("01-Jan-2012", periods=8, freq="EOM")
 
     def test_to_period_infer(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/33358
         rng = date_range(
             start="2019-12-22 06:40:00+00:00",
@@ -100,6 +137,7 @@
         tm.assert_index_equal(pi1, pi2)
 
     def test_period_dt64_round_trip(self):
+        """ """
         dti = date_range("1/1/2000", "1/7/2002", freq="B")
         pi = dti.to_period()
         tm.assert_index_equal(pi.to_timestamp(), dti)
@@ -109,6 +147,7 @@
         tm.assert_index_equal(pi.to_timestamp(), dti)
 
     def test_to_period_millisecond(self):
+        """ """
         index = DatetimeIndex(
             [
                 Timestamp("2007-01-01 10:11:12.123456Z"),
@@ -124,6 +163,7 @@
         assert period[1] == Period("2007-01-01 10:11:13.789Z", "L")
 
     def test_to_period_microsecond(self):
+        """ """
         index = DatetimeIndex(
             [
                 Timestamp("2007-01-01 10:11:12.123456Z"),
@@ -143,6 +183,17 @@
         ["US/Eastern", pytz.utc, tzlocal(), "dateutil/US/Eastern", dateutil.tz.tzutc()],
     )
     def test_to_period_tz(self, tz):
+        """
+
+        Parameters
+        ----------
+        tz :
+            
+
+        Returns
+        -------
+
+        """
         ts = date_range("1/1/2000", "2/1/2000", tz=tz)
 
         with tm.assert_produces_warning(UserWarning):
@@ -162,6 +213,17 @@
 
     @pytest.mark.parametrize("tz", ["Etc/GMT-1", "Etc/GMT+1"])
     def test_to_period_tz_utc_offset_consistency(self, tz):
+        """
+
+        Parameters
+        ----------
+        tz :
+            
+
+        Returns
+        -------
+
+        """
         # GH#22905
         ts = date_range("1/1/2000", "2/1/2000", tz="Etc/GMT-1")
         with tm.assert_produces_warning(UserWarning):
@@ -170,6 +232,7 @@
             assert result == expected
 
     def test_to_period_nofreq(self):
+        """ """
         idx = DatetimeIndex(["2000-01-01", "2000-01-02", "2000-01-04"])
         msg = "You must pass a freq argument as current index has none."
         with pytest.raises(ValueError, match=msg):
