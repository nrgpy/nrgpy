# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/distutils/from_template.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/distutils/from_template.py
@@ -56,9 +56,19 @@
 function_start_re = re.compile(r'\n     (\$|\*)\s*function\b', re.I)
 
 def parse_structure(astr):
-    """ Return a list of tuples for each function or subroutine each
-    tuple is the start and end of a subroutine or function to be
-    expanded.
+    """
+
+    Parameters
+    ----------
+    astr :
+        
+
+    Returns
+    -------
+    type
+        tuple is the start and end of a subroutine or function to be
+        expanded.
+
     """
 
     spanlist = []
@@ -87,6 +97,17 @@
 list_re = re.compile(r"<\s*((.*?))\s*>")
 
 def find_repl_patterns(astr):
+    """
+
+    Parameters
+    ----------
+    astr :
+        
+
+    Returns
+    -------
+
+    """
     reps = named_re.findall(astr)
     names = {}
     for rep in reps:
@@ -97,12 +118,34 @@
     return names
 
 def find_and_remove_repl_patterns(astr):
+    """
+
+    Parameters
+    ----------
+    astr :
+        
+
+    Returns
+    -------
+
+    """
     names = find_repl_patterns(astr)
     astr = re.subn(named_re, '', astr)[0]
     return astr, names
 
 item_re = re.compile(r"\A\\(?P<index>\d+)\Z")
 def conv(astr):
+    """
+
+    Parameters
+    ----------
+    astr :
+        
+
+    Returns
+    -------
+
+    """
     b = astr.split(',')
     l = [x.strip() for x in b]
     for i in range(len(l)):
@@ -113,7 +156,17 @@
     return ','.join(l)
 
 def unique_key(adict):
-    """ Obtain a unique key given a dictionary."""
+    """Obtain a unique key given a dictionary.
+
+    Parameters
+    ----------
+    adict :
+        
+
+    Returns
+    -------
+
+    """
     allkeys = list(adict.keys())
     done = False
     n = 1
@@ -128,12 +181,36 @@
 
 template_name_re = re.compile(r'\A\s*(\w[\w\d]*)\s*\Z')
 def expand_sub(substr, names):
+    """
+
+    Parameters
+    ----------
+    substr :
+        
+    names :
+        
+
+    Returns
+    -------
+
+    """
     substr = substr.replace(r'\>', '@rightarrow@')
     substr = substr.replace(r'\<', '@leftarrow@')
     lnames = find_repl_patterns(substr)
     substr = named_re.sub(r"<\1>", substr)  # get rid of definition templates
 
     def listrepl(mobj):
+        """
+
+        Parameters
+        ----------
+        mobj :
+            
+
+        Returns
+        -------
+
+        """
         thelist = conv(mobj.group(1).replace(r'\,', '@comma@'))
         if template_name_re.match(thelist):
             return "<%s>" % (thelist)
@@ -176,6 +253,17 @@
         return substr
 
     def namerepl(mobj):
+        """
+
+        Parameters
+        ----------
+        mobj :
+            
+
+        Returns
+        -------
+
+        """
         name = mobj.group(1)
         return rules.get(name, (k+1)*[name])[k]
 
@@ -188,6 +276,17 @@
     return newstr
 
 def process_str(allstr):
+    """
+
+    Parameters
+    ----------
+    allstr :
+        
+
+    Returns
+    -------
+
+    """
     newstr = allstr
     writestr = ''
 
@@ -209,6 +308,17 @@
 include_src_re = re.compile(r"(\n|\A)\s*include\s*['\"](?P<name>[\w\d./\\]+[.]src)['\"]", re.I)
 
 def resolve_includes(source):
+    """
+
+    Parameters
+    ----------
+    source :
+        
+
+    Returns
+    -------
+
+    """
     d = os.path.dirname(source)
     with open(source) as fid:
         lines = []
@@ -228,6 +338,17 @@
     return lines
 
 def process_file(source):
+    """
+
+    Parameters
+    ----------
+    source :
+        
+
+    Returns
+    -------
+
+    """
     lines = resolve_includes(source)
     return process_str(''.join(lines))
 
@@ -242,6 +363,7 @@
 ''')
 
 def main():
+    """ """
     try:
         file = sys.argv[1]
     except IndexError:
