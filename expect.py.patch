# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pexpect/expect.py
+++ b/..//venv/lib/python3.8/site-packages/pexpect/expect.py
@@ -3,6 +3,7 @@
 from .exceptions import EOF, TIMEOUT
 
 class Expecter(object):
+    """ """
     def __init__(self, spawn, searcher, searchwindowsize=-1):
         self.spawn = spawn
         self.searcher = searcher
@@ -16,6 +17,19 @@
             self.lookback = searcher.longest_string
 
     def do_search(self, window, freshlen):
+        """
+
+        Parameters
+        ----------
+        window :
+            
+        freshlen :
+            
+
+        Returns
+        -------
+
+        """
         spawn = self.spawn
         searcher = self.searcher
         if freshlen > len(window):
@@ -40,6 +54,7 @@
                 spawn._buffer.write(window[-maintain:])
 
     def existing_data(self):
+        """ """
         # First call from a new call to expect_loop or expect_async.
         # self.searchwindowsize may have changed.
         # Treat all data as fresh.
@@ -70,6 +85,17 @@
         return self.do_search(window, freshlen)
 
     def new_data(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         # A subsequent call, after a call to existing_data.
         spawn = self.spawn
         freshlen = len(data)
@@ -98,6 +124,17 @@
         return self.do_search(window, freshlen)
 
     def eof(self, err=None):
+        """
+
+        Parameters
+        ----------
+        err :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         spawn = self.spawn
 
         spawn.before = spawn._before.getvalue()
@@ -122,6 +159,17 @@
             raise exc
 
     def timeout(self, err=None):
+        """
+
+        Parameters
+        ----------
+        err :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         spawn = self.spawn
 
         spawn.before = spawn._before.getvalue()
@@ -144,6 +192,7 @@
             raise exc
 
     def errored(self):
+        """ """
         spawn = self.spawn
         spawn.before = spawn._before.getvalue()
         spawn.after = None
@@ -151,7 +200,17 @@
         spawn.match_index = None
 
     def expect_loop(self, timeout=-1):
-        """Blocking expect"""
+        """Blocking expect
+
+        Parameters
+        ----------
+        timeout :
+             (Default value = -1)
+
+        Returns
+        -------
+
+        """
         spawn = self.spawn
 
         if timeout is not None:
@@ -185,23 +244,17 @@
 
 
 class searcher_string(object):
-    '''This is a plain string search helper for the spawn.expect_any() method.
+    """This is a plain string search helper for the spawn.expect_any() method.
     This helper class is for speed. For more powerful regex patterns
     see the helper class, searcher_re.
 
-    Attributes:
-
-        eof_index     - index of EOF, or -1
-        timeout_index - index of TIMEOUT, or -1
-
-    After a successful match by the search() method the following attributes
-    are available:
-
-        start - index into the buffer, first byte of match
-        end   - index into the buffer, first byte after match
-        match - the matching string itself
-
-    '''
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
 
     def __init__(self, strings):
         '''This creates an instance of searcher_string. This argument 'strings'
@@ -238,15 +291,29 @@
         return '\n'.join(ss)
 
     def search(self, buffer, freshlen, searchwindowsize=None):
-        '''This searches 'buffer' for the first occurrence of one of the search
+        """This searches 'buffer' for the first occurrence of one of the search
         strings.  'freshlen' must indicate the number of bytes at the end of
         'buffer' which have not been searched before. It helps to avoid
         searching the same, possibly big, buffer over and over again.
-
+        
         See class spawn for the 'searchwindowsize' argument.
-
+        
         If there is a match this returns the index of that string, and sets
-        'start', 'end' and 'match'. Otherwise, this returns -1. '''
+        'start', 'end' and 'match'. Otherwise, this returns -1.
+
+        Parameters
+        ----------
+        buffer :
+            
+        freshlen :
+            
+        searchwindowsize :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
 
         first_match = None
 
@@ -283,23 +350,17 @@
 
 
 class searcher_re(object):
-    '''This is regular expression string search helper for the
+    """This is regular expression string search helper for the
     spawn.expect_any() method. This helper class is for powerful
     pattern matching. For speed, see the helper class, searcher_string.
 
-    Attributes:
-
-        eof_index     - index of EOF, or -1
-        timeout_index - index of TIMEOUT, or -1
-
-    After a successful match by the search() method the following attributes
-    are available:
-
-        start - index into the buffer, first byte of match
-        end   - index into the buffer, first byte after match
-        match - the re.match object returned by a successful re.search
-
-    '''
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
 
     def __init__(self, patterns):
         '''This creates an instance that searches for 'patterns' Where
@@ -338,14 +399,28 @@
         return '\n'.join(ss)
 
     def search(self, buffer, freshlen, searchwindowsize=None):
-        '''This searches 'buffer' for the first occurrence of one of the regular
+        """This searches 'buffer' for the first occurrence of one of the regular
         expressions. 'freshlen' must indicate the number of bytes at the end of
         'buffer' which have not been searched before.
-
+        
         See class spawn for the 'searchwindowsize' argument.
-
+        
         If there is a match this returns the index of that string, and sets
-        'start', 'end' and 'match'. Otherwise, returns -1.'''
+        'start', 'end' and 'match'. Otherwise, returns -1.
+
+        Parameters
+        ----------
+        buffer :
+            
+        freshlen :
+            
+        searchwindowsize :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
 
         first_match = None
         # 'freshlen' doesn't help here -- we cannot predict the
