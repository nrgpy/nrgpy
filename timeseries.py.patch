# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/plotting/_matplotlib/timeseries.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/plotting/_matplotlib/timeseries.py
@@ -32,6 +32,21 @@
 
 
 def _maybe_resample(series: "Series", ax, kwargs):
+    """
+
+    Parameters
+    ----------
+    series: "Series" :
+        
+    ax :
+        
+    kwargs :
+        
+
+    Returns
+    -------
+
+    """
     # resample against axes freq if necessary
     freq, ax_freq = _get_freq(ax, series)
 
@@ -60,18 +75,59 @@
 
 
 def _is_sub(f1, f2):
+    """
+
+    Parameters
+    ----------
+    f1 :
+        
+    f2 :
+        
+
+    Returns
+    -------
+
+    """
     return (f1.startswith("W") and is_subperiod("D", f2)) or (
         f2.startswith("W") and is_subperiod(f1, "D")
     )
 
 
 def _is_sup(f1, f2):
+    """
+
+    Parameters
+    ----------
+    f1 :
+        
+    f2 :
+        
+
+    Returns
+    -------
+
+    """
     return (f1.startswith("W") and is_superperiod("D", f2)) or (
         f2.startswith("W") and is_superperiod(f1, "D")
     )
 
 
 def _upsample_others(ax, freq, kwargs):
+    """
+
+    Parameters
+    ----------
+    ax :
+        
+    freq :
+        
+    kwargs :
+        
+
+    Returns
+    -------
+
+    """
     legend = ax.get_legend()
     lines, labels = _replot_ax(ax, freq, kwargs)
     _replot_ax(ax, freq, kwargs)
@@ -95,6 +151,21 @@
 
 
 def _replot_ax(ax, freq, kwargs):
+    """
+
+    Parameters
+    ----------
+    ax :
+        
+    freq :
+        
+    kwargs :
+        
+
+    Returns
+    -------
+
+    """
     data = getattr(ax, "_plot_data", None)
 
     # clear current axes and data
@@ -125,7 +196,21 @@
 
 
 def _decorate_axes(ax, freq, kwargs):
-    """Initialize axes for time-series plotting"""
+    """Initialize axes for time-series plotting
+
+    Parameters
+    ----------
+    ax :
+        
+    freq :
+        
+    kwargs :
+        
+
+    Returns
+    -------
+
+    """
     if not hasattr(ax, "_plot_data"):
         ax._plot_data = []
 
@@ -141,10 +226,18 @@
 
 
 def _get_ax_freq(ax):
-    """
-    Get the freq attribute of the ax object if set.
+    """Get the freq attribute of the ax object if set.
     Also checks shared axes (eg when using secondary yaxis, sharex=True
     or twinx)
+
+    Parameters
+    ----------
+    ax :
+        
+
+    Returns
+    -------
+
     """
     ax_freq = getattr(ax, "freq", None)
     if ax_freq is None:
@@ -165,6 +258,17 @@
 
 
 def _get_period_alias(freq) -> Optional[str]:
+    """
+
+    Parameters
+    ----------
+    freq :
+        
+
+    Returns
+    -------
+
+    """
     freqstr = to_offset(freq).rule_code
 
     freq = get_period_alias(freqstr)
@@ -172,6 +276,19 @@
 
 
 def _get_freq(ax, series: "Series"):
+    """
+
+    Parameters
+    ----------
+    ax :
+        
+    series: "Series" :
+        
+
+    Returns
+    -------
+
+    """
     # get frequency from data
     freq = getattr(series.index, "freq", None)
     if freq is None:
@@ -190,6 +307,19 @@
 
 
 def _use_dynamic_x(ax, data: "FrameOrSeriesUnion") -> bool:
+    """
+
+    Parameters
+    ----------
+    ax :
+        
+    data: "FrameOrSeriesUnion" :
+        
+
+    Returns
+    -------
+
+    """
     freq = _get_index_freq(data.index)
     ax_freq = _get_ax_freq(ax)
 
@@ -218,6 +348,17 @@
 
 
 def _get_index_freq(index: "Index") -> Optional[BaseOffset]:
+    """
+
+    Parameters
+    ----------
+    index: "Index" :
+        
+
+    Returns
+    -------
+
+    """
     freq = getattr(index, "freq", None)
     if freq is None:
         freq = getattr(index, "inferred_freq", None)
@@ -231,6 +372,19 @@
 
 
 def _maybe_convert_index(ax, data):
+    """
+
+    Parameters
+    ----------
+    ax :
+        
+    data :
+        
+
+    Returns
+    -------
+
+    """
     # tsplot converts automatically, but don't want to convert index
     # over and over for DataFrames
     if isinstance(data.index, (ABCDatetimeIndex, ABCPeriodIndex)):
@@ -261,18 +415,45 @@
 
 
 def _format_coord(freq, t, y):
+    """
+
+    Parameters
+    ----------
+    freq :
+        
+    t :
+        
+    y :
+        
+
+    Returns
+    -------
+
+    """
     time_period = Period(ordinal=int(t), freq=freq)
     return f"t = {time_period}  y = {y:8f}"
 
 
 def format_dateaxis(subplot, freq, index):
-    """
-    Pretty-formats the date axis (x-axis).
-
+    """Pretty-formats the date axis (x-axis).
+    
     Major and minor ticks are automatically set for the frequency of the
     current underlying series.  As the dynamic mode is activated by
     default, changing the limits of the x axis will intelligently change
     the positions of the ticks.
+
+    Parameters
+    ----------
+    subplot :
+        
+    freq :
+        
+    index :
+        
+
+    Returns
+    -------
+
     """
     from matplotlib import pylab
 
