# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/f2py/tests/test_array_from_pyobj.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/f2py/tests/test_array_from_pyobj.py
@@ -14,10 +14,7 @@
 
 
 def setup_module():
-    """
-    Build the required testing extension module
-
-    """
+    """Build the required testing extension module"""
     global wrap
 
     # Check compiler availability first
@@ -39,11 +36,33 @@
 
 
 def flags_info(arr):
+    """
+
+    Parameters
+    ----------
+    arr :
+        
+
+    Returns
+    -------
+
+    """
     flags = wrap.array_attrs(arr)[6]
     return flags2names(flags)
 
 
 def flags2names(flags):
+    """
+
+    Parameters
+    ----------
+    flags :
+        
+
+    Returns
+    -------
+
+    """
     info = []
     for flagname in ['CONTIGUOUS', 'FORTRAN', 'OWNDATA', 'ENSURECOPY',
                      'ENSUREARRAY', 'ALIGNED', 'NOTSWAPPED', 'WRITEABLE',
@@ -56,6 +75,7 @@
 
 
 class Intent:
+    """ """
 
     def __init__(self, intent_list=[]):
         self.intent_list = intent_list[:]
@@ -80,12 +100,34 @@
         return 'Intent(%r)' % (self.intent_list)
 
     def is_intent(self, *names):
+        """
+
+        Parameters
+        ----------
+        *names :
+            
+
+        Returns
+        -------
+
+        """
         for name in names:
             if name not in self.intent_list:
                 return False
         return True
 
     def is_intent_exact(self, *names):
+        """
+
+        Parameters
+        ----------
+        *names :
+            
+
+        Returns
+        -------
+
+        """
         return len(self.intent_list) == len(names) and self.is_intent(*names)
 
 intent = Intent()
@@ -130,6 +172,7 @@
 
 
 class Type:
+    """ """
     _type_cache = {}
 
     def __new__(cls, name):
@@ -149,6 +192,17 @@
         return obj
 
     def _init(self, name):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+
+        Returns
+        -------
+
+        """
         self.NAME = name.upper()
         info = typeinfo[self.NAME]
         self.type_num = getattr(wrap, 'NPY_' + self.NAME)
@@ -158,12 +212,15 @@
         self.dtypechar = info.char
 
     def cast_types(self):
+        """ """
         return [self.__class__(_m) for _m in _cast_dict[self.NAME]]
 
     def all_types(self):
+        """ """
         return [self.__class__(_m) for _m in _type_names]
 
     def smaller_types(self):
+        """ """
         bits = typeinfo[self.NAME].alignment
         types = []
         for name in _type_names:
@@ -172,6 +229,7 @@
         return types
 
     def equal_types(self):
+        """ """
         bits = typeinfo[self.NAME].alignment
         types = []
         for name in _type_names:
@@ -182,6 +240,7 @@
         return types
 
     def larger_types(self):
+        """ """
         bits = typeinfo[self.NAME].alignment
         types = []
         for name in _type_names:
@@ -191,6 +250,7 @@
 
 
 class Array:
+    """ """
 
     def __init__(self, typ, dims, intent, obj):
         self.type = typ
@@ -272,6 +332,19 @@
                     assert_(self.has_shared_memory())
 
     def arr_equal(self, arr1, arr2):
+        """
+
+        Parameters
+        ----------
+        arr1 :
+            
+        arr2 :
+            
+
+        Returns
+        -------
+
+        """
         if arr1.shape != arr2.shape:
             return False
         s = arr1 == arr2
@@ -281,8 +354,7 @@
         return str(self.arr)
 
     def has_shared_memory(self):
-        """Check that created array shares data with input array.
-        """
+        """Check that created array shares data with input array."""
         if self.obj is self.arr:
             return True
         if not isinstance(self.obj, ndarray):
@@ -292,8 +364,10 @@
 
 
 class TestIntent:
+    """ """
 
     def test_in_out(self):
+        """ """
         assert_equal(str(intent.in_.out), 'intent(in,out)')
         assert_(intent.in_.c.is_intent('c'))
         assert_(not intent.in_.c.is_intent_exact('c'))
@@ -303,20 +377,34 @@
 
 
 class TestSharedMemory:
+    """ """
     num2seq = [1, 2]
     num23seq = [[1, 2, 3], [4, 5, 6]]
 
     @pytest.fixture(autouse=True, scope='class', params=_type_names)
     def setup_type(self, request):
+        """
+
+        Parameters
+        ----------
+        request :
+            
+
+        Returns
+        -------
+
+        """
         request.cls.type = Type(request.param)
         request.cls.array = lambda self, dims, intent, obj: \
             Array(Type(request.param), dims, intent, obj)
 
     def test_in_from_2seq(self):
+        """ """
         a = self.array([2], intent.in_, self.num2seq)
         assert_(not a.has_shared_memory())
 
     def test_in_from_2casttype(self):
+        """ """
         for t in self.type.cast_types():
             obj = array(self.num2seq, dtype=t.dtype)
             a = self.array([len(self.num2seq)], intent.in_, obj)
@@ -327,6 +415,7 @@
                 assert_(not a.has_shared_memory(), repr(t.dtype))
 
     def test_inout_2seq(self):
+        """ """
         obj = array(self.num2seq, dtype=self.type.dtype)
         a = self.array([len(self.num2seq)], intent.inout, obj)
         assert_(a.has_shared_memory())
@@ -341,6 +430,7 @@
             raise SystemError('intent(inout) should have failed on sequence')
 
     def test_f_inout_23seq(self):
+        """ """
         obj = array(self.num23seq, dtype=self.type.dtype, order='F')
         shape = (len(self.num23seq), len(self.num23seq[0]))
         a = self.array(shape, intent.in_.inout, obj)
@@ -359,23 +449,27 @@
                 'intent(inout) should have failed on improper array')
 
     def test_c_inout_23seq(self):
+        """ """
         obj = array(self.num23seq, dtype=self.type.dtype)
         shape = (len(self.num23seq), len(self.num23seq[0]))
         a = self.array(shape, intent.in_.c.inout, obj)
         assert_(a.has_shared_memory())
 
     def test_in_copy_from_2casttype(self):
+        """ """
         for t in self.type.cast_types():
             obj = array(self.num2seq, dtype=t.dtype)
             a = self.array([len(self.num2seq)], intent.in_.copy, obj)
             assert_(not a.has_shared_memory(), repr(t.dtype))
 
     def test_c_in_from_23seq(self):
+        """ """
         a = self.array([len(self.num23seq), len(self.num23seq[0])],
                        intent.in_, self.num23seq)
         assert_(not a.has_shared_memory())
 
     def test_in_from_23casttype(self):
+        """ """
         for t in self.type.cast_types():
             obj = array(self.num23seq, dtype=t.dtype)
             a = self.array([len(self.num23seq), len(self.num23seq[0])],
@@ -383,6 +477,7 @@
             assert_(not a.has_shared_memory(), repr(t.dtype))
 
     def test_f_in_from_23casttype(self):
+        """ """
         for t in self.type.cast_types():
             obj = array(self.num23seq, dtype=t.dtype, order='F')
             a = self.array([len(self.num23seq), len(self.num23seq[0])],
@@ -393,6 +488,7 @@
                 assert_(not a.has_shared_memory(), repr(t.dtype))
 
     def test_c_in_from_23casttype(self):
+        """ """
         for t in self.type.cast_types():
             obj = array(self.num23seq, dtype=t.dtype)
             a = self.array([len(self.num23seq), len(self.num23seq[0])],
@@ -403,6 +499,7 @@
                 assert_(not a.has_shared_memory(), repr(t.dtype))
 
     def test_f_copy_in_from_23casttype(self):
+        """ """
         for t in self.type.cast_types():
             obj = array(self.num23seq, dtype=t.dtype, order='F')
             a = self.array([len(self.num23seq), len(self.num23seq[0])],
@@ -410,6 +507,7 @@
             assert_(not a.has_shared_memory(), repr(t.dtype))
 
     def test_c_copy_in_from_23casttype(self):
+        """ """
         for t in self.type.cast_types():
             obj = array(self.num23seq, dtype=t.dtype)
             a = self.array([len(self.num23seq), len(self.num23seq[0])],
@@ -417,6 +515,7 @@
             assert_(not a.has_shared_memory(), repr(t.dtype))
 
     def test_in_cache_from_2casttype(self):
+        """ """
         for t in self.type.all_types():
             if t.elsize != self.type.elsize:
                 continue
@@ -446,6 +545,7 @@
                     'intent(cache) should have failed on multisegmented array')
 
     def test_in_cache_from_2casttype_failure(self):
+        """ """
         for t in self.type.all_types():
             if t.elsize >= self.type.elsize:
                 continue
@@ -462,6 +562,7 @@
                     'intent(cache) should have failed on smaller array')
 
     def test_cache_hidden(self):
+        """ """
         shape = (2,)
         a = self.array(shape, intent.cache.hide, None)
         assert_(a.arr.shape == shape)
@@ -482,6 +583,7 @@
                 'intent(cache) should have failed on undefined dimensions')
 
     def test_hidden(self):
+        """ """
         shape = (2,)
         a = self.array(shape, intent.hide, None)
         assert_(a.arr.shape == shape)
@@ -511,6 +613,7 @@
                               ' on undefined dimensions')
 
     def test_optional_none(self):
+        """ """
         shape = (2,)
         a = self.array(shape, intent.optional, None)
         assert_(a.arr.shape == shape)
@@ -529,6 +632,7 @@
         assert_(not a.arr.flags['FORTRAN'] and a.arr.flags['CONTIGUOUS'])
 
     def test_optional_from_2seq(self):
+        """ """
         obj = self.num2seq
         shape = (len(obj),)
         a = self.array(shape, intent.optional, obj)
@@ -536,6 +640,7 @@
         assert_(not a.has_shared_memory())
 
     def test_optional_from_23seq(self):
+        """ """
         obj = self.num23seq
         shape = (len(obj), len(obj[0]))
         a = self.array(shape, intent.optional, obj)
@@ -547,6 +652,7 @@
         assert_(not a.has_shared_memory())
 
     def test_inplace(self):
+        """ """
         obj = array(self.num23seq, dtype=self.type.dtype)
         assert_(not obj.flags['FORTRAN'] and obj.flags['CONTIGUOUS'])
         shape = obj.shape
@@ -560,6 +666,7 @@
         assert_(not obj.flags['CONTIGUOUS'])
 
     def test_inplace_from_casttype(self):
+        """ """
         for t in self.type.cast_types():
             if t is self.type:
                 continue
