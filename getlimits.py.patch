# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/getlimits.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/getlimits.py
@@ -15,7 +15,17 @@
 
 
 def _fr0(a):
-    """fix rank-0 --> rank-1"""
+    """fix rank-0 --> rank-1
+
+    Parameters
+    ----------
+    a :
+        
+
+    Returns
+    -------
+
+    """
     if a.ndim == 0:
         a = a.copy()
         a.shape = (1,)
@@ -23,14 +33,24 @@
 
 
 def _fr1(a):
-    """fix rank > 0 --> rank-0"""
+    """fix rank > 0 --> rank-0
+
+    Parameters
+    ----------
+    a :
+        
+
+    Returns
+    -------
+
+    """
     if a.size == 1:
         a = a.copy()
         a.shape = ()
     return a
 
 class MachArLike:
-    """ Object to simulate MachAr instance """
+    """Object to simulate MachAr instance"""
 
     def __init__(self,
                  ftype,
@@ -88,10 +108,24 @@
 # https://perl5.git.perl.org/perl.git/blob/3118d7d684b56cbeb702af874f4326683c45f045:/Configure
 _KNOWN_TYPES = {}
 def _register_type(machar, bytepat):
+    """
+
+    Parameters
+    ----------
+    machar :
+        
+    bytepat :
+        
+
+    Returns
+    -------
+
+    """
     _KNOWN_TYPES[bytepat] = machar
 _float_ma = {}
 
 def _register_known_types():
+    """ """
     # Known parameters for float16
     # See docstring of MachAr class for description of parameters.
     f16 = ntypes.float16
@@ -235,8 +269,8 @@
 
 
 def _get_machar(ftype):
-    """ Get MachAr instance or MachAr-like instance
-
+    """Get MachAr instance or MachAr-like instance
+    
     Get parameters for floating point type, by first trying signatures of
     various known floating point types, then, if none match, attempting to
     identify parameters by analysis.
@@ -248,14 +282,8 @@
 
     Returns
     -------
-    ma_like : instance of :class:`MachAr` or :class:`MachArLike`
-        Object giving floating point parameters for `ftype`.
-
-    Warns
-    -----
-    UserWarning
-        If the binary signature of the float type is not in the dictionary of
-        known float types.
+
+    
     """
     params = _MACHAR_PARAMS.get(ftype)
     if params is None:
@@ -278,7 +306,16 @@
 
 
 def _discovered_machar(ftype):
-    """ Create MachAr instance with found information on float types
+    """Create MachAr instance with found information on float types
+
+    Parameters
+    ----------
+    ftype :
+        
+
+    Returns
+    -------
+
     """
     params = _MACHAR_PARAMS[ftype]
     return MachAr(lambda v: array([v], ftype),
@@ -290,10 +327,17 @@
 
 @set_module('numpy')
 class finfo:
-    """
-    finfo(dtype)
-
+    """finfo(dtype)
+    
     Machine limits for floating point types.
+
+    Parameters
+    ----------
+    dtype : float, dtype, or instance
+        Kind of floating point data-type about which to get information.
+
+    Returns
+    -------
 
     Attributes
     ----------
@@ -339,26 +383,18 @@
     tiny : float
         The smallest positive usable number.  Type of `tiny` is an
         appropriate floating point type.
-
-    Parameters
-    ----------
-    dtype : float, dtype, or instance
-        Kind of floating point data-type about which to get information.
-
     See Also
     --------
     MachAr : The implementation of the tests that produce this information.
     iinfo : The equivalent for integer data types.
     spacing : The distance between a value and the nearest adjacent number
     nextafter : The next floating point value after x1 towards x2
-
     Notes
     -----
     For developers of NumPy: do not instantiate this at the module level.
     The initial calculation of these parameters is expensive and negatively
     impacts import times.  These objects are cached, so calling ``finfo()``
     repeatedly inside your functions is not a problem.
-
     """
 
     _finfo_cache = {}
@@ -397,6 +433,17 @@
         return obj
 
     def _init(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         self.dtype = numeric.dtype(dtype)
         machar = _get_machar(dtype)
 
@@ -444,10 +491,17 @@
 
 @set_module('numpy')
 class iinfo:
-    """
-    iinfo(type)
-
+    """iinfo(type)
+    
     Machine limits for integer types.
+
+    Parameters
+    ----------
+    int_type : integer type, dtype, or instance
+        The kind of integer data type to get information about.
+
+    Returns
+    -------
 
     Attributes
     ----------
@@ -457,20 +511,15 @@
         The smallest integer expressible by the type.
     max : int
         The largest integer expressible by the type.
-
-    Parameters
-    ----------
-    int_type : integer type, dtype, or instance
-        The kind of integer data type to get information about.
-
     See Also
     --------
     finfo : The equivalent for floating point data types.
-
     Examples
     --------
     With types:
-
+    
+    
+    With instances:
     >>> ii16 = np.iinfo(np.int16)
     >>> ii16.min
     -32768
@@ -481,15 +530,12 @@
     -2147483648
     >>> ii32.max
     2147483647
-
-    With instances:
-
+    
     >>> ii32 = np.iinfo(np.int32(10))
     >>> ii32.min
     -2147483648
     >>> ii32.max
     2147483647
-
     """
 
     _min_vals = {}
