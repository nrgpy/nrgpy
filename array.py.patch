# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/extension/list/array.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/extension/list/array.py
@@ -17,23 +17,19 @@
 
 
 class ListDtype(ExtensionDtype):
+    """ """
     type = list
     name = "list"
     na_value = np.nan
 
     @classmethod
     def construct_array_type(cls) -> Type["ListArray"]:
-        """
-        Return the array type associated with this dtype.
-
-        Returns
-        -------
-        type
-        """
+        """Return the array type associated with this dtype."""
         return ListArray
 
 
 class ListArray(ExtensionArray):
+    """ """
     dtype = ListDtype()
     __array_priority__ = 1000
 
@@ -47,6 +43,21 @@
 
     @classmethod
     def _from_sequence(cls, scalars, dtype=None, copy=False):
+        """
+
+        Parameters
+        ----------
+        scalars :
+            
+        dtype :
+             (Default value = None)
+        copy :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         data = np.empty(len(scalars), dtype=object)
         data[:] = scalars
         return cls(data)
@@ -62,11 +73,27 @@
         return len(self.data)
 
     def isna(self):
+        """ """
         return np.array(
             [not isinstance(x, list) and np.isnan(x) for x in self.data], dtype=bool
         )
 
     def take(self, indexer, allow_fill=False, fill_value=None):
+        """
+
+        Parameters
+        ----------
+        indexer :
+            
+        allow_fill :
+             (Default value = False)
+        fill_value :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         # re-implement here, since NumPy has trouble setting
         # sized objects like UserDicts into scalar slots of
         # an ndarary.
@@ -97,9 +124,23 @@
         return self._from_sequence(output)
 
     def copy(self):
+        """ """
         return type(self)(self.data[:])
 
     def astype(self, dtype, copy=True):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+        copy :
+             (Default value = True)
+
+        Returns
+        -------
+
+        """
         if isinstance(dtype, type(self.dtype)) and dtype == self.dtype:
             if copy:
                 return self.copy()
@@ -113,11 +154,23 @@
 
     @classmethod
     def _concat_same_type(cls, to_concat):
+        """
+
+        Parameters
+        ----------
+        to_concat :
+            
+
+        Returns
+        -------
+
+        """
         data = np.concatenate([x.data for x in to_concat])
         return cls(data)
 
 
 def make_data():
+    """ """
     # TODO: Use a regular dict. See _NDFrameIndexer._setitem_with_indexer
     data = np.empty(100, dtype=object)
     data[:] = [
