# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/window/test_timeseries_window.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/window/test_timeseries_window.py
@@ -16,11 +16,23 @@
 
 
 class TestRollingTS:
+    """ """
 
     # rolling time-series friendly
     # xref GH13327
 
     def setup_method(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
 
         self.regular = DataFrame(
             {"A": date_range("20130101", periods=5, freq="s"), "B": range(5)}
@@ -36,6 +48,7 @@
         ]
 
     def test_doc_string(self):
+        """ """
 
         df = DataFrame(
             {"B": [0, 1, 2, np.nan, 4]},
@@ -51,6 +64,7 @@
         df.rolling("2s").sum()
 
     def test_valid(self):
+        """ """
 
         df = self.regular
 
@@ -87,6 +101,7 @@
             df.rolling(window="1D", center=True)
 
     def test_on(self):
+        """ """
 
         df = self.regular
 
@@ -112,6 +127,7 @@
         df.rolling(window="2d", on="C").B.sum()
 
     def test_monotonic_on(self):
+        """ """
 
         # on/index must be monotonic
         df = DataFrame(
@@ -126,6 +142,7 @@
         df.rolling("2s").sum()
 
     def test_non_monotonic_on(self):
+        """ """
         # GH 19248
         df = DataFrame(
             {"A": date_range("20130101", periods=5, freq="s"), "B": range(5)}
@@ -151,6 +168,7 @@
             df.rolling("2s", on="A").sum()
 
     def test_frame_on(self):
+        """ """
 
         df = DataFrame(
             {"B": range(5), "C": date_range("20130101 09:00:00", periods=5, freq="3s")}
@@ -184,6 +202,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_frame_on2(self):
+        """ """
 
         # using multiple aggregation columns
         df = DataFrame(
@@ -221,6 +240,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_basic_regular(self):
+        """ """
 
         df = self.regular.copy()
 
@@ -243,6 +263,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_min_periods(self):
+        """ """
 
         # compare for min_periods
         df = self.regular
@@ -257,6 +278,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_closed(self):
+        """ """
 
         # xref GH13965
 
@@ -301,6 +323,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_ragged_sum(self):
+        """ """
 
         df = self.ragged
         result = df.rolling(window="1s", min_periods=1).sum()
@@ -344,6 +367,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_ragged_mean(self):
+        """ """
 
         df = self.ragged
         result = df.rolling(window="1s", min_periods=1).mean()
@@ -357,6 +381,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_ragged_median(self):
+        """ """
 
         df = self.ragged
         result = df.rolling(window="1s", min_periods=1).median()
@@ -370,6 +395,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_ragged_quantile(self):
+        """ """
 
         df = self.ragged
         result = df.rolling(window="1s", min_periods=1).quantile(0.5)
@@ -383,6 +409,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_ragged_std(self):
+        """ """
 
         df = self.ragged
         result = df.rolling(window="1s", min_periods=1).std(ddof=0)
@@ -406,6 +433,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_ragged_var(self):
+        """ """
 
         df = self.ragged
         result = df.rolling(window="1s", min_periods=1).var(ddof=0)
@@ -429,6 +457,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_ragged_skew(self):
+        """ """
 
         df = self.ragged
         result = df.rolling(window="3s", min_periods=1).skew()
@@ -442,6 +471,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_ragged_kurt(self):
+        """ """
 
         df = self.ragged
         result = df.rolling(window="3s", min_periods=1).kurt()
@@ -455,6 +485,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_ragged_count(self):
+        """ """
 
         df = self.ragged
         result = df.rolling(window="1s", min_periods=1).count()
@@ -477,6 +508,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_regular_min(self):
+        """ """
 
         df = DataFrame(
             {"A": date_range("20130101", periods=5, freq="s"), "B": [0.0, 1, 2, 3, 4]}
@@ -502,6 +534,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_ragged_min(self):
+        """ """
 
         df = self.ragged
 
@@ -521,6 +554,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_perf_min(self):
+        """ """
 
         N = 10000
 
@@ -536,6 +570,7 @@
         assert ((result - expected) < 0.01).all().bool()
 
     def test_ragged_max(self):
+        """ """
 
         df = self.ragged
 
@@ -575,6 +610,21 @@
         ],
     )
     def test_freqs_ops(self, freq, op, result_data):
+        """
+
+        Parameters
+        ----------
+        freq :
+            
+        op :
+            
+        result_data :
+            
+
+        Returns
+        -------
+
+        """
         # GH 21096
         index = date_range(start="2018-1-1 01:00:00", freq=f"1{freq}", periods=10)
         s = Series(data=0, index=index)
@@ -586,6 +636,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_all(self):
+        """ """
 
         # simple comparison of integer vs time-based windowing
         df = self.regular * 2
@@ -614,6 +665,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_all2(self):
+        """ """
 
         # more sophisticated comparison of integer vs.
         # time-based windowing
@@ -645,6 +697,17 @@
             # finally groupby-apply will return a multi-index
             # so we need to drop the day
             def agg_by_day(x):
+                """
+
+                Parameters
+                ----------
+                x :
+                    
+
+                Returns
+                -------
+
+                """
                 x = x.between_time("09:00", "16:00")
                 return getattr(x.rolling(5, min_periods=1), f)()
 
@@ -657,6 +720,7 @@
             tm.assert_frame_equal(result, expected)
 
     def test_groupby_monotonic(self):
+        """ """
 
         # GH 15130
         # we don't need to validate monotonicity when grouping
@@ -686,6 +750,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_non_monotonic(self):
+        """ """
         # GH 13966 (similar to #15130, closed by #15175)
 
         dates = date_range(start="2016-01-01 09:30:00", periods=20, freq="s")
@@ -708,6 +773,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_rolling_cov_offset(self):
+        """ """
         # GH16058
 
         idx = date_range("2017-01-01", periods=24, freq="1h")
@@ -728,6 +794,7 @@
         tm.assert_series_equal(result, expected2)
 
     def test_rolling_on_decreasing_index(self):
+        """ """
         # GH-19248, GH-32385
         index = [
             Timestamp("20190101 09:00:30"),
@@ -743,6 +810,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_rolling_on_empty(self):
+        """ """
         # GH-32385
         df = DataFrame({"column": []}, index=[])
         result = df.rolling("5s").min()
@@ -750,6 +818,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_rolling_on_multi_index_level(self):
+        """ """
         # GH-15584
         df = DataFrame(
             {"column": range(6)},
