# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/accessor.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/accessor.py
@@ -11,19 +11,16 @@
 
 
 class DirNamesMixin:
+    """ """
     _accessors: Set[str] = set()
     _deprecations: FrozenSet[str] = frozenset()
 
     def _dir_deletions(self):
-        """
-        Delete unwanted __dir__ for this object.
-        """
+        """Delete unwanted __dir__ for this object."""
         return self._accessors | self._deprecations
 
     def _dir_additions(self):
-        """
-        Add additional __dir__ for this object.
-        """
+        """Add additional __dir__ for this object."""
         rv = set()
         for accessor in self._accessors:
             try:
@@ -47,44 +44,115 @@
 
 
 class PandasDelegate:
-    """
-    Abstract base class for delegating methods/properties.
-    """
+    """Abstract base class for delegating methods/properties."""
 
     def _delegate_property_get(self, name, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         raise TypeError(f"You cannot access the property {name}")
 
     def _delegate_property_set(self, name, value, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+        value :
+            
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         raise TypeError(f"The property {name} cannot be set")
 
     def _delegate_method(self, name, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        name :
+            
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         raise TypeError(f"You cannot call method {name}")
 
     @classmethod
     def _add_delegate_accessors(
         cls, delegate, accessors, typ: str, overwrite: bool = False
     ):
-        """
-        Add accessors to cls from the delegate class.
+        """Add accessors to cls from the delegate class.
 
         Parameters
         ----------
-        cls
-            Class to add the methods/properties to.
-        delegate
-            Class to get methods/properties and doc-strings.
-        accessors : list of str
-            List of accessors to add.
-        typ : {'property', 'method'}
-        overwrite : bool, default False
-            Overwrite the method/property in the target class if it exists.
+        delegate :
+            
+        accessors :
+            
+        typ: str :
+            
+        overwrite: bool :
+             (Default value = False)
+
+        Returns
+        -------
+
+        
         """
 
         def _create_delegator_property(name):
+            """
+
+            Parameters
+            ----------
+            name :
+                
+
+            Returns
+            -------
+
+            """
             def _getter(self):
+                """ """
                 return self._delegate_property_get(name)
 
             def _setter(self, new_values):
+                """
+
+                Parameters
+                ----------
+                new_values :
+                    
+
+                Returns
+                -------
+
+                """
                 return self._delegate_property_set(name, new_values)
 
             _getter.__name__ = name
@@ -95,7 +163,31 @@
             )
 
         def _create_delegator_method(name):
+            """
+
+            Parameters
+            ----------
+            name :
+                
+
+            Returns
+            -------
+
+            """
             def f(self, *args, **kwargs):
+                """
+
+                Parameters
+                ----------
+                *args :
+                    
+                **kwargs :
+                    
+
+                Returns
+                -------
+
+                """
                 return self._delegate_method(name, *args, **kwargs)
 
             f.__name__ = name
@@ -116,8 +208,7 @@
 
 
 def delegate_names(delegate, accessors, typ: str, overwrite: bool = False):
-    """
-    Add delegated names to a class using a class decorator.  This provides
+    """Add delegated names to a class using a class decorator.  This provides
     an alternative usage to directly calling `_add_delegate_accessors`
     below a class definition.
 
@@ -128,8 +219,13 @@
     accessors : Sequence[str]
         List of accessor to add.
     typ : {'property', 'method'}
+        
     overwrite : bool, default False
-       Overwrite the method/property in the target class if it exists.
+        Overwrite the method/property in the target class if it exists.
+    typ: str :
+        
+    overwrite: bool :
+         (Default value = False)
 
     Returns
     -------
@@ -144,6 +240,7 @@
     """
 
     def add_delegate_accessors(cls):
+        """ """
         cls._add_delegate_accessors(delegate, accessors, typ, overwrite=overwrite)
         return cls
 
@@ -157,9 +254,8 @@
 
 
 class CachedAccessor:
-    """
-    Custom property-like object.
-
+    """Custom property-like object.
+    
     A descriptor for caching accessors.
 
     Parameters
@@ -168,6 +264,9 @@
         Namespace that will be accessed under, e.g. ``df.foo``.
     accessor : cls
         Class with the extension methods.
+
+    Returns
+    -------
 
     Notes
     -----
@@ -195,8 +294,7 @@
 
 @doc(klass="", others="")
 def _register_accessor(name, cls):
-    """
-    Register a custom accessor on {klass} objects.
+    """Register a custom accessor on {klass} objects.
 
     Parameters
     ----------
@@ -214,59 +312,68 @@
     register_dataframe_accessor : Register a custom accessor on DataFrame objects.
     register_series_accessor : Register a custom accessor on Series objects.
     register_index_accessor : Register a custom accessor on Index objects.
-
     Notes
     -----
     When accessed, your accessor will be initialized with the pandas object
     the user is interacting with. So the signature must be
-
+    
     .. code-block:: python
-
+    
         def __init__(self, pandas_object):  # noqa: E999
             ...
-
+    
     For consistency with pandas methods, you should raise an ``AttributeError``
     if the data passed to your accessor has an incorrect dtype.
-
-    >>> pd.Series(['a', 'b']).dt
-    Traceback (most recent call last):
-    ...
-    AttributeError: Can only use .dt accessor with datetimelike values
-
+    
     Examples
     --------
     In your library code::
-
+    
         import pandas as pd
-
+    
         @pd.api.extensions.register_dataframe_accessor("geo")
         class GeoAccessor:
             def __init__(self, pandas_obj):
                 self._obj = pandas_obj
-
+    
             @property
             def center(self):
                 # return the geographic center point of this DataFrame
                 lat = self._obj.latitude
                 lon = self._obj.longitude
                 return (float(lon.mean()), float(lat.mean()))
-
+    
             def plot(self):
                 # plot this array's data on a map, e.g., using Cartopy
                 pass
-
+    
     Back in an interactive IPython session:
-
+    
         .. code-block:: ipython
-
+    
             In [1]: ds = pd.DataFrame({{"longitude": np.linspace(0, 10),
                ...:                    "latitude": np.linspace(0, 20)}})
             In [2]: ds.geo.center
             Out[2]: (5.0, 10.0)
             In [3]: ds.geo.plot()  # plots data on a map
+    >>> pd.Series(['a', 'b']).dt
+    Traceback (most recent call last):
+    ...
+    AttributeError: Can only use .dt accessor with datetimelike values
     """
 
     def decorator(accessor):
+        """
+
+        Parameters
+        ----------
+        accessor :
+            
+
+        Returns
+        -------
+
+        """
         if hasattr(cls, name):
             warnings.warn(
                 f"registration of accessor {repr(accessor)} under name "
@@ -284,6 +391,17 @@
 
 @doc(_register_accessor, klass="DataFrame")
 def register_dataframe_accessor(name):
+    """
+
+    Parameters
+    ----------
+    name :
+        
+
+    Returns
+    -------
+
+    """
     from pandas import DataFrame
 
     return _register_accessor(name, DataFrame)
@@ -291,6 +409,17 @@
 
 @doc(_register_accessor, klass="Series")
 def register_series_accessor(name):
+    """
+
+    Parameters
+    ----------
+    name :
+        
+
+    Returns
+    -------
+
+    """
     from pandas import Series
 
     return _register_accessor(name, Series)
@@ -298,6 +427,17 @@
 
 @doc(_register_accessor, klass="Index")
 def register_index_accessor(name):
+    """
+
+    Parameters
+    ----------
+    name :
+        
+
+    Returns
+    -------
+
+    """
     from pandas import Index
 
     return _register_accessor(name, Index)
