# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/apply.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/apply.py
@@ -30,7 +30,31 @@
     args=None,
     kwds=None,
 ):
-    """ construct and return a row or column based frame apply object """
+    """construct and return a row or column based frame apply object
+
+    Parameters
+    ----------
+    obj: "DataFrame" :
+        
+    func :
+        
+    axis: Axis :
+         (Default value = 0)
+    raw: bool :
+         (Default value = False)
+    result_type: Optional[str] :
+         (Default value = None)
+    ignore_failures: bool :
+         (Default value = False)
+    args :
+         (Default value = None)
+    kwds :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     axis = obj._get_axis_number(axis)
     klass: Type[FrameApply]
     if axis == 0:
@@ -50,6 +74,7 @@
 
 
 class FrameApply(metaclass=abc.ABCMeta):
+    """ """
 
     # ---------------------------------------------------------------
     # Abstract Methods
@@ -58,22 +83,38 @@
     @property
     @abc.abstractmethod
     def result_index(self) -> "Index":
+        """ """
         pass
 
     @property
     @abc.abstractmethod
     def result_columns(self) -> "Index":
+        """ """
         pass
 
     @property
     @abc.abstractmethod
     def series_generator(self) -> Iterator["Series"]:
+        """ """
         pass
 
     @abc.abstractmethod
     def wrap_results_for_axis(
         self, results: ResType, res_index: "Index"
     ) -> Union["Series", "DataFrame"]:
+        """
+
+        Parameters
+        ----------
+        results: ResType :
+            
+        res_index: "Index" :
+            
+
+        Returns
+        -------
+
+        """
         pass
 
     # ---------------------------------------------------------------
@@ -106,6 +147,17 @@
         if (kwds or args) and not isinstance(func, (np.ufunc, str)):
 
             def f(x):
+                """
+
+                Parameters
+                ----------
+                x :
+                    
+
+                Returns
+                -------
+
+                """
                 return func(x, *args, **kwds)
 
         else:
@@ -115,30 +167,36 @@
 
     @property
     def res_columns(self) -> "Index":
+        """ """
         return self.result_columns
 
     @property
     def columns(self) -> "Index":
+        """ """
         return self.obj.columns
 
     @property
     def index(self) -> "Index":
+        """ """
         return self.obj.index
 
     @cache_readonly
     def values(self):
+        """ """
         return self.obj.values
 
     @cache_readonly
     def dtypes(self) -> "Series":
+        """ """
         return self.obj.dtypes
 
     @property
     def agg_axis(self) -> "Index":
+        """ """
         return self.obj._get_agg_axis(self.axis)
 
     def get_result(self):
-        """ compute the results """
+        """compute the results"""
         # dispatch to agg
         if is_list_like(self.f) or is_dict_like(self.f):
             return self.obj.aggregate(self.f, axis=self.axis, *self.args, **self.kwds)
@@ -180,11 +238,17 @@
         return self.apply_standard()
 
     def apply_empty_result(self):
-        """
-        we have an empty result; at least 1 axis is 0
-
+        """we have an empty result; at least 1 axis is 0
+        
         we will try to apply the function to an empty
         series in order to see if this is a reduction function
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         # we are not asked to reduce or infer reduction
         # so just return a copy of the existing object
@@ -215,16 +279,37 @@
             return self.obj.copy()
 
     def apply_raw(self):
-        """ apply to the values as a numpy array """
+        """apply to the values as a numpy array"""
 
         def wrap_function(func):
+            """Wrap user supplied function to work around numpy issue.
+            
+            see https://github.com/numpy/numpy/issues/8352
+
+            Parameters
+            ----------
+            func :
+                
+
+            Returns
+            -------
+
             """
-            Wrap user supplied function to work around numpy issue.
-
-            see https://github.com/numpy/numpy/issues/8352
-            """
 
             def wrapper(*args, **kwargs):
+                """
+
+                Parameters
+                ----------
+                *args :
+                    
+                **kwargs :
+                    
+
+                Returns
+                -------
+
+                """
                 result = func(*args, **kwargs)
                 if isinstance(result, str):
                     result = np.array(result, dtype=object)
@@ -241,6 +326,17 @@
             return self.obj._constructor_sliced(result, index=self.agg_axis)
 
     def apply_broadcast(self, target: "DataFrame") -> "DataFrame":
+        """
+
+        Parameters
+        ----------
+        target: "DataFrame" :
+            
+
+        Returns
+        -------
+
+        """
         result_values = np.empty_like(target.values)
 
         # axis which we want to compare compliance
@@ -268,12 +364,14 @@
         return result
 
     def apply_standard(self):
+        """ """
         results, res_index = self.apply_series_generator()
 
         # wrap results
         return self.wrap_results(results, res_index)
 
     def apply_series_generator(self) -> Tuple[ResType, "Index"]:
+        """ """
         series_gen = self.series_generator
         res_index = self.result_index
 
@@ -308,6 +406,19 @@
     def wrap_results(
         self, results: ResType, res_index: "Index"
     ) -> Union["Series", "DataFrame"]:
+        """
+
+        Parameters
+        ----------
+        results: ResType :
+            
+        res_index: "Index" :
+            
+
+        Returns
+        -------
+
+        """
         from pandas import Series
 
         # see if we can infer the results
@@ -332,27 +443,56 @@
 
 
 class FrameRowApply(FrameApply):
+    """ """
     axis = 0
 
     def apply_broadcast(self, target: "DataFrame") -> "DataFrame":
+        """
+
+        Parameters
+        ----------
+        target: "DataFrame" :
+            
+
+        Returns
+        -------
+
+        """
         return super().apply_broadcast(target)
 
     @property
     def series_generator(self):
+        """ """
         return (self.obj._ixs(i, axis=1) for i in range(len(self.columns)))
 
     @property
     def result_index(self) -> "Index":
+        """ """
         return self.columns
 
     @property
     def result_columns(self) -> "Index":
+        """ """
         return self.index
 
     def wrap_results_for_axis(
         self, results: ResType, res_index: "Index"
     ) -> Union["Series", "DataFrame"]:
-        """ return the results for the rows """
+        """
+
+        Parameters
+        ----------
+        results: ResType :
+            
+        res_index: "Index" :
+            
+
+        Returns
+        -------
+        type
+            
+
+        """
 
         if self.result_type == "reduce":
             # e.g. test_apply_dict GH#8735
@@ -390,14 +530,27 @@
 
 
 class FrameColumnApply(FrameApply):
+    """ """
     axis = 1
 
     def apply_broadcast(self, target: "DataFrame") -> "DataFrame":
+        """
+
+        Parameters
+        ----------
+        target: "DataFrame" :
+            
+
+        Returns
+        -------
+
+        """
         result = super().apply_broadcast(target.T)
         return result.T
 
     @property
     def series_generator(self):
+        """ """
         values = self.values
         assert len(values) > 0
 
@@ -416,16 +569,32 @@
 
     @property
     def result_index(self) -> "Index":
+        """ """
         return self.index
 
     @property
     def result_columns(self) -> "Index":
+        """ """
         return self.columns
 
     def wrap_results_for_axis(
         self, results: ResType, res_index: "Index"
     ) -> Union["Series", "DataFrame"]:
-        """ return the results for the columns """
+        """
+
+        Parameters
+        ----------
+        results: ResType :
+            
+        res_index: "Index" :
+            
+
+        Returns
+        -------
+        type
+            
+
+        """
         result: Union["Series", "DataFrame"]
 
         # we have requested to expand
@@ -444,7 +613,19 @@
         return result
 
     def infer_to_same_shape(self, results: ResType, res_index: "Index") -> "DataFrame":
-        """ infer the results to the same shape as the input object """
+        """infer the results to the same shape as the input object
+
+        Parameters
+        ----------
+        results: ResType :
+            
+        res_index: "Index" :
+            
+
+        Returns
+        -------
+
+        """
         result = self.obj._constructor(data=results)
         result = result.T
 
