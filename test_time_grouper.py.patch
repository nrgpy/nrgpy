# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/resample/test_time_grouper.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/resample/test_time_grouper.py
@@ -14,11 +14,23 @@
 
 
 def test_apply():
+    """ """
     grouper = Grouper(freq="A", label="right", closed="right")
 
     grouped = test_series.groupby(grouper)
 
     def f(x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         return x.sort_values()[-3:]
 
     applied = grouped.apply(f)
@@ -30,6 +42,7 @@
 
 
 def test_count():
+    """ """
     test_series[::3] = np.nan
 
     expected = test_series.groupby(lambda x: x.year).count()
@@ -45,6 +58,7 @@
 
 
 def test_numpy_reduction():
+    """ """
     result = test_series.resample("A", closed="right").prod()
 
     expected = test_series.groupby(lambda x: x.year).agg(np.prod)
@@ -54,6 +68,7 @@
 
 
 def test_apply_iteration():
+    """ """
     # #2300
     N = 1000
     ind = pd.date_range(start="2000-01-01", freq="D", periods=N)
@@ -66,6 +81,17 @@
     grouped = df.groupby(grouper, group_keys=False)
 
     def f(df):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+
+        Returns
+        -------
+
+        """
         return df["close"] / df["open"]
 
     # it works!
@@ -83,6 +109,19 @@
     ],
 )
 def test_fails_on_no_datetime_index(name, func):
+    """
+
+    Parameters
+    ----------
+    name :
+        
+    func :
+        
+
+    Returns
+    -------
+
+    """
     n = 2
     index = func(n)
     df = DataFrame({"a": np.random.randn(n)}, index=index)
@@ -96,6 +135,7 @@
 
 
 def test_aaa_group_order():
+    """ """
     # GH 12840
     # check TimeGrouper perform stable sorts
     n = 20
@@ -118,7 +158,17 @@
 
 
 def test_aggregate_normal(resample_method):
-    """Check TimeGrouper's aggregation is identical as normal groupby."""
+    """Check TimeGrouper's aggregation is identical as normal groupby.
+
+    Parameters
+    ----------
+    resample_method :
+        
+
+    Returns
+    -------
+
+    """
     if resample_method == "ohlc":
         pytest.xfail(reason="DataError: No numeric types to aggregate")
 
@@ -167,6 +217,21 @@
     ],
 )
 def test_resample_entirely_nat_window(method, method_args, unit):
+    """
+
+    Parameters
+    ----------
+    method :
+        
+    method_args :
+        
+    unit :
+        
+
+    Returns
+    -------
+
+    """
     s = pd.Series([0] * 2 + [np.nan] * 2, index=pd.date_range("2017", periods=4))
     result = methodcaller(method, **method_args)(s.resample("2d"))
     expected = pd.Series(
@@ -180,6 +245,19 @@
     [("min", np.nan), ("max", np.nan), ("sum", 0), ("prod", 1), ("count", 0)],
 )
 def test_aggregate_with_nat(func, fill_value):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+    fill_value :
+        
+
+    Returns
+    -------
+
+    """
     # check TimeGrouper's aggregation is identical as normal groupby
     # if NaT is included, 'var', 'std', 'mean', 'first','last'
     # and 'nth' doesn't work yet
@@ -214,6 +292,7 @@
 
 
 def test_aggregate_with_nat_size():
+    """ """
     # GH 9925
     n = 20
     data = np.random.randn(n, 4).astype("int64")
@@ -246,6 +325,7 @@
 
 
 def test_repr():
+    """ """
     # GH18203
     result = repr(Grouper(key="A", freq="H"))
     expected = (
@@ -278,6 +358,21 @@
     ],
 )
 def test_upsample_sum(method, method_args, expected_values):
+    """
+
+    Parameters
+    ----------
+    method :
+        
+    method_args :
+        
+    expected_values :
+        
+
+    Returns
+    -------
+
+    """
     s = pd.Series(1, index=pd.date_range("2017", periods=2, freq="H"))
     resampled = s.resample("30T")
     index = pd.DatetimeIndex(
