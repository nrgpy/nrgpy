# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/test_index_new.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/test_index_new.py
@@ -25,9 +25,23 @@
 
 
 class TestIndexConstructorInference:
+    """ """
     @pytest.mark.parametrize("na_value", [None, np.nan])
     @pytest.mark.parametrize("vtype", [list, tuple, iter])
     def test_construction_list_tuples_nan(self, na_value, vtype):
+        """
+
+        Parameters
+        ----------
+        na_value :
+            
+        vtype :
+            
+
+        Returns
+        -------
+
+        """
         # GH#18505 : valid tuples containing NaN
         values = [(1, "two"), (3.0, na_value)]
         result = Index(vtype(values))
@@ -39,6 +53,17 @@
         [int, "int64", "int32", "int16", "int8", "uint64", "uint32", "uint16", "uint8"],
     )
     def test_constructor_int_dtype_float(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         # GH#18400
         if is_unsigned_integer_dtype(dtype):
             index_type = UInt64Index
@@ -54,6 +79,19 @@
         "vals", [[True, False, True], np.array([True, False, True], dtype=bool)]
     )
     def test_constructor_dtypes_to_object(self, cast_index, vals):
+        """
+
+        Parameters
+        ----------
+        cast_index :
+            
+        vals :
+            
+
+        Returns
+        -------
+
+        """
         if cast_index:
             index = Index(vals, dtype=bool)
         else:
@@ -63,12 +101,14 @@
         assert index.dtype == object
 
     def test_constructor_categorical_to_object(self):
+        """ """
         # GH#32167 Categorical data and dtype=object should return object-dtype
         ci = CategoricalIndex(range(5))
         result = Index(ci, dtype=object)
         assert not isinstance(result, CategoricalIndex)
 
     def test_constructor_infer_periodindex(self):
+        """ """
         xp = period_range("2012-1-1", freq="M", periods=3)
         rs = Index(xp)
         tm.assert_index_equal(rs, xp)
@@ -85,6 +125,27 @@
     def test_constructor_infer_nat_dt_like(
         self, pos, klass, dtype, ctor, nulls_fixture, request
     ):
+        """
+
+        Parameters
+        ----------
+        pos :
+            
+        klass :
+            
+        dtype :
+            
+        ctor :
+            
+        nulls_fixture :
+            
+        request :
+            
+
+        Returns
+        -------
+
+        """
         expected = klass([NaT, NaT])
         assert expected.dtype == dtype
         data = [ctor]
@@ -103,6 +164,17 @@
 
     @pytest.mark.parametrize("swap_objs", [True, False])
     def test_constructor_mixed_nat_objs_infers_object(self, swap_objs):
+        """
+
+        Parameters
+        ----------
+        swap_objs :
+            
+
+        Returns
+        -------
+
+        """
         # mixed np.datetime64/timedelta64 nat results in object
         data = [np.datetime64("nat"), np.timedelta64("nat")]
         if swap_objs:
@@ -114,10 +186,22 @@
 
 
 class TestIndexConstructorUnwrapping:
+    """ """
     # Test passing different arraylike values to pd.Index
 
     @pytest.mark.parametrize("klass", [Index, DatetimeIndex])
     def test_constructor_from_series_dt64(self, klass):
+        """
+
+        Parameters
+        ----------
+        klass :
+            
+
+        Returns
+        -------
+
+        """
         stamps = [Timestamp("20110101"), Timestamp("20120101"), Timestamp("20130101")]
         expected = DatetimeIndex(stamps)
         ser = Series(stamps)
