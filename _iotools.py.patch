# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/lib/_iotools.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/lib/_iotools.py
@@ -10,20 +10,21 @@
 
 def _decode_line(line, encoding=None):
     """Decode bytes from binary input streams.
-
+    
     Defaults to decoding from 'latin1'. That differs from the behavior of
     np.compat.asunicode that decodes from 'ascii'.
 
     Parameters
     ----------
     line : str or bytes
-         Line to be decoded.
+        Line to be decoded.
+    encoding :
+         (Default value = None)
 
     Returns
     -------
-    decoded_line : unicode
-         Unicode in Python 2, a str (unicode) in Python 3.
-
+
+    
     """
     if type(line) is bytes:
         if encoding is None:
@@ -35,8 +36,16 @@
 
 
 def _is_string_like(obj):
-    """
-    Check whether obj behaves like a string.
+    """Check whether obj behaves like a string.
+
+    Parameters
+    ----------
+    obj :
+        
+
+    Returns
+    -------
+
     """
     try:
         obj + ''
@@ -46,8 +55,16 @@
 
 
 def _is_bytes_like(obj):
-    """
-    Check whether obj behaves like a bytes object.
+    """Check whether obj behaves like a bytes object.
+
+    Parameters
+    ----------
+    obj :
+        
+
+    Returns
+    -------
+
     """
     try:
         obj + b''
@@ -57,13 +74,15 @@
 
 
 def has_nested_fields(ndtype):
-    """
-    Returns whether one or several fields of a dtype are nested.
+    """Returns whether one or several fields of a dtype are nested.
 
     Parameters
     ----------
     ndtype : dtype
         Data-type of a structured array.
+
+    Returns
+    -------
 
     Raises
     ------
@@ -75,7 +94,6 @@
     >>> dt = np.dtype([('name', 'S4'), ('x', float), ('y', float)])
     >>> np.lib._iotools.has_nested_fields(dt)
     False
-
     """
     for name in ndtype.names or ():
         if ndtype[name].names is not None:
@@ -84,10 +102,9 @@
 
 
 def flatten_dtype(ndtype, flatten_base=False):
-    """
-    Unpack a structured data-type by collapsing nested fields and/or fields
+    """Unpack a structured data-type by collapsing nested fields and/or fields
     with a shape.
-
+    
     Note that the field names are lost.
 
     Parameters
@@ -95,8 +112,11 @@
     ndtype : dtype
         The datatype to collapse
     flatten_base : bool, optional
-       If True, transform a field with a shape into several fields. Default is
-       False.
+        If True, transform a field with a shape into several fields. Default is
+        False.
+
+    Returns
+    -------
 
     Examples
     --------
@@ -114,7 +134,6 @@
      dtype('int64'),
      dtype('int64'),
      dtype('int64')]
-
     """
     names = ndtype.names
     if names is None:
@@ -131,24 +150,10 @@
 
 
 class LineSplitter:
-    """
-    Object to split a string at a given delimiter or at given places.
-
-    Parameters
-    ----------
-    delimiter : str, int, or sequence of ints, optional
-        If a string, character used to delimit consecutive fields.
-        If an integer or a sequence of integers, width(s) of each field.
-    comments : str, optional
-        Character used to mark the beginning of a comment. Default is '#'.
-    autostrip : bool, optional
-        Whether to strip each individual field. Default is True.
-
-    """
+    """Object to split a string at a given delimiter or at given places."""
 
     def autostrip(self, method):
-        """
-        Wrapper to strip each member of the output of `method`.
+        """Wrapper to strip each member of the output of `method`.
 
         Parameters
         ----------
@@ -158,11 +163,8 @@
 
         Returns
         -------
-        wrapped : function
-            The result of wrapping `method`. `wrapped` takes a single input
-            argument and returns a list of strings that are stripped of
-            white-space.
-
+
+        
         """
         return lambda input: [_.strip() for _ in method(input)]
 
@@ -196,7 +198,17 @@
         self.encoding = encoding
 
     def _delimited_splitter(self, line):
-        """Chop off comments, strip, and split at delimiter. """
+        """Chop off comments, strip, and split at delimiter.
+
+        Parameters
+        ----------
+        line :
+            
+
+        Returns
+        -------
+
+        """
         if self.comments is not None:
             line = line.split(self.comments)[0]
         line = line.strip(" \r\n")
@@ -205,6 +217,17 @@
         return line.split(self.delimiter)
 
     def _fixedwidth_splitter(self, line):
+        """
+
+        Parameters
+        ----------
+        line :
+            
+
+        Returns
+        -------
+
+        """
         if self.comments is not None:
             line = line.split(self.comments)[0]
         line = line.strip("\r\n")
@@ -215,6 +238,17 @@
         return [line[s] for s in slices]
 
     def _variablewidth_splitter(self, line):
+        """
+
+        Parameters
+        ----------
+        line :
+            
+
+        Returns
+        -------
+
+        """
         if self.comments is not None:
             line = line.split(self.comments)[0]
         if not line:
@@ -227,14 +261,13 @@
 
 
 class NameValidator:
-    """
-    Object to validate a list of strings to use as field names.
-
+    """Object to validate a list of strings to use as field names.
+    
     The strings are stripped of any non alphanumeric character, and spaces
     are replaced by '_'. During instantiation, the user can define a list
     of names to exclude, as well as a list of invalid characters. Names in
     the exclusion list are appended a '_' character.
-
+    
     Once an instance has been created, it can be called with a list of
     names, and a list of valid names will be created.  The `__call__`
     method accepts an optional keyword "default" that sets the default name
@@ -254,28 +287,28 @@
         * If True, field names are case-sensitive.
         * If False or 'upper', field names are converted to upper case.
         * If 'lower', field names are converted to lower case.
-
         The default value is True.
     replace_space : '_', optional
         Character(s) used in replacement of white spaces.
+
+    Returns
+    -------
 
     Notes
     -----
     Calling an instance of `NameValidator` is the same as calling its
     method `validate`.
-
     Examples
     --------
     >>> validator = np.lib._iotools.NameValidator()
     >>> validator(['file', 'field2', 'with space', 'CaSe'])
     ('file_', 'field2', 'with_space', 'CaSe')
-
+    
     >>> validator = np.lib._iotools.NameValidator(excludelist=['excl'],
     ...                                           deletechars='q',
     ...                                           case_sensitive=False)
     >>> validator(['excl', 'field2', 'no_q', 'with space', 'CaSe'])
     ('EXCL', 'FIELD2', 'NO_Q', 'WITH_SPACE', 'CASE')
-
     """
 
     defaultexcludelist = ['return', 'file', 'print']
@@ -309,8 +342,7 @@
         self.replace_space = replace_space
 
     def validate(self, names, defaultfmt="f%i", nbfields=None):
-        """
-        Validate a list of strings as field names for a structured array.
+        """Validate a list of strings as field names for a structured array.
 
         Parameters
         ----------
@@ -321,7 +353,7 @@
             reduces its length to zero.
         nbfields : integer, optional
             Final number of validated names, used to expand or shrink the
-            initial list of names.
+            initial list of names. (Default value = None)
 
         Returns
         -------
@@ -332,7 +364,6 @@
         -----
         A `NameValidator` instance can be called directly, which is the
         same as calling `validate`. For examples, see `NameValidator`.
-
         """
         # Initial checks ..............
         if (names is None):
@@ -383,8 +414,7 @@
 
 
 def str2bool(value):
-    """
-    Tries to transform a string supposed to represent a boolean to a boolean.
+    """Tries to transform a string supposed to represent a boolean to a boolean.
 
     Parameters
     ----------
@@ -407,7 +437,6 @@
     True
     >>> np.lib._iotools.str2bool('false')
     False
-
     """
     value = value.upper()
     if value == 'TRUE':
@@ -419,42 +448,33 @@
 
 
 class ConverterError(Exception):
-    """
-    Exception raised when an error occurs in a converter for string values.
-
-    """
+    """ """
     pass
 
 
 class ConverterLockError(ConverterError):
-    """
-    Exception raised when an attempt is made to upgrade a locked converter.
-
-    """
+    """ """
     pass
 
 
 class ConversionWarning(UserWarning):
-    """
-    Warning issued when a string converter has a problem.
-
-    Notes
-    -----
-    In `genfromtxt` a `ConversionWarning` is issued if raising exceptions
-    is explicitly suppressed with the "invalid_raise" keyword.
-
-    """
+    """Warning issued when a string converter has a problem."""
     pass
 
 
 class StringConverter:
-    """
-    Factory class for function transforming a string into another object
+    """Factory class for function transforming a string into another object
     (int, float).
-
+    
     After initialization, an instance can be called to transform a string
     into another object. If the string is recognized as representing a
     missing value, a default value is returned.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     Attributes
     ----------
@@ -472,28 +492,6 @@
         order.
     _locked : bool
         Holds `locked` parameter.
-
-    Parameters
-    ----------
-    dtype_or_func : {None, dtype, function}, optional
-        If a `dtype`, specifies the input data type, used to define a basic
-        function and a default value for missing data. For example, when
-        `dtype` is float, the `func` attribute is set to `float` and the
-        default value to `np.nan`.  If a function, this function is used to
-        convert a string to another object. In this case, it is recommended
-        to give an associated default value as input.
-    default : any, optional
-        Value to return by default, that is, when the string to be
-        converted is flagged as missing. If not given, `StringConverter`
-        tries to supply a reasonable default value.
-    missing_values : {None, sequence of str}, optional
-        ``None`` or sequence of strings indicating a missing value. If ``None``
-        then missing values are indicated by empty entries. The default is
-        ``None``.
-    locked : bool, optional
-        Whether the StringConverter should be locked to prevent automatic
-        upgrade or not. Default is False.
-
     """
     _mapper = [(nx.bool_, str2bool, False),
                (nx.int_, int, -1),]
@@ -519,17 +517,47 @@
 
     @classmethod
     def _getdtype(cls, val):
-        """Returns the dtype of the input variable."""
+        """Returns the dtype of the input variable.
+
+        Parameters
+        ----------
+        val :
+            
+
+        Returns
+        -------
+
+        """
         return np.array(val).dtype
 
     @classmethod
     def _getsubdtype(cls, val):
-        """Returns the type of the dtype of the input variable."""
+        """Returns the type of the dtype of the input variable.
+
+        Parameters
+        ----------
+        val :
+            
+
+        Returns
+        -------
+
+        """
         return np.array(val).dtype.type
 
     @classmethod
     def _dtypeortype(cls, dtype):
-        """Returns dtype for datetime64 and type of dtype otherwise."""
+        """Returns dtype for datetime64 and type of dtype otherwise.
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
 
         # This is a bit annoying. We want to return the "general" type in most
         # cases (ie. "string" rather than "S10"), but we want to return the
@@ -541,10 +569,9 @@
 
     @classmethod
     def upgrade_mapper(cls, func, default=None):
-        """
-        Upgrade the mapper of a StringConverter by adding a new function and
+        """Upgrade the mapper of a StringConverter by adding a new function and
         its corresponding default.
-
+        
         The input function (or sequence of functions) and its associated
         default value (if any) is inserted in penultimate position of the
         mapper.  The corresponding type is estimated from the dtype of the
@@ -554,6 +581,11 @@
         ----------
         func : var
             Function, or sequence of functions
+        default :
+             (Default value = None)
+
+        Returns
+        -------
 
         Examples
         --------
@@ -582,6 +614,17 @@
 
     @classmethod
     def _find_map_entry(cls, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         # if a converter for the specific dtype is available use that
         for i, (deftype, func, default_def) in enumerate(cls._mapper):
             if dtype.type == deftype:
@@ -668,12 +711,34 @@
         self._initial_default = default
 
     def _loose_call(self, value):
+        """
+
+        Parameters
+        ----------
+        value :
+            
+
+        Returns
+        -------
+
+        """
         try:
             return self.func(value)
         except ValueError:
             return self.default
 
     def _strict_call(self, value):
+        """
+
+        Parameters
+        ----------
+        value :
+            
+
+        Returns
+        -------
+
+        """
         try:
 
             # We check if we can convert the value using the current function
@@ -702,6 +767,7 @@
         return self._callingfunction(value)
 
     def _do_upgrade(self):
+        """ """
         # Raise an exception if we locked the converter...
         if self._locked:
             errmsg = "Converter is locked and cannot be upgraded"
@@ -722,9 +788,8 @@
             self.default = default
 
     def upgrade(self, value):
-        """
-        Find the best converter for a given string, and return the result.
-
+        """Find the best converter for a given string, and return the result.
+        
         The supplied string `value` is converted by testing different
         converters in order. First the `func` method of the
         `StringConverter` instance is tried, if this fails other available
@@ -738,9 +803,8 @@
 
         Returns
         -------
-        out : any
-            The result of converting `value` with the appropriate converter.
-
+
+        
         """
         self._checked = True
         try:
@@ -750,6 +814,17 @@
             return self.upgrade(value)
 
     def iterupgrade(self, value):
+        """
+
+        Parameters
+        ----------
+        value :
+            
+
+        Returns
+        -------
+
+        """
         self._checked = True
         if not hasattr(value, '__iter__'):
             value = (value,)
@@ -763,8 +838,7 @@
 
     def update(self, func, default=None, testing_value=None,
                missing_values='', locked=False):
-        """
-        Set StringConverter attributes directly.
+        """Set StringConverter attributes directly.
 
         Parameters
         ----------
@@ -785,12 +859,14 @@
             Whether the StringConverter should be locked to prevent
             automatic upgrade or not. Default is False.
 
+        Returns
+        -------
+
         Notes
         -----
         `update` takes the same parameters as the constructor of
         `StringConverter`, except that `func` does not accept a `dtype`
         whereas `dtype_or_func` in the constructor does.
-
         """
         self.func = func
         self._locked = locked
@@ -820,9 +896,8 @@
 
 
 def easy_dtype(ndtype, names=None, defaultfmt="f%i", **validationargs):
-    """
-    Convenience function to create a `np.dtype` object.
-
+    """Convenience function to create a `np.dtype` object.
+    
     The function processes the input `dtype` and matches it with the given
     names.
 
@@ -834,13 +909,18 @@
     names : str or sequence, optional
         Sequence of strings to use as field names for a structured dtype.
         For convenience, `names` can be a string of a comma-separated list
-        of names.
+        of names. (Default value = None)
     defaultfmt : str, optional
         Format string used to define missing names, such as ``"f%i"``
         (default) or ``"fields_%02i"``.
     validationargs : optional
         A series of optional arguments used to initialize a
         `NameValidator`.
+    **validationargs :
+        
+
+    Returns
+    -------
 
     Examples
     --------
@@ -850,12 +930,11 @@
     dtype([('f0', '<i4'), ('f1', '<f8')])
     >>> np.lib._iotools.easy_dtype("i4, f8", defaultfmt="field_%03i")
     dtype([('field_000', '<i4'), ('field_001', '<f8')])
-
+    
     >>> np.lib._iotools.easy_dtype((int, float, float), names="a,b,c")
     dtype([('a', '<i8'), ('b', '<f8'), ('c', '<f8')])
     >>> np.lib._iotools.easy_dtype(float, names="a,b,c")
     dtype([('a', '<f8'), ('b', '<f8'), ('c', '<f8')])
-
     """
     try:
         ndtype = np.dtype(ndtype)
