# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/distutils/ccompiler.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/distutils/ccompiler.py
@@ -36,17 +36,23 @@
 
 
 def _needs_build(obj, cc_args, extra_postargs, pp_opts):
-    """
-    Check if an objects needs to be rebuild based on its dependencies
+    """Check if an objects needs to be rebuild based on its dependencies
 
     Parameters
     ----------
     obj : str
         object file
-
-    Returns
-    -------
-    bool
+    cc_args :
+        
+    extra_postargs :
+        
+    pp_opts :
+        
+
+    Returns
+    -------
+
+    
     """
     # defined in unixcompiler.py
     dep_file = obj + '.d'
@@ -86,6 +92,21 @@
 
 
 def replace_method(klass, method_name, func):
+    """
+
+    Parameters
+    ----------
+    klass :
+        
+    method_name :
+        
+    func :
+        
+
+    Returns
+    -------
+
+    """
     # Py3k does not have unbound method anymore, MethodType does not work
     m = lambda self, *args, **kw: func(self, *args, **kw)
     setattr(klass, method_name, m)
@@ -97,11 +118,16 @@
 ## results if used elsewhere. So, you have been warned..
 
 def CCompiler_find_executables(self):
-    """
-    Does nothing here, but is called by the get_version method and can be
+    """Does nothing here, but is called by the get_version method and can be
     overridden by subclasses. In particular it is redefined in the `FCompiler`
     class where more documentation can be found.
 
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     pass
 
@@ -111,8 +137,7 @@
 
 # Using customized CCompiler.spawn.
 def CCompiler_spawn(self, cmd, display=None):
-    """
-    Execute a command in a sub-process.
+    """Execute a command in a sub-process.
 
     Parameters
     ----------
@@ -120,17 +145,14 @@
         The command to execute.
     display : str or sequence of str, optional
         The text to add to the log file kept by `numpy.distutils`.
-        If not given, `display` is equal to `cmd`.
+        If not given, `display` is equal to `cmd`. (Default value = None)
 
     Returns
     -------
     None
-
-    Raises
-    ------
-    DistutilsExecError
-        If the command failed, i.e. the exit status was not 0.
-
+        
+
+    
     """
     if display is None:
         display = cmd
@@ -176,8 +198,7 @@
 replace_method(CCompiler, 'spawn', CCompiler_spawn)
 
 def CCompiler_object_filenames(self, source_filenames, strip_dir=0, output_dir=''):
-    """
-    Return the name of the object files for the given source files.
+    """Return the name of the object files for the given source files.
 
     Parameters
     ----------
@@ -189,14 +210,12 @@
         the file name prepended by `output_dir` is returned. Default is False.
     output_dir : str, optional
         If given, this path is prepended to the returned paths to the
-        object files.
-
-    Returns
-    -------
-    obj_names : list of str
-        The list of paths to the object files corresponding to the source
-        files in `source_filenames`.
-
+        object files. (Default value = '')
+
+    Returns
+    -------
+
+    
     """
     if output_dir is None:
         output_dir = ''
@@ -225,9 +244,8 @@
 def CCompiler_compile(self, sources, output_dir=None, macros=None,
                       include_dirs=None, debug=0, extra_preargs=None,
                       extra_postargs=None, depends=None):
-    """
-    Compile one or more source files.
-
+    """Compile one or more source files.
+    
     Please refer to the Python distutils API reference for more details.
 
     Parameters
@@ -235,30 +253,30 @@
     sources : list of str
         A list of filenames
     output_dir : str, optional
-        Path to the output directory.
+        Path to the output directory. (Default value = None)
     macros : list of tuples
-        A list of macro definitions.
+        A list of macro definitions. (Default value = None)
     include_dirs : list of str, optional
         The directories to add to the default include file search path for
         this compilation only.
     debug : bool, optional
         Whether or not to output debug symbols in or alongside the object
-        file(s).
+        file(s). (Default value = 0)
     extra_preargs, extra_postargs : ?
         Extra pre- and post-arguments.
     depends : list of str, optional
-        A list of file names that all targets depend on.
+        A list of file names that all targets depend on. (Default value = None)
+    extra_preargs :
+         (Default value = None)
+    extra_postargs :
+         (Default value = None)
 
     Returns
     -------
     objects : list of str
         A list of object file names, one per source file `sources`.
 
-    Raises
-    ------
-    CompileError
-        If compilation fails.
-
+    
     """
     # This method is effective only with Python >=2.3 distutils.
     # Any changes here should be applied also to fcompiler.compile
@@ -299,6 +317,17 @@
     log.info(display)
 
     def single_compile(args):
+        """
+
+        Parameters
+        ----------
+        args :
+            
+
+        Returns
+        -------
+
+        """
         obj, (src, ext) = args
         if not _needs_build(obj, cc_args, extra_postargs, pp_opts):
             return
@@ -366,8 +395,7 @@
 replace_method(CCompiler, 'compile', CCompiler_compile)
 
 def CCompiler_customize_cmd(self, cmd, ignore=()):
-    """
-    Customize compiler using distutils command.
+    """Customize compiler using distutils command.
 
     Parameters
     ----------
@@ -377,16 +405,27 @@
         List of `CCompiler` commands (without ``'set_'``) that should not be
         altered. Strings that are checked for are:
         ``('include_dirs', 'define', 'undef', 'libraries', 'library_dirs',
-        'rpath', 'link_objects')``.
-
-    Returns
-    -------
-    None
-
+        'rpath', 'link_objects')``. (Default value = ())
+
+    Returns
+    -------
+
+    
     """
     log.info('customize %s using %s' % (self.__class__.__name__,
                                         cmd.__class__.__name__))
     def allow(attr):
+        """
+
+        Parameters
+        ----------
+        attr :
+            
+
+        Returns
+        -------
+
+        """
         return getattr(cmd, attr, None) is not None and attr not in ignore
 
     if allow('include_dirs'):
@@ -409,6 +448,17 @@
 replace_method(CCompiler, 'customize_cmd', CCompiler_customize_cmd)
 
 def _compiler_to_string(compiler):
+    """
+
+    Parameters
+    ----------
+    compiler :
+        
+
+    Returns
+    -------
+
+    """
     props = []
     mx = 0
     keys = list(compiler.executables.keys())
@@ -427,21 +477,21 @@
     return '\n'.join(lines)
 
 def CCompiler_show_customization(self):
-    """
-    Print the compiler customizations to stdout.
-
-    Parameters
-    ----------
+    """Print the compiler customizations to stdout.
+
+    Parameters
+    ----------
+    None :
+        
+
+    Returns
+    -------
     None
-
-    Returns
-    -------
-    None
+        
 
     Notes
     -----
     Printing is only done if the distutils log threshold is < 2.
-
     """
     if 0:
         for attrname in ['include_dirs', 'define', 'undef',
@@ -464,9 +514,8 @@
 replace_method(CCompiler, 'show_customization', CCompiler_show_customization)
 
 def CCompiler_customize(self, dist, need_cxx=0):
-    """
-    Do any platform-specific customization of a compiler instance.
-
+    """Do any platform-specific customization of a compiler instance.
+    
     This method calls `distutils.sysconfig.customize_compiler` for
     platform-specific customization, as well as optionally remove a flag
     to suppress spurious warnings in case C++ code is being compiled.
@@ -483,15 +532,15 @@
     Returns
     -------
     None
+        
 
     Notes
     -----
     All the default options used by distutils can be extracted with::
-
+    
       from distutils import sysconfig
       sysconfig.get_config_vars('CC', 'CXX', 'OPT', 'BASECFLAGS',
                                 'CCSHARED', 'LDSHARED', 'SO')
-
     """
     # See FCompiler.customize for suggested usage.
     log.info('customize %s' % (self.__class__.__name__))
@@ -547,8 +596,7 @@
 replace_method(CCompiler, 'customize', CCompiler_customize)
 
 def simple_version_match(pat=r'[-.\d]+', ignore='', start=''):
-    """
-    Simple matching of version numbers, for use in CCompiler and FCompiler.
+    """Simple matching of version numbers, for use in CCompiler and FCompiler.
 
     Parameters
     ----------
@@ -566,13 +614,21 @@
 
     Returns
     -------
-    matcher : callable
-        A function that is appropriate to use as the ``.version_match``
-        attribute of a `CCompiler` class. `matcher` takes a single parameter,
-        a version string.
-
+
+    
     """
     def matcher(self, version_string):
+        """
+
+        Parameters
+        ----------
+        version_string :
+            
+
+        Returns
+        -------
+
+        """
         # version string may appear in the second line, so getting rid
         # of new lines:
         version_string = version_string.replace('\n', ' ')
@@ -594,8 +650,7 @@
     return matcher
 
 def CCompiler_get_version(self, force=False, ok_status=[0]):
-    """
-    Return compiler version, or None if compiler is not available.
+    """Return compiler version, or None if compiler is not available.
 
     Parameters
     ----------
@@ -609,9 +664,8 @@
 
     Returns
     -------
-    version : str or None
-        Version string, in the format of `distutils.version.LooseVersion`.
-
+
+    
     """
     if not force and hasattr(self, 'version'):
         return self.version
@@ -630,6 +684,17 @@
         except AttributeError:
             return None
         def matcher(version_string):
+            """
+
+            Parameters
+            ----------
+            version_string :
+                
+
+            Returns
+            -------
+
+            """
             m = re.match(pat, version_string)
             if not m:
                 return None
@@ -663,18 +728,17 @@
 replace_method(CCompiler, 'get_version', CCompiler_get_version)
 
 def CCompiler_cxx_compiler(self):
-    """
-    Return the C++ compiler.
-
-    Parameters
-    ----------
-    None
-
-    Returns
-    -------
-    cxx : class instance
-        The C++ compiler, as a `CCompiler` instance.
-
+    """Return the C++ compiler.
+
+    Parameters
+    ----------
+    None :
+        
+
+    Returns
+    -------
+
+    
     """
     if self.compiler_type in ('msvc', 'intelw', 'intelemw'):
         return self
@@ -728,6 +792,25 @@
                   verbose=None,
                   dry_run=0,
                   force=0):
+    """
+
+    Parameters
+    ----------
+    plat :
+         (Default value = None)
+    compiler :
+         (Default value = None)
+    verbose :
+         (Default value = None)
+    dry_run :
+         (Default value = 0)
+    force :
+         (Default value = 0)
+
+    Returns
+    -------
+
+    """
     # Try first C compilers from numpy.distutils.
     if verbose is None:
         verbose = log.get_threshold() <= log.INFO
@@ -771,6 +854,23 @@
 
 _distutils_gen_lib_options = gen_lib_options
 def gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries):
+    """
+
+    Parameters
+    ----------
+    compiler :
+        
+    library_dirs :
+        
+    runtime_library_dirs :
+        
+    libraries :
+        
+
+    Returns
+    -------
+
+    """
     # the version of this function provided by CPython allows the following
     # to return lists, which are unpacked automatically:
     # - compiler.runtime_library_dir_option
