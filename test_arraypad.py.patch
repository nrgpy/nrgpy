# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test_arraypad.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test_arraypad.py
@@ -30,6 +30,7 @@
 
 
 class TestAsPairs:
+    """ """
     def test_single_value(self):
         """Test casting for a single value."""
         expected = np.array([[3, 3]] * 10)
@@ -69,6 +70,7 @@
         )
 
     def test_with_none(self):
+        """ """
         expected = ((None, None), (None, None), (None, None))
         assert_equal(
             _as_pairs(None, 3, as_index=False),
@@ -113,14 +115,37 @@
 
 
 class TestConditionalShortcuts:
+    """ """
     @pytest.mark.parametrize("mode", _all_modes.keys())
     def test_zero_padding_shortcuts(self, mode):
+        """
+
+        Parameters
+        ----------
+        mode :
+            
+
+        Returns
+        -------
+
+        """
         test = np.arange(120).reshape(4, 5, 6)
         pad_amt = [(0, 0) for _ in test.shape]
         assert_array_equal(test, np.pad(test, pad_amt, mode=mode))
 
     @pytest.mark.parametrize("mode", ['maximum', 'mean', 'median', 'minimum',])
     def test_shallow_statistic_range(self, mode):
+        """
+
+        Parameters
+        ----------
+        mode :
+            
+
+        Returns
+        -------
+
+        """
         test = np.arange(120).reshape(4, 5, 6)
         pad_amt = [(1, 1) for _ in test.shape]
         assert_array_equal(np.pad(test, pad_amt, mode='edge'),
@@ -128,6 +153,17 @@
 
     @pytest.mark.parametrize("mode", ['maximum', 'mean', 'median', 'minimum',])
     def test_clip_statistic_range(self, mode):
+        """
+
+        Parameters
+        ----------
+        mode :
+            
+
+        Returns
+        -------
+
+        """
         test = np.arange(30).reshape(5, 6)
         pad_amt = [(3, 3) for _ in test.shape]
         assert_array_equal(np.pad(test, pad_amt, mode=mode),
@@ -135,7 +171,9 @@
 
 
 class TestStatistic:
+    """ """
     def test_check_mean_stat_length(self):
+        """ """
         a = np.arange(100).astype('f')
         a = np.pad(a, ((25, 20), ), 'mean', stat_length=((2, 3), ))
         b = np.array(
@@ -160,6 +198,7 @@
         assert_array_equal(a, b)
 
     def test_check_maximum_1(self):
+        """ """
         a = np.arange(100)
         a = np.pad(a, (25, 20), 'maximum')
         b = np.array(
@@ -184,6 +223,7 @@
         assert_array_equal(a, b)
 
     def test_check_maximum_2(self):
+        """ """
         a = np.arange(100) + 1
         a = np.pad(a, (25, 20), 'maximum')
         b = np.array(
@@ -208,6 +248,7 @@
         assert_array_equal(a, b)
 
     def test_check_maximum_stat_length(self):
+        """ """
         a = np.arange(100) + 1
         a = np.pad(a, (25, 20), 'maximum', stat_length=10)
         b = np.array(
@@ -232,6 +273,7 @@
         assert_array_equal(a, b)
 
     def test_check_minimum_1(self):
+        """ """
         a = np.arange(100)
         a = np.pad(a, (25, 20), 'minimum')
         b = np.array(
@@ -256,6 +298,7 @@
         assert_array_equal(a, b)
 
     def test_check_minimum_2(self):
+        """ """
         a = np.arange(100) + 2
         a = np.pad(a, (25, 20), 'minimum')
         b = np.array(
@@ -280,6 +323,7 @@
         assert_array_equal(a, b)
 
     def test_check_minimum_stat_length(self):
+        """ """
         a = np.arange(100) + 1
         a = np.pad(a, (25, 20), 'minimum', stat_length=10)
         b = np.array(
@@ -304,6 +348,7 @@
         assert_array_equal(a, b)
 
     def test_check_median(self):
+        """ """
         a = np.arange(100).astype('f')
         a = np.pad(a, (25, 20), 'median')
         b = np.array(
@@ -328,6 +373,7 @@
         assert_array_equal(a, b)
 
     def test_check_median_01(self):
+        """ """
         a = np.array([[3, 1, 4], [4, 5, 9], [9, 8, 2]])
         a = np.pad(a, 1, 'median')
         b = np.array(
@@ -342,6 +388,7 @@
         assert_array_equal(a, b)
 
     def test_check_median_02(self):
+        """ """
         a = np.array([[3, 1, 4], [4, 5, 9], [9, 8, 2]])
         a = np.pad(a.T, 1, 'median').T
         b = np.array(
@@ -356,6 +403,7 @@
         assert_array_equal(a, b)
 
     def test_check_median_stat_length(self):
+        """ """
         a = np.arange(100).astype('f')
         a[1] = 2.
         a[97] = 96.
@@ -382,6 +430,7 @@
         assert_array_equal(a, b)
 
     def test_check_mean_shape_one(self):
+        """ """
         a = [[4, 5, 6]]
         a = np.pad(a, (5, 7), 'mean', stat_length=2)
         b = np.array(
@@ -404,6 +453,7 @@
         assert_array_equal(a, b)
 
     def test_check_mean_2(self):
+        """ """
         a = np.arange(100).astype('f')
         a = np.pad(a, (25, 20), 'mean')
         b = np.array(
@@ -434,7 +484,17 @@
         "maximum"
     ])
     def test_same_prepend_append(self, mode):
-        """ Test that appended and prepended values are equal """
+        """Test that appended and prepended values are equal
+
+        Parameters
+        ----------
+        mode :
+            
+
+        Returns
+        -------
+
+        """
         # This test is constructed to trigger floating point rounding errors in
         # a way that caused gh-11216 for mode=='mean'
         a = np.array([-1, 2, -1]) + np.array([0, 1e-12, 0], dtype=np.float64)
@@ -446,12 +506,26 @@
         "stat_length", [-2, (-2,), (3, -1), ((5, 2), (-2, 3)), ((-4,), (2,))]
     )
     def test_check_negative_stat_length(self, mode, stat_length):
+        """
+
+        Parameters
+        ----------
+        mode :
+            
+        stat_length :
+            
+
+        Returns
+        -------
+
+        """
         arr = np.arange(30).reshape((6, 5))
         match = "index can't contain negative values"
         with pytest.raises(ValueError, match=match):
             np.pad(arr, 2, mode, stat_length=stat_length)
 
     def test_simple_stat_length(self):
+        """ """
         a = np.arange(30)
         a = np.reshape(a, (6, 5))
         a = np.pad(a, ((2, 3), (3, 2)), mode='mean', stat_length=(3,))
@@ -479,12 +553,34 @@
     )
     @pytest.mark.parametrize("mode", ["mean", "median"])
     def test_zero_stat_length_valid(self, mode):
+        """
+
+        Parameters
+        ----------
+        mode :
+            
+
+        Returns
+        -------
+
+        """
         arr = np.pad([1., 2.], (1, 2), mode, stat_length=0)
         expected = np.array([np.nan, 1., 2., np.nan, np.nan])
         assert_equal(arr, expected)
 
     @pytest.mark.parametrize("mode", ["minimum", "maximum"])
     def test_zero_stat_length_invalid(self, mode):
+        """
+
+        Parameters
+        ----------
+        mode :
+            
+
+        Returns
+        -------
+
+        """
         match = "stat_length of 0 yields no value for padding"
         with pytest.raises(ValueError, match=match):
             np.pad([1., 2.], 0, mode, stat_length=0)
@@ -497,7 +593,9 @@
 
 
 class TestConstant:
+    """ """
     def test_check_constant(self):
+        """ """
         a = np.arange(100)
         a = np.pad(a, (25, 20), 'constant', constant_values=(10, 20))
         b = np.array(
@@ -522,6 +620,7 @@
         assert_array_equal(a, b)
 
     def test_check_constant_zeros(self):
+        """ """
         a = np.arange(100)
         a = np.pad(a, (25, 20), 'constant')
         b = np.array(
@@ -546,6 +645,7 @@
         assert_array_equal(a, b)
 
     def test_check_constant_float(self):
+        """ """
         # If input array is int, but constant_values are float, the dtype of
         # the array to be padded is kept
         arr = np.arange(30).reshape(5, 6)
@@ -566,6 +666,7 @@
         assert_allclose(test, expected)
 
     def test_check_constant_float2(self):
+        """ """
         # If input array is float, and constant_values are float, the dtype of
         # the array to be padded is kept - here retaining the float constants
         arr = np.arange(30).reshape(5, 6)
@@ -587,6 +688,7 @@
         assert_allclose(test, expected)
 
     def test_check_constant_float3(self):
+        """ """
         a = np.arange(100, dtype=float)
         a = np.pad(a, (25, 20), 'constant', constant_values=(-1.1, -1.2))
         b = np.array(
@@ -611,6 +713,7 @@
         assert_allclose(a, b)
 
     def test_check_constant_odd_pad_amount(self):
+        """ """
         arr = np.arange(30).reshape(5, 6)
         test = np.pad(arr, ((1,), (2,)), mode='constant',
                    constant_values=3)
@@ -628,6 +731,7 @@
         assert_allclose(test, expected)
 
     def test_check_constant_pad_2d(self):
+        """ """
         arr = np.arange(4).reshape(2, 2)
         test = np.lib.pad(arr, ((1, 2), (1, 3)), mode='constant',
                           constant_values=((1, 2), (3, 4)))
@@ -641,6 +745,7 @@
         assert_allclose(test, expected)
 
     def test_check_large_integers(self):
+        """ """
         uint64_max = 2 ** 64 - 1
         arr = np.full(5, uint64_max, dtype=np.uint64)
         test = np.pad(arr, 1, mode="constant", constant_values=arr.min())
@@ -654,6 +759,7 @@
         assert_array_equal(test, expected)
 
     def test_check_object_array(self):
+        """ """
         arr = np.empty(1, dtype=object)
         obj_a = object()
         arr[0] = obj_a
@@ -670,13 +776,16 @@
         assert_array_equal(arr, expected)
 
     def test_pad_empty_dimension(self):
+        """ """
         arr = np.zeros((3, 0, 2))
         result = np.pad(arr, [(0,), (2,), (1,)], mode="constant")
         assert result.shape == (3, 4, 4)
 
 
 class TestLinearRamp:
+    """ """
     def test_check_simple(self):
+        """ """
         a = np.arange(100).astype('f')
         a = np.pad(a, (25, 20), 'linear_ramp', end_values=(4, 5))
         b = np.array(
@@ -701,6 +810,7 @@
         assert_allclose(a, b, rtol=1e-5, atol=1e-5)
 
     def test_check_2d(self):
+        """ """
         arr = np.arange(20).reshape(4, 5).astype(np.float64)
         test = np.pad(arr, (2, 2), mode='linear_ramp', end_values=(0, 0))
         expected = np.array(
@@ -716,6 +826,7 @@
 
     @pytest.mark.xfail(exceptions=(AssertionError,))
     def test_object_array(self):
+        """ """
         from fractions import Fraction
         arr = np.array([Fraction(1, 2), Fraction(-1, 2)])
         actual = np.pad(arr, (2, 3), mode='linear_ramp', end_values=0)
@@ -743,11 +854,19 @@
 
     @pytest.mark.parametrize("dtype", _numeric_dtypes)
     def test_negative_difference(self, dtype):
-        """
-        Check correct behavior of unsigned dtypes if there is a negative
+        """Check correct behavior of unsigned dtypes if there is a negative
         difference between the edge to pad and `end_values`. Check both cases
         to be independent of implementation. Test behavior for all other dtypes
         in case dtype casting interferes with complex dtypes. See gh-14191.
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
         """
         x = np.array([3], dtype=dtype)
         result = np.pad(x, 3, mode="linear_ramp", end_values=0)
@@ -761,7 +880,9 @@
 
 
 class TestReflect:
+    """ """
     def test_check_simple(self):
+        """ """
         a = np.arange(100)
         a = np.pad(a, (25, 20), 'reflect')
         b = np.array(
@@ -786,6 +907,7 @@
         assert_array_equal(a, b)
 
     def test_check_odd_method(self):
+        """ """
         a = np.arange(100)
         a = np.pad(a, (25, 20), 'reflect', reflect_type='odd')
         b = np.array(
@@ -810,6 +932,7 @@
         assert_array_equal(a, b)
 
     def test_check_large_pad(self):
+        """ """
         a = [[4, 5, 6], [6, 7, 8]]
         a = np.pad(a, (5, 7), 'reflect')
         b = np.array(
@@ -833,6 +956,7 @@
         assert_array_equal(a, b)
 
     def test_check_shape(self):
+        """ """
         a = [[4, 5, 6]]
         a = np.pad(a, (5, 7), 'reflect')
         b = np.array(
@@ -855,16 +979,19 @@
         assert_array_equal(a, b)
 
     def test_check_01(self):
+        """ """
         a = np.pad([1, 2, 3], 2, 'reflect')
         b = np.array([3, 2, 1, 2, 3, 2, 1])
         assert_array_equal(a, b)
 
     def test_check_02(self):
+        """ """
         a = np.pad([1, 2, 3], 3, 'reflect')
         b = np.array([2, 3, 2, 1, 2, 3, 2, 1, 2])
         assert_array_equal(a, b)
 
     def test_check_03(self):
+        """ """
         a = np.pad([1, 2, 3], 4, 'reflect')
         b = np.array([1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3])
         assert_array_equal(a, b)
@@ -879,6 +1006,17 @@
         "mode", sorted(_all_modes.keys() - {"constant", "empty"})
     )
     def test_pad_empty_dimension(self, mode):
+        """
+
+        Parameters
+        ----------
+        mode :
+            
+
+        Returns
+        -------
+
+        """
         match = ("can't extend empty axis 0 using modes other than 'constant' "
                  "or 'empty'")
         with pytest.raises(ValueError, match=match):
@@ -890,12 +1028,25 @@
 
     @pytest.mark.parametrize("mode", _all_modes.keys())
     def test_pad_non_empty_dimension(self, mode):
+        """
+
+        Parameters
+        ----------
+        mode :
+            
+
+        Returns
+        -------
+
+        """
         result = np.pad(np.ones((2, 0, 2)), ((3,), (0,), (1,)), mode=mode)
         assert result.shape == (8, 0, 4)
 
 
 class TestSymmetric:
+    """ """
     def test_check_simple(self):
+        """ """
         a = np.arange(100)
         a = np.pad(a, (25, 20), 'symmetric')
         b = np.array(
@@ -920,6 +1071,7 @@
         assert_array_equal(a, b)
 
     def test_check_odd_method(self):
+        """ """
         a = np.arange(100)
         a = np.pad(a, (25, 20), 'symmetric', reflect_type='odd')
         b = np.array(
@@ -944,6 +1096,7 @@
         assert_array_equal(a, b)
 
     def test_check_large_pad(self):
+        """ """
         a = [[4, 5, 6], [6, 7, 8]]
         a = np.pad(a, (5, 7), 'symmetric')
         b = np.array(
@@ -968,6 +1121,7 @@
         assert_array_equal(a, b)
 
     def test_check_large_pad_odd(self):
+        """ """
         a = [[4, 5, 6], [6, 7, 8]]
         a = np.pad(a, (5, 7), 'symmetric', reflect_type='odd')
         b = np.array(
@@ -991,6 +1145,7 @@
         assert_array_equal(a, b)
 
     def test_check_shape(self):
+        """ """
         a = [[4, 5, 6]]
         a = np.pad(a, (5, 7), 'symmetric')
         b = np.array(
@@ -1013,23 +1168,28 @@
         assert_array_equal(a, b)
 
     def test_check_01(self):
+        """ """
         a = np.pad([1, 2, 3], 2, 'symmetric')
         b = np.array([2, 1, 1, 2, 3, 3, 2])
         assert_array_equal(a, b)
 
     def test_check_02(self):
+        """ """
         a = np.pad([1, 2, 3], 3, 'symmetric')
         b = np.array([3, 2, 1, 1, 2, 3, 3, 2, 1])
         assert_array_equal(a, b)
 
     def test_check_03(self):
+        """ """
         a = np.pad([1, 2, 3], 6, 'symmetric')
         b = np.array([1, 2, 3, 3, 2, 1, 1, 2, 3, 3, 2, 1, 1, 2, 3])
         assert_array_equal(a, b)
 
 
 class TestWrap:
+    """ """
     def test_check_simple(self):
+        """ """
         a = np.arange(100)
         a = np.pad(a, (25, 20), 'wrap')
         b = np.array(
@@ -1054,6 +1214,7 @@
         assert_array_equal(a, b)
 
     def test_check_large_pad(self):
+        """ """
         a = np.arange(12)
         a = np.reshape(a, (3, 4))
         a = np.pad(a, (10, 12), 'wrap')
@@ -1114,24 +1275,33 @@
         assert_array_equal(a, b)
 
     def test_check_01(self):
+        """ """
         a = np.pad([1, 2, 3], 3, 'wrap')
         b = np.array([1, 2, 3, 1, 2, 3, 1, 2, 3])
         assert_array_equal(a, b)
 
     def test_check_02(self):
+        """ """
         a = np.pad([1, 2, 3], 4, 'wrap')
         b = np.array([3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1])
         assert_array_equal(a, b)
 
     def test_pad_with_zero(self):
+        """ """
         a = np.ones((3, 5))
         b = np.pad(a, (0, 5), mode="wrap")
         assert_array_equal(a, b[:-5, :-5])
 
     def test_repeated_wrapping(self):
-        """
-        Check wrapping on each side individually if the wrapped area is longer
+        """Check wrapping on each side individually if the wrapped area is longer
         than the original array.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         a = np.arange(5)
         b = np.pad(a, (12, 0), mode="wrap")
@@ -1143,7 +1313,9 @@
 
 
 class TestEdge:
+    """ """
     def test_check_simple(self):
+        """ """
         a = np.arange(12)
         a = np.reshape(a, (4, 3))
         a = np.pad(a, ((2, 3), (3, 2)), 'edge')
@@ -1163,6 +1335,7 @@
         assert_array_equal(a, b)
 
     def test_check_width_shape_1_2(self):
+        """ """
         # Check a pad_width of the form ((1, 2),).
         # Regression test for issue gh-7808.
         a = np.array([1, 2, 3])
@@ -1182,20 +1355,41 @@
 
 
 class TestEmpty:
+    """ """
     def test_simple(self):
+        """ """
         arr = np.arange(24).reshape(4, 6)
         result = np.pad(arr, [(2, 3), (3, 1)], mode="empty")
         assert result.shape == (9, 10)
         assert_equal(arr, result[2:-3, 3:-1])
 
     def test_pad_empty_dimension(self):
+        """ """
         arr = np.zeros((3, 0, 2))
         result = np.pad(arr, [(0,), (2,), (1,)], mode="empty")
         assert result.shape == (3, 4, 4)
 
 
 def test_legacy_vector_functionality():
+    """ """
     def _padwithtens(vector, pad_width, iaxis, kwargs):
+        """
+
+        Parameters
+        ----------
+        vector :
+            
+        pad_width :
+            
+        iaxis :
+            
+        kwargs :
+            
+
+        Returns
+        -------
+
+        """
         vector[:pad_width[0]] = 10
         vector[-pad_width[1]:] = 10
 
@@ -1215,6 +1409,7 @@
 
 
 def test_unicode_mode():
+    """ """
     a = np.pad([1], 2, mode=u'constant')
     b = np.array([0, 0, 1, 0, 0])
     assert_array_equal(a, b)
@@ -1222,6 +1417,17 @@
 
 @pytest.mark.parametrize("mode", ["edge", "symmetric", "reflect", "wrap"])
 def test_object_input(mode):
+    """
+
+    Parameters
+    ----------
+    mode :
+        
+
+    Returns
+    -------
+
+    """
     # Regression test for issue gh-11395.
     a = np.full((4, 3), fill_value=None)
     pad_amt = ((2, 3), (3, 2))
@@ -1230,6 +1436,7 @@
 
 
 class TestPadWidth:
+    """ """
     @pytest.mark.parametrize("pad_width", [
         (4, 5, 6, 7),
         ((1,), (2,), (3,)),
@@ -1238,6 +1445,19 @@
     ])
     @pytest.mark.parametrize("mode", _all_modes.keys())
     def test_misshaped_pad_width(self, pad_width, mode):
+        """
+
+        Parameters
+        ----------
+        pad_width :
+            
+        mode :
+            
+
+        Returns
+        -------
+
+        """
         arr = np.arange(30).reshape((6, 5))
         match = "operands could not be broadcast together"
         with pytest.raises(ValueError, match=match):
@@ -1245,6 +1465,17 @@
 
     @pytest.mark.parametrize("mode", _all_modes.keys())
     def test_misshaped_pad_width_2(self, mode):
+        """
+
+        Parameters
+        ----------
+        mode :
+            
+
+        Returns
+        -------
+
+        """
         arr = np.arange(30).reshape((6, 5))
         match = ("input operand has more dimensions than allowed by the axis "
                  "remapping")
@@ -1255,6 +1486,19 @@
         "pad_width", [-2, (-2,), (3, -1), ((5, 2), (-2, 3)), ((-4,), (2,))])
     @pytest.mark.parametrize("mode", _all_modes.keys())
     def test_negative_pad_width(self, pad_width, mode):
+        """
+
+        Parameters
+        ----------
+        pad_width :
+            
+        mode :
+            
+
+        Returns
+        -------
+
+        """
         arr = np.arange(30).reshape((6, 5))
         match = "index can't contain negative values"
         with pytest.raises(ValueError, match=match):
@@ -1272,6 +1516,21 @@
     ])
     @pytest.mark.parametrize("mode", _all_modes.keys())
     def test_bad_type(self, pad_width, dtype, mode):
+        """
+
+        Parameters
+        ----------
+        pad_width :
+            
+        dtype :
+            
+        mode :
+            
+
+        Returns
+        -------
+
+        """
         arr = np.arange(30).reshape((6, 5))
         match = "`pad_width` must be of integral type."
         if dtype is not None:
@@ -1285,6 +1544,7 @@
                 np.pad(arr, np.array(pad_width), mode)
 
     def test_pad_width_as_ndarray(self):
+        """ """
         a = np.arange(12)
         a = np.reshape(a, (4, 3))
         a = np.pad(a, np.array(((2, 3), (3, 2))), 'edge')
@@ -1306,13 +1566,36 @@
     @pytest.mark.parametrize("pad_width", [0, (0, 0), ((0, 0), (0, 0))])
     @pytest.mark.parametrize("mode", _all_modes.keys())
     def test_zero_pad_width(self, pad_width, mode):
+        """
+
+        Parameters
+        ----------
+        pad_width :
+            
+        mode :
+            
+
+        Returns
+        -------
+
+        """
         arr = np.arange(30).reshape(6, 5)
         assert_array_equal(arr, np.pad(arr, pad_width, mode=mode))
 
 
 @pytest.mark.parametrize("mode", _all_modes.keys())
 def test_kwargs(mode):
-    """Test behavior of pad's kwargs for the given mode."""
+    """Test behavior of pad's kwargs for the given mode.
+
+    Parameters
+    ----------
+    mode :
+        
+
+    Returns
+    -------
+
+    """
     allowed = _all_modes[mode]
     not_allowed = {}
     for kwargs in _all_modes.values():
@@ -1328,12 +1611,24 @@
 
 
 def test_constant_zero_default():
+    """ """
     arr = np.array([1, 1])
     assert_array_equal(np.pad(arr, 2), [0, 0, 1, 1, 0, 0])
 
 
 @pytest.mark.parametrize("mode", [1, "const", object(), None, True, False])
 def test_unsupported_mode(mode):
+    """
+
+    Parameters
+    ----------
+    mode :
+        
+
+    Returns
+    -------
+
+    """
     match= "mode '{}' is not supported".format(mode)
     with pytest.raises(ValueError, match=match):
         np.pad([1, 2, 3], 4, mode=mode)
@@ -1341,6 +1636,17 @@
 
 @pytest.mark.parametrize("mode", _all_modes.keys())
 def test_non_contiguous_array(mode):
+    """
+
+    Parameters
+    ----------
+    mode :
+        
+
+    Returns
+    -------
+
+    """
     arr = np.arange(24).reshape(4, 6)[::2, ::2]
     result = np.pad(arr, (2, 3), mode)
     assert result.shape == (7, 8)
@@ -1349,7 +1655,17 @@
 
 @pytest.mark.parametrize("mode", _all_modes.keys())
 def test_memory_layout_persistence(mode):
-    """Test if C and F order is preserved for all pad modes."""
+    """Test if C and F order is preserved for all pad modes.
+
+    Parameters
+    ----------
+    mode :
+        
+
+    Returns
+    -------
+
+    """
     x = np.ones((5, 10), order='C')
     assert np.pad(x, 5, mode).flags["C_CONTIGUOUS"]
     x = np.ones((5, 10), order='F')
@@ -1359,6 +1675,19 @@
 @pytest.mark.parametrize("dtype", _numeric_dtypes)
 @pytest.mark.parametrize("mode", _all_modes.keys())
 def test_dtype_persistence(dtype, mode):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+    mode :
+        
+
+    Returns
+    -------
+
+    """
     arr = np.zeros((3, 2, 1), dtype=dtype)
     result = np.pad(arr, 1, mode=mode)
     assert result.dtype == dtype
