# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/autocall.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/autocall.py
@@ -29,10 +29,17 @@
 #-----------------------------------------------------------------------------
 
 class IPyAutocall(object):
-    """ Instances of this class are always autocalled
+    """Instances of this class are always autocalled
     
     This happens regardless of 'autocall' variable state. Use this to
     develop macro-like mechanisms.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     _ip = None
     rewrite = True
@@ -40,31 +47,40 @@
         self._ip = ip
     
     def set_ip(self, ip):
-        """ Will be used to set _ip point to current ipython instance b/f call
+        """Will be used to set _ip point to current ipython instance b/f call
         
         Override this method if you don't want this to happen.
-        
+
+        Parameters
+        ----------
+        ip :
+            
+
+        Returns
+        -------
+
         """
         self._ip = ip
 
 
 class ExitAutocall(IPyAutocall):
     """An autocallable object which will be added to the user namespace so that
-    exit, exit(), quit or quit() are all valid ways to close the shell."""
+    exit, exit(), quit or quit() are all valid ways to close the shell.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
     rewrite = False
     
     def __call__(self):
         self._ip.ask_exit()
         
 class ZMQExitAutocall(ExitAutocall):
-    """Exit IPython. Autocallable, so it needn't be explicitly called.
-    
-    Parameters
-    ----------
-    keep_kernel : bool
-      If True, leave the kernel alive. Otherwise, tell the kernel to exit too
-      (default).
-    """
+    """Exit IPython. Autocallable, so it needn't be explicitly called."""
     def __call__(self, keep_kernel=False):
         self._ip.keepkernel_on_exit = keep_kernel
         self._ip.ask_exit()
