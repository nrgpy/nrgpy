# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/compat/py3k.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/compat/py3k.py
@@ -36,64 +36,170 @@
 bytes = bytes
 
 def asunicode(s):
+    """
+
+    Parameters
+    ----------
+    s :
+        
+
+    Returns
+    -------
+
+    """
     if isinstance(s, bytes):
         return s.decode('latin1')
     return str(s)
 
 def asbytes(s):
+    """
+
+    Parameters
+    ----------
+    s :
+        
+
+    Returns
+    -------
+
+    """
     if isinstance(s, bytes):
         return s
     return str(s).encode('latin1')
 
 def asstr(s):
+    """
+
+    Parameters
+    ----------
+    s :
+        
+
+    Returns
+    -------
+
+    """
     if isinstance(s, bytes):
         return s.decode('latin1')
     return str(s)
 
 def isfileobj(f):
+    """
+
+    Parameters
+    ----------
+    f :
+        
+
+    Returns
+    -------
+
+    """
     return isinstance(f, (io.FileIO, io.BufferedReader, io.BufferedWriter))
 
 def open_latin1(filename, mode='r'):
+    """
+
+    Parameters
+    ----------
+    filename :
+        
+    mode :
+         (Default value = 'r')
+
+    Returns
+    -------
+
+    """
     return open(filename, mode=mode, encoding='iso-8859-1')
 
 def sixu(s):
+    """
+
+    Parameters
+    ----------
+    s :
+        
+
+    Returns
+    -------
+
+    """
     return s
 
 strchar = 'U'
 
 def getexception():
+    """ """
     return sys.exc_info()[1]
 
 def asbytes_nested(x):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+
+    Returns
+    -------
+
+    """
     if hasattr(x, '__iter__') and not isinstance(x, (bytes, unicode)):
         return [asbytes_nested(y) for y in x]
     else:
         return asbytes(x)
 
 def asunicode_nested(x):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+
+    Returns
+    -------
+
+    """
     if hasattr(x, '__iter__') and not isinstance(x, (bytes, unicode)):
         return [asunicode_nested(y) for y in x]
     else:
         return asunicode(x)
 
 def is_pathlib_path(obj):
-    """
-    Check whether obj is a pathlib.Path object.
-
+    """Check whether obj is a pathlib.Path object.
+    
     Prefer using `isinstance(obj, os_PathLike)` instead of this function.
+
+    Parameters
+    ----------
+    obj :
+        
+
+    Returns
+    -------
+
     """
     return Path is not None and isinstance(obj, Path)
 
 # from Python 3.7
 class contextlib_nullcontext:
     """Context manager that does no additional processing.
-
+    
     Used as a stand-in for a normal context manager, when a particular
     block of code is only sometimes used with a normal context manager:
-
+    
     cm = optional_cm if condition else nullcontext()
     with cm:
         # Perform operation, using optional_cm if condition is True
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, enter_result=None):
@@ -107,9 +213,8 @@
 
 
 def npy_load_module(name, fn, info=None):
-    """
-    Load a module.
-
+    """Load a module.
+    
     .. versionadded:: 1.11.2
 
     Parameters
@@ -119,12 +224,12 @@
     fn : str
         Path to module file.
     info : tuple, optional
-        Only here for backward compatibility with Python 2.*.
-
-    Returns
-    -------
-    mod : module
-
+        Only here for backward compatibility with Python 2.*. (Default value = None)
+
+    Returns
+    -------
+
+    
     """
     # Explicitly lazy import this to avoid paying the cost
     # of importing importlib at startup
@@ -138,6 +243,7 @@
     os_PathLike = os.PathLike
 else:
     def _PurePath__fspath__(self):
+        """ """
         return str(self)
 
     class os_PathLike(abc_ABC):
@@ -156,11 +262,21 @@
 
 
     def os_fspath(path):
-        """Return the path representation of a path-like object.
-        If str or bytes is passed in, it is returned unchanged. Otherwise the
-        os.PathLike interface is used to get the path representation. If the
-        path representation is not str or bytes, TypeError is raised. If the
-        provided path is not str, bytes, or os.PathLike, TypeError is raised.
+        """
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+        type
+            If str or bytes is passed in, it is returned unchanged. Otherwise the
+            os.PathLike interface is used to get the path representation. If the
+            path representation is not str or bytes, TypeError is raised. If the
+            provided path is not str, bytes, or os.PathLike, TypeError is raised.
+
         """
         if isinstance(path, (str, bytes)):
             return path
