# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/utils/path.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/utils/path.py
@@ -23,19 +23,35 @@
 fs_encoding = sys.getfilesystemencoding()
 
 def _writable_dir(path):
-    """Whether `path` is a directory, to which the user has write access."""
+    """Whether `path` is a directory, to which the user has write access.
+
+    Parameters
+    ----------
+    path :
+        
+
+    Returns
+    -------
+
+    """
     return os.path.isdir(path) and os.access(path, os.W_OK)
 
 if sys.platform == 'win32':
     def _get_long_path_name(path):
         """Get a long path name (expand ~) on Windows using ctypes.
 
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
         Examples
         --------
-
         >>> get_long_path_name('c:\\docume~1')
         'c:\\\\Documents and Settings'
-
         """
         try:
             import ctypes
@@ -53,25 +69,55 @@
             return buf.value
 else:
     def _get_long_path_name(path):
-        """Dummy no-op."""
+        """Dummy no-op.
+
+        Parameters
+        ----------
+        path :
+            
+
+        Returns
+        -------
+
+        """
         return path
 
 
 
 def get_long_path_name(path):
     """Expand a path into its long form.
-
+    
     On Windows this expands any ~ in the paths. On other platforms, it is
     a null operation.
+
+    Parameters
+    ----------
+    path :
+        
+
+    Returns
+    -------
+
     """
     return _get_long_path_name(path)
 
 
 def unquote_filename(name, win32=(sys.platform=='win32')):
-    """ On Windows, remove leading and trailing quotes from filenames.
-
+    """On Windows, remove leading and trailing quotes from filenames.
+    
     This function has been deprecated and should not be used any more:
     unquoting is now taken care of by :func:`IPython.utils.process.arg_split`.
+
+    Parameters
+    ----------
+    name :
+        
+    win32 :
+         (Default value = (sys.platform=='win32'))
+
+    Returns
+    -------
+
     """
     warn("'unquote_filename' is deprecated since IPython 5.0 and should not "
          "be used anymore", DeprecationWarning, stacklevel=2)
@@ -83,6 +129,15 @@
 
 def compress_user(path):
     """Reverse of :func:`os.path.expanduser`
+
+    Parameters
+    ----------
+    path :
+        
+
+    Returns
+    -------
+
     """
     home = os.path.expanduser('~')
     if path.startswith(home):
@@ -90,10 +145,20 @@
     return path
 
 def get_py_filename(name, force_win32=None):
-    """Return a valid python filename in the current directory.
-
-    If the given name is not a file, it adds '.py' and searches again.
-    Raises IOError with an informative message if the file isn't found.
+    """
+
+    Parameters
+    ----------
+    name :
+        
+    force_win32 :
+         (Default value = None)
+
+    Returns
+    -------
+    type
+        If the given name is not a file, it adds '.py' and searches again.
+
     """
 
     name = os.path.expanduser(name)
@@ -111,18 +176,18 @@
 
 def filefind(filename, path_dirs=None):
     """Find a file by looking through a sequence of paths.
-
+    
     This iterates through a sequence of paths looking for a file and returns
     the full, absolute path of the first occurrence of the file.  If no set of
     path dirs is given, the filename is tested as is, after running through
     :func:`expandvars` and :func:`expanduser`.  Thus a simple call::
-
+    
         filefind('myfile.txt')
-
+    
     will find the file in the current working dir, but::
-
+    
         filefind('~/myfile.txt')
-
+    
     Will find the file in the users home directory.  This function does not
     automatically try any paths, such as the cwd or the user's home directory.
 
@@ -135,11 +200,12 @@
         need to be absolute or be in the cwd.  If a string, the string is
         put into a sequence and the searched.  If a sequence, walk through
         each element and join with ``filename``, calling :func:`expandvars`
-        and :func:`expanduser` before testing for existence.
-
-    Returns
-    -------
-    Raises :exc:`IOError` or returns absolute path to file.
+        and :func:`expanduser` before testing for existence. (Default value = None)
+
+    Returns
+    -------
+
+    
     """
 
     # If paths are quoted, abspath gets confused, strip them...
@@ -164,27 +230,28 @@
 
 
 class HomeDirError(Exception):
+    """ """
     pass
 
 
 def get_home_dir(require_writable=False) -> str:
     """Return the 'home' directory, as a unicode string.
-
+    
     Uses os.path.expanduser('~'), and checks for writability.
-
+    
     See stdlib docs for how this is determined.
     For Python <3.8, $HOME is first priority on *ALL* platforms.
     For Python >=3.8 on Windows, %HOME% is no longer considered.
 
     Parameters
     ----------
-
-    require_writable : bool [default: False]
-        if True:
-            guarantees the return value is a writable directory, otherwise
-            raises HomeDirError
-        if False:
-            The path is resolved, but it is not guaranteed to exist or be writable.
+    require_writable :
+         (Default value = False)
+
+    Returns
+    -------
+
+    
     """
 
     homedir = os.path.expanduser('~')
@@ -212,9 +279,16 @@
                 'set $HOME environment variable to override' % homedir)
 
 def get_xdg_dir():
-    """Return the XDG_CONFIG_HOME, if it is defined and exists, else None.
-
-    This is only for non-OS X posix (Linux,Unix,etc.) systems.
+    """
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+    type
+        This is only for non-OS X posix (Linux,Unix,etc.) systems.
+
     """
 
     env = os.environ
@@ -231,9 +305,16 @@
 
 
 def get_xdg_cache_dir():
-    """Return the XDG_CACHE_HOME, if it is defined and exists, else None.
-
-    This is only for non-OS X posix (Linux,Unix,etc.) systems.
+    """
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+    type
+        This is only for non-OS X posix (Linux,Unix,etc.) systems.
+
     """
 
     env = os.environ
@@ -251,43 +332,77 @@
 
 @undoc
 def get_ipython_dir():
+    """ """
     warn("get_ipython_dir has moved to the IPython.paths module since IPython 4.0.", DeprecationWarning, stacklevel=2)
     from IPython.paths import get_ipython_dir
     return get_ipython_dir()
 
 @undoc
 def get_ipython_cache_dir():
+    """ """
     warn("get_ipython_cache_dir has moved to the IPython.paths module since IPython 4.0.", DeprecationWarning, stacklevel=2)
     from IPython.paths import get_ipython_cache_dir
     return get_ipython_cache_dir()
 
 @undoc
 def get_ipython_package_dir():
+    """ """
     warn("get_ipython_package_dir has moved to the IPython.paths module since IPython 4.0.", DeprecationWarning, stacklevel=2)
     from IPython.paths import get_ipython_package_dir
     return get_ipython_package_dir()
 
 @undoc
 def get_ipython_module_path(module_str):
+    """
+
+    Parameters
+    ----------
+    module_str :
+        
+
+    Returns
+    -------
+
+    """
     warn("get_ipython_module_path has moved to the IPython.paths module since IPython 4.0.", DeprecationWarning, stacklevel=2)
     from IPython.paths import get_ipython_module_path
     return get_ipython_module_path(module_str)
 
 @undoc
 def locate_profile(profile='default'):
+    """
+
+    Parameters
+    ----------
+    profile :
+         (Default value = 'default')
+
+    Returns
+    -------
+
+    """
     warn("locate_profile has moved to the IPython.paths module since IPython 4.0.", DeprecationWarning, stacklevel=2)
     from IPython.paths import locate_profile
     return locate_profile(profile=profile)
 
 def expand_path(s):
     """Expand $VARS and ~names in a string, like a shell
-
+    
     :Examples:
-
+    
        In [2]: os.environ['FOO']='test'
-
+    
        In [3]: expand_path('variable FOO is $FOO')
        Out[3]: 'variable FOO is test'
+
+    Parameters
+    ----------
+    s :
+        
+
+    Returns
+    -------
+
     """
     # This is a pretty subtle hack. When expand user is given a UNC path
     # on Windows (\\server\share$\%username%), os.path.expandvars, removes
@@ -303,8 +418,29 @@
 
 
 def unescape_glob(string):
-    """Unescape glob pattern in `string`."""
+    """Unescape glob pattern in `string`.
+
+    Parameters
+    ----------
+    string :
+        
+
+    Returns
+    -------
+
+    """
     def unescape(s):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+
+        Returns
+        -------
+
+        """
         for pattern in '*[]!?':
             s = s.replace(r'\{0}'.format(pattern), pattern)
         return s
@@ -312,10 +448,17 @@
 
 
 def shellglob(args):
-    """
-    Do glob expansion for each element in `args` and return a flattened list.
-
+    """Do glob expansion for each element in `args` and return a flattened list.
+    
     Unmatched glob pattern will remain as-is in the returned list.
+
+    Parameters
+    ----------
+    args :
+        
+
+    Returns
+    -------
 
     """
     expanded = []
@@ -329,14 +472,25 @@
 
 def target_outdated(target,deps):
     """Determine whether a target is out of date.
-
+    
     target_outdated(target,deps) -> 1/0
-
+    
     deps: list of filenames which MUST exist.
     target: single filename which may or may not exist.
-
+    
     If target doesn't exist or is older than any file listed in deps, return
     true, otherwise return false.
+
+    Parameters
+    ----------
+    target :
+        
+    deps :
+        
+
+    Returns
+    -------
+
     """
     try:
         target_time = os.path.getmtime(target)
@@ -353,11 +507,25 @@
 
 def target_update(target,deps,cmd):
     """Update a target with a given command given a list of dependencies.
-
+    
     target_update(target,deps,cmd) -> runs cmd if target is outdated.
-
+    
     This is just a wrapper around target_outdated() which calls the given
-    command if target is outdated."""
+    command if target is outdated.
+
+    Parameters
+    ----------
+    target :
+        
+    deps :
+        
+    cmd :
+        
+
+    Returns
+    -------
+
+    """
 
     if target_outdated(target,deps):
         system(cmd)
@@ -367,9 +535,20 @@
 
 def link(src, dst):
     """Hard links ``src`` to ``dst``, returning 0 or errno.
-
+    
     Note that the special errno ``ENOLINK`` will be returned if ``os.link`` isn't
     supported by the operating system.
+
+    Parameters
+    ----------
+    src :
+        
+    dst :
+        
+
+    Returns
+    -------
+
     """
 
     if not hasattr(os, "link"):
@@ -384,12 +563,23 @@
 
 def link_or_copy(src, dst):
     """Attempts to hardlink ``src`` to ``dst``, copying if the link fails.
-
+    
     Attempts to maintain the semantics of ``shutil.copy``.
-
+    
     Because ``os.link`` does not overwrite files, a unique temporary file
     will be used if the target already exists, then that file will be moved
     into place.
+
+    Parameters
+    ----------
+    src :
+        
+    dst :
+        
+
+    Returns
+    -------
+
     """
 
     if os.path.isdir(dst):
@@ -420,11 +610,22 @@
 
 def ensure_dir_exists(path, mode=0o755):
     """ensure that a directory exists
-
+    
     If it doesn't exist, try to create it and protect against a race condition
     if another process is doing the same.
-
+    
     The default permissions are 755, which differ from os.makedirs default of 777.
+
+    Parameters
+    ----------
+    path :
+        
+    mode :
+         (Default value = 0o755)
+
+    Returns
+    -------
+
     """
     if not os.path.exists(path):
         try:
