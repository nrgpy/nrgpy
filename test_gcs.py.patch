# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/test_gcs.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/test_gcs.py
@@ -11,6 +11,17 @@
 
 @td.skip_if_no("gcsfs")
 def test_read_csv_gcs(monkeypatch):
+    """
+
+    Parameters
+    ----------
+    monkeypatch :
+        
+
+    Returns
+    -------
+
+    """
     from fsspec import AbstractFileSystem, registry
 
     registry.target.clear()  # noqa  # remove state
@@ -25,7 +36,21 @@
     )
 
     class MockGCSFileSystem(AbstractFileSystem):
+        """ """
         def open(*args, **kwargs):
+            """
+
+            Parameters
+            ----------
+            *args :
+                
+            **kwargs :
+                
+
+            Returns
+            -------
+
+            """
             return BytesIO(df1.to_csv(index=False).encode())
 
     monkeypatch.setattr("gcsfs.GCSFileSystem", MockGCSFileSystem)
@@ -36,6 +61,17 @@
 
 @td.skip_if_no("gcsfs")
 def test_to_csv_gcs(monkeypatch):
+    """
+
+    Parameters
+    ----------
+    monkeypatch :
+        
+
+    Returns
+    -------
+
+    """
     from fsspec import AbstractFileSystem, registry
 
     registry.target.clear()  # noqa  # remove state
@@ -51,7 +87,21 @@
     s.close = lambda: True
 
     class MockGCSFileSystem(AbstractFileSystem):
+        """ """
         def open(*args, **kwargs):
+            """
+
+            Parameters
+            ----------
+            *args :
+                
+            **kwargs :
+                
+
+            Returns
+            -------
+
+            """
             s.seek(0)
             return s
 
@@ -59,6 +109,19 @@
     df1.to_csv("gs://test/test.csv", index=True)
 
     def mock_get_filepath_or_buffer(*args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         return BytesIO(df1.to_csv(index=True).encode()), None, None, False
 
     monkeypatch.setattr(
@@ -73,7 +136,19 @@
 @td.skip_if_no("fastparquet")
 @td.skip_if_no("gcsfs")
 def test_to_parquet_gcs_new_file(monkeypatch, tmpdir):
-    """Regression test for writing to a not-yet-existent GCS Parquet file."""
+    """Regression test for writing to a not-yet-existent GCS Parquet file.
+
+    Parameters
+    ----------
+    monkeypatch :
+        
+    tmpdir :
+        
+
+    Returns
+    -------
+
+    """
     from fsspec import AbstractFileSystem, registry
 
     registry.target.clear()  # noqa  # remove state
@@ -87,7 +162,23 @@
     )
 
     class MockGCSFileSystem(AbstractFileSystem):
+        """ """
         def open(self, path, mode="r", *args):
+            """
+
+            Parameters
+            ----------
+            path :
+                
+            mode :
+                 (Default value = "r")
+            *args :
+                
+
+            Returns
+            -------
+
+            """
             if "w" not in mode:
                 raise FileNotFoundError
             return open(os.path.join(tmpdir, "test.parquet"), mode)
@@ -100,6 +191,7 @@
 
 @td.skip_if_installed("gcsfs")
 def test_gcs_not_present_exception():
+    """ """
     with pytest.raises(ImportError) as e:
         read_csv("gs://test/test.csv")
         assert "gcsfs library is required" in str(e.value)
