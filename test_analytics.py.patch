# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/multi/test_analytics.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/multi/test_analytics.py
@@ -9,6 +9,17 @@
 
 
 def test_shift(idx):
+    """
+
+    Parameters
+    ----------
+    idx :
+        
+
+    Returns
+    -------
+
+    """
 
     # GH8083 test the base class for shift
     msg = "Not supported for type MultiIndex"
@@ -19,6 +30,17 @@
 
 
 def test_groupby(idx):
+    """
+
+    Parameters
+    ----------
+    idx :
+        
+
+    Returns
+    -------
+
+    """
     groups = idx.groupby(np.array([1, 1, 1, 2, 2, 2]))
     labels = idx.tolist()
     exp = {1: labels[:3], 2: labels[3:]}
@@ -31,6 +53,7 @@
 
 
 def test_truncate_multiindex():
+    """ """
     # GH 34564 for MultiIndex level names check
     major_axis = Index(list(range(4)))
     minor_axis = Index(list(range(2)))
@@ -67,12 +90,24 @@
 
 
 def test_reorder_levels(idx):
+    """
+
+    Parameters
+    ----------
+    idx :
+        
+
+    Returns
+    -------
+
+    """
     # this blows up
     with pytest.raises(IndexError, match="^Too many levels"):
         idx.reorder_levels([2, 1, 0])
 
 
 def test_numpy_repeat():
+    """ """
     reps = 2
     numbers = [1, 2, 3]
     names = np.array(["foo", "bar"])
@@ -87,6 +122,7 @@
 
 
 def test_append_mixed_dtypes():
+    """ """
     # GH 13660
     dti = date_range("2011-01-01", freq="M", periods=3)
     dti_tz = date_range("2011-01-01", freq="M", periods=3, tz="US/Eastern")
@@ -136,6 +172,17 @@
 
 
 def test_iter(idx):
+    """
+
+    Parameters
+    ----------
+    idx :
+        
+
+    Returns
+    -------
+
+    """
     result = list(idx)
     expected = [
         ("foo", "one"),
@@ -149,6 +196,17 @@
 
 
 def test_sub(idx):
+    """
+
+    Parameters
+    ----------
+    idx :
+        
+
+    Returns
+    -------
+
+    """
 
     first = idx
 
@@ -166,6 +224,17 @@
 
 
 def test_map(idx):
+    """
+
+    Parameters
+    ----------
+    idx :
+        
+
+    Returns
+    -------
+
+    """
     # callable
     index = idx
 
@@ -187,6 +256,19 @@
     ],
 )
 def test_map_dictlike(idx, mapper):
+    """
+
+    Parameters
+    ----------
+    idx :
+        
+    mapper :
+        
+
+    Returns
+    -------
+
+    """
 
     if isinstance(idx, (pd.CategoricalIndex, pd.IntervalIndex)):
         pytest.skip(f"skipping tests for {type(idx)}")
@@ -237,6 +319,19 @@
     ids=lambda func: func.__name__,
 )
 def test_numpy_ufuncs(idx, func):
+    """
+
+    Parameters
+    ----------
+    idx :
+        
+    func :
+        
+
+    Returns
+    -------
+
+    """
     # test ufuncs of numpy. see:
     # https://numpy.org/doc/stable/reference/ufuncs.html
 
@@ -259,6 +354,19 @@
     ids=lambda func: func.__name__,
 )
 def test_numpy_type_funcs(idx, func):
+    """
+
+    Parameters
+    ----------
+    idx :
+        
+    func :
+        
+
+    Returns
+    -------
+
+    """
     msg = (
         f"ufunc '{func.__name__}' not supported for the input types, and the inputs "
         "could not be safely coerced to any supported types according to "
