# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexing/multiindex/test_slice.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexing/multiindex/test_slice.py
@@ -11,7 +11,9 @@
 
 
 class TestMultiIndexSlicers:
+    """ """
     def test_per_axis_per_level_getitem(self):
+        """ """
 
         # GH6134
         # example test case
@@ -145,6 +147,7 @@
         tm.assert_frame_equal(result, df.iloc[[1, 3], :])
 
     def test_multiindex_slicers_non_unique(self):
+        """ """
 
         # GH 7106
         # non-unique mi index support
@@ -230,6 +233,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_multiindex_slicers_datetimelike(self):
+        """ """
 
         # GH 7429
         # buggy/inconsistent behavior when slicing with datetime-like
@@ -297,6 +301,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_multiindex_slicers_edges(self):
+        """ """
         # GH 8132
         # various edge cases
         df = DataFrame(
@@ -371,6 +376,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_per_axis_per_level_doc_examples(self):
+        """ """
 
         # test index maker
         idx = pd.IndexSlice
@@ -437,6 +443,7 @@
         df.loc(axis=0)[:, :, ["C1", "C3"]] = -10
 
     def test_loc_axis_arguments(self):
+        """ """
 
         index = MultiIndex.from_product(
             [_mklbl("A", 4), _mklbl("B", 2), _mklbl("C", 4), _mklbl("D", 2)]
@@ -494,6 +501,7 @@
                 df.loc(axis=i)[:, :, ["C1", "C3"]]
 
     def test_loc_axis_single_level_multi_col_indexing_multiindex_col_df(self):
+        """ """
 
         # GH29519
         df = pd.DataFrame(
@@ -508,6 +516,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_loc_axis_single_level_single_col_indexing_multiindex_col_df(self):
+        """ """
 
         # GH29519
         df = pd.DataFrame(
@@ -523,6 +532,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_loc_ax_single_level_indexer_simple_df(self):
+        """ """
 
         # GH29519
         # test single level indexing on single index column data frame
@@ -532,6 +542,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_per_axis_per_level_setitem(self):
+        """ """
 
         # test index maker
         idx = pd.IndexSlice
@@ -670,12 +681,26 @@
         tm.assert_frame_equal(df, expected)
 
     def test_multiindex_label_slicing_with_negative_step(self):
+        """ """
         s = Series(
             np.arange(20), MultiIndex.from_product([list("abcde"), np.arange(4)])
         )
         SLC = pd.IndexSlice
 
         def assert_slices_equivalent(l_slc, i_slc):
+            """
+
+            Parameters
+            ----------
+            l_slc :
+                
+            i_slc :
+                
+
+            Returns
+            -------
+
+            """
             tm.assert_series_equal(s.loc[l_slc], s.iloc[i_slc])
             tm.assert_series_equal(s[l_slc], s.iloc[i_slc])
 
@@ -698,6 +723,7 @@
         assert_slices_equivalent(SLC[("e", 0):("c", 2):-1], SLC[16:9:-1])
 
     def test_multiindex_slice_first_level(self):
+        """ """
         # GH 12697
         freq = ["a", "b", "c", "d"]
         idx = MultiIndex.from_product([freq, np.arange(500)])
@@ -713,6 +739,17 @@
         tm.assert_frame_equal(result, expected)
 
     def test_int_series_slicing(self, multiindex_year_month_day_dataframe_random_data):
+        """
+
+        Parameters
+        ----------
+        multiindex_year_month_day_dataframe_random_data :
+            
+
+        Returns
+        -------
+
+        """
         ymd = multiindex_year_month_day_dataframe_random_data
         s = ymd["A"]
         result = s[5:]
@@ -729,6 +766,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_non_reducing_slice_on_multiindex(self):
+        """ """
         # GH 19861
         dic = {
             ("a", "d"): [1, 4],
