# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/io/common.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/io/common.py
@@ -47,17 +47,17 @@
 
 
 def is_url(url) -> bool:
-    """
-    Check to see if a URL has a valid protocol.
+    """Check to see if a URL has a valid protocol.
 
     Parameters
     ----------
     url : str or unicode
-
-    Returns
-    -------
-    isurl : bool
-        If `url` has a valid protocol return True otherwise False.
+        
+
+    Returns
+    -------
+
+    
     """
     if not isinstance(url, str):
         return False
@@ -67,18 +67,20 @@
 def _expand_user(
     filepath_or_buffer: FilePathOrBuffer[AnyStr],
 ) -> FilePathOrBuffer[AnyStr]:
-    """
-    Return the argument with an initial component of ~ or ~user
+    """Return the argument with an initial component of ~ or ~user
     replaced by that user's home directory.
 
     Parameters
     ----------
     filepath_or_buffer : object to be converted if possible
-
-    Returns
-    -------
-    expanded_filepath_or_buffer : an expanded filepath or the
-                                  input if not expandable
+        
+    filepath_or_buffer: FilePathOrBuffer[AnyStr] :
+        
+
+    Returns
+    -------
+
+    
     """
     if isinstance(filepath_or_buffer, str):
         return os.path.expanduser(filepath_or_buffer)
@@ -86,6 +88,17 @@
 
 
 def validate_header_arg(header) -> None:
+    """
+
+    Parameters
+    ----------
+    header :
+        
+
+    Returns
+    -------
+
+    """
     if isinstance(header, bool):
         raise TypeError(
             "Passing a bool to header is invalid. Use header=None for no header or "
@@ -97,25 +110,28 @@
 def stringify_path(
     filepath_or_buffer: FilePathOrBuffer[AnyStr],
 ) -> FilePathOrBuffer[AnyStr]:
-    """
-    Attempt to convert a path-like object to a string.
+    """Attempt to convert a path-like object to a string.
 
     Parameters
     ----------
     filepath_or_buffer : object to be converted
+        
+    filepath_or_buffer: FilePathOrBuffer[AnyStr] :
+        
 
     Returns
     -------
     str_filepath_or_buffer : maybe a string version of the object
+        
 
     Notes
     -----
     Objects supporting the fspath protocol (python 3.6+) are coerced
     according to its __fspath__ method.
-
+    
     For backwards compatibility with older pythons, pathlib.Path and
     py.path objects are specially coerced.
-
+    
     Any other object is passed through unchanged, which includes bytes,
     strings, buffers, or anything else that's not even path-like.
     """
@@ -128,9 +144,19 @@
 
 
 def urlopen(*args, **kwargs):
-    """
-    Lazy-import wrapper for stdlib urlopen, as that imports a big chunk of
+    """Lazy-import wrapper for stdlib urlopen, as that imports a big chunk of
     the stdlib.
+
+    Parameters
+    ----------
+    *args :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
     """
     import urllib.request
 
@@ -138,9 +164,17 @@
 
 
 def is_fsspec_url(url: FilePathOrBuffer) -> bool:
-    """
-    Returns true if the given URL looks like
+    """Returns true if the given URL looks like
     something fsspec can handle
+
+    Parameters
+    ----------
+    url: FilePathOrBuffer :
+        
+
+    Returns
+    -------
+
     """
     return (
         isinstance(url, str)
@@ -156,25 +190,38 @@
     mode: Optional[str] = None,
     storage_options: Optional[Dict[str, Any]] = None,
 ):
-    """
-    If the filepath_or_buffer is a url, translate and return the buffer.
+    """If the filepath_or_buffer is a url, translate and return the buffer.
     Otherwise passthrough.
 
     Parameters
     ----------
     filepath_or_buffer : a url, filepath (str, py.path.local or pathlib.Path),
-                         or buffer
+        or buffer
     compression : {{'gzip', 'bz2', 'zip', 'xz', None}}, optional
+        
     encoding : the encoding to use to decode bytes, default is 'utf-8'
+        
     mode : str, optional
-    storage_options: dict, optional
+        
+    storage_options : dict, optional
         passed on to fsspec, if using it; this is not yet accessed by the public API
-
-    Returns
-    -------
-    Tuple[FilePathOrBuffer, str, str, bool]
-        Tuple containing the filepath or buffer, the encoding, the compression
-        and should_close.
+    filepath_or_buffer: FilePathOrBuffer :
+        
+    encoding: Optional[str] :
+         (Default value = None)
+    compression: Optional[str] :
+         (Default value = None)
+    mode: Optional[str] :
+         (Default value = None)
+    storage_options: Optional[Dict[str :
+        
+    Any]] :
+         (Default value = None)
+
+    Returns
+    -------
+
+    
     """
     filepath_or_buffer = stringify_path(filepath_or_buffer)
 
@@ -246,16 +293,19 @@
 
 
 def file_path_to_url(path: str) -> str:
-    """
-    converts an absolute native path to a FILE URL.
+    """converts an absolute native path to a FILE URL.
 
     Parameters
     ----------
     path : a path in native format
-
-    Returns
-    -------
-    a valid FILE URL
+        
+    path: str :
+        
+
+    Returns
+    -------
+
+    
     """
     # lazify expensive import (~30ms)
     from urllib.request import pathname2url
@@ -269,8 +319,7 @@
 def get_compression_method(
     compression: Optional[Union[str, Mapping[str, str]]]
 ) -> Tuple[Optional[str], Dict[str, str]]:
-    """
-    Simplifies a compression argument to a compression method string and
+    """Simplifies a compression argument to a compression method string and
     a mapping containing additional arguments.
 
     Parameters
@@ -278,15 +327,19 @@
     compression : str or mapping
         If string, specifies the compression method. If mapping, value at key
         'method' specifies compression method.
+    compression: Optional[Union[str :
+        
+    Mapping[str :
+        
+    str]]] :
+        
 
     Returns
     -------
     tuple of ({compression method}, Optional[str]
-              {compression arguments}, Dict[str, str])
-
-    Raises
-    ------
-    ValueError on mapping missing 'method' key
+        {compression arguments}, Dict[str, str])
+
+    
     """
     if isinstance(compression, Mapping):
         compression_args = dict(compression)
@@ -302,8 +355,7 @@
 def infer_compression(
     filepath_or_buffer: FilePathOrBuffer, compression: Optional[str]
 ) -> Optional[str]:
-    """
-    Get the compression method for filepath_or_buffer. If compression='infer',
+    """Get the compression method for filepath_or_buffer. If compression='infer',
     the inferred compression method is returned. Otherwise, the input
     compression method is returned unchanged, unless it's invalid, in which
     case an error is raised.
@@ -316,14 +368,17 @@
         If 'infer' and `filepath_or_buffer` is path-like, then detect
         compression from the following extensions: '.gz', '.bz2', '.zip',
         or '.xz' (otherwise no compression).
+    filepath_or_buffer: FilePathOrBuffer :
+        
+    compression: Optional[str] :
+        
 
     Returns
     -------
     string or None
-
-    Raises
-    ------
-    ValueError on invalid compression specified.
+        
+
+    
     """
     # No compression has been explicitly specified
     if compression is None:
@@ -362,8 +417,7 @@
     is_text: bool = True,
     errors=None,
 ):
-    """
-    Get file handle for given path/buffer and mode.
+    """Get file handle for given path/buffer and mode.
 
     Parameters
     ----------
@@ -372,7 +426,7 @@
     mode : str
         Mode to open path_or_buf with.
     encoding : str or None
-        Encoding to use.
+        Encoding to use. (Default value = None)
     compression : str or dict, default None
         If string, specifies compression mode. If dict, value at key 'method'
         specifies compression mode. Compression mode must be one of {'infer',
@@ -382,18 +436,13 @@
         no compression). If dict and compression mode is one of
         {'zip', 'gzip', 'bz2'}, or inferred as one of the above,
         other entries passed as additional compression options.
-
         .. versionchanged:: 1.0.0
-
-           May now be a dict with key 'method' as compression mode
-           and other keys as compression options if compression
-           mode is 'zip'.
-
+        May now be a dict with key 'method' as compression mode
+        and other keys as compression options if compression
+        mode is 'zip'.
         .. versionchanged:: 1.1.0
-
-           Passing compression options as keys in dict is now
-           supported for compression modes 'gzip' and 'bz2' as well as 'zip'.
-
+        Passing compression options as keys in dict is now
+        supported for compression modes 'gzip' and 'bz2' as well as 'zip'.
     memory_map : boolean, default False
         See parsers._parser_params for more information.
     is_text : boolean, default True
@@ -403,15 +452,24 @@
         Specifies how encoding and decoding errors are to be handled.
         See the errors argument for :func:`open` for a full list
         of options.
-
-        .. versionadded:: 1.1.0
-
-    Returns
-    -------
-    f : file-like
-        A file-like object.
-    handles : list of file-like objects
-        A list of file-like object that were opened in this function.
+        .. versionadded:: 1.1.0 (Default value = None)
+    mode: str :
+        
+    compression: Optional[Union[str :
+        
+    Mapping[str :
+        
+    Any]]] :
+         (Default value = None)
+    memory_map: bool :
+         (Default value = False)
+    is_text: bool :
+         (Default value = True)
+
+    Returns
+    -------
+
+    
     """
     need_text_wrapping: Tuple[Type["IOBase"], ...]
     try:
@@ -524,12 +582,18 @@
 
 
 class _BytesZipFile(zipfile.ZipFile, BytesIO):  # type: ignore
-    """
-    Wrapper for standard library class ZipFile and allow the returned file-like
+    """Wrapper for standard library class ZipFile and allow the returned file-like
     handle to accept byte strings via `write` method.
-
+    
     BytesIO provides attributes of file-like object and ZipFile.writestr writes
     bytes strings into a member of the archive.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     # GH 17778
@@ -546,6 +610,17 @@
         super().__init__(file, mode, zipfile.ZIP_DEFLATED, **kwargs)
 
     def write(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         archive_name = self.filename
         if self.archive_name is not None:
             archive_name = self.archive_name
@@ -553,20 +628,21 @@
 
     @property
     def closed(self):
+        """ """
         return self.fp is None
 
 
 class _MMapWrapper(abc.Iterator):
-    """
-    Wrapper for the Python's mmap class so that it can be properly read in
+    """Wrapper for the Python's mmap class so that it can be properly read in
     by Python's csv.reader class.
 
     Parameters
     ----------
-    f : file object
-        File object to be mapped onto memory. Must support the 'fileno'
-        method or have an equivalent attribute
-
+
+    Returns
+    -------
+
+    
     """
 
     def __init__(self, f: IO):
