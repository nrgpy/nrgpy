# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/extension/test_string.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/extension/test_string.py
@@ -10,11 +10,13 @@
 
 @pytest.fixture
 def dtype():
+    """ """
     return StringDtype()
 
 
 @pytest.fixture
 def data():
+    """ """
     strings = np.random.choice(list(string.ascii_letters), size=100)
     while strings[0] == strings[1]:
         strings = np.random.choice(list(string.ascii_letters), size=100)
@@ -30,55 +32,82 @@
 
 @pytest.fixture
 def data_for_sorting():
+    """ """
     return StringArray._from_sequence(["B", "C", "A"])
 
 
 @pytest.fixture
 def data_missing_for_sorting():
+    """ """
     return StringArray._from_sequence(["B", pd.NA, "A"])
 
 
 @pytest.fixture
 def na_value():
+    """ """
     return pd.NA
 
 
 @pytest.fixture
 def data_for_grouping():
+    """ """
     return StringArray._from_sequence(["B", "B", pd.NA, pd.NA, "A", "A", "B", "C"])
 
 
 class TestDtype(base.BaseDtypeTests):
+    """ """
     pass
 
 
 class TestInterface(base.BaseInterfaceTests):
+    """ """
     pass
 
 
 class TestConstructors(base.BaseConstructorsTests):
+    """ """
     pass
 
 
 class TestReshaping(base.BaseReshapingTests):
+    """ """
     pass
 
 
 class TestGetitem(base.BaseGetitemTests):
+    """ """
     pass
 
 
 class TestSetitem(base.BaseSetitemTests):
+    """ """
     pass
 
 
 class TestMissing(base.BaseMissingTests):
+    """ """
     pass
 
 
 class TestNoReduce(base.BaseNoReduceTests):
+    """ """
     @pytest.mark.parametrize("skipna", [True, False])
     def test_reduce_series_numeric(self, data, all_numeric_reductions, skipna):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        all_numeric_reductions :
+            
+        skipna :
+            
+
+        Returns
+        -------
+
+        """
         op_name = all_numeric_reductions
 
         if op_name in ["min", "max"]:
@@ -90,34 +119,83 @@
 
 
 class TestMethods(base.BaseMethodsTests):
+    """ """
     @pytest.mark.skip(reason="returns nullable")
     def test_value_counts(self, all_data, dropna):
+        """
+
+        Parameters
+        ----------
+        all_data :
+            
+        dropna :
+            
+
+        Returns
+        -------
+
+        """
         return super().test_value_counts(all_data, dropna)
 
 
 class TestCasting(base.BaseCastingTests):
+    """ """
     pass
 
 
 class TestComparisonOps(base.BaseComparisonOpsTests):
+    """ """
     def _compare_other(self, s, data, op_name, other):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+        data :
+            
+        op_name :
+            
+        other :
+            
+
+        Returns
+        -------
+
+        """
         result = getattr(s, op_name)(other)
         expected = getattr(s.astype(object), op_name)(other).astype("boolean")
         self.assert_series_equal(result, expected)
 
     def test_compare_scalar(self, data, all_compare_operators):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        all_compare_operators :
+            
+
+        Returns
+        -------
+
+        """
         op_name = all_compare_operators
         s = pd.Series(data)
         self._compare_other(s, data, op_name, "abc")
 
 
 class TestParsing(base.BaseParsingTests):
+    """ """
     pass
 
 
 class TestPrinting(base.BasePrintingTests):
+    """ """
     pass
 
 
 class TestGroupBy(base.BaseGroupbyTests):
-    pass
+    """ """
+    pass
