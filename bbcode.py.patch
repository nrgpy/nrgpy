# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pygments/formatters/bbcode.py
+++ b/..//venv/lib/python3.8/site-packages/pygments/formatters/bbcode.py
@@ -17,33 +17,39 @@
 
 
 class BBCodeFormatter(Formatter):
-    """
-    Format tokens with BBcodes. These formatting codes are used by many
+    """Format tokens with BBcodes. These formatting codes are used by many
     bulletin boards, so you can highlight your sourcecode with pygments before
     posting it there.
-
+    
     This formatter has no support for background colors and borders, as there
     are no common BBcode tags for that.
-
+    
     Some board systems (e.g. phpBB) don't support colors in their [code] tag,
     so you can't use the highlighting together with that tag.
     Text in a [code] tag usually is shown with a monospace font (which this
     formatter can do with the ``monofont`` option) and no spaces (which you
     need for indentation) are removed.
-
+    
     Additional options accepted:
-
+    
     `style`
         The style to use, can be a string or a Style subclass (default:
         ``'default'``).
-
+    
     `codetag`
         If set to true, put the output into ``[code]`` tags (default:
         ``false``)
-
+    
     `monofont`
         If set to true, add a tag to show the code with a monospace font
         (default: ``false``).
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'BBCode'
     aliases = ['bbcode', 'bb']
@@ -58,6 +64,7 @@
         self._make_styles()
 
     def _make_styles(self):
+        """ """
         for ttype, ndef in self.style:
             start = end = ''
             if ndef['color']:
@@ -77,6 +84,19 @@
             self.styles[ttype] = start, end
 
     def format_unencoded(self, tokensource, outfile):
+        """
+
+        Parameters
+        ----------
+        tokensource :
+            
+        outfile :
+            
+
+        Returns
+        -------
+
+        """
         if self._code:
             outfile.write('[code]')
         if self._mono:
