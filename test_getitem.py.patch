# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexing/multiindex/test_getitem.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexing/multiindex/test_getitem.py
@@ -19,6 +19,21 @@
     [(0, Series([1], index=[0])), (1, Series([2, 3], index=[1, 2]))],
 )
 def test_series_getitem_multiindex(access_method, level1_value, expected):
+    """
+
+    Parameters
+    ----------
+    access_method :
+        
+    level1_value :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
 
     # GH 6018
     # series regression getitem with a multi-index
@@ -31,6 +46,17 @@
 
 @pytest.mark.parametrize("level0_value", ["D", "A"])
 def test_series_getitem_duplicates_multiindex(level0_value):
+    """
+
+    Parameters
+    ----------
+    level0_value :
+        
+
+    Returns
+    -------
+
+    """
     # GH 5725 the 'A' happens to be a valid Timestamp so the doesn't raise
     # the appropriate error, only in PY3 of course!
 
@@ -59,6 +85,19 @@
 
 @pytest.mark.parametrize("indexer", [lambda s: s[2000, 3], lambda s: s.loc[2000, 3]])
 def test_series_getitem(multiindex_year_month_day_dataframe_random_data, indexer):
+    """
+
+    Parameters
+    ----------
+    multiindex_year_month_day_dataframe_random_data :
+        
+    indexer :
+        
+
+    Returns
+    -------
+
+    """
     s = multiindex_year_month_day_dataframe_random_data["A"]
     expected = s.reindex(s.index[42:65])
     expected.index = expected.index.droplevel(0).droplevel(0)
@@ -73,6 +112,19 @@
 def test_series_getitem_returns_scalar(
     multiindex_year_month_day_dataframe_random_data, indexer
 ):
+    """
+
+    Parameters
+    ----------
+    multiindex_year_month_day_dataframe_random_data :
+        
+    indexer :
+        
+
+    Returns
+    -------
+
+    """
     s = multiindex_year_month_day_dataframe_random_data["A"]
     expected = s.iloc[49]
 
@@ -102,6 +154,23 @@
     expected_error,
     expected_error_msg,
 ):
+    """
+
+    Parameters
+    ----------
+    multiindex_year_month_day_dataframe_random_data :
+        
+    indexer :
+        
+    expected_error :
+        
+    expected_error_msg :
+        
+
+    Returns
+    -------
+
+    """
     s = multiindex_year_month_day_dataframe_random_data["A"]
     with pytest.raises(expected_error, match=expected_error_msg):
         indexer(s)
@@ -110,6 +179,17 @@
 def test_series_getitem_corner_generator(
     multiindex_year_month_day_dataframe_random_data,
 ):
+    """
+
+    Parameters
+    ----------
+    multiindex_year_month_day_dataframe_random_data :
+        
+
+    Returns
+    -------
+
+    """
     s = multiindex_year_month_day_dataframe_random_data["A"]
     result = s[(x > 0 for x in s)]
     expected = s[s > 0]
@@ -122,6 +202,17 @@
 
 
 def test_getitem_simple(multiindex_dataframe_random_data):
+    """
+
+    Parameters
+    ----------
+    multiindex_dataframe_random_data :
+        
+
+    Returns
+    -------
+
+    """
     df = multiindex_dataframe_random_data.T
     expected = df.values[:, 0]
     result = df["foo", "one"].values
@@ -138,12 +229,28 @@
 def test_frame_getitem_simple_key_error(
     multiindex_dataframe_random_data, indexer, expected_error_msg
 ):
+    """
+
+    Parameters
+    ----------
+    multiindex_dataframe_random_data :
+        
+    indexer :
+        
+    expected_error_msg :
+        
+
+    Returns
+    -------
+
+    """
     df = multiindex_dataframe_random_data.T
     with pytest.raises(KeyError, match=expected_error_msg):
         indexer(df)
 
 
 def test_frame_getitem_multicolumn_empty_level():
+    """ """
     df = DataFrame({"a": ["1", "2", "3"], "b": ["2", "3", "4"]})
     df.columns = [
         ["level1 item1", "level1 item2"],
@@ -169,6 +276,21 @@
 def test_frame_getitem_toplevel(
     multiindex_dataframe_random_data, indexer, expected_slice
 ):
+    """
+
+    Parameters
+    ----------
+    multiindex_dataframe_random_data :
+        
+    indexer :
+        
+    expected_slice :
+        
+
+    Returns
+    -------
+
+    """
     df = multiindex_dataframe_random_data.T
     expected = df.reindex(columns=df.columns[expected_slice])
     expected.columns = expected.columns.droplevel(0)
@@ -177,6 +299,7 @@
 
 
 def test_frame_mixed_depth_get():
+    """ """
     arrays = [
         ["a", "top", "top", "routine1", "routine1", "routine2"],
         ["", "OD", "OD", "result1", "result2", "result1"],
@@ -219,6 +342,19 @@
     "indexer", [lambda df: df[("A", "A1")], lambda df: df.loc[:, ("A", "A1")]]
 )
 def test_frame_mi_access(dataframe_with_duplicate_index, indexer):
+    """
+
+    Parameters
+    ----------
+    dataframe_with_duplicate_index :
+        
+    indexer :
+        
+
+    Returns
+    -------
+
+    """
     # GH 4145
     df = dataframe_with_duplicate_index
     index = Index(["h1", "h3", "h5"])
@@ -230,6 +366,17 @@
 
 
 def test_frame_mi_access_returns_series(dataframe_with_duplicate_index):
+    """
+
+    Parameters
+    ----------
+    dataframe_with_duplicate_index :
+        
+
+    Returns
+    -------
+
+    """
     # GH 4146, not returning a block manager when selecting a unique index
     # from a duplicate index
     # as of 4879, this returns a Series (which is similar to what happens
@@ -241,6 +388,17 @@
 
 
 def test_frame_mi_access_returns_frame(dataframe_with_duplicate_index):
+    """
+
+    Parameters
+    ----------
+    dataframe_with_duplicate_index :
+        
+
+    Returns
+    -------
+
+    """
     # selecting a non_unique from the 2nd level
     df = dataframe_with_duplicate_index
     expected = DataFrame(
@@ -253,6 +411,7 @@
 
 
 def test_frame_mi_empty_slice():
+    """ """
     # GH 15454
     df = DataFrame(0, index=range(2), columns=MultiIndex.from_product([[1], [2]]))
     result = df[[]]
