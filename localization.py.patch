# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/_config/localization.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/_config/localization.py
@@ -13,8 +13,7 @@
 
 @contextmanager
 def set_locale(new_locale, lc_var: int = locale.LC_ALL):
-    """
-    Context manager for temporarily setting a locale.
+    """Context manager for temporarily setting a locale.
 
     Parameters
     ----------
@@ -24,6 +23,11 @@
         "en_US.UTF-8".
     lc_var : int, default `locale.LC_ALL`
         The category of the locale being set.
+    lc_var: int :
+         (Default value = locale.LC_ALL)
+
+    Returns
+    -------
 
     Notes
     -----
@@ -45,8 +49,7 @@
 
 
 def can_set_locale(lc: str, lc_var: int = locale.LC_ALL) -> bool:
-    """
-    Check to see if we can set a locale, and subsequently get the locale,
+    """Check to see if we can set a locale, and subsequently get the locale,
     without raising an Exception.
 
     Parameters
@@ -55,11 +58,15 @@
         The locale to attempt to set.
     lc_var : int, default `locale.LC_ALL`
         The category of the locale being set.
+    lc: str :
+        
+    lc_var: int :
+         (Default value = locale.LC_ALL)
 
     Returns
     -------
-    bool
-        Whether the passed locale can be set
+
+    
     """
     try:
         with set_locale(lc, lc_var=lc_var):
@@ -72,8 +79,7 @@
 
 
 def _valid_locales(locales, normalize):
-    """
-    Return a list of normalized locales that do not throw an ``Exception``
+    """Return a list of normalized locales that do not throw an ``Exception``
     when set.
 
     Parameters
@@ -85,8 +91,8 @@
 
     Returns
     -------
-    valid_locales : list
-        A list of valid locales.
+
+    
     """
     if normalize:
         normalizer = lambda x: locale.normalize(x.strip())
@@ -97,38 +103,32 @@
 
 
 def _default_locale_getter():
+    """ """
     raw_locales = subprocess.check_output(["locale -a"], shell=True)
     return raw_locales
 
 
 def get_locales(prefix=None, normalize=True, locale_getter=_default_locale_getter):
-    """
-    Get all the locales that are available on the system.
+    """Get all the locales that are available on the system.
 
     Parameters
     ----------
     prefix : str
         If not ``None`` then return only those locales with the prefix
         provided. For example to get all English language locales (those that
-        start with ``"en"``), pass ``prefix="en"``.
+        start with ``"en"``), pass ``prefix="en"``. (Default value = None)
     normalize : bool
         Call ``locale.normalize`` on the resulting list of available locales.
         If ``True``, only locales that can be set without throwing an
-        ``Exception`` are returned.
+        ``Exception`` are returned. (Default value = True)
     locale_getter : callable
         The function to use to retrieve the current locales. This should return
-        a string with each locale separated by a newline character.
+        a string with each locale separated by a newline character. (Default value = _default_locale_getter)
 
     Returns
     -------
-    locales : list of strings
-        A list of locale strings that can be set with ``locale.setlocale()``.
-        For example::
 
-            locale.setlocale(locale.LC_ALL, locale_string)
-
-    On error will return None (no locale available, e.g. Windows)
-
+    
     """
     try:
         raw_locales = locale_getter()
