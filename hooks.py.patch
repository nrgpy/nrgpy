# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/hooks.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/hooks.py
@@ -18,12 +18,36 @@
     import os
 
     def calljed(self,filename, linenum):
+        """
+
+        Parameters
+        ----------
+        filename :
+            
+        linenum :
+            
+
+        Returns
+        -------
+
+        """
         "My editor hook calls the jed editor directly."
         print "Calling my own editor, jed ..."
         if os.system('jed +%d %s' % (linenum,filename)) != 0:
             raise TryNext()
 
     def load_ipython_extension(ip):
+        """
+
+        Parameters
+        ----------
+        ip :
+            
+
+        Returns
+        -------
+
+        """
         ip.set_hook('editor', calljed)
 
 """
@@ -56,10 +80,24 @@
 
 def editor(self, filename, linenum=None, wait=True):
     """Open the default editor at the given filename and linenumber.
-
+    
     This is IPython's default editor hook, you can use it as an example to
     write your own modified one.  To set your own editor function as the
-    new editor hook, call ip.set_hook('editor',yourfunc)."""
+    new editor hook, call ip.set_hook('editor',yourfunc).
+
+    Parameters
+    ----------
+    filename :
+        
+    linenum :
+         (Default value = None)
+    wait :
+         (Default value = True)
+
+    Returns
+    -------
+
+    """
 
     # IPython configures a default editor at startup by reading $EDITOR from
     # the environment, and falling back on vi (unix) or notepad (win32).
@@ -83,14 +121,35 @@
 
 
 def synchronize_with_editor(self, filename, linenum, column):
+    """
+
+    Parameters
+    ----------
+    filename :
+        
+    linenum :
+        
+    column :
+        
+
+    Returns
+    -------
+
+    """
         pass
 
 
 class CommandChainDispatcher:
-    """ Dispatch calls to a chain of commands until some func can handle it
-
+    """Dispatch calls to a chain of commands until some func can handle it
+    
     Usage: instantiate, execute "add" to add commands (with optional
     priority), execute normally via f() calling mechanism.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     """
     def __init__(self,commands=None):
@@ -120,7 +179,19 @@
         return str(self.chain)
 
     def add(self, func, priority=0):
-        """ Add a func to the cmd chain with given priority """
+        """Add a func to the cmd chain with given priority
+
+        Parameters
+        ----------
+        func :
+            
+        priority :
+             (Default value = 0)
+
+        Returns
+        -------
+
+        """
         self.chain.append((priority, func))
         self.chain.sort(key=lambda x: x[0])
 
@@ -133,9 +204,16 @@
 
 
 def shutdown_hook(self):
-    """ default shutdown hook
-
+    """default shutdown hook
+    
     Typically, shutdown hooks should raise TryNext so all shutdown ops are done
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     #print "default shutdown hook ok" # dbg
@@ -143,36 +221,54 @@
 
 
 def late_startup_hook(self):
-    """ Executed after ipython has been constructed and configured
-
-    """
+    """Executed after ipython has been constructed and configured"""
     #print "default startup hook ok" # dbg
 
 
 def show_in_pager(self, data, start, screen_lines):
-    """ Run a string through pager """
+    """Run a string through pager
+
+    Parameters
+    ----------
+    data :
+        
+    start :
+        
+    screen_lines :
+        
+
+    Returns
+    -------
+
+    """
     # raising TryNext here will use the default paging functionality
     raise TryNext
 
 
 def pre_prompt_hook(self):
-    """ Run before displaying the next prompt
-
+    """Run before displaying the next prompt
+    
     Use this e.g. to display output from asynchronous operations (in order
     to not mess up text entry)
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     return None
 
 
 def pre_run_code_hook(self):
-    """ Executed before running the (prefiltered) code in IPython """
+    """Executed before running the (prefiltered) code in IPython"""
     return None
 
 
 def clipboard_get(self):
-    """ Get text from the clipboard.
-    """
+    """Get text from the clipboard."""
     from ..lib.clipboard import (
         osx_clipboard_get, tkinter_clipboard_get,
         win32_clipboard_get
