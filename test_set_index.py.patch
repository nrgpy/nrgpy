# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/frame/methods/test_set_index.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/frame/methods/test_set_index.py
@@ -8,7 +8,9 @@
 
 
 class TestSetIndex:
+    """ """
     def test_set_index_empty_column(self):
+        """ """
         # GH#1971
         df = DataFrame(
             [
@@ -27,6 +29,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_set_index_multiindexcolumns(self):
+        """ """
         columns = MultiIndex.from_tuples([("foo", 1), ("foo", 2), ("bar", 1)])
         df = DataFrame(np.random.randn(3, 3), columns=columns)
 
@@ -38,6 +41,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_set_index_timezone(self):
+        """ """
         # GH#12358
         # tz-aware Series should retain the tz
         idx = DatetimeIndex(["2014-01-01 10:10:10"], tz="UTC").tz_convert("Europe/Rome")
@@ -47,6 +51,7 @@
         assert df.set_index(df.A).index[0].hour == 11
 
     def test_set_index_cast_datetimeindex(self):
+        """ """
         df = DataFrame(
             {
                 "A": [datetime(2000, 1, 1) + timedelta(i) for i in range(1000)],
@@ -58,6 +63,7 @@
         assert isinstance(idf.index, DatetimeIndex)
 
     def test_set_index_dst(self):
+        """ """
         di = date_range("2006-10-29 00:00:00", periods=3, freq="H", tz="US/Pacific")
 
         df = DataFrame(data={"a": [0, 1, 2], "b": [3, 4, 5]}, index=di).reset_index()
@@ -75,6 +81,17 @@
         tm.assert_frame_equal(res, exp)
 
     def test_set_index(self, float_string_frame):
+        """
+
+        Parameters
+        ----------
+        float_string_frame :
+            
+
+        Returns
+        -------
+
+        """
         df = float_string_frame
         idx = Index(np.arange(len(df))[::-1])
 
@@ -84,6 +101,7 @@
             df.set_index(idx[::2])
 
     def test_set_index_names(self):
+        """ """
         df = tm.makeDataFrame()
         df.index.name = "name"
 
@@ -114,6 +132,7 @@
         tm.assert_index_equal(df.set_index([df.index, idx2]).index, mi2)
 
     def test_set_index_cast(self):
+        """ """
         # issue casting an index then set_index
         df = DataFrame(
             {"A": [1.1, 2.2, 3.3], "B": [5.0, 6.1, 7.2]}, index=[2010, 2011, 2012]
@@ -126,6 +145,23 @@
     @pytest.mark.parametrize("inplace", [True, False])
     @pytest.mark.parametrize("drop", [True, False])
     def test_set_index_drop_inplace(self, frame_of_index_cols, drop, inplace, keys):
+        """
+
+        Parameters
+        ----------
+        frame_of_index_cols :
+            
+        drop :
+            
+        inplace :
+            
+        keys :
+            
+
+        Returns
+        -------
+
+        """
         df = frame_of_index_cols
 
         if isinstance(keys, list):
@@ -148,6 +184,21 @@
     @pytest.mark.parametrize("keys", ["A", "C", ["A", "B"], ("tuple", "as", "label")])
     @pytest.mark.parametrize("drop", [True, False])
     def test_set_index_append(self, frame_of_index_cols, drop, keys):
+        """
+
+        Parameters
+        ----------
+        frame_of_index_cols :
+            
+        drop :
+            
+        keys :
+            
+
+        Returns
+        -------
+
+        """
         df = frame_of_index_cols
 
         keys = keys if isinstance(keys, list) else [keys]
@@ -165,6 +216,21 @@
     @pytest.mark.parametrize("keys", ["A", "C", ["A", "B"], ("tuple", "as", "label")])
     @pytest.mark.parametrize("drop", [True, False])
     def test_set_index_append_to_multiindex(self, frame_of_index_cols, drop, keys):
+        """
+
+        Parameters
+        ----------
+        frame_of_index_cols :
+            
+        drop :
+            
+        keys :
+            
+
+        Returns
+        -------
+
+        """
         # append to existing multiindex
         df = frame_of_index_cols.set_index(["D"], drop=drop, append=True)
 
@@ -176,6 +242,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_set_index_after_mutation(self):
+        """ """
         # GH#1590
         df = DataFrame({"val": [0, 1, 2], "key": ["a", "b", "c"]})
         expected = DataFrame({"val": [1, 2]}, Index(["b", "c"], name="key"))
@@ -205,6 +272,25 @@
     def test_set_index_pass_single_array(
         self, frame_of_index_cols, drop, append, index_name, box
     ):
+        """
+
+        Parameters
+        ----------
+        frame_of_index_cols :
+            
+        drop :
+            
+        append :
+            
+        index_name :
+            
+        box :
+            
+
+        Returns
+        -------
+
+        """
         df = frame_of_index_cols
         df.index.name = index_name
 
@@ -241,6 +327,25 @@
     def test_set_index_pass_arrays(
         self, frame_of_index_cols, drop, append, index_name, box
     ):
+        """
+
+        Parameters
+        ----------
+        frame_of_index_cols :
+            
+        drop :
+            
+        append :
+            
+        index_name :
+            
+        box :
+            
+
+        Returns
+        -------
+
+        """
         df = frame_of_index_cols
         df.index.name = index_name
 
@@ -292,6 +397,27 @@
     def test_set_index_pass_arrays_duplicate(
         self, frame_of_index_cols, drop, append, index_name, box1, box2
     ):
+        """
+
+        Parameters
+        ----------
+        frame_of_index_cols :
+            
+        drop :
+            
+        append :
+            
+        index_name :
+            
+        box1 :
+            
+        box2 :
+            
+
+        Returns
+        -------
+
+        """
         df = frame_of_index_cols
         df.index.name = index_name
 
@@ -324,6 +450,21 @@
     @pytest.mark.parametrize("append", [True, False])
     @pytest.mark.parametrize("drop", [True, False])
     def test_set_index_pass_multiindex(self, frame_of_index_cols, drop, append):
+        """
+
+        Parameters
+        ----------
+        frame_of_index_cols :
+            
+        drop :
+            
+        append :
+            
+
+        Returns
+        -------
+
+        """
         df = frame_of_index_cols
         keys = MultiIndex.from_arrays([df["A"], df["B"]], names=["A", "B"])
 
@@ -335,6 +476,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_construction_with_categorical_index(self):
+        """ """
         ci = tm.makeCategoricalIndex(10)
         ci.name = "B"
 
@@ -354,7 +496,19 @@
 
 
 class TestSetIndexInvalid:
+    """ """
     def test_set_index_verify_integrity(self, frame_of_index_cols):
+        """
+
+        Parameters
+        ----------
+        frame_of_index_cols :
+            
+
+        Returns
+        -------
+
+        """
         df = frame_of_index_cols
 
         with pytest.raises(ValueError, match="Index has duplicate keys"):
@@ -366,6 +520,21 @@
     @pytest.mark.parametrize("append", [True, False])
     @pytest.mark.parametrize("drop", [True, False])
     def test_set_index_raise_keys(self, frame_of_index_cols, drop, append):
+        """
+
+        Parameters
+        ----------
+        frame_of_index_cols :
+            
+        drop :
+            
+        append :
+            
+
+        Returns
+        -------
+
+        """
         df = frame_of_index_cols
 
         with pytest.raises(KeyError, match="['foo', 'bar', 'baz']"):
@@ -389,6 +558,23 @@
     @pytest.mark.parametrize("drop", [True, False])
     @pytest.mark.parametrize("box", [set], ids=["set"])
     def test_set_index_raise_on_type(self, frame_of_index_cols, box, drop, append):
+        """
+
+        Parameters
+        ----------
+        frame_of_index_cols :
+            
+        box :
+            
+        drop :
+            
+        append :
+            
+
+        Returns
+        -------
+
+        """
         df = frame_of_index_cols
 
         msg = 'The parameter "keys" may be a column key, .*'
@@ -412,6 +598,25 @@
     def test_set_index_raise_on_len(
         self, frame_of_index_cols, box, length, drop, append
     ):
+        """
+
+        Parameters
+        ----------
+        frame_of_index_cols :
+            
+        box :
+            
+        length :
+            
+        drop :
+            
+        append :
+            
+
+        Returns
+        -------
+
+        """
         # GH 24984
         df = frame_of_index_cols  # has length 5
 
@@ -429,10 +634,13 @@
 
 
 class TestSetIndexCustomLabelType:
+    """ """
     def test_set_index_custom_label_type(self):
+        """ """
         # GH#24969
 
         class Thing:
+            """ """
             def __init__(self, name, color):
                 self.name = name
                 self.color = color
@@ -468,6 +676,7 @@
             df.set_index([thing3])
 
     def test_set_index_custom_label_hashable_iterable(self):
+        """ """
         # GH#24969
 
         # actual example discussed in GH 24984 was e.g. for shapely.geometry
@@ -475,6 +684,7 @@
         # iterable; using frozenset as a stand-in for testing here
 
         class Thing(frozenset):
+            """ """
             # need to stabilize repr for KeyError (due to random order in sets)
             def __repr__(self) -> str:
                 tmp = sorted(self)
@@ -507,10 +717,12 @@
             df.set_index([thing3])
 
     def test_set_index_custom_label_type_raises(self):
+        """ """
         # GH#24969
 
         # purposefully inherit from something unhashable
         class Thing(set):
+            """ """
             def __init__(self, name, color):
                 self.name = name
                 self.color = color
