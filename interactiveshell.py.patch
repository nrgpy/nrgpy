# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/terminal/interactiveshell.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/terminal/interactiveshell.py
@@ -62,6 +62,7 @@
 }
 
 def get_default_editor():
+    """ """
     try:
         return os.environ['EDITOR']
     except KeyError:
@@ -91,6 +92,17 @@
 _use_simple_prompt = ('IPY_TEST_SIMPLE_PROMPT' in os.environ) or (not _is_tty)
 
 def black_reformat_handler(text_before_cursor):
+    """
+
+    Parameters
+    ----------
+    text_before_cursor :
+        
+
+    Returns
+    -------
+
+    """
     import black
     formatted_text = black.format_str(text_before_cursor, mode=black.FileMode())
     if not text_before_cursor.endswith('\n') and formatted_text.endswith('\n'):
@@ -99,6 +111,7 @@
 
 
 class TerminalInteractiveShell(InteractiveShell):
+    """ """
     mime_renderers = Dict().tag(config=True)
 
     space_for_menu = Integer(6, help='Number of line at the bottom of the screen '
@@ -124,6 +137,7 @@
 
     @property
     def debugger_cls(self):
+        """ """
         return Pdb if self.simple_prompt else TerminalPdb
 
     confirm_exit = Bool(True,
@@ -155,6 +169,17 @@
 
     @validate('editing_mode')
     def _validate_editing_mode(self, proposal):
+        """
+
+        Parameters
+        ----------
+        proposal :
+            
+
+        Returns
+        -------
+
+        """
         if proposal['value'].lower() == 'vim':
             proposal['value']= 'vi'
         elif proposal['value'].lower() == 'default':
@@ -168,12 +193,34 @@
 
     @observe('editing_mode')
     def _editing_mode(self, change):
+        """
+
+        Parameters
+        ----------
+        change :
+            
+
+        Returns
+        -------
+
+        """
         u_mode = change.new.upper()
         if self.pt_app:
             self.pt_app.editing_mode = u_mode
 
     @observe('autoformatter')
     def _autoformatter_changed(self, change):
+        """
+
+        Parameters
+        ----------
+        change :
+            
+
+        Returns
+        -------
+
+        """
         formatter = change.new
         if formatter is None:
             self.reformat_handler = lambda x:x
@@ -185,9 +232,21 @@
     @observe('highlighting_style')
     @observe('colors')
     def _highlighting_style_changed(self, change):
+        """
+
+        Parameters
+        ----------
+        change :
+            
+
+        Returns
+        -------
+
+        """
         self.refresh_style()
 
     def refresh_style(self):
+        """ """
         self._style = self._make_style_from_name_or_cls(self.highlighting_style)
 
 
@@ -212,6 +271,7 @@
 
     @default('prompts')
     def _prompts_default(self):
+        """ """
         return self.prompts_class(self)
 
 #    @observe('prompts')
@@ -220,6 +280,7 @@
 
     @default('displayhook_class')
     def _displayhook_class_default(self):
+        """ """
         return RichPromptDisplayHook
 
     term_title = Bool(True,
@@ -263,6 +324,17 @@
 
     @observe('term_title')
     def init_term_title(self, change=None):
+        """
+
+        Parameters
+        ----------
+        change :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         # Enable or disable the terminal title.
         if self.term_title:
             toggle_set_term_title(True)
@@ -271,10 +343,12 @@
             toggle_set_term_title(False)
 
     def restore_term_title(self):
+        """ """
         if self.term_title:
             restore_term_title()
 
     def init_display_formatter(self):
+        """ """
         super(TerminalInteractiveShell, self).init_display_formatter()
         # terminal only supports plain text
         self.display_formatter.active_types = ['text/plain']
@@ -282,10 +356,12 @@
         self.display_formatter.ipython_display_formatter.enabled = False
 
     def init_prompt_toolkit_cli(self):
+        """ """
         if self.simple_prompt:
             # Fall back to plain non-interactive output for tests.
             # This is very limited.
             def prompt():
+                """ """
                 prompt_text = "".join(x[1] for x in self.prompts.in_prompt_tokens())
                 lines = [input(prompt_text)]
                 prompt_continuation = "".join(x[1] for x in self.prompts.continuation_prompt_tokens())
@@ -330,10 +406,18 @@
                             **self._extra_prompt_options())
 
     def _make_style_from_name_or_cls(self, name_or_cls):
-        """
-        Small wrapper that make an IPython compatible style from a style name
-
+        """Small wrapper that make an IPython compatible style from a style name
+        
         We need that to add style for prompt ... etc.
+
+        Parameters
+        ----------
+        name_or_cls :
+            
+
+        Returns
+        -------
+
         """
         style_overrides = {}
         if name_or_cls == 'legacy':
@@ -398,6 +482,7 @@
 
     @property
     def pt_complete_style(self):
+        """ """
         return {
             'multicolumn': CompleteStyle.MULTI_COLUMN,
             'column': CompleteStyle.COLUMN,
@@ -406,13 +491,13 @@
 
     @property
     def color_depth(self):
+        """ """
         return (ColorDepth.TRUE_COLOR if self.true_color else None)
 
     def _extra_prompt_options(self):
-        """
-        Return the current layout option for the current Terminal InteractiveShell
-        """
+        """ """
         def get_message():
+            """ """
             return PygmentsTokens(self.prompts.in_prompt_tokens())
 
         if self.editing_mode == 'emacs':
@@ -449,6 +534,7 @@
         return options
 
     def prompt_for_code(self):
+        """ """
         if self.rl_next_input:
             default = self.rl_next_input
             self.rl_next_input = None
@@ -480,6 +566,7 @@
         return text
 
     def enable_win_unicode_console(self):
+        """ """
         # Since IPython 7.10 doesn't support python < 3.6 and PEP 528, Python uses the unicode APIs for the Windows
         # console by default, so WUC shouldn't be needed.
         from warnings import warn
@@ -488,6 +575,7 @@
              stacklevel=2)
 
     def init_io(self):
+        """ """
         if sys.platform not in {'win32', 'cli'}:
             return
 
@@ -505,10 +593,12 @@
             io.stderr = io.IOStream(sys.stderr)
 
     def init_magics(self):
+        """ """
         super(TerminalInteractiveShell, self).init_magics()
         self.register_magics(TerminalMagics)
 
     def init_alias(self):
+        """ """
         # The parent class defines aliases that can be safely used with any
         # frontend.
         super(TerminalInteractiveShell, self).init_alias()
@@ -530,11 +620,23 @@
         self.debugger_history = InMemoryHistory()
 
     def ask_exit(self):
+        """ """
         self.keep_running = False
 
     rl_next_input = None
 
     def interact(self, display_banner=DISPLAY_BANNER_DEPRECATED):
+        """
+
+        Parameters
+        ----------
+        display_banner :
+             (Default value = DISPLAY_BANNER_DEPRECATED)
+
+        Returns
+        -------
+
+        """
 
         if display_banner is not DISPLAY_BANNER_DEPRECATED:
             warn('interact `display_banner` argument is deprecated since IPython 5.0. Call `show_banner()` if needed.', DeprecationWarning, stacklevel=2)
@@ -555,6 +657,17 @@
                     self.run_cell(code, store_history=True)
 
     def mainloop(self, display_banner=DISPLAY_BANNER_DEPRECATED):
+        """
+
+        Parameters
+        ----------
+        display_banner :
+             (Default value = DISPLAY_BANNER_DEPRECATED)
+
+        Returns
+        -------
+
+        """
         # An extra layer of protection in case someone mashing Ctrl-C breaks
         # out of our internal code.
         if display_banner is not DISPLAY_BANNER_DEPRECATED:
@@ -578,11 +691,33 @@
 
     _inputhook = None
     def inputhook(self, context):
+        """
+
+        Parameters
+        ----------
+        context :
+            
+
+        Returns
+        -------
+
+        """
         if self._inputhook is not None:
             self._inputhook(context)
 
     active_eventloop = None
     def enable_gui(self, gui=None):
+        """
+
+        Parameters
+        ----------
+        gui :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if gui and (gui != 'inline') :
             self.active_eventloop, self._inputhook =\
                 get_inputhook_name_and_func(gui)
@@ -615,7 +750,17 @@
     system = InteractiveShell.system_raw
 
     def auto_rewrite_input(self, cmd):
-        """Overridden from the parent class to use fancy rewriting prompt"""
+        """Overridden from the parent class to use fancy rewriting prompt
+
+        Parameters
+        ----------
+        cmd :
+            
+
+        Returns
+        -------
+
+        """
         if not self.show_rewritten_input:
             return
 
@@ -630,7 +775,17 @@
 
     _prompts_before = None
     def switch_doctest_mode(self, mode):
-        """Switch prompts to classic for %doctest_mode"""
+        """Switch prompts to classic for %doctest_mode
+
+        Parameters
+        ----------
+        mode :
+            
+
+        Returns
+        -------
+
+        """
         if mode:
             self._prompts_before = self.prompts
             self.prompts = ClassicPrompts(self)
