# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/io/excel/_openpyxl.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/io/excel/_openpyxl.py
@@ -10,6 +10,7 @@
 
 
 class _OpenpyxlWriter(ExcelWriter):
+    """ """
     engine = "openpyxl"
     supported_extensions = (".xlsx", ".xlsm")
 
@@ -37,19 +38,22 @@
                     self.book.remove_sheet(self.book.worksheets[0])
 
     def save(self):
-        """
-        Save workbook to disk.
-        """
+        """Save workbook to disk."""
         return self.book.save(self.path)
 
     @classmethod
     def _convert_to_style(cls, style_dict):
-        """
-        Converts a style_dict to an openpyxl style object.
-
-        Parameters
-        ----------
-        style_dict : style dictionary to convert
+        """Converts a style_dict to an openpyxl style object.
+
+        Parameters
+        ----------
+        style_dict :
+            
+
+        Returns
+        -------
+
+        
         """
         from openpyxl.style import Style
 
@@ -69,27 +73,24 @@
 
     @classmethod
     def _convert_to_style_kwargs(cls, style_dict):
-        """
-        Convert a style_dict to a set of kwargs suitable for initializing
+        """Convert a style_dict to a set of kwargs suitable for initializing
         or updating-on-copy an openpyxl v2 style object.
 
         Parameters
         ----------
         style_dict : dict
             A dict with zero or more of the following keys (or their synonyms).
-                'font'
-                'fill'
-                'border' ('borders')
-                'alignment'
-                'number_format'
-                'protection'
-
-        Returns
-        -------
-        style_kwargs : dict
-            A dict with the same, normalized keys as ``style_dict`` but each
-            value has been replaced with a native openpyxl style object of the
-            appropriate class.
+            'font'
+            'fill'
+            'border' ('borders')
+            'alignment'
+            'number_format'
+            'protection'
+
+        Returns
+        -------
+
+        
         """
         _style_key_map = {"borders": "border"}
 
@@ -106,25 +107,25 @@
 
     @classmethod
     def _convert_to_color(cls, color_spec):
-        """
-        Convert ``color_spec`` to an openpyxl v2 Color object.
+        """Convert ``color_spec`` to an openpyxl v2 Color object.
 
         Parameters
         ----------
         color_spec : str, dict
             A 32-bit ARGB hex string, or a dict with zero or more of the
             following keys.
-                'rgb'
-                'indexed'
-                'auto'
-                'theme'
-                'tint'
-                'index'
-                'type'
-
-        Returns
-        -------
-        color : openpyxl.styles.Color
+            'rgb'
+            'indexed'
+            'auto'
+            'theme'
+            'tint'
+            'index'
+            'type'
+
+        Returns
+        -------
+
+        
         """
         from openpyxl.styles import Color
 
@@ -135,31 +136,31 @@
 
     @classmethod
     def _convert_to_font(cls, font_dict):
-        """
-        Convert ``font_dict`` to an openpyxl v2 Font object.
+        """Convert ``font_dict`` to an openpyxl v2 Font object.
 
         Parameters
         ----------
         font_dict : dict
             A dict with zero or more of the following keys (or their synonyms).
-                'name'
-                'size' ('sz')
-                'bold' ('b')
-                'italic' ('i')
-                'underline' ('u')
-                'strikethrough' ('strike')
-                'color'
-                'vertAlign' ('vertalign')
-                'charset'
-                'scheme'
-                'family'
-                'outline'
-                'shadow'
-                'condense'
-
-        Returns
-        -------
-        font : openpyxl.styles.Font
+            'name'
+            'size' ('sz')
+            'bold' ('b')
+            'italic' ('i')
+            'underline' ('u')
+            'strikethrough' ('strike')
+            'color'
+            'vertAlign' ('vertalign')
+            'charset'
+            'scheme'
+            'family'
+            'outline'
+            'shadow'
+            'condense'
+
+        Returns
+        -------
+
+        
         """
         from openpyxl.styles import Font
 
@@ -184,8 +185,7 @@
 
     @classmethod
     def _convert_to_stop(cls, stop_seq):
-        """
-        Convert ``stop_seq`` to a list of openpyxl v2 Color objects,
+        """Convert ``stop_seq`` to a list of openpyxl v2 Color objects,
         suitable for initializing the ``GradientFill`` ``stop`` parameter.
 
         Parameters
@@ -196,34 +196,35 @@
 
         Returns
         -------
-        stop : list of openpyxl.styles.Color
+
+        
         """
         return map(cls._convert_to_color, stop_seq)
 
     @classmethod
     def _convert_to_fill(cls, fill_dict):
-        """
-        Convert ``fill_dict`` to an openpyxl v2 Fill object.
+        """Convert ``fill_dict`` to an openpyxl v2 Fill object.
 
         Parameters
         ----------
         fill_dict : dict
             A dict with one or more of the following keys (or their synonyms),
-                'fill_type' ('patternType', 'patterntype')
-                'start_color' ('fgColor', 'fgcolor')
-                'end_color' ('bgColor', 'bgcolor')
+            'fill_type' ('patternType', 'patterntype')
+            'start_color' ('fgColor', 'fgcolor')
+            'end_color' ('bgColor', 'bgcolor')
             or one or more of the following keys (or their synonyms).
-                'type' ('fill_type')
-                'degree'
-                'left'
-                'right'
-                'top'
-                'bottom'
-                'stop'
-
-        Returns
-        -------
-        fill : openpyxl.styles.Fill
+            'type' ('fill_type')
+            'degree'
+            'left'
+            'right'
+            'top'
+            'bottom'
+            'stop'
+
+        Returns
+        -------
+
+        
         """
         from openpyxl.styles import GradientFill, PatternFill
 
@@ -265,20 +266,20 @@
 
     @classmethod
     def _convert_to_side(cls, side_spec):
-        """
-        Convert ``side_spec`` to an openpyxl v2 Side object.
+        """Convert ``side_spec`` to an openpyxl v2 Side object.
 
         Parameters
         ----------
         side_spec : str, dict
             A string specifying the border style, or a dict with zero or more
             of the following keys (or their synonyms).
-                'style' ('border_style')
-                'color'
-
-        Returns
-        -------
-        side : openpyxl.styles.Side
+            'style' ('border_style')
+            'color'
+
+        Returns
+        -------
+
+        
         """
         from openpyxl.styles import Side
 
@@ -299,28 +300,28 @@
 
     @classmethod
     def _convert_to_border(cls, border_dict):
-        """
-        Convert ``border_dict`` to an openpyxl v2 Border object.
+        """Convert ``border_dict`` to an openpyxl v2 Border object.
 
         Parameters
         ----------
         border_dict : dict
             A dict with zero or more of the following keys (or their synonyms).
-                'left'
-                'right'
-                'top'
-                'bottom'
-                'diagonal'
-                'diagonal_direction'
-                'vertical'
-                'horizontal'
-                'diagonalUp' ('diagonalup')
-                'diagonalDown' ('diagonaldown')
-                'outline'
-
-        Returns
-        -------
-        border : openpyxl.styles.Border
+            'left'
+            'right'
+            'top'
+            'bottom'
+            'diagonal'
+            'diagonal_direction'
+            'vertical'
+            'horizontal'
+            'diagonalUp' ('diagonalup')
+            'diagonalDown' ('diagonaldown')
+            'outline'
+
+        Returns
+        -------
+
+        
         """
         from openpyxl.styles import Border
 
@@ -340,22 +341,22 @@
 
     @classmethod
     def _convert_to_alignment(cls, alignment_dict):
-        """
-        Convert ``alignment_dict`` to an openpyxl v2 Alignment object.
+        """Convert ``alignment_dict`` to an openpyxl v2 Alignment object.
 
         Parameters
         ----------
         alignment_dict : dict
             A dict with zero or more of the following keys (or their synonyms).
-                'horizontal'
-                'vertical'
-                'text_rotation'
-                'wrap_text'
-                'shrink_to_fit'
-                'indent'
-        Returns
-        -------
-        alignment : openpyxl.styles.Alignment
+            'horizontal'
+            'vertical'
+            'text_rotation'
+            'wrap_text'
+            'shrink_to_fit'
+
+        Returns
+        -------
+
+        
         """
         from openpyxl.styles import Alignment
 
@@ -363,36 +364,37 @@
 
     @classmethod
     def _convert_to_number_format(cls, number_format_dict):
-        """
-        Convert ``number_format_dict`` to an openpyxl v2.1.0 number format
+        """Convert ``number_format_dict`` to an openpyxl v2.1.0 number format
         initializer.
 
         Parameters
         ----------
         number_format_dict : dict
             A dict with zero or more of the following keys.
-                'format_code' : str
-
-        Returns
-        -------
-        number_format : str
+            'format_code' : str
+
+        Returns
+        -------
+
+        
         """
         return number_format_dict["format_code"]
 
     @classmethod
     def _convert_to_protection(cls, protection_dict):
-        """
-        Convert ``protection_dict`` to an openpyxl v2 Protection object.
+        """Convert ``protection_dict`` to an openpyxl v2 Protection object.
 
         Parameters
         ----------
         protection_dict : dict
             A dict with zero or more of the following keys.
-                'locked'
-                'hidden'
-
-        Returns
-        -------
+            'locked'
+            'hidden'
+
+        Returns
+        -------
+
+        
         """
         from openpyxl.styles import Protection
 
@@ -401,6 +403,25 @@
     def write_cells(
         self, cells, sheet_name=None, startrow=0, startcol=0, freeze_panes=None
     ):
+        """
+
+        Parameters
+        ----------
+        cells :
+            
+        sheet_name :
+             (Default value = None)
+        startrow :
+             (Default value = 0)
+        startcol :
+             (Default value = 0)
+        freeze_panes :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         # Write the frame cells using openpyxl.
         sheet_name = self._get_sheet_name(sheet_name)
 
@@ -468,24 +489,29 @@
 
 class _OpenpyxlReader(_BaseExcelReader):
     def __init__(self, filepath_or_buffer: FilePathOrBuffer) -> None:
-        """
-        Reader using openpyxl engine.
-
-        Parameters
-        ----------
-        filepath_or_buffer : string, path object or Workbook
-            Object to be parsed.
-        """
+    """Reader using openpyxl engine."""
         import_optional_dependency("openpyxl")
         super().__init__(filepath_or_buffer)
 
     @property
     def _workbook_class(self):
+        """ """
         from openpyxl import Workbook
 
         return Workbook
 
     def load_workbook(self, filepath_or_buffer: FilePathOrBuffer):
+        """
+
+        Parameters
+        ----------
+        filepath_or_buffer: FilePathOrBuffer :
+            
+
+        Returns
+        -------
+
+        """
         from openpyxl import load_workbook
 
         return load_workbook(
@@ -493,21 +519,58 @@
         )
 
     def close(self):
+        """ """
         # https://stackoverflow.com/questions/31416842/
         #  openpyxl-does-not-close-excel-workbook-in-read-only-mode
         self.book.close()
 
     @property
     def sheet_names(self) -> List[str]:
+        """ """
         return self.book.sheetnames
 
     def get_sheet_by_name(self, name: str):
+        """
+
+        Parameters
+        ----------
+        name: str :
+            
+
+        Returns
+        -------
+
+        """
         return self.book[name]
 
     def get_sheet_by_index(self, index: int):
+        """
+
+        Parameters
+        ----------
+        index: int :
+            
+
+        Returns
+        -------
+
+        """
         return self.book.worksheets[index]
 
     def _convert_cell(self, cell, convert_float: bool) -> Scalar:
+        """
+
+        Parameters
+        ----------
+        cell :
+            
+        convert_float: bool :
+            
+
+        Returns
+        -------
+
+        """
 
         # TODO: replace with openpyxl constants
         if cell.is_date:
@@ -530,6 +593,19 @@
         return cell.value
 
     def get_sheet_data(self, sheet, convert_float: bool) -> List[List[Scalar]]:
+        """
+
+        Parameters
+        ----------
+        sheet :
+            
+        convert_float: bool :
+            
+
+        Returns
+        -------
+
+        """
         data: List[List[Scalar]] = []
         for row in sheet.rows:
             data.append([self._convert_cell(cell, convert_float) for cell in row])
