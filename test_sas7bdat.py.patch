# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/sas/test_sas7bdat.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/sas/test_sas7bdat.py
@@ -17,8 +17,20 @@
 # https://github.com/cython/cython/issues/1720
 @pytest.mark.filterwarnings("ignore:can't resolve package:ImportWarning")
 class TestSAS7BDAT:
+    """ """
     @pytest.fixture(autouse=True)
     def setup_method(self, datapath):
+        """
+
+        Parameters
+        ----------
+        datapath :
+            
+
+        Returns
+        -------
+
+        """
         self.dirpath = datapath("io", "sas", "data")
         self.data = []
         self.test_ix = [list(range(1, 16)), [16]]
@@ -37,6 +49,7 @@
             self.data.append(df)
 
     def test_from_file(self):
+        """ """
         for j in 0, 1:
             df0 = self.data[j]
             for k in self.test_ix[j]:
@@ -45,6 +58,7 @@
                 tm.assert_frame_equal(df, df0)
 
     def test_from_buffer(self):
+        """ """
         for j in 0, 1:
             df0 = self.data[j]
             for k in self.test_ix[j]:
@@ -60,6 +74,7 @@
                 rdr.close()
 
     def test_from_iterator(self):
+        """ """
         for j in 0, 1:
             df0 = self.data[j]
             for k in self.test_ix[j]:
@@ -72,6 +87,7 @@
                 rdr.close()
 
     def test_path_pathlib(self):
+        """ """
         for j in 0, 1:
             df0 = self.data[j]
             for k in self.test_ix[j]:
@@ -81,6 +97,7 @@
 
     @td.skip_if_no("py.path")
     def test_path_localpath(self):
+        """ """
         from py.path import local as LocalPath
 
         for j in 0, 1:
@@ -91,6 +108,7 @@
                 tm.assert_frame_equal(df, df0)
 
     def test_iterator_loop(self):
+        """ """
         # github #13654
         for j in 0, 1:
             for k in self.test_ix[j]:
@@ -104,6 +122,7 @@
                     rdr.close()
 
     def test_iterator_read_too_much(self):
+        """ """
         # github #14734
         k = self.test_ix[0][0]
         fname = os.path.join(self.dirpath, f"test{k}.sas7bdat")
@@ -118,6 +137,17 @@
 
 
 def test_encoding_options(datapath):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     fname = datapath("io", "sas", "data", "test1.sas7bdat")
     df1 = pd.read_sas(fname)
     df2 = pd.read_sas(fname, encoding="utf-8")
@@ -138,6 +168,17 @@
 
 
 def test_productsales(datapath):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     fname = datapath("io", "sas", "data", "productsales.sas7bdat")
     df = pd.read_sas(fname, encoding="utf-8")
     fname = datapath("io", "sas", "data", "productsales.csv")
@@ -148,6 +189,17 @@
 
 
 def test_12659(datapath):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     fname = datapath("io", "sas", "data", "test_12659.sas7bdat")
     df = pd.read_sas(fname)
     fname = datapath("io", "sas", "data", "test_12659.csv")
@@ -157,6 +209,17 @@
 
 
 def test_airline(datapath):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     fname = datapath("io", "sas", "data", "airline.sas7bdat")
     df = pd.read_sas(fname)
     fname = datapath("io", "sas", "data", "airline.csv")
@@ -166,6 +229,17 @@
 
 
 def test_date_time(datapath):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     # Support of different SAS date/datetime formats (PR #15871)
     fname = datapath("io", "sas", "data", "datetime.sas7bdat")
     df = pd.read_sas(fname)
@@ -179,6 +253,17 @@
 
 
 def test_compact_numerical_values(datapath):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     # Regression test for #21616
     fname = datapath("io", "sas", "data", "cars.sas7bdat")
     df = pd.read_sas(fname, encoding="latin-1")
@@ -195,6 +280,17 @@
 
 
 def test_many_columns(datapath):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     # Test for looking for column information in more places (PR #22628)
     fname = datapath("io", "sas", "data", "many_columns.sas7bdat")
     df = pd.read_sas(fname, encoding="latin-1")
@@ -204,6 +300,17 @@
 
 
 def test_inconsistent_number_of_rows(datapath):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     # Regression test for issue #16615. (PR #22628)
     fname = datapath("io", "sas", "data", "load_log.sas7bdat")
     df = pd.read_sas(fname, encoding="latin-1")
@@ -211,6 +318,17 @@
 
 
 def test_zero_variables(datapath):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     # Check if the SAS file has zero variables (PR #18184)
     fname = datapath("io", "sas", "data", "zero_variables.sas7bdat")
     with pytest.raises(EmptyDataError):
@@ -218,6 +336,17 @@
 
 
 def round_datetime_to_ms(ts):
+    """
+
+    Parameters
+    ----------
+    ts :
+        
+
+    Returns
+    -------
+
+    """
     if isinstance(ts, datetime):
         return ts.replace(microsecond=int(round(ts.microsecond, -3) / 1000) * 1000)
     elif isinstance(ts, str):
@@ -228,6 +357,17 @@
 
 
 def test_max_sas_date(datapath):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     # GH 20927
     # NB. max datetime in SAS dataset is 31DEC9999:23:59:59.999
     #    but this is read as 29DEC9999:23:59:59.998993 by a buggy
@@ -263,6 +403,17 @@
 
 
 def test_max_sas_date_iterator(datapath):
+    """
+
+    Parameters
+    ----------
+    datapath :
+        
+
+    Returns
+    -------
+
+    """
     # GH 20927
     # when called as an iterator, only those chunks with a date > pd.Timestamp.max
     # are returned as datetime.datetime, if this happens that whole chunk is returned
