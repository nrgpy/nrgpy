# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/compat/numpy/function.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/compat/numpy/function.py
@@ -33,6 +33,7 @@
 
 
 class CompatValidator:
+    """ """
     def __init__(
         self,
         defaults,
@@ -84,6 +85,19 @@
 
 
 def process_skipna(skipna, args):
+    """
+
+    Parameters
+    ----------
+    skipna :
+        
+    args :
+        
+
+    Returns
+    -------
+
+    """
     if isinstance(skipna, ndarray) or skipna is None:
         args = (skipna,) + args
         skipna = True
@@ -92,12 +106,24 @@
 
 
 def validate_argmin_with_skipna(skipna, args, kwargs):
-    """
-    If 'Series.argmin' is called via the 'numpy' library,
+    """If 'Series.argmin' is called via the 'numpy' library,
     the third parameter in its signature is 'out', which
     takes either an ndarray or 'None', so check if the
     'skipna' parameter is either an instance of ndarray or
     is None, since 'skipna' itself should be a boolean
+
+    Parameters
+    ----------
+    skipna :
+        
+    args :
+        
+    kwargs :
+        
+
+    Returns
+    -------
+
     """
     skipna, args = process_skipna(skipna, args)
     validate_argmin(args, kwargs)
@@ -105,12 +131,24 @@
 
 
 def validate_argmax_with_skipna(skipna, args, kwargs):
-    """
-    If 'Series.argmax' is called via the 'numpy' library,
+    """If 'Series.argmax' is called via the 'numpy' library,
     the third parameter in its signature is 'out', which
     takes either an ndarray or 'None', so check if the
     'skipna' parameter is either an instance of ndarray or
     is None, since 'skipna' itself should be a boolean
+
+    Parameters
+    ----------
+    skipna :
+        
+    args :
+        
+    kwargs :
+        
+
+    Returns
+    -------
+
     """
     skipna, args = process_skipna(skipna, args)
     validate_argmax(args, kwargs)
@@ -142,12 +180,24 @@
 
 
 def validate_argsort_with_ascending(ascending, args, kwargs):
-    """
-    If 'Categorical.argsort' is called via the 'numpy' library, the
+    """If 'Categorical.argsort' is called via the 'numpy' library, the
     first parameter in its signature is 'axis', which takes either
     an integer or 'None', so check if the 'ascending' parameter has
     either integer type or is None, since 'ascending' itself should
     be a boolean
+
+    Parameters
+    ----------
+    ascending :
+        
+    args :
+        
+    kwargs :
+        
+
+    Returns
+    -------
+
     """
     if is_integer(ascending) or ascending is None:
         args = (ascending,) + args
@@ -164,11 +214,23 @@
 
 
 def validate_clip_with_axis(axis, args, kwargs):
-    """
-    If 'NDFrame.clip' is called via the numpy library, the third
+    """If 'NDFrame.clip' is called via the numpy library, the third
     parameter in its signature is 'out', which can takes an ndarray,
     so check if the 'axis' parameter is an instance of ndarray, since
     'axis' itself should either be an integer or None
+
+    Parameters
+    ----------
+    axis :
+        
+    args :
+        
+    kwargs :
+        
+
+    Returns
+    -------
+
     """
     if isinstance(axis, ndarray):
         args = (axis,) + args
@@ -190,11 +252,25 @@
 
 
 def validate_cum_func_with_skipna(skipna, args, kwargs, name):
-    """
-    If this function is called via the 'numpy' library, the third
+    """If this function is called via the 'numpy' library, the third
     parameter in its signature is 'dtype', which takes either a
     'numpy' dtype or 'None', so check if the 'skipna' parameter is
     a boolean or not
+
+    Parameters
+    ----------
+    skipna :
+        
+    args :
+        
+    kwargs :
+        
+    name :
+        
+
+    Returns
+    -------
+
     """
     if not is_bool(skipna):
         args = (skipna,) + args
@@ -294,11 +370,23 @@
 
 
 def validate_take_with_convert(convert, args, kwargs):
-    """
-    If this function is called via the 'numpy' library, the third
+    """If this function is called via the 'numpy' library, the third
     parameter in its signature is 'axis', which takes either an
     ndarray or 'None', so check if the 'convert' parameter is either
     an instance of ndarray or is None
+
+    Parameters
+    ----------
+    convert :
+        
+    args :
+        
+    kwargs :
+        
+
+    Returns
+    -------
+
     """
     if isinstance(convert, ndarray) or convert is None:
         args = (convert,) + args
@@ -315,6 +403,21 @@
 
 
 def validate_window_func(name, args, kwargs) -> None:
+    """
+
+    Parameters
+    ----------
+    name :
+        
+    args :
+        
+    kwargs :
+        
+
+    Returns
+    -------
+
+    """
     numpy_args = ("axis", "dtype", "out")
     msg = (
         f"numpy operations are not valid with window objects. "
@@ -330,6 +433,21 @@
 
 
 def validate_rolling_func(name, args, kwargs) -> None:
+    """
+
+    Parameters
+    ----------
+    name :
+        
+    args :
+        
+    kwargs :
+        
+
+    Returns
+    -------
+
+    """
     numpy_args = ("axis", "dtype", "out")
     msg = (
         f"numpy operations are not valid with window objects. "
@@ -345,6 +463,21 @@
 
 
 def validate_expanding_func(name, args, kwargs) -> None:
+    """
+
+    Parameters
+    ----------
+    name :
+        
+    args :
+        
+    kwargs :
+        
+
+    Returns
+    -------
+
+    """
     numpy_args = ("axis", "dtype", "out")
     msg = (
         f"numpy operations are not valid with window objects. "
@@ -360,11 +493,25 @@
 
 
 def validate_groupby_func(name, args, kwargs, allowed=None) -> None:
-    """
-    'args' and 'kwargs' should be empty, except for allowed
+    """'args' and 'kwargs' should be empty, except for allowed
     kwargs because all of
     their necessary parameters are explicitly listed in
     the function signature
+
+    Parameters
+    ----------
+    name :
+        
+    args :
+        
+    kwargs :
+        
+    allowed :
+         (Default value = None)
+
+    Returns
+    -------
+
     """
     if allowed is None:
         allowed = []
@@ -382,10 +529,22 @@
 
 
 def validate_resampler_func(method: str, args, kwargs) -> None:
-    """
-    'args' and 'kwargs' should be empty because all of
+    """'args' and 'kwargs' should be empty because all of
     their necessary parameters are explicitly listed in
     the function signature
+
+    Parameters
+    ----------
+    method: str :
+        
+    args :
+        
+    kwargs :
+        
+
+    Returns
+    -------
+
     """
     if len(args) + len(kwargs) > 0:
         if method in RESAMPLER_NUMPY_OPS:
@@ -398,17 +557,20 @@
 
 
 def validate_minmax_axis(axis: Optional[int]) -> None:
-    """
-    Ensure that the axis argument passed to min, max, argmin, or argmax is
+    """Ensure that the axis argument passed to min, max, argmin, or argmax is
     zero or None, as otherwise it will be incorrectly ignored.
 
     Parameters
     ----------
     axis : int or None
-
-    Raises
-    ------
-    ValueError
+        
+    axis: Optional[int] :
+        
+
+    Returns
+    -------
+
+    
     """
     ndim = 1  # hard-coded for Index
     if axis is None:
