# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/util/_test_decorators.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/util/_test_decorators.py
@@ -13,12 +13,14 @@
 
 @td.skip_if_some_reason
 class Foo:
+    """ """
     ...
 
 Or individual functions:
 
 @td.skip_if_some_reason
 def test_foo():
+    """ """
     ...
 
 For more information, refer to the ``pytest`` documentation on ``skipif``.
@@ -40,17 +42,22 @@
 
 def safe_import(mod_name: str, min_version: Optional[str] = None):
     """
+
     Parameters
     ----------
     mod_name : str
         Name of the module to be imported
     min_version : str, default None
         Minimum required version of the specified mod_name
-
-    Returns
-    -------
-    object
-        The imported module if successful, or False
+    mod_name: str :
+        
+    min_version: Optional[str] :
+         (Default value = None)
+
+    Returns
+    -------
+
+    
     """
     try:
         mod = __import__(mod_name)
@@ -92,6 +99,7 @@
 
 
 def _skip_if_no_mpl():
+    """ """
     mod = safe_import("matplotlib")
     if mod:
         mod.use("Agg")
@@ -100,18 +108,21 @@
 
 
 def _skip_if_has_locale():
+    """ """
     lang, _ = locale.getlocale()
     if lang is not None:
         return True
 
 
 def _skip_if_not_us_locale():
+    """ """
     lang, _ = locale.getlocale()
     if lang != "en_US":
         return True
 
 
 def _skip_if_no_scipy() -> bool:
+    """ """
     return not (
         safe_import("scipy.stats")
         and safe_import("scipy.sparse")
@@ -123,13 +134,17 @@
 # TODO: return type, _pytest.mark.structures.MarkDecorator is not public
 # https://github.com/pytest-dev/pytest/issues/7469
 def skip_if_installed(package: str):
-    """
-    Skip a test if a package is installed.
-
-    Parameters
-    ----------
-    package : str
-        The name of the package.
+    """Skip a test if a package is installed.
+
+    Parameters
+    ----------
+    package: str :
+        
+
+    Returns
+    -------
+
+    
     """
     return pytest.mark.skipif(
         safe_import(package), reason=f"Skipping because {package} is installed."
@@ -139,34 +154,36 @@
 # TODO: return type, _pytest.mark.structures.MarkDecorator is not public
 # https://github.com/pytest-dev/pytest/issues/7469
 def skip_if_no(package: str, min_version: Optional[str] = None):
-    """
-    Generic function to help skip tests when required packages are not
+    """Generic function to help skip tests when required packages are not
     present on the testing system.
-
+    
     This function returns a pytest mark with a skip condition that will be
     evaluated during test collection. An attempt will be made to import the
     specified ``package`` and optionally ensure it meets the ``min_version``
-
+    
     The mark can be used as either a decorator for a test function or to be
     applied to parameters in pytest.mark.parametrize calls or parametrized
     fixtures.
-
+    
     If the import and version check are unsuccessful, then the test function
     (or test case when used in conjunction with parametrization) will be
     skipped.
 
     Parameters
     ----------
-    package: str
+    package : str
         The name of the required package.
-    min_version: str or None, default None
+    min_version : str or None, default None
         Optional minimum version of the package.
-
-    Returns
-    -------
-    _pytest.mark.structures.MarkDecorator
-        a pytest.mark.skipif to use as either a test decorator or a
-        parametrization mark.
+    package: str :
+        
+    min_version: Optional[str] :
+         (Default value = None)
+
+    Returns
+    -------
+
+    
     """
     msg = f"Could not import '{package}'"
     if min_version:
@@ -203,14 +220,28 @@
 # TODO: return type, _pytest.mark.structures.MarkDecorator is not public
 # https://github.com/pytest-dev/pytest/issues/7469
 def skip_if_np_lt(ver_str: str, *args, reason: Optional[str] = None):
+    """
+
+    Parameters
+    ----------
+    ver_str: str :
+        
+    *args :
+        
+    reason: Optional[str] :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     if reason is None:
         reason = f"NumPy {ver_str} or greater required"
     return pytest.mark.skipif(_np_version < LooseVersion(ver_str), *args, reason=reason)
 
 
 def parametrize_fixture_doc(*args):
-    """
-    Intended for use as a decorator for parametrized fixture,
+    """Intended for use as a decorator for parametrized fixture,
     this function will wrap the decorated function with a pytest
     ``parametrize_fixture_doc`` mark. That mark will format
     initial fixture docstring by replacing placeholders {0}, {1} etc
@@ -218,17 +249,29 @@
 
     Parameters
     ----------
-    args: iterable
+    args : iterable
         Positional arguments for docstring.
-
-    Returns
-    -------
-    function
-        The decorated function wrapped within a pytest
-        ``parametrize_fixture_doc`` mark
+    *args :
+        
+
+    Returns
+    -------
+
+    
     """
 
     def documented_fixture(fixture):
+        """
+
+        Parameters
+        ----------
+        fixture :
+            
+
+        Returns
+        -------
+
+        """
         fixture.__doc__ = fixture.__doc__.format(*args)
         return fixture
 
@@ -236,8 +279,16 @@
 
 
 def check_file_leaks(func) -> Callable:
-    """
-    Decorate a test function tot check that we are not leaking file descriptors.
+    """Decorate a test function tot check that we are not leaking file descriptors.
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
     """
     psutil = safe_import("psutil")
     if not psutil:
@@ -245,6 +296,19 @@
 
     @wraps(func)
     def new_func(*args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         proc = psutil.Process()
         flist = proc.open_files()
 
@@ -257,6 +321,7 @@
 
 
 def async_mark():
+    """ """
     try:
         import_optional_dependency("pytest_asyncio")
         async_mark = pytest.mark.asyncio
