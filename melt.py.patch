# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/reshape/melt.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/reshape/melt.py
@@ -35,6 +35,29 @@
     col_level=None,
     ignore_index: bool = True,
 ) -> "DataFrame":
+    """
+
+    Parameters
+    ----------
+    frame: "DataFrame" :
+        
+    id_vars :
+         (Default value = None)
+    value_vars :
+         (Default value = None)
+    var_name :
+         (Default value = None)
+    value_name :
+         (Default value = "value")
+    col_level :
+         (Default value = None)
+    ignore_index: bool :
+         (Default value = True)
+
+    Returns
+    -------
+
+    """
     # If multiindex, gather names of columns on all level for checking presence
     # of `id_vars` and `value_vars`
     if isinstance(frame.columns, MultiIndex):
@@ -143,15 +166,25 @@
 
 @deprecate_kwarg(old_arg_name="label", new_arg_name=None)
 def lreshape(data: "DataFrame", groups, dropna: bool = True, label=None) -> "DataFrame":
-    """
-    Reshape long-format data to wide. Generalized inverse of DataFrame.pivot
+    """Reshape long-format data to wide. Generalized inverse of DataFrame.pivot
 
     Parameters
     ----------
     data : DataFrame
+        
     groups : dict
         {new_name : list_of_columns}
     dropna : boolean, default True
+        
+    data: "DataFrame" :
+        
+    dropna: bool :
+         (Default value = True)
+    label :
+         (Default value = None)
+
+    Returns
+    -------
 
     Examples
     --------
@@ -162,17 +195,13 @@
        hr1  hr2     team  year1  year2
     0  514  545  Red Sox   2007   2008
     1  573  526  Yankees   2007   2008
-
+    
     >>> pd.lreshape(data, {'year': ['year1', 'year2'], 'hr': ['hr1', 'hr2']})
           team  year   hr
     0  Red Sox  2007  514
     1  Yankees  2007  573
     2  Red Sox  2008  545
     3  Yankees  2008  526
-
-    Returns
-    -------
-    reshaped : DataFrame
     """
     if isinstance(groups, dict):
         keys = list(groups.keys())
@@ -214,18 +243,18 @@
 def wide_to_long(
     df: "DataFrame", stubnames, i, j, sep: str = "", suffix: str = r"\d+"
 ) -> "DataFrame":
-    r"""
+    """r"""
     Wide panel to long format. Less flexible but more user-friendly than melt.
-
+    
     With stubnames ['A', 'B'], this function expects to find one or more
     group of columns with format
     A-suffix1, A-suffix2,..., B-suffix1, B-suffix2,...
     You specify what you want to call this suffix in the resulting long format
     with `j` (for example `j='year'`)
-
+    
     Each row of these wide variables are assumed to be uniquely identified by
     `i` (can be a single column name or a list of column names)
-
+    
     All remaining variables in the data frame are left intact.
 
     Parameters
@@ -252,9 +281,14 @@
         suffixes, for example, if your wide variables are of the form
         A-one, B-two,.., and you have an unrelated column A-rating, you can
         ignore the last one by specifying `suffix='(!?one|two)'`.
-
         .. versionchanged:: 0.23.0
-            When all suffixes are numeric, they are cast to int64/float64.
+        When all suffixes are numeric, they are cast to int64/float64.
+    df: "DataFrame" :
+        
+    sep: str :
+         (Default value = "")
+    suffix: str :
+         (Default value = r"\d+")
 
     Returns
     -------
@@ -267,9 +301,25 @@
     All extra variables are left untouched. This simply uses
     `pandas.melt` under the hood, but is hard-coded to "do the right thing"
     in a typical case.
-
     Examples
     --------
+    
+    With multiple id columns
+    
+    
+    Going from long back to wide just takes some creative use of `unstack`
+    
+    
+    Less wieldy column names are also handled
+    
+    
+    
+    If we have many columns, we could also use a regex to find our
+    stubnames and pass that list on to wide_to_long
+    
+    
+    All of the above examples have integers as suffixes. It is possible to
+    have non-integers as suffixes.
     >>> np.random.seed(123)
     >>> df = pd.DataFrame({"A1970" : {0 : "a", 1 : "b", 2 : "c"},
     ...                    "A1980" : {0 : "d", 1 : "e", 2 : "f"},
@@ -293,9 +343,7 @@
     0  1980 -1.085631  d  3.2
     1  1980  0.997345  e  1.3
     2  1980  0.282978  f  0.1
-
-    With multiple id columns
-
+    
     >>> df = pd.DataFrame({
     ...     'famid': [1, 1, 1, 2, 2, 2, 3, 3, 3],
     ...     'birth': [1, 2, 3, 1, 2, 3, 1, 2, 3],
@@ -336,9 +384,7 @@
                 2    3.4
           3     1    2.1
                 2    2.9
-
-    Going from long back to wide just takes some creative use of `unstack`
-
+    
     >>> w = l.unstack()
     >>> w.columns = w.columns.map('{0[0]}{0[1]}'.format)
     >>> w.reset_index()
@@ -352,9 +398,7 @@
     6      3      1  2.2  3.3
     7      3      2  2.3  3.4
     8      3      3  2.1  2.9
-
-    Less wieldy column names are also handled
-
+    
     >>> np.random.seed(0)
     >>> df = pd.DataFrame({'A(weekly)-2010': np.random.rand(3),
     ...                    'A(weekly)-2011': np.random.rand(3),
@@ -367,7 +411,7 @@
     0        0.548814        0.544883        0.437587        0.383442  0   0
     1        0.715189        0.423655        0.891773        0.791725  1   1
     2        0.602763        0.645894        0.963663        0.528895  1   2
-
+    
     >>> pd.wide_to_long(df, ['A(weekly)', 'B(weekly)'], i='id',
     ...                 j='year', sep='-')
     ... # doctest: +NORMALIZE_WHITESPACE
@@ -379,20 +423,14 @@
     0  2011  0   0.544883   0.383442
     1  2011  1   0.423655   0.791725
     2  2011  1   0.645894   0.528895
-
-    If we have many columns, we could also use a regex to find our
-    stubnames and pass that list on to wide_to_long
-
+    
     >>> stubnames = sorted(
     ...     set([match[0] for match in df.columns.str.findall(
     ...         r'[A-B]\(.*\)').values if match != []])
     ... )
     >>> list(stubnames)
     ['A(weekly)', 'B(weekly)']
-
-    All of the above examples have integers as suffixes. It is possible to
-    have non-integers as suffixes.
-
+    
     >>> df = pd.DataFrame({
     ...     'famid': [1, 1, 1, 2, 2, 2, 3, 3, 3],
     ...     'birth': [1, 2, 3, 1, 2, 3, 1, 2, 3],
@@ -410,7 +448,7 @@
     6      3      1     2.2     3.3
     7      3      2     2.3     3.4
     8      3      3     2.1     2.9
-
+    
     >>> l = pd.wide_to_long(df, stubnames='ht', i=['famid', 'birth'], j='age',
     ...                     sep='_', suffix='\w+')
     >>> l
@@ -435,14 +473,51 @@
                 two  3.4
           3     one  2.1
                 two  2.9
-    """
 
     def get_var_names(df, stub: str, sep: str, suffix: str) -> List[str]:
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        stub: str :
+            
+        sep: str :
+            
+        suffix: str :
+            
+
+        Returns
+        -------
+
+        """
         regex = fr"^{re.escape(stub)}{re.escape(sep)}{suffix}$"
         pattern = re.compile(regex)
         return [col for col in df.columns if pattern.match(col)]
 
     def melt_stub(df, stub: str, i, j, value_vars, sep: str):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        stub: str :
+            
+        i :
+            
+        j :
+            
+        value_vars :
+            
+        sep: str :
+            
+
+        Returns
+        -------
+
+        """
         newdf = melt(
             df,
             id_vars=i,
