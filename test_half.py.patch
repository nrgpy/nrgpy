# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_half.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_half.py
@@ -7,6 +7,23 @@
 
 
 def assert_raises_fpe(strmatch, callable, *args, **kwargs):
+    """
+
+    Parameters
+    ----------
+    strmatch :
+        
+    callable :
+        
+    *args :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     try:
         callable(*args, **kwargs)
     except FloatingPointError as exc:
@@ -17,7 +34,9 @@
                 "Did not raise floating point %s error" % strmatch)
 
 class TestHalf:
+    """ """
     def setup(self):
+        """ """
         # An array of all possible float16 values
         self.all_f16 = np.arange(0x10000, dtype=uint16)
         self.all_f16.dtype = float16
@@ -39,7 +58,15 @@
 
     def test_half_conversions(self):
         """Checks that all 16-bit values survive conversion
-           to/from 32-bit and 64-bit float"""
+           to/from 32-bit and 64-bit float
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         # Because the underlying routines preserve the NaN bits, every
         # value is preserved when converting to/from other floats.
 
@@ -71,6 +98,21 @@
     @pytest.mark.parametrize("shift", [None, "up", "down"])
     @pytest.mark.parametrize("float_t", [np.float32, np.float64])
     def test_half_conversion_rounding(self, float_t, shift, offset):
+        """
+
+        Parameters
+        ----------
+        float_t :
+            
+        shift :
+            
+        offset :
+            
+
+        Returns
+        -------
+
+        """
         # Assumes that round to even is used during casting.
         max_pattern = np.float16(np.finfo(np.float16).max).view(np.uint16)
 
@@ -127,6 +169,21 @@
                              [(np.float32, np.uint32, 23),
                               (np.float64, np.uint64, 52)])
     def test_half_conversion_denormal_round_even(self, float_t, uint_t, bits):
+        """
+
+        Parameters
+        ----------
+        float_t :
+            
+        uint_t :
+            
+        bits :
+            
+
+        Returns
+        -------
+
+        """
         # Test specifically that all bits are considered when deciding
         # whether round to even should occur (i.e. no bits are lost at the
         # end. Compare also gh-12721. The most bits can get lost for the
@@ -147,6 +204,7 @@
             assert larger_value.astype(np.float16) == smallest_value
 
     def test_nans_infs(self):
+        """ """
         with np.errstate(all='ignore'):
             # Check some of the ufuncs
             assert_equal(np.isnan(self.all_f16), np.isnan(self.all_f32))
@@ -228,7 +286,15 @@
 
     def test_half_correctness(self):
         """Take every finite float16, and check the casting functions with
-           a manual conversion."""
+           a manual conversion.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
 
         # Create an array of all finite float16s
         a_bits = self.finite_f16.view(dtype=uint16)
@@ -462,6 +528,7 @@
     @pytest.mark.skipif(platform.machine() == "armv5tel",
                         reason="See gh-413.")
     def test_half_fpe(self):
+        """ """
         with np.errstate(all='raise'):
             sx16 = np.array((1e-4,), dtype=float16)
             bx16 = np.array((1e4,), dtype=float16)
@@ -529,6 +596,7 @@
     def test_half_array_interface(self):
         """Test that half is compatible with __array_interface__"""
         class Dummy:
+            """ """
             pass
 
         a = np.ones((1,), dtype=float16)
