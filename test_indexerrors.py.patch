# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_indexerrors.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/tests/test_indexerrors.py
@@ -5,9 +5,10 @@
 
 
 class TestIndexErrors:
-    '''Tests to exercise indexerrors not covered by other tests.'''
+    """Tests to exercise indexerrors not covered by other tests."""
 
     def test_arraytypes_fasttake(self):
+        """ """
         'take from a 0-length dimension'
         x = np.empty((2, 3, 0, 4))
         assert_raises(IndexError, x.take, [0], axis=2)
@@ -16,6 +17,7 @@
         assert_raises(IndexError, x.take, [0], axis=2, mode='clip')
 
     def test_take_from_object(self):
+        """ """
         # Check exception taking from object array
         d = np.zeros(5, dtype=object)
         assert_raises(IndexError, d.take, [6])
@@ -29,6 +31,7 @@
         assert_raises(IndexError, d.take, [0], mode='clip')
 
     def test_multiindex_exceptions(self):
+        """ """
         a = np.empty(5, dtype=object)
         assert_raises(IndexError, a.item, 20)
         a = np.empty((5, 0), dtype=object)
@@ -40,6 +43,7 @@
         assert_raises(IndexError, a.itemset, (0, 0), 0)
 
     def test_put_exceptions(self):
+        """ """
         a = np.zeros((5, 5))
         assert_raises(IndexError, a.put, 100, 0)
         a = np.zeros((5, 5), dtype=object)
@@ -50,8 +54,24 @@
         assert_raises(IndexError, a.put, 100, 0)
 
     def test_iterators_exceptions(self):
+        """ """
         "cases in iterators.c"
         def assign(obj, ind, val):
+            """
+
+            Parameters
+            ----------
+            obj :
+                
+            ind :
+                
+            val :
+                
+
+            Returns
+            -------
+
+            """
             obj[ind] = val
 
         a = np.zeros([1, 2, 3])
@@ -86,9 +106,25 @@
         assert_raises(IndexError, lambda: assign(a.flat, np.array([10]), 5))
 
     def test_mapping(self):
+        """ """
         "cases from mapping.c"
 
         def assign(obj, ind, val):
+            """
+
+            Parameters
+            ----------
+            obj :
+                
+            ind :
+                
+            val :
+                
+
+            Returns
+            -------
+
+            """
             obj[ind] = val
 
         a = np.zeros((0, 10))
@@ -114,6 +150,7 @@
         assert_raises(IndexError, lambda: assign(a, (1, [0, 1]), 1))
 
     def test_mapping_error_message(self):
+        """ """
         a = np.zeros((3, 5))
         index = (1, 2, 3, 4, 5)
         assert_raises_regex(
@@ -123,6 +160,7 @@
                 lambda: a[index])
 
     def test_methods(self):
+        """ """
         "cases from methods.c"
 
         a = np.zeros((3, 3))
