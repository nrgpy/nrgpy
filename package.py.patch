# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/twine/package.py
+++ b/..//venv/lib/python3.8/site-packages/twine/package.py
@@ -49,6 +49,7 @@
 
 
 class PackageFile:
+    """ """
     def __init__(
         self,
         filename: str,
@@ -78,6 +79,19 @@
 
     @classmethod
     def from_filename(cls, filename: str, comment: Optional[str]) -> "PackageFile":
+        """
+
+        Parameters
+        ----------
+        filename: str :
+            
+        comment: Optional[str] :
+            
+
+        Returns
+        -------
+
+        """
         # Extract the metadata from the package
         for ext, dtype in DIST_EXTENSIONS.items():
             if filename.endswith(ext):
@@ -110,6 +124,7 @@
         return cls(filename, comment, meta, py_version, dtype)
 
     def metadata_dictionary(self) -> Dict[str, MetadataValue]:
+        """ """
         meta = self.metadata
         data = {
             # identify release
@@ -161,6 +176,19 @@
     def add_gpg_signature(
         self, signature_filepath: str, signature_filename: str
     ) -> None:
+        """
+
+        Parameters
+        ----------
+        signature_filepath: str :
+            
+        signature_filename: str :
+            
+
+        Returns
+        -------
+
+        """
         if self.gpg_signature is not None:
             raise exceptions.InvalidDistribution("GPG Signature can only be added once")
 
@@ -168,6 +196,19 @@
             self.gpg_signature = (signature_filename, gpg.read())
 
     def sign(self, sign_with: str, identity: Optional[str]) -> None:
+        """
+
+        Parameters
+        ----------
+        sign_with: str :
+            
+        identity: Optional[str] :
+            
+
+        Returns
+        -------
+
+        """
         print(f"Signing {self.basefilename}")
         gpg_args: Tuple[str, ...] = (sign_with, "--detach-sign")
         if identity:
@@ -179,6 +220,19 @@
 
     @classmethod
     def run_gpg(cls, gpg_args: Tuple[str, ...]) -> None:
+        """
+
+        Parameters
+        ----------
+        gpg_args: Tuple[str :
+            
+        ...] :
+            
+
+        Returns
+        -------
+
+        """
         try:
             subprocess.check_call(gpg_args)
             return
@@ -201,6 +255,7 @@
 
 
 class Hexdigest(NamedTuple):
+    """ """
     md5: Optional[str]
     sha2: Optional[str]
     blake2: Optional[str]
@@ -208,8 +263,15 @@
 
 class HashManager:
     """Manage our hashing objects for simplicity.
-
+    
     This will also allow us to better test this logic.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, filename: str) -> None:
@@ -228,28 +290,64 @@
         self._blake_hasher = hashlib.blake2b(digest_size=256 // 8)
 
     def _md5_update(self, content: bytes) -> None:
+        """
+
+        Parameters
+        ----------
+        content: bytes :
+            
+
+        Returns
+        -------
+
+        """
         if self._md5_hasher is not None:
             self._md5_hasher.update(content)
 
     def _md5_hexdigest(self) -> Optional[str]:
+        """ """
         if self._md5_hasher is not None:
             return self._md5_hasher.hexdigest()
         return None
 
     def _sha2_update(self, content: bytes) -> None:
+        """
+
+        Parameters
+        ----------
+        content: bytes :
+            
+
+        Returns
+        -------
+
+        """
         if self._sha2_hasher is not None:
             self._sha2_hasher.update(content)
 
     def _sha2_hexdigest(self) -> Optional[str]:
+        """ """
         if self._sha2_hasher is not None:
             return self._sha2_hasher.hexdigest()
         return None
 
     def _blake_update(self, content: bytes) -> None:
+        """
+
+        Parameters
+        ----------
+        content: bytes :
+            
+
+        Returns
+        -------
+
+        """
         if self._blake_hasher is not None:
             self._blake_hasher.update(content)
 
     def _blake_hexdigest(self) -> Optional[str]:
+        """ """
         if self._blake_hasher is not None:
             return self._blake_hasher.hexdigest()
         return None
@@ -263,7 +361,7 @@
                 self._blake_update(content)
 
     def hexdigest(self) -> Hexdigest:
-        """Return the hexdigest for the file."""
+        """ """
         return Hexdigest(
             self._md5_hexdigest(), self._sha2_hexdigest(), self._blake_hexdigest(),
         )
