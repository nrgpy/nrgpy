# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pygments/lexers/c_cpp.py
+++ b/..//venv/lib/python3.8/site-packages/pygments/lexers/c_cpp.py
@@ -21,9 +21,15 @@
 
 
 class CFamilyLexer(RegexLexer):
-    """
-    For C family source code.  This is used as a base class to avoid repetitious
+    """For C family source code.  This is used as a base class to avoid repetitious
     definitions.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     #: optional Comment or Whitespace
@@ -203,6 +209,17 @@
         RegexLexer.__init__(self, **options)
 
     def get_tokens_unprocessed(self, text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         for index, token, value in \
                 RegexLexer.get_tokens_unprocessed(self, text):
             if token is Name:
@@ -218,27 +235,33 @@
 
 
 class CLexer(CFamilyLexer):
-    """
-    For C source code with preprocessor directives.
-
+    """For C source code with preprocessor directives.
+    
     Additional options accepted:
-
+    
     `stdlibhighlighting`
         Highlight common types found in the C/C++ standard library (e.g. `size_t`).
         (default: ``True``).
-
+    
     `c99highlighting`
         Highlight common types found in the C99 standard library (e.g. `int8_t`).
         Actually, this includes all fixed-width integer types.
         (default: ``True``).
-
+    
     `c11highlighting`
         Highlight atomic types found in the C11 standard library (e.g. `atomic_bool`).
         (default: ``True``).
-
+    
     `platformhighlighting`
         Highlight common types found in the platform SDK headers (e.g. `clockid_t` on Linux).
         (default: ``True``).
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'C'
     aliases = ['c']
@@ -258,6 +281,17 @@
     }
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         if re.search(r'^\s*#include [<"]', text, re.MULTILINE):
             return 0.1
         if re.search(r'^\s*#ifn?def ', text, re.MULTILINE):
@@ -265,27 +299,33 @@
 
 
 class CppLexer(CFamilyLexer):
-    """
-    For C++ source code with preprocessor directives.
-
+    """For C++ source code with preprocessor directives.
+    
     Additional options accepted:
-
+    
     `stdlibhighlighting`
         Highlight common types found in the C/C++ standard library (e.g. `size_t`).
         (default: ``True``).
-
+    
     `c99highlighting`
         Highlight common types found in the C99 standard library (e.g. `int8_t`).
         Actually, this includes all fixed-width integer types.
         (default: ``True``).
-
+    
     `c11highlighting`
         Highlight atomic types found in the C11 standard library (e.g. `atomic_bool`).
         (default: ``True``).
-
+    
     `platformhighlighting`
         Highlight common types found in the platform SDK headers (e.g. `clockid_t` on Linux).
         (default: ``True``).
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'C++'
     aliases = ['cpp', 'c++']
@@ -338,6 +378,17 @@
     }
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         if re.search('#include <[a-z_]+>', text):
             return 0.2
         if re.search('using namespace ', text):
