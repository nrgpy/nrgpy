# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/groupby/transform/test_transform.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/groupby/transform/test_transform.py
@@ -23,10 +23,24 @@
 
 
 def assert_fp_equal(a, b):
+    """
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
+    """
     assert (np.abs(a - b) < 1e-12).all()
 
 
 def test_transform():
+    """ """
     data = Series(np.arange(9) // 3, index=np.arange(9))
 
     index = np.arange(9)
@@ -56,6 +70,17 @@
     tm.assert_frame_equal(result, expected)
 
     def demean(arr):
+        """
+
+        Parameters
+        ----------
+        arr :
+            
+
+        Returns
+        -------
+
+        """
         return arr - arr.mean()
 
     people = DataFrame(
@@ -81,6 +106,7 @@
 
 
 def test_transform_fast():
+    """ """
 
     df = DataFrame({"id": np.arange(100000) / 3, "val": np.random.randn(100000)})
 
@@ -132,6 +158,19 @@
 
 
 def test_transform_broadcast(tsframe, ts):
+    """
+
+    Parameters
+    ----------
+    tsframe :
+        
+    ts :
+        
+
+    Returns
+    -------
+
+    """
     grouped = ts.groupby(lambda x: x.month)
     result = grouped.transform(np.mean)
 
@@ -161,6 +200,17 @@
 
 
 def test_transform_axis(tsframe):
+    """
+
+    Parameters
+    ----------
+    tsframe :
+        
+
+    Returns
+    -------
+
+    """
 
     # make sure that we are setting the axes
     # correctly when on axis=0 or 1
@@ -201,6 +251,7 @@
 
 
 def test_transform_dtype():
+    """ """
     # GH 9807
     # Check transform dtype output is preserved
     df = DataFrame([[1, 3], [2, 3]])
@@ -210,6 +261,7 @@
 
 
 def test_transform_bug():
+    """ """
     # GH 5712
     # transforming on a datetime column
     df = DataFrame(dict(A=Timestamp("20130101"), B=np.arange(5)))
@@ -219,6 +271,7 @@
 
 
 def test_transform_numeric_to_boolean():
+    """ """
     # GH 16875
     # inconsistency in transforming boolean values
     expected = pd.Series([True, True], name="A")
@@ -233,6 +286,7 @@
 
 
 def test_transform_datetime_to_timedelta():
+    """ """
     # GH 15429
     # transforming a datetime to timedelta
     df = DataFrame(dict(A=Timestamp("20130101"), B=np.arange(5)))
@@ -252,6 +306,7 @@
 
 
 def test_transform_datetime_to_numeric():
+    """ """
     # GH 10972
     # convert dt to float
     df = DataFrame({"a": 1, "b": date_range("2015-01-01", periods=2, freq="D")})
@@ -273,6 +328,7 @@
 
 
 def test_transform_casting():
+    """ """
     # 13046
     data = """
     idx     A         ID3              DATETIME
@@ -300,6 +356,17 @@
 
 
 def test_transform_multiple(ts):
+    """
+
+    Parameters
+    ----------
+    ts :
+        
+
+    Returns
+    -------
+
+    """
     grouped = ts.groupby([lambda x: x.year, lambda x: x.month])
 
     grouped.transform(lambda x: x * 2)
@@ -307,6 +374,17 @@
 
 
 def test_dispatch_transform(tsframe):
+    """
+
+    Parameters
+    ----------
+    tsframe :
+        
+
+    Returns
+    -------
+
+    """
     df = tsframe[::5].reindex(tsframe.index)
 
     grouped = df.groupby(lambda x: x.month)
@@ -318,6 +396,17 @@
 
 
 def test_transform_transformation_func(transformation_func):
+    """
+
+    Parameters
+    ----------
+    transformation_func :
+        
+
+    Returns
+    -------
+
+    """
     # GH 30918
     df = DataFrame(
         {
@@ -354,6 +443,17 @@
 
 
 def test_transform_select_columns(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
     f = lambda x: x.mean()
     result = df.groupby("A")[["C", "D"]].transform(f)
 
@@ -364,6 +464,17 @@
 
 
 def test_transform_exclude_nuisance(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
 
     # this also tests orderings in transform between
     # series/frame to make sure it's consistent
@@ -378,6 +489,17 @@
 
 
 def test_transform_function_aliases(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
     result = df.groupby("A").transform("mean")
     expected = df.groupby("A").transform(np.mean)
     tm.assert_frame_equal(result, expected)
@@ -388,6 +510,7 @@
 
 
 def test_series_fast_transform_date():
+    """ """
     # GH 13191
     df = pd.DataFrame(
         {"grouping": [np.nan, 1, 1, 3], "d": pd.date_range("2014-1-1", "2014-1-4")}
@@ -404,11 +527,23 @@
 
 
 def test_transform_length():
+    """ """
     # GH 9697
     df = pd.DataFrame({"col1": [1, 1, 2, 2], "col2": [1, 2, 3, np.nan]})
     expected = pd.Series([3.0] * 4)
 
     def nsum(x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         return np.nansum(x)
 
     results = [
@@ -422,6 +557,7 @@
 
 
 def test_transform_coercion():
+    """ """
 
     # 14457
     # when we are transforming be sure to not coerce
@@ -435,6 +571,7 @@
 
 
 def test_groupby_transform_with_int():
+    """ """
 
     # GH 3740, make sure that we might upcast on item-by-item transform
 
@@ -481,6 +618,7 @@
 
 
 def test_groupby_transform_with_nan_group():
+    """ """
     # GH 9941
     df = pd.DataFrame({"a": range(10), "b": [1, 1, 2, 3, np.nan, 4, 4, 5, 5, 5]})
     result = df.groupby(df.b)["a"].transform(max)
@@ -491,6 +629,7 @@
 
 
 def test_transform_mixed_type():
+    """ """
     index = MultiIndex.from_arrays([[0, 0, 0, 1, 1, 1], [1, 2, 3, 1, 2, 3]])
     df = DataFrame(
         {
@@ -502,6 +641,17 @@
     )
 
     def f(group):
+        """
+
+        Parameters
+        ----------
+        group :
+            
+
+        Returns
+        -------
+
+        """
         group["g"] = group["d"] * 2
         return group[:1]
 
@@ -518,17 +668,21 @@
 
 
 def _check_cython_group_transform_cumulative(pd_op, np_op, dtype):
-    """
-    Check a group transform that executes a cumulative function.
-
-    Parameters
-    ----------
-    pd_op : callable
-        The pandas cumulative function.
-    np_op : callable
-        The analogous one in NumPy.
-    dtype : type
-        The specified dtype of the data.
+    """Check a group transform that executes a cumulative function.
+
+    Parameters
+    ----------
+    pd_op :
+        
+    np_op :
+        
+    dtype :
+        
+
+    Returns
+    -------
+
+    
     """
     is_datetimelike = False
 
@@ -543,6 +697,17 @@
 
 
 def test_cython_group_transform_cumsum(any_real_dtype):
+    """
+
+    Parameters
+    ----------
+    any_real_dtype :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-4095
     dtype = np.dtype(any_real_dtype).type
     pd_op, np_op = groupby.group_cumsum, np.cumsum
@@ -550,6 +715,7 @@
 
 
 def test_cython_group_transform_cumprod():
+    """ """
     # see gh-4095
     dtype = np.float64
     pd_op, np_op = groupby.group_cumprod_float64, np.cumproduct
@@ -557,6 +723,7 @@
 
 
 def test_cython_group_transform_algos():
+    """ """
     # see gh-4095
     is_datetimelike = False
 
@@ -604,6 +771,21 @@
     ],
 )
 def test_cython_transform_series(op, args, targop):
+    """
+
+    Parameters
+    ----------
+    op :
+        
+    args :
+        
+    targop :
+        
+
+    Returns
+    -------
+
+    """
     # GH 4095
     s = Series(np.random.randn(1000))
     s_missing = s.copy()
@@ -665,6 +847,23 @@
     ],
 )
 def test_groupby_cum_skipna(op, skipna, input, exp):
+    """
+
+    Parameters
+    ----------
+    op :
+        
+    skipna :
+        
+    input :
+        
+    exp :
+        
+
+    Returns
+    -------
+
+    """
     df = pd.DataFrame(input)
     result = df.groupby("key")["value"].transform(op, skipna=skipna)
     if isinstance(exp, dict):
@@ -685,6 +884,21 @@
     ],
 )
 def test_cython_transform_frame(op, args, targop):
+    """
+
+    Parameters
+    ----------
+    op :
+        
+    args :
+        
+    targop :
+        
+
+    Returns
+    -------
+
+    """
     s = Series(np.random.randn(1000))
     s_missing = s.copy()
     s_missing.iloc[2:10] = np.nan
@@ -762,6 +976,7 @@
 
 
 def test_transform_with_non_scalar_group():
+    """ """
     # GH 10165
     cols = pd.MultiIndex.from_tuples(
         [
@@ -801,6 +1016,25 @@
 )
 @pytest.mark.parametrize("agg_func", ["count", "rank", "size"])
 def test_transform_numeric_ret(cols, exp, comp_func, agg_func, request):
+    """
+
+    Parameters
+    ----------
+    cols :
+        
+    exp :
+        
+    comp_func :
+        
+    agg_func :
+        
+    request :
+        
+
+    Returns
+    -------
+
+    """
     if agg_func == "size" and isinstance(cols, list):
         # https://github.com/pytest-dev/pytest/issues/6300
         # workaround to xfail fixture/param permutations
@@ -843,6 +1077,29 @@
 def test_group_fill_methods(
     mix_groupings, as_series, val1, val2, fill_method, limit, exp_vals
 ):
+    """
+
+    Parameters
+    ----------
+    mix_groupings :
+        
+    as_series :
+        
+    val1 :
+        
+    val2 :
+        
+    fill_method :
+        
+    limit :
+        
+    exp_vals :
+        
+
+    Returns
+    -------
+
+    """
     vals = [np.nan, np.nan, val1, np.nan, np.nan, val2, np.nan, np.nan]
     _exp_vals = list(exp_vals)
     # Overwrite placeholder values
@@ -858,6 +1115,17 @@
         keys = ["a", "b"] * len(vals)
 
         def interweave(list_obj):
+            """
+
+            Parameters
+            ----------
+            list_obj :
+                
+
+            Returns
+            -------
+
+            """
             temp = list()
             for x in list_obj:
                 temp.extend([x, x])
@@ -884,6 +1152,17 @@
 
 @pytest.mark.parametrize("fill_method", ["ffill", "bfill"])
 def test_pad_stable_sorting(fill_method):
+    """
+
+    Parameters
+    ----------
+    fill_method :
+        
+
+    Returns
+    -------
+
+    """
     # GH 21207
     x = [0] * 20
     y = [np.nan] * 10 + [1] * 10
@@ -916,6 +1195,25 @@
 @pytest.mark.parametrize("fill_method", ["ffill", "bfill", None])
 @pytest.mark.parametrize("limit", [None, 1])
 def test_pct_change(test_series, freq, periods, fill_method, limit):
+    """
+
+    Parameters
+    ----------
+    test_series :
+        
+    freq :
+        
+    periods :
+        
+    fill_method :
+        
+    limit :
+        
+
+    Returns
+    -------
+
+    """
     # GH  21200, 21621, 30463
     vals = [3, np.nan, np.nan, np.nan, 1, 2, 4, 10, np.nan, 4]
     keys = ["a", "b"]
@@ -949,6 +1247,19 @@
     ],
 )
 def test_ffill_bfill_non_unique_multilevel(func, expected_status):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+    expected_status :
+        
+
+    Returns
+    -------
+
+    """
     # GH 19437
     date = pd.to_datetime(
         [
@@ -978,6 +1289,17 @@
 
 @pytest.mark.parametrize("func", [np.any, np.all])
 def test_any_all_np_func(func):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
+    """
     # GH 20653
     df = pd.DataFrame(
         [["foo", True], [np.nan, True], ["foo", True]], columns=["key", "val"]
@@ -990,8 +1312,20 @@
 
 
 def test_groupby_transform_rename():
+    """ """
     # https://github.com/pandas-dev/pandas/issues/23461
     def demean_rename(x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         result = x - x.mean()
 
         if isinstance(x, pd.Series):
@@ -1012,6 +1346,17 @@
 
 @pytest.mark.parametrize("func", [min, max, np.min, np.max, "first", "last"])
 def test_groupby_transform_timezone_column(func):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
+    """
     # GH 24198
     ts = pd.to_datetime("now", utc=True).tz_convert("Asia/Singapore")
     result = pd.DataFrame({"end_time": [ts], "id": [1]})
@@ -1028,6 +1373,19 @@
     ],
 )
 def test_groupby_transform_with_datetimes(func, values):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+    values :
+        
+
+    Returns
+    -------
+
+    """
     # GH 15306
     dates = pd.date_range("1/1/2011", periods=10, freq="D")
 
@@ -1043,6 +1401,17 @@
 
 @pytest.mark.parametrize("func", ["cumsum", "cumprod", "cummin", "cummax"])
 def test_transform_absent_categories(func):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
+    """
     # GH 16771
     # cython transforms with more groups than rows
     x_vals = [1]
@@ -1057,6 +1426,21 @@
 @pytest.mark.parametrize("func", ["ffill", "bfill", "shift"])
 @pytest.mark.parametrize("key, val", [("level", 0), ("by", Series([0]))])
 def test_ffill_not_in_axis(func, key, val):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+    key :
+        
+    val :
+        
+
+    Returns
+    -------
+
+    """
     # GH 21521
     df = pd.DataFrame([[np.nan]])
     result = getattr(df.groupby(**{key: val}), func)()
@@ -1066,6 +1450,7 @@
 
 
 def test_transform_invalid_name_raises():
+    """ """
     # GH#27486
     df = DataFrame(dict(a=[0, 1, 1, 2]))
     g = df.groupby(["a", "b", "b", "c"])
@@ -1093,6 +1478,19 @@
     ],
 )
 def test_transform_agg_by_name(reduction_func, obj):
+    """
+
+    Parameters
+    ----------
+    reduction_func :
+        
+    obj :
+        
+
+    Returns
+    -------
+
+    """
     func = reduction_func
     g = obj.groupby(np.repeat([0, 1], 3))
 
@@ -1117,6 +1515,7 @@
 
 
 def test_transform_lambda_with_datetimetz():
+    """ """
     # GH 27496
     df = DataFrame(
         {
@@ -1141,6 +1540,7 @@
 
 
 def test_transform_fastpath_raises():
+    """ """
     # GH#29631 case where fastpath defined in groupby.generic _choose_path
     #  raises, but slow_path does not
 
@@ -1148,6 +1548,17 @@
     gb = df.groupby("A")
 
     def func(grp):
+        """
+
+        Parameters
+        ----------
+        grp :
+            
+
+        Returns
+        -------
+
+        """
         # we want a function such that func(frame) fails but func.apply(frame)
         #  works
         if grp.ndim == 2:
@@ -1171,6 +1582,7 @@
 
 
 def test_transform_lambda_indexing():
+    """ """
     # GH 7883
     df = pd.DataFrame(
         {
@@ -1208,6 +1620,17 @@
 
 
 def test_categorical_and_not_categorical_key(observed):
+    """
+
+    Parameters
+    ----------
+    observed :
+        
+
+    Returns
+    -------
+
+    """
     # Checks that groupby-transform, when grouping by both a categorical
     # and a non-categorical key, doesn't try to expand the output to include
     # non-observed categories but instead matches the input shape.
