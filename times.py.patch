# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/tools/times.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/tools/times.py
@@ -12,34 +12,48 @@
 
 
 def to_time(arg, format=None, infer_time_format=False, errors="raise"):
-    """
-    Parse time strings to time objects using fixed strptime formats ("%H:%M",
+    """Parse time strings to time objects using fixed strptime formats ("%H:%M",
     "%H%M", "%I:%M%p", "%I%M%p", "%H:%M:%S", "%H%M%S", "%I:%M:%S%p",
     "%I%M%S%p")
-
+    
     Use infer_time_format if all the strings are in the same format to speed
     up conversion.
 
     Parameters
     ----------
     arg : string in time format, datetime.time, list, tuple, 1-d array,  Series
+        
     format : str, default None
         Format used to convert arg into a time object.  If None, fixed formats
-        are used.
-    infer_time_format: bool, default False
+        are used. (Default value = None)
+    infer_time_format : bool, default False
         Infer the time format based on the first non-NaN element.  If all
-        strings are in the same format, this will speed up conversion.
+        strings are in the same format, this will speed up conversion. (Default value = False)
     errors : {'ignore', 'raise', 'coerce'}, default 'raise'
         - If 'raise', then invalid parsing will raise an exception
         - If 'coerce', then invalid parsing will be set as None
-        - If 'ignore', then invalid parsing will return the input
+        - If 'ignore', then invalid parsing will return the input (Default value = "raise")
 
     Returns
     -------
-    datetime.time
+
+    
     """
 
     def _convert_listlike(arg, format):
+        """
+
+        Parameters
+        ----------
+        arg :
+            
+        format :
+            
+
+        Returns
+        -------
+
+        """
 
         if isinstance(arg, (list, tuple)):
             arg = np.array(arg, dtype="O")
@@ -127,6 +141,17 @@
 
 
 def _guess_time_format_for_array(arr):
+    """
+
+    Parameters
+    ----------
+    arr :
+        
+
+    Returns
+    -------
+
+    """
     # Try to guess the format based on the first non-NaN element
     non_nan_elements = notna(arr).nonzero()[0]
     if len(non_nan_elements):
