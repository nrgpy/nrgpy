# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/arrays/sparse/scipy_sparse.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/arrays/sparse/scipy_sparse.py
@@ -8,6 +8,19 @@
 
 
 def _check_is_partition(parts, whole):
+    """
+
+    Parameters
+    ----------
+    parts :
+        
+    whole :
+        
+
+    Returns
+    -------
+
+    """
     whole = set(whole)
     parts = [set(x) for x in parts]
     if set.intersection(*parts) != set():
@@ -17,10 +30,26 @@
 
 
 def _to_ijv(ss, row_levels=(0,), column_levels=(1,), sort_labels=False):
-    """
-    For arbitrary (MultiIndexed) sparse Series return
+    """For arbitrary (MultiIndexed) sparse Series return
     (v, i, j, ilabels, jlabels) where (v, (i, j)) is suitable for
     passing to scipy.sparse.coo constructor.
+
+    Parameters
+    ----------
+    ss :
+        
+    row_levels :
+         (Default value = (0)
+    ) :
+        
+    column_levels :
+         (Default value = (1)
+    sort_labels :
+         (Default value = False)
+
+    Returns
+    -------
+
     """
     # index and column levels must be a partition of the index
     _check_is_partition([row_levels, column_levels], range(ss.index.nlevels))
@@ -31,7 +60,19 @@
     nonnull_labels = ss.dropna()
 
     def get_indexers(levels):
-        """ Return sparse coords and dense labels for subset levels """
+        """
+
+        Parameters
+        ----------
+        levels :
+            
+
+        Returns
+        -------
+        type
+            
+
+        """
         # TODO: how to do this better? cleanly slice nonnull_labels given the
         # coord
         values_ilabels = [tuple(x[i] for i in levels) for x in nonnull_labels.index]
@@ -46,8 +87,19 @@
 
         def _get_label_to_i_dict(labels, sort_labels=False):
             """
-            Return dict of unique labels to number.
-            Optionally sort by label.
+
+            Parameters
+            ----------
+            labels :
+                
+            sort_labels :
+                 (Default value = False)
+
+            Returns
+            -------
+            type
+                Optionally sort by label.
+
             """
             labels = Index(map(tuple, labels)).unique().tolist()  # squish
             if sort_labels:
@@ -55,6 +107,21 @@
             return {k: i for i, k in enumerate(labels)}
 
         def _get_index_subset_to_coord_dict(index, subset, sort_labels=False):
+            """
+
+            Parameters
+            ----------
+            index :
+                
+            subset :
+                
+            sort_labels :
+                 (Default value = False)
+
+            Returns
+            -------
+
+            """
             ilabels = list(zip(*[index._get_level_values(i) for i in subset]))
             labels_to_i = _get_label_to_i_dict(ilabels, sort_labels=sort_labels)
             labels_to_i = Series(labels_to_i)
@@ -86,10 +153,26 @@
 
 
 def _sparse_series_to_coo(ss, row_levels=(0,), column_levels=(1,), sort_labels=False):
-    """
-    Convert a sparse Series to a scipy.sparse.coo_matrix using index
+    """Convert a sparse Series to a scipy.sparse.coo_matrix using index
     levels row_levels, column_levels as the row and column
     labels respectively. Returns the sparse_matrix, row and column labels.
+
+    Parameters
+    ----------
+    ss :
+        
+    row_levels :
+         (Default value = (0)
+    ) :
+        
+    column_levels :
+         (Default value = (1)
+    sort_labels :
+         (Default value = False)
+
+    Returns
+    -------
+
     """
     import scipy.sparse
 
@@ -114,21 +197,23 @@
 
 
 def _coo_to_sparse_series(A, dense_index: bool = False):
-    """
-    Convert a scipy.sparse.coo_matrix to a SparseSeries.
+    """Convert a scipy.sparse.coo_matrix to a SparseSeries.
 
     Parameters
     ----------
     A : scipy.sparse.coo.coo_matrix
+        
     dense_index : bool, default False
+        
+    dense_index: bool :
+         (Default value = False)
 
     Returns
     -------
     Series
-
-    Raises
-    ------
-    TypeError if A is not a coo_matrix
+        
+
+    
     """
     from pandas import SparseDtype
 
