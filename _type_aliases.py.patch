# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/core/_type_aliases.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/core/_type_aliases.py
@@ -33,12 +33,26 @@
 
 sctypeDict = {}      # Contains all leaf-node scalar types with aliases
 class TypeNADict(dict):
+    """ """
     def __getitem__(self, key):
         # 2018-06-24, 1.16
         warnings.warn('sctypeNA and typeNA will be removed in v1.18 '
                       'of numpy', VisibleDeprecationWarning, stacklevel=2)
         return dict.__getitem__(self, key)
     def get(self, key, default=None):
+        """
+
+        Parameters
+        ----------
+        key :
+            
+        default :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         # 2018-06-24, 1.16
         warnings.warn('sctypeNA and typeNA will be removed in v1.18 '
                       'of numpy', VisibleDeprecationWarning, stacklevel=2)
@@ -63,6 +77,17 @@
 
 
 def _bits_of(obj):
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+
+    Returns
+    -------
+
+    """
     try:
         info = next(v for v in _concrete_typeinfo.values() if v.type is obj)
     except StopIteration:
@@ -76,7 +101,19 @@
 
 
 def bitname(obj):
-    """Return a bit-width name for a given type object"""
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+
+    Returns
+    -------
+    type
+        
+
+    """
     bits = _bits_of(obj)
     dt = dtype(obj)
     char = dt.kind
@@ -92,6 +129,7 @@
 
 
 def _add_types():
+    """ """
     for name, info in _concrete_typeinfo.items():
         # define C-name and insert typenum and typechar references also
         allTypes[name] = info.type
@@ -112,6 +150,7 @@
 _uint_ctypes = list('u' + t for t in _int_ctypes)
 
 def _add_aliases():
+    """ """
     for name, info in _concrete_typeinfo.items():
         # these are handled by _add_integer_aliases
         if name in _int_ctypes or name in _uint_ctypes:
@@ -151,6 +190,7 @@
 _add_aliases()
 
 def _add_integer_aliases():
+    """ """
     seen_bits = set()
     for i_ctype, u_ctype in zip(_int_ctypes, _uint_ctypes):
         i_info = _concrete_typeinfo[i_ctype]
@@ -184,6 +224,7 @@
 #                            with Python usage)
 #
 def _set_up_aliases():
+    """ """
     type_pairs = [('complex_', 'cdouble'),
                   ('int0', 'intp'),
                   ('uint0', 'uintp'),
@@ -229,6 +270,19 @@
            'others':[bool, object, bytes, unicode, void]}
 
 def _add_array_type(typename, bits):
+    """
+
+    Parameters
+    ----------
+    typename :
+        
+    bits :
+        
+
+    Returns
+    -------
+
+    """
     try:
         t = allTypes['%s%d' % (typename, bits)]
     except KeyError:
@@ -237,6 +291,7 @@
         sctypes[typename].append(t)
 
 def _set_array_types():
+    """ """
     ibytes = [1, 2, 4, 8, 16, 32, 64]
     fbytes = [2, 4, 8, 10, 12, 16, 32, 64]
     for bytes in ibytes:
