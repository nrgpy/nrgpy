# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jsonschema/tests/test_validators.py
+++ b/..//venv/lib/python3.8/site-packages/jsonschema/tests/test_validators.py
@@ -18,12 +18,31 @@
 
 
 def startswith(validator, startswith, instance, schema):
+    """
+
+    Parameters
+    ----------
+    validator :
+        
+    startswith :
+        
+    instance :
+        
+    schema :
+        
+
+    Returns
+    -------
+
+    """
     if not instance.startswith(startswith):
         yield exceptions.ValidationError(u"Whoops!")
 
 
 class TestCreateAndExtend(SynchronousTestCase):
+    """ """
     def setUp(self):
+        """ """
         self.addCleanup(
             self.assertEqual,
             validators.meta_schemas,
@@ -40,6 +59,7 @@
         )
 
     def test_attrs(self):
+        """ """
         self.assertEqual(
             (
                 self.Validator.VALIDATORS,
@@ -53,10 +73,12 @@
         )
 
     def test_init(self):
+        """ """
         schema = {u"startswith": u"foo"}
         self.assertEqual(self.Validator(schema).schema, schema)
 
     def test_iter_errors(self):
+        """ """
         schema = {u"startswith": u"hel"}
         iter_errors = self.Validator(schema).iter_errors
 
@@ -77,6 +99,7 @@
         self.assertEqual(errors[0]._contents(), expected_error._contents())
 
     def test_if_a_version_is_provided_it_is_registered(self):
+        """ """
         Validator = validators.create(
             meta_schema={u"$id": "something"},
             version="my version",
@@ -85,11 +108,13 @@
         self.assertEqual(Validator.__name__, "MyVersionValidator")
 
     def test_if_a_version_is_not_provided_it_is_not_registered(self):
+        """ """
         original = dict(validators.meta_schemas)
         validators.create(meta_schema={u"id": "id"})
         self.assertEqual(validators.meta_schemas, original)
 
     def test_validates_registers_meta_schema_id(self):
+        """ """
         meta_schema_key = "meta schema id"
         my_meta_schema = {u"id": meta_schema_key}
 
@@ -103,6 +128,7 @@
         self.assertIn(meta_schema_key, validators.meta_schemas)
 
     def test_validates_registers_meta_schema_draft6_id(self):
+        """ """
         meta_schema_key = "meta schema $id"
         my_meta_schema = {u"$id": meta_schema_key}
 
@@ -115,6 +141,7 @@
         self.assertIn(meta_schema_key, validators.meta_schemas)
 
     def test_create_default_types(self):
+        """ """
         Validator = validators.create(meta_schema={}, validators=())
         self.assertTrue(
             all(
@@ -132,6 +159,7 @@
         )
 
     def test_extend(self):
+        """ """
         original = dict(self.Validator.VALIDATORS)
         new = object()
 
@@ -154,10 +182,19 @@
         )
 
     def test_extend_idof(self):
-        """
-        Extending a validator preserves its notion of schema IDs.
-        """
+        """Extending a validator preserves its notion of schema IDs."""
         def id_of(schema):
+            """
+
+            Parameters
+            ----------
+            schema :
+                
+
+            Returns
+            -------
+
+            """
             return schema.get(u"__test__", self.Validator.ID_OF(schema))
         correct_id = "the://correct/id/"
         meta_schema = {
@@ -177,7 +214,9 @@
 
 
 class TestLegacyTypeChecking(SynchronousTestCase):
+    """ """
     def test_create_default_types(self):
+        """ """
         Validator = validators.create(meta_schema={}, validators=())
         self.assertEqual(
             set(Validator.DEFAULT_TYPES), {
@@ -192,6 +231,7 @@
         self.flushWarnings()
 
     def test_extend(self):
+        """ """
         Validator = validators.create(meta_schema={}, validators=())
         original = dict(Validator.VALIDATORS)
         new = object()
@@ -223,6 +263,7 @@
         )
 
     def test_types_redefines_the_validators_type_checker(self):
+        """ """
         schema = {"type": "string"}
         self.assertFalse(validators.Draft7Validator(schema).is_valid(12))
 
@@ -234,6 +275,7 @@
         self.flushWarnings()
 
     def test_providing_default_types_warns(self):
+        """ """
         self.assertWarns(
             category=DeprecationWarning,
             message=(
@@ -250,15 +292,21 @@
         )
 
     def test_cannot_ask_for_default_types_with_non_default_type_checker(self):
-        """
-        We raise an error when you ask a validator with non-default
+        """We raise an error when you ask a validator with non-default
         type checker for its DEFAULT_TYPES.
-
+        
         The type checker argument is new, so no one but this library
         itself should be trying to use it, and doing so while then
         asking for DEFAULT_TYPES makes no sense (not to mention is
         deprecated), since type checkers are not strictly about Python
         type.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         Validator = validators.create(
             meta_schema={},
@@ -278,6 +326,7 @@
         self.assertFalse(self.flushWarnings())
 
     def test_providing_explicit_type_checker_does_not_warn(self):
+        """ """
         Validator = validators.create(
             meta_schema={},
             validators={},
@@ -289,6 +338,7 @@
         self.assertFalse(self.flushWarnings())
 
     def test_providing_neither_does_not_warn(self):
+        """ """
         Validator = validators.create(meta_schema={}, validators={})
         self.assertFalse(self.flushWarnings())
 
@@ -296,6 +346,7 @@
         self.assertFalse(self.flushWarnings())
 
     def test_providing_default_types_with_type_checker_errors(self):
+        """ """
         with self.assertRaises(TypeError) as e:
             validators.create(
                 meta_schema={},
@@ -311,6 +362,7 @@
         self.assertFalse(self.flushWarnings())
 
     def test_extending_a_legacy_validator_with_a_type_checker_errors(self):
+        """ """
         Validator = validators.create(
             meta_schema={},
             validators={},
@@ -334,6 +386,7 @@
         self.flushWarnings()
 
     def test_extending_a_legacy_validator_does_not_rewarn(self):
+        """ """
         Validator = validators.create(meta_schema={}, default_types={})
         self.assertTrue(self.flushWarnings())
 
@@ -341,6 +394,7 @@
         self.assertFalse(self.flushWarnings())
 
     def test_accessing_default_types_warns(self):
+        """ """
         Validator = validators.create(meta_schema={}, validators={})
         self.assertFalse(self.flushWarnings())
 
@@ -359,6 +413,7 @@
         )
 
     def test_accessing_default_types_on_the_instance_warns(self):
+        """ """
         Validator = validators.create(meta_schema={}, validators={})
         self.assertFalse(self.flushWarnings())
 
@@ -377,6 +432,7 @@
         )
 
     def test_providing_types_to_init_warns(self):
+        """ """
         Validator = validators.create(meta_schema={}, validators={})
         self.assertFalse(self.flushWarnings())
 
@@ -397,10 +453,13 @@
 
 
 class TestIterErrors(TestCase):
+    """ """
     def setUp(self):
+        """ """
         self.validator = validators.Draft3Validator({})
 
     def test_iter_errors(self):
+        """ """
         instance = [1, 2]
         schema = {
             u"disallow": u"array",
@@ -417,6 +476,7 @@
         self.assertEqual(sorted(got), sorted(expected))
 
     def test_iter_errors_multiple_failures_one_validator(self):
+        """ """
         instance = {"foo": 2, "bar": [1], "baz": 15, "quux": "spam"}
         schema = {
             u"properties": {
@@ -431,44 +491,70 @@
 
 
 class TestValidationErrorMessages(TestCase):
+    """ """
     def message_for(self, instance, schema, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        instance :
+            
+        schema :
+            
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         kwargs.setdefault("cls", validators.Draft3Validator)
         with self.assertRaises(exceptions.ValidationError) as e:
             validators.validate(instance, schema, *args, **kwargs)
         return e.exception.message
 
     def test_single_type_failure(self):
+        """ """
         message = self.message_for(instance=1, schema={u"type": u"string"})
         self.assertEqual(message, "1 is not of type %r" % u"string")
 
     def test_single_type_list_failure(self):
+        """ """
         message = self.message_for(instance=1, schema={u"type": [u"string"]})
         self.assertEqual(message, "1 is not of type %r" % u"string")
 
     def test_multiple_type_failure(self):
+        """ """
         types = u"string", u"object"
         message = self.message_for(instance=1, schema={u"type": list(types)})
         self.assertEqual(message, "1 is not of type %r, %r" % types)
 
     def test_object_without_title_type_failure(self):
+        """ """
         type = {u"type": [{u"minimum": 3}]}
         message = self.message_for(instance=1, schema={u"type": [type]})
         self.assertEqual(message, "1 is less than the minimum of 3")
 
     def test_object_with_named_type_failure(self):
+        """ """
         schema = {u"type": [{u"name": "Foo", u"minimum": 3}]}
         message = self.message_for(instance=1, schema=schema)
         self.assertEqual(message, "1 is less than the minimum of 3")
 
     def test_minimum(self):
+        """ """
         message = self.message_for(instance=1, schema={"minimum": 2})
         self.assertEqual(message, "1 is less than the minimum of 2")
 
     def test_maximum(self):
+        """ """
         message = self.message_for(instance=1, schema={"maximum": 0})
         self.assertEqual(message, "1 is greater than the maximum of 0")
 
     def test_dependencies_single_element(self):
+        """ """
         depend, on = "bar", "foo"
         schema = {u"dependencies": {depend: on}}
         message = self.message_for(
@@ -479,6 +565,7 @@
         self.assertEqual(message, "%r is a dependency of %r" % (on, depend))
 
     def test_dependencies_list_draft3(self):
+        """ """
         depend, on = "bar", "foo"
         schema = {u"dependencies": {depend: [on]}}
         message = self.message_for(
@@ -489,6 +576,7 @@
         self.assertEqual(message, "%r is a dependency of %r" % (on, depend))
 
     def test_dependencies_list_draft7(self):
+        """ """
         depend, on = "bar", "foo"
         schema = {u"dependencies": {depend: [on]}}
         message = self.message_for(
@@ -499,6 +587,7 @@
         self.assertEqual(message, "%r is a dependency of %r" % (on, depend))
 
     def test_additionalItems_single_failure(self):
+        """ """
         message = self.message_for(
             instance=[2],
             schema={u"items": [], u"additionalItems": False},
@@ -506,6 +595,7 @@
         self.assertIn("(2 was unexpected)", message)
 
     def test_additionalItems_multiple_failures(self):
+        """ """
         message = self.message_for(
             instance=[1, 2, 3],
             schema={u"items": [], u"additionalItems": False}
@@ -513,12 +603,14 @@
         self.assertIn("(1, 2, 3 were unexpected)", message)
 
     def test_additionalProperties_single_failure(self):
+        """ """
         additional = "foo"
         schema = {u"additionalProperties": False}
         message = self.message_for(instance={additional: 2}, schema=schema)
         self.assertIn("(%r was unexpected)" % (additional,), message)
 
     def test_additionalProperties_multiple_failures(self):
+        """ """
         schema = {u"additionalProperties": False}
         message = self.message_for(
             instance=dict.fromkeys(["foo", "bar"]),
@@ -530,6 +622,7 @@
         self.assertIn("were unexpected)", message)
 
     def test_const(self):
+        """ """
         schema = {u"const": 12}
         message = self.message_for(
             instance={"foo": "bar"},
@@ -539,6 +632,7 @@
         self.assertIn("12 was expected", message)
 
     def test_contains(self):
+        """ """
         schema = {u"contains": {u"const": 12}}
         message = self.message_for(
             instance=[2, {}, []],
@@ -551,6 +645,7 @@
         )
 
     def test_invalid_format_default_message(self):
+        """ """
         checker = FormatChecker(formats=())
         checker.checks(u"thing")(lambda value: False)
 
@@ -566,6 +661,7 @@
         self.assertIn("is not a", message)
 
     def test_additionalProperties_false_patternProperties(self):
+        """ """
         schema = {u"type": u"object",
                   u"additionalProperties": False,
                   u"patternProperties": {
@@ -596,6 +692,7 @@
         )
 
     def test_False_schema(self):
+        """ """
         message = self.message_for(
             instance="something",
             schema=False,
@@ -605,9 +702,11 @@
 
 
 class TestValidationErrorDetails(TestCase):
+    """ """
     # TODO: These really need unit tests for each individual validator, rather
     #       than just these higher level tests.
     def test_anyOf(self):
+        """ """
         instance = 5
         schema = {
             "anyOf": [
@@ -674,6 +773,7 @@
         self.assertEqual(len(e2.context), 0)
 
     def test_type(self):
+        """ """
         instance = {"foo": 1}
         schema = {
             "type": [
@@ -748,6 +848,7 @@
         self.assertFalse(e2.context)
 
     def test_single_nesting(self):
+        """ """
         instance = {"foo": 2, "bar": [1], "baz": 15, "quux": "spam"}
         schema = {
             "properties": {
@@ -782,6 +883,7 @@
         self.assertEqual(e4.validator, "type")
 
     def test_multiple_nesting(self):
+        """ """
         instance = [1, {"foo": 2, "bar": {"baz": [1]}}, "quux"]
         schema = {
             "type": "string",
@@ -836,6 +938,7 @@
         self.assertEqual(e6.validator, "enum")
 
     def test_recursive(self):
+        """ """
         schema = {
             "definitions": {
                 "node": {
@@ -934,6 +1037,7 @@
         )
 
     def test_additionalProperties(self):
+        """ """
         instance = {"bar": "bar", "foo": 2}
         schema = {"additionalProperties": {"type": "integer", "minimum": 5}}
 
@@ -948,6 +1052,7 @@
         self.assertEqual(e2.validator, "minimum")
 
     def test_patternProperties(self):
+        """ """
         instance = {"bar": 1, "foo": 2}
         schema = {
             "patternProperties": {
@@ -967,6 +1072,7 @@
         self.assertEqual(e2.validator, "minimum")
 
     def test_additionalItems(self):
+        """ """
         instance = ["foo", 1]
         schema = {
             "items": [],
@@ -984,6 +1090,7 @@
         self.assertEqual(e2.validator, "minimum")
 
     def test_additionalItems_with_items(self):
+        """ """
         instance = ["foo", "bar", 1]
         schema = {
             "items": [{}],
@@ -1001,6 +1108,7 @@
         self.assertEqual(e2.validator, "minimum")
 
     def test_propertyNames(self):
+        """ """
         instance = {"foo": 12}
         schema = {"propertyNames": {"not": {"const": "foo"}}}
 
@@ -1016,6 +1124,7 @@
         self.assertEqual(error.schema_path, deque(["propertyNames", "not"]))
 
     def test_if_then(self):
+        """ """
         schema = {
             "if": {"const": 12},
             "then": {"const": 13},
@@ -1030,6 +1139,7 @@
         self.assertEqual(error.schema_path, deque(["if", "then", "const"]))
 
     def test_if_else(self):
+        """ """
         schema = {
             "if": {"const": 12},
             "else": {"const": 13},
@@ -1044,6 +1154,7 @@
         self.assertEqual(error.schema_path, deque(["if", "else", "const"]))
 
     def test_boolean_schema_False(self):
+        """ """
         validator = validators.Draft7Validator(False)
         error, = validator.iter_errors(12)
 
@@ -1067,6 +1178,7 @@
         )
 
     def test_ref(self):
+        """ """
         ref, schema = "someRef", {"additionalProperties": {"type": "integer"}}
         validator = validators.Draft7Validator(
             {"$ref": ref},
@@ -1097,52 +1209,73 @@
 
 
 class MetaSchemaTestsMixin(object):
+    """ """
     # TODO: These all belong upstream
     def test_invalid_properties(self):
+        """ """
         with self.assertRaises(exceptions.SchemaError):
             self.Validator.check_schema({"properties": {"test": object()}})
 
     def test_minItems_invalid_string(self):
+        """ """
         with self.assertRaises(exceptions.SchemaError):
             # needs to be an integer
             self.Validator.check_schema({"minItems": "1"})
 
     def test_enum_allows_empty_arrays(self):
-        """
-        Technically, all the spec says is they SHOULD have elements, not MUST.
-
+        """Technically, all the spec says is they SHOULD have elements, not MUST.
+        
         See https://github.com/Julian/jsonschema/issues/529.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         self.Validator.check_schema({"enum": []})
 
     def test_enum_allows_non_unique_items(self):
-        """
-        Technically, all the spec says is they SHOULD be unique, not MUST.
-
+        """Technically, all the spec says is they SHOULD be unique, not MUST.
+        
         See https://github.com/Julian/jsonschema/issues/529.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         self.Validator.check_schema({"enum": [12, 12]})
 
 
 class ValidatorTestMixin(MetaSchemaTestsMixin, object):
+    """ """
     def test_valid_instances_are_valid(self):
+        """ """
         schema, instance = self.valid
         self.assertTrue(self.Validator(schema).is_valid(instance))
 
     def test_invalid_instances_are_not_valid(self):
+        """ """
         schema, instance = self.invalid
         self.assertFalse(self.Validator(schema).is_valid(instance))
 
     def test_non_existent_properties_are_ignored(self):
+        """ """
         self.Validator({object(): object()}).validate(instance=object())
 
     def test_it_creates_a_ref_resolver_if_not_provided(self):
+        """ """
         self.assertIsInstance(
             self.Validator({}).resolver,
             validators.RefResolver,
         )
 
     def test_it_delegates_to_a_ref_resolver(self):
+        """ """
         ref, schema = "someCoolRef", {"type": "integer"}
         resolver = validators.RefResolver("", {}, store={ref: schema})
         validator = self.Validator({"$ref": ref}, resolver=resolver)
@@ -1151,14 +1284,34 @@
             validator.validate(None)
 
     def test_it_delegates_to_a_legacy_ref_resolver(self):
+        """Legacy RefResolvers support only the context manager form of
+        resolution.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
-        Legacy RefResolvers support only the context manager form of
-        resolution.
-        """
 
         class LegacyRefResolver(object):
+            """ """
             @contextmanager
             def resolving(this, ref):
+                """
+
+                Parameters
+                ----------
+                this :
+                    
+                ref :
+                    
+
+                Returns
+                -------
+
+                """
                 self.assertEqual(ref, "the ref")
                 yield {"type": "integer"}
 
@@ -1169,26 +1322,29 @@
             self.Validator(schema, resolver=resolver).validate(None)
 
     def test_is_type_is_true_for_valid_type(self):
+        """ """
         self.assertTrue(self.Validator({}).is_type("foo", "string"))
 
     def test_is_type_is_false_for_invalid_type(self):
+        """ """
         self.assertFalse(self.Validator({}).is_type("foo", "array"))
 
     def test_is_type_evades_bool_inheriting_from_int(self):
+        """ """
         self.assertFalse(self.Validator({}).is_type(True, "integer"))
         self.assertFalse(self.Validator({}).is_type(True, "number"))
 
     @unittest.skipIf(PY3, "In Python 3 json.load always produces unicode")
     def test_string_a_bytestring_is_a_string(self):
+        """ """
         self.Validator({"type": "string"}).validate(b"foo")
 
     def test_patterns_can_be_native_strings(self):
-        """
-        See https://github.com/Julian/jsonschema/issues/611.
-        """
+        """See https://github.com/Julian/jsonschema/issues/611."""
         self.Validator({"pattern": "foo"}).validate("foo")
 
     def test_it_can_validate_with_decimals(self):
+        """ """
         schema = {"items": {"type": "number"}}
         Validator = validators.extend(
             self.Validator,
@@ -1210,21 +1366,35 @@
         )
 
     def test_it_returns_true_for_formats_it_does_not_know_about(self):
+        """ """
         validator = self.Validator(
             {"format": "carrot"}, format_checker=FormatChecker(),
         )
         validator.validate("bugs")
 
     def test_it_does_not_validate_formats_by_default(self):
+        """ """
         validator = self.Validator({})
         self.assertIsNone(validator.format_checker)
 
     def test_it_validates_formats_if_a_checker_is_provided(self):
+        """ """
         checker = FormatChecker()
         bad = ValueError("Bad!")
 
         @checker.checks("foo", raises=ValueError)
         def check(value):
+            """
+
+            Parameters
+            ----------
+            value :
+                
+
+            Returns
+            -------
+
+            """
             if value == "good":
                 return True
             elif value == "bad":
@@ -1244,6 +1414,7 @@
         self.assertIs(cm.exception.cause, bad)
 
     def test_non_string_custom_type(self):
+        """ """
         non_string_type = object()
         schema = {"type": [non_string_type]}
         Crazy = validators.extend(
@@ -1256,10 +1427,16 @@
         Crazy(schema).validate(15)
 
     def test_it_properly_formats_tuples_in_errors(self):
-        """
-        A tuple instance properly formats validation errors for uniqueItems.
-
+        """A tuple instance properly formats validation errors for uniqueItems.
+        
         See https://github.com/Julian/jsonschema/pull/224
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         TupleValidator = validators.extend(
             self.Validator,
@@ -1274,22 +1451,23 @@
 
 
 class AntiDraft6LeakMixin(object):
-    """
-    Make sure functionality from draft 6 doesn't leak backwards in time.
-    """
+    """Make sure functionality from draft 6 doesn't leak backwards in time."""
 
     def test_True_is_not_a_schema(self):
+        """ """
         with self.assertRaises(exceptions.SchemaError) as e:
             self.Validator.check_schema(True)
         self.assertIn("True is not of type", str(e.exception))
 
     def test_False_is_not_a_schema(self):
+        """ """
         with self.assertRaises(exceptions.SchemaError) as e:
             self.Validator.check_schema(False)
         self.assertIn("False is not of type", str(e.exception))
 
     @unittest.skip(bug(523))
     def test_True_is_not_a_schema_even_if_you_forget_to_check(self):
+        """ """
         resolver = validators.RefResolver("", {})
         with self.assertRaises(Exception) as e:
             self.Validator(True, resolver=resolver).validate(12)
@@ -1297,6 +1475,7 @@
 
     @unittest.skip(bug(523))
     def test_False_is_not_a_schema_even_if_you_forget_to_check(self):
+        """ """
         resolver = validators.RefResolver("", {})
         with self.assertRaises(Exception) as e:
             self.Validator(False, resolver=resolver).validate(12)
@@ -1304,18 +1483,18 @@
 
 
 class TestDraft3Validator(AntiDraft6LeakMixin, ValidatorTestMixin, TestCase):
+    """ """
     Validator = validators.Draft3Validator
     valid = {}, {}
     invalid = {"type": "integer"}, "foo"
 
     def test_any_type_is_valid_for_type_any(self):
+        """ """
         validator = self.Validator({"type": "any"})
         validator.validate(object())
 
     def test_any_type_is_redefinable(self):
-        """
-        Sigh, because why not.
-        """
+        """Sigh, because why not."""
         Crazy = validators.extend(
             self.Validator,
             type_checker=self.Validator.TYPE_CHECKER.redefine(
@@ -1328,33 +1507,40 @@
             validator.validate("foo")
 
     def test_is_type_is_true_for_any_type(self):
+        """ """
         self.assertTrue(self.Validator({}).is_valid(object(), {"type": "any"}))
 
     def test_is_type_does_not_evade_bool_if_it_is_being_tested(self):
+        """ """
         self.assertTrue(self.Validator({}).is_type(True, "boolean"))
         self.assertTrue(self.Validator({}).is_valid(True, {"type": "any"}))
 
 
 class TestDraft4Validator(AntiDraft6LeakMixin, ValidatorTestMixin, TestCase):
+    """ """
     Validator = validators.Draft4Validator
     valid = {}, {}
     invalid = {"type": "integer"}, "foo"
 
 
 class TestDraft6Validator(ValidatorTestMixin, TestCase):
+    """ """
     Validator = validators.Draft6Validator
     valid = {}, {}
     invalid = {"type": "integer"}, "foo"
 
 
 class TestDraft7Validator(ValidatorTestMixin, TestCase):
+    """ """
     Validator = validators.Draft7Validator
     valid = {}, {}
     invalid = {"type": "integer"}, "foo"
 
 
 class TestValidatorFor(SynchronousTestCase):
+    """ """
     def test_draft_3(self):
+        """ """
         schema = {"$schema": "http://json-schema.org/draft-03/schema"}
         self.assertIs(
             validators.validator_for(schema),
@@ -1368,6 +1554,7 @@
         )
 
     def test_draft_4(self):
+        """ """
         schema = {"$schema": "http://json-schema.org/draft-04/schema"}
         self.assertIs(
             validators.validator_for(schema),
@@ -1381,6 +1568,7 @@
         )
 
     def test_draft_6(self):
+        """ """
         schema = {"$schema": "http://json-schema.org/draft-06/schema"}
         self.assertIs(
             validators.validator_for(schema),
@@ -1394,6 +1582,7 @@
         )
 
     def test_draft_7(self):
+        """ """
         schema = {"$schema": "http://json-schema.org/draft-07/schema"}
         self.assertIs(
             validators.validator_for(schema),
@@ -1407,18 +1596,21 @@
         )
 
     def test_True(self):
+        """ """
         self.assertIs(
             validators.validator_for(True),
             validators._LATEST_VERSION,
         )
 
     def test_False(self):
+        """ """
         self.assertIs(
             validators.validator_for(False),
             validators._LATEST_VERSION,
         )
 
     def test_custom_validator(self):
+        """ """
         Validator = validators.create(
             meta_schema={"id": "meta schema id"},
             version="12",
@@ -1431,6 +1623,7 @@
         )
 
     def test_custom_validator_draft6(self):
+        """ """
         Validator = validators.create(
             meta_schema={"$id": "meta schema $id"},
             version="13",
@@ -1442,12 +1635,15 @@
         )
 
     def test_validator_for_jsonschema_default(self):
+        """ """
         self.assertIs(validators.validator_for({}), validators._LATEST_VERSION)
 
     def test_validator_for_custom_default(self):
+        """ """
         self.assertIs(validators.validator_for({}, default=None), None)
 
     def test_warns_if_meta_schema_specified_was_not_found(self):
+        """ """
         self.assertWarns(
             category=DeprecationWarning,
             message=(
@@ -1464,18 +1660,34 @@
         )
 
     def test_does_not_warn_if_meta_schema_is_unspecified(self):
+        """ """
         validators.validator_for(schema={}, default={}),
         self.assertFalse(self.flushWarnings())
 
 
 class TestValidate(SynchronousTestCase):
+    """ """
     def assertUses(self, schema, Validator):
+        """
+
+        Parameters
+        ----------
+        schema :
+            
+        Validator :
+            
+
+        Returns
+        -------
+
+        """
         result = []
         self.patch(Validator, "check_schema", result.append)
         validators.validate({}, schema)
         self.assertEqual(result, [schema])
 
     def test_draft3_validator_is_chosen(self):
+        """ """
         self.assertUses(
             schema={"$schema": "http://json-schema.org/draft-03/schema#"},
             Validator=validators.Draft3Validator,
@@ -1487,6 +1699,7 @@
         )
 
     def test_draft4_validator_is_chosen(self):
+        """ """
         self.assertUses(
             schema={"$schema": "http://json-schema.org/draft-04/schema#"},
             Validator=validators.Draft4Validator,
@@ -1498,6 +1711,7 @@
         )
 
     def test_draft6_validator_is_chosen(self):
+        """ """
         self.assertUses(
             schema={"$schema": "http://json-schema.org/draft-06/schema#"},
             Validator=validators.Draft6Validator,
@@ -1509,6 +1723,7 @@
         )
 
     def test_draft7_validator_is_chosen(self):
+        """ """
         self.assertUses(
             schema={"$schema": "http://json-schema.org/draft-07/schema#"},
             Validator=validators.Draft7Validator,
@@ -1520,9 +1735,11 @@
         )
 
     def test_draft7_validator_is_the_default(self):
+        """ """
         self.assertUses(schema={}, Validator=validators.Draft7Validator)
 
     def test_validation_error_message(self):
+        """ """
         with self.assertRaises(exceptions.ValidationError) as e:
             validators.validate(12, {"type": "string"})
         self.assertRegexpMatches(
@@ -1531,6 +1748,7 @@
         )
 
     def test_schema_error_message(self):
+        """ """
         with self.assertRaises(exceptions.SchemaError) as e:
             validators.validate(12, {"type": 12})
         self.assertRegexpMatches(
@@ -1539,6 +1757,7 @@
         )
 
     def test_it_uses_best_match(self):
+        """ """
         # This is a schema that best_match will recurse into
         schema = {"oneOf": [{"type": "string"}, {"type": "array"}]}
         with self.assertRaises(exceptions.ValidationError) as e:
@@ -1547,12 +1766,14 @@
 
 
 class TestRefResolver(SynchronousTestCase):
+    """ """
 
     base_uri = ""
     stored_uri = "foo://stored"
     stored_schema = {"stored": "schema"}
 
     def setUp(self):
+        """ """
         self.referrer = {}
         self.store = {self.stored_uri: self.stored_schema}
         self.resolver = validators.RefResolver(
@@ -1560,6 +1781,7 @@
         )
 
     def test_it_does_not_retrieve_schema_urls_from_the_network(self):
+        """ """
         ref = validators.Draft3Validator.META_SCHEMA["id"]
         self.patch(
             self.resolver,
@@ -1571,12 +1793,14 @@
         self.assertEqual(resolved, validators.Draft3Validator.META_SCHEMA)
 
     def test_it_resolves_local_refs(self):
+        """ """
         ref = "#/properties/foo"
         self.referrer["properties"] = {"foo": object()}
         with self.resolver.resolving(ref) as resolved:
             self.assertEqual(resolved, self.referrer["properties"]["foo"])
 
     def test_it_resolves_local_refs_with_id(self):
+        """ """
         schema = {"id": "http://bar/schema#", "a": {"foo": "bar"}}
         resolver = validators.RefResolver.from_schema(
             schema,
@@ -1588,6 +1812,7 @@
             self.assertEqual(resolved, schema["a"])
 
     def test_it_retrieves_stored_refs(self):
+        """ """
         with self.resolver.resolving(self.stored_uri) as resolved:
             self.assertIs(resolved, self.stored_schema)
 
@@ -1596,6 +1821,7 @@
             self.assertEqual(resolved, 12)
 
     def test_it_retrieves_unstored_refs_via_requests(self):
+        """ """
         ref = "http://bar#baz"
         schema = {"baz": 12}
 
@@ -1609,6 +1835,7 @@
             self.assertEqual(resolved, 12)
 
     def test_it_retrieves_unstored_refs_via_urlopen(self):
+        """ """
         ref = "http://bar#baz"
         schema = {"baz": 12}
 
@@ -1620,6 +1847,17 @@
 
         @contextmanager
         def fake_urlopen(url):
+            """
+
+            Parameters
+            ----------
+            url :
+                
+
+            Returns
+            -------
+
+            """
             self.assertEqual(url, "http://bar")
             yield BytesIO(json.dumps(schema).encode("utf8"))
 
@@ -1631,6 +1869,7 @@
         self.assertEqual(resolved, 12)
 
     def test_it_retrieves_local_refs_via_urlopen(self):
+        """ """
         with tempfile.NamedTemporaryFile(delete=False, mode="wt") as tempf:
             self.addCleanup(os.remove, tempf.name)
             json.dump({"foo": "bar"}, tempf)
@@ -1640,6 +1879,7 @@
             self.assertEqual(resolved, "bar")
 
     def test_it_can_construct_a_base_uri_from_a_schema(self):
+        """ """
         schema = {"id": "foo"}
         resolver = validators.RefResolver.from_schema(
             schema,
@@ -1657,6 +1897,7 @@
             self.assertEqual(resolved, schema)
 
     def test_it_can_construct_a_base_uri_from_a_schema_without_id(self):
+        """ """
         schema = {}
         resolver = validators.RefResolver.from_schema(schema)
         self.assertEqual(resolver.base_uri, "")
@@ -1667,7 +1908,19 @@
             self.assertEqual(resolved, schema)
 
     def test_custom_uri_scheme_handlers(self):
+        """ """
         def handler(url):
+            """
+
+            Parameters
+            ----------
+            url :
+                
+
+            Returns
+            -------
+
+            """
             self.assertEqual(url, ref)
             return schema
 
@@ -1678,9 +1931,21 @@
             self.assertEqual(resolved, schema)
 
     def test_cache_remote_on(self):
+        """ """
         response = [object()]
 
         def handler(url):
+            """
+
+            Parameters
+            ----------
+            url :
+                
+
+            Returns
+            -------
+
+            """
             try:
                 return response.pop()
             except IndexError:  # pragma: no cover
@@ -1696,9 +1961,21 @@
             pass
 
     def test_cache_remote_off(self):
+        """ """
         response = [object()]
 
         def handler(url):
+            """
+
+            Parameters
+            ----------
+            url :
+                
+
+            Returns
+            -------
+
+            """
             try:
                 return response.pop()
             except IndexError:  # pragma: no cover
@@ -1712,9 +1989,21 @@
             pass
 
     def test_if_you_give_it_junk_you_get_a_resolution_error(self):
+        """ """
         error = ValueError("Oh no! What's this?")
 
         def handler(url):
+            """
+
+            Parameters
+            ----------
+            url :
+                
+
+            Returns
+            -------
+
+            """
             raise error
 
         ref = "foo://bar"
@@ -1725,6 +2014,7 @@
         self.assertEqual(err.exception, exceptions.RefResolutionError(error))
 
     def test_helpful_error_message_on_failed_pop_scope(self):
+        """ """
         resolver = validators.RefResolver("", {})
         resolver.pop_scope()
         with self.assertRaises(exceptions.RefResolutionError) as exc:
@@ -1733,7 +2023,29 @@
 
 
 def sorted_errors(errors):
+    """
+
+    Parameters
+    ----------
+    errors :
+        
+
+    Returns
+    -------
+
+    """
     def key(error):
+        """
+
+        Parameters
+        ----------
+        error :
+            
+
+        Returns
+        -------
+
+        """
         return (
             [str(e) for e in error.path],
             [str(e) for e in error.schema_path],
@@ -1743,10 +2055,22 @@
 
 @attr.s
 class ReallyFakeRequests(object):
+    """ """
 
     _responses = attr.ib()
 
     def get(self, url):
+        """
+
+        Parameters
+        ----------
+        url :
+            
+
+        Returns
+        -------
+
+        """
         response = self._responses.get(url)
         if url is None:  # pragma: no cover
             raise ValueError("Unknown URL: " + repr(url))
@@ -1755,8 +2079,10 @@
 
 @attr.s
 class _ReallyFakeJSONResponse(object):
+    """ """
 
     _response = attr.ib()
 
     def json(self):
+        """ """
         return json.loads(self._response)
