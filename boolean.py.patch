# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/arrays/boolean.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/arrays/boolean.py
@@ -33,24 +33,27 @@
 
 @register_extension_dtype
 class BooleanDtype(BaseMaskedDtype):
-    """
-    Extension dtype for boolean data.
-
+    """Extension dtype for boolean data.
+    
     .. versionadded:: 1.0.0
-
+    
     .. warning::
-
+    
        BooleanDtype is considered experimental. The implementation and
        parts of the API may change without warning.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     Attributes
     ----------
     None
-
     Methods
     -------
     None
-
     Examples
     --------
     >>> pd.BooleanDtype()
@@ -61,25 +64,22 @@
 
     @property
     def type(self) -> Type[np.bool_]:
+        """ """
         return np.bool_
 
     @property
     def kind(self) -> str:
+        """ """
         return "b"
 
     @property
     def numpy_dtype(self) -> np.dtype:
+        """ """
         return np.dtype("bool")
 
     @classmethod
     def construct_array_type(cls) -> Type["BooleanArray"]:
-        """
-        Return the array type associated with this dtype.
-
-        Returns
-        -------
-        type
-        """
+        """Return the array type associated with this dtype."""
         return BooleanArray
 
     def __repr__(self) -> str:
@@ -87,10 +87,12 @@
 
     @property
     def _is_boolean(self) -> bool:
+        """ """
         return True
 
     @property
     def _is_numeric(self) -> bool:
+        """ """
         return True
 
     def __from_arrow__(
@@ -119,19 +121,23 @@
 def coerce_to_array(
     values, mask=None, copy: bool = False
 ) -> Tuple[np.ndarray, np.ndarray]:
-    """
-    Coerce the input values array to numpy arrays with a mask.
+    """Coerce the input values array to numpy arrays with a mask.
 
     Parameters
     ----------
     values : 1D list-like
+        
     mask : bool 1D array, optional
+         (Default value = None)
     copy : bool, default False
         if True, copy the input
+    copy: bool :
+         (Default value = False)
 
     Returns
     -------
-    tuple of (values, mask)
+
+    
     """
     if isinstance(values, BooleanArray):
         if mask is not None:
@@ -203,24 +209,23 @@
 
 
 class BooleanArray(BaseMaskedArray):
-    """
-    Array of boolean (True/False) data with missing values.
-
+    """Array of boolean (True/False) data with missing values.
+    
     This is a pandas Extension array for boolean data, under the hood
     represented by 2 numpy arrays: a boolean array with the data and
     a boolean array with the mask (True indicating missing).
-
+    
     BooleanArray implements Kleene logic (sometimes called three-value
     logic) for logical operations. See :ref:`boolean.kleene` for more.
-
+    
     To construct an BooleanArray from generic array-like input, use
     :func:`pandas.array` specifying ``dtype="boolean"`` (see examples
     below).
-
+    
     .. versionadded:: 1.0.0
-
+    
     .. warning::
-
+    
        BooleanArray is considered experimental. The implementation and
        parts of the API may change without warning.
 
@@ -234,22 +239,20 @@
     copy : bool, default False
         Whether to copy the `values` and `mask` arrays.
 
+    Returns
+    -------
+    BooleanArray
+        
+
     Attributes
     ----------
     None
-
     Methods
     -------
     None
-
-    Returns
-    -------
-    BooleanArray
-
     Examples
     --------
     Create an BooleanArray with :func:`pandas.array`:
-
     >>> pd.array([True, False, None], dtype="boolean")
     <BooleanArray>
     [True, False, <NA>]
@@ -270,10 +273,26 @@
 
     @property
     def dtype(self) -> BooleanDtype:
+        """ """
         return self._dtype
 
     @classmethod
     def _from_sequence(cls, scalars, dtype=None, copy: bool = False) -> "BooleanArray":
+        """
+
+        Parameters
+        ----------
+        scalars :
+            
+        dtype :
+             (Default value = None)
+        copy: bool :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         if dtype:
             assert dtype == "boolean"
         values, mask = coerce_to_array(scalars, copy=copy)
@@ -283,7 +302,33 @@
     def _from_sequence_of_strings(
         cls, strings: List[str], dtype=None, copy: bool = False
     ) -> "BooleanArray":
+        """
+
+        Parameters
+        ----------
+        strings: List[str] :
+            
+        dtype :
+             (Default value = None)
+        copy: bool :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         def map_string(s):
+            """
+
+            Parameters
+            ----------
+            s :
+                
+
+            Returns
+            -------
+
+            """
             if isna(s):
                 return s
             elif s in ["True", "TRUE", "true", "1", "1.0"]:
@@ -327,6 +372,17 @@
                 inputs2.append(x)
 
         def reconstruct(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             # we don't worry about scalar `x` here, since we
             # raise for reduce up above.
 
@@ -344,11 +400,21 @@
             return reconstruct(result)
 
     def _coerce_to_array(self, value) -> Tuple[np.ndarray, np.ndarray]:
+        """
+
+        Parameters
+        ----------
+        value :
+            
+
+        Returns
+        -------
+
+        """
         return coerce_to_array(value)
 
     def astype(self, dtype, copy: bool = True) -> ArrayLike:
-        """
-        Cast to a NumPy array or ExtensionArray with 'dtype'.
+        """Cast to a NumPy array or ExtensionArray with 'dtype'.
 
         Parameters
         ----------
@@ -358,17 +424,15 @@
             Whether to copy the data, even if not necessary. If False,
             a copy is made only if the old dtype does not match the
             new dtype.
+        copy: bool :
+             (Default value = True)
 
         Returns
         -------
         ndarray or ExtensionArray
             NumPy ndarray, BooleanArray or IntegerArray with 'dtype' for its dtype.
 
-        Raises
-        ------
-        TypeError
-            if incompatible type with an BooleanDtype, equivalent of same_kind
-            casting
+        
         """
         from pandas.core.arrays.string_ import StringDtype
 
@@ -405,8 +469,10 @@
         return self.to_numpy(dtype=dtype, na_value=na_value, copy=False)
 
     def _values_for_argsort(self) -> np.ndarray:
-        """
-        Return values for sorting.
+        """Return values for sorting.
+
+        Parameters
+        ----------
 
         Returns
         -------
@@ -423,9 +489,8 @@
         return data
 
     def any(self, skipna: bool = True, **kwargs):
-        """
-        Return whether any element is True.
-
+        """Return whether any element is True.
+        
         Returns False unless there is at least one element that is True.
         By default, NAs are skipped. If ``skipna=False`` is specified and
         missing values are present, similar :ref:`Kleene logic <boolean.kleene>`
@@ -442,21 +507,26 @@
         **kwargs : any, default None
             Additional keywords have no effect but might be accepted for
             compatibility with NumPy.
-
-        Returns
-        -------
-        bool or :attr:`pandas.NA`
+        skipna: bool :
+             (Default value = True)
+
+        Returns
+        -------
+        bool or : attr:`pandas.NA`
+            
 
         See Also
         --------
         numpy.any : Numpy version of this method.
         BooleanArray.all : Return whether all elements are True.
-
         Examples
         --------
         The result indicates whether any element is True (and by default
         skips NAs):
-
+        
+        
+        With ``skipna=False``, the result can be NA if this is logically
+        required (whether ``pd.NA`` is True or False influences the result):
         >>> pd.array([True, False, True]).any()
         True
         >>> pd.array([True, False, pd.NA]).any()
@@ -467,10 +537,7 @@
         False
         >>> pd.array([pd.NA], dtype="boolean").any()
         False
-
-        With ``skipna=False``, the result can be NA if this is logically
-        required (whether ``pd.NA`` is True or False influences the result):
-
+        
         >>> pd.array([True, False, pd.NA]).any(skipna=False)
         True
         >>> pd.array([False, False, pd.NA]).any(skipna=False)
@@ -491,9 +558,8 @@
                 return self.dtype.na_value
 
     def all(self, skipna: bool = True, **kwargs):
-        """
-        Return whether all elements are True.
-
+        """Return whether all elements are True.
+        
         Returns True unless there is at least one element that is False.
         By default, NAs are skipped. If ``skipna=False`` is specified and
         missing values are present, similar :ref:`Kleene logic <boolean.kleene>`
@@ -510,21 +576,26 @@
         **kwargs : any, default None
             Additional keywords have no effect but might be accepted for
             compatibility with NumPy.
-
-        Returns
-        -------
-        bool or :attr:`pandas.NA`
+        skipna: bool :
+             (Default value = True)
+
+        Returns
+        -------
+        bool or : attr:`pandas.NA`
+            
 
         See Also
         --------
         numpy.all : Numpy version of this method.
         BooleanArray.any : Return whether any element is True.
-
         Examples
         --------
         The result indicates whether any element is True (and by default
         skips NAs):
-
+        
+        
+        With ``skipna=False``, the result can be NA if this is logically
+        required (whether ``pd.NA`` is True or False influences the result):
         >>> pd.array([True, True, pd.NA]).all()
         True
         >>> pd.array([True, False, pd.NA]).all()
@@ -533,10 +604,7 @@
         True
         >>> pd.array([pd.NA], dtype="boolean").all()
         True
-
-        With ``skipna=False``, the result can be NA if this is logically
-        required (whether ``pd.NA`` is True or False influences the result):
-
+        
         >>> pd.array([True, True, pd.NA]).all(skipna=False)
         <NA>
         >>> pd.array([True, False, pd.NA]).all(skipna=False)
@@ -559,7 +627,29 @@
 
     @classmethod
     def _create_logical_method(cls, op):
+        """
+
+        Parameters
+        ----------
+        op :
+            
+
+        Returns
+        -------
+
+        """
         def logical_method(self, other):
+            """
+
+            Parameters
+            ----------
+            other :
+                
+
+            Returns
+            -------
+
+            """
             if isinstance(other, (ABCDataFrame, ABCSeries, ABCIndexClass)):
                 # Rely on pandas to unbox and dispatch to us.
                 return NotImplemented
@@ -605,7 +695,29 @@
 
     @classmethod
     def _create_comparison_method(cls, op):
+        """
+
+        Parameters
+        ----------
+        op :
+            
+
+        Returns
+        -------
+
+        """
         def cmp_method(self, other):
+            """
+
+            Parameters
+            ----------
+            other :
+                
+
+            Returns
+            -------
+
+            """
             from pandas.arrays import IntegerArray
 
             if isinstance(
@@ -654,6 +766,21 @@
         return set_function_name(cmp_method, name, cls)
 
     def _reduce(self, name: str, skipna: bool = True, **kwargs):
+        """
+
+        Parameters
+        ----------
+        name: str :
+            
+        skipna: bool :
+             (Default value = True)
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
 
         if name in {"any", "all"}:
             return getattr(self, name)(skipna=skipna, **kwargs)
@@ -662,12 +789,22 @@
 
     def _maybe_mask_result(self, result, mask, other, op_name: str):
         """
-        Parameters
-        ----------
-        result : array-like
-        mask : array-like bool
-        other : scalar or array-like
-        op_name : str
+
+        Parameters
+        ----------
+        result :
+            
+        mask :
+            
+        other :
+            
+        op_name: str :
+            
+
+        Returns
+        -------
+
+        
         """
         # if we have a float operand we are by-definition
         # a float result
@@ -691,9 +828,31 @@
 
     @classmethod
     def _create_arithmetic_method(cls, op):
+        """
+
+        Parameters
+        ----------
+        op :
+            
+
+        Returns
+        -------
+
+        """
         op_name = op.__name__
 
         def boolean_arithmetic_method(self, other):
+            """
+
+            Parameters
+            ----------
+            other :
+                
+
+            Returns
+            -------
+
+            """
 
             if isinstance(other, (ABCDataFrame, ABCSeries, ABCIndexClass)):
                 # Rely on pandas to unbox and dispatch to us.
