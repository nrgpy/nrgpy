# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/random/tests/test_random.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/random/tests/test_random.py
@@ -11,13 +11,16 @@
 
 
 class TestSeed:
+    """ """
     def test_scalar(self):
+        """ """
         s = np.random.RandomState(0)
         assert_equal(s.randint(1000), 684)
         s = np.random.RandomState(4294967295)
         assert_equal(s.randint(1000), 419)
 
     def test_array(self):
+        """ """
         s = np.random.RandomState(range(10))
         assert_equal(s.randint(1000), 468)
         s = np.random.RandomState(np.arange(10))
@@ -28,11 +31,13 @@
         assert_equal(s.randint(1000), 265)
 
     def test_invalid_scalar(self):
+        """ """
         # seed must be an unsigned 32 bit integer
         assert_raises(TypeError, np.random.RandomState, -0.5)
         assert_raises(ValueError, np.random.RandomState, -1)
 
     def test_invalid_array(self):
+        """ """
         # seed must be an unsigned 32 bit integer
         assert_raises(TypeError, np.random.RandomState, [-0.5])
         assert_raises(ValueError, np.random.RandomState, [-1])
@@ -41,6 +46,7 @@
         assert_raises(ValueError, np.random.RandomState, [1, -2, 4294967296])
 
     def test_invalid_array_shape(self):
+        """ """
         # gh-9832
         assert_raises(ValueError, np.random.RandomState,
                       np.array([], dtype=np.int64))
@@ -50,7 +56,9 @@
 
 
 class TestBinomial:
+    """ """
     def test_n_zero(self):
+        """ """
         # Tests the corner case of n == 0 for the binomial distribution.
         # binomial(0, p) should be zero for any p in [0, 1].
         # This test addresses issue #3480.
@@ -60,24 +68,30 @@
             assert_array_equal(random.binomial(zeros, p), zeros)
 
     def test_p_is_nan(self):
+        """ """
         # Issue #4571.
         assert_raises(ValueError, random.binomial, 1, np.nan)
 
 
 class TestMultinomial:
+    """ """
     def test_basic(self):
+        """ """
         random.multinomial(100, [0.2, 0.8])
 
     def test_zero_probability(self):
+        """ """
         random.multinomial(100, [0.2, 0.8, 0.0, 0.0, 0.0])
 
     def test_int_negative_interval(self):
+        """ """
         assert_(-5 <= random.randint(-5, -1) < -1)
         x = random.randint(-5, -1, 5)
         assert_(np.all(-5 <= x))
         assert_(np.all(x < -1))
 
     def test_size(self):
+        """ """
         # gh-3173
         p = [0.5, 0.5]
         assert_equal(np.random.multinomial(1, p, np.uint32(1)).shape, (1, 2))
@@ -92,6 +106,7 @@
                       float(1))
 
     def test_multidimensional_pvals(self):
+        """ """
         assert_raises(ValueError, np.random.multinomial, 10, [[0, 1]])
         assert_raises(ValueError, np.random.multinomial, 10, [[0], [1]])
         assert_raises(ValueError, np.random.multinomial, 10, [[[0], [1]], [[1], [0]]])
@@ -99,18 +114,22 @@
 
 
 class TestSetState:
+    """ """
     def setup(self):
+        """ """
         self.seed = 1234567890
         self.prng = random.RandomState(self.seed)
         self.state = self.prng.get_state()
 
     def test_basic(self):
+        """ """
         old = self.prng.tomaxint(16)
         self.prng.set_state(self.state)
         new = self.prng.tomaxint(16)
         assert_(np.all(old == new))
 
     def test_gaussian_reset(self):
+        """ """
         # Make sure the cached every-other-Gaussian is reset.
         old = self.prng.standard_normal(size=3)
         self.prng.set_state(self.state)
@@ -118,6 +137,7 @@
         assert_(np.all(old == new))
 
     def test_gaussian_reset_in_media_res(self):
+        """ """
         # When the state is saved with a cached Gaussian, make sure the
         # cached Gaussian is restored.
 
@@ -129,6 +149,7 @@
         assert_(np.all(old == new))
 
     def test_backwards_compatibility(self):
+        """ """
         # Make sure we can accept old state tuples that do not have the
         # cached Gaussian value.
         old_state = self.state[:-2]
@@ -141,12 +162,14 @@
         assert_(np.all(x1 == x3))
 
     def test_negative_binomial(self):
+        """ """
         # Ensure that the negative binomial results take floating point
         # arguments without truncation.
         self.prng.negative_binomial(0.5, 0.5)
 
 
 class TestRandint:
+    """ """
 
     rfunc = np.random.randint
 
@@ -155,9 +178,11 @@
              np.int32, np.uint32, np.int64, np.uint64]
 
     def test_unsupported_type(self):
+        """ """
         assert_raises(TypeError, self.rfunc, 1, dtype=float)
 
     def test_bounds_checking(self):
+        """ """
         for dt in self.itype:
             lbnd = 0 if dt is np.bool_ else np.iinfo(dt).min
             ubnd = 2 if dt is np.bool_ else np.iinfo(dt).max + 1
@@ -167,6 +192,7 @@
             assert_raises(ValueError, self.rfunc, 1, 0, dtype=dt)
 
     def test_rng_zero_and_extremes(self):
+        """ """
         for dt in self.itype:
             lbnd = 0 if dt is np.bool_ else np.iinfo(dt).min
             ubnd = 2 if dt is np.bool_ else np.iinfo(dt).max + 1
@@ -181,6 +207,7 @@
             assert_equal(self.rfunc(tgt, tgt + 1, size=1000, dtype=dt), tgt)
 
     def test_full_range(self):
+        """ """
         # Test for ticket #1690
 
         for dt in self.itype:
@@ -195,6 +222,7 @@
                                      "message:\n\n%s" % str(e))
 
     def test_in_bounds_fuzz(self):
+        """ """
         # Don't use fixed seed
         np.random.seed()
 
@@ -210,6 +238,7 @@
         assert_(vals.min() >= 0)
 
     def test_repeatability(self):
+        """ """
         import hashlib
         # We use a md5 hash of generated sequences of 1000 samples
         # in the range [0, 6) for all but bool, where the range
@@ -243,6 +272,7 @@
         assert_(tgt[np.dtype(bool).name] == res)
 
     def test_int64_uint64_corner_case(self):
+        """ """
         # When stored in Numpy arrays, `lbnd` is casted
         # as np.int64, and `ubnd` is casted as np.uint64.
         # Checking whether `lbnd` >= `ubnd` used to be
@@ -266,6 +296,7 @@
         assert_equal(actual, tgt)
 
     def test_respect_dtype_singleton(self):
+        """ """
         # See gh-7203
         for dt in self.itype:
             lbnd = 0 if dt is np.bool_ else np.iinfo(dt).min
@@ -285,13 +316,16 @@
 
 
 class TestRandomDist:
+    """ """
     # Make sure the random distribution returns the correct value for a
     # given seed
 
     def setup(self):
+        """ """
         self.seed = 1234567890
 
     def test_rand(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.rand(3, 2)
         desired = np.array([[0.61879477158567997, 0.59162362775974664],
@@ -300,6 +334,7 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_randn(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.randn(3, 2)
         desired = np.array([[1.34016345771863121, 1.73759122771936081],
@@ -308,6 +343,7 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_randint(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.randint(-99, 99, size=(3, 2))
         desired = np.array([[31, 3],
@@ -316,6 +352,7 @@
         assert_array_equal(actual, desired)
 
     def test_random_integers(self):
+        """ """
         np.random.seed(self.seed)
         with suppress_warnings() as sup:
             w = sup.record(DeprecationWarning)
@@ -327,6 +364,7 @@
         assert_array_equal(actual, desired)
 
     def test_random_integers_max_int(self):
+        """ """
         # Tests whether random_integers can generate the
         # maximum allowed Python int that can be converted
         # into a C long. Previous implementations of this
@@ -342,6 +380,7 @@
         assert_equal(actual, desired)
 
     def test_random_integers_deprecated(self):
+        """ """
         with warnings.catch_warnings():
             warnings.simplefilter("error", DeprecationWarning)
 
@@ -356,6 +395,7 @@
                           np.iinfo('l').max, np.iinfo('l').max)
 
     def test_random(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.random((3, 2))
         desired = np.array([[0.61879477158567997, 0.59162362775974664],
@@ -364,24 +404,28 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_choice_uniform_replace(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.choice(4, 4)
         desired = np.array([2, 3, 2, 3])
         assert_array_equal(actual, desired)
 
     def test_choice_nonuniform_replace(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.choice(4, 4, p=[0.4, 0.4, 0.1, 0.1])
         desired = np.array([1, 1, 2, 2])
         assert_array_equal(actual, desired)
 
     def test_choice_uniform_noreplace(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.choice(4, 3, replace=False)
         desired = np.array([0, 1, 3])
         assert_array_equal(actual, desired)
 
     def test_choice_nonuniform_noreplace(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.choice(4, 3, replace=False,
                                   p=[0.1, 0.3, 0.5, 0.1])
@@ -389,12 +433,14 @@
         assert_array_equal(actual, desired)
 
     def test_choice_noninteger(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.choice(['a', 'b', 'c', 'd'], 4)
         desired = np.array(['c', 'd', 'c', 'd'])
         assert_array_equal(actual, desired)
 
     def test_choice_exceptions(self):
+        """ """
         sample = np.random.choice
         assert_raises(ValueError, sample, -1, 3)
         assert_raises(ValueError, sample, 3., 3)
@@ -414,6 +460,7 @@
                       replace=False, p=[1, 0, 0])
 
     def test_choice_return_shape(self):
+        """ """
         p = [0.1, 0.9]
         # Check scalar
         assert_(np.isscalar(np.random.choice(2, replace=True)))
@@ -460,17 +507,20 @@
         assert_raises(ValueError, np.random.choice, [], 10)
 
     def test_choice_nan_probabilities(self):
+        """ """
         a = np.array([42, 1, 2])
         p = [None, None, None]
         assert_raises(ValueError, np.random.choice, a, p=p)
 
     def test_bytes(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.bytes(10)
         desired = b'\x82Ui\x9e\xff\x97+Wf\xa5'
         assert_equal(actual, desired)
 
     def test_shuffle(self):
+        """ """
         # Test lists, arrays (of various dtypes), and multidimensional versions
         # of both, c-contiguous or not:
         for conv in [lambda x: np.array([]),
@@ -497,6 +547,7 @@
             assert_array_equal(actual, desired)
 
     def test_shuffle_masked(self):
+        """ """
         # gh-3263
         a = np.ma.masked_values(np.reshape(range(20), (5, 4)) % 3 - 1, -1)
         b = np.ma.masked_values(np.arange(20) % 3 - 1, -1)
@@ -511,6 +562,7 @@
                 sorted(b.data[~b.mask]), sorted(b_orig.data[~b_orig.mask]))
 
     def test_beta(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.beta(.1, .9, size=(3, 2))
         desired = np.array(
@@ -520,6 +572,7 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_binomial(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.binomial(100, .456, size=(3, 2))
         desired = np.array([[37, 43],
@@ -528,6 +581,7 @@
         assert_array_equal(actual, desired)
 
     def test_chisquare(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.chisquare(50, size=(3, 2))
         desired = np.array([[63.87858175501090585, 68.68407748911370447],
@@ -536,6 +590,7 @@
         assert_array_almost_equal(actual, desired, decimal=13)
 
     def test_dirichlet(self):
+        """ """
         np.random.seed(self.seed)
         alpha = np.array([51.72840233779265162, 39.74494232180943953])
         actual = np.random.mtrand.dirichlet(alpha, size=(3, 2))
@@ -548,6 +603,7 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_dirichlet_size(self):
+        """ """
         # gh-3173
         p = np.array([51.72840233779265162, 39.74494232180943953])
         assert_equal(np.random.dirichlet(p, np.uint32(1)).shape, (1, 2))
@@ -560,6 +616,7 @@
         assert_raises(TypeError, np.random.dirichlet, p, float(1))
 
     def test_dirichlet_bad_alpha(self):
+        """ """
         # gh-2089
         alpha = np.array([5.4e-01, -1.0e-16])
         assert_raises(ValueError, np.random.mtrand.dirichlet, alpha)
@@ -571,6 +628,7 @@
         assert_raises(ValueError, random.dirichlet, np.array([[5, 1], [1, 5]]))
 
     def test_exponential(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.exponential(1.1234, size=(3, 2))
         desired = np.array([[1.08342649775011624, 1.00607889924557314],
@@ -579,10 +637,12 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_exponential_0(self):
+        """ """
         assert_equal(np.random.exponential(scale=0), 0)
         assert_raises(ValueError, np.random.exponential, scale=-0.)
 
     def test_f(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.f(12, 77, size=(3, 2))
         desired = np.array([[1.21975394418575878, 1.75135759791559775],
@@ -591,6 +651,7 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_gamma(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.gamma(5, 3, size=(3, 2))
         desired = np.array([[24.60509188649287182, 28.54993563207210627],
@@ -599,10 +660,12 @@
         assert_array_almost_equal(actual, desired, decimal=14)
 
     def test_gamma_0(self):
+        """ """
         assert_equal(np.random.gamma(shape=0, scale=0), 0)
         assert_raises(ValueError, np.random.gamma, shape=-0., scale=-0.)
 
     def test_geometric(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.geometric(.123456789, size=(3, 2))
         desired = np.array([[8, 7],
@@ -611,6 +674,7 @@
         assert_array_equal(actual, desired)
 
     def test_gumbel(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.gumbel(loc=.123456789, scale=2.0, size=(3, 2))
         desired = np.array([[0.19591898743416816, 0.34405539668096674],
@@ -619,10 +683,12 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_gumbel_0(self):
+        """ """
         assert_equal(np.random.gumbel(scale=0), 0)
         assert_raises(ValueError, np.random.gumbel, scale=-0.)
 
     def test_hypergeometric(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.hypergeometric(10, 5, 14, size=(3, 2))
         desired = np.array([[10, 10],
@@ -649,6 +715,7 @@
         assert_array_equal(actual, desired)
 
     def test_laplace(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.laplace(loc=.123456789, scale=2.0, size=(3, 2))
         desired = np.array([[0.66599721112760157, 0.52829452552221945],
@@ -657,10 +724,12 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_laplace_0(self):
+        """ """
         assert_equal(np.random.laplace(scale=0), 0)
         assert_raises(ValueError, np.random.laplace, scale=-0.)
 
     def test_logistic(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.logistic(loc=.123456789, scale=2.0, size=(3, 2))
         desired = np.array([[1.09232835305011444, 0.8648196662399954],
@@ -669,6 +738,7 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_lognormal(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.lognormal(mean=.123456789, sigma=2.0, size=(3, 2))
         desired = np.array([[16.50698631688883822, 36.54846706092654784],
@@ -677,10 +747,12 @@
         assert_array_almost_equal(actual, desired, decimal=13)
 
     def test_lognormal_0(self):
+        """ """
         assert_equal(np.random.lognormal(sigma=0), 1)
         assert_raises(ValueError, np.random.lognormal, sigma=-0.)
 
     def test_logseries(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.logseries(p=.923456789, size=(3, 2))
         desired = np.array([[2, 2],
@@ -689,6 +761,7 @@
         assert_array_equal(actual, desired)
 
     def test_multinomial(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.multinomial(20, [1/6.]*6, size=(3, 2))
         desired = np.array([[[4, 3, 5, 4, 2, 2],
@@ -700,6 +773,7 @@
         assert_array_equal(actual, desired)
 
     def test_multivariate_normal(self):
+        """ """
         np.random.seed(self.seed)
         mean = (.123456789, 10)
         cov = [[1, 0], [0, 1]]
@@ -740,6 +814,7 @@
             assert len(w) == 0
 
     def test_negative_binomial(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.negative_binomial(n=100, p=.12345, size=(3, 2))
         desired = np.array([[848, 841],
@@ -748,6 +823,7 @@
         assert_array_equal(actual, desired)
 
     def test_noncentral_chisquare(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.noncentral_chisquare(df=5, nonc=5, size=(3, 2))
         desired = np.array([[23.91905354498517511, 13.35324692733826346],
@@ -769,6 +845,7 @@
         assert_array_almost_equal(actual, desired, decimal=14)
 
     def test_noncentral_f(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.noncentral_f(dfnum=5, dfden=2, nonc=1,
                                         size=(3, 2))
@@ -778,6 +855,7 @@
         assert_array_almost_equal(actual, desired, decimal=14)
 
     def test_normal(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.normal(loc=.123456789, scale=2.0, size=(3, 2))
         desired = np.array([[2.80378370443726244, 3.59863924443872163],
@@ -786,10 +864,12 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_normal_0(self):
+        """ """
         assert_equal(np.random.normal(scale=0), 0)
         assert_raises(ValueError, np.random.normal, scale=-0.)
 
     def test_pareto(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.pareto(a=.123456789, size=(3, 2))
         desired = np.array(
@@ -805,6 +885,7 @@
         np.testing.assert_array_almost_equal_nulp(actual, desired, nulp=30)
 
     def test_poisson(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.poisson(lam=.123456789, size=(3, 2))
         desired = np.array([[0, 0],
@@ -813,6 +894,7 @@
         assert_array_equal(actual, desired)
 
     def test_poisson_exceptions(self):
+        """ """
         lambig = np.iinfo('l').max
         lamneg = -1
         assert_raises(ValueError, np.random.poisson, lamneg)
@@ -821,6 +903,7 @@
         assert_raises(ValueError, np.random.poisson, [lambig]*10)
 
     def test_power(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.power(a=.123456789, size=(3, 2))
         desired = np.array([[0.02048932883240791, 0.01424192241128213],
@@ -829,6 +912,7 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_rayleigh(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.rayleigh(scale=10, size=(3, 2))
         desired = np.array([[13.8882496494248393, 13.383318339044731],
@@ -837,10 +921,12 @@
         assert_array_almost_equal(actual, desired, decimal=14)
 
     def test_rayleigh_0(self):
+        """ """
         assert_equal(np.random.rayleigh(scale=0), 0)
         assert_raises(ValueError, np.random.rayleigh, scale=-0.)
 
     def test_standard_cauchy(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.standard_cauchy(size=(3, 2))
         desired = np.array([[0.77127660196445336, -6.55601161955910605],
@@ -849,6 +935,7 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_standard_exponential(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.standard_exponential(size=(3, 2))
         desired = np.array([[0.96441739162374596, 0.89556604882105506],
@@ -857,6 +944,7 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_standard_gamma(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.standard_gamma(shape=3, size=(3, 2))
         desired = np.array([[5.50841531318455058, 6.62953470301903103],
@@ -865,10 +953,12 @@
         assert_array_almost_equal(actual, desired, decimal=14)
 
     def test_standard_gamma_0(self):
+        """ """
         assert_equal(np.random.standard_gamma(shape=0), 0)
         assert_raises(ValueError, np.random.standard_gamma, shape=-0.)
 
     def test_standard_normal(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.standard_normal(size=(3, 2))
         desired = np.array([[1.34016345771863121, 1.73759122771936081],
@@ -877,6 +967,7 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_standard_t(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.standard_t(df=10, size=(3, 2))
         desired = np.array([[0.97140611862659965, -0.08830486548450577],
@@ -885,6 +976,7 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_triangular(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.triangular(left=5.12, mode=10.23, right=20.34,
                                       size=(3, 2))
@@ -894,6 +986,7 @@
         assert_array_almost_equal(actual, desired, decimal=14)
 
     def test_uniform(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.uniform(low=1.23, high=10.54, size=(3, 2))
         desired = np.array([[6.99097932346268003, 6.73801597444323974],
@@ -902,6 +995,7 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_uniform_range_bounds(self):
+        """ """
         fmin = np.finfo('float').min
         fmax = np.finfo('float').max
 
@@ -918,6 +1012,7 @@
         np.random.uniform(low=np.nextafter(fmin, 1), high=fmax / 1e17)
 
     def test_scalar_exception_propagation(self):
+        """ """
         # Tests that exceptions are correctly propagated in distributions
         # when called with objects that throw exceptions when converted to
         # scalars.
@@ -925,6 +1020,7 @@
         # Regression test for gh: 8865
 
         class ThrowingFloat(np.ndarray):
+            """ """
             def __float__(self):
                 raise TypeError
 
@@ -933,6 +1029,7 @@
                       throwing_float)
 
         class ThrowingInteger(np.ndarray):
+            """ """
             def __int__(self):
                 raise TypeError
 
@@ -942,6 +1039,7 @@
         assert_raises(TypeError, np.random.hypergeometric, throwing_int, 1, 1)
 
     def test_vonmises(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.vonmises(mu=1.23, kappa=1.54, size=(3, 2))
         desired = np.array([[2.28567572673902042, 2.89163838442285037],
@@ -950,12 +1048,14 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_vonmises_small(self):
+        """ """
         # check infinite loop, gh-4720
         np.random.seed(self.seed)
         r = np.random.vonmises(mu=0., kappa=1.1e-8, size=10**6)
         np.testing.assert_(np.isfinite(r).all())
 
     def test_wald(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.wald(mean=1.23, scale=1.54, size=(3, 2))
         desired = np.array([[3.82935265715889983, 5.13125249184285526],
@@ -964,6 +1064,7 @@
         assert_array_almost_equal(actual, desired, decimal=14)
 
     def test_weibull(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.weibull(a=1.23, size=(3, 2))
         desired = np.array([[0.97097342648766727, 0.91422896443565516],
@@ -972,11 +1073,13 @@
         assert_array_almost_equal(actual, desired, decimal=15)
 
     def test_weibull_0(self):
+        """ """
         np.random.seed(self.seed)
         assert_equal(np.random.weibull(a=0, size=12), np.zeros(12))
         assert_raises(ValueError, np.random.weibull, a=-0.)
 
     def test_zipf(self):
+        """ """
         np.random.seed(self.seed)
         actual = np.random.zipf(a=1.23, size=(3, 2))
         desired = np.array([[66, 29],
@@ -986,18 +1089,22 @@
 
 
 class TestBroadcast:
+    """ """
     # tests that functions that broadcast behave
     # correctly when presented with non-scalar arguments
     def setup(self):
+        """ """
         self.seed = 123456789
 
     def setSeed(self):
+        """ """
         np.random.seed(self.seed)
 
     # TODO: Include test for randint once it can broadcast
     # Can steal the test written in PR #6938
 
     def test_uniform(self):
+        """ """
         low = [0]
         high = [1]
         uniform = np.random.uniform
@@ -1014,6 +1121,7 @@
         assert_array_almost_equal(actual, desired, decimal=14)
 
     def test_normal(self):
+        """ """
         loc = [0]
         scale = [1]
         bad_scale = [-1]
@@ -1033,6 +1141,7 @@
         assert_raises(ValueError, normal, loc, bad_scale * 3)
 
     def test_beta(self):
+        """ """
         a = [1]
         b = [2]
         bad_a = [-1]
@@ -1055,6 +1164,7 @@
         assert_raises(ValueError, beta, a, bad_b * 3)
 
     def test_exponential(self):
+        """ """
         scale = [1]
         bad_scale = [-1]
         exponential = np.random.exponential
@@ -1068,6 +1178,7 @@
         assert_raises(ValueError, exponential, bad_scale * 3)
 
     def test_standard_gamma(self):
+        """ """
         shape = [1]
         bad_shape = [-1]
         std_gamma = np.random.standard_gamma
@@ -1081,6 +1192,7 @@
         assert_raises(ValueError, std_gamma, bad_shape * 3)
 
     def test_gamma(self):
+        """ """
         shape = [1]
         scale = [2]
         bad_shape = [-1]
@@ -1103,6 +1215,7 @@
         assert_raises(ValueError, gamma, shape, bad_scale * 3)
 
     def test_f(self):
+        """ """
         dfnum = [1]
         dfden = [2]
         bad_dfnum = [-1]
@@ -1125,6 +1238,7 @@
         assert_raises(ValueError, f, dfnum, bad_dfden * 3)
 
     def test_noncentral_f(self):
+        """ """
         dfnum = [2]
         dfden = [3]
         nonc = [4]
@@ -1158,12 +1272,14 @@
         assert_raises(ValueError, nonc_f, dfnum, dfden, bad_nonc * 3)
 
     def test_noncentral_f_small_df(self):
+        """ """
         self.setSeed()
         desired = np.array([6.869638627492048, 0.785880199263955])
         actual = np.random.noncentral_f(0.9, 0.9, 2, size=2)
         assert_array_almost_equal(actual, desired, decimal=14)
 
     def test_chisquare(self):
+        """ """
         df = [1]
         bad_df = [-1]
         chisquare = np.random.chisquare
@@ -1177,6 +1293,7 @@
         assert_raises(ValueError, chisquare, bad_df * 3)
 
     def test_noncentral_chisquare(self):
+        """ """
         df = [1]
         nonc = [2]
         bad_df = [-1]
@@ -1199,6 +1316,7 @@
         assert_raises(ValueError, nonc_chi, df, bad_nonc * 3)
 
     def test_standard_t(self):
+        """ """
         df = [1]
         bad_df = [-1]
         t = np.random.standard_t
@@ -1212,6 +1330,7 @@
         assert_raises(ValueError, t, bad_df * 3)
 
     def test_vonmises(self):
+        """ """
         mu = [2]
         kappa = [1]
         bad_kappa = [-1]
@@ -1231,6 +1350,7 @@
         assert_raises(ValueError, vonmises, mu, bad_kappa * 3)
 
     def test_pareto(self):
+        """ """
         a = [1]
         bad_a = [-1]
         pareto = np.random.pareto
@@ -1244,6 +1364,7 @@
         assert_raises(ValueError, pareto, bad_a * 3)
 
     def test_weibull(self):
+        """ """
         a = [1]
         bad_a = [-1]
         weibull = np.random.weibull
@@ -1257,6 +1378,7 @@
         assert_raises(ValueError, weibull, bad_a * 3)
 
     def test_power(self):
+        """ """
         a = [1]
         bad_a = [-1]
         power = np.random.power
@@ -1270,6 +1392,7 @@
         assert_raises(ValueError, power, bad_a * 3)
 
     def test_laplace(self):
+        """ """
         loc = [0]
         scale = [1]
         bad_scale = [-1]
@@ -1289,6 +1412,7 @@
         assert_raises(ValueError, laplace, loc, bad_scale * 3)
 
     def test_gumbel(self):
+        """ """
         loc = [0]
         scale = [1]
         bad_scale = [-1]
@@ -1308,6 +1432,7 @@
         assert_raises(ValueError, gumbel, loc, bad_scale * 3)
 
     def test_logistic(self):
+        """ """
         loc = [0]
         scale = [1]
         bad_scale = [-1]
@@ -1327,6 +1452,7 @@
         assert_raises(ValueError, logistic, loc, bad_scale * 3)
 
     def test_lognormal(self):
+        """ """
         mean = [0]
         sigma = [1]
         bad_sigma = [-1]
@@ -1346,6 +1472,7 @@
         assert_raises(ValueError, lognormal, mean, bad_sigma * 3)
 
     def test_rayleigh(self):
+        """ """
         scale = [1]
         bad_scale = [-1]
         rayleigh = np.random.rayleigh
@@ -1359,6 +1486,7 @@
         assert_raises(ValueError, rayleigh, bad_scale * 3)
 
     def test_wald(self):
+        """ """
         mean = [0.5]
         scale = [1]
         bad_mean = [0]
@@ -1383,6 +1511,7 @@
         assert_raises(ValueError, wald, 0.5, 0.0)
 
     def test_triangular(self):
+        """ """
         left = [1]
         right = [3]
         mode = [2]
@@ -1419,6 +1548,7 @@
                       right * 3)
 
     def test_binomial(self):
+        """ """
         n = [1]
         p = [0.5]
         bad_n = [-1]
@@ -1442,6 +1572,7 @@
         assert_raises(ValueError, binom, n, bad_p_two * 3)
 
     def test_negative_binomial(self):
+        """ """
         n = [1]
         p = [0.5]
         bad_n = [-1]
@@ -1465,6 +1596,7 @@
         assert_raises(ValueError, neg_binom, n, bad_p_two * 3)
 
     def test_poisson(self):
+        """ """
         max_lam = np.random.RandomState()._poisson_lam_max
 
         lam = [1]
@@ -1480,6 +1612,7 @@
         assert_raises(ValueError, poisson, bad_lam_two * 3)
 
     def test_zipf(self):
+        """ """
         a = [2]
         bad_a = [0]
         zipf = np.random.zipf
@@ -1494,6 +1627,7 @@
             assert_raises(ValueError, zipf, [0, 0, np.nan])
 
     def test_geometric(self):
+        """ """
         p = [0.5]
         bad_p_one = [-1]
         bad_p_two = [1.5]
@@ -1507,6 +1641,7 @@
         assert_raises(ValueError, geom, bad_p_two * 3)
 
     def test_hypergeometric(self):
+        """ """
         ngood = [1]
         nbad = [2]
         nsample = [2]
@@ -1542,6 +1677,7 @@
         assert_raises(ValueError, hypergeom, ngood, nbad, bad_nsample_two * 3)
 
     def test_logseries(self):
+        """ """
         p = [0.5]
         bad_p_one = [2]
         bad_p_two = [-1]
@@ -1556,11 +1692,26 @@
 
 
 class TestThread:
+    """ """
     # make sure each state produces the same sequence even in threads
     def setup(self):
+        """ """
         self.seeds = range(4)
 
     def check_function(self, function, sz):
+        """
+
+        Parameters
+        ----------
+        function :
+            
+        sz :
+            
+
+        Returns
+        -------
+
+        """
         from threading import Thread
 
         out1 = np.empty((len(self.seeds),) + sz)
@@ -1583,30 +1734,75 @@
             assert_array_equal(out1, out2)
 
     def test_normal(self):
+        """ """
         def gen_random(state, out):
+            """
+
+            Parameters
+            ----------
+            state :
+                
+            out :
+                
+
+            Returns
+            -------
+
+            """
             out[...] = state.normal(size=10000)
         self.check_function(gen_random, sz=(10000,))
 
     def test_exp(self):
+        """ """
         def gen_random(state, out):
+            """
+
+            Parameters
+            ----------
+            state :
+                
+            out :
+                
+
+            Returns
+            -------
+
+            """
             out[...] = state.exponential(scale=np.ones((100, 1000)))
         self.check_function(gen_random, sz=(100, 1000))
 
     def test_multinomial(self):
+        """ """
         def gen_random(state, out):
+            """
+
+            Parameters
+            ----------
+            state :
+                
+            out :
+                
+
+            Returns
+            -------
+
+            """
             out[...] = state.multinomial(10, [1/6.]*6, size=10000)
         self.check_function(gen_random, sz=(10000, 6))
 
 
 # See Issue #4263
 class TestSingleEltArrayInput:
+    """ """
     def setup(self):
+        """ """
         self.argOne = np.array([2])
         self.argTwo = np.array([3])
         self.argThree = np.array([4])
         self.tgtShape = (1,)
 
     def test_one_arg_funcs(self):
+        """ """
         funcs = (np.random.exponential, np.random.standard_gamma,
                  np.random.chisquare, np.random.standard_t,
                  np.random.pareto, np.random.weibull,
@@ -1626,6 +1822,7 @@
             assert_equal(out.shape, self.tgtShape)
 
     def test_two_arg_funcs(self):
+        """ """
         funcs = (np.random.uniform, np.random.normal,
                  np.random.beta, np.random.gamma,
                  np.random.f, np.random.noncentral_chisquare,
@@ -1671,6 +1868,7 @@
 #            self.assert_equal(out.shape, self.tgtShape)
 
     def test_three_arg_funcs(self):
+        """ """
         funcs = [np.random.noncentral_f, np.random.triangular,
                  np.random.hypergeometric]
 
