# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/io/parser/test_header.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/io/parser/test_header.py
@@ -16,6 +16,17 @@
 
 
 def test_read_with_bad_header(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     msg = r"but only \d+ lines in file"
 
@@ -25,6 +36,17 @@
 
 
 def test_negative_header(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-27779
     parser = all_parsers
     data = """1,2,3,4,5
@@ -41,6 +63,19 @@
 
 @pytest.mark.parametrize("header", [([-1, 2, 4]), ([-5, 0])])
 def test_negative_multi_index_header(all_parsers, header):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    header :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-27779
     parser = all_parsers
     data = """1,2,3,4,5
@@ -55,6 +90,19 @@
 
 @pytest.mark.parametrize("header", [True, False])
 def test_bool_header_arg(all_parsers, header):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    header :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-6114
     parser = all_parsers
     data = """\
@@ -69,6 +117,17 @@
 
 
 def test_no_header_prefix(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """1,2,3,4,5
 6,7,8,9,10
@@ -83,6 +142,17 @@
 
 
 def test_header_with_index_col(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """foo,1,2,3
 bar,4,5,6
@@ -100,6 +170,17 @@
 
 
 def test_header_not_first_line(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """got,to,ignore,this,line
 got,to,ignore,this,line
@@ -120,6 +201,17 @@
 
 
 def test_header_multi_index(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     expected = tm.makeCustomDataframe(5, 3, r_idx_nlevels=2, c_idx_nlevels=4)
 
@@ -162,19 +254,30 @@
     ],
 )
 def test_header_multi_index_invalid(all_parsers, kwargs, msg):
-    data = """\
-C0,,C_l0_g0,C_l0_g1,C_l0_g2
-
-C1,,C_l1_g0,C_l1_g1,C_l1_g2
-C2,,C_l2_g0,C_l2_g1,C_l2_g2
-C3,,C_l3_g0,C_l3_g1,C_l3_g2
-R0,R1,,,
-R_l0_g0,R_l1_g0,R0C0,R0C1,R0C2
-R_l0_g1,R_l1_g1,R1C0,R1C1,R1C2
-R_l0_g2,R_l1_g2,R2C0,R2C1,R2C2
-R_l0_g3,R_l1_g3,R3C0,R3C1,R3C2
-R_l0_g4,R_l1_g4,R4C0,R4C1,R4C2
-"""
+    """data = """\
+    C0,,C_l0_g0,C_l0_g1,C_l0_g2
+    
+    C1,,C_l1_g0,C_l1_g1,C_l1_g2
+    C2,,C_l2_g0,C_l2_g1,C_l2_g2
+    C3,,C_l3_g0,C_l3_g1,C_l3_g2
+    R0,R1,,,
+    R_l0_g0,R_l1_g0,R0C0,R0C1,R0C2
+    R_l0_g1,R_l1_g1,R1C0,R1C1,R1C2
+    R_l0_g2,R_l1_g2,R2C0,R2C1,R2C2
+    R_l0_g3,R_l1_g3,R3C0,R3C1,R3C2
+    R_l0_g4,R_l1_g4,R4C0,R4C1,R4C2
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    kwargs :
+        
+    msg :
+        
+
+    Returns
+    -------
     parser = all_parsers
 
     with pytest.raises(ValueError, match=msg):
@@ -213,6 +316,19 @@
     ],
 )
 def test_header_multi_index_common_format1(all_parsers, kwargs):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    kwargs :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     expected = DataFrame(
         [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]],
@@ -260,6 +376,19 @@
     ],
 )
 def test_header_multi_index_common_format2(all_parsers, kwargs):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    kwargs :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     expected = DataFrame(
         [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]],
@@ -306,6 +435,19 @@
     ],
 )
 def test_header_multi_index_common_format3(all_parsers, kwargs):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    kwargs :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     expected = DataFrame(
         [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]],
@@ -325,6 +467,17 @@
 
 
 def test_header_multi_index_common_format_malformed1(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     expected = DataFrame(
         np.array([[2, 3, 4, 5, 6], [8, 9, 10, 11, 12]], dtype="int64"),
@@ -345,6 +498,17 @@
 
 
 def test_header_multi_index_common_format_malformed2(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     expected = DataFrame(
         np.array([[2, 3, 4, 5, 6], [8, 9, 10, 11, 12]], dtype="int64"),
@@ -366,6 +530,17 @@
 
 
 def test_header_multi_index_common_format_malformed3(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     expected = DataFrame(
         np.array([[3, 4, 5, 6], [9, 10, 11, 12]], dtype="int64"),
@@ -389,6 +564,21 @@
     "data,header", [("1,2,3\n4,5,6", None), ("foo,bar,baz\n1,2,3\n4,5,6", 0)]
 )
 def test_header_names_backward_compat(all_parsers, data, header):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    data :
+        
+    header :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-2539
     parser = all_parsers
     expected = parser.read_csv(StringIO("1,2,3\n4,5,6"), names=["a", "b", "c"])
@@ -399,6 +589,19 @@
 
 @pytest.mark.parametrize("kwargs", [dict(), dict(index_col=False)])
 def test_read_only_header_no_rows(all_parsers, kwargs):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    kwargs :
+        
+
+    Returns
+    -------
+
+    """
     # See gh-7773
     parser = all_parsers
     expected = DataFrame(columns=["a", "b", "c"])
@@ -419,6 +622,21 @@
     ],
 )
 def test_no_header(all_parsers, kwargs, names):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    kwargs :
+        
+    names :
+        
+
+    Returns
+    -------
+
+    """
     parser = all_parsers
     data = """1,2,3,4,5
 6,7,8,9,10
@@ -433,6 +651,19 @@
 
 @pytest.mark.parametrize("header", [["a", "b"], "string_header"])
 def test_non_int_header(all_parsers, header):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    header :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-16338
     msg = "header must be integer or list of integers"
     data = """1,2\n3,4"""
@@ -443,6 +674,17 @@
 
 
 def test_singleton_header(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-7757
     data = """a,b,c\n0,1,2\n1,2,3"""
     parser = all_parsers
@@ -491,6 +733,21 @@
     ],
 )
 def test_mangles_multi_index(all_parsers, data, expected):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    data :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-18062
     parser = all_parsers
 
@@ -503,6 +760,21 @@
     "columns", [None, (["", "Unnamed"]), (["Unnamed", ""]), (["Unnamed", "NotUnnamed"])]
 )
 def test_multi_index_unnamed(all_parsers, index_col, columns):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+    index_col :
+        
+    columns :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-23687
     #
     # When specifying a multi-index header, make sure that
@@ -542,6 +814,17 @@
 
 
 def test_read_csv_multiindex_columns(all_parsers):
+    """
+
+    Parameters
+    ----------
+    all_parsers :
+        
+
+    Returns
+    -------
+
+    """
     # GH#6051
     parser = all_parsers
 
