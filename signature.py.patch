# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jedi/inference/signature.py
+++ b/..//venv/lib/python3.8/site-packages/jedi/inference/signature.py
@@ -5,8 +5,11 @@
 
 
 class _SignatureMixin(object):
+    """ """
     def to_string(self):
+        """ """
         def param_strings():
+            """ """
             is_positional = False
             is_kw_only = False
             for n in self.get_param_names(resolve_stars=True):
@@ -35,28 +38,64 @@
 
 
 class AbstractSignature(_SignatureMixin):
+    """ """
     def __init__(self, value, is_bound=False):
         self.value = value
         self.is_bound = is_bound
 
     @property
     def name(self):
+        """ """
         return self.value.name
 
     @property
     def annotation_string(self):
+        """ """
         return ''
 
     def get_param_names(self, resolve_stars=False):
+        """
+
+        Parameters
+        ----------
+        resolve_stars :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         param_names = self._function_value.get_param_names()
         if self.is_bound:
             return param_names[1:]
         return param_names
 
     def bind(self, value):
+        """
+
+        Parameters
+        ----------
+        value :
+            
+
+        Returns
+        -------
+
+        """
         raise NotImplementedError
 
     def matches_signature(self, arguments):
+        """
+
+        Parameters
+        ----------
+        arguments :
+            
+
+        Returns
+        -------
+
+        """
         return True
 
     def __repr__(self):
@@ -66,15 +105,28 @@
 
 
 class TreeSignature(AbstractSignature):
+    """ """
     def __init__(self, value, function_value=None, is_bound=False):
         super(TreeSignature, self).__init__(value, is_bound)
         self._function_value = function_value or value
 
     def bind(self, value):
+        """
+
+        Parameters
+        ----------
+        value :
+            
+
+        Returns
+        -------
+
+        """
         return TreeSignature(value, self._function_value, is_bound=True)
 
     @property
     def _annotation(self):
+        """ """
         # Classes don't need annotations, even if __init__ has one. They always
         # return themselves.
         if self.value.is_class():
@@ -83,6 +135,7 @@
 
     @property
     def annotation_string(self):
+        """ """
         a = self._annotation
         if a is None:
             return ''
@@ -90,6 +143,17 @@
 
     @memoize_method
     def get_param_names(self, resolve_stars=False):
+        """
+
+        Parameters
+        ----------
+        resolve_stars :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         params = self._function_value.get_param_names()
         if resolve_stars:
             from jedi.inference.star_args import process_params
@@ -99,6 +163,17 @@
         return params
 
     def matches_signature(self, arguments):
+        """
+
+        Parameters
+        ----------
+        arguments :
+            
+
+        Returns
+        -------
+
+        """
         from jedi.inference.param import get_executed_param_names_and_issues
         executed_param_names, issues = \
             get_executed_param_names_and_issues(self._function_value, arguments)
@@ -120,6 +195,7 @@
 
 
 class BuiltinSignature(AbstractSignature):
+    """ """
     def __init__(self, value, return_string, function_value=None, is_bound=False):
         super(BuiltinSignature, self).__init__(value, is_bound)
         self._return_string = return_string
@@ -127,15 +203,28 @@
 
     @property
     def annotation_string(self):
+        """ """
         return self._return_string
 
     @property
     def _function_value(self):
+        """ """
         if self.__function_value is None:
             return self.value
         return self.__function_value
 
     def bind(self, value):
+        """
+
+        Parameters
+        ----------
+        value :
+            
+
+        Returns
+        -------
+
+        """
         return BuiltinSignature(
             value, self._return_string,
             function_value=self.value,
@@ -144,6 +233,7 @@
 
 
 class SignatureWrapper(_SignatureMixin):
+    """ """
     def __init__(self, wrapped_signature):
         self._wrapped_signature = wrapped_signature
 
