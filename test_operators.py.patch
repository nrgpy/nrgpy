# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/series/test_operators.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/series/test_operators.py
@@ -11,8 +11,20 @@
 
 
 class TestSeriesLogicalOps:
+    """ """
     @pytest.mark.parametrize("bool_op", [operator.and_, operator.or_, operator.xor])
     def test_bool_operators_with_nas(self, bool_op):
+        """
+
+        Parameters
+        ----------
+        bool_op :
+            
+
+        Returns
+        -------
+
+        """
         # boolean &, |, ^ should work with object arrays and propagate NAs
         ser = Series(bdate_range("1/1/2000", periods=10), dtype=object)
         ser[::2] = np.nan
@@ -27,6 +39,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_logical_operators_bool_dtype_with_empty(self):
+        """ """
         # GH#9016: support bitwise op for integer types
         index = list("bca")
 
@@ -72,6 +85,23 @@
         ],
     )
     def test_logical_operators_nans(self, left, right, op, expected):
+        """
+
+        Parameters
+        ----------
+        left :
+            
+        right :
+            
+        op :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # GH 13896
         result = op(Series(left), Series(right))
         expected = Series(expected)
@@ -79,6 +109,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_logical_operators_int_dtype_with_int_dtype(self):
+        """ """
         # GH#9016: support bitwise op for integer types
 
         # TODO: unused
@@ -106,6 +137,7 @@
         tm.assert_series_equal(res, expected)
 
     def test_logical_operators_int_dtype_with_int_scalar(self):
+        """ """
         # GH#9016: support bitwise op for integer types
         s_0123 = Series(range(4), dtype="int64")
 
@@ -118,6 +150,7 @@
         tm.assert_series_equal(res, expected)
 
     def test_logical_operators_int_dtype_with_float(self):
+        """ """
         # GH#9016: support bitwise op for integer types
         s_0123 = Series(range(4), dtype="int64")
 
@@ -135,6 +168,7 @@
             s_0123 & Series([0.1, 4, -3.14, 2])
 
     def test_logical_operators_int_dtype_with_str(self):
+        """ """
         s_1111 = Series([1] * 4, dtype="int8")
         msg = "Cannot perform 'and_' with a dtyped.+array and scalar of type"
         with pytest.raises(TypeError, match=msg):
@@ -143,6 +177,7 @@
             s_1111 & ["a", "b", "c", "d"]
 
     def test_logical_operators_int_dtype_with_bool(self):
+        """ """
         # GH#9016: support bitwise op for integer types
         s_0123 = Series(range(4), dtype="int64")
 
@@ -162,6 +197,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_logical_operators_int_dtype_with_object(self):
+        """ """
         # GH#9016: support bitwise op for integer types
         s_0123 = Series(range(4), dtype="int64")
 
@@ -174,6 +210,7 @@
             s_0123 & s_abNd
 
     def test_logical_operators_bool_dtype_with_int(self):
+        """ """
         index = list("bca")
 
         s_tft = Series([True, False, True], index=index)
@@ -188,6 +225,7 @@
         tm.assert_series_equal(res, expected)
 
     def test_logical_ops_bool_dtype_with_ndarray(self):
+        """ """
         # make sure we operate on ndarray the same as Series
         left = pd.Series([True, True, True, False, True])
         right = [True, False, None, True, np.nan]
@@ -223,6 +261,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_logical_operators_int_dtype_with_bool_dtype_and_reindex(self):
+        """ """
         # GH#9016: support bitwise op for integer types
 
         # with non-matching indexes, logical operators will cast to object
@@ -255,6 +294,7 @@
         tm.assert_series_equal(res, expected)
 
     def test_scalar_na_logical_ops_corners(self):
+        """ """
         s = Series([2, 3, 4, 5, 6, 7, 8, 9, 10])
 
         msg = "Cannot perform.+with a dtyped.+array and scalar of type"
@@ -270,6 +310,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_scalar_na_logical_ops_corners_aligns(self):
+        """ """
         s = Series([2, 3, 4, 5, 6, 7, 8, 9, datetime(2005, 1, 1)])
         s[::2] = np.nan
         d = DataFrame({"A": s})
@@ -297,6 +338,17 @@
 
     @pytest.mark.parametrize("op", [operator.and_, operator.or_, operator.xor])
     def test_logical_ops_with_index(self, op):
+        """
+
+        Parameters
+        ----------
+        op :
+            
+
+        Returns
+        -------
+
+        """
         # GH#22092, GH#19792
         ser = Series([True, True, False, False])
         idx1 = Index([True, False, True, False])
@@ -313,6 +365,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_reversed_xor_with_index_returns_index(self):
+        """ """
         # GH#22092, GH#19792
         ser = Series([True, True, False, False])
         idx1 = Index([True, False, True, False])
@@ -348,6 +401,17 @@
         ],
     )
     def test_reversed_logical_op_with_index_returns_series(self, op):
+        """
+
+        Parameters
+        ----------
+        op :
+            
+
+        Returns
+        -------
+
+        """
         # GH#22092, GH#19792
         ser = Series([True, True, False, False])
         idx1 = Index([True, False, True, False])
@@ -370,6 +434,19 @@
         ],
     )
     def test_reverse_ops_with_index(self, op, expected):
+        """
+
+        Parameters
+        ----------
+        op :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # https://github.com/pandas-dev/pandas/pull/23628
         # multi-set Index ops are buggy, so let's avoid duplicates...
         ser = Series([True, False])
@@ -378,6 +455,7 @@
         tm.assert_index_equal(result, expected)
 
     def test_logical_ops_label_based(self):
+        """ """
         # GH#4947
         # logical ops should be label based
 
@@ -479,6 +557,7 @@
                 t & v
 
     def test_logical_ops_df_compat(self):
+        """ """
         # GH#1134
         s1 = pd.Series([True, False, True], index=list("ABC"), name="x")
         s2 = pd.Series([True, True, False], index=list("ABD"), name="x")
@@ -525,14 +604,17 @@
 
 
 class TestSeriesUnaryOps:
+    """ """
     # __neg__, __pos__, __inv__
 
     def test_neg(self):
+        """ """
         ser = tm.makeStringSeries()
         ser.name = "series"
         tm.assert_series_equal(-ser, -1 * ser)
 
     def test_invert(self):
+        """ """
         ser = tm.makeStringSeries()
         ser.name = "series"
         tm.assert_series_equal(-(ser < 0), ~(ser < 0))
@@ -548,6 +630,21 @@
     def test_unary_minus_nullable_int(
         self, any_signed_nullable_int_dtype, source, target
     ):
+        """
+
+        Parameters
+        ----------
+        any_signed_nullable_int_dtype :
+            
+        source :
+            
+        target :
+            
+
+        Returns
+        -------
+
+        """
         dtype = any_signed_nullable_int_dtype
         s = pd.Series(source, dtype=dtype)
         result = -s
@@ -558,6 +655,19 @@
         "source", [[1, 2, 3], [1, 2, None], [-1, 0, 1]],
     )
     def test_unary_plus_nullable_int(self, any_signed_nullable_int_dtype, source):
+        """
+
+        Parameters
+        ----------
+        any_signed_nullable_int_dtype :
+            
+        source :
+            
+
+        Returns
+        -------
+
+        """
         dtype = any_signed_nullable_int_dtype
         expected = pd.Series(source, dtype=dtype)
         result = +expected
@@ -572,6 +682,21 @@
         ],
     )
     def test_abs_nullable_int(self, any_signed_nullable_int_dtype, source, target):
+        """
+
+        Parameters
+        ----------
+        any_signed_nullable_int_dtype :
+            
+        source :
+            
+        target :
+            
+
+        Returns
+        -------
+
+        """
         dtype = any_signed_nullable_int_dtype
         s = pd.Series(source, dtype=dtype)
         result = abs(s)
