# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test_financial.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test_financial.py
@@ -8,7 +8,31 @@
 
 
 def filter_deprecation(func):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
+    """
     def newfunc(*args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         with warnings.catch_warnings(record=True) as ws:
             warnings.filterwarnings('always', category=DeprecationWarning)
             func(*args, **kwargs)
@@ -17,8 +41,10 @@
 
 
 class TestFinancial:
+    """ """
     @filter_deprecation
     def test_npv_irr_congruence(self):
+        """ """
         # IRR is defined as the rate required for the present value of a
         # a series of cashflows to be zero i.e. NPV(IRR(x), x) = 0
         cashflows = np.array([-40000, 5000, 8000, 12000, 30000])
@@ -26,17 +52,20 @@
 
     @filter_deprecation
     def test_rate(self):
+        """ """
         assert_almost_equal(
             np.rate(10, 0, -3500, 10000),
             0.1107, 4)
 
     @filter_deprecation
     def test_rate_decimal(self):
+        """ """
         rate = np.rate(Decimal('10'), Decimal('0'), Decimal('-3500'), Decimal('10000'))
         assert_equal(Decimal('0.1106908537142689284704528100'), rate)
 
     @filter_deprecation
     def test_irr(self):
+        """ """
         v = [-150000, 15000, 25000, 35000, 45000, 60000]
         assert_almost_equal(np.irr(v), 0.0524, 2)
         v = [-100, 0, 0, 74]
@@ -57,24 +86,29 @@
 
     @filter_deprecation
     def test_pv(self):
+        """ """
         assert_almost_equal(np.pv(0.07, 20, 12000, 0), -127128.17, 2)
 
     @filter_deprecation
     def test_pv_decimal(self):
+        """ """
         assert_equal(np.pv(Decimal('0.07'), Decimal('20'), Decimal('12000'), Decimal('0')),
                      Decimal('-127128.1709461939327295222005'))
 
     @filter_deprecation
     def test_fv(self):
+        """ """
         assert_equal(np.fv(0.075, 20, -2000, 0, 0), 86609.362673042924)
 
     @filter_deprecation
     def test_fv_decimal(self):
+        """ """
         assert_equal(np.fv(Decimal('0.075'), Decimal('20'), Decimal('-2000'), 0, 0),
                      Decimal('86609.36267304300040536731624'))
 
     @filter_deprecation
     def test_pmt(self):
+        """ """
         res = np.pmt(0.08 / 12, 5 * 12, 15000)
         tgt = -304.145914
         assert_allclose(res, tgt)
@@ -90,6 +124,7 @@
 
     @filter_deprecation
     def test_pmt_decimal(self):
+        """ """
         res = np.pmt(Decimal('0.08') / Decimal('12'), 5 * 12, 15000)
         tgt = Decimal('-304.1459143262052370338701494')
         assert_equal(res, tgt)
@@ -114,10 +149,12 @@
 
     @filter_deprecation
     def test_ppmt(self):
+        """ """
         assert_equal(np.round(np.ppmt(0.1 / 12, 1, 60, 55000), 2), -710.25)
 
     @filter_deprecation
     def test_ppmt_decimal(self):
+        """ """
         assert_equal(np.ppmt(Decimal('0.1') / Decimal('12'), Decimal('1'), Decimal('60'), Decimal('55000')),
                      Decimal('-710.2541257864217612489830917'))
 
@@ -125,13 +162,16 @@
     # .23 / 12 does not come out nicely as a float but does as a decimal
     @filter_deprecation
     def test_ppmt_special_rate(self):
+        """ """
         assert_equal(np.round(np.ppmt(0.23 / 12, 1, 60, 10000000000), 8), -90238044.232277036)
 
     @filter_deprecation
     def test_ppmt_special_rate_decimal(self):
+        """ """
         # When rounded out to 8 decimal places like the float based test, this should not equal the same value
         # as the float, substituted for the decimal
         def raise_error_because_not_equal():
+            """ """
             assert_equal(
                 round(np.ppmt(Decimal('0.23') / Decimal('12'), 1, 60, Decimal('10000000000')), 8),
                 Decimal('-90238044.232277036'))
@@ -142,37 +182,44 @@
 
     @filter_deprecation
     def test_ipmt(self):
+        """ """
         assert_almost_equal(np.round(np.ipmt(0.1 / 12, 1, 24, 2000), 2), -16.67)
 
     @filter_deprecation
     def test_ipmt_decimal(self):
+        """ """
         result = np.ipmt(Decimal('0.1') / Decimal('12'), 1, 24, 2000)
         assert_equal(result.flat[0], Decimal('-16.66666666666666666666666667'))
 
     @filter_deprecation
     def test_nper(self):
+        """ """
         assert_almost_equal(np.nper(0.075, -2000, 0, 100000.),
                             21.54, 2)
 
     @filter_deprecation
     def test_nper2(self):
+        """ """
         assert_almost_equal(np.nper(0.0, -2000, 0, 100000.),
                             50.0, 1)
 
     @filter_deprecation
     def test_npv(self):
+        """ """
         assert_almost_equal(
             np.npv(0.05, [-15000, 1500, 2500, 3500, 4500, 6000]),
             122.89, 2)
 
     @filter_deprecation
     def test_npv_decimal(self):
+        """ """
         assert_equal(
             np.npv(Decimal('0.05'), [-15000, 1500, 2500, 3500, 4500, 6000]),
             Decimal('122.894854950942692161628715'))
 
     @filter_deprecation
     def test_mirr(self):
+        """ """
         val = [-4500, -800, 800, 800, 600, 600, 800, 800, 700, 3000]
         assert_almost_equal(np.mirr(val, 0.08, 0.055), 0.0666, 4)
 
@@ -187,6 +234,7 @@
 
     @filter_deprecation
     def test_mirr_decimal(self):
+        """ """
         val = [Decimal('-4500'), Decimal('-800'), Decimal('800'), Decimal('800'),
                Decimal('600'), Decimal('600'), Decimal('800'), Decimal('800'),
                Decimal('700'), Decimal('3000')]
@@ -206,6 +254,7 @@
 
     @filter_deprecation
     def test_when(self):
+        """ """
         # begin
         assert_equal(np.rate(10, 20, -3500, 10000, 1),
                      np.rate(10, 20, -3500, 10000, 'begin'))
@@ -346,6 +395,7 @@
 
     @filter_deprecation
     def test_broadcast(self):
+        """ """
         assert_almost_equal(np.nper(0.075, -2000, 0, 100000., [0, 1]),
                             [21.5449442, 20.76156441], 4)
 
@@ -364,6 +414,7 @@
 
     @filter_deprecation
     def test_broadcast_decimal(self):
+        """ """
         # Use almost equal because precision is tested in the explicit tests, this test is to ensure
         # broadcast with Decimal is not broken.
         assert_almost_equal(np.ipmt(Decimal('0.1') / Decimal('12'), list(range(5)), Decimal('24'), Decimal('2000')),
