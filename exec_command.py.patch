# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/distutils/exec_command.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/distutils/exec_command.py
@@ -61,10 +61,18 @@
 from numpy.distutils import log
 
 def filepath_from_subprocess_output(output):
-    """
-    Convert `bytes` in the encoding used by a subprocess into a filesystem-appropriate `str`.
-
+    """Convert `bytes` in the encoding used by a subprocess into a filesystem-appropriate `str`.
+    
     Inherited from `exec_command`, and possibly incorrect.
+
+    Parameters
+    ----------
+    output :
+        
+
+    Returns
+    -------
+
     """
     mylocale = locale.getpreferredencoding(False)
     if mylocale is None:
@@ -78,12 +86,20 @@
 
 
 def forward_bytes_to_stdout(val):
-    """
-    Forward bytes from a subprocess call to the console, without attempting to
+    """Forward bytes from a subprocess call to the console, without attempting to
     decode them.
-
+    
     The assumption is that the subprocess call already returned bytes in
     a suitable encoding.
+
+    Parameters
+    ----------
+    val :
+        
+
+    Returns
+    -------
+
     """
     if hasattr(sys.stdout, 'buffer'):
         # use the underlying binary output if there is one
@@ -97,6 +113,7 @@
 
 
 def temp_file_name():
+    """ """
     # 2019-01-30, 1.17
     warnings.warn('temp_file_name is deprecated since NumPy v1.17, use '
                   'tempfile.mkstemp instead', DeprecationWarning, stacklevel=1)
@@ -105,6 +122,7 @@
     return name
 
 def get_pythonexe():
+    """ """
     pythonexe = sys.executable
     if os.name in ['nt', 'dos']:
         fdir, fn = os.path.split(pythonexe)
@@ -114,9 +132,22 @@
     return pythonexe
 
 def find_executable(exe, path=None, _cache={}):
-    """Return full path of a executable or None.
-
-    Symbolic links are not followed.
+    """
+
+    Parameters
+    ----------
+    exe :
+        
+    path :
+         (Default value = None)
+    _cache :
+         (Default value = {})
+
+    Returns
+    -------
+    type
+        Symbolic links are not followed.
+
     """
     key = exe, path
     try:
@@ -165,20 +196,41 @@
 ############################################################
 
 def _preserve_environment( names ):
+    """
+
+    Parameters
+    ----------
+    names :
+        
+
+    Returns
+    -------
+
+    """
     log.debug('_preserve_environment(%r)' % (names))
     env = {name: os.environ.get(name) for name in names}
     return env
 
 def _update_environment( **env ):
+    """
+
+    Parameters
+    ----------
+    **env :
+        
+
+    Returns
+    -------
+
+    """
     log.debug('_update_environment(...)')
     for name, value in env.items():
         os.environ[name] = value or ''
 
 def exec_command(command, execute_in='', use_shell=None, use_tee=None,
                  _with_python = 1, **env ):
-    """
-    Return (status,output) of executed command.
-
+    """Return (status,output) of executed command.
+    
     .. deprecated:: 1.17
         Use subprocess.Popen instead
 
@@ -187,12 +239,15 @@
     command : str
         A concatenated string of executable and arguments.
     execute_in : str
-        Before running command ``cd execute_in`` and after ``cd -``.
+        Before running command ``cd execute_in`` and after ``cd -``. (Default value = '')
     use_shell : {bool, None}, optional
         If True, execute ``sh -c command``. Default None (True)
     use_tee : {bool, None}, optional
         If True use tee. Default None (True)
-
+    _with_python :
+         (Default value = 1)
+    **env :
+        
 
     Returns
     -------
@@ -203,7 +258,6 @@
     -----
     On NT, DOS systems the returned status is correct for external commands.
     Wild cards will not work for non-posix systems or when use_shell=0.
-
     """
     # 2019-01-30, 1.17
     warnings.warn('exec_command is deprecated since NumPy v1.17, use '
@@ -251,8 +305,22 @@
 
 
 def _exec_command(command, use_shell=None, use_tee = None, **env):
-    """
-    Internal workhorse for exec_command().
+    """Internal workhorse for exec_command().
+
+    Parameters
+    ----------
+    command :
+        
+    use_shell :
+         (Default value = None)
+    use_tee :
+         (Default value = None)
+    **env :
+        
+
+    Returns
+    -------
+
     """
     if use_shell is None:
         use_shell = os.name=='posix'
@@ -304,8 +372,16 @@
 
 
 def _quote_arg(arg):
-    """
-    Quote the argument for safe use in a shell command line.
+    """Quote the argument for safe use in a shell command line.
+
+    Parameters
+    ----------
+    arg :
+        
+
+    Returns
+    -------
+
     """
     # If there is a quote in the string, assume relevants parts of the
     # string are already quoted (e.g. '-I"C:\\Program Files\\..."')
