# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/random/tests/test_smoke.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/random/tests/test_smoke.py
@@ -10,10 +10,32 @@
                 params=(np.bool_, np.int8, np.int16, np.int32, np.int64,
                         np.uint8, np.uint16, np.uint32, np.uint64))
 def dtype(request):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     return request.param
 
 
 def params_0(f):
+    """
+
+    Parameters
+    ----------
+    f :
+        
+
+    Returns
+    -------
+
+    """
     val = f()
     assert_(np.isscalar(val))
     val = f(10)
@@ -27,6 +49,19 @@
 
 
 def params_1(f, bounded=False):
+    """
+
+    Parameters
+    ----------
+    f :
+        
+    bounded :
+         (Default value = False)
+
+    Returns
+    -------
+
+    """
     a = 5.0
     b = np.arange(2.0, 12.0)
     c = np.arange(2.0, 102.0).reshape((10, 10))
@@ -60,6 +95,19 @@
 
 
 def comp_state(state1, state2):
+    """
+
+    Parameters
+    ----------
+    state1 :
+        
+    state2 :
+        
+
+    Returns
+    -------
+
+    """
     identical = True
     if isinstance(state1, dict):
         for key in state1:
@@ -77,6 +125,19 @@
 
 
 def warmup(rg, n=None):
+    """
+
+    Parameters
+    ----------
+    rg :
+        
+    n :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     if n is None:
         n = 11 + np.random.randint(0, 20)
     rg.standard_normal(n)
@@ -92,8 +153,10 @@
 
 
 class RNG:
+    """ """
     @classmethod
     def setup_class(cls):
+        """ """
         # Overridden in test classes. Place holder to silence IDE noise
         cls.bit_generator = PCG64
         cls.advance = None
@@ -105,15 +168,18 @@
 
     @classmethod
     def _extra_setup(cls):
+        """ """
         cls.vec_1d = np.arange(2.0, 102.0)
         cls.vec_2d = np.arange(2.0, 102.0)[None, :]
         cls.mat = np.arange(2.0, 102.0, 0.01).reshape((100, 100))
         cls.seed_error = TypeError
 
     def _reset_state(self):
+        """ """
         self.rg.bit_generator.state = self.initial_state
 
     def test_init(self):
+        """ """
         rg = Generator(self.bit_generator())
         state = rg.bit_generator.state
         rg.standard_normal(1)
@@ -123,6 +189,7 @@
         assert_(comp_state(state, new_state))
 
     def test_advance(self):
+        """ """
         state = self.rg.bit_generator.state
         if hasattr(self.rg.bit_generator, 'advance'):
             self.rg.bit_generator.advance(self.advance)
@@ -132,6 +199,7 @@
             pytest.skip('Advance is not supported by {0}'.format(bitgen_name))
 
     def test_jump(self):
+        """ """
         state = self.rg.bit_generator.state
         if hasattr(self.rg.bit_generator, 'jumped'):
             bit_gen2 = self.rg.bit_generator.jumped()
@@ -149,12 +217,14 @@
             pytest.skip('Jump is not supported by {0}'.format(bitgen_name))
 
     def test_uniform(self):
+        """ """
         r = self.rg.uniform(-1.0, 0.0, size=10)
         assert_(len(r) == 10)
         assert_((r > -1).all())
         assert_((r <= 0).all())
 
     def test_uniform_array(self):
+        """ """
         r = self.rg.uniform(np.array([-1.0] * 10), 0.0, size=10)
         assert_(len(r) == 10)
         assert_((r > -1).all())
@@ -170,32 +240,39 @@
         assert_((r <= 0).all())
 
     def test_random(self):
+        """ """
         assert_(len(self.rg.random(10)) == 10)
         params_0(self.rg.random)
 
     def test_standard_normal_zig(self):
+        """ """
         assert_(len(self.rg.standard_normal(10)) == 10)
 
     def test_standard_normal(self):
+        """ """
         assert_(len(self.rg.standard_normal(10)) == 10)
         params_0(self.rg.standard_normal)
 
     def test_standard_gamma(self):
+        """ """
         assert_(len(self.rg.standard_gamma(10, 10)) == 10)
         assert_(len(self.rg.standard_gamma(np.array([10] * 10), 10)) == 10)
         params_1(self.rg.standard_gamma)
 
     def test_standard_exponential(self):
+        """ """
         assert_(len(self.rg.standard_exponential(10)) == 10)
         params_0(self.rg.standard_exponential)
 
     def test_standard_exponential_float(self):
+        """ """
         randoms = self.rg.standard_exponential(10, dtype='float32')
         assert_(len(randoms) == 10)
         assert randoms.dtype == np.float32
         params_0(partial(self.rg.standard_exponential, dtype='float32'))
 
     def test_standard_exponential_float_log(self):
+        """ """
         randoms = self.rg.standard_exponential(10, dtype='float32',
                                                method='inv')
         assert_(len(randoms) == 10)
@@ -204,18 +281,22 @@
                          method='inv'))
 
     def test_standard_cauchy(self):
+        """ """
         assert_(len(self.rg.standard_cauchy(10)) == 10)
         params_0(self.rg.standard_cauchy)
 
     def test_standard_t(self):
+        """ """
         assert_(len(self.rg.standard_t(10, 10)) == 10)
         params_1(self.rg.standard_t)
 
     def test_binomial(self):
+        """ """
         assert_(self.rg.binomial(10, .5) >= 0)
         assert_(self.rg.binomial(1000, .5) >= 0)
 
     def test_reset_state(self):
+        """ """
         state = self.rg.bit_generator.state
         int_1 = self.rg.integers(2**31)
         self.rg.bit_generator.state = state
@@ -223,12 +304,14 @@
         assert_(int_1 == int_2)
 
     def test_entropy_init(self):
+        """ """
         rg = Generator(self.bit_generator())
         rg2 = Generator(self.bit_generator())
         assert_(not comp_state(rg.bit_generator.state,
                                rg2.bit_generator.state))
 
     def test_seed(self):
+        """ """
         rg = Generator(self.bit_generator(*self.seed))
         rg2 = Generator(self.bit_generator(*self.seed))
         rg.random()
@@ -236,6 +319,7 @@
         assert_(comp_state(rg.bit_generator.state, rg2.bit_generator.state))
 
     def test_reset_state_gauss(self):
+        """ """
         rg = Generator(self.bit_generator(*self.seed))
         rg.standard_normal()
         state = rg.bit_generator.state
@@ -246,6 +330,7 @@
         assert_array_equal(n1, n2)
 
     def test_reset_state_uint32(self):
+        """ """
         rg = Generator(self.bit_generator(*self.seed))
         rg.integers(0, 2 ** 24, 120, dtype=np.uint32)
         state = rg.bit_generator.state
@@ -256,6 +341,7 @@
         assert_array_equal(n1, n2)
 
     def test_reset_state_float(self):
+        """ """
         rg = Generator(self.bit_generator(*self.seed))
         rg.random(dtype='float32')
         state = rg.bit_generator.state
@@ -266,16 +352,19 @@
         assert_((n1 == n2).all())
 
     def test_shuffle(self):
+        """ """
         original = np.arange(200, 0, -1)
         permuted = self.rg.permutation(original)
         assert_((original != permuted).any())
 
     def test_permutation(self):
+        """ """
         original = np.arange(200, 0, -1)
         permuted = self.rg.permutation(original)
         assert_((original != permuted).any())
 
     def test_beta(self):
+        """ """
         vals = self.rg.beta(2.0, 2.0, 10)
         assert_(len(vals) == 10)
         vals = self.rg.beta(np.array([2.0] * 10), 2.0)
@@ -288,57 +377,70 @@
         assert_(vals.shape == (10, 10))
 
     def test_bytes(self):
+        """ """
         vals = self.rg.bytes(10)
         assert_(len(vals) == 10)
 
     def test_chisquare(self):
+        """ """
         vals = self.rg.chisquare(2.0, 10)
         assert_(len(vals) == 10)
         params_1(self.rg.chisquare)
 
     def test_exponential(self):
+        """ """
         vals = self.rg.exponential(2.0, 10)
         assert_(len(vals) == 10)
         params_1(self.rg.exponential)
 
     def test_f(self):
+        """ """
         vals = self.rg.f(3, 1000, 10)
         assert_(len(vals) == 10)
 
     def test_gamma(self):
+        """ """
         vals = self.rg.gamma(3, 2, 10)
         assert_(len(vals) == 10)
 
     def test_geometric(self):
+        """ """
         vals = self.rg.geometric(0.5, 10)
         assert_(len(vals) == 10)
         params_1(self.rg.exponential, bounded=True)
 
     def test_gumbel(self):
+        """ """
         vals = self.rg.gumbel(2.0, 2.0, 10)
         assert_(len(vals) == 10)
 
     def test_laplace(self):
+        """ """
         vals = self.rg.laplace(2.0, 2.0, 10)
         assert_(len(vals) == 10)
 
     def test_logitic(self):
+        """ """
         vals = self.rg.logistic(2.0, 2.0, 10)
         assert_(len(vals) == 10)
 
     def test_logseries(self):
+        """ """
         vals = self.rg.logseries(0.5, 10)
         assert_(len(vals) == 10)
 
     def test_negative_binomial(self):
+        """ """
         vals = self.rg.negative_binomial(10, 0.2, 10)
         assert_(len(vals) == 10)
 
     def test_noncentral_chisquare(self):
+        """ """
         vals = self.rg.noncentral_chisquare(10, 2, 10)
         assert_(len(vals) == 10)
 
     def test_noncentral_f(self):
+        """ """
         vals = self.rg.noncentral_f(3, 1000, 2, 10)
         assert_(len(vals) == 10)
         vals = self.rg.noncentral_f(np.array([3] * 10), 1000, 2)
@@ -349,14 +451,17 @@
         assert_(len(vals) == 10)
 
     def test_normal(self):
+        """ """
         vals = self.rg.normal(10, 0.2, 10)
         assert_(len(vals) == 10)
 
     def test_pareto(self):
+        """ """
         vals = self.rg.pareto(3.0, 10)
         assert_(len(vals) == 10)
 
     def test_poisson(self):
+        """ """
         vals = self.rg.poisson(10, 10)
         assert_(len(vals) == 10)
         vals = self.rg.poisson(np.array([10] * 10))
@@ -364,31 +469,38 @@
         params_1(self.rg.poisson)
 
     def test_power(self):
+        """ """
         vals = self.rg.power(0.2, 10)
         assert_(len(vals) == 10)
 
     def test_integers(self):
+        """ """
         vals = self.rg.integers(10, 20, 10)
         assert_(len(vals) == 10)
 
     def test_rayleigh(self):
+        """ """
         vals = self.rg.rayleigh(0.2, 10)
         assert_(len(vals) == 10)
         params_1(self.rg.rayleigh, bounded=True)
 
     def test_vonmises(self):
+        """ """
         vals = self.rg.vonmises(10, 0.2, 10)
         assert_(len(vals) == 10)
 
     def test_wald(self):
+        """ """
         vals = self.rg.wald(1.0, 1.0, 10)
         assert_(len(vals) == 10)
 
     def test_weibull(self):
+        """ """
         vals = self.rg.weibull(1.0, 10)
         assert_(len(vals) == 10)
 
     def test_zipf(self):
+        """ """
         vals = self.rg.zipf(10, 10)
         assert_(len(vals) == 10)
         vals = self.rg.zipf(self.vec_1d)
@@ -399,18 +511,21 @@
         assert_(vals.shape == (100, 100))
 
     def test_hypergeometric(self):
+        """ """
         vals = self.rg.hypergeometric(25, 25, 20)
         assert_(np.isscalar(vals))
         vals = self.rg.hypergeometric(np.array([25] * 10), 25, 20)
         assert_(vals.shape == (10,))
 
     def test_triangular(self):
+        """ """
         vals = self.rg.triangular(-5, 0, 5)
         assert_(np.isscalar(vals))
         vals = self.rg.triangular(-5, np.array([0] * 10), 5)
         assert_(vals.shape == (10,))
 
     def test_multivariate_normal(self):
+        """ """
         mean = [0, 0]
         cov = [[1, 0], [0, 100]]  # diagonal covariance
         x = self.rg.multivariate_normal(mean, cov, 5000)
@@ -422,16 +537,19 @@
         assert_((x_zig != x_inv).any())
 
     def test_multinomial(self):
+        """ """
         vals = self.rg.multinomial(100, [1.0 / 3, 2.0 / 3])
         assert_(vals.shape == (2,))
         vals = self.rg.multinomial(100, [1.0 / 3, 2.0 / 3], size=10)
         assert_(vals.shape == (10, 2))
 
     def test_dirichlet(self):
+        """ """
         s = self.rg.dirichlet((10, 5, 3), 20)
         assert_(s.shape == (20, 3))
 
     def test_pickle(self):
+        """ """
         pick = pickle.dumps(self.rg)
         unpick = pickle.loads(pick)
         assert_((type(self.rg) == type(unpick)))
@@ -445,6 +563,7 @@
                            unpick.bit_generator.state))
 
     def test_seed_array(self):
+        """ """
         if self.seed_vector_bits is None:
             bitgen_name = self.bit_generator.__name__
             pytest.skip('Vector seeding is not supported by '
@@ -484,6 +603,7 @@
         assert_(not comp_state(state1, state2))
 
     def test_uniform_float(self):
+        """ """
         rg = Generator(self.bit_generator(12345))
         warmup(rg)
         state = rg.bit_generator.state
@@ -497,6 +617,7 @@
         assert_(comp_state(rg.bit_generator.state, rg2.bit_generator.state))
 
     def test_gamma_floats(self):
+        """ """
         rg = Generator(self.bit_generator())
         warmup(rg)
         state = rg.bit_generator.state
@@ -510,6 +631,7 @@
         assert_(comp_state(rg.bit_generator.state, rg2.bit_generator.state))
 
     def test_normal_floats(self):
+        """ """
         rg = Generator(self.bit_generator())
         warmup(rg)
         state = rg.bit_generator.state
@@ -523,6 +645,7 @@
         assert_(comp_state(rg.bit_generator.state, rg2.bit_generator.state))
 
     def test_normal_zig_floats(self):
+        """ """
         rg = Generator(self.bit_generator())
         warmup(rg)
         state = rg.bit_generator.state
@@ -536,6 +659,7 @@
         assert_(comp_state(rg.bit_generator.state, rg2.bit_generator.state))
 
     def test_output_fill(self):
+        """ """
         rg = self.rg
         state = rg.bit_generator.state
         size = (31, 7, 97)
@@ -558,6 +682,7 @@
         assert_equal(direct, existing)
 
     def test_output_filling_uniform(self):
+        """ """
         rg = self.rg
         state = rg.bit_generator.state
         size = (31, 7, 97)
@@ -576,6 +701,7 @@
         assert_equal(direct, existing)
 
     def test_output_filling_exponential(self):
+        """ """
         rg = self.rg
         state = rg.bit_generator.state
         size = (31, 7, 97)
@@ -594,6 +720,7 @@
         assert_equal(direct, existing)
 
     def test_output_filling_gamma(self):
+        """ """
         rg = self.rg
         state = rg.bit_generator.state
         size = (31, 7, 97)
@@ -612,6 +739,7 @@
         assert_equal(direct, existing)
 
     def test_output_filling_gamma_broadcast(self):
+        """ """
         rg = self.rg
         state = rg.bit_generator.state
         size = (31, 7, 97)
@@ -631,6 +759,7 @@
         assert_equal(direct, existing)
 
     def test_output_fill_error(self):
+        """ """
         rg = self.rg
         size = (31, 7, 97)
         existing = np.empty(size)
@@ -654,6 +783,17 @@
             rg.standard_gamma(1.0, out=existing[::3])
 
     def test_integers_broadcast(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         if dtype == np.bool_:
             upper = 2
             lower = 0
@@ -687,6 +827,17 @@
         assert_equal(a, b)
 
     def test_integers_numpy(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         high = np.array([1])
         low = np.array([0])
 
@@ -700,6 +851,17 @@
         assert out.shape == (1,)
 
     def test_integers_broadcast_errors(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         if dtype == np.bool_:
             upper = 2
             lower = 0
@@ -718,8 +880,10 @@
 
 
 class TestMT19937(RNG):
+    """ """
     @classmethod
     def setup_class(cls):
+        """ """
         cls.bit_generator = MT19937
         cls.advance = None
         cls.seed = [2 ** 21 + 2 ** 16 + 2 ** 5 + 1]
@@ -730,6 +894,7 @@
         cls.seed_error = ValueError
 
     def test_numpy_state(self):
+        """ """
         nprg = np.random.RandomState()
         nprg.standard_normal(99)
         state = nprg.get_state()
@@ -740,8 +905,10 @@
 
 
 class TestPhilox(RNG):
+    """ """
     @classmethod
     def setup_class(cls):
+        """ """
         cls.bit_generator = Philox
         cls.advance = 2**63 + 2**31 + 2**15 + 1
         cls.seed = [12345]
@@ -752,8 +919,10 @@
 
 
 class TestSFC64(RNG):
+    """ """
     @classmethod
     def setup_class(cls):
+        """ """
         cls.bit_generator = SFC64
         cls.advance = None
         cls.seed = [12345]
@@ -764,8 +933,10 @@
 
 
 class TestPCG64(RNG):
+    """ """
     @classmethod
     def setup_class(cls):
+        """ """
         cls.bit_generator = PCG64
         cls.advance = 2**63 + 2**31 + 2**15 + 1
         cls.seed = [12345]
@@ -776,8 +947,10 @@
 
 
 class TestDefaultRNG(RNG):
+    """ """
     @classmethod
     def setup_class(cls):
+        """ """
         # This will duplicate some tests that directly instantiate a fresh
         # Generator(), but that's okay.
         cls.bit_generator = PCG64
@@ -789,11 +962,13 @@
         cls._extra_setup()
 
     def test_default_is_pcg64(self):
+        """ """
         # In order to change the default BitGenerator, we'll go through
         # a deprecation cycle to move to a different function.
         assert_(isinstance(self.rg.bit_generator, PCG64))
 
     def test_seed(self):
+        """ """
         np.random.default_rng()
         np.random.default_rng(None)
         np.random.default_rng(12345)
