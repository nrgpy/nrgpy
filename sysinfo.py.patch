# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/utils/sysinfo.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/utils/sysinfo.py
@@ -29,26 +29,24 @@
 
 def pkg_commit_hash(pkg_path):
     """Get short form of commit hash given directory `pkg_path`
-
+    
     We get the commit hash from (in order of preference):
-
+    
     * IPython.utils._sysinfo.commit
     * git output, if we are in a git repository
-
+    
     If these fail, we return a not-found placeholder tuple
 
     Parameters
     ----------
     pkg_path : str
-       directory containing package
-       only used for getting commit from active repo
+        directory containing package
+        only used for getting commit from active repo
 
     Returns
     -------
-    hash_from : str
-       Where we got the hash from - description
-    hash_str : str
-       short form of hash
+
+    
     """
     # Try and get commit from written commit text file
     if _sysinfo.commit:
@@ -71,12 +69,12 @@
     Parameters
     ----------
     pkg_path : str
-       path containing __init__.py for package
+        path containing __init__.py for package
 
     Returns
     -------
-    context : dict
-       with named parameters of interest
+
+    
     """
     src, hsh = pkg_commit_hash(pkg_path)
     return dict(
@@ -93,57 +91,48 @@
         )
 
 def get_sys_info():
-    """Return useful information about IPython and the system, as a dict."""
+    """ """
     p = os.path
     path = p.realpath(p.dirname(p.abspath(p.join(__file__, '..'))))
     return pkg_info(path)
 
 def sys_info():
-    """Return useful information about IPython and the system, as a string.
-
-    Examples
-    --------
-    ::
-    
-        In [2]: print(sys_info())
-        {'commit_hash': '144fdae',      # random
-         'commit_source': 'repository',
-         'ipython_path': '/home/fperez/usr/lib/python2.6/site-packages/IPython',
-         'ipython_version': '0.11.dev',
-         'os_name': 'posix',
-         'platform': 'Linux-2.6.35-22-generic-i686-with-Ubuntu-10.10-maverick',
-         'sys_executable': '/usr/bin/python',
-         'sys_platform': 'linux2',
-         'sys_version': '2.6.6 (r266:84292, Sep 15 2010, 15:52:39) \\n[GCC 4.4.5]'}
-    """
+    """Return useful information about IPython and the system, as a string."""
     return pprint.pformat(get_sys_info())
 
 def _num_cpus_unix():
-    """Return the number of active CPUs on a Unix system."""
+    """ """
     return os.sysconf("SC_NPROCESSORS_ONLN")
 
 
 def _num_cpus_darwin():
-    """Return the number of active CPUs on a Darwin system."""
+    """ """
     p = subprocess.Popen(['sysctl','-n','hw.ncpu'],stdout=subprocess.PIPE)
     return p.stdout.read()
 
 
 def _num_cpus_windows():
-    """Return the number of active CPUs on a Windows system."""
+    """ """
     return os.environ.get("NUMBER_OF_PROCESSORS")
 
 
 def num_cpus():
-   """Return the effective number of CPUs in the system as an integer.
+    """
 
-   This cross-platform function makes an attempt at finding the total number of
-   available CPUs in the system, as returned by various underlying system and
-   python calls.
+    Parameters
+    ----------
 
-   If it can't find a sensible answer, it returns 1 (though an error *may* make
-   it return a large positive number that's actually incorrect).
-   """
+    Returns
+    -------
+    type
+        This cross-platform function makes an attempt at finding the total number of
+        available CPUs in the system, as returned by various underlying system and
+        python calls.
+        
+        If it can't find a sensible answer, it returns 1 (though an error *may* make
+        it return a large positive number that's actually incorrect).
+
+    """
 
    # Many thanks to the Parallel Python project (http://www.parallelpython.com)
    # for the names of the keys we needed to look up for this function.  This
