# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/inputtransformer.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/inputtransformer.py
@@ -48,18 +48,35 @@
         input or None if the transformer is waiting for more input.
         
         Must be overridden by subclasses.
-
+        
         Implementations may raise ``SyntaxError`` if the input is invalid. No
         other exceptions may be raised.
+
+        Parameters
+        ----------
+        line :
+            
+
+        Returns
+        -------
+
         """
         pass
     
     @abc.abstractmethod
     def reset(self):
-        """Return, transformed any lines that the transformer has accumulated,
-        and reset its internal state.
-        
-        Must be overridden by subclasses.
+        """
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+        type
+            and reset its internal state.
+            
+            Must be overridden by subclasses.
+
         """
         pass
     
@@ -67,9 +84,29 @@
     def wrap(cls, func):
         """Can be used by subclasses as a decorator, to return a factory that
         will allow instantiation with the decorated object.
+
+        Parameters
+        ----------
+        func :
+            
+
+        Returns
+        -------
+
         """
         @functools.wraps(func)
         def transformer_factory(**kwargs):
+            """
+
+            Parameters
+            ----------
+            **kwargs :
+                
+
+            Returns
+            -------
+
+            """
             return cls(func, **kwargs)
         
         return transformer_factory
@@ -84,7 +121,17 @@
     
     def push(self, line):
         """Send a line of input to the transformer, returning the
-        transformed input."""
+        transformed input.
+
+        Parameters
+        ----------
+        line :
+            
+
+        Returns
+        -------
+
+        """
         return self.func(line)
     
     def reset(self):
@@ -105,12 +152,29 @@
         """Send a line of input to the transformer, returning the
         transformed input or None if the transformer is waiting for more
         input.
+
+        Parameters
+        ----------
+        line :
+            
+
+        Returns
+        -------
+
         """
         return self.coro.send(line)
     
     def reset(self):
-        """Return, transformed any lines that the transformer has
-        accumulated, and reset its internal state.
+        """
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+        type
+            accumulated, and reset its internal state.
+
         """
         return self.coro.send(None)
 
@@ -118,7 +182,15 @@
     """Wrapper for a token-based input transformer.
     
     func should accept a list of tokens (5-tuples, see tokenize docs), and
-    return an iterable which can be passed to tokenize.untokenize().
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+    type
+        
+
     """
     def __init__(self, func):
         self.func = func
@@ -126,10 +198,22 @@
         self.reset_tokenizer()
 
     def reset_tokenizer(self):
+        """ """
         it = iter(self.buf)
         self.tokenizer = generate_tokens(it.__next__)
 
     def push(self, line):
+        """
+
+        Parameters
+        ----------
+        line :
+            
+
+        Returns
+        -------
+
+        """
         self.buf.append(line + '\n')
         if all(l.isspace() for l in self.buf):
             return self.reset()
@@ -153,11 +237,23 @@
         return self.output(tokens)
     
     def output(self, tokens):
+        """
+
+        Parameters
+        ----------
+        tokens :
+            
+
+        Returns
+        -------
+
+        """
         self.buf.clear()
         self.reset_tokenizer()
         return untokenize(self.func(tokens)).rstrip('\n')
     
     def reset(self):
+        """ """
         l = ''.join(self.buf)
         self.buf.clear()
         self.reset_tokenizer()
@@ -165,15 +261,27 @@
             return l.rstrip('\n')
 
 class assemble_python_lines(TokenInputTransformer):
+    """ """
     def __init__(self):
         super(assemble_python_lines, self).__init__(None)
     
     def output(self, tokens):
+        """
+
+        Parameters
+        ----------
+        tokens :
+            
+
+        Returns
+        -------
+
+        """
         return self.reset()
 
 @CoroutineInputTransformer.wrap
 def assemble_logical_lines():
-    r"""Join lines following explicit line continuations (\)"""
+    """r"""Join lines following explicit line continuations (\)"""
     line = ''
     while True:
         line = (yield line)
@@ -195,7 +303,23 @@
 # Utilities
 def _make_help_call(target, esc, lspace, next_input=None):
     """Prepares a pinfo(2)/psearch call from a target name and the escape
-    (i.e. ? or ??)"""
+    (i.e. ? or ??)
+
+    Parameters
+    ----------
+    target :
+        
+    esc :
+        
+    lspace :
+        
+    next_input :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     method  = 'pinfo2' if esc == '??' \
                 else 'psearch' if '*' in target \
                 else 'pinfo'
@@ -211,16 +335,49 @@
     
 # These define the transformations for the different escape characters.
 def _tr_system(line_info):
+    """
+
+    Parameters
+    ----------
+    line_info :
+        
+
+    Returns
+    -------
+
+    """
     "Translate lines escaped with: !"
     cmd = line_info.line.lstrip().lstrip(ESC_SHELL)
     return '%sget_ipython().system(%r)' % (line_info.pre, cmd)
 
 def _tr_system2(line_info):
+    """
+
+    Parameters
+    ----------
+    line_info :
+        
+
+    Returns
+    -------
+
+    """
     "Translate lines escaped with: !!"
     cmd = line_info.line.lstrip()[2:]
     return '%sget_ipython().getoutput(%r)' % (line_info.pre, cmd)
 
 def _tr_help(line_info):
+    """
+
+    Parameters
+    ----------
+    line_info :
+        
+
+    Returns
+    -------
+
+    """
     "Translate lines escaped with: ?/??"
     # A naked help line should just fire the intro help screen
     if not line_info.line[1:]:
@@ -229,6 +386,17 @@
     return _make_help_call(line_info.ifun, line_info.esc, line_info.pre)
 
 def _tr_magic(line_info):
+    """
+
+    Parameters
+    ----------
+    line_info :
+        
+
+    Returns
+    -------
+
+    """
     "Translate lines escaped with: %"
     tpl = '%sget_ipython().run_line_magic(%r, %r)'
     if line_info.line.startswith(ESC_MAGIC2):
@@ -240,16 +408,49 @@
     return tpl % (line_info.pre, t_magic_name, t_magic_arg_s)
 
 def _tr_quote(line_info):
+    """
+
+    Parameters
+    ----------
+    line_info :
+        
+
+    Returns
+    -------
+
+    """
     "Translate lines escaped with: ,"
     return '%s%s("%s")' % (line_info.pre, line_info.ifun,
                          '", "'.join(line_info.the_rest.split()) )
 
 def _tr_quote2(line_info):
+    """
+
+    Parameters
+    ----------
+    line_info :
+        
+
+    Returns
+    -------
+
+    """
     "Translate lines escaped with: ;"
     return '%s%s("%s")' % (line_info.pre, line_info.ifun,
                            line_info.the_rest)
 
 def _tr_paren(line_info):
+    """
+
+    Parameters
+    ----------
+    line_info :
+        
+
+    Returns
+    -------
+
+    """
     "Translate lines escaped with: /"
     return '%s%s(%s)' % (line_info.pre, line_info.ifun,
                          ", ".join(line_info.the_rest.split()))
@@ -266,6 +467,15 @@
 @StatelessInputTransformer.wrap
 def escaped_commands(line):
     """Transform escaped commands - %magic, !system, ?help + various autocalls.
+
+    Parameters
+    ----------
+    line :
+        
+
+    Returns
+    -------
+
     """
     if not line or line.isspace():
         return line
@@ -290,7 +500,17 @@
 _MULTILINE_STRUCTURE = object()
 
 def _line_tokens(line):
-    """Helper for has_comment and ends_in_comment_or_string."""
+    """Helper for has_comment and ends_in_comment_or_string.
+
+    Parameters
+    ----------
+    line :
+        
+
+    Returns
+    -------
+
+    """
     readline = StringIO(line).readline
     toktypes = set()
     try:
@@ -306,34 +526,34 @@
 
 def has_comment(src):
     """Indicate whether an input line has (i.e. ends in, or is) a comment.
-
+    
     This uses tokenize, so it can distinguish comments from # inside strings.
 
     Parameters
     ----------
     src : string
-      A single line input string.
-
-    Returns
-    -------
-    comment : bool
-        True if source has a comment.
+        A single line input string.
+
+    Returns
+    -------
+
+    
     """
     return (tokenize.COMMENT in _line_tokens(src))
 
 def ends_in_comment_or_string(src):
     """Indicates whether or not an input line ends in a comment or within
     a multiline string.
-    
+
     Parameters
     ----------
     src : string
-      A single line input string.
-
-    Returns
-    -------
-    comment : bool
-        True if source ends in a comment or multiline string.
+        A single line input string.
+
+    Returns
+    -------
+
+    
     """
     toktypes = _line_tokens(src)
     return (tokenize.COMMENT in toktypes) or (_MULTILINE_STRING in toktypes)
@@ -341,7 +561,17 @@
 
 @StatelessInputTransformer.wrap
 def help_end(line):
-    """Translate lines with ?/?? at the end"""
+    """Translate lines with ?/?? at the end
+
+    Parameters
+    ----------
+    line :
+        
+
+    Returns
+    -------
+
+    """
     m = _help_end_re.search(line)
     if m is None or ends_in_comment_or_string(line):
         return line
@@ -361,6 +591,15 @@
     
     After a cell magic is started, this stores up any lines it gets until it is
     reset (sent None).
+
+    Parameters
+    ----------
+    end_on_blank_line :
+         (Default value = False)
+
+    Returns
+    -------
+
     """
     tpl = 'get_ipython().run_cell_magic(%r, %r, %r)'
     cellmagic_help_re = re.compile(r'%%\w+\?')
@@ -397,21 +636,20 @@
 
 def _strip_prompts(prompt_re, initial_re=None, turnoff_re=None):
     """Remove matching input prompts from a block of input.
-    
-    Parameters
-    ----------
-    prompt_re : regular expression
-        A regular expression matching any input prompt (including continuation)
-    initial_re : regular expression, optional
-        A regular expression matching only the initial prompt, but not continuation.
-        If no initial expression is given, prompt_re will be used everywhere.
-        Used mainly for plain Python prompts, where the continuation prompt
-        ``...`` is a valid Python expression in Python 3, so shouldn't be stripped.
-    
-    If initial_re and prompt_re differ,
-    only initial_re will be tested against the first line.
-    If any prompt is found on the first two lines,
-    prompts will be stripped from the rest of the block.
+
+    Parameters
+    ----------
+    prompt_re :
+        
+    initial_re :
+         (Default value = None)
+    turnoff_re :
+         (Default value = None)
+
+    Returns
+    -------
+
+    
     """
     if initial_re is None:
         initial_re = prompt_re
@@ -478,6 +716,13 @@
     
     If the first line starts with a spaces or tabs, the same whitespace will be
     removed from each following line until it is reset.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     space_re = re.compile(r'^[ \t]+')
     line = ''
@@ -514,7 +759,17 @@
 assign_system_template = '%s = get_ipython().getoutput(%r)'
 @StatelessInputTransformer.wrap
 def assign_from_system(line):
-    """Transform assignment from system commands (e.g. files = !ls)"""
+    """Transform assignment from system commands (e.g. files = !ls)
+
+    Parameters
+    ----------
+    line :
+        
+
+    Returns
+    -------
+
+    """
     m = assign_system_re.match(line)
     if m is None:
         return line
@@ -525,7 +780,17 @@
 assign_magic_template = '%s = get_ipython().run_line_magic(%r, %r)'
 @StatelessInputTransformer.wrap
 def assign_from_magic(line):
-    """Transform assignment from magic commands (e.g. a = %who_ls)"""
+    """Transform assignment from magic commands (e.g. a = %who_ls)
+
+    Parameters
+    ----------
+    line :
+        
+
+    Returns
+    -------
+
+    """
     m = assign_magic_re.match(line)
     if m is None:
         return line
