# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/arrays/sparse/test_arithmetics.py
@@ -11,25 +11,81 @@
 
 @pytest.fixture(params=["integer", "block"])
 def kind(request):
-    """kind kwarg to pass to SparseArray/SparseSeries"""
+    """kind kwarg to pass to SparseArray/SparseSeries
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     return request.param
 
 
 @pytest.fixture(params=[True, False])
 def mix(request):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     # whether to operate op(sparse, dense) instead of op(sparse, sparse)
     return request.param
 
 
 class TestSparseArrayArithmetics:
+    """ """
 
     _base = np.array
     _klass = SparseArray
 
     def _assert(self, a, b):
+        """
+
+        Parameters
+        ----------
+        a :
+            
+        b :
+            
+
+        Returns
+        -------
+
+        """
         tm.assert_numpy_array_equal(a, b)
 
     def _check_numeric_ops(self, a, b, a_dense, b_dense, mix, op):
+        """
+
+        Parameters
+        ----------
+        a :
+            
+        b :
+            
+        a_dense :
+            
+        b_dense :
+            
+        mix :
+            
+        op :
+            
+
+        Returns
+        -------
+
+        """
         with np.errstate(invalid="ignore", divide="ignore"):
             if mix:
                 result = op(a, b_dense).to_dense()
@@ -51,12 +107,40 @@
             self._assert(result, expected)
 
     def _check_bool_result(self, res):
+        """
+
+        Parameters
+        ----------
+        res :
+            
+
+        Returns
+        -------
+
+        """
         assert isinstance(res, self._klass)
         assert isinstance(res.dtype, SparseDtype)
         assert res.dtype.subtype == np.bool_
         assert isinstance(res.fill_value, bool)
 
     def _check_comparison_ops(self, a, b, a_dense, b_dense):
+        """
+
+        Parameters
+        ----------
+        a :
+            
+        b :
+            
+        a_dense :
+            
+        b_dense :
+            
+
+        Returns
+        -------
+
+        """
         with np.errstate(invalid="ignore"):
             # Unfortunately, trying to wrap the computation of each expected
             # value is with np.errstate() is too tedious.
@@ -100,6 +184,23 @@
             self._assert((a < b_dense).to_dense(), a_dense < b_dense)
 
     def _check_logical_ops(self, a, b, a_dense, b_dense):
+        """
+
+        Parameters
+        ----------
+        a :
+            
+        b :
+            
+        a_dense :
+            
+        b_dense :
+            
+
+        Returns
+        -------
+
+        """
         # sparse & sparse
         self._check_bool_result(a & b)
         self._assert((a & b).to_dense(), a_dense & b_dense)
@@ -118,6 +219,25 @@
     def test_float_scalar(
         self, kind, mix, all_arithmetic_functions, fill_value, scalar
     ):
+        """
+
+        Parameters
+        ----------
+        kind :
+            
+        mix :
+            
+        all_arithmetic_functions :
+            
+        fill_value :
+            
+        scalar :
+            
+
+        Returns
+        -------
+
+        """
         op = all_arithmetic_functions
         values = self._base([np.nan, 1, 2, 0, np.nan, 0, 1, 2, 1, np.nan])
 
@@ -125,6 +245,17 @@
         self._check_numeric_ops(a, scalar, values, scalar, mix, op)
 
     def test_float_scalar_comparison(self, kind):
+        """
+
+        Parameters
+        ----------
+        kind :
+            
+
+        Returns
+        -------
+
+        """
         values = self._base([np.nan, 1, 2, 0, np.nan, 0, 1, 2, 1, np.nan])
 
         a = self._klass(values, kind=kind)
@@ -143,6 +274,21 @@
         self._check_comparison_ops(a, 3, values, 3)
 
     def test_float_same_index(self, kind, mix, all_arithmetic_functions):
+        """
+
+        Parameters
+        ----------
+        kind :
+            
+        mix :
+            
+        all_arithmetic_functions :
+            
+
+        Returns
+        -------
+
+        """
         # when sp_index are the same
         op = all_arithmetic_functions
         values = self._base([np.nan, 1, 2, 0, np.nan, 0, 1, 2, 1, np.nan])
@@ -160,6 +306,17 @@
         self._check_numeric_ops(a, b, values, rvalues, mix, op)
 
     def test_float_same_index_comparison(self, kind):
+        """
+
+        Parameters
+        ----------
+        kind :
+            
+
+        Returns
+        -------
+
+        """
         # when sp_index are the same
         values = self._base([np.nan, 1, 2, 0, np.nan, 0, 1, 2, 1, np.nan])
         rvalues = self._base([np.nan, 2, 3, 4, np.nan, 0, 1, 3, 2, np.nan])
@@ -176,6 +333,21 @@
         self._check_comparison_ops(a, b, values, rvalues)
 
     def test_float_array(self, kind, mix, all_arithmetic_functions):
+        """
+
+        Parameters
+        ----------
+        kind :
+            
+        mix :
+            
+        all_arithmetic_functions :
+            
+
+        Returns
+        -------
+
+        """
         op = all_arithmetic_functions
 
         values = self._base([np.nan, 1, 2, 0, np.nan, 0, 1, 2, 1, np.nan])
@@ -199,6 +371,19 @@
         self._check_numeric_ops(a, b, values, rvalues, mix, op)
 
     def test_float_array_different_kind(self, mix, all_arithmetic_functions):
+        """
+
+        Parameters
+        ----------
+        mix :
+            
+        all_arithmetic_functions :
+            
+
+        Returns
+        -------
+
+        """
         op = all_arithmetic_functions
 
         values = self._base([np.nan, 1, 2, 0, np.nan, 0, 1, 2, 1, np.nan])
@@ -222,6 +407,17 @@
         self._check_numeric_ops(a, b, values, rvalues, mix, op)
 
     def test_float_array_comparison(self, kind):
+        """
+
+        Parameters
+        ----------
+        kind :
+            
+
+        Returns
+        -------
+
+        """
         values = self._base([np.nan, 1, 2, 0, np.nan, 0, 1, 2, 1, np.nan])
         rvalues = self._base([2, np.nan, 2, 3, np.nan, 0, 1, 5, 2, np.nan])
 
@@ -243,6 +439,21 @@
         self._check_comparison_ops(a, b, values, rvalues)
 
     def test_int_array(self, kind, mix, all_arithmetic_functions):
+        """
+
+        Parameters
+        ----------
+        kind :
+            
+        mix :
+            
+        all_arithmetic_functions :
+            
+
+        Returns
+        -------
+
+        """
         op = all_arithmetic_functions
 
         # have to specify dtype explicitly until fixing GH 667
@@ -279,6 +490,17 @@
         self._check_numeric_ops(a, b, values, rvalues, mix, op)
 
     def test_int_array_comparison(self, kind):
+        """
+
+        Parameters
+        ----------
+        kind :
+            
+
+        Returns
+        -------
+
+        """
         dtype = "int64"
         # int32 NI ATM
 
@@ -304,6 +526,19 @@
 
     @pytest.mark.parametrize("fill_value", [True, False, np.nan])
     def test_bool_same_index(self, kind, fill_value):
+        """
+
+        Parameters
+        ----------
+        kind :
+            
+        fill_value :
+            
+
+        Returns
+        -------
+
+        """
         # GH 14000
         # when sp_index are the same
         values = self._base([True, False, True, True], dtype=np.bool_)
@@ -315,6 +550,19 @@
 
     @pytest.mark.parametrize("fill_value", [True, False, np.nan])
     def test_bool_array_logical(self, kind, fill_value):
+        """
+
+        Parameters
+        ----------
+        kind :
+            
+        fill_value :
+            
+
+        Returns
+        -------
+
+        """
         # GH 14000
         # when sp_index are the same
         values = self._base([True, False, True, False, True, True], dtype=np.bool_)
@@ -325,6 +573,21 @@
         self._check_logical_ops(a, b, values, rvalues)
 
     def test_mixed_array_float_int(self, kind, mix, all_arithmetic_functions):
+        """
+
+        Parameters
+        ----------
+        kind :
+            
+        mix :
+            
+        all_arithmetic_functions :
+            
+
+        Returns
+        -------
+
+        """
         op = all_arithmetic_functions
 
         rdtype = "int64"
@@ -355,6 +618,17 @@
         self._check_numeric_ops(a, b, values, rvalues, mix, op)
 
     def test_mixed_array_comparison(self, kind):
+        """
+
+        Parameters
+        ----------
+        kind :
+            
+
+        Returns
+        -------
+
+        """
         rdtype = "int64"
         # int32 NI ATM
 
@@ -384,6 +658,7 @@
         self._check_comparison_ops(a, b, values, rvalues)
 
     def test_xor(self):
+        """ """
         s = SparseArray([True, True, False, False])
         t = SparseArray([True, False, True, False])
         result = s ^ t
@@ -394,6 +669,17 @@
 
 @pytest.mark.parametrize("op", [operator.eq, operator.add])
 def test_with_list(op):
+    """
+
+    Parameters
+    ----------
+    op :
+        
+
+    Returns
+    -------
+
+    """
     arr = SparseArray([0, 1], fill_value=0)
     result = op(arr, [0, 1])
     expected = op(arr, SparseArray([0, 1]))
@@ -401,6 +687,7 @@
 
 
 def test_with_dataframe():
+    """ """
     # GH#27910
     arr = SparseArray([0, 1], fill_value=0)
     df = pd.DataFrame([[1, 2], [3, 4]])
@@ -409,6 +696,7 @@
 
 
 def test_with_zerodim_ndarray():
+    """ """
     # GH#27910
     arr = SparseArray([0, 1], fill_value=0)
 
@@ -422,6 +710,19 @@
     "arr", [SparseArray([0, 0, -1, 1]), SparseArray([None, None, -1, 1])]
 )
 def test_ufuncs(ufunc, arr):
+    """
+
+    Parameters
+    ----------
+    ufunc :
+        
+    arr :
+        
+
+    Returns
+    -------
+
+    """
     result = ufunc(arr)
     fill_value = ufunc(arr.fill_value)
     expected = SparseArray(ufunc(np.asarray(arr)), fill_value=fill_value)
@@ -440,6 +741,21 @@
 )
 @pytest.mark.parametrize("ufunc", [np.add, np.greater])
 def test_binary_ufuncs(ufunc, a, b):
+    """
+
+    Parameters
+    ----------
+    ufunc :
+        
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
+    """
     # can't say anything about fill value here.
     result = ufunc(a, b)
     expected = ufunc(np.asarray(a), np.asarray(b))
@@ -448,6 +764,7 @@
 
 
 def test_ndarray_inplace():
+    """ """
     sparray = SparseArray([0, 2, 0, 0])
     ndarray = np.array([0, 1, 2, 3])
     ndarray += sparray
@@ -456,6 +773,7 @@
 
 
 def test_sparray_inplace():
+    """ """
     sparray = SparseArray([0, 2, 0, 0])
     ndarray = np.array([0, 1, 2, 3])
     sparray += ndarray
@@ -465,6 +783,17 @@
 
 @pytest.mark.parametrize("fill_value", [True, False])
 def test_invert(fill_value):
+    """
+
+    Parameters
+    ----------
+    fill_value :
+        
+
+    Returns
+    -------
+
+    """
     arr = np.array([True, False, False, True])
     sparray = SparseArray(arr, fill_value=fill_value)
     result = ~sparray
@@ -483,6 +812,19 @@
 @pytest.mark.parametrize("fill_value", [0, np.nan])
 @pytest.mark.parametrize("op", [operator.pos, operator.neg])
 def test_unary_op(op, fill_value):
+    """
+
+    Parameters
+    ----------
+    op :
+        
+    fill_value :
+        
+
+    Returns
+    -------
+
+    """
     arr = np.array([0, 1, np.nan, 2])
     sparray = SparseArray(arr, fill_value=fill_value)
     result = op(sparray)
