# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/terminal/pt_inputhooks/wx.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/terminal/pt_inputhooks/wx.py
@@ -11,12 +11,34 @@
 def ignore_keyboardinterrupts(func):
     """Decorator which causes KeyboardInterrupt exceptions to be ignored during
     execution of the decorated function.
-
+    
     This is used by the inputhook functions to handle the event where the user
     presses CTRL+C while IPython is idle, and the inputhook loop is running. In
     this case, we want to ignore interrupts.
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
     """
     def wrapper(*args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         try:
             func(*args, **kwargs)
         except KeyboardInterrupt:
@@ -27,9 +49,18 @@
 @ignore_keyboardinterrupts
 def inputhook_wx1(context):
     """Run the wx event loop by processing pending events only.
-
+    
     This approach seems to work, but its performance is not great as it
     relies on having PyOS_InputHook called regularly.
+
+    Parameters
+    ----------
+    context :
+        
+
+    Returns
+    -------
+
     """
     app = wx.GetApp()
     if app is not None:
@@ -48,18 +79,34 @@
 
 
 class EventLoopTimer(wx.Timer):
+    """ """
 
     def __init__(self, func):
         self.func = func
         wx.Timer.__init__(self)
 
     def Notify(self):
+        """ """
         self.func()
 
 
 class EventLoopRunner(object):
+    """ """
 
     def Run(self, time, input_is_ready):
+        """
+
+        Parameters
+        ----------
+        time :
+            
+        input_is_ready :
+            
+
+        Returns
+        -------
+
+        """
         self.input_is_ready = input_is_ready
         self.evtloop = wx.EventLoop()
         self.timer = EventLoopTimer(self.check_stdin)
@@ -67,6 +114,7 @@
         self.evtloop.Run()
 
     def check_stdin(self):
+        """ """
         if self.input_is_ready():
             self.timer.Stop()
             self.evtloop.Exit()
@@ -75,17 +123,26 @@
 @ignore_keyboardinterrupts
 def inputhook_wx2(context):
     """Run the wx event loop, polling for stdin.
-
+    
     This version runs the wx eventloop for an undetermined amount of time,
     during which it periodically checks to see if anything is ready on
     stdin.  If anything is ready on stdin, the event loop exits.
-
+    
     The argument to elr.Run controls how often the event loop looks at stdin.
     This determines the responsiveness at the keyboard.  A setting of 1000
     enables a user to type at most 1 char per second.  I have found that a
     setting of 10 gives good keyboard response.  We can shorten it further,
     but eventually performance would suffer from calling select/kbhit too
     often.
+
+    Parameters
+    ----------
+    context :
+        
+
+    Returns
+    -------
+
     """
     app = wx.GetApp()
     if app is not None:
@@ -101,11 +158,20 @@
 @ignore_keyboardinterrupts
 def inputhook_wx3(context):
     """Run the wx event loop by processing pending events only.
-
+    
     This is like inputhook_wx1, but it keeps processing pending events
     until stdin is ready.  After processing all pending events, a call to
     time.sleep is inserted.  This is needed, otherwise, CPU usage is at 100%.
     This sleep time should be tuned though for best performance.
+
+    Parameters
+    ----------
+    context :
+        
+
+    Returns
+    -------
+
     """
     app = wx.GetApp()
     if app is not None:
@@ -153,13 +219,22 @@
 @ignore_keyboardinterrupts
 def inputhook_wxphoenix(context):
     """Run the wx event loop until the user provides more input.
-
+    
     This input hook is suitable for use with wxPython >= 4 (a.k.a. Phoenix).
-
+    
     It uses the same approach to that used in
     ipykernel.eventloops.loop_wx. The wx.MainLoop is executed, and a wx.Timer
     is used to periodically poll the context for input. As soon as input is
     ready, the wx.MainLoop is stopped.
+
+    Parameters
+    ----------
+    context :
+        
+
+    Returns
+    -------
+
     """
 
     app = wx.GetApp()
@@ -180,6 +255,17 @@
     timer = wx.Timer()
 
     def poll(ev):
+        """
+
+        Parameters
+        ----------
+        ev :
+            
+
+        Returns
+        -------
+
+        """
         if context.input_is_ready():
             timer.Stop()
             app.ExitMainLoop()
