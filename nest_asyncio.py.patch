# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/nest_asyncio.py
+++ b/..//venv/lib/python3.8/site-packages/nest_asyncio.py
@@ -7,7 +7,17 @@
 
 
 def apply(loop=None):
-    """Patch asyncio to make its event loop reentrent."""
+    """Patch asyncio to make its event loop reentrent.
+
+    Parameters
+    ----------
+    loop :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     loop = loop or asyncio.get_event_loop()
     if not isinstance(loop, asyncio.BaseEventLoop):
         raise ValueError('Can\'t patch loop of type %s' % type(loop))
@@ -22,11 +32,32 @@
 
 
 def _patch_asyncio():
-    """
-    Patch asyncio module to use pure Python tasks and futures,
+    """Patch asyncio module to use pure Python tasks and futures,
     use module level _current_tasks, all_tasks and patch run method.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     def run(future, *, debug=False):
+        """
+
+        Parameters
+        ----------
+        future :
+            
+        * :
+            
+        debug :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         loop = asyncio.get_event_loop()
         loop.set_debug(debug)
         return loop.run_until_complete(future)
@@ -45,9 +76,20 @@
 
 
 def _patch_loop(loop):
-    """Patch loop to make it reentrent."""
+    """Patch loop to make it reentrent.
+
+    Parameters
+    ----------
+    loop :
+        
+
+    Returns
+    -------
+
+    """
 
     def run_forever(self):
+        """ """
         if sys.version_info >= (3, 7, 0):
             set_coro_tracking = self._set_coroutine_origin_tracking
         else:
@@ -79,6 +121,17 @@
                 sys.set_asyncgen_hooks(*old_agen_hooks)
 
     def run_until_complete(self, future):
+        """
+
+        Parameters
+        ----------
+        future :
+            
+
+        Returns
+        -------
+
+        """
         old_thread_id = self._thread_id
         old_running_loop = events._get_running_loop()
         try:
@@ -101,9 +154,15 @@
             events._set_running_loop(old_running_loop)
 
     def _run_once(self):
-        """
-        Simplified re-implementation of asyncio's _run_once that
+        """Simplified re-implementation of asyncio's _run_once that
         runs handles as they become ready.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         now = self.time()
         ready = self._ready
@@ -154,6 +213,19 @@
     """Patch the Task's step and enter/leave methods to make it reentrant."""
 
     def step(task, exc=None):
+        """
+
+        Parameters
+        ----------
+        task :
+            
+        exc :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         curr_task = curr_tasks.get(task._loop)
         try:
             step_orig(task, exc)
@@ -167,9 +239,35 @@
     if sys.version_info >= (3, 7, 0):
 
         def enter_task(loop, task):
+            """
+
+            Parameters
+            ----------
+            loop :
+                
+            task :
+                
+
+            Returns
+            -------
+
+            """
             curr_tasks[loop] = task
 
         def leave_task(loop, task):
+            """
+
+            Parameters
+            ----------
+            loop :
+                
+            task :
+                
+
+            Returns
+            -------
+
+            """
             curr_tasks.pop(loop, None)
 
         asyncio.tasks._enter_task = enter_task
@@ -187,14 +285,30 @@
     """Patch Handle to allow recursive calls."""
 
     def update_from_context(ctx):
-        """Copy context ctx to currently active context."""
+        """Copy context ctx to currently active context.
+
+        Parameters
+        ----------
+        ctx :
+            
+
+        Returns
+        -------
+
+        """
         for var in ctx:
             var.set(ctx[var])
 
     def run(self):
-        """
-        Run the callback in a sub-context, then copy any sub-context vars
+        """Run the callback in a sub-context, then copy any sub-context vars
         over to the Handle's context.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         try:
             ctx = self._context.copy()
@@ -223,10 +337,16 @@
 
 
 def _patch_tornado():
-        """
-        If tornado is imported before nest_asyncio, make tornado aware of
+    """If tornado is imported before nest_asyncio, make tornado aware of
         the pure-Python asyncio Future.
-        """
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
         if 'tornado' in sys.modules:
             import tornado.concurrent as tc
             tc.Future = asyncio.Future
