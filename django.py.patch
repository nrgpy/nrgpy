# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jedi/plugins/django.py
+++ b/..//venv/lib/python3.8/site-packages/jedi/plugins/django.py
@@ -42,12 +42,40 @@
 
 @inference_state_function_cache()
 def _get_deferred_attributes(inference_state):
+    """
+
+    Parameters
+    ----------
+    inference_state :
+        
+
+    Returns
+    -------
+
+    """
     return inference_state.import_module(
         ('django', 'db', 'models', 'query_utils')
     ).py__getattribute__('DeferredAttribute').execute_annotation()
 
 
 def _infer_scalar_field(inference_state, field_name, field_tree_instance, is_instance):
+    """
+
+    Parameters
+    ----------
+    inference_state :
+        
+    field_name :
+        
+    field_tree_instance :
+        
+    is_instance :
+        
+
+    Returns
+    -------
+
+    """
     try:
         module_name, attribute_name = mapping[field_tree_instance.py__name__()]
     except KeyError:
@@ -67,6 +95,17 @@
 
 @iterator_to_value_set
 def _get_foreign_key_values(cls, field_tree_instance):
+    """
+
+    Parameters
+    ----------
+    field_tree_instance :
+        
+
+    Returns
+    -------
+
+    """
     if isinstance(field_tree_instance, TreeInstance):
         # TODO private access..
         argument_iterator = field_tree_instance._arguments.unpack()
@@ -84,6 +123,19 @@
 
 
 def _infer_field(cls, field_name, is_instance):
+    """
+
+    Parameters
+    ----------
+    field_name :
+        
+    is_instance :
+        
+
+    Returns
+    -------
+
+    """
     inference_state = cls.inference_state
     result = field_name.infer()
     for field_tree_instance in result:
@@ -112,16 +164,29 @@
 
 
 class DjangoModelName(NameWrapper):
+    """ """
     def __init__(self, cls, name, is_instance):
         super(DjangoModelName, self).__init__(name)
         self._cls = cls
         self._is_instance = is_instance
 
     def infer(self):
+        """ """
         return _infer_field(self._cls, self._wrapped_name, self._is_instance)
 
 
 def _create_manager_for(cls, manager_cls='BaseManager'):
+    """
+
+    Parameters
+    ----------
+    manager_cls :
+         (Default value = 'BaseManager')
+
+    Returns
+    -------
+
+    """
     managers = cls.inference_state.import_module(
         ('django', 'db', 'models', 'manager')
     ).py__getattribute__(manager_cls)
@@ -134,6 +199,17 @@
 
 
 def _new_dict_filter(cls, is_instance):
+    """
+
+    Parameters
+    ----------
+    is_instance :
+        
+
+    Returns
+    -------
+
+    """
     filters = list(cls.get_filters(
         is_instance=is_instance,
         include_metaclasses=False,
@@ -157,12 +233,47 @@
 
 
 def is_django_model_base(value):
+    """
+
+    Parameters
+    ----------
+    value :
+        
+
+    Returns
+    -------
+
+    """
     return value.py__name__() == 'ModelBase' \
         and value.get_root_context().py__name__() == 'django.db.models.base'
 
 
 def get_metaclass_filters(func):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
+    """
     def wrapper(cls, metaclasses, is_instance):
+        """
+
+        Parameters
+        ----------
+        metaclasses :
+            
+        is_instance :
+            
+
+        Returns
+        -------
+
+        """
         for metaclass in metaclasses:
             if is_django_model_base(metaclass):
                 return [_new_dict_filter(cls, is_instance)]
@@ -172,7 +283,33 @@
 
 
 def tree_name_to_values(func):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
+    """
     def wrapper(inference_state, context, tree_name):
+        """
+
+        Parameters
+        ----------
+        inference_state :
+            
+        context :
+            
+        tree_name :
+            
+
+        Returns
+        -------
+
+        """
         result = func(inference_state, context, tree_name)
         if tree_name.value in _FILTER_LIKE_METHODS:
             # Here we try to overwrite stuff like User.objects.filter. We need
@@ -200,6 +337,7 @@
 
 
 def _find_fields(cls):
+    """ """
     for name in _new_dict_filter(cls, is_instance=False).values():
         for value in name.infer():
             if value.name.get_qualified_names(include_module_names=True) \
@@ -208,11 +346,34 @@
 
 
 def _get_signatures(cls):
+    """ """
     return [DjangoModelSignature(cls, field_names=list(_find_fields(cls)))]
 
 
 def get_metaclass_signatures(func):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
+    """
     def wrapper(cls, metaclasses):
+        """
+
+        Parameters
+        ----------
+        metaclasses :
+            
+
+        Returns
+        -------
+
+        """
         for metaclass in metaclasses:
             if is_django_model_base(metaclass):
                 return _get_signatures(cls)
@@ -221,7 +382,21 @@
 
 
 class ManagerWrapper(ValueWrapper):
+    """ """
     def py__getitem__(self, index_value_set, contextualized_node):
+        """
+
+        Parameters
+        ----------
+        index_value_set :
+            
+        contextualized_node :
+            
+
+        Returns
+        -------
+
+        """
         return ValueSet(
             GenericManagerWrapper(generic)
             for generic in self._wrapped_value.py__getitem__(
@@ -230,17 +405,58 @@
 
 
 class GenericManagerWrapper(AttributeOverwrite, ClassMixin):
+    """ """
     def py__get__on_class(self, calling_instance, instance, class_value):
+        """
+
+        Parameters
+        ----------
+        calling_instance :
+            
+        instance :
+            
+        class_value :
+            
+
+        Returns
+        -------
+
+        """
         return calling_instance.class_value.with_generics(
             (ValueSet({class_value}),)
         ).py__call__(calling_instance._arguments)
 
     def with_generics(self, generics_tuple):
+        """
+
+        Parameters
+        ----------
+        generics_tuple :
+            
+
+        Returns
+        -------
+
+        """
         return self._wrapped_value.with_generics(generics_tuple)
 
 
 class FieldWrapper(ValueWrapper):
+    """ """
     def py__getitem__(self, index_value_set, contextualized_node):
+        """
+
+        Parameters
+        ----------
+        index_value_set :
+            
+        contextualized_node :
+            
+
+        Returns
+        -------
+
+        """
         return ValueSet(
             GenericFieldWrapper(generic)
             for generic in self._wrapped_value.py__getitem__(
@@ -249,47 +465,94 @@
 
 
 class GenericFieldWrapper(AttributeOverwrite, ClassMixin):
+    """ """
     def py__get__on_class(self, calling_instance, instance, class_value):
+        """
+
+        Parameters
+        ----------
+        calling_instance :
+            
+        instance :
+            
+        class_value :
+            
+
+        Returns
+        -------
+
+        """
         # This is mostly an optimization to avoid Jedi aborting inference,
         # because of too many function executions of Field.__get__.
         return ValueSet({calling_instance})
 
 
 class DjangoModelSignature(AbstractSignature):
+    """ """
     def __init__(self, value, field_names):
         super(DjangoModelSignature, self).__init__(value)
         self._field_names = field_names
 
     def get_param_names(self, resolve_stars=False):
+        """
+
+        Parameters
+        ----------
+        resolve_stars :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         return [DjangoParamName(name) for name in self._field_names]
 
 
 class DjangoParamName(BaseTreeParamName):
+    """ """
     def __init__(self, field_name):
         super(DjangoParamName, self).__init__(field_name.parent_context, field_name.tree_name)
         self._field_name = field_name
 
     def get_kind(self):
+        """ """
         return Parameter.KEYWORD_ONLY
 
     def infer(self):
+        """ """
         return self._field_name.infer()
 
 
 class QuerySetMethodWrapper(ValueWrapper):
+    """ """
     def __init__(self, method, model_cls):
         super(QuerySetMethodWrapper, self).__init__(method)
         self._model_cls = model_cls
 
     def py__get__(self, instance, class_value):
+        """
+
+        Parameters
+        ----------
+        instance :
+            
+        class_value :
+            
+
+        Returns
+        -------
+
+        """
         return ValueSet({QuerySetBoundMethodWrapper(v, self._model_cls)
                          for v in self._wrapped_value.py__get__(instance, class_value)})
 
 
 class QuerySetBoundMethodWrapper(ValueWrapper):
+    """ """
     def __init__(self, method, model_cls):
         super(QuerySetBoundMethodWrapper, self).__init__(method)
         self._model_cls = model_cls
 
     def get_signatures(self):
+        """ """
         return _get_signatures(self._model_cls)
