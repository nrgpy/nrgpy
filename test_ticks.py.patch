# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/tseries/offsets/test_ticks.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/tseries/offsets/test_ticks.py
@@ -27,12 +27,14 @@
 
 
 def test_apply_ticks():
+    """ """
     result = offsets.Hour(3).apply(offsets.Hour(4))
     exp = offsets.Hour(7)
     assert result == exp
 
 
 def test_delta_to_tick():
+    """ """
     delta = timedelta(3)
 
     tick = delta_to_tick(delta)
@@ -50,6 +52,19 @@
 @example(n=1000, m=5)
 @given(n=st.integers(-999, 999), m=st.integers(-999, 999))
 def test_tick_add_sub(cls, n, m):
+    """
+
+    Parameters
+    ----------
+    n :
+        
+    m :
+        
+
+    Returns
+    -------
+
+    """
     # For all Tick subclasses and all integers n, m, we should have
     # tick(n) + tick(m) == tick(n+m)
     # tick(n) - tick(m) == tick(n-m)
@@ -69,6 +84,19 @@
 @example(n=2, m=3)
 @given(n=st.integers(-999, 999), m=st.integers(-999, 999))
 def test_tick_equality(cls, n, m):
+    """
+
+    Parameters
+    ----------
+    n :
+        
+    m :
+        
+
+    Returns
+    -------
+
+    """
     assume(m != n)
     # tick == tock iff tick.n == tock.n
     left = cls(n)
@@ -88,6 +116,7 @@
 
 
 def test_Hour():
+    """ """
     assert_offset_equal(Hour(), datetime(2010, 1, 1), datetime(2010, 1, 1, 1))
     assert_offset_equal(Hour(-1), datetime(2010, 1, 1, 1), datetime(2010, 1, 1))
     assert_offset_equal(2 * Hour(), datetime(2010, 1, 1), datetime(2010, 1, 1, 2))
@@ -100,6 +129,7 @@
 
 
 def test_Minute():
+    """ """
     assert_offset_equal(Minute(), datetime(2010, 1, 1), datetime(2010, 1, 1, 0, 1))
     assert_offset_equal(Minute(-1), datetime(2010, 1, 1, 0, 1), datetime(2010, 1, 1))
     assert_offset_equal(2 * Minute(), datetime(2010, 1, 1), datetime(2010, 1, 1, 0, 2))
@@ -111,6 +141,7 @@
 
 
 def test_Second():
+    """ """
     assert_offset_equal(Second(), datetime(2010, 1, 1), datetime(2010, 1, 1, 0, 0, 1))
     assert_offset_equal(Second(-1), datetime(2010, 1, 1, 0, 0, 1), datetime(2010, 1, 1))
     assert_offset_equal(
@@ -125,6 +156,7 @@
 
 
 def test_Millisecond():
+    """ """
     assert_offset_equal(
         Milli(), datetime(2010, 1, 1), datetime(2010, 1, 1, 0, 0, 0, 1000)
     )
@@ -146,6 +178,7 @@
 
 
 def test_MillisecondTimestampArithmetic():
+    """ """
     assert_offset_equal(
         Milli(), Timestamp("2010-01-01"), Timestamp("2010-01-01 00:00:00.001")
     )
@@ -155,6 +188,7 @@
 
 
 def test_Microsecond():
+    """ """
     assert_offset_equal(Micro(), datetime(2010, 1, 1), datetime(2010, 1, 1, 0, 0, 0, 1))
     assert_offset_equal(
         Micro(-1), datetime(2010, 1, 1, 0, 0, 0, 1), datetime(2010, 1, 1)
@@ -172,6 +206,7 @@
 
 
 def test_NanosecondGeneric():
+    """ """
     timestamp = Timestamp(datetime(2010, 1, 1))
     assert timestamp.nanosecond == 0
 
@@ -183,6 +218,7 @@
 
 
 def test_Nanosecond():
+    """ """
     timestamp = Timestamp(datetime(2010, 1, 1))
     assert_offset_equal(Nano(), timestamp, timestamp + np.timedelta64(1, "ns"))
     assert_offset_equal(Nano(-1), timestamp + np.timedelta64(1, "ns"), timestamp)
@@ -210,6 +246,19 @@
     ],
 )
 def test_tick_addition(kls, expected):
+    """
+
+    Parameters
+    ----------
+    kls :
+        
+    expected :
+        
+
+    Returns
+    -------
+
+    """
     offset = kls(3)
     result = offset + Timedelta(hours=2)
     assert isinstance(result, Timedelta)
@@ -218,6 +267,7 @@
 
 @pytest.mark.parametrize("cls", tick_classes)
 def test_tick_division(cls):
+    """ """
     off = cls(10)
 
     assert off / cls(5) == 2
@@ -245,6 +295,7 @@
 
 
 def test_tick_mul_float():
+    """ """
     off = Micro(2)
 
     # Case where we retain type
@@ -262,6 +313,7 @@
 
 @pytest.mark.parametrize("cls", tick_classes)
 def test_tick_rdiv(cls):
+    """ """
     off = cls(10)
     delta = off.delta
     td64 = delta.to_timedelta64()
@@ -285,6 +337,19 @@
 @pytest.mark.parametrize("cls1", tick_classes)
 @pytest.mark.parametrize("cls2", tick_classes)
 def test_tick_zero(cls1, cls2):
+    """
+
+    Parameters
+    ----------
+    cls1 :
+        
+    cls2 :
+        
+
+    Returns
+    -------
+
+    """
     assert cls1(0) == cls2(0)
     assert cls1(0) + cls2(0) == cls1(0)
 
@@ -297,16 +362,19 @@
 
 @pytest.mark.parametrize("cls", tick_classes)
 def test_tick_equalities(cls):
+    """ """
     assert cls() == cls(1)
 
 
 @pytest.mark.parametrize("cls", tick_classes)
 def test_tick_offset(cls):
+    """ """
     assert not cls().is_anchored()
 
 
 @pytest.mark.parametrize("cls", tick_classes)
 def test_compare_ticks(cls):
+    """ """
     three = cls(3)
     four = cls(4)
 
@@ -320,6 +388,7 @@
 
 @pytest.mark.parametrize("cls", tick_classes)
 def test_compare_ticks_to_strs(cls):
+    """ """
     # GH#23524
     off = cls(19)
 
@@ -342,6 +411,7 @@
 
 @pytest.mark.parametrize("cls", tick_classes)
 def test_compare_ticks_to_timedeltalike(cls):
+    """ """
     off = cls(19)
 
     td = off.delta
