# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test_polynomial.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test_polynomial.py
@@ -6,7 +6,9 @@
 
 
 class TestPolynomial:
+    """ """
     def test_poly1d_str_and_repr(self):
+        """ """
         p = np.poly1d([1., 2, 3])
         assert_equal(repr(p), 'poly1d([1., 2., 3.])')
         assert_equal(str(p),
@@ -29,6 +31,7 @@
                      '-3 x - 2 x - 1')
 
     def test_poly1d_resolution(self):
+        """ """
         p = np.poly1d([1., 2, 3])
         q = np.poly1d([3., 2, 1])
         assert_equal(p(0), 3.0)
@@ -37,6 +40,7 @@
         assert_equal(q(5), 86.0)
 
     def test_poly1d_math(self):
+        """ """
         # here we use some simple coeffs to make calculations easier
         p = np.poly1d([1., 2, 4])
         q = np.poly1d([4., 2, 1])
@@ -58,12 +62,14 @@
                      (np.poly1d([1., -1.]), np.poly1d([0.])))
 
     def test_poly1d_misc(self):
+        """ """
         p = np.poly1d([1., 2, 3])
         assert_equal(np.asarray(p), np.array([1., 2., 3.]))
         assert_equal(len(p), 2)
         assert_equal((p[0], p[1], p[2], p[3]), (3.0, 2.0, 1.0, 0))
 
     def test_poly1d_variable_arg(self):
+        """ """
         q = np.poly1d([1., 2, 3], variable='y')
         assert_equal(str(q),
                      '   2\n'
@@ -74,6 +80,7 @@
                      '1 lambda + 2 lambda + 3')
 
     def test_poly(self):
+        """ """
         assert_array_almost_equal(np.poly([3, -np.sqrt(2), np.sqrt(2)]),
                                   [1, -3, -2, 6])
 
@@ -98,9 +105,11 @@
         assert_(np.isrealobj(np.poly(np.concatenate((a, np.conjugate(a))))))
 
     def test_roots(self):
+        """ """
         assert_array_equal(np.roots([1, 0, 0]), [0, 0])
 
     def test_str_leading_zeros(self):
+        """ """
         p = np.poly1d([4, 3, 2, 1])
         p[3] = 0
         assert_equal(str(p),
@@ -113,6 +122,7 @@
         assert_equal(str(p), " \n0")
 
     def test_polyfit(self):
+        """ """
         c = np.array([3., 2., 1.])
         x = np.linspace(0, 2, 7)
         y = np.polyval(c, x)
@@ -187,6 +197,7 @@
         assert_almost_equal(np.sqrt(cov.mean()), 0.25)
 
     def test_objects(self):
+        """ """
         from decimal import Decimal
         p = np.poly1d([Decimal('4.0'), Decimal('3.0'), Decimal('2.0')])
         p2 = p * Decimal('1.333333333333333')
@@ -202,6 +213,7 @@
                      [1, Decimal(-3), Decimal(2)])
 
     def test_complex(self):
+        """ """
         p = np.poly1d([3j, 2j, 1j])
         p2 = p.integ()
         assert_((p2.coeffs == [1j, 1j, 1j, 0]).all())
@@ -209,25 +221,26 @@
         assert_((p2.coeffs == [6j, 2j]).all())
 
     def test_integ_coeffs(self):
+        """ """
         p = np.poly1d([3, 2, 1])
         p2 = p.integ(3, k=[9, 7, 6])
         assert_(
             (p2.coeffs == [1/4./5., 1/3./4., 1/2./3., 9/1./2., 7, 6]).all())
 
     def test_zero_dims(self):
+        """ """
         try:
             np.poly(np.zeros((0, 0)))
         except ValueError:
             pass
 
     def test_poly_int_overflow(self):
-        """
-        Regression test for gh-5096.
-        """
+        """Regression test for gh-5096."""
         v = np.arange(1, 21)
         assert_almost_equal(np.poly(v), np.poly(np.diag(v)))
 
     def test_poly_eq(self):
+        """ """
         p = np.poly1d([1, 2, 3])
         p2 = np.poly1d([1, 2, 4])
         assert_equal(p == None, False)
@@ -237,6 +250,7 @@
         assert_equal(p != p2, True)
 
     def test_polydiv(self):
+        """ """
         b = np.poly1d([2, 6, 6, 1])
         a = np.poly1d([-1j, (1+2j), -(2+1j), 1])
         q, r = np.polydiv(b, a)
@@ -245,7 +259,7 @@
         assert_equal(q*a + r, b)
 
     def test_poly_coeffs_mutable(self):
-        """ Coefficients should be modifiable """
+        """Coefficients should be modifiable"""
         p = np.poly1d([1, 2, 3])
 
         p.coeffs += 1
