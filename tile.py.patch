# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/reshape/tile.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/reshape/tile.py
@@ -40,9 +40,8 @@
     duplicates: str = "raise",
     ordered: bool = True,
 ):
-    """
-    Bin values into discrete intervals.
-
+    """Bin values into discrete intervals.
+    
     Use `cut` when you need to segment and sort data values into bins. This
     function is also useful for going from a continuous variable to a
     categorical variable. For example, `cut` could convert ages to groups of
@@ -55,15 +54,13 @@
         The input array to be binned. Must be 1-dimensional.
     bins : int, sequence of scalars, or IntervalIndex
         The criteria to bin by.
-
         * int : Defines the number of equal-width bins in the range of `x`. The
-          range of `x` is extended by .1% on each side to include the minimum
-          and maximum values of `x`.
+        range of `x` is extended by .1% on each side to include the minimum
+        and maximum values of `x`.
         * sequence of scalars : Defines the bin edges allowing for non-uniform
-          width. No extension of the range of `x` is done.
+        width. No extension of the range of `x` is done.
         * IntervalIndex : Defines the exact bins to be used. Note that
-          IntervalIndex for `bins` must be non-overlapping.
-
+        IntervalIndex for `bins` must be non-overlapping.
     right : bool, default True
         Indicates whether `bins` includes the rightmost edge or not. If
         ``right == True`` (the default), then the `bins` ``[1, 2, 3, 4]``
@@ -74,7 +71,7 @@
         the resulting bins. If False, returns only integer indicators of the
         bins. This affects the type of the output container (see below).
         This argument is ignored when `bins` is an IntervalIndex. If True,
-        raises an error. When `ordered=False`, labels must be provided.
+        raises an error. When `ordered=False`, labels must be provided. (Default value = None)
     retbins : bool, default False
         Whether to return the bins or not. Useful when bins is provided
         as a scalar.
@@ -84,32 +81,38 @@
         Whether the first interval should be left-inclusive or not.
     duplicates : {default 'raise', 'drop'}, optional
         If bin edges are not unique, raise ValueError or drop non-uniques.
-
         .. versionadded:: 0.23.0
     ordered : bool, default True
         Whether the labels are ordered or not. Applies to returned types
         Categorical and Series (with Categorical dtype). If True,
         the resulting categorical will be ordered. If False, the resulting
         categorical will be unordered (labels must be provided).
-
         .. versionadded:: 1.1.0
+    right: bool :
+         (Default value = True)
+    retbins: bool :
+         (Default value = False)
+    precision: int :
+         (Default value = 3)
+    include_lowest: bool :
+         (Default value = False)
+    duplicates: str :
+         (Default value = "raise")
+    ordered: bool :
+         (Default value = True)
 
     Returns
     -------
     out : Categorical, Series, or ndarray
         An array-like object representing the respective bin for each value
         of `x`. The type depends on the value of `labels`.
-
         * True (default) : returns a Series for Series `x` or a
-          Categorical for all other inputs. The values stored within
-          are Interval dtype.
-
+        Categorical for all other inputs. The values stored within
+        are Interval dtype.
         * sequence of scalars : returns a Series for Series `x` or a
-          Categorical for all other inputs. The values stored within
-          are whatever the type in the sequence is.
-
+        Categorical for all other inputs. The values stored within
+        are whatever the type in the sequence is.
         * False : returns an ndarray of integers.
-
     bins : numpy.ndarray or IntervalIndex.
         The computed or specified bins. Only returned when `retbins=True`.
         For scalar or sequence `bins`, this is an ndarray with the computed
@@ -124,50 +127,65 @@
         fixed set of values.
     Series : One-dimensional array with axis labels (including time series).
     IntervalIndex : Immutable Index implementing an ordered, sliceable set.
-
     Notes
     -----
     Any NA values will be NA in the result. Out of bounds values will be NA in
     the resulting Series or Categorical object.
-
     Examples
     --------
     Discretize into three equal-sized bins.
-
+    
+    
+    
+    Discovers the same bins, but assign them specific labels. Notice that
+    the returned Categorical's categories are `labels` and is ordered.
+    
+    
+    ``ordered=False`` will result in unordered categories when labels are passed.
+    This parameter can be used to allow non-unique labels:
+    
+    
+    ``labels=False`` implies you just want the bins back.
+    
+    
+    Passing a Series as an input returns a Series with categorical dtype:
+    
+    
+    Passing a Series as an input returns a Series with mapping value.
+    It is used to map numerically to intervals based on bins.
+    
+    
+    Use `drop` optional when bins is not unique
+    
+    
+    Passing an IntervalIndex for `bins` results in those categories exactly.
+    Notice that values not covered by the IntervalIndex are set to NaN. 0
+    is to the left of the first bin (which is closed on the right), and 1.5
+    falls between two bins.
     >>> pd.cut(np.array([1, 7, 5, 4, 6, 3]), 3)
     ... # doctest: +ELLIPSIS
     [(0.994, 3.0], (5.0, 7.0], (3.0, 5.0], (3.0, 5.0], (5.0, 7.0], ...
     Categories (3, interval[float64]): [(0.994, 3.0] < (3.0, 5.0] ...
-
+    
     >>> pd.cut(np.array([1, 7, 5, 4, 6, 3]), 3, retbins=True)
     ... # doctest: +ELLIPSIS
     ([(0.994, 3.0], (5.0, 7.0], (3.0, 5.0], (3.0, 5.0], (5.0, 7.0], ...
     Categories (3, interval[float64]): [(0.994, 3.0] < (3.0, 5.0] ...
     array([0.994, 3.   , 5.   , 7.   ]))
-
-    Discovers the same bins, but assign them specific labels. Notice that
-    the returned Categorical's categories are `labels` and is ordered.
-
+    
     >>> pd.cut(np.array([1, 7, 5, 4, 6, 3]),
     ...        3, labels=["bad", "medium", "good"])
     ['bad', 'good', 'medium', 'medium', 'good', 'bad']
     Categories (3, object): ['bad' < 'medium' < 'good']
-
-    ``ordered=False`` will result in unordered categories when labels are passed.
-    This parameter can be used to allow non-unique labels:
-
+    
     >>> pd.cut(np.array([1, 7, 5, 4, 6, 3]), 3,
     ...        labels=["B", "A", "B"], ordered=False)
     ['B', 'B', 'A', 'A', 'B', 'B']
     Categories (2, object): ['A', 'B']
-
-    ``labels=False`` implies you just want the bins back.
-
+    
     >>> pd.cut([0, 1, 1, 2], bins=4, labels=False)
     array([0, 1, 1, 3])
-
-    Passing a Series as an input returns a Series with categorical dtype:
-
+    
     >>> s = pd.Series(np.array([2, 4, 6, 8, 10]),
     ...               index=['a', 'b', 'c', 'd', 'e'])
     >>> pd.cut(s, 3)
@@ -179,10 +197,7 @@
     e     (7.333, 10.0]
     dtype: category
     Categories (3, interval[float64]): [(1.992, 4.667] < (4.667, ...
-
-    Passing a Series as an input returns a Series with mapping value.
-    It is used to map numerically to intervals based on bins.
-
+    
     >>> s = pd.Series(np.array([2, 4, 6, 8, 10]),
     ...               index=['a', 'b', 'c', 'd', 'e'])
     >>> pd.cut(s, [0, 2, 4, 6, 8, 10], labels=False, retbins=True, right=False)
@@ -194,9 +209,7 @@
      e    NaN
      dtype: float64,
      array([ 0,  2,  4,  6,  8, 10]))
-
-    Use `drop` optional when bins is not unique
-
+    
     >>> pd.cut(s, [0, 2, 4, 6, 10, 10], labels=False, retbins=True,
     ...        right=False, duplicates='drop')
     ... # doctest: +ELLIPSIS
@@ -207,12 +220,7 @@
      e    NaN
      dtype: float64,
      array([ 0,  2,  4,  6, 10]))
-
-    Passing an IntervalIndex for `bins` results in those categories exactly.
-    Notice that values not covered by the IntervalIndex are set to NaN. 0
-    is to the left of the first bin (which is closed on the right), and 1.5
-    falls between two bins.
-
+    
     >>> bins = pd.IntervalIndex.from_tuples([(0, 1), (2, 3), (4, 5)])
     >>> pd.cut([0, 0.5, 1.5, 2.5, 4.5], bins)
     [NaN, (0.0, 1.0], NaN, (2.0, 3.0], (4.0, 5.0]]
@@ -295,9 +303,8 @@
     precision: int = 3,
     duplicates: str = "raise",
 ):
-    """
-    Quantile-based discretization function.
-
+    """Quantile-based discretization function.
+    
     Discretize variable into equal-sized buckets based on rank or based
     on sample quantiles. For example 1000 values for 10 quantiles would
     produce a Categorical object indicating quantile membership for each data point.
@@ -305,13 +312,14 @@
     Parameters
     ----------
     x : 1d ndarray or Series
+        
     q : int or list-like of float
         Number of quantiles. 10 for deciles, 4 for quartiles, etc. Alternately
         array of quantiles, e.g. [0, .25, .5, .75, 1.] for quartiles.
     labels : array or False, default None
         Used as labels for the resulting bins. Must be of the same length as
         the resulting bins. If False, return only integer indicators of the
-        bins. If True, raises an error.
+        bins. If True, raises an error. (Default value = None)
     retbins : bool, optional
         Whether to return the (bins, labels) or not. Can be useful if bins
         is given as a scalar.
@@ -319,6 +327,12 @@
         The precision at which to store and display the bins labels.
     duplicates : {default 'raise', 'drop'}, optional
         If bin edges are not unique, raise ValueError or drop non-uniques.
+    retbins: bool :
+         (Default value = False)
+    precision: int :
+         (Default value = 3)
+    duplicates: str :
+         (Default value = "raise")
 
     Returns
     -------
@@ -332,19 +346,18 @@
     Notes
     -----
     Out of bounds values will be NA in the resulting Categorical object
-
     Examples
     --------
     >>> pd.qcut(range(5), 4)
     ... # doctest: +ELLIPSIS
     [(-0.001, 1.0], (-0.001, 1.0], (1.0, 2.0], (2.0, 3.0], (3.0, 4.0]]
     Categories (4, interval[float64]): [(-0.001, 1.0] < (1.0, 2.0] ...
-
+    
     >>> pd.qcut(range(5), 3, labels=["good", "medium", "bad"])
     ... # doctest: +SKIP
     [good, good, medium, bad, bad]
     Categories (3, object): [good < medium < bad]
-
+    
     >>> pd.qcut(range(5), 4, labels=False)
     array([0, 0, 1, 2, 3])
     """
@@ -381,6 +394,33 @@
     duplicates: str = "raise",
     ordered: bool = True,
 ):
+    """
+
+    Parameters
+    ----------
+    x :
+        
+    bins :
+        
+    right: bool :
+         (Default value = True)
+    labels :
+         (Default value = None)
+    precision: int :
+         (Default value = 3)
+    include_lowest: bool :
+         (Default value = False)
+    dtype :
+         (Default value = None)
+    duplicates: str :
+         (Default value = "raise")
+    ordered: bool :
+         (Default value = True)
+
+    Returns
+    -------
+
+    """
     if not ordered and labels is None:
         raise ValueError("'labels' must be provided if 'ordered = False'")
 
@@ -454,10 +494,18 @@
 
 
 def _coerce_to_type(x):
-    """
-    if the passed data is of datetime/timedelta, bool or nullable int type,
+    """if the passed data is of datetime/timedelta, bool or nullable int type,
     this method converts it to numeric so that cut or qcut method can
     handle it
+
+    Parameters
+    ----------
+    x :
+        
+
+    Returns
+    -------
+
     """
     dtype = None
 
@@ -487,18 +535,20 @@
 
 
 def _convert_bin_to_numeric_type(bins, dtype):
-    """
-    if the passed bin is of datetime/timedelta type,
+    """if the passed bin is of datetime/timedelta type,
     this method converts it to integer
 
     Parameters
     ----------
     bins : list-like of bins
+        
     dtype : dtype of data
-
-    Raises
-    ------
-    ValueError if bins are not of a compat dtype to dtype
+        
+
+    Returns
+    -------
+
+    
     """
     bins_dtype = infer_dtype(bins, skipna=False)
     if is_timedelta64_dtype(dtype):
@@ -516,19 +566,20 @@
 
 
 def _convert_bin_to_datelike_type(bins, dtype):
-    """
-    Convert bins to a DatetimeIndex or TimedeltaIndex if the original dtype is
+    """Convert bins to a DatetimeIndex or TimedeltaIndex if the original dtype is
     datelike
 
     Parameters
     ----------
     bins : list-like of bins
+        
     dtype : dtype of data
-
-    Returns
-    -------
-    bins : Array-like of bins, DatetimeIndex or TimedeltaIndex if dtype is
-           datelike
+        
+
+    Returns
+    -------
+
+    
     """
     if is_datetime64tz_dtype(dtype):
         bins = to_datetime(bins.astype(np.int64), utc=True).tz_convert(dtype.tz)
@@ -540,7 +591,25 @@
 def _format_labels(
     bins, precision: int, right: bool = True, include_lowest: bool = False, dtype=None
 ):
-    """ based on the dtype, return our labels """
+    """based on the dtype, return our labels
+
+    Parameters
+    ----------
+    bins :
+        
+    precision: int :
+        
+    right: bool :
+         (Default value = True)
+    include_lowest: bool :
+         (Default value = False)
+    dtype :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     closed = "right" if right else "left"
 
     if is_datetime64tz_dtype(dtype):
@@ -566,10 +635,18 @@
 
 
 def _preprocess_for_cut(x):
-    """
-    handles preprocessing for cut where we convert passed
+    """handles preprocessing for cut where we convert passed
     input to array, strip the index information and store it
     separately
+
+    Parameters
+    ----------
+    x :
+        
+
+    Returns
+    -------
+
     """
     # Check that the passed array is a Pandas or Numpy object
     # We don't want to strip away a Pandas data-type here (e.g. datetimetz)
@@ -583,10 +660,26 @@
 
 
 def _postprocess_for_cut(fac, bins, retbins: bool, dtype, original):
-    """
-    handles post processing for the cut method where
+    """handles post processing for the cut method where
     we combine the index information if the originally passed
     datatype was a series
+
+    Parameters
+    ----------
+    fac :
+        
+    bins :
+        
+    retbins: bool :
+        
+    dtype :
+        
+    original :
+        
+
+    Returns
+    -------
+
     """
     if isinstance(original, ABCSeries):
         fac = original._constructor(fac, index=original.index, name=original.name)
@@ -600,8 +693,18 @@
 
 
 def _round_frac(x, precision: int):
-    """
-    Round the fractional part of the given number
+    """Round the fractional part of the given number
+
+    Parameters
+    ----------
+    x :
+        
+    precision: int :
+        
+
+    Returns
+    -------
+
     """
     if not np.isfinite(x) or x == 0:
         return x
@@ -615,8 +718,18 @@
 
 
 def _infer_precision(base_precision: int, bins) -> int:
-    """
-    Infer an appropriate precision for _round_frac
+    """Infer an appropriate precision for _round_frac
+
+    Parameters
+    ----------
+    base_precision: int :
+        
+    bins :
+        
+
+    Returns
+    -------
+
     """
     for precision in range(base_precision, 20):
         levels = [_round_frac(b, precision) for b in bins]
