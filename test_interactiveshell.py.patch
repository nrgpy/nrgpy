# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/tests/test_interactiveshell.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/tests/test_interactiveshell.py
@@ -42,9 +42,11 @@
 #-----------------------------------------------------------------------------
 
 class DerivedInterrupt(KeyboardInterrupt):
+    """ """
     pass
 
 class InteractiveShellTestCase(unittest.TestCase):
+    """ """
     def test_naked_string_cells(self):
         """Test that cells with only naked strings are fully executed"""
         # First, single-line inputs
@@ -56,15 +58,22 @@
 
     def test_run_empty_cell(self):
         """Just make sure we don't get a horrible error with a blank
-        cell of input. Yes, I did overlook that."""
+        cell of input. Yes, I did overlook that.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         old_xc = ip.execution_count
         res = ip.run_cell('')
         self.assertEqual(ip.execution_count, old_xc)
         self.assertEqual(res.execution_count, None)
 
     def test_run_cell_multiline(self):
-        """Multi-block, multi-line cells must execute correctly.
-        """
+        """Multi-block, multi-line cells must execute correctly."""
         src = '\n'.join(["x=1",
                          "y=2",
                          "if 1:",
@@ -77,6 +86,7 @@
         self.assertEqual(res.result, None)
 
     def test_multiline_string_cells(self):
+        """ """
         "Code sprinkled with multiline strings should execute (GH-306)"
         ip.run_cell('tmp=0')
         self.assertEqual(ip.user_ns['tmp'], 0)
@@ -86,6 +96,7 @@
         self.assertEqual(res.result, "a\nb")
 
     def test_dont_cache_with_semicolon(self):
+        """ """
         "Ending a line with semicolon should not cache the returned object (GH-307)"
         oldlen = len(ip.user_ns['Out'])
         for cell in ['1;', '1;1;']:
@@ -102,10 +113,12 @@
             self.assertEqual(oldlen+i, newlen)
 
     def test_syntax_error(self):
+        """ """
         res = ip.run_cell("raise = 3")
         self.assertIsInstance(res.error_before_exec, SyntaxError)
 
     def test_In_variable(self):
+        """ """
         "Verify that In variable grows with user input (GH-284)"
         oldlen = len(ip.user_ns['In'])
         ip.run_cell('1;', store_history=True)
@@ -114,7 +127,7 @@
         self.assertEqual(ip.user_ns['In'][-1],'1;')
         
     def test_magic_names_in_string(self):
-        ip.run_cell('a = """\n%exit\n"""')
+        """ip.run_cell('a = """\n%exit\n"""')"""
         self.assertEqual(ip.user_ns['a'], '\n%exit\n')
     
     def test_trailing_newline(self):
@@ -124,8 +137,17 @@
     
     def test_gh_597(self):
         """Pretty-printing lists of objects with non-ascii reprs may cause
-        problems."""
+        problems.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         class Spam(object):
+            """ """
             def __repr__(self):
                 return "\xe9"*50
         import IPython.core.formatters
@@ -144,6 +166,7 @@
             ip.compile.reset_compiler_flags()
 
     def test_can_pickle(self):
+        """ """
         "Can we pickle objects defined interactively (GH-29)"
         ip = get_ipython()
         ip.reset()
@@ -166,6 +189,7 @@
         self.assertTrue(isinstance(res, bytes))
         
     def test_global_ns(self):
+        """ """
         "Code in functions must be able to access variables outside them."
         ip = get_ipython()
         ip.run_cell("a = 10")
@@ -191,6 +215,7 @@
         self.assertEqual(ip.custom_exceptions, ())
 
     def test_drop_by_id(self):
+        """ """
         myvars = {"a":object(), "b":object(), "c": object()}
         ip.push(myvars, interactive=False)
         for name in myvars:
@@ -205,6 +230,7 @@
         ip.reset()
 
     def test_var_expand(self):
+        """ """
         ip.user_ns['f'] = u'Ca\xf1o'
         self.assertEqual(ip.var_expand(u'echo $f'), u'echo Ca\xf1o')
         self.assertEqual(ip.var_expand(u'echo {f}'), u'echo Ca\xf1o')
@@ -239,6 +265,13 @@
         """Test variable expansion with the name 'self', which was failing.
         
         See https://github.com/ipython/ipython/issues/1878#issuecomment-7698218
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         ip.run_cell('class cTest:\n'
                     '  classvar="see me"\n'
@@ -320,6 +353,19 @@
         save_hook = trap.hook
         
         def failing_hook(*args, **kwargs):
+            """
+
+            Parameters
+            ----------
+            *args :
+                
+            **kwargs :
+                
+
+            Returns
+            -------
+
+            """
             d['called'] = True
         
         try:
@@ -335,10 +381,22 @@
             trap.hook = save_hook
 
     def test_ofind_line_magic(self):
+        """ """
         from IPython.core.magic import register_line_magic
         
         @register_line_magic
         def lmagic(line):
+            """
+
+            Parameters
+            ----------
+            line :
+                
+
+            Returns
+            -------
+
+            """
             "A line magic"
 
         # Get info on line magic
@@ -349,10 +407,24 @@
         nt.assert_equal(lfind, info)
         
     def test_ofind_cell_magic(self):
+        """ """
         from IPython.core.magic import register_cell_magic
         
         @register_cell_magic
         def cmagic(line, cell):
+            """
+
+            Parameters
+            ----------
+            line :
+                
+            cell :
+                
+
+            Returns
+            -------
+
+            """
             "A cell magic"
 
         # Get info on cell magic
@@ -363,9 +435,12 @@
         nt.assert_equal(find, info)
 
     def test_ofind_property_with_error(self):
+        """ """
         class A(object):
+            """ """
             @property
             def foo(self):
+                """ """
                 raise NotImplementedError()
         a = A()
 
@@ -375,9 +450,12 @@
         nt.assert_equal(found, info)
 
     def test_ofind_multiple_attribute_lookups(self):
+        """ """
         class A(object):
+            """ """
             @property
             def foo(self):
+                """ """
                 raise NotImplementedError()
 
         a = A()
@@ -390,7 +468,9 @@
         nt.assert_equal(found, info)
 
     def test_ofind_slotted_attributes(self):
+        """ """
         class A(object):
+            """ """
             __slots__ = ['foo']
             def __init__(self):
                 self.foo = 'bar'
@@ -407,9 +487,12 @@
         nt.assert_equal(found, info)
 
     def test_ofind_prefers_property_to_instance_level_attribute(self):
+        """ """
         class A(object):
+            """ """
             @property
             def foo(self):
+                """ """
                 return 'bar'
         a = A()
         a.__dict__['foo'] = 'baz'
@@ -418,8 +501,28 @@
         nt.assert_is(found['obj'], A.foo)
 
     def test_custom_syntaxerror_exception(self):
+        """ """
         called = []
         def my_handler(shell, etype, value, tb, tb_offset=None):
+            """
+
+            Parameters
+            ----------
+            shell :
+                
+            etype :
+                
+            value :
+                
+            tb :
+                
+            tb_offset :
+                 (Default value = None)
+
+            Returns
+            -------
+
+            """
             called.append(etype)
             shell.showtraceback((etype, value, tb), tb_offset=tb_offset)
 
@@ -433,8 +536,28 @@
             ip.set_custom_exc((), None)
 
     def test_custom_exception(self):
+        """ """
         called = []
         def my_handler(shell, etype, value, tb, tb_offset=None):
+            """
+
+            Parameters
+            ----------
+            shell :
+                
+            etype :
+                
+            value :
+                
+            tb :
+                
+            tb_offset :
+                 (Default value = None)
+
+            Returns
+            -------
+
+            """
             called.append(etype)
             shell.showtraceback((etype, value, tb), tb_offset=tb_offset)
         
@@ -450,6 +573,7 @@
             ip.set_custom_exc((), None)
     
     def test_mktempfile(self):
+        """ """
         filename = ip.mktempfile()
         # Check that we can open the file again on Windows
         with open(filename, 'w') as f:
@@ -460,12 +584,14 @@
             self.assertEqual(f.read(), 'blah')
 
     def test_new_main_mod(self):
+        """ """
         # Smoketest to check that this accepts a unicode module name
         name = u'jiefmw'
         mod = ip.new_main_mod(u'%s.py' % name, name)
         self.assertEqual(mod.__name__, name)
 
     def test_get_exception_only(self):
+        """ """
         try:
             raise KeyboardInterrupt
         except KeyboardInterrupt:
@@ -479,12 +605,13 @@
         self.assertEqual(msg, 'IPython.core.tests.test_interactiveshell.DerivedInterrupt: foo\n')
 
     def test_inspect_text(self):
+        """ """
         ip.run_cell('a = 5')
         text = ip.object_inspect_text('a')
         self.assertIsInstance(text, str)
 
     def test_last_execution_result(self):
-        """ Check that last execution result gets set correctly (GH-10702) """
+        """Check that last execution result gets set correctly (GH-10702)"""
         result = ip.run_cell('a = 5; a')
         self.assertTrue(ip.last_execution_succeeded)
         self.assertEqual(ip.last_execution_result.result, 5)
@@ -495,7 +622,7 @@
         self.assertIsInstance(ip.last_execution_result.error_in_exec, NameError)
 
     def test_reset_aliasing(self):
-        """ Check that standard posix aliases work after %reset. """
+        """Check that standard posix aliases work after %reset."""
         if os.name != 'posix':
             return
 
@@ -506,9 +633,11 @@
 
 
 class TestSafeExecfileNonAsciiPath(unittest.TestCase):
+    """ """
 
     @onlyif_unicode_paths
     def setUp(self):
+        """ """
         self.BASETESTDIR = tempfile.mkdtemp()
         self.TESTDIR = join(self.BASETESTDIR, u"åäö")
         os.mkdir(self.TESTDIR)
@@ -519,30 +648,35 @@
         self.fname = u"åäötestscript.py"
 
     def tearDown(self):
+        """ """
         os.chdir(self.oldpath)
         shutil.rmtree(self.BASETESTDIR)
 
     @onlyif_unicode_paths
     def test_1(self):
-        """Test safe_execfile with non-ascii path
-        """
+        """Test safe_execfile with non-ascii path"""
         ip.safe_execfile(self.fname, {}, raise_exceptions=True)
 
 class ExitCodeChecks(tt.TempFileMixin):
+    """ """
 
     def setUp(self):
+        """ """
         self.system = ip.system_raw
 
     def test_exit_code_ok(self):
+        """ """
         self.system('exit 0')
         self.assertEqual(ip.user_ns['_exit_code'], 0)
 
     def test_exit_code_error(self):
+        """ """
         self.system('exit 1')
         self.assertEqual(ip.user_ns['_exit_code'], 1)
     
     @skipif(not hasattr(signal, 'SIGALRM'))
     def test_exit_code_signal(self):
+        """ """
         self.mktmp("import signal, time\n"
                    "signal.setitimer(signal.ITIMER_REAL, 0.1)\n"
                    "time.sleep(1)\n")
@@ -551,6 +685,7 @@
     
     @onlyif_cmds_exist("csh")
     def test_exit_code_signal_csh(self):
+        """ """
         SHELL = os.environ.get('SHELL', None)
         os.environ['SHELL'] = find_cmd("csh")
         try:
@@ -563,21 +698,33 @@
 
 
 class TestSystemRaw(ExitCodeChecks):
+    """ """
 
     def setUp(self):
+        """ """
         super().setUp()
         self.system = ip.system_raw
 
     @onlyif_unicode_paths
     def test_1(self):
-        """Test system_raw with non-ascii cmd
-        """
+        """Test system_raw with non-ascii cmd"""
         cmd = u'''python -c "'åäö'"   '''
         ip.system_raw(cmd)
 
     @mock.patch('subprocess.call', side_effect=KeyboardInterrupt)
     @mock.patch('os.system', side_effect=KeyboardInterrupt)
     def test_control_c(self, *mocks):
+        """
+
+        Parameters
+        ----------
+        *mocks :
+            
+
+        Returns
+        -------
+
+        """
         try:
             self.system("sleep 1 # wont happen")
         except KeyboardInterrupt:
@@ -587,27 +734,32 @@
 
 # TODO: Exit codes are currently ignored on Windows.
 class TestSystemPipedExitCode(ExitCodeChecks):
+    """ """
 
     def setUp(self):
+        """ """
         super().setUp()
         self.system = ip.system_piped
 
     @skip_win32
     def test_exit_code_ok(self):
+        """ """
         ExitCodeChecks.test_exit_code_ok(self)
 
     @skip_win32
     def test_exit_code_error(self):
+        """ """
         ExitCodeChecks.test_exit_code_error(self)
 
     @skip_win32
     def test_exit_code_signal(self):
+        """ """
         ExitCodeChecks.test_exit_code_signal(self)
 
 class TestModules(tt.TempFileMixin):
+    """ """
     def test_extraneous_loads(self):
-        """Test we're not loading modules on startup that we shouldn't.
-        """
+        """Test we're not loading modules on startup that we shouldn't."""
         self.mktmp("import sys\n"
                    "print('numpy' in sys.modules)\n"
                    "print('ipyparallel' in sys.modules)\n"
@@ -621,24 +773,50 @@
 
     # for python 3.7 and earlier
     def visit_Num(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         node.n = -node.n
         return node
 
     # for python 3.8+
     def visit_Constant(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         if isinstance(node.value, int):
             return self.visit_Num(node)
         return node
 
 class TestAstTransform(unittest.TestCase):
+    """ """
     def setUp(self):
+        """ """
         self.negator = Negator()
         ip.ast_transformers.append(self.negator)
     
     def tearDown(self):
+        """ """
         ip.ast_transformers.remove(self.negator)
     
     def test_run_cell(self):
+        """ """
         with tt.AssertPrints('-34'):
             ip.run_cell('print (12 + 22)')
         
@@ -648,8 +826,20 @@
             ip.run_cell('print (n)')
     
     def test_timeit(self):
+        """ """
         called = set()
         def f(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             called.add(x)
         ip.push({'f':f})
         
@@ -663,8 +853,20 @@
         self.assertEqual(called, {-2, -3})
     
     def test_time(self):
+        """ """
         called = []
         def f(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             called.append(x)
         ip.push({'f':f})
         
@@ -680,6 +882,7 @@
         self.assertEqual(called, [5])
     
     def test_macro(self):
+        """ """
         ip.push({'a':10})
         # The AST transformation makes this do a+=-1
         ip.define_macro("amacro", "a+=1\nprint(a)")
@@ -690,17 +893,41 @@
             ip.run_cell("amacro")
 
 class TestMiscTransform(unittest.TestCase):
+    """ """
 
 
     def test_transform_only_once(self):
+        """ """
         cleanup = 0
         line_t = 0
         def count_cleanup(lines):
+            """
+
+            Parameters
+            ----------
+            lines :
+                
+
+            Returns
+            -------
+
+            """
             nonlocal cleanup
             cleanup += 1
             return lines
 
         def count_line_t(lines):
+            """
+
+            Parameters
+            ----------
+            lines :
+                
+
+            Returns
+            -------
+
+            """
             nonlocal line_t
             line_t += 1
             return lines
@@ -720,6 +947,17 @@
 
     # for Python 3.7 and earlier
     def visit_Num(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         if isinstance(node.n, int):
             return ast.Call(func=ast.Name(id='Integer', ctx=ast.Load()),
                             args=[node], keywords=[])
@@ -727,27 +965,53 @@
 
     # For Python 3.8+
     def visit_Constant(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         if isinstance(node.value, int):
             return self.visit_Num(node)
         return node
 
 
 class TestAstTransform2(unittest.TestCase):
+    """ """
     def setUp(self):
+        """ """
         self.intwrapper = IntegerWrapper()
         ip.ast_transformers.append(self.intwrapper)
         
         self.calls = []
         def Integer(*args):
+            """
+
+            Parameters
+            ----------
+            *args :
+                
+
+            Returns
+            -------
+
+            """
             self.calls.append(args)
             return args
         ip.push({"Integer": Integer})
     
     def tearDown(self):
+        """ """
         ip.ast_transformers.remove(self.intwrapper)
         del ip.user_ns['Integer']
     
     def test_run_cell(self):
+        """ """
         ip.run_cell("n = 2")
         self.assertEqual(self.calls, [(2,)])
         
@@ -756,8 +1020,20 @@
         self.assertEqual(ip.user_ns['o'], 2.0)
     
     def test_timeit(self):
+        """ """
         called = set()
         def f(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             called.add(x)
         ip.push({'f':f})
 
@@ -775,17 +1051,41 @@
 
     # for Python 3.7 and earlier
     def visit_Num(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         raise ValueError("test")
 
     # for Python 3.8+
     def visit_Constant(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         if isinstance(node.value, int):
             return self.visit_Num(node)
         return node
 
 
 class TestAstTransformError(unittest.TestCase):
+    """ """
     def test_unregistering(self):
+        """ """
         err_transformer = ErrorTransformer()
         ip.ast_transformers.append(err_transformer)
         
@@ -798,29 +1098,61 @@
 
 class StringRejector(ast.NodeTransformer):
     """Throws an InputRejected when it sees a string literal.
-
+    
     Used to verify that NodeTransformers can signal that a piece of code should
     not be executed by throwing an InputRejected.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     
     #for python 3.7 and earlier
     def visit_Str(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         raise InputRejected("test")
 
     # 3.8 only
     def visit_Constant(self, node):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
+        """
         if isinstance(node.value, str):
             raise InputRejected("test")
         return node
 
 
 class TestAstTransformInputRejection(unittest.TestCase):
+    """ """
 
     def setUp(self):
+        """ """
         self.transformer = StringRejector()
         ip.ast_transformers.append(self.transformer)
 
     def tearDown(self):
+        """ """
         ip.ast_transformers.remove(self.transformer)
 
     def test_input_rejection(self):
@@ -840,22 +1172,27 @@
         self.assertIsInstance(res.error_before_exec, InputRejected)
 
 def test__IPYTHON__():
+    """ """
     # This shouldn't raise a NameError, that's all
     __IPYTHON__
 
 
 class DummyRepr(object):
+    """ """
     def __repr__(self):
         return "DummyRepr"
     
     def _repr_html_(self):
+        """ """
         return "<b>dummy</b>"
     
     def _repr_javascript_(self):
+        """ """
         return "console.log('hi');", {'key': 'value'}
     
 
 def test_user_variables():
+    """ """
     # enable all formatters
     ip.display_formatter.active_types = ip.display_formatter.format_types
     
@@ -882,6 +1219,7 @@
     ip.display_formatter.active_types = ['text/plain']
     
 def test_user_expression():
+    """ """
     # enable all formatters
     ip.display_formatter.active_types = ip.display_formatter.format_types
     query = {
@@ -912,6 +1250,17 @@
 
     @staticmethod
     def transformer(lines):
+        """
+
+        Parameters
+        ----------
+        lines :
+            
+
+        Returns
+        -------
+
+        """
         for line in lines:
             pos = line.find('syntaxerror')
             if pos >= 0:
@@ -922,12 +1271,15 @@
         return lines
 
     def setUp(self):
+        """ """
         ip.input_transformers_post.append(self.transformer)
 
     def tearDown(self):
+        """ """
         ip.input_transformers_post.remove(self.transformer)
 
     def test_syntaxerror_input_transformer(self):
+        """ """
         with tt.AssertPrints('1234'):
             ip.run_cell('1234')
         with tt.AssertPrints('SyntaxError: invalid syntax'):
@@ -939,7 +1291,9 @@
 
 
 class TestWarningSuppression(unittest.TestCase):
+    """ """
     def test_warning_suppression(self):
+        """ """
         ip.run_cell("import warnings")
         try:
             with self.assertWarnsRegex(UserWarning, "asdf"):
@@ -956,14 +1310,20 @@
 
 
     def test_deprecation_warning(self):
-        ip.run_cell("""
-import warnings
-def wrn():
-    warnings.warn(
+        """ip.run_cell("""
+        import warnings
+        def wrn():
+            warnings.warn(
         "I AM  A WARNING",
         DeprecationWarning
-    )
+            )
         """)
+
+        Parameters
+        ----------
+
+        Returns
+        -------
         try:
             with self.assertWarnsRegex(DeprecationWarning, "I AM  A WARNING"):
                 ip.run_cell("wrn()")
@@ -973,12 +1333,14 @@
 
 
 class TestImportNoDeprecate(tt.TempFileMixin):
+    """ """
 
     def setUp(self):
         """Make a valid python temp file."""
         self.mktmp("""
 import warnings
 def wrn():
+    """ """
     warnings.warn(
         "I AM  A WARNING",
         DeprecationWarning
@@ -987,9 +1349,7 @@
         super().setUp()
 
     def test_no_dep(self):
-        """
-        No deprecation warning should be raised from imported functions
-        """
+        """No deprecation warning should be raised from imported functions"""
         ip.run_cell("from {} import wrn".format(self.fname))
 
         with tt.AssertNotPrints("I AM  A WARNING"):
@@ -998,6 +1358,7 @@
 
 
 def test_custom_exc_count():
+    """ """
     hook = mock.Mock(return_value=None)
     ip.set_custom_exc((SyntaxError,), hook)
     before = ip.execution_count
@@ -1009,6 +1370,7 @@
 
 
 def test_run_cell_async():
+    """ """
     loop = asyncio.get_event_loop()
     ip.run_cell("import asyncio")
     coro = ip.run_cell_async("await asyncio.sleep(0.01)\n5")
@@ -1019,15 +1381,30 @@
 
 
 def test_should_run_async():
+    """ """
     assert not ip.should_run_async("a = 5")
     assert ip.should_run_async("await x")
     assert ip.should_run_async("import asyncio; await asyncio.sleep(1)")
 
 
 def test_set_custom_completer():
+    """ """
     num_completers = len(ip.Completer.matchers)
 
     def foo(*args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         return "I'm a completer!"
 
     ip.set_custom_completer(foo, 0)
