# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/shellapp.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/shellapp.py
@@ -109,18 +109,25 @@
 
 class InteractiveShellApp(Configurable):
     """A Mixin for applications that start InteractiveShell instances.
-
+    
     Provides configurables for loading extensions and executing files
     as part of configuring a Shell environment.
-
+    
     The following methods should be called by the :meth:`initialize` method
     of the subclass:
-
+    
       - :meth:`init_path`
       - :meth:`init_shell` (to be implemented by the subclass)
       - :meth:`init_gui_pylab`
       - :meth:`init_extensions`
       - :meth:`init_code`
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     extensions = List(Unicode(),
         help="A list of dotted module names of IPython extensions to load."
@@ -212,21 +219,39 @@
     user_ns = Instance(dict, args=None, allow_none=True)
     @observe('user_ns')
     def _user_ns_changed(self, change):
+        """
+
+        Parameters
+        ----------
+        change :
+            
+
+        Returns
+        -------
+
+        """
         if self.shell is not None:
             self.shell.user_ns = change['new']
             self.shell.init_user_ns()
 
     def init_path(self):
         """Add current working directory, '', to sys.path
-
+        
         Unlike Python's default, we insert before the first `site-packages`
         or `dist-packages` directory,
         so that it is after the standard library.
-
+        
         .. versionchanged:: 7.2
             Try to insert after the standard library, instead of first.
         .. versionchanged:: 8.0
             Allow optionally not including the current directory in sys.path
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         if '' in sys.path or self.ignore_cwd:
             return
@@ -241,6 +266,7 @@
         sys.path.insert(idx, '')
 
     def init_shell(self):
+        """ """
         raise NotImplementedError("Override in subclasses")
 
     def init_gui_pylab(self):
@@ -284,9 +310,16 @@
 
     def init_extensions(self):
         """Load all IPython extensions in IPythonApp.extensions.
-
+        
         This uses the :meth:`ExtensionManager.load_extensions` to load all
         the extensions listed in ``self.extensions``.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         try:
             self.log.debug("Loading IPython extensions...")
@@ -352,6 +385,19 @@
             self.shell.showtraceback()
 
     def _exec_file(self, fname, shell_futures=False):
+        """
+
+        Parameters
+        ----------
+        fname :
+            
+        shell_futures :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         try:
             full_filename = filefind(fname, [u'.', self.ipython_dir])
         except IOError:
