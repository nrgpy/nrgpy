# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/mistune.py
+++ b/..//venv/lib/python3.8/site-packages/mistune.py
@@ -41,6 +41,17 @@
 
 
 def _pure_pattern(regex):
+    """
+
+    Parameters
+    ----------
+    regex :
+        
+
+    Returns
+    -------
+
+    """
     pattern = regex.pattern
     if pattern.startswith('^'):
         pattern = pattern[1:]
@@ -48,18 +59,39 @@
 
 
 def _keyify(key):
+    """
+
+    Parameters
+    ----------
+    key :
+        
+
+    Returns
+    -------
+
+    """
     key = escape(key.lower(), quote=True)
     return _key_pattern.sub(' ', key)
 
 
 def escape(text, quote=False, smart_amp=True):
     """Replace special characters "&", "<" and ">" to HTML-safe sequences.
-
+    
     The original cgi.escape will always escape "&", but you can control
     this one for a smart escape amp.
 
-    :param quote: if set to True, " and ' will be escaped.
-    :param smart_amp: if set to False, & will always be escaped.
+    Parameters
+    ----------
+    quote :
+        if set to True, " and ' will be escaped. (Default value = False)
+    smart_amp :
+        if set to False, & will always be escaped. (Default value = True)
+    text :
+        
+
+    Returns
+    -------
+
     """
     if smart_amp:
         text = _escape_pattern.sub('&amp;', text)
@@ -74,7 +106,17 @@
 
 
 def escape_link(url):
-    """Remove dangerous URL schemes like javascript: and escape afterwards."""
+    """Remove dangerous URL schemes like javascript: and escape afterwards.
+
+    Parameters
+    ----------
+    url :
+        
+
+    Returns
+    -------
+
+    """
     lower_url = url.lower().strip('\x00\x1a \n\r\t')
 
     for scheme in _scheme_blacklist:
@@ -84,6 +126,19 @@
 
 
 def preprocessing(text, tab=4):
+    """
+
+    Parameters
+    ----------
+    text :
+        
+    tab :
+         (Default value = 4)
+
+    Returns
+    -------
+
+    """
     text = _newline_pattern.sub('\n', text)
     text = text.expandtabs(tab)
     text = text.replace('\u2424', '\n')
@@ -209,12 +264,36 @@
         return self.parse(text, rules)
 
     def parse(self, text, rules=None):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+        rules :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         text = text.rstrip('\n')
 
         if not rules:
             rules = self.default_rules
 
         def manipulate(text):
+            """
+
+            Parameters
+            ----------
+            text :
+                
+
+            Returns
+            -------
+
+            """
             for key in rules:
                 rule = getattr(self.rules, key)
                 m = rule.match(text)
@@ -234,11 +313,33 @@
         return self.tokens
 
     def parse_newline(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         length = len(m.group(0))
         if length > 1:
             self.tokens.append({'type': 'newline'})
 
     def parse_block_code(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         # clean leading whitespace
         code = _block_code_leading_pattern.sub('', m.group(0))
         self.tokens.append({
@@ -248,6 +349,17 @@
         })
 
     def parse_fences(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         self.tokens.append({
             'type': 'code',
             'lang': m.group(2),
@@ -255,6 +367,17 @@
         })
 
     def parse_heading(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         self.tokens.append({
             'type': 'heading',
             'level': len(m.group(1)),
@@ -262,7 +385,17 @@
         })
 
     def parse_lheading(self, m):
-        """Parse setext heading."""
+        """Parse setext heading.
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         self.tokens.append({
             'type': 'heading',
             'level': 1 if m.group(2) == '=' else 2,
@@ -270,9 +403,31 @@
         })
 
     def parse_hrule(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         self.tokens.append({'type': 'hrule'})
 
     def parse_list_block(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         bull = m.group(2)
         self.tokens.append({
             'type': 'list_start',
@@ -290,6 +445,19 @@
         self._list_depth -= 1
 
     def _process_list_item(self, cap, bull):
+        """
+
+        Parameters
+        ----------
+        cap :
+            
+        bull :
+            
+
+        Returns
+        -------
+
+        """
         cap = self.rules.list_item.findall(cap)
 
         _next = False
@@ -330,6 +498,17 @@
             self.tokens.append({'type': 'list_item_end'})
 
     def parse_block_quote(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         self.tokens.append({'type': 'block_quote_start'})
         self._blockquote_depth += 1
         if self._blockquote_depth > self._max_recursive_depth:
@@ -342,6 +521,17 @@
         self._blockquote_depth -= 1
 
     def parse_def_links(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         key = _keyify(m.group(1))
         self.def_links[key] = {
             'link': m.group(2),
@@ -349,6 +539,17 @@
         }
 
     def parse_def_footnotes(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         key = _keyify(m.group(1))
         if key in self.def_footnotes:
             # footnote is already defined
@@ -383,6 +584,17 @@
         })
 
     def parse_table(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         item = self._process_table(m)
 
         cells = re.sub(r'(?: *\| *)?\n$', '', m.group(3))
@@ -395,6 +607,17 @@
         self.tokens.append(item)
 
     def parse_nptable(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         item = self._process_table(m)
 
         cells = re.sub(r'\n$', '', m.group(3))
@@ -406,6 +629,17 @@
         self.tokens.append(item)
 
     def _process_table(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         header = re.sub(r'^ *| *\| *$', '', m.group(1))
         header = re.split(r' *\| *', header)
         align = re.sub(r' *|\| *$', '', m.group(2))
@@ -429,6 +663,17 @@
         return item
 
     def _process_cells(self, cells):
+        """
+
+        Parameters
+        ----------
+        cells :
+            
+
+        Returns
+        -------
+
+        """
         for i, line in enumerate(cells):
             for c, cell in enumerate(line):
                 # de-escape any pipe inside the cell here
@@ -437,6 +682,17 @@
         return cells
 
     def parse_block_html(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         tag = m.group(1)
         if not tag:
             text = m.group(0)
@@ -455,10 +711,32 @@
             })
 
     def parse_paragraph(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         text = m.group(1).rstrip('\n')
         self.tokens.append({'type': 'paragraph', 'text': text})
 
     def parse_text(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         text = m.group(0)
         self.tokens.append({'type': 'text', 'text': text})
 
@@ -509,6 +787,13 @@
     def hard_wrap(self):
         """Grammar for hard wrap linebreak. You don't need to add two
         spaces at the end of a line.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         self.linebreak = re.compile(r'^ *\n(?!\s*$)')
         self.text = re.compile(
@@ -555,11 +840,37 @@
         return self.output(text, rules)
 
     def setup(self, links, footnotes):
+        """
+
+        Parameters
+        ----------
+        links :
+            
+        footnotes :
+            
+
+        Returns
+        -------
+
+        """
         self.footnote_index = 0
         self.links = links or {}
         self.footnotes = footnotes or {}
 
     def output(self, text, rules=None):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+        rules :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         text = text.rstrip('\n')
         if not rules:
             rules = list(self.default_rules)
@@ -570,6 +881,17 @@
         output = self.renderer.placeholder()
 
         def manipulate(text):
+            """
+
+            Parameters
+            ----------
+            text :
+                
+
+            Returns
+            -------
+
+            """
             for key in rules:
                 pattern = getattr(self.rules, key)
                 m = pattern.match(text)
@@ -594,10 +916,32 @@
         return output
 
     def output_escape(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         text = m.group(1)
         return self.renderer.escape(text)
 
     def output_autolink(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         link = m.group(1)
         if m.group(2) == '@':
             is_email = True
@@ -606,12 +950,34 @@
         return self.renderer.autolink(link, is_email)
 
     def output_url(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         link = m.group(1)
         if self._in_link:
             return self.renderer.text(link)
         return self.renderer.autolink(link, False)
 
     def output_inline_html(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         tag = m.group(1)
         if self._parse_inline_html and tag in _inline_tags:
             text = m.group(3)
@@ -628,6 +994,17 @@
         return self.renderer.inline_html(html)
 
     def output_footnote(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         key = _keyify(m.group(1))
         if key not in self.footnotes:
             return None
@@ -638,9 +1015,31 @@
         return self.renderer.footnote_ref(key, self.footnote_index)
 
     def output_link(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         return self._process_link(m, m.group(3), m.group(4))
 
     def output_reflink(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         key = _keyify(m.group(2) or m.group(1))
         if key not in self.links:
             return None
@@ -648,6 +1047,17 @@
         return self._process_link(m, ret['link'], ret['title'])
 
     def output_nolink(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         key = _keyify(m.group(1))
         if key not in self.links:
             return None
@@ -655,6 +1065,21 @@
         return self._process_link(m, ret['link'], ret['title'])
 
     def _process_link(self, m, link, title=None):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+        link :
+            
+        title :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         line = m.group(0)
         text = m.group(1)
         if line[0] == '!':
@@ -666,57 +1091,137 @@
         return self.renderer.link(link, title, text)
 
     def output_double_emphasis(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         text = m.group(2) or m.group(1)
         text = self.output(text)
         return self.renderer.double_emphasis(text)
 
     def output_emphasis(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         text = m.group(2) or m.group(1)
         text = self.output(text)
         return self.renderer.emphasis(text)
 
     def output_code(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         text = m.group(2)
         return self.renderer.codespan(text)
 
     def output_linebreak(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         return self.renderer.linebreak()
 
     def output_strikethrough(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         text = self.output(m.group(1))
         return self.renderer.strikethrough(text)
 
     def output_text(self, m):
+        """
+
+        Parameters
+        ----------
+        m :
+            
+
+        Returns
+        -------
+
+        """
         text = m.group(0)
         return self.renderer.text(text)
 
 
 class Renderer(object):
-    """The default HTML renderer for rendering Markdown.
-    """
+    """The default HTML renderer for rendering Markdown."""
 
     def __init__(self, **kwargs):
         self.options = kwargs
 
     def placeholder(self):
         """Returns the default, empty output value for the renderer.
-
+        
         All renderer methods use the '+=' operator to append to this value.
         Default is a string so rendering HTML can build up a result string with
         the rendered Markdown.
-
+        
         Can be overridden by Renderer subclasses to be types like an empty
         list, allowing the renderer to create a tree-like structure to
         represent the document (which can then be reprocessed later into a
         separate format like docx or pdf).
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         return ''
 
     def block_code(self, code, lang=None):
         """Rendering block level code. ``pre > code``.
 
-        :param code: text content of the code block.
-        :param lang: language of the given code.
+        Parameters
+        ----------
+        code :
+            text content of the code block.
+        lang :
+            language of the given code. (Default value = None)
+
+        Returns
+        -------
+
         """
         code = code.rstrip('\n')
         if not lang:
@@ -728,14 +1233,28 @@
     def block_quote(self, text):
         """Rendering <blockquote> with the given text.
 
-        :param text: text content of the blockquote.
+        Parameters
+        ----------
+        text :
+            text content of the blockquote.
+
+        Returns
+        -------
+
         """
         return '<blockquote>%s\n</blockquote>\n' % text.rstrip('\n')
 
     def block_html(self, html):
         """Rendering block level pure html content.
 
-        :param html: text content of the html snippet.
+        Parameters
+        ----------
+        html :
+            text content of the html snippet.
+
+        Returns
+        -------
+
         """
         if self.options.get('skip_style') and \
            html.lower().startswith('<style'):
@@ -747,9 +1266,18 @@
     def header(self, text, level, raw=None):
         """Rendering header/heading tags like ``<h1>`` ``<h2>``.
 
-        :param text: rendered text content for the header.
-        :param level: a number for the header level, for example: 1.
-        :param raw: raw text content of the header.
+        Parameters
+        ----------
+        text :
+            rendered text content for the header.
+        level :
+            a number for the header level, for example: 1.
+        raw :
+            raw text content of the header. (Default value = None)
+
+        Returns
+        -------
+
         """
         return '<h%d>%s</h%d>\n' % (level, text, level)
 
@@ -762,8 +1290,16 @@
     def list(self, body, ordered=True):
         """Rendering list tags like ``<ul>`` and ``<ol>``.
 
-        :param body: body contents of the list.
-        :param ordered: whether this list is ordered or not.
+        Parameters
+        ----------
+        body :
+            body contents of the list.
+        ordered :
+            whether this list is ordered or not. (Default value = True)
+
+        Returns
+        -------
+
         """
         tag = 'ul'
         if ordered:
@@ -771,18 +1307,46 @@
         return '<%s>\n%s</%s>\n' % (tag, body, tag)
 
     def list_item(self, text):
-        """Rendering list item snippet. Like ``<li>``."""
+        """Rendering list item snippet. Like ``<li>``.
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         return '<li>%s</li>\n' % text
 
     def paragraph(self, text):
-        """Rendering paragraph tags. Like ``<p>``."""
+        """Rendering paragraph tags. Like ``<p>``.
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         return '<p>%s</p>\n' % text.strip(' ')
 
     def table(self, header, body):
         """Rendering table element. Wrap header and body in it.
 
-        :param header: header part of the table.
-        :param body: body part of the table.
+        Parameters
+        ----------
+        header :
+            header part of the table.
+        body :
+            body part of the table.
+
+        Returns
+        -------
+
         """
         return (
             '<table>\n<thead>%s</thead>\n'
@@ -792,16 +1356,34 @@
     def table_row(self, content):
         """Rendering a table row. Like ``<tr>``.
 
-        :param content: content of current table row.
+        Parameters
+        ----------
+        content :
+            content of current table row.
+
+        Returns
+        -------
+
         """
         return '<tr>\n%s</tr>\n' % content
 
     def table_cell(self, content, **flags):
         """Rendering a table cell. Like ``<th>`` ``<td>``.
 
-        :param content: content of current table cell.
-        :param header: whether this is header or not.
-        :param align: align of current table cell.
+        Parameters
+        ----------
+        content :
+            content of current table cell.
+        header :
+            whether this is header or not.
+        align :
+            align of current table cell.
+        **flags :
+            
+
+        Returns
+        -------
+
         """
         if flags['header']:
             tag = 'th'
@@ -817,21 +1399,42 @@
     def double_emphasis(self, text):
         """Rendering **strong** text.
 
-        :param text: text content for emphasis.
+        Parameters
+        ----------
+        text :
+            text content for emphasis.
+
+        Returns
+        -------
+
         """
         return '<strong>%s</strong>' % text
 
     def emphasis(self, text):
         """Rendering *emphasis* text.
 
-        :param text: text content for emphasis.
+        Parameters
+        ----------
+        text :
+            text content for emphasis.
+
+        Returns
+        -------
+
         """
         return '<em>%s</em>' % text
 
     def codespan(self, text):
         """Rendering inline `code` text.
 
-        :param text: text content for inline code.
+        Parameters
+        ----------
+        text :
+            text content for inline code.
+
+        Returns
+        -------
+
         """
         text = escape(text.rstrip(), smart_amp=False)
         return '<code>%s</code>' % text
@@ -845,14 +1448,28 @@
     def strikethrough(self, text):
         """Rendering ~~strikethrough~~ text.
 
-        :param text: text content for strikethrough.
+        Parameters
+        ----------
+        text :
+            text content for strikethrough.
+
+        Returns
+        -------
+
         """
         return '<del>%s</del>' % text
 
     def text(self, text):
         """Rendering unformatted text.
 
-        :param text: text content.
+        Parameters
+        ----------
+        text :
+            text content.
+
+        Returns
+        -------
+
         """
         if self.options.get('parse_block_html'):
             return text
@@ -861,15 +1478,30 @@
     def escape(self, text):
         """Rendering escape sequence.
 
-        :param text: text content.
+        Parameters
+        ----------
+        text :
+            text content.
+
+        Returns
+        -------
+
         """
         return escape(text)
 
     def autolink(self, link, is_email=False):
         """Rendering a given link or email address.
 
-        :param link: link content or email address.
-        :param is_email: whether this is an email or not.
+        Parameters
+        ----------
+        link :
+            link content or email address.
+        is_email :
+            whether this is an email or not. (Default value = False)
+
+        Returns
+        -------
+
         """
         text = link = escape_link(link)
         if is_email:
@@ -879,9 +1511,18 @@
     def link(self, link, title, text):
         """Rendering a given link with content and title.
 
-        :param link: href link for ``<a>`` tag.
-        :param title: title content for `title` attribute.
-        :param text: text content for description.
+        Parameters
+        ----------
+        link :
+            href link for ``<a>`` tag.
+        title :
+            title content for `title` attribute.
+        text :
+            text content for description.
+
+        Returns
+        -------
+
         """
         link = escape_link(link)
         if not title:
@@ -892,9 +1533,18 @@
     def image(self, src, title, text):
         """Rendering a image with title and text.
 
-        :param src: source link of the image.
-        :param title: title text of the image.
-        :param text: alt text of the image.
+        Parameters
+        ----------
+        src :
+            source link of the image.
+        title :
+            title text of the image.
+        text :
+            alt text of the image.
+
+        Returns
+        -------
+
         """
         src = escape_link(src)
         text = escape(text, quote=True)
@@ -910,7 +1560,14 @@
     def inline_html(self, html):
         """Rendering span level pure html content.
 
-        :param html: text content of the html snippet.
+        Parameters
+        ----------
+        html :
+            text content of the html snippet.
+
+        Returns
+        -------
+
         """
         if self.options.get('escape'):
             return escape(html)
@@ -923,8 +1580,16 @@
     def footnote_ref(self, key, index):
         """Rendering the ref anchor of a footnote.
 
-        :param key: identity key for the footnote.
-        :param index: the index count of current footnote.
+        Parameters
+        ----------
+        key :
+            identity key for the footnote.
+        index :
+            the index count of current footnote.
+
+        Returns
+        -------
+
         """
         html = (
             '<sup class="footnote-ref" id="fnref-%s">'
@@ -935,8 +1600,16 @@
     def footnote_item(self, key, text):
         """Rendering a footnote item.
 
-        :param key: identity key for the footnote.
-        :param text: text content of the footnote.
+        Parameters
+        ----------
+        key :
+            identity key for the footnote.
+        text :
+            text content of the footnote.
+
+        Returns
+        -------
+
         """
         back = (
             '<a href="#fnref-%s" class="footnote">&#8617;</a>'
@@ -952,7 +1625,14 @@
     def footnotes(self, text):
         """Wrapper for all footnotes.
 
-        :param text: contents of all footnotes.
+        Parameters
+        ----------
+        text :
+            contents of all footnotes.
+
+        Returns
+        -------
+
         """
         html = '<div class="footnotes">\n%s<ol>%s</ol>\n</div>\n'
         return html % (self.hrule(), text)
@@ -961,9 +1641,18 @@
 class Markdown(object):
     """The Markdown parser.
 
-    :param renderer: An instance of ``Renderer``.
-    :param inline: An inline lexer class or instance.
-    :param block: A block lexer class or instance.
+    Parameters
+    ----------
+    renderer :
+        An instance of ``Renderer``.
+    inline :
+        An inline lexer class or instance.
+    block :
+        A block lexer class or instance.
+
+    Returns
+    -------
+
     """
     def __init__(self, renderer=None, inline=None, block=None, **kwargs):
         if not renderer:
@@ -996,11 +1685,29 @@
     def render(self, text):
         """Render the Markdown text.
 
-        :param text: markdown formatted text content.
+        Parameters
+        ----------
+        text :
+            markdown formatted text content.
+
+        Returns
+        -------
+
         """
         return self.parse(text)
 
     def parse(self, text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         out = self.output(preprocessing(text))
 
         keys = self.block.def_footnotes
@@ -1032,17 +1739,32 @@
         return out
 
     def pop(self):
+        """ """
         if not self.tokens:
             return None
         self.token = self.tokens.pop()
         return self.token
 
     def peek(self):
+        """ """
         if self.tokens:
             return self.tokens[-1]
         return None  # pragma: no cover
 
     def output(self, text, rules=None):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+        rules :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         self.tokens = self.block(text, rules)
         self.tokens.reverse()
 
@@ -1054,6 +1776,7 @@
         return out
 
     def tok(self):
+        """ """
         t = self.token['type']
 
         # sepcial cases
@@ -1063,18 +1786,22 @@
         return getattr(self, 'output_%s' % t)()
 
     def tok_text(self):
+        """ """
         text = self.token['text']
         while self.peek()['type'] == 'text':
             text += '\n' + self.pop()['text']
         return self.inline(text)
 
     def output_newline(self):
+        """ """
         return self.renderer.newline()
 
     def output_hrule(self):
+        """ """
         return self.renderer.hrule()
 
     def output_heading(self):
+        """ """
         return self.renderer.header(
             self.inline(self.token['text']),
             self.token['level'],
@@ -1082,11 +1809,13 @@
         )
 
     def output_code(self):
+        """ """
         return self.renderer.block_code(
             self.token['text'], self.token['lang']
         )
 
     def output_table(self):
+        """ """
         aligns = self.token['align']
         aligns_length = len(aligns)
         cell = self.renderer.placeholder()
@@ -1113,12 +1842,14 @@
         return self.renderer.table(header, body)
 
     def output_block_quote(self):
+        """ """
         body = self.renderer.placeholder()
         while self.pop()['type'] != 'block_quote_end':
             body += self.tok()
         return self.renderer.block_quote(body)
 
     def output_list(self):
+        """ """
         ordered = self.token['ordered']
         body = self.renderer.placeholder()
         while self.pop()['type'] != 'list_end':
@@ -1126,6 +1857,7 @@
         return self.renderer.list(body, ordered)
 
     def output_list_item(self):
+        """ """
         body = self.renderer.placeholder()
         while self.pop()['type'] != 'list_item_end':
             if self.token['type'] == 'text':
@@ -1136,12 +1868,14 @@
         return self.renderer.list_item(body)
 
     def output_loose_item(self):
+        """ """
         body = self.renderer.placeholder()
         while self.pop()['type'] != 'list_item_end':
             body += self.tok()
         return self.renderer.list_item(body)
 
     def output_footnote(self):
+        """ """
         self.inline._in_footnote = True
         body = self.renderer.placeholder()
         key = self.token['key']
@@ -1152,10 +1886,12 @@
         return self.renderer.placeholder()
 
     def output_close_html(self):
+        """ """
         text = self.token['text']
         return self.renderer.block_html(text)
 
     def output_open_html(self):
+        """ """
         text = self.token['text']
         tag = self.token['tag']
         if self._parse_block_html and tag not in _pre_tags:
@@ -1165,20 +1901,36 @@
         return self.renderer.block_html(html)
 
     def output_paragraph(self):
+        """ """
         return self.renderer.paragraph(self.inline(self.token['text']))
 
     def output_text(self):
+        """ """
         return self.renderer.paragraph(self.tok_text())
 
 
 def markdown(text, escape=True, **kwargs):
     """Render markdown formatted text to html.
 
-    :param text: markdown formatted text content.
-    :param escape: if set to False, all html tags will not be escaped.
-    :param use_xhtml: output with xhtml tags.
-    :param hard_wrap: if set to True, it will use the GFM line breaks feature.
-    :param parse_block_html: parse text only in block level html.
-    :param parse_inline_html: parse text only in inline level html.
+    Parameters
+    ----------
+    text :
+        markdown formatted text content.
+    escape :
+        if set to False, all html tags will not be escaped. (Default value = True)
+    use_xhtml :
+        output with xhtml tags.
+    hard_wrap :
+        if set to True, it will use the GFM line breaks feature.
+    parse_block_html :
+        parse text only in block level html.
+    parse_inline_html :
+        parse text only in inline level html.
+    **kwargs :
+        
+
+    Returns
+    -------
+
     """
     return Markdown(escape=escape, **kwargs)(text)
