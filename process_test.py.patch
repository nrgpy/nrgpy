# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tornado/test/process_test.py
+++ b/..//venv/lib/python3.8/site-packages/tornado/test/process_test.py
@@ -21,9 +21,13 @@
 # Not using AsyncHTTPTestCase because we need control over the IOLoop.
 @skipIfNonUnix
 class ProcessTest(unittest.TestCase):
+    """ """
     def get_app(self):
+        """ """
         class ProcessHandler(RequestHandler):
+            """ """
             def get(self):
+                """ """
                 if self.get_argument("exit", None):
                     # must use os._exit instead of sys.exit so unittest's
                     # exception handler doesn't catch it
@@ -35,6 +39,7 @@
         return Application([("/", ProcessHandler)])
 
     def tearDown(self):
+        """ """
         if task_id() is not None:
             # We're in a child process, and probably got to this point
             # via an uncaught exception.  If we return now, both
@@ -50,6 +55,7 @@
         super().tearDown()
 
     def test_multi_process(self):
+        """ """
         # This test doesn't work on twisted because we use the global
         # reactor and don't restore it to a sane state after the fork
         # (asyncio has the same issue, but we have a special case in
@@ -60,6 +66,17 @@
             sock, port = bind_unused_port()
 
             def get_url(path):
+                """
+
+                Parameters
+                ----------
+                path :
+                    
+
+                Returns
+                -------
+
+                """
                 return "http://127.0.0.1:%d%s" % (port, path)
 
             # ensure that none of these processes live too long
@@ -95,6 +112,19 @@
                     client = HTTPClient(SimpleAsyncHTTPClient)
 
                     def fetch(url, fail_ok=False):
+                        """
+
+                        Parameters
+                        ----------
+                        url :
+                            
+                        fail_ok :
+                             (Default value = False)
+
+                        Returns
+                        -------
+
+                        """
                         try:
                             return client.fetch(get_url(url))
                         except HTTPError as e:
@@ -135,12 +165,25 @@
 
 @skipIfNonUnix
 class SubprocessTest(AsyncTestCase):
+    """ """
     def term_and_wait(self, subproc):
+        """
+
+        Parameters
+        ----------
+        subproc :
+            
+
+        Returns
+        -------
+
+        """
         subproc.proc.terminate()
         subproc.proc.wait()
 
     @gen_test
     def test_subprocess(self):
+        """ """
         if IOLoop.configured_class().__name__.endswith("LayeredTwistedIOLoop"):
             # This test fails non-deterministically with LayeredTwistedIOLoop.
             # (the read_until('\n') returns '\n' instead of 'hello\n')
@@ -171,6 +214,7 @@
 
     @gen_test
     def test_close_stdin(self):
+        """ """
         # Close the parent's stdin handle and see that the child recognizes it.
         subproc = Subprocess(
             [sys.executable, "-u", "-i"],
@@ -186,6 +230,7 @@
 
     @gen_test
     def test_stderr(self):
+        """ """
         # This test is mysteriously flaky on twisted: it succeeds, but logs
         # an error of EBADF on closing a file descriptor.
         subproc = Subprocess(
@@ -199,6 +244,7 @@
         subproc.stderr.close()
 
     def test_sigchild(self):
+        """ """
         Subprocess.initialize()
         self.addCleanup(Subprocess.uninitialize)
         subproc = Subprocess([sys.executable, "-c", "pass"])
@@ -209,6 +255,7 @@
 
     @gen_test
     def test_sigchild_future(self):
+        """ """
         Subprocess.initialize()
         self.addCleanup(Subprocess.uninitialize)
         subproc = Subprocess([sys.executable, "-c", "pass"])
@@ -217,6 +264,7 @@
         self.assertEqual(subproc.returncode, ret)
 
     def test_sigchild_signal(self):
+        """ """
         Subprocess.initialize()
         self.addCleanup(Subprocess.uninitialize)
         subproc = Subprocess(
@@ -258,6 +306,7 @@
 
     @gen_test
     def test_wait_for_exit_raise(self):
+        """ """
         Subprocess.initialize()
         self.addCleanup(Subprocess.uninitialize)
         subproc = Subprocess([sys.executable, "-c", "import sys; sys.exit(1)"])
@@ -267,6 +316,7 @@
 
     @gen_test
     def test_wait_for_exit_raise_disabled(self):
+        """ """
         Subprocess.initialize()
         self.addCleanup(Subprocess.uninitialize)
         subproc = Subprocess([sys.executable, "-c", "import sys; sys.exit(1)"])
