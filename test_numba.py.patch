# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/window/test_numba.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/window/test_numba.py
@@ -12,9 +12,42 @@
 @pytest.mark.filterwarnings("ignore:\\nThe keyword argument")
 # Filter warnings when parallel=True and the function can't be parallelized by Numba
 class TestApply:
+    """ """
     @pytest.mark.parametrize("jit", [True, False])
     def test_numba_vs_cython(self, jit, nogil, parallel, nopython, center):
+        """
+
+        Parameters
+        ----------
+        jit :
+            
+        nogil :
+            
+        parallel :
+            
+        nopython :
+            
+        center :
+            
+
+        Returns
+        -------
+
+        """
         def f(x, *args):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+            *args :
+                
+
+            Returns
+            -------
+
+            """
             arg_sum = 0
             for arg in args:
                 arg_sum += arg
@@ -39,11 +72,50 @@
 
     @pytest.mark.parametrize("jit", [True, False])
     def test_cache(self, jit, nogil, parallel, nopython):
+        """
+
+        Parameters
+        ----------
+        jit :
+            
+        nogil :
+            
+        parallel :
+            
+        nopython :
+            
+
+        Returns
+        -------
+
+        """
         # Test that the functions are cached correctly if we switch functions
         def func_1(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return np.mean(x) + 4
 
         def func_2(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return np.std(x) * 5
 
         if jit:
@@ -79,7 +151,19 @@
 
 @td.skip_if_no("numba", "0.46.0")
 def test_use_global_config():
+    """ """
     def f(x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         return np.mean(x) + 2
 
     s = Series(range(10))
