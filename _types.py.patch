# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jsonschema/_types.py
+++ b/..//venv/lib/python3.8/site-packages/jsonschema/_types.py
@@ -8,14 +8,53 @@
 
 
 def is_array(checker, instance):
+    """
+
+    Parameters
+    ----------
+    checker :
+        
+    instance :
+        
+
+    Returns
+    -------
+
+    """
     return isinstance(instance, list)
 
 
 def is_bool(checker, instance):
+    """
+
+    Parameters
+    ----------
+    checker :
+        
+    instance :
+        
+
+    Returns
+    -------
+
+    """
     return isinstance(instance, bool)
 
 
 def is_integer(checker, instance):
+    """
+
+    Parameters
+    ----------
+    checker :
+        
+    instance :
+        
+
+    Returns
+    -------
+
+    """
     # bool inherits from int, so ensure bools aren't reported as ints
     if isinstance(instance, bool):
         return False
@@ -23,10 +62,36 @@
 
 
 def is_null(checker, instance):
+    """
+
+    Parameters
+    ----------
+    checker :
+        
+    instance :
+        
+
+    Returns
+    -------
+
+    """
     return instance is None
 
 
 def is_number(checker, instance):
+    """
+
+    Parameters
+    ----------
+    checker :
+        
+    instance :
+        
+
+    Returns
+    -------
+
+    """
     # bool inherits from int, so ensure bools aren't reported as ints
     if isinstance(instance, bool):
         return False
@@ -34,58 +99,104 @@
 
 
 def is_object(checker, instance):
+    """
+
+    Parameters
+    ----------
+    checker :
+        
+    instance :
+        
+
+    Returns
+    -------
+
+    """
     return isinstance(instance, dict)
 
 
 def is_string(checker, instance):
+    """
+
+    Parameters
+    ----------
+    checker :
+        
+    instance :
+        
+
+    Returns
+    -------
+
+    """
     return isinstance(instance, str_types)
 
 
 def is_any(checker, instance):
+    """
+
+    Parameters
+    ----------
+    checker :
+        
+    instance :
+        
+
+    Returns
+    -------
+
+    """
     return True
 
 
 @attr.s(frozen=True)
 class TypeChecker(object):
-    """
-    A ``type`` property checker.
-
+    """A ``type`` property checker.
+    
     A `TypeChecker` performs type checking for an `IValidator`. Type
     checks to perform are updated using `TypeChecker.redefine` or
     `TypeChecker.redefine_many` and removed via `TypeChecker.remove`.
     Each of these return a new `TypeChecker` object.
 
-    Arguments:
-
-        type_checkers (dict):
-
-            The initial mapping of types to their checking functions.
+    Parameters
+    ----------
+    type_checkers :
+        dict
+    The :
+        initial mapping of types to their checking functions
+
+    Returns
+    -------
+
     """
     _type_checkers = attr.ib(default=pmap(), converter=pmap)
 
     def is_type(self, instance, type):
-        """
-        Check if the instance is of the appropriate type.
-
-        Arguments:
-
-            instance (object):
-
-                The instance to check
-
-            type (str):
-
-                The name of the type that is expected.
-
-        Returns:
-
+        """Check if the instance is of the appropriate type.
+
+        Parameters
+        ----------
+        instance :
+            object
+        The :
+            instance to check
+        type :
+            str
+        The :
+            name of the type that is expected
+
+        Returns
+        -------
+        type
             bool: Whether it conformed.
 
-
-        Raises:
-
-            `jsonschema.exceptions.UndefinedTypeCheck`:
-                if type is unknown to this object.
+        Raises
+        ------
+        jsonschema.exceptions
+            UndefinedTypeCheck
+        if
+            type is unknown to this object
+
         """
         try:
             fn = self._type_checkers[type]
@@ -95,65 +206,77 @@
         return fn(self, instance)
 
     def redefine(self, type, fn):
-        """
-        Produce a new checker with the given type redefined.
-
-        Arguments:
-
-            type (str):
-
-                The name of the type to check.
-
-            fn (collections.Callable):
-
-                A function taking exactly two parameters - the type
-                checker calling the function and the instance to check.
-                The function should return true if instance is of this
-                type and false otherwise.
-
-        Returns:
-
+        """Produce a new checker with the given type redefined.
+
+        Parameters
+        ----------
+        type :
+            str
+        The :
+            name of the type to check
+        fn :
+            collections
+        A :
+            function taking exactly two parameters
+        checker :
+            calling the function and the instance to check
+        The :
+            function should return true if instance is of this
+        type :
+            and false otherwise
+
+        Returns
+        -------
+        type
             A new `TypeChecker` instance.
+
         """
         return self.redefine_many({type: fn})
 
     def redefine_many(self, definitions=()):
-        """
-        Produce a new checker with the given types redefined.
-
-        Arguments:
-
-            definitions (dict):
-
-                A dictionary mapping types to their checking functions.
-
-        Returns:
-
+        """Produce a new checker with the given types redefined.
+
+        Parameters
+        ----------
+        definitions :
+            dict (Default value = ())
+        A :
+            dictionary mapping types to their checking functions
+
+        Returns
+        -------
+        type
             A new `TypeChecker` instance.
+
         """
         return attr.evolve(
             self, type_checkers=self._type_checkers.update(definitions),
         )
 
     def remove(self, *types):
-        """
-        Produce a new checker with the given types forgotten.
-
-        Arguments:
-
-            types (~collections.Iterable):
-
-                the names of the types to remove.
-
-        Returns:
-
+        """Produce a new checker with the given types forgotten.
+
+        Parameters
+        ----------
+        types :
+            collections
+        the :
+            names of the types to remove
+        *types :
+            
+
+        Returns
+        -------
+        type
             A new `TypeChecker` instance
 
-        Raises:
-
-            `jsonschema.exceptions.UndefinedTypeCheck`:
-
-                if any given type is unknown to this object
+        Raises
+        ------
+        jsonschema.exceptions
+            UndefinedTypeCheck
+        if
+            any given type is unknown to this object
+
         """
 
         checkers = self._type_checkers
