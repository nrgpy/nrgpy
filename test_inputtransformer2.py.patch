# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/tests/test_inputtransformer2.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/tests/test_inputtransformer2.py
@@ -67,11 +67,13 @@
 
 MULTILINE_SYSTEM_ASSIGN_AFTER_DEDENT = ("""\
 def test():
+    """ """
   for i in range(1):
     print(i)
   res =! ls
 """.splitlines(keepends=True), (4, 7), '''\
 def test():
+    """ """
   for i in range(1):
     print(i)
   res =get_ipython().getoutput(\' ls\')
@@ -136,15 +138,21 @@
 
 
 def null_cleanup_transformer(lines):
-    """
-    A cleanup transform that returns an empty list.
+    """A cleanup transform that returns an empty list.
+
+    Parameters
+    ----------
+    lines :
+        
+
+    Returns
+    -------
+
     """
     return []
 
 def check_make_token_by_line_never_ends_empty():
-    """
-    Check that not sequence of single or double characters ends up leading to en empty list of tokens
-    """
+    """Check that not sequence of single or double characters ends up leading to en empty list of tokens"""
     from string import printable
     for c in printable:
         nt.assert_not_equal(make_tokens_by_line(c)[-1], [])
@@ -152,6 +160,21 @@
             nt.assert_not_equal(make_tokens_by_line(c+k)[-1], [])
 
 def check_find(transformer, case, match=True):
+    """
+
+    Parameters
+    ----------
+    transformer :
+        
+    case :
+        
+    match :
+         (Default value = True)
+
+    Returns
+    -------
+
+    """
     sample, expected_start, _  = case
     tbl = make_tokens_by_line(sample)
     res = transformer.find(tbl)
@@ -163,25 +186,42 @@
         nt.assert_is(res, None)
 
 def check_transform(transformer_cls, case):
+    """
+
+    Parameters
+    ----------
+    transformer_cls :
+        
+    case :
+        
+
+    Returns
+    -------
+
+    """
     lines, start, expected = case
     transformer = transformer_cls(start)
     nt.assert_equal(transformer.transform(lines), expected)
 
 def test_continued_line():
+    """ """
     lines = MULTILINE_MAGIC_ASSIGN[0]
     nt.assert_equal(ipt2.find_end_of_continued_line(lines, 1), 2)
 
     nt.assert_equal(ipt2.assemble_continued_line(lines, (1, 5), 2), "foo    bar")
 
 def test_find_assign_magic():
+    """ """
     check_find(ipt2.MagicAssign, MULTILINE_MAGIC_ASSIGN)
     check_find(ipt2.MagicAssign, MULTILINE_SYSTEM_ASSIGN, match=False)
     check_find(ipt2.MagicAssign, MULTILINE_SYSTEM_ASSIGN_AFTER_DEDENT, match=False)
 
 def test_transform_assign_magic():
+    """ """
     check_transform(ipt2.MagicAssign, MULTILINE_MAGIC_ASSIGN)
 
 def test_find_assign_system():
+    """ """
     check_find(ipt2.SystemAssign, MULTILINE_SYSTEM_ASSIGN)
     check_find(ipt2.SystemAssign, MULTILINE_SYSTEM_ASSIGN_AFTER_DEDENT)
     check_find(ipt2.SystemAssign, (["a =  !ls\n"], (1, 5), None))
@@ -189,30 +229,36 @@
     check_find(ipt2.SystemAssign, MULTILINE_MAGIC_ASSIGN, match=False)
 
 def test_transform_assign_system():
+    """ """
     check_transform(ipt2.SystemAssign, MULTILINE_SYSTEM_ASSIGN)
     check_transform(ipt2.SystemAssign, MULTILINE_SYSTEM_ASSIGN_AFTER_DEDENT)
 
 def test_find_magic_escape():
+    """ """
     check_find(ipt2.EscapedCommand, MULTILINE_MAGIC)
     check_find(ipt2.EscapedCommand, INDENTED_MAGIC)
     check_find(ipt2.EscapedCommand, MULTILINE_MAGIC_ASSIGN, match=False)
 
 def test_transform_magic_escape():
+    """ """
     check_transform(ipt2.EscapedCommand, MULTILINE_MAGIC)
     check_transform(ipt2.EscapedCommand, INDENTED_MAGIC)
     check_transform(ipt2.EscapedCommand, CRLF_MAGIC)
 
 def test_find_autocalls():
+    """ """
     for case in [AUTOCALL_QUOTE, AUTOCALL_QUOTE2, AUTOCALL_PAREN]:
         print("Testing %r" % case[0])
         check_find(ipt2.EscapedCommand, case)
 
 def test_transform_autocall():
+    """ """
     for case in [AUTOCALL_QUOTE, AUTOCALL_QUOTE2, AUTOCALL_PAREN]:
         print("Testing %r" % case[0])
         check_transform(ipt2.EscapedCommand, case)
 
 def test_find_help():
+    """ """
     for case in [SIMPLE_HELP, DETAILED_HELP, MAGIC_HELP, HELP_IN_EXPR]:
         check_find(ipt2.HelpEnd, case)
 
@@ -230,6 +276,7 @@
     check_find(ipt2.HelpEnd, (["foo = '''bar?\n"], None, None), match=False)
 
 def test_transform_help():
+    """ """
     tf = ipt2.HelpEnd((1, 0), (1, 9))
     nt.assert_equal(tf.transform(HELP_IN_EXPR[0]), HELP_IN_EXPR[2])
 
@@ -243,10 +290,9 @@
     nt.assert_equal(tf.transform(HELP_UNICODE[0]), HELP_UNICODE[2])
 
 def test_find_assign_op_dedent():
-    """
-    be careful that empty token like dedent are not counted as parens
-    """
+    """be careful that empty token like dedent are not counted as parens"""
     class Tk:
+        """ """
         def __init__(self, s):
             self.string = s
 
@@ -254,6 +300,7 @@
     nt.assert_equal(_find_assign_op([Tk(s) for s in ('','(', 'a','=','b', ')', '=' ,'5')]), 6)
 
 def test_check_complete():
+    """ """
     cc = ipt2.TransformerManager().check_complete
     nt.assert_equal(cc("a = 1"), ('complete', None))
     nt.assert_equal(cc("for a in range(5):"), ('incomplete', 4))
@@ -287,10 +334,15 @@
     nt.assert_equal(cc("def f():\n  x=0\n  \\\n  "), ('incomplete', 2))
 
 def test_check_complete_II():
-    """
-    Test that multiple line strings are properly handled.
-
+    """Test that multiple line strings are properly handled.
+    
     Separate test function for convenience
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     """
     cc = ipt2.TransformerManager().check_complete
@@ -298,6 +350,7 @@
 
 
 def test_null_cleanup_transformer():
+    """ """
     manager = ipt2.TransformerManager()
     manager.cleanup_transforms.insert(0, null_cleanup_transformer)
     assert  manager.transform_cell("") == ""
@@ -306,8 +359,20 @@
 
 
 def test_side_effects_I():
+    """ """
     count = 0
     def counter(lines):
+        """
+
+        Parameters
+        ----------
+        lines :
+            
+
+        Returns
+        -------
+
+        """
         nonlocal count
         count += 1
         return lines
@@ -323,8 +388,20 @@
 
 
 def test_side_effects_II():
+    """ """
     count = 0
     def counter(lines):
+        """
+
+        Parameters
+        ----------
+        lines :
+            
+
+        Returns
+        -------
+
+        """
         nonlocal count
         count += 1
         return lines
