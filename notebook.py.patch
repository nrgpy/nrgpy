# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tqdm/notebook.py
+++ b/..//venv/lib/python3.8/site-packages/tqdm/notebook.py
@@ -75,14 +75,26 @@
 
 
 class tqdm_notebook(std_tqdm):
-    """
-    Experimental IPython/Jupyter Notebook widget using tqdm!
-    """
+    """Experimental IPython/Jupyter Notebook widget using tqdm!"""
 
     @staticmethod
     def status_printer(_, total=None, desc=None, ncols=None):
-        """
-        Manage the printing of an IPython/Jupyter Notebook progress bar widget.
+        """Manage the printing of an IPython/Jupyter Notebook progress bar widget.
+
+        Parameters
+        ----------
+        _ :
+            
+        total :
+             (Default value = None)
+        desc :
+             (Default value = None)
+        ncols :
+             (Default value = None)
+
+        Returns
+        -------
+
         """
         # Fallback to text bar if there's no total
         # DEPRECATED: replaced with an 'info' style bar
@@ -130,6 +142,23 @@
 
     @staticmethod
     def format_meter(n, total, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        n :
+            
+        total :
+            
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         if total and kwargs.get('bar_format', None) is None:
             kwargs = kwargs.copy()
             kwargs['bar_format'] = "{l_bar}<bar/>{r_bar}"
@@ -138,6 +167,23 @@
     def display(self, msg=None, pos=None,
                 # additional signals
                 close=False, bar_style=None):
+        """
+
+        Parameters
+        ----------
+        msg :
+             (Default value = None)
+        pos :
+             (Default value = None)
+        # additional signalsclose :
+             (Default value = False)
+        bar_style :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         # Note: contrary to native tqdm, msg='' does NOT clear bar
         # goal is to keep all infos if error happens so user knows
         # at which iteration the loop failed.
@@ -186,11 +232,23 @@
 
     @property
     def colour(self):
+        """ """
         if hasattr(self, 'container'):
             return self.container.children[-2].style.bar_color
 
     @colour.setter
     def colour(self, bar_color):
+        """
+
+        Parameters
+        ----------
+        bar_color :
+            
+
+        Returns
+        -------
+
+        """
         if hasattr(self, 'container'):
             self.container.children[-2].style.bar_color = bar_color
 
@@ -242,6 +300,19 @@
         # since this could be a shared bar which the user will `reset()`
 
     def update(self, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         try:
             return super(tqdm_notebook, self).update(*args, **kwargs)
         # NB: except ... [ as ...] breaks IPython async KeyboardInterrupt
@@ -254,6 +325,19 @@
         # since this could be a shared bar which the user will `reset()`
 
     def close(self, *args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         super(tqdm_notebook, self).close(*args, **kwargs)
         # Try to detect if there was an error or KeyboardInterrupt
         # in manual mode: if n < total, things probably got wrong
@@ -266,18 +350,36 @@
                 self.sp(close=True)
 
     def moveto(self, *_, **__):
+        """
+
+        Parameters
+        ----------
+        *_ :
+            
+        **__ :
+            
+
+        Returns
+        -------
+
+        """
         # void -> avoid extraneous `\n` in IPython output cell
         return
 
     def reset(self, total=None):
-        """
-        Resets to 0 iterations for repeated use.
-
+        """Resets to 0 iterations for repeated use.
+        
         Consider combining with `leave=True`.
 
         Parameters
         ----------
-        total  : int or float, optional. Total to use for the new bar.
+        total :
+             (Default value = None)
+
+        Returns
+        -------
+
+        
         """
         _, pbar, _ = self.container.children
         pbar.bar_style = ''
@@ -289,9 +391,19 @@
 
 
 def tnrange(*args, **kwargs):
-    """
-    A shortcut for `tqdm.notebook.tqdm(xrange(*args), **kwargs)`.
+    """A shortcut for `tqdm.notebook.tqdm(xrange(*args), **kwargs)`.
     On Python3+, `range` is used instead of `xrange`.
+
+    Parameters
+    ----------
+    *args :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
     """
     return tqdm_notebook(_range(*args), **kwargs)
 
