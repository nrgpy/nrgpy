# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/logger.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/logger.py
@@ -52,11 +52,23 @@
 
     # logmode is a validated property
     def _set_mode(self,mode):
+        """
+
+        Parameters
+        ----------
+        mode :
+            
+
+        Returns
+        -------
+
+        """
         if mode not in ['append','backup','global','over','rotate']:
             raise ValueError('invalid log mode %s given' % mode)
         self._logmode = mode
 
     def _get_mode(self):
+        """ """
         return self._logmode
 
     logmode = property(_get_mode,_set_mode)
@@ -64,8 +76,28 @@
     def logstart(self, logfname=None, loghead=None, logmode=None,
                  log_output=False, timestamp=False, log_raw_input=False):
         """Generate a new log-file with a default header.
-
-        Raises RuntimeError if the log has already been started"""
+        
+        Raises RuntimeError if the log has already been started
+
+        Parameters
+        ----------
+        logfname :
+             (Default value = None)
+        loghead :
+             (Default value = None)
+        logmode :
+             (Default value = None)
+        log_output :
+             (Default value = False)
+        timestamp :
+             (Default value = False)
+        log_raw_input :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
 
         if self.logfile is not None:
             raise RuntimeError('Log file is already active: %s' %
@@ -127,7 +159,17 @@
         self.log_active = True
 
     def switch_log(self,val):
-        """Switch logging on/off. val should be ONLY a boolean."""
+        """Switch logging on/off. val should be ONLY a boolean.
+
+        Parameters
+        ----------
+        val :
+            
+
+        Returns
+        -------
+
+        """
 
         if val not in [False,True,0,1]:
             raise ValueError('Call switch_log ONLY with a boolean argument, '
@@ -166,15 +208,26 @@
 
     def log(self, line_mod, line_ori):
         """Write the sources to a log.
-
+        
         Inputs:
-
+        
         - line_mod: possibly modified input, such as the transformations made
           by input prefilters or input handlers of various kinds. This should
           always be valid Python.
-
+        
         - line_ori: unmodified input line from the user. This is not
           necessarily valid Python.
+
+        Parameters
+        ----------
+        line_mod :
+            
+        line_ori :
+            
+
+        Returns
+        -------
+
         """
 
         # Write the log line, but decide which one according to the
@@ -185,7 +238,19 @@
             self.log_write(line_mod)
 
     def log_write(self, data, kind='input'):
-        """Write data to the log file, if active"""
+        """Write data to the log file, if active
+
+        Parameters
+        ----------
+        data :
+            
+        kind :
+             (Default value = 'input')
+
+        Returns
+        -------
+
+        """
 
         #print 'data: %r' % data # dbg
         if self.log_active and data:
@@ -202,10 +267,18 @@
 
     def logstop(self):
         """Fully stop logging and close log file.
-
+        
         In order to start logging again, a new logstart() call needs to be
         made, possibly (though not necessarily) with a new filename, mode and
-        other options."""
+        other options.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
 
         if self.logfile is not None:
             self.logfile.close()
