# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/distutils/fcompiler/intel.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/distutils/fcompiler/intel.py
@@ -10,17 +10,41 @@
 
 
 def intel_version_match(type):
+    """
+
+    Parameters
+    ----------
+    type :
+        
+
+    Returns
+    -------
+
+    """
     # Match against the important stuff in the version string
     return simple_version_match(start=r'Intel.*?Fortran.*?(?:%s).*?Version' % (type,))
 
 
 class BaseIntelFCompiler(FCompiler):
+    """ """
     def update_executables(self):
+        """ """
         f = dummy_fortran_file()
         self.executables['version_cmd'] = ['<F77>', '-FI', '-V', '-c',
                                            f + '.f', '-o', f + '.o']
 
     def runtime_library_dir_option(self, dir):
+        """
+
+        Parameters
+        ----------
+        dir :
+            
+
+        Returns
+        -------
+
+        """
         # TODO: could use -Xlinker here, if it's supported
         assert "," not in dir
 
@@ -28,6 +52,7 @@
 
 
 class IntelFCompiler(BaseIntelFCompiler):
+    """ """
 
     compiler_type = 'intel'
     compiler_aliases = ('ifort',)
@@ -51,20 +76,25 @@
     module_include_switch = '-I'
 
     def get_flags_free(self):
+        """ """
         return ['-FR']
 
     def get_flags(self):
+        """ """
         return ['-fPIC']
 
     def get_flags_opt(self):  # Scipy test failures with -O2
+        """ """
         v = self.get_version()
         mpopt = 'openmp' if v and v < '15' else 'qopenmp'
         return ['-fp-model', 'strict', '-O1', '-{}'.format(mpopt)]
 
     def get_flags_arch(self):
+        """ """
         return []
 
     def get_flags_linker_so(self):
+        """ """
         opt = FCompiler.get_flags_linker_so(self)
         v = self.get_version()
         if v and v >= '8.0':
@@ -81,6 +111,7 @@
 
 
 class IntelItaniumFCompiler(IntelFCompiler):
+    """ """
     compiler_type = 'intele'
     compiler_aliases = ()
     description = 'Intel Fortran Compiler for Itanium apps'
@@ -101,6 +132,7 @@
 
 
 class IntelEM64TFCompiler(IntelFCompiler):
+    """ """
     compiler_type = 'intelem'
     compiler_aliases = ()
     description = 'Intel Fortran Compiler for 64-bit apps'
@@ -120,14 +152,17 @@
         }
 
     def get_flags(self):
+        """ """
         return ['-fPIC']
 
     def get_flags_opt(self):  # Scipy test failures with -O2
+        """ """
         v = self.get_version()
         mpopt = 'openmp' if v and v < '15' else 'qopenmp'
         return ['-fp-model', 'strict', '-O1', '-{}'.format(mpopt)]
 
     def get_flags_arch(self):
+        """ """
         return []
 
 # Is there no difference in the version string between the above compilers
@@ -135,11 +170,13 @@
 
 
 class IntelVisualFCompiler(BaseIntelFCompiler):
+    """ """
     compiler_type = 'intelv'
     description = 'Intel Visual Fortran Compiler for 32-bit apps'
     version_match = intel_version_match('32-bit|IA-32')
 
     def update_executables(self):
+        """ """
         f = dummy_fortran_file()
         self.executables['version_cmd'] = ['<F77>', '/FI', '/c',
                                            f + '.f', '/o', f + '.o']
@@ -164,26 +201,43 @@
     module_include_switch = '/I'
 
     def get_flags(self):
+        """ """
         opt = ['/nologo', '/MD', '/nbs', '/names:lowercase', '/assume:underscore']
         return opt
 
     def get_flags_free(self):
+        """ """
         return []
 
     def get_flags_debug(self):
+        """ """
         return ['/4Yb', '/d2']
 
     def get_flags_opt(self):
+        """ """
         return ['/O1']  # Scipy test failures with /O2
 
     def get_flags_arch(self):
+        """ """
         return ["/arch:IA32", "/QaxSSE3"]
 
     def runtime_library_dir_option(self, dir):
+        """
+
+        Parameters
+        ----------
+        dir :
+            
+
+        Returns
+        -------
+
+        """
         raise NotImplementedError
 
 
 class IntelItaniumVisualFCompiler(IntelVisualFCompiler):
+    """ """
     compiler_type = 'intelev'
     description = 'Intel Visual Fortran Compiler for Itanium apps'
 
@@ -204,12 +258,14 @@
 
 
 class IntelEM64VisualFCompiler(IntelVisualFCompiler):
+    """ """
     compiler_type = 'intelvem'
     description = 'Intel Visual Fortran Compiler for 64-bit apps'
 
     version_match = simple_version_match(start=r'Intel\(R\).*?64,')
 
     def get_flags_arch(self):
+        """ """
         return []
 
 
