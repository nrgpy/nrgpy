# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/external/decorators/_decorators.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/external/decorators/_decorators.py
@@ -25,9 +25,8 @@
 
 
 def skipif(skip_condition, msg=None):
-    """
-    Make function raise SkipTest exception if a given condition is true.
-
+    """Make function raise SkipTest exception if a given condition is true.
+    
     If the condition is a callable, it is used at runtime to dynamically
     make the decision. This is useful for tests that may require costly
     imports, to delay the cost until the test suite is actually executed.
@@ -50,10 +49,20 @@
     -----
     The decorator itself is decorated with the ``nose.tools.make_decorator``
     function in order to transmit function name, and various other metadata.
-
     """
 
     def skip_decorator(f):
+        """
+
+        Parameters
+        ----------
+        f :
+            
+
+        Returns
+        -------
+
+        """
         # Local import to avoid a hard nose dependency and only incur the
         # import time overhead at actual test-time.
         import nose
@@ -65,7 +74,19 @@
             skip_val = lambda : skip_condition
 
         def get_msg(func,msg=None):
-            """Skip message with information about function being skipped."""
+            """Skip message with information about function being skipped.
+
+            Parameters
+            ----------
+            func :
+                
+            msg :
+                 (Default value = None)
+
+            Returns
+            -------
+
+            """
             if msg is None:
                 out = 'Test skipped due to test condition'
             else:
@@ -76,14 +97,38 @@
         # We need to define *two* skippers because Python doesn't allow both
         # return with value and yield inside the same function.
         def skipper_func(*args, **kwargs):
-            """Skipper for normal test functions."""
+            """Skipper for normal test functions.
+
+            Parameters
+            ----------
+            *args :
+                
+            **kwargs :
+                
+
+            Returns
+            -------
+
+            """
             if skip_val():
                 raise nose.SkipTest(get_msg(f,msg))
             else:
                 return f(*args, **kwargs)
 
         def skipper_gen(*args, **kwargs):
-            """Skipper for test generators."""
+            """Skipper for test generators.
+
+            Parameters
+            ----------
+            *args :
+                
+            **kwargs :
+                
+
+            Returns
+            -------
+
+            """
             if skip_val():
                 raise nose.SkipTest(get_msg(f,msg))
             else:
@@ -101,8 +146,7 @@
     return skip_decorator
 
 def knownfailureif(fail_condition, msg=None):
-    """
-    Make function raise KnownFailureTest exception if given condition is true.
+    """Make function raise KnownFailureTest exception if given condition is true.
 
     Parameters
     ----------
@@ -123,17 +167,40 @@
     -----
     The decorator itself is decorated with the ``nose.tools.make_decorator``
     function in order to transmit function name, and various other metadata.
-
     """
     if msg is None:
         msg = 'Test skipped due to known failure'
 
     def knownfail_decorator(f):
+        """
+
+        Parameters
+        ----------
+        f :
+            
+
+        Returns
+        -------
+
+        """
         # Local import to avoid a hard nose dependency and only incur the
         # import time overhead at actual test-time.
         import nose
 
         def knownfailer(*args, **kwargs):
+            """
+
+            Parameters
+            ----------
+            *args :
+                
+            **kwargs :
+                
+
+            Returns
+            -------
+
+            """
             if fail_condition:
                 raise KnownFailureTest(msg)
             else:
