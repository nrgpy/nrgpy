# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pkginfo/tests/test_commandline.py
+++ b/..//venv/lib/python3.8/site-packages/pkginfo/tests/test_commandline.py
@@ -1,12 +1,25 @@
 import unittest
 
 class Test__parse_options(unittest.TestCase):
+    """ """
 
     def _callFUT(self, args):
+        """
+
+        Parameters
+        ----------
+        args :
+            
+
+        Returns
+        -------
+
+        """
         from pkginfo.commandline import _parse_options
         return _parse_options(args)
 
     def test_empty(self):
+        """ """
         import io
         import sys
         from pkginfo.commandline import __doc__ as usage
@@ -23,30 +36,62 @@
         self.assertTrue(firstline in buf.getvalue())
 
     def test_nonempty(self):
+        """ """
         options, args = self._callFUT(['foo'])
         self.assertEqual(args, ['foo'])
 
 class BaseTests(unittest.TestCase):
+    """ """
 
     def _getTargetClass(self):
+        """ """
         from pkginfo.commandline import Base
         return Base
 
     def _makeOne(self, options):
+        """
+
+        Parameters
+        ----------
+        options :
+            
+
+        Returns
+        -------
+
+        """
         return self._getTargetClass()(options)
 
     def test___init___defaults(self):
+        """ """
         base = self._makeOne(_Options(fields=()))
         self.assertTrue(base._fields is None)
 
     def test___init___w_fields(self):
+        """ """
         fields = object()
         base = self._makeOne(_Options(fields=fields))
         self.assertTrue(base._fields is fields)
 
 class _FormatterBase(object):
+    """ """
 
     def _capture_output(self, func, *args, **kw):
+        """
+
+        Parameters
+        ----------
+        func :
+            
+        *args :
+            
+        **kw :
+            
+
+        Returns
+        -------
+
+        """
         import io
         import sys
         # Emulate stdout as wanting "native" strings
@@ -59,60 +104,106 @@
         return buf.getvalue()
 
     def _no_output(self, simple, meta):
+        """
+
+        Parameters
+        ----------
+        simple :
+            
+        meta :
+            
+
+        Returns
+        -------
+
+        """
         import sys
         with _Monkey(sys, stdout=object()):  # raise if write
             simple(meta)
 
 class SimpleTests(unittest.TestCase, _FormatterBase):
+    """ """
 
     def _getTargetClass(self):
+        """ """
         from pkginfo.commandline import Simple
         return Simple
 
     def _makeOne(self, options):
+        """
+
+        Parameters
+        ----------
+        options :
+            
+
+        Returns
+        -------
+
+        """
         return self._getTargetClass()(options)
 
     def test___init___(self):
+        """ """
         simple = self._makeOne(_Options(fields=None, skip=True))
         self.assertTrue(simple._skip)
 
     def test___call___w_empty_fields(self):
+        """ """
         simple = self._makeOne(_Options(fields=(), skip=False))
         meta = _Meta()
         self._no_output(simple, meta)
 
     def test___call___w_skip_and_value_None_no_fields(self):
+        """ """
         simple = self._makeOne(_Options(fields=(), skip=True))
         meta = _Meta(foo=None)
         self._no_output(simple, meta)
 
     def test___call___w_skip_and_value_empty_tuple_explicit_fields(self):
+        """ """
         simple = self._makeOne(_Options(fields=('foo',), skip=True))
         meta = _Meta(foo=(), bar='Bar')
         self._no_output(simple, meta)
 
     def test___call___w_skip_but_values_explicit_fields(self):
+        """ """
         simple = self._makeOne(_Options(fields=('foo',), skip=True))
         meta = _Meta(foo='Foo')
         output = self._capture_output(simple, meta)
         self.assertEqual(output, 'foo: Foo\n')
 
 class SingleLineTests(unittest.TestCase, _FormatterBase):
+    """ """
 
     def _getTargetClass(self):
+        """ """
         from pkginfo.commandline import SingleLine
         return SingleLine
 
     def _makeOne(self, options):
+        """
+
+        Parameters
+        ----------
+        options :
+            
+
+        Returns
+        -------
+
+        """
         return self._getTargetClass()(options)
 
     def test___init___(self):
+        """ """
         single = self._makeOne(
             _Options(fields=None, item_delim='I', sequence_delim='S'))
         self.assertEqual(single._item_delim, 'I')
         self.assertEqual(single._sequence_delim, 'S')
 
     def test___call__wo_fields_wo_list(self):
+        """ """
         single = self._makeOne(
             _Options(fields=(), item_delim='|',
                      sequence_delim=object()))  # raise if used
@@ -121,6 +212,7 @@
         self.assertEqual(output, 'Bar|Foo\n')
 
     def test___call__w_fields_w_list(self):
+        """ """
         single = self._makeOne(
             _Options(fields=('foo', 'bar'), item_delim='|',
                      sequence_delim='*'))
@@ -129,20 +221,35 @@
         self.assertEqual(output, 'Foo|Bar1*Bar2\n')
 
 class CSVTests(unittest.TestCase, _FormatterBase):
+    """ """
 
     def _getTargetClass(self):
+        """ """
         from pkginfo.commandline import CSV
         return CSV
 
     def _makeOne(self, options):
+        """
+
+        Parameters
+        ----------
+        options :
+            
+
+        Returns
+        -------
+
+        """
         return self._getTargetClass()(options)
 
     def test___init___(self):
+        """ """
         csv = self._makeOne(
             _Options(fields=None, sequence_delim='S'))
         self.assertEqual(csv._sequence_delim, 'S')
 
     def test___call__wo_fields_wo_list(self):
+        """ """
         meta = _Meta(foo='Foo', bar='Bar')
         csv = self._makeOne(
             _Options(fields=None,
@@ -151,6 +258,7 @@
         self.assertEqual(output, 'bar,foo\r\nBar,Foo\r\n')
 
     def test___call__w_fields_w_list(self):
+        """ """
         meta = _Meta(foo='Foo', bar=['Bar1', 'Bar2'], baz='Baz')
         csv = self._makeOne(
             _Options(fields=('foo', 'bar'), item_delim='|',
@@ -159,21 +267,36 @@
         self.assertEqual(output, 'foo,bar\r\nFoo,Bar1*Bar2\r\n')
 
 class INITests(unittest.TestCase, _FormatterBase):
+    """ """
 
     def _getTargetClass(self):
+        """ """
         from pkginfo.commandline import INI
         return INI
 
     def _makeOne(self, options):
+        """
+
+        Parameters
+        ----------
+        options :
+            
+
+        Returns
+        -------
+
+        """
         return self._getTargetClass()(options)
 
     def test___call___duplicate(self):
+        """ """
         ini = self._makeOne(_Options(fields=('foo',)))
         meta = _Meta(name='foo', version='0.1', foo='Foo')
         ini._parser.add_section('foo-0.1')
         self.assertRaises(ValueError, ini, meta)
 
     def test___call___wo_fields_wo_list(self):
+        """ """
         ini = self._makeOne(_Options(fields=None))
         meta = _Meta(name='foo', version='0.1', foo='Foo')
         ini(meta)
@@ -186,6 +309,7 @@
         self.assertEqual(cp.get('foo-0.1', 'foo'), 'Foo')
 
     def test___call___w_fields_w_list(self):
+        """ """
         ini = self._makeOne(_Options(fields=('foo', 'bar')))
         meta = _Meta(name='foo', version='0.1',
                      foo='Foo', bar=['Bar1', 'Bar2'], baz='Baz')
@@ -197,27 +321,43 @@
         self.assertEqual(cp.get('foo-0.1', 'bar'), 'Bar1\n\tBar2')
 
 class JSONtests(unittest.TestCase, _FormatterBase):
+    """ """
 
     def _getTargetClass(self):
+        """ """
         from pkginfo.commandline import JSON
         return JSON
 
     def _makeOne(self, options):
+        """
+
+        Parameters
+        ----------
+        options :
+            
+
+        Returns
+        -------
+
+        """
         return self._getTargetClass()(options)
 
     def test___call___duplicate_with_meta_and_fields(self):
+        """ """
         json = self._makeOne(_Options(fields=('name',)))
         meta = _Meta(name='foo', version='0.1', foo='Foo')
         json._mapping['name'] = 'foo'
         self.assertRaises(ValueError, json, meta)
 
     def test___call___duplicate_with_meta_wo_fields(self):
+        """ """
         json = self._makeOne(_Options(fields=None))
         meta = _Meta(name='foo', version='0.1', foo='Foo')
         json._mapping['name'] = 'foo'
         self.assertRaises(ValueError, json, meta)
 
     def test___call___wo_fields_wo_list(self):
+        """ """
         from collections import OrderedDict
 
         json = self._makeOne(_Options(fields=None))
@@ -228,6 +368,7 @@
         self.assertEqual(expected, json._mapping)
 
     def test___call___w_fields_w_list(self):
+        """ """
         from collections import OrderedDict
 
         json = self._makeOne(_Options(fields=('foo', 'bar')))
@@ -239,6 +380,7 @@
         self.assertEqual(expected, json._mapping)
 
     def test___call___output(self):
+        """ """
         from collections import OrderedDict
         import json as json_parser
 
@@ -253,8 +395,22 @@
         self.assertEqual(expected, output)
 
 class Test_main(unittest.TestCase):
+    """ """
 
     def _callFUT(self, args, monkey='simple'):
+        """
+
+        Parameters
+        ----------
+        args :
+            
+        monkey :
+             (Default value = 'simple')
+
+        Returns
+        -------
+
+        """
         from pkginfo.commandline import main
         from pkginfo.commandline import _FORMATTERS
         before = _FORMATTERS[monkey]
@@ -267,8 +423,22 @@
         return dummy
 
     def test_w_mising_dist(self):
+        """ """
         from pkginfo import commandline as MUT
         def _get_metadata(path_or_module, md_version):
+            """
+
+            Parameters
+            ----------
+            path_or_module :
+                
+            md_version :
+                
+
+            Returns
+            -------
+
+            """
             self.assertEqual(path_or_module, 'foo')
             self.assertEqual(md_version, None)
             return None
@@ -278,9 +448,23 @@
         self.assertTrue(formatter._finished)
 
     def test_w_dist_wo_download_url(self):
+        """ """
         from pkginfo import commandline as MUT
         meta = _Meta(download_url=None)
         def _get_metadata(path_or_module, md_version):
+            """
+
+            Parameters
+            ----------
+            path_or_module :
+                
+            md_version :
+                
+
+            Returns
+            -------
+
+            """
             self.assertEqual(path_or_module, '/path/to/foo')
             self.assertEqual(md_version, None)
             return meta
@@ -292,9 +476,23 @@
         self.assertEqual(meta.download_url, 'http://example.com/foo')
 
     def test_w_dist_w_download_url(self):
+        """ """
         from pkginfo import commandline as MUT
         meta = _Meta(download_url='http://example.com/dist/foo')
         def _get_metadata(path_or_module, md_version):
+            """
+
+            Parameters
+            ----------
+            path_or_module :
+                
+            md_version :
+                
+
+            Returns
+            -------
+
+            """
             self.assertEqual(path_or_module, '/path/to/foo')
             self.assertEqual(md_version, None)
             return meta
@@ -306,12 +504,14 @@
         self.assertEqual(meta.download_url, 'http://example.com/dist/foo')
 
 class _Options(object):
+    """ """
 
     def __init__(self, **kw):
         for k in kw:
             self.__dict__[k] = kw[k]
 
 class _Meta(object):
+    """ """
 
     def __init__(self, **kw):
         for k in kw:
@@ -321,6 +521,7 @@
         return iter(sorted(self.__dict__))
 
 class _Monkey(object):
+    """ """
     # context-manager for replacing module names in the scope of a test.
 
     def __init__(self, module, **kw):
@@ -337,6 +538,7 @@
             setattr(self.module, key, value)
 
 class _Formatter(object):
+    """ """
 
     _finished = False
 
@@ -347,4 +549,5 @@
         self._called_with.append(meta)
 
     def finish(self):
+        """ """
         self._finished = True
