# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/lib/arraypad.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/lib/arraypad.py
@@ -16,23 +16,26 @@
 
 
 def _round_if_needed(arr, dtype):
-    """
-    Rounds arr inplace if destination dtype is integer.
-
-    Parameters
-    ----------
-    arr : ndarray
-        Input array.
-    dtype : dtype
-        The dtype of the destination array.
+    """Rounds arr inplace if destination dtype is integer.
+
+    Parameters
+    ----------
+    arr :
+        
+    dtype :
+        
+
+    Returns
+    -------
+
+    
     """
     if np.issubdtype(dtype, np.integer):
         arr.round(out=arr)
 
 
 def _slice_at_axis(sl, axis):
-    """
-    Construct tuple of slices to slice an array in the given dimension.
+    """Construct tuple of slices to slice an array in the given dimension.
 
     Parameters
     ----------
@@ -56,9 +59,8 @@
 
 
 def _view_roi(array, original_area_slice, axis):
-    """
-    Get a view of the current region of interest during iterative padding.
-
+    """Get a view of the current region of interest during iterative padding.
+    
     When padding multiple dimensions iteratively corner values are
     unnecessarily overwritten multiple times. This function reduces the
     working area for the first dimensions so that corners are excluded.
@@ -75,8 +77,8 @@
 
     Returns
     -------
-    roi : ndarray
-        The region of interest of the original `array`.
+
+    
     """
     axis += 1
     sl = (slice(None),) * axis + original_area_slice[axis:]
@@ -84,8 +86,7 @@
 
 
 def _pad_simple(array, pad_width, fill_value=None):
-    """
-    Pad array on all sides with either a single value or undefined values.
+    """Pad array on all sides with either a single value or undefined values.
 
     Parameters
     ----------
@@ -95,15 +96,12 @@
         Pad width on both sides for each dimension in `arr`.
     fill_value : scalar, optional
         If provided the padded area is filled with this value, otherwise
-        the pad area left undefined.
-
-    Returns
-    -------
-    padded : ndarray
-        The padded array with the same dtype as`array`. Its order will default
-        to C-style if `array` is not F-contiguous.
-    original_area_slice : tuple
-        A tuple of slices pointing to the area of the original array.
+        the pad area left undefined. (Default value = None)
+
+    Returns
+    -------
+
+    
     """
     # Allocate grown array
     new_shape = tuple(
@@ -127,21 +125,23 @@
 
 
 def _set_pad_area(padded, axis, width_pair, value_pair):
-    """
-    Set empty-padded area in given dimension.
-
-    Parameters
-    ----------
-    padded : ndarray
-        Array with the pad area which is modified inplace.
-    axis : int
-        Dimension with the pad area to set.
-    width_pair : (int, int)
-        Pair of widths that mark the pad area on both sides in the given
-        dimension.
-    value_pair : tuple of scalars or ndarrays
-        Values inserted into the pad area on each side. It must match or be
-        broadcastable to the shape of `arr`.
+    """Set empty-padded area in given dimension.
+
+    Parameters
+    ----------
+    padded :
+        
+    axis :
+        
+    width_pair :
+        
+    value_pair :
+        
+
+    Returns
+    -------
+
+    
     """
     left_slice = _slice_at_axis(slice(None, width_pair[0]), axis)
     padded[left_slice] = value_pair[0]
@@ -152,8 +152,7 @@
 
 
 def _get_edges(padded, axis, width_pair):
-    """
-    Retrieve edge values from empty-padded array in given dimension.
+    """Retrieve edge values from empty-padded array in given dimension.
 
     Parameters
     ----------
@@ -167,10 +166,8 @@
 
     Returns
     -------
-    left_edge, right_edge : ndarray
-        Edge values of the valid area in `padded` in the given dimension. Its
-        shape will always match `padded` except for the dimension given by
-        `axis` which will have a length of 1.
+
+    
     """
     left_index = width_pair[0]
     left_slice = _slice_at_axis(slice(left_index, left_index + 1), axis)
@@ -184,8 +181,7 @@
 
 
 def _get_linear_ramps(padded, axis, width_pair, end_value_pair):
-    """
-    Construct linear ramps for empty-padded array in given dimension.
+    """Construct linear ramps for empty-padded array in given dimension.
 
     Parameters
     ----------
@@ -202,8 +198,8 @@
 
     Returns
     -------
-    left_ramp, right_ramp : ndarray
-        Linear ramps to set on both sides of `padded`.
+
+    
     """
     edge_pair = _get_edges(padded, axis, width_pair)
 
@@ -231,8 +227,7 @@
 
 
 def _get_stats(padded, axis, width_pair, length_pair, stat_func):
-    """
-    Calculate statistic for the empty-padded array in given dimension.
+    """Calculate statistic for the empty-padded array in given dimension.
 
     Parameters
     ----------
@@ -253,8 +248,8 @@
 
     Returns
     -------
-    left_stat, right_stat : ndarray
-        Calculated statistic for both sides of `padded`.
+
+    
     """
     # Calculate indices of the edges of the area with original values
     left_index = width_pair[0]
@@ -297,8 +292,7 @@
 
 
 def _set_reflect_both(padded, axis, width_pair, method, include_edge=False):
-    """
-    Pad `axis` of `arr` with reflection.
+    """Pad `axis` of `arr` with reflection.
 
     Parameters
     ----------
@@ -313,13 +307,12 @@
         Controls method of reflection; options are 'even' or 'odd'.
     include_edge : bool
         If true, edge value is included in reflection, otherwise the edge
-        value forms the symmetric axis to the reflection.
-
-    Returns
-    -------
-    pad_amt : tuple of ints, length 2
-        New index positions of padding to do along the `axis`. If these are
-        both 0, padding is done in this dimension.
+        value forms the symmetric axis to the reflection. (Default value = False)
+
+    Returns
+    -------
+
+    
     """
     left_pad, right_pad = width_pair
     old_length = padded.shape[axis] - right_pad - left_pad
@@ -382,8 +375,7 @@
 
 
 def _set_wrap_both(padded, axis, width_pair):
-    """
-    Pad `axis` of `arr` with wrapped values.
+    """Pad `axis` of `arr` with wrapped values.
 
     Parameters
     ----------
@@ -397,9 +389,8 @@
 
     Returns
     -------
-    pad_amt : tuple of ints, length 2
-        New index positions of padding to do along the `axis`. If these are
-        both 0, padding is done in this dimension.
+
+    
     """
     left_pad, right_pad = width_pair
     period = padded.shape[axis] - right_pad - left_pad
@@ -455,9 +446,8 @@
 
 
 def _as_pairs(x, ndim, as_index=False):
-    """
-    Broadcast `x` to an array with the shape (`ndim`, 2).
-
+    """Broadcast `x` to an array with the shape (`ndim`, 2).
+    
     A helper function for `pad` that prepares and validates arguments like
     `pad_width` for iteration in pairs.
 
@@ -469,18 +459,14 @@
         Number of pairs the broadcasted `x` will have.
     as_index : bool, optional
         If `x` is not None, try to round each element of `x` to an integer
-        (dtype `np.intp`) and ensure every element is positive.
+        (dtype `np.intp`) and ensure every element is positive. (Default value = False)
 
     Returns
     -------
     pairs : nested iterables, shape (`ndim`, 2)
         The broadcasted version of `x`.
 
-    Raises
-    ------
-    ValueError
-        If `as_index` is True and `x` contains negative elements.
-        Or if `x` is not broadcastable to the shape (`ndim`, 2).
+    
     """
     if x is None:
         # Pass through None as a special case, otherwise np.round(x) fails
@@ -522,6 +508,23 @@
 
 
 def _pad_dispatcher(array, pad_width, mode=None, **kwargs):
+    """
+
+    Parameters
+    ----------
+    array :
+        
+    pad_width :
+        
+    mode :
+         (Default value = None)
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     return (array,)
 
 
@@ -531,8 +534,7 @@
 
 @array_function_dispatch(_pad_dispatcher, module='numpy')
 def pad(array, pad_width, mode='constant', **kwargs):
-    """
-    Pad an array.
+    """Pad an array.
 
     Parameters
     ----------
@@ -547,91 +549,78 @@
         axes.
     mode : str or function, optional
         One of the following string values or a user supplied function.
-
         'constant' (default)
-            Pads with a constant value.
+        Pads with a constant value.
         'edge'
-            Pads with the edge values of array.
+        Pads with the edge values of array.
         'linear_ramp'
-            Pads with the linear ramp between end_value and the
-            array edge value.
+        Pads with the linear ramp between end_value and the
+        array edge value.
         'maximum'
-            Pads with the maximum value of all or part of the
-            vector along each axis.
+        Pads with the maximum value of all or part of the
+        vector along each axis.
         'mean'
-            Pads with the mean value of all or part of the
-            vector along each axis.
+        Pads with the mean value of all or part of the
+        vector along each axis.
         'median'
-            Pads with the median value of all or part of the
-            vector along each axis.
+        Pads with the median value of all or part of the
+        vector along each axis.
         'minimum'
-            Pads with the minimum value of all or part of the
-            vector along each axis.
+        Pads with the minimum value of all or part of the
+        vector along each axis.
         'reflect'
-            Pads with the reflection of the vector mirrored on
-            the first and last values of the vector along each
-            axis.
+        Pads with the reflection of the vector mirrored on
+        the first and last values of the vector along each
+        axis.
         'symmetric'
-            Pads with the reflection of the vector mirrored
-            along the edge of the array.
+        Pads with the reflection of the vector mirrored
+        along the edge of the array.
         'wrap'
-            Pads with the wrap of the vector along the axis.
-            The first values are used to pad the end and the
-            end values are used to pad the beginning.
+        Pads with the wrap of the vector along the axis.
+        The first values are used to pad the end and the
+        end values are used to pad the beginning.
         'empty'
-            Pads with undefined values.
-
-            .. versionadded:: 1.17
-
+        Pads with undefined values.
+        .. versionadded:: 1.17
         <function>
-            Padding function, see Notes.
+        Padding function, see Notes.
     stat_length : sequence or int, optional
         Used in 'maximum', 'mean', 'median', and 'minimum'.  Number of
         values at edge of each axis used to calculate the statistic value.
-
         ((before_1, after_1), ... (before_N, after_N)) unique statistic
         lengths for each axis.
-
         ((before, after),) yields same before and after statistic lengths
         for each axis.
-
         (stat_length,) or int is a shortcut for before = after = statistic
         length for all axes.
-
         Default is ``None``, to use the entire axis.
     constant_values : sequence or scalar, optional
         Used in 'constant'.  The values to set the padded values for each
         axis.
-
         ``((before_1, after_1), ... (before_N, after_N))`` unique pad constants
         for each axis.
-
         ``((before, after),)`` yields same before and after constants for each
         axis.
-
         ``(constant,)`` or ``constant`` is a shortcut for ``before = after = constant`` for
         all axes.
-
         Default is 0.
     end_values : sequence or scalar, optional
         Used in 'linear_ramp'.  The values used for the ending value of the
         linear_ramp and that will form the edge of the padded array.
-
         ``((before_1, after_1), ... (before_N, after_N))`` unique end values
         for each axis.
-
         ``((before, after),)`` yields same before and after end values for each
         axis.
-
         ``(constant,)`` or ``constant`` is a shortcut for ``before = after = constant`` for
         all axes.
-
         Default is 0.
     reflect_type : {'even', 'odd'}, optional
         Used in 'reflect', and 'symmetric'.  The 'even' style is the
         default with an unaltered reflection around the edge value.  For
         the 'odd' style, the extended part of the array is created by
         subtracting the reflected values from two times the edge value.
+    **kwargs :
+        
 
     Returns
     -------
@@ -642,19 +631,19 @@
     Notes
     -----
     .. versionadded:: 1.7.0
-
+    
     For an array with rank greater than 1, some of the padding of later
     axes is calculated from padding of previous axes.  This is easiest to
     think about with a rank 2 array where the corners of the padded array
     are calculated by using padded values from the first axis.
-
+    
     The padding function, if used, should modify a rank 1 array in-place. It
     has the following signature::
-
+    
         padding_func(vector, iaxis_pad_width, iaxis, kwargs)
-
+    
     where
-
+    
         vector : ndarray
             A rank 1 array already padded with zeros.  Padded values are
             vector[:iaxis_pad_width[0]] and vector[-iaxis_pad_width[1]:].
@@ -667,28 +656,27 @@
             The axis currently being calculated.
         kwargs : dict
             Any keyword arguments the function requires.
-
     Examples
     --------
     >>> a = [1, 2, 3, 4, 5]
     >>> np.pad(a, (2, 3), 'constant', constant_values=(4, 6))
     array([4, 4, 1, ..., 6, 6, 6])
-
+    
     >>> np.pad(a, (2, 3), 'edge')
     array([1, 1, 1, ..., 5, 5, 5])
-
+    
     >>> np.pad(a, (2, 3), 'linear_ramp', end_values=(5, -4))
     array([ 5,  3,  1,  2,  3,  4,  5,  2, -1, -4])
-
+    
     >>> np.pad(a, (2,), 'maximum')
     array([5, 5, 1, 2, 3, 4, 5, 5, 5])
-
+    
     >>> np.pad(a, (2,), 'mean')
     array([3, 3, 1, 2, 3, 4, 5, 3, 3])
-
+    
     >>> np.pad(a, (2,), 'median')
     array([3, 3, 1, 2, 3, 4, 5, 3, 3])
-
+    
     >>> a = [[1, 2], [3, 4]]
     >>> np.pad(a, ((3, 2), (2, 3)), 'minimum')
     array([[1, 1, 1, 2, 1, 1, 1],
@@ -698,23 +686,23 @@
            [3, 3, 3, 4, 3, 3, 3],
            [1, 1, 1, 2, 1, 1, 1],
            [1, 1, 1, 2, 1, 1, 1]])
-
+    
     >>> a = [1, 2, 3, 4, 5]
     >>> np.pad(a, (2, 3), 'reflect')
     array([3, 2, 1, 2, 3, 4, 5, 4, 3, 2])
-
+    
     >>> np.pad(a, (2, 3), 'reflect', reflect_type='odd')
     array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8])
-
+    
     >>> np.pad(a, (2, 3), 'symmetric')
     array([2, 1, 1, 2, 3, 4, 5, 5, 4, 3])
-
+    
     >>> np.pad(a, (2, 3), 'symmetric', reflect_type='odd')
     array([0, 1, 1, 2, 3, 4, 5, 5, 6, 7])
-
+    
     >>> np.pad(a, (2, 3), 'wrap')
     array([4, 5, 1, 2, 3, 4, 5, 1, 2, 3])
-
+    
     >>> def pad_with(vector, pad_width, iaxis, kwargs):
     ...     pad_value = kwargs.get('padder', 10)
     ...     vector[:pad_width[0]] = pad_value
