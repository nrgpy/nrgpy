# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/reshape/pivot.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/reshape/pivot.py
@@ -47,6 +47,35 @@
     margins_name="All",
     observed=False,
 ) -> "DataFrame":
+    """
+
+    Parameters
+    ----------
+    data :
+        
+    values :
+         (Default value = None)
+    index :
+         (Default value = None)
+    columns :
+         (Default value = None)
+    aggfunc :
+         (Default value = "mean")
+    fill_value :
+         (Default value = None)
+    margins :
+         (Default value = False)
+    dropna :
+         (Default value = True)
+    margins_name :
+         (Default value = "All")
+    observed :
+         (Default value = False)
+
+    Returns
+    -------
+
+    """
     index = _convert_by(index)
     columns = _convert_by(columns)
 
@@ -210,6 +239,35 @@
     margins_name: str = "All",
     fill_value=None,
 ):
+    """
+
+    Parameters
+    ----------
+    table: Union["Series" :
+        
+    "DataFrame"] :
+        
+    data :
+        
+    values :
+        
+    rows :
+        
+    cols :
+        
+    aggfunc :
+        
+    observed :
+         (Default value = None)
+    margins_name: str :
+         (Default value = "All")
+    fill_value :
+         (Default value = None)
+
+    Returns
+    -------
+
+    """
     if not isinstance(margins_name, str):
         raise ValueError("margins_name argument must be a string")
 
@@ -286,6 +344,23 @@
 
 
 def _compute_grand_margin(data, values, aggfunc, margins_name: str = "All"):
+    """
+
+    Parameters
+    ----------
+    data :
+        
+    values :
+        
+    aggfunc :
+        
+    margins_name: str :
+         (Default value = "All")
+
+    Returns
+    -------
+
+    """
 
     if values:
         grand_margin = {}
@@ -310,12 +385,48 @@
 def _generate_marginal_results(
     table, data, values, rows, cols, aggfunc, observed, margins_name: str = "All",
 ):
+    """
+
+    Parameters
+    ----------
+    table :
+        
+    data :
+        
+    values :
+        
+    rows :
+        
+    cols :
+        
+    aggfunc :
+        
+    observed :
+        
+    margins_name: str :
+         (Default value = "All")
+
+    Returns
+    -------
+
+    """
     if len(cols) > 0:
         # need to "interleave" the margins
         table_pieces = []
         margin_keys = []
 
         def _all_key(key):
+            """
+
+            Parameters
+            ----------
+            key :
+                
+
+            Returns
+            -------
+
+            """
             return (key, margins_name) + ("",) * (len(cols) - 1)
 
         if len(rows) > 0:
@@ -384,11 +495,35 @@
 def _generate_marginal_results_without_values(
     table: "DataFrame", data, rows, cols, aggfunc, observed, margins_name: str = "All"
 ):
+    """
+
+    Parameters
+    ----------
+    table: "DataFrame" :
+        
+    data :
+        
+    rows :
+        
+    cols :
+        
+    aggfunc :
+        
+    observed :
+        
+    margins_name: str :
+         (Default value = "All")
+
+    Returns
+    -------
+
+    """
     if len(cols) > 0:
         # need to "interleave" the margins
         margin_keys: Union[List, Index] = []
 
         def _all_key():
+            """ """
             if len(cols) == 1:
                 return margins_name
             return (margins_name,) + ("",) * (len(cols) - 1)
@@ -420,6 +555,17 @@
 
 
 def _convert_by(by):
+    """
+
+    Parameters
+    ----------
+    by :
+        
+
+    Returns
+    -------
+
+    """
     if by is None:
         by = []
     elif (
@@ -441,6 +587,25 @@
     columns: Optional[Union[Label, Sequence[Label]]] = None,
     values: Optional[Union[Label, Sequence[Label]]] = None,
 ) -> "DataFrame":
+    """
+
+    Parameters
+    ----------
+    data: "DataFrame" :
+        
+    index: Optional[Union[Label :
+        
+    Sequence[Label]]] :
+         (Default value = None)
+    columns: Optional[Union[Label :
+        
+    values: Optional[Union[Label :
+        
+
+    Returns
+    -------
+
+    """
     if columns is None:
         raise TypeError("pivot() missing 1 required argument: 'columns'")
 
@@ -489,8 +654,7 @@
     dropna: bool = True,
     normalize=False,
 ) -> "DataFrame":
-    """
-    Compute a simple cross tabulation of two (or more) factors. By default
+    """Compute a simple cross tabulation of two (or more) factors. By default
     computes a frequency table of the factors unless an array of values and an
     aggregation function are passed.
 
@@ -502,15 +666,15 @@
         Values to group by in the columns.
     values : array-like, optional
         Array of values to aggregate according to the factors.
-        Requires `aggfunc` be specified.
+        Requires `aggfunc` be specified. (Default value = None)
     rownames : sequence, default None
-        If passed, must match number of row arrays passed.
+        If passed, must match number of row arrays passed. (Default value = None)
     colnames : sequence, default None
-        If passed, must match number of column arrays passed.
+        If passed, must match number of column arrays passed. (Default value = None)
     aggfunc : function, optional
-        If specified, requires `values` be specified as well.
+        If specified, requires `values` be specified as well. (Default value = None)
     margins : bool, default False
-        Add row/column margins (subtotals).
+        Add row/column margins (subtotals). (Default value = False)
     margins_name : str, default 'All'
         Name of the row/column that will contain the totals
         when margins is True.
@@ -518,11 +682,14 @@
         Do not include columns whose entries are all NaN.
     normalize : bool, {'all', 'index', 'columns'}, or {0,1}, default False
         Normalize by dividing all values by the sum of values.
-
         - If passed 'all' or `True`, will normalize over all values.
         - If passed 'index' will normalize over each row.
         - If passed 'columns' will normalize over each column.
-        - If margins is `True`, will also normalize margin values.
+        - If margins is `True`, will also normalize margin values. (Default value = False)
+    margins_name: str :
+         (Default value = "All")
+    dropna: bool :
+         (Default value = True)
 
     Returns
     -------
@@ -533,21 +700,23 @@
     --------
     DataFrame.pivot : Reshape data based on column values.
     pivot_table : Create a pivot table as a DataFrame.
-
     Notes
     -----
     Any Series passed will have their name attributes used unless row or column
     names for the cross-tabulation are specified.
-
+    
     Any input passed containing Categorical data will have **all** of its
     categories included in the cross-tabulation, even if the actual data does
     not contain any instances of a particular category.
-
+    
     In the event that there aren't overlapping indexes an empty DataFrame will
     be returned.
-
     Examples
     --------
+    
+    Here 'c' and 'f' are not represented in the data and will not be
+    shown in the output because dropna is True by default. Set
+    dropna=False to preserve categories with no data.
     >>> a = np.array(["foo", "foo", "foo", "foo", "bar", "bar",
     ...               "bar", "bar", "foo", "foo", "foo"], dtype=object)
     >>> b = np.array(["one", "one", "one", "two", "one", "one",
@@ -561,11 +730,7 @@
     a
     bar    1     2    1     0
     foo    2     2    1     2
-
-    Here 'c' and 'f' are not represented in the data and will not be
-    shown in the output because dropna is True by default. Set
-    dropna=False to preserve categories with no data.
-
+    
     >>> foo = pd.Categorical(['a', 'b'], categories=['a', 'b', 'c'])
     >>> bar = pd.Categorical(['d', 'e'], categories=['d', 'e', 'f'])
     >>> pd.crosstab(foo, bar)
@@ -639,6 +804,23 @@
 
 
 def _normalize(table, normalize, margins: bool, margins_name="All"):
+    """
+
+    Parameters
+    ----------
+    table :
+        
+    normalize :
+        
+    margins: bool :
+        
+    margins_name :
+         (Default value = "All")
+
+    Returns
+    -------
+
+    """
 
     if not isinstance(normalize, (bool, str)):
         axis_subs = {0: "index", 1: "columns"}
@@ -720,6 +902,21 @@
 
 
 def _get_names(arrs, names, prefix: str = "row"):
+    """
+
+    Parameters
+    ----------
+    arrs :
+        
+    names :
+        
+    prefix: str :
+         (Default value = "row")
+
+    Returns
+    -------
+
+    """
     if names is None:
         names = []
         for i, arr in enumerate(arrs):
