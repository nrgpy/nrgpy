# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/test_expressions.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/test_expressions.py
@@ -37,7 +37,19 @@
 
 @pytest.mark.skipif(not expr._USE_NUMEXPR, reason="not using numexpr")
 class TestExpressions:
+    """ """
     def setup_method(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
 
         self.frame = _frame.copy()
         self.frame2 = _frame2.copy()
@@ -46,9 +58,33 @@
         self._MIN_ELEMENTS = expr._MIN_ELEMENTS
 
     def teardown_method(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         expr._MIN_ELEMENTS = self._MIN_ELEMENTS
 
     def run_arithmetic(self, df, other):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        other :
+            
+
+        Returns
+        -------
+
+        """
         expr._MIN_ELEMENTS = 0
         operations = ["add", "sub", "mul", "mod", "truediv", "floordiv"]
         for test_flex in [True, False]:
@@ -72,10 +108,20 @@
                 tm.assert_equal(expected, result)
 
     def run_binary(self, df, other):
-        """
-        tests solely that the result is the same whether or not numexpr is
+        """tests solely that the result is the same whether or not numexpr is
         enabled.  Need to test whether the function does the correct thing
         elsewhere.
+
+        Parameters
+        ----------
+        df :
+            
+        other :
+            
+
+        Returns
+        -------
+
         """
         expr._MIN_ELEMENTS = 0
         expr.set_test_mode(True)
@@ -99,6 +145,21 @@
                 tm.assert_equal(expected, result)
 
     def run_frame(self, df, other, run_binary=True):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+        other :
+            
+        run_binary :
+             (Default value = True)
+
+        Returns
+        -------
+
+        """
         self.run_arithmetic(df, other)
         if run_binary:
             expr.set_use_numexpr(False)
@@ -127,6 +188,17 @@
         ],
     )
     def test_arithmetic(self, df):
+        """
+
+        Parameters
+        ----------
+        df :
+            
+
+        Returns
+        -------
+
+        """
         # TODO: FIGURE OUT HOW TO GET RUN_BINARY TO WORK WITH MIXED=...
         # can't do arithmetic because comparison methods try to do *entire*
         # frame instead of by-column
@@ -136,6 +208,7 @@
         self.run_frame(df, df, run_binary=should)
 
     def test_invalid(self):
+        """ """
 
         # no op
         result = expr._can_use_numexpr(
@@ -167,7 +240,25 @@
     )
     @pytest.mark.parametrize("left,right", [(_frame, _frame2), (_mixed, _mixed2)])
     def test_binary_ops(self, opname, op_str, left, right):
+        """
+
+        Parameters
+        ----------
+        opname :
+            
+        op_str :
+            
+        left :
+            
+        right :
+            
+
+        Returns
+        -------
+
+        """
         def testit():
+            """ """
 
             if opname == "pow":
                 # TODO: get this working
@@ -210,7 +301,25 @@
     )
     @pytest.mark.parametrize("left,right", [(_frame, _frame2), (_mixed, _mixed2)])
     def test_comparison_ops(self, opname, op_str, left, right):
+        """
+
+        Parameters
+        ----------
+        opname :
+            
+        op_str :
+            
+        left :
+            
+        right :
+            
+
+        Returns
+        -------
+
+        """
         def testit():
+            """ """
             f12 = left + 1
             f22 = right + 1
 
@@ -240,7 +349,21 @@
     @pytest.mark.parametrize("cond", [True, False])
     @pytest.mark.parametrize("df", [_frame, _frame2, _mixed, _mixed2])
     def test_where(self, cond, df):
+        """
+
+        Parameters
+        ----------
+        cond :
+            
+        df :
+            
+
+        Returns
+        -------
+
+        """
         def testit():
+            """ """
             c = np.empty(df.shape, dtype=np.bool_)
             c.fill(cond)
             result = expr.where(c, df.values, df.values + 1)
@@ -259,6 +382,19 @@
         "op_str,opname", [("/", "truediv"), ("//", "floordiv"), ("**", "pow")]
     )
     def test_bool_ops_raise_on_arithmetic(self, op_str, opname):
+        """
+
+        Parameters
+        ----------
+        op_str :
+            
+        opname :
+            
+
+        Returns
+        -------
+
+        """
         df = DataFrame({"a": np.random.rand(10) > 0.5, "b": np.random.rand(10) > 0.5})
 
         msg = f"operator {repr(op_str)} not implemented for bool dtypes"
@@ -287,6 +423,19 @@
         "op_str,opname", [("+", "add"), ("*", "mul"), ("-", "sub")]
     )
     def test_bool_ops_warn_on_arithmetic(self, op_str, opname):
+        """
+
+        Parameters
+        ----------
+        op_str :
+            
+        opname :
+            
+
+        Returns
+        -------
+
+        """
         n = 10
         df = DataFrame({"a": np.random.rand(n) > 0.5, "b": np.random.rand(n) > 0.5})
 
@@ -353,6 +502,19 @@
         ],
     )
     def test_bool_ops_column_name_dtype(self, test_input, expected):
+        """
+
+        Parameters
+        ----------
+        test_input :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # GH 22383 - .ne fails if columns containing column name 'dtype'
         result = test_input.loc[:, ["a", "dtype"]].ne(test_input.loc[:, ["a", "dtype"]])
         tm.assert_frame_equal(result, expected)
@@ -362,6 +524,19 @@
     )
     @pytest.mark.parametrize("axis", (0, 1))
     def test_frame_series_axis(self, axis, arith):
+        """
+
+        Parameters
+        ----------
+        axis :
+            
+        arith :
+            
+
+        Returns
+        -------
+
+        """
         # GH#26736 Dataframe.floordiv(Series, axis=1) fails
 
         df = self.frame
@@ -393,6 +568,21 @@
     @pytest.mark.parametrize("box", [DataFrame, Series, Index])
     @pytest.mark.parametrize("scalar", [-5, 5])
     def test_python_semantics_with_numexpr_installed(self, op, box, scalar):
+        """
+
+        Parameters
+        ----------
+        op :
+            
+        box :
+            
+        scalar :
+            
+
+        Returns
+        -------
+
+        """
         # https://github.com/pandas-dev/pandas/issues/36047
         expr._MIN_ELEMENTS = 0
         data = np.arange(-50, 50)
