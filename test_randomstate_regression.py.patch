# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/random/tests/test_randomstate_regression.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/random/tests/test_randomstate_regression.py
@@ -11,8 +11,10 @@
 
 
 class TestRegression:
+    """ """
 
     def test_VonMises_range(self):
+        """ """
         # Make sure generated random variables are in [-pi, pi].
         # Regression test for ticket #986.
         for mu in np.linspace(-7., 7., 5):
@@ -20,6 +22,7 @@
             assert_(np.all(r > -np.pi) and np.all(r <= np.pi))
 
     def test_hypergeometric_range(self):
+        """ """
         # Test for ticket #921
         assert_(np.all(random.hypergeometric(3, 18, 11, size=10) < 4))
         assert_(np.all(random.hypergeometric(18, 3, 11, size=10) > 0))
@@ -36,6 +39,7 @@
             assert_(random.hypergeometric(*arg) > 0)
 
     def test_logseries_convergence(self):
+        """ """
         # Test for ticket #923
         N = 1000
         random.seed(0)
@@ -52,6 +56,7 @@
         assert_(freq < 0.23, msg)
 
     def test_shuffle_mixed_dimension(self):
+        """ """
         # Test for trac ticket #2074
         for t in [[1, 2, 3, None],
                   [(1, 1), (2, 2), (3, 3), None],
@@ -64,6 +69,7 @@
             assert_array_equal(np.array(shuffled, dtype=object), expected)
 
     def test_call_within_randomstate(self):
+        """ """
         # Check that custom RandomState does not call into global state
         m = random.RandomState()
         res = np.array([0, 8, 7, 2, 1, 9, 4, 7, 0, 3])
@@ -74,6 +80,7 @@
             assert_array_equal(m.choice(10, size=10, p=np.ones(10)/10.), res)
 
     def test_multivariate_normal_size_types(self):
+        """ """
         # Test for multivariate_normal issue with 'size' argument.
         # Check that the multivariate_normal size argument can be a
         # numpy integer.
@@ -82,6 +89,7 @@
         random.multivariate_normal([0], [[0]], size=np.int64(1))
 
     def test_beta_small_parameters(self):
+        """ """
         # Test that beta with small a and b parameters does not produce
         # NaNs due to roundoff errors causing 0 / 0, gh-5851
         random.seed(1234567890)
@@ -89,6 +97,7 @@
         assert_(not np.any(np.isnan(x)), 'Nans in random.beta')
 
     def test_choice_sum_of_probs_tolerance(self):
+        """ """
         # The sum of probs should be 1.0 with some tolerance.
         # For low precision dtypes the tolerance was too tight.
         # See numpy github issue 6123.
@@ -102,6 +111,7 @@
             assert_raises(ValueError, random.choice, a, p=probs*0.9)
 
     def test_shuffle_of_array_of_different_length_strings(self):
+        """ """
         # Test that permuting an array of different length strings
         # will not cause a segfault on garbage collection
         # Tests gh-7710
@@ -117,6 +127,7 @@
         gc.collect()
 
     def test_shuffle_of_array_of_objects(self):
+        """ """
         # Test that permuting an array of objects will not cause
         # a segfault on garbage collection.
         # See gh-7719
@@ -131,7 +142,9 @@
         gc.collect()
 
     def test_permutation_subclass(self):
+        """ """
         class N(np.ndarray):
+            """ """
             pass
 
         random.seed(1)
@@ -141,6 +154,7 @@
         assert_array_equal(orig, np.arange(3).view(N))
 
         class M:
+            """ """
             a = np.arange(5)
 
             def __array__(self):
@@ -153,18 +167,21 @@
         assert_array_equal(m.__array__(), np.arange(5))
 
     def test_warns_byteorder(self):
+        """ """
         # GH 13159
         other_byteord_dt = '<i4' if sys.byteorder == 'big' else '>i4'
         with pytest.deprecated_call(match='non-native byteorder is not'):
             random.randint(0, 200, size=10, dtype=other_byteord_dt)
 
     def test_named_argument_initialization(self):
+        """ """
         # GH 13669
         rs1 = np.random.RandomState(123456789)
         rs2 = np.random.RandomState(seed=123456789)
         assert rs1.randint(0, 100) == rs2.randint(0, 100)
 
     def test_choice_retun_dtype(self):
+        """ """
         # GH 9867
         c = np.random.choice(10, p=[.1]*10, size=2)
         assert c.dtype == np.dtype(int)
@@ -178,6 +195,7 @@
     @pytest.mark.skipif(np.iinfo('l').max < 2**32,
                         reason='Cannot test with 32-bit C long')
     def test_randint_117(self):
+        """ """
         # GH 14189
         random.seed(0)
         expected = np.array([2357136044, 2546248239, 3071714933, 3626093760,
@@ -187,6 +205,7 @@
         assert_array_equal(actual, expected)
 
     def test_p_zero_stream(self):
+        """ """
         # Regression test for gh-14522.  Ensure that future versions
         # generate the same variates as version 1.16.
         np.random.seed(12345)
@@ -194,6 +213,7 @@
                            [0, 0, 0, 1, 1])
 
     def test_n_zero_stream(self):
+        """ """
         # Regression test for gh-14522.  Ensure that future versions
         # generate the same variates as version 1.16.
         np.random.seed(8675309)
