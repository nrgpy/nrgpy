# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/parso/grammar.py
+++ b/..//venv/lib/python3.8/site-packages/parso/grammar.py
@@ -19,10 +19,16 @@
 
 
 class Grammar(object):
-    """
-    :py:func:`parso.load_grammar` returns instances of this class.
-
+    """:py:func:`parso.load_grammar` returns instances of this class.
+    
     Creating custom none-python grammars by calling this is not supported, yet.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     #:param text: A BNF representation of your grammar.
     _error_normalizer_config = None
@@ -40,39 +46,55 @@
         self._hashed = hashlib.sha256(text.encode("utf-8")).hexdigest()
 
     def parse(self, code=None, **kwargs):
-        """
-        If you want to parse a Python file you want to start here, most likely.
-
+        """If you want to parse a Python file you want to start here, most likely.
+        
         If you need finer grained control over the parsed instance, there will be
         other ways to access it.
 
-        :param str code: A unicode or bytes string. When it's not possible to
+        Parameters
+        ----------
+        str :
+            code: A unicode or bytes string. When it's not possible to
             decode bytes to a string, returns a
             :py:class:`UnicodeDecodeError`.
-        :param bool error_recovery: If enabled, any code will be returned. If
+        bool :
+            error_recovery: If enabled, any code will be returned. If
             it is invalid, it will be returned as an error node. If disabled,
             you will get a ParseError when encountering syntax errors in your
             code.
-        :param str start_symbol: The grammar rule (nonterminal) that you want
+        str :
+            start_symbol: The grammar rule (nonterminal) that you want
             to parse. Only allowed to be used when error_recovery is False.
-        :param str path: The path to the file you want to open. Only needed for caching.
-        :param bool cache: Keeps a copy of the parser tree in RAM and on disk
+        str :
+            path: The path to the file you want to open. Only needed for caching.
+        bool :
+            cache: Keeps a copy of the parser tree in RAM and on disk
             if a path is given. Returns the cached trees if the corresponding
             files on disk have not changed. Note that this stores pickle files
             on your file system (e.g. for Linux in ``~/.cache/parso/``).
-        :param bool diff_cache: Diffs the cached python module against the new
+        bool :
+            diff_cache: Diffs the cached python module against the new
             code and tries to parse only the parts that have changed. Returns
             the same (changed) module that is found in cache. Using this option
             requires you to not do anything anymore with the cached modules
             under that path, because the contents of it might change. This
             option is still somewhat experimental. If you want stability,
             please don't use it.
-        :param bool cache_path: If given saves the parso cache in this
+        bool :
+            cache_path: If given saves the parso cache in this
             directory. If not given, defaults to the default cache places on
             each platform.
-
-        :return: A subclass of :py:class:`parso.tree.NodeOrLeaf`. Typically a
+        code :
+             (Default value = None)
+        **kwargs :
+            
+
+        Returns
+        -------
+        type
+            A subclass of :py:class:`parso.tree.NodeOrLeaf`. Typically a
             :py:class:`parso.python.tree.Module`.
+
         """
         if 'start_pos' in kwargs:
             raise TypeError("parse() got an unexpected keyword argument.")
@@ -81,11 +103,37 @@
     def _parse(self, code=None, error_recovery=True, path=None,
                start_symbol=None, cache=False, diff_cache=False,
                cache_path=None, file_io=None, start_pos=(1, 0)):
-        """
-        Wanted python3.5 * operator and keyword only arguments. Therefore just
+        """Wanted python3.5 * operator and keyword only arguments. Therefore just
         wrap it all.
         start_pos here is just a parameter internally used. Might be public
         sometime in the future.
+
+        Parameters
+        ----------
+        code :
+             (Default value = None)
+        error_recovery :
+             (Default value = True)
+        path :
+             (Default value = None)
+        start_symbol :
+             (Default value = None)
+        cache :
+             (Default value = False)
+        diff_cache :
+             (Default value = False)
+        cache_path :
+             (Default value = None)
+        file_io :
+             (Default value = None)
+        start_pos :
+             (Default value = (1)
+        0) :
+            
+
+        Returns
+        -------
+
         """
         if code is None and path is None and file_io is None:
             raise TypeError("Please provide either code or a path.")
@@ -155,16 +203,25 @@
         return root_node
 
     def _get_token_namespace(self):
+        """ """
         ns = self._token_namespace
         if ns is None:
             raise ValueError("The token namespace should be set.")
         return ns
 
     def iter_errors(self, node):
-        """
-        Given a :py:class:`parso.tree.NodeOrLeaf` returns a generator of
+        """Given a :py:class:`parso.tree.NodeOrLeaf` returns a generator of
         :py:class:`parso.normalizer.Issue` objects. For Python this is
         a list of syntax/indentation errors.
+
+        Parameters
+        ----------
+        node :
+            
+
+        Returns
+        -------
+
         """
         if self._error_normalizer_config is None:
             raise ValueError("No error normalizer specified for this grammar.")
@@ -172,9 +229,33 @@
         return self._get_normalizer_issues(node, self._error_normalizer_config)
 
     def refactor(self, base_node, node_to_str_map):
+        """
+
+        Parameters
+        ----------
+        base_node :
+            
+        node_to_str_map :
+            
+
+        Returns
+        -------
+
+        """
         return RefactoringNormalizer(node_to_str_map).walk(base_node)
 
     def _get_normalizer(self, normalizer_config):
+        """
+
+        Parameters
+        ----------
+        normalizer_config :
+            
+
+        Returns
+        -------
+
+        """
         if normalizer_config is None:
             normalizer_config = self._default_normalizer_config
             if normalizer_config is None:
@@ -183,14 +264,37 @@
         return normalizer_config.create_normalizer(self)
 
     def _normalize(self, node, normalizer_config=None):
-        """
-        TODO this is not public, yet.
+        """TODO this is not public, yet.
         The returned code will be normalized, e.g. PEP8 for Python.
+
+        Parameters
+        ----------
+        node :
+            
+        normalizer_config :
+             (Default value = None)
+
+        Returns
+        -------
+
         """
         normalizer = self._get_normalizer(normalizer_config)
         return normalizer.walk(node)
 
     def _get_normalizer_issues(self, node, normalizer_config=None):
+        """
+
+        Parameters
+        ----------
+        node :
+            
+        normalizer_config :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         normalizer = self._get_normalizer(normalizer_config)
         normalizer.walk(node)
         return normalizer.issues
@@ -202,6 +306,7 @@
 
 
 class PythonGrammar(Grammar):
+    """ """
     _error_normalizer_config = ErrorFinderConfig()
     _token_namespace = PythonTokenTypes
     _start_nonterminal = 'file_input'
@@ -216,22 +321,70 @@
         self.version_info = version_info
 
     def _tokenize_lines(self, lines, **kwargs):
+        """
+
+        Parameters
+        ----------
+        lines :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         return tokenize_lines(lines, self.version_info, **kwargs)
 
     def _tokenize(self, code):
+        """
+
+        Parameters
+        ----------
+        code :
+            
+
+        Returns
+        -------
+
+        """
         # Used by Jedi.
         return tokenize(code, self.version_info)
 
 
 def load_grammar(**kwargs):
-    """
-    Loads a :py:class:`parso.Grammar`. The default version is the current Python
+    """Loads a :py:class:`parso.Grammar`. The default version is the current Python
     version.
 
-    :param str version: A python version string, e.g. ``version='3.8'``.
-    :param str path: A path to a grammar file
+    Parameters
+    ----------
+    str :
+        version: A python version string, e.g. ``version='3.8'``.
+    str :
+        path: A path to a grammar file
+    **kwargs :
+        
+
+    Returns
+    -------
+
     """
     def load_grammar(language='python', version=None, path=None):
+        """
+
+        Parameters
+        ----------
+        language :
+             (Default value = 'python')
+        version :
+             (Default value = None)
+        path :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if language == 'python':
             version_info = parse_version_string(version)
 
