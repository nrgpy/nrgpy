# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pygments/formatters/terminal256.py
+++ b/..//venv/lib/python3.8/site-packages/pygments/formatters/terminal256.py
@@ -35,6 +35,7 @@
 
 
 class EscapeSequence:
+    """ """
     def __init__(self, fg=None, bg=None, bold=False, underline=False, italic=False):
         self.fg = fg
         self.bg = bg
@@ -43,11 +44,23 @@
         self.italic = italic
 
     def escape(self, attrs):
+        """
+
+        Parameters
+        ----------
+        attrs :
+            
+
+        Returns
+        -------
+
+        """
         if len(attrs):
             return "\x1b[" + ";".join(attrs) + "m"
         return ""
 
     def color_string(self):
+        """ """
         attrs = []
         if self.fg is not None:
             if self.fg in ansicolors:
@@ -74,6 +87,7 @@
         return self.escape(attrs)
 
     def true_color_string(self):
+        """ """
         attrs = []
         if self.fg:
             attrs.extend(("38", "2", str(self.fg[0]), str(self.fg[1]), str(self.fg[2])))
@@ -88,6 +102,7 @@
         return self.escape(attrs)
 
     def reset_string(self):
+        """ """
         attrs = []
         if self.fg is not None:
             attrs.append("39")
@@ -99,33 +114,39 @@
 
 
 class Terminal256Formatter(Formatter):
-    """
-    Format tokens with ANSI color sequences, for output in a 256-color
+    """Format tokens with ANSI color sequences, for output in a 256-color
     terminal or console.  Like in `TerminalFormatter` color sequences
     are terminated at newlines, so that paging the output works correctly.
-
+    
     The formatter takes colors from a style defined by the `style` option
     and converts them to nearest ANSI 256-color escape sequences. Bold and
     underline attributes from the style are preserved (and displayed).
-
+    
     .. versionadded:: 0.9
-
+    
     .. versionchanged:: 2.2
        If the used style defines foreground colors in the form ``#ansi*``, then
        `Terminal256Formatter` will map these to non extended foreground color.
        See :ref:`AnsiTerminalStyle` for more information.
-
+    
     .. versionchanged:: 2.4
        The ANSI color names have been updated with names that are easier to
        understand and align with colornames of other projects and terminals.
        See :ref:`this table <new-ansi-color-names>` for more information.
-
-
+    
+    
     Options accepted:
-
+    
     `style`
         The style to use, can be a string or a Style subclass (default:
         ``'default'``).
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'Terminal256'
     aliases = ['terminal256', 'console256', '256']
@@ -146,6 +167,7 @@
         self._setup_styles()  # convert selected style's colors to term. colors
 
     def _build_color_table(self):
+        """ """
         # colors 0..15: 16 basic colors
 
         self.xterm_colors.append((0x00, 0x00, 0x00))  # 0
@@ -182,6 +204,21 @@
             self.xterm_colors.append((v, v, v))
 
     def _closest_color(self, r, g, b):
+        """
+
+        Parameters
+        ----------
+        r :
+            
+        g :
+            
+        b :
+            
+
+        Returns
+        -------
+
+        """
         distance = 257*257*3  # "infinity" (>distance from #000000 to #ffffff)
         match = 0
 
@@ -199,6 +236,17 @@
         return match
 
     def _color_index(self, color):
+        """
+
+        Parameters
+        ----------
+        color :
+            
+
+        Returns
+        -------
+
+        """
         index = self.best_match.get(color, None)
         if color in ansicolors:
             # strip the `ansi/#ansi` part and look up code
@@ -218,6 +266,7 @@
         return index
 
     def _setup_styles(self):
+        """ """
         for ttype, ndef in self.style:
             escape = EscapeSequence()
             # get foreground from ansicolor if set
@@ -239,9 +288,35 @@
                                              escape.reset_string())
 
     def format(self, tokensource, outfile):
+        """
+
+        Parameters
+        ----------
+        tokensource :
+            
+        outfile :
+            
+
+        Returns
+        -------
+
+        """
         return Formatter.format(self, tokensource, outfile)
 
     def format_unencoded(self, tokensource, outfile):
+        """
+
+        Parameters
+        ----------
+        tokensource :
+            
+        outfile :
+            
+
+        Returns
+        -------
+
+        """
         for ttype, value in tokensource:
             not_found = True
             while ttype and not_found:
@@ -272,27 +347,44 @@
 
 
 class TerminalTrueColorFormatter(Terminal256Formatter):
-    r"""
+    """r"""
     Format tokens with ANSI color sequences, for output in a true-color
     terminal or console.  Like in `TerminalFormatter` color sequences
     are terminated at newlines, so that paging the output works correctly.
-
+    
     .. versionadded:: 2.1
-
+    
     Options accepted:
-
+    
     `style`
         The style to use, can be a string or a Style subclass (default:
         ``'default'``).
-    """
+
+    Parameters
+    ----------
+
+    Returns
+    -------
     name = 'TerminalTrueColor'
     aliases = ['terminal16m', 'console16m', '16m']
     filenames = []
 
     def _build_color_table(self):
+        """ """
         pass
 
     def _color_tuple(self, color):
+        """
+
+        Parameters
+        ----------
+        color :
+            
+
+        Returns
+        -------
+
+        """
         try:
             rgb = int(str(color), 16)
         except ValueError:
@@ -303,6 +395,7 @@
         return (r, g, b)
 
     def _setup_styles(self):
+        """ """
         for ttype, ndef in self.style:
             escape = EscapeSequence()
             if ndef['color']:
