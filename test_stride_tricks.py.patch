# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test_stride_tricks.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/lib/tests/test_stride_tricks.py
@@ -9,6 +9,19 @@
     )
 
 def assert_shapes_correct(input_shapes, expected_shape):
+    """
+
+    Parameters
+    ----------
+    input_shapes :
+        
+    expected_shape :
+        
+
+    Returns
+    -------
+
+    """
     # Broadcast a list of arrays with the given input shapes and check the
     # common output shape.
 
@@ -20,6 +33,17 @@
 
 
 def assert_incompatible_shapes_raise(input_shapes):
+    """
+
+    Parameters
+    ----------
+    input_shapes :
+        
+
+    Returns
+    -------
+
+    """
     # Broadcast a list of arrays with the given (incompatible) input shapes
     # and check that they raise a ValueError.
 
@@ -28,6 +52,23 @@
 
 
 def assert_same_as_ufunc(shape0, shape1, transposed=False, flipped=False):
+    """
+
+    Parameters
+    ----------
+    shape0 :
+        
+    shape1 :
+        
+    transposed :
+         (Default value = False)
+    flipped :
+         (Default value = False)
+
+    Returns
+    -------
+
+    """
     # Broadcast two shapes against each other and check that the data layout
     # is the same as if a ufunc did the broadcasting.
 
@@ -50,6 +91,7 @@
 
 
 def test_same():
+    """ """
     x = np.arange(10)
     y = np.arange(10)
     bx, by = broadcast_arrays(x, y)
@@ -57,6 +99,7 @@
     assert_array_equal(y, by)
 
 def test_broadcast_kwargs():
+    """ """
     # ensure that a TypeError is appropriately raised when
     # np.broadcast_arrays() is called with any keyword
     # argument other than 'subok'
@@ -68,6 +111,7 @@
 
 
 def test_one_off():
+    """ """
     x = np.array([[1, 2, 3]])
     y = np.array([[1], [2], [3]])
     bx, by = broadcast_arrays(x, y)
@@ -78,6 +122,7 @@
 
 
 def test_same_input_shapes():
+    """ """
     # Check that the final shape is just the input shape.
 
     data = [
@@ -105,6 +150,7 @@
 
 
 def test_two_compatible_by_ones_input_shapes():
+    """ """
     # Check that two different input shapes of the same length, but some have
     # ones, broadcast to the correct shape.
 
@@ -130,6 +176,7 @@
 
 
 def test_two_compatible_by_prepending_ones_input_shapes():
+    """ """
     # Check that two different input shapes (of different lengths) broadcast
     # to the correct shape.
 
@@ -162,6 +209,7 @@
 
 
 def test_incompatible_shapes_raise_valueerror():
+    """ """
     # Check that a ValueError is raised for incompatible shapes.
 
     data = [
@@ -177,6 +225,7 @@
 
 
 def test_same_as_ufunc():
+    """ """
     # Check that the data layout is the same as if a ufunc did the operation.
 
     data = [
@@ -229,6 +278,7 @@
 
 
 def test_broadcast_to_succeeds():
+    """ """
     data = [
         [np.array(0), (0,), np.array(0)],
         [np.array(0), (1,), np.zeros(1)],
@@ -255,6 +305,7 @@
 
 
 def test_broadcast_to_raises():
+    """ """
     data = [
         [(0,), ()],
         [(1,), ()],
@@ -274,6 +325,7 @@
 
 
 def test_broadcast_shape():
+    """ """
     # broadcast_shape is already exercized indirectly by broadcast_arrays
     assert_equal(_broadcast_shape(), ())
     assert_equal(_broadcast_shape([1, 2]), (2,))
@@ -289,6 +341,7 @@
 
 
 def test_as_strided():
+    """ """
     a = np.array([None])
     a_view = as_strided(a)
     expected = np.array([None])
@@ -334,6 +387,7 @@
     assert_array_equal([r] * 3, a_view)
 
 def as_strided_writeable():
+    """ """
     arr = np.ones(10)
     view = as_strided(arr, writeable=False)
     assert_(not view.flags.writeable)
@@ -352,11 +406,13 @@
 
 
 class VerySimpleSubClass(np.ndarray):
+    """ """
     def __new__(cls, *args, **kwargs):
         return np.array(*args, subok=True, **kwargs).view(cls)
 
 
 class SimpleSubClass(VerySimpleSubClass):
+    """ """
     def __new__(cls, *args, **kwargs):
         self = np.array(*args, subok=True, **kwargs).view(cls)
         self.info = 'simple'
@@ -367,6 +423,7 @@
 
 
 def test_subclasses():
+    """ """
     # test that subclass is preserved only if subok=True
     a = VerySimpleSubClass([1, 2, 3, 4])
     assert_(type(a) is VerySimpleSubClass)
@@ -404,6 +461,7 @@
 
 
 def test_writeable():
+    """ """
     # broadcast_to should return a readonly array
     original = np.array([1, 2, 3])
     result = broadcast_to(original, (2, 3))
@@ -451,6 +509,7 @@
 
 
 def test_writeable_memoryview():
+    """ """
     # The result of broadcast_arrays exports as a non-writeable memoryview
     # because otherwise there is no good way to opt in to the new behaviour
     # (i.e. you would need to set writeable to False explicitly).
@@ -470,6 +529,7 @@
 
 
 def test_reference_types():
+    """ """
     input_array = np.array('a', dtype=object)
     expected = np.array(['a'] * 3, dtype=object)
     actual = broadcast_to(input_array, (3,))
