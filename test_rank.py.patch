# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/groupby/test_rank.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/groupby/test_rank.py
@@ -8,6 +8,7 @@
 
 
 def test_rank_apply():
+    """ """
     lev1 = tm.rands_array(10, 100)
     lev2 = tm.rands_array(10, 130)
     lab1 = np.random.randint(0, 100, size=500)
@@ -78,6 +79,27 @@
     ],
 )
 def test_rank_args(grps, vals, ties_method, ascending, pct, exp):
+    """
+
+    Parameters
+    ----------
+    grps :
+        
+    vals :
+        
+    ties_method :
+        
+    ascending :
+        
+    pct :
+        
+    exp :
+        
+
+    Returns
+    -------
+
+    """
     key = np.repeat(grps, len(vals))
     vals = vals * len(grps)
     df = DataFrame({"key": key, "val": vals})
@@ -127,6 +149,27 @@
     ],
 )
 def test_infs_n_nans(grps, vals, ties_method, ascending, na_option, exp):
+    """
+
+    Parameters
+    ----------
+    grps :
+        
+    vals :
+        
+    ties_method :
+        
+    ascending :
+        
+    na_option :
+        
+    exp :
+        
+
+    Returns
+    -------
+
+    """
     # GH 20561
     key = np.repeat(grps, len(vals))
     vals = vals * len(grps)
@@ -345,6 +388,29 @@
     ],
 )
 def test_rank_args_missing(grps, vals, ties_method, ascending, na_option, pct, exp):
+    """
+
+    Parameters
+    ----------
+    grps :
+        
+    vals :
+        
+    ties_method :
+        
+    ascending :
+        
+    na_option :
+        
+    pct :
+        
+    exp :
+        
+
+    Returns
+    -------
+
+    """
     key = np.repeat(grps, len(vals))
     vals = vals * len(grps)
     df = DataFrame({"key": key, "val": vals})
@@ -360,6 +426,19 @@
     "pct,exp", [(False, [3.0, 3.0, 3.0, 3.0, 3.0]), (True, [0.6, 0.6, 0.6, 0.6, 0.6])]
 )
 def test_rank_resets_each_group(pct, exp):
+    """
+
+    Parameters
+    ----------
+    pct :
+        
+    exp :
+        
+
+    Returns
+    -------
+
+    """
     df = DataFrame(
         {"key": ["a", "a", "a", "a", "a", "b", "b", "b", "b", "b"], "val": [1] * 10}
     )
@@ -369,6 +448,7 @@
 
 
 def test_rank_avg_even_vals():
+    """ """
     df = DataFrame({"key": ["a"] * 4, "val": [1] * 4})
     result = df.groupby("key").rank()
     exp_df = DataFrame([2.5, 2.5, 2.5, 2.5], columns=["val"])
@@ -383,6 +463,25 @@
     "vals", [["bar", "bar", "foo", "bar", "baz"], ["bar", np.nan, "foo", np.nan, "baz"]]
 )
 def test_rank_object_raises(ties_method, ascending, na_option, pct, vals):
+    """
+
+    Parameters
+    ----------
+    ties_method :
+        
+    ascending :
+        
+    na_option :
+        
+    pct :
+        
+    vals :
+        
+
+    Returns
+    -------
+
+    """
     df = DataFrame({"key": ["foo"] * 5, "val": vals})
 
     with pytest.raises(DataError, match="No numeric types to aggregate"):
@@ -404,6 +503,25 @@
     ],
 )
 def test_rank_naoption_raises(ties_method, ascending, na_option, pct, vals):
+    """
+
+    Parameters
+    ----------
+    ties_method :
+        
+    ascending :
+        
+    na_option :
+        
+    pct :
+        
+    vals :
+        
+
+    Returns
+    -------
+
+    """
     df = DataFrame({"key": ["foo"] * 5, "val": vals})
     msg = "na_option must be one of 'keep', 'top', or 'bottom'"
 
@@ -414,6 +532,7 @@
 
 
 def test_rank_empty_group():
+    """ """
     # see gh-22519
     column = "A"
     df = DataFrame({"A": [0, 1, 0], "B": [1.0, np.nan, 2.0]})
@@ -437,6 +556,21 @@
     ],
 )
 def test_rank_zero_div(input_key, input_value, output_value):
+    """
+
+    Parameters
+    ----------
+    input_key :
+        
+    input_value :
+        
+    output_value :
+        
+
+    Returns
+    -------
+
+    """
     # GH 23666
     df = DataFrame({"A": input_key, "B": input_value})
 
