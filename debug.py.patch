# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jedi/debug.py
+++ b/..//venv/lib/python3.8/site-packages/jedi/debug.py
@@ -8,11 +8,17 @@
 
 
 def _lazy_colorama_init():
-    """
-    Lazily init colorama if necessary, not to screw up stdout if debugging is
+    """Lazily init colorama if necessary, not to screw up stdout if debugging is
     not enabled.
-
+    
     This version of the function does nothing.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
 
@@ -26,11 +32,17 @@
         from colorama import initialise
 
         def _lazy_colorama_init():  # noqa: F811
-            """
-            Lazily init colorama if necessary, not to screw up stdout is
+            """Lazily init colorama if necessary, not to screw up stdout is
             debug not enabled.
-
+            
             This version of the function does init colorama.
+
+            Parameters
+            ----------
+
+            Returns
+            -------
+
             """
             global _inited
             if not _inited:
@@ -48,6 +60,7 @@
 
 except ImportError:
     class Fore(object):
+        """ """
         RED = ''
         GREEN = ''
         YELLOW = ''
@@ -70,14 +83,38 @@
 
 
 def reset_time():
+    """ """
     global _start_time, _debug_indent
     _start_time = time.time()
     _debug_indent = 0
 
 
 def increase_indent(func):
-    """Decorator for makin """
+    """Decorator for makin
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
+    """
     def wrapper(*args, **kwargs):
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         with increase_indent_cm():
             return func(*args, **kwargs)
     return wrapper
@@ -85,6 +122,19 @@
 
 @contextmanager
 def increase_indent_cm(title=None, color='MAGENTA'):
+    """
+
+    Parameters
+    ----------
+    title :
+         (Default value = None)
+    color :
+         (Default value = 'MAGENTA')
+
+    Returns
+    -------
+
+    """
     global _debug_indent
     if title:
         dbg('Start: ' + title, color=color)
@@ -98,7 +148,21 @@
 
 
 def dbg(message, *args, **kwargs):
-    """ Looks at the stack, to see if a debug message should be printed. """
+    """Looks at the stack, to see if a debug message should be printed.
+
+    Parameters
+    ----------
+    message :
+        
+    *args :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     # Python 2 compatibility, because it doesn't understand default args
     color = kwargs.pop('color', 'GREEN')
     assert color
@@ -110,6 +174,21 @@
 
 
 def warning(message, *args, **kwargs):
+    """
+
+    Parameters
+    ----------
+    message :
+        
+    *args :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    """
     format = kwargs.pop('format', True)
     assert not kwargs
 
@@ -121,6 +200,17 @@
 
 
 def speed(name):
+    """
+
+    Parameters
+    ----------
+    name :
+        
+
+    Returns
+    -------
+
+    """
     if debug_function and enable_speed:
         now = time.time()
         i = ' ' * _debug_indent
@@ -128,10 +218,20 @@
 
 
 def print_to_stdout(color, str_out):
-    """
-    The default debug function that prints to standard out.
-
-    :param str color: A string that is an attribute of ``colorama.Fore``.
+    """The default debug function that prints to standard out.
+
+    Parameters
+    ----------
+    str :
+        color: A string that is an attribute of ``colorama.Fore``.
+    color :
+        
+    str_out :
+        
+
+    Returns
+    -------
+
     """
     col = getattr(Fore, color)
     _lazy_colorama_init()
