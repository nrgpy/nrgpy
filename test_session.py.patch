# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/jupyter_client/tests/test_session.py
+++ b/..//venv/lib/python3.8/site-packages/jupyter_client/tests/test_session.py
@@ -20,14 +20,38 @@
 from jupyter_client import jsonutil
 
 def _bad_packer(obj):
+    """
+
+    Parameters
+    ----------
+    obj :
+        
+
+    Returns
+    -------
+
+    """
     raise TypeError("I don't work")
 
 def _bad_unpacker(bytes):
+    """
+
+    Parameters
+    ----------
+    bytes :
+        
+
+    Returns
+    -------
+
+    """
     raise TypeError("I don't work either")
 
 class SessionTestCase(BaseZMQTestCase):
+    """ """
 
     def setUp(self):
+        """ """
         BaseZMQTestCase.setUp(self)
         self.session = ss.Session()
 
@@ -41,6 +65,7 @@
 
 @pytest.mark.usefixtures('no_copy_threshold')
 class TestSession(SessionTestCase):
+    """ """
 
     def test_msg(self):
         """message format"""
@@ -58,6 +83,7 @@
         self.assertEqual(msg['msg_type'], 'execute')
 
     def test_serialize(self):
+        """ """
         msg = self.session.msg('execute', content=dict(a=10, b=1.1))
         msg_list = self.session.serialize(msg, ident=b'foo')
         ident, msg_list = self.session.feed_identities(msg_list)
@@ -73,10 +99,12 @@
         self.assertEqual(type(new_msg['content']['b']),type(new_msg['content']['b']))
 
     def test_default_secure(self):
+        """ """
         self.assertIsInstance(self.session.key, bytes)
         self.assertIsInstance(self.session.auth, hmac.HMAC)
 
     def test_send(self):
+        """ """
         ctx = zmq.Context()
         A = ctx.socket(zmq.PAIR)
         B = ctx.socket(zmq.PAIR)
@@ -195,6 +223,7 @@
         pmsg = theids
 
     def test_session_id(self):
+        """ """
         session = ss.Session()
         # get bs before us
         bs = session.bsession
@@ -216,12 +245,14 @@
         self.assertEqual(b'stuff', session.bsession)
 
     def test_zero_digest_history(self):
+        """ """
         session = ss.Session(digest_history_size=0)
         for i in range(11):
             session._add_digest(uuid.uuid4().bytes)
         self.assertEqual(len(session.digest_history), 0)
 
     def test_cull_digest_history(self):
+        """ """
         session = ss.Session(digest_history_size=100)
         for i in range(100):
             session._add_digest(uuid.uuid4().bytes)
@@ -235,6 +266,7 @@
         self.assertTrue(len(session.digest_history) == 91)
 
     def test_bad_pack(self):
+        """ """
         try:
             session = ss.Session(pack=_bad_packer)
         except ValueError as e:
@@ -244,6 +276,7 @@
             self.fail("Should have raised ValueError")
 
     def test_bad_unpack(self):
+        """ """
         try:
             session = ss.Session(unpack=_bad_unpacker)
         except ValueError as e:
@@ -253,6 +286,7 @@
             self.fail("Should have raised ValueError")
 
     def test_bad_packer(self):
+        """ """
         try:
             session = ss.Session(packer=__name__ + '._bad_packer')
         except ValueError as e:
@@ -262,6 +296,7 @@
             self.fail("Should have raised ValueError")
 
     def test_bad_unpacker(self):
+        """ """
         try:
             session = ss.Session(unpacker=__name__ + '._bad_unpacker')
         except ValueError as e:
@@ -271,10 +306,22 @@
             self.fail("Should have raised ValueError")
 
     def test_bad_roundtrip(self):
+        """ """
         with self.assertRaises(ValueError):
             session = ss.Session(unpack=lambda b: 5)
 
     def _datetime_test(self, session):
+        """
+
+        Parameters
+        ----------
+        session :
+            
+
+        Returns
+        -------
+
+        """
         content = dict(t=ss.utcnow())
         metadata = dict(t=ss.utcnow())
         p = session.msg('msg')
@@ -293,13 +340,16 @@
         self.assertEqual(msg['content'], jsonutil.extract_dates(msg2['content']))
 
     def test_datetimes(self):
+        """ """
         self._datetime_test(self.session)
 
     def test_datetimes_pickle(self):
+        """ """
         session = ss.Session(packer='pickle')
         self._datetime_test(session)
 
     def test_datetimes_msgpack(self):
+        """ """
         msgpack = pytest.importorskip('msgpack')
 
         session = ss.Session(
@@ -309,6 +359,7 @@
         self._datetime_test(session)
 
     def test_send_raw(self):
+        """ """
         ctx = zmq.Context()
         A = ctx.socket(zmq.PAIR)
         B = ctx.socket(zmq.PAIR)
@@ -334,6 +385,7 @@
         ctx.term()
 
     def test_clone(self):
+        """ """
         s = self.session
         s._add_digest('initial')
         s2 = s.clone()
