# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/categorical/test_map.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/categorical/test_map.py
@@ -7,6 +7,7 @@
 
 
 class TestMap:
+    """ """
     @pytest.mark.parametrize(
         "data, categories",
         [
@@ -16,6 +17,21 @@
         ids=["string", "interval"],
     )
     def test_map_str(self, data, categories, ordered):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        categories :
+            
+        ordered :
+            
+
+        Returns
+        -------
+
+        """
         # GH 31202 - override base class since we want to maintain categorical/ordered
         index = CategoricalIndex(data, categories=categories, ordered=ordered)
         result = index.map(str)
@@ -25,6 +41,7 @@
         tm.assert_index_equal(result, expected)
 
     def test_map(self):
+        """ """
         ci = pd.CategoricalIndex(list("ABABC"), categories=list("CBA"), ordered=True)
         result = ci.map(lambda x: x.lower())
         exp = pd.CategoricalIndex(list("ababc"), categories=list("cba"), ordered=True)
@@ -48,6 +65,17 @@
         ci = pd.CategoricalIndex(list("ABABC"), categories=list("BAC"), ordered=False)
 
         def f(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return {"A": 10, "B": 20, "C": 30}.get(x)
 
         result = ci.map(f)
@@ -63,6 +91,7 @@
         tm.assert_index_equal(result, exp)
 
     def test_map_with_categorical_series(self):
+        """ """
         # GH 12756
         a = pd.Index([1, 2, 3, 4])
         b = pd.Series(["even", "odd", "even", "odd"], dtype="category")
@@ -85,6 +114,19 @@
         ),
     )
     def test_map_with_nan(self, data, f):  # GH 24241
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        f :
+            
+
+        Returns
+        -------
+
+        """
         values = pd.Categorical(data)
         result = values.map(f)
         if data[1] == 1:
