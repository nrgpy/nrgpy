# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/series/methods/test_replace.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/series/methods/test_replace.py
@@ -8,7 +8,19 @@
 
 
 class TestSeriesReplace:
+    """ """
     def test_replace(self, datetime_series):
+        """
+
+        Parameters
+        ----------
+        datetime_series :
+            
+
+        Returns
+        -------
+
+        """
         N = 100
         ser = pd.Series(np.random.randn(N))
         ser[0:4] = np.nan
@@ -85,6 +97,7 @@
         tm.assert_series_equal(result, pd.Series([4, 3, 2, 1, 0]))
 
     def test_replace_gh5319(self):
+        """ """
         # API change from 0.12?
         # GH 5319
         ser = pd.Series([0, np.nan, 2, 3, 4])
@@ -113,6 +126,7 @@
         tm.assert_series_equal(expected, result)
 
     def test_replace_timedelta_td64(self):
+        """ """
         tdi = pd.timedelta_range(0, periods=5)
         ser = pd.Series(tdi)
 
@@ -123,6 +137,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_replace_with_single_list(self):
+        """ """
         ser = pd.Series([0, 1, 2, 3, 4])
         result = ser.replace([1, 2, 3])
         tm.assert_series_equal(result, pd.Series([0, 0, 0, 0, 4]))
@@ -144,6 +159,7 @@
         tm.assert_series_equal(s, ser)
 
     def test_replace_with_empty_list(self):
+        """ """
         # GH 21977
         s = pd.Series([[1], [2, 3], [], np.nan, [4]])
         expected = s
@@ -157,9 +173,25 @@
             s.replace({np.nan: ["dummy", "alt"]})
 
     def test_replace_mixed_types(self):
+        """ """
         s = pd.Series(np.arange(5), dtype="int64")
 
         def check_replace(to_rep, val, expected):
+            """
+
+            Parameters
+            ----------
+            to_rep :
+                
+            val :
+                
+            expected :
+                
+
+            Returns
+            -------
+
+            """
             sc = s.copy()
             r = s.replace(to_rep, val)
             return_value = sc.replace(to_rep, val, inplace=True)
@@ -199,11 +231,13 @@
         tm.assert_series_equal(result, expected)
 
     def test_replace_bool_with_string_no_op(self):
+        """ """
         s = pd.Series([True, False, True])
         result = s.replace("fun", "in-the-sun")
         tm.assert_series_equal(s, result)
 
     def test_replace_bool_with_string(self):
+        """ """
         # nonexistent elements
         s = pd.Series([True, False, True])
         result = s.replace(True, "2u")
@@ -211,17 +245,20 @@
         tm.assert_series_equal(expected, result)
 
     def test_replace_bool_with_bool(self):
+        """ """
         s = pd.Series([True, False, True])
         result = s.replace(True, False)
         expected = pd.Series([False] * len(s))
         tm.assert_series_equal(expected, result)
 
     def test_replace_with_dict_with_bool_keys(self):
+        """ """
         s = pd.Series([True, False, True])
         with pytest.raises(TypeError, match="Cannot compare types .+"):
             s.replace({"asdf": "asdb", True: "yes"})
 
     def test_replace2(self):
+        """ """
         N = 100
         ser = pd.Series(np.fabs(np.random.randn(N)), tm.makeDateIndex(N), dtype=object)
         ser[:5] = np.nan
@@ -256,6 +293,7 @@
         assert (ser[20:30] == -1).all()
 
     def test_replace_with_dictlike_and_string_dtype(self):
+        """ """
         # GH 32621
         s = pd.Series(["one", "two", np.nan], dtype="string")
         expected = pd.Series(["1", "2", np.nan])
@@ -263,6 +301,7 @@
         tm.assert_series_equal(expected, result)
 
     def test_replace_with_empty_dictlike(self):
+        """ """
         # GH 15289
         s = pd.Series(list("abcd"))
         tm.assert_series_equal(s, s.replace(dict()))
@@ -272,6 +311,7 @@
         tm.assert_series_equal(s, s.replace(empty_series))
 
     def test_replace_string_with_number(self):
+        """ """
         # GH 15743
         s = pd.Series([1, 2, 3])
         result = s.replace("2", np.nan)
@@ -279,6 +319,7 @@
         tm.assert_series_equal(expected, result)
 
     def test_replace_replacer_equals_replacement(self):
+        """ """
         # GH 20656
         # make sure all replacers are matching against original values
         s = pd.Series(["a", "b"])
@@ -287,6 +328,7 @@
         tm.assert_series_equal(expected, result)
 
     def test_replace_unicode_with_number(self):
+        """ """
         # GH 15743
         s = pd.Series([1, 2, 3])
         result = s.replace("2", np.nan)
@@ -294,6 +336,7 @@
         tm.assert_series_equal(expected, result)
 
     def test_replace_mixed_types_with_string(self):
+        """ """
         # Testing mixed
         s = pd.Series([1, 2, 3, "4", 4, 5])
         result = s.replace([2, "4"], np.nan)
@@ -309,6 +352,19 @@
         ],
     )
     def test_replace_categorical(self, categorical, numeric):
+        """
+
+        Parameters
+        ----------
+        categorical :
+            
+        numeric :
+            
+
+        Returns
+        -------
+
+        """
         # GH 24971
         # Do not check if dtypes are equal due to a known issue that
         # Categorical.replace sometimes coerces to object (GH 23305)
@@ -318,6 +374,7 @@
         tm.assert_series_equal(expected, result)
 
     def test_replace_categorical_single(self):
+        """ """
         # GH 26988
         dti = pd.date_range("2016-01-01", periods=3, tz="US/Pacific")
         s = pd.Series(dti)
@@ -343,6 +400,7 @@
         assert c[0] == c[1] == first_value  # test replacing with existing value
 
     def test_replace_with_no_overflowerror(self):
+        """ """
         # GH 25616
         # casts to object without Exception from OverflowError
         s = pd.Series([0, 1, 2, 3, 4])
@@ -363,6 +421,21 @@
         ],
     )
     def test_replace_commutative(self, ser, to_replace, exp):
+        """
+
+        Parameters
+        ----------
+        ser :
+            
+        to_replace :
+            
+        exp :
+            
+
+        Returns
+        -------
+
+        """
         # GH 16051
         # DataFrame.replace() overwrites when values are non-numeric
 
@@ -377,6 +450,19 @@
         "ser, exp", [([1, 2, 3], [1, True, 3]), (["x", 2, 3], ["x", True, 3])]
     )
     def test_replace_no_cast(self, ser, exp):
+        """
+
+        Parameters
+        ----------
+        ser :
+            
+        exp :
+            
+
+        Returns
+        -------
+
+        """
         # GH 9113
         # BUG: replace int64 dtype with bool coerces to int64
 
@@ -387,6 +473,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_replace_invalid_to_replace(self):
+        """ """
         # GH 18634
         # API: replace() should raise an exception if invalid argument is given
         series = pd.Series(["a", "b", "c "])
@@ -398,6 +485,7 @@
             series.replace(lambda x: x.strip())
 
     def test_replace_only_one_dictlike_arg(self):
+        """ """
         # GH#33340
 
         ser = pd.Series([1, 2, "A", pd.Timestamp.now(), True])
@@ -414,11 +502,13 @@
             ser.replace(to_replace, value)
 
     def test_replace_extension_other(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/34530
         ser = pd.Series(pd.array([1, 2, 3], dtype="Int64"))
         ser.replace("", "")  # no exception
 
     def test_replace_with_compiled_regex(self):
+        """ """
         # https://github.com/pandas-dev/pandas/issues/35680
         s = pd.Series(["a", "b", "c"])
         regex = re.compile("^a$")
