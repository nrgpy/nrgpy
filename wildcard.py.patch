# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/utils/wildcard.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/utils/wildcard.py
@@ -20,8 +20,19 @@
 from IPython.utils.dir2 import dir2
 
 def create_typestr2type_dicts(dont_include_in_type2typestr=["lambda"]):
-    """Return dictionaries mapping lower case typename (e.g. 'tuple') to type
-    objects from the types package, and vice versa."""
+    """
+
+    Parameters
+    ----------
+    dont_include_in_type2typestr :
+         (Default value = ["lambda"])
+
+    Returns
+    -------
+    type
+        objects from the types package, and vice versa.
+
+    """
     typenamelist = [tname for tname in dir(types) if tname.endswith("Type")]
     typestr2type, type2typestr = {}, {}
 
@@ -39,8 +50,20 @@
     """is_type(obj, typestr_or_type) verifies if obj is of a certain type. It
     can take strings or actual python types for the second argument, i.e.
     'tuple'<->TupleType. 'all' matches all types.
+    
+    TODO: Should be extended for choosing more than one type.
 
-    TODO: Should be extended for choosing more than one type."""
+    Parameters
+    ----------
+    obj :
+        
+    typestr_or_type :
+        
+
+    Returns
+    -------
+
+    """
     if typestr_or_type == "all":
         return True
     if type(typestr_or_type) == type:
@@ -52,12 +75,36 @@
     return False
 
 def show_hidden(str, show_all=False):
-    """Return true for strings starting with single _ if show_all is true."""
+    """
+
+    Parameters
+    ----------
+    str :
+        
+    show_all :
+         (Default value = False)
+
+    Returns
+    -------
+    type
+        
+
+    """
     return show_all or str.startswith("__") or not str.startswith("_")
 
 def dict_dir(obj):
     """Produce a dictionary of an object's attributes. Builds on dir2 by
-    checking that a getattr() call actually succeeds."""
+    checking that a getattr() call actually succeeds.
+
+    Parameters
+    ----------
+    obj :
+        
+
+    Returns
+    -------
+
+    """
     ns = {}
     for key in dir2(obj):
        # This seemingly unnecessary try/except is actually needed
@@ -74,7 +121,25 @@
 
 def filter_ns(ns, name_pattern="*", type_pattern="all", ignore_case=True,
             show_all=True):
-    """Filter a namespace dictionary by name pattern and item type."""
+    """Filter a namespace dictionary by name pattern and item type.
+
+    Parameters
+    ----------
+    ns :
+        
+    name_pattern :
+         (Default value = "*")
+    type_pattern :
+         (Default value = "all")
+    ignore_case :
+         (Default value = True)
+    show_all :
+         (Default value = True)
+
+    Returns
+    -------
+
+    """
     pattern = name_pattern.replace("*",".*").replace("?",".")
     if ignore_case:
         reg = re.compile(pattern+"$", re.I)
@@ -87,8 +152,27 @@
                                             and is_type(obj, type_pattern) )
 
 def list_namespace(namespace, type_pattern, filter, ignore_case=False, show_all=False):
-    """Return dictionary of all objects in a namespace dictionary that match
-    type_pattern and filter."""
+    """
+
+    Parameters
+    ----------
+    namespace :
+        
+    type_pattern :
+        
+    filter :
+        
+    ignore_case :
+         (Default value = False)
+    show_all :
+         (Default value = False)
+
+    Returns
+    -------
+    type
+        type_pattern and filter.
+
+    """
     pattern_list=filter.split(".")
     if len(pattern_list) == 1:
        return filter_ns(namespace, name_pattern=pattern_list[0],
