# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/snowballstemmer/basestemmer.py
+++ b/..//venv/lib/python3.8/site-packages/snowballstemmer/basestemmer.py
@@ -1,11 +1,20 @@
 class BaseStemmer(object):
+    """ """
     def __init__(self):
         self.set_current("")
 
     def set_current(self, value):
-        '''
-        Set the self.current string.
-        '''
+        """Set the self.current string.
+
+        Parameters
+        ----------
+        value :
+            
+
+        Returns
+        -------
+
+        """
         self.current = value
         self.cursor = 0
         self.limit = len(self.current)
@@ -14,12 +23,21 @@
         self.ket = self.limit
 
     def get_current(self):
-        '''
-        Get the self.current string.
-        '''
+        """Get the self.current string."""
         return self.current
 
     def copy_from(self, other):
+        """
+
+        Parameters
+        ----------
+        other :
+            
+
+        Returns
+        -------
+
+        """
         self.current          = other.current
         self.cursor           = other.cursor
         self.limit            = other.limit
@@ -28,6 +46,21 @@
         self.ket              = other.ket
 
     def in_grouping(self, s, min, max):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+        min :
+            
+        max :
+            
+
+        Returns
+        -------
+
+        """
         if self.cursor >= self.limit:
             return False
         ch = ord(self.current[self.cursor])
@@ -40,6 +73,21 @@
         return True
 
     def go_in_grouping(self, s, min, max):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+        min :
+            
+        max :
+            
+
+        Returns
+        -------
+
+        """
         while self.cursor < self.limit:
             ch = ord(self.current[self.cursor])
             if ch > max or ch < min:
@@ -51,6 +99,21 @@
         return False
 
     def in_grouping_b(self, s, min, max):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+        min :
+            
+        max :
+            
+
+        Returns
+        -------
+
+        """
         if self.cursor <= self.limit_backward:
             return False
         ch = ord(self.current[self.cursor - 1])
@@ -63,6 +126,21 @@
         return True
 
     def go_in_grouping_b(self, s, min, max):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+        min :
+            
+        max :
+            
+
+        Returns
+        -------
+
+        """
         while self.cursor > self.limit_backward:
             ch = ord(self.current[self.cursor - 1])
             if ch > max or ch < min:
@@ -74,6 +152,21 @@
         return False
 
     def out_grouping(self, s, min, max):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+        min :
+            
+        max :
+            
+
+        Returns
+        -------
+
+        """
         if self.cursor >= self.limit:
             return False
         ch = ord(self.current[self.cursor])
@@ -87,6 +180,21 @@
         return False
 
     def go_out_grouping(self, s, min, max):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+        min :
+            
+        max :
+            
+
+        Returns
+        -------
+
+        """
         while self.cursor < self.limit:
             ch = ord(self.current[self.cursor])
             if ch <= max and ch >= min:
@@ -97,6 +205,21 @@
         return False
 
     def out_grouping_b(self, s, min, max):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+        min :
+            
+        max :
+            
+
+        Returns
+        -------
+
+        """
         if self.cursor <= self.limit_backward:
             return False
         ch = ord(self.current[self.cursor - 1])
@@ -110,6 +233,21 @@
         return False
 
     def go_out_grouping_b(self, s, min, max):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+        min :
+            
+        max :
+            
+
+        Returns
+        -------
+
+        """
         while self.cursor > self.limit_backward:
             ch = ord(self.current[self.cursor - 1])
             if ch <= max and ch >= min:
@@ -120,6 +258,17 @@
         return False
 
     def eq_s(self, s):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+
+        Returns
+        -------
+
+        """
         if self.limit - self.cursor < len(s):
             return False
         if self.current[self.cursor:self.cursor + len(s)] != s:
@@ -128,6 +277,17 @@
         return True
 
     def eq_s_b(self, s):
+        """
+
+        Parameters
+        ----------
+        s :
+            
+
+        Returns
+        -------
+
+        """
         if self.cursor - self.limit_backward < len(s):
             return False
         if self.current[self.cursor - len(s):self.cursor] != s:
@@ -136,6 +296,17 @@
         return True
 
     def find_among(self, v):
+        """
+
+        Parameters
+        ----------
+        v :
+            
+
+        Returns
+        -------
+
+        """
         i = 0
         j = len(v)
 
@@ -194,9 +365,17 @@
         return -1 # not reachable
 
     def find_among_b(self, v):
-        '''
-        find_among_b is for backwards processing. Same comments apply
-        '''
+        """find_among_b is for backwards processing. Same comments apply
+
+        Parameters
+        ----------
+        v :
+            
+
+        Returns
+        -------
+
+        """
         i = 0
         j = len(v)
 
@@ -252,14 +431,22 @@
         return -1 # not reachable
 
     def replace_s(self, c_bra, c_ket, s):
-        '''
-        to replace chars between c_bra and c_ket in self.current by the
+        """to replace chars between c_bra and c_ket in self.current by the
         chars in s.
 
-        @type c_bra int
-        @type c_ket int
-        @type s: string
-        '''
+        Parameters
+        ----------
+        c_bra :
+            
+        c_ket :
+            
+        s :
+            
+
+        Returns
+        -------
+
+        """
         adjustment = len(s) - (c_ket - c_bra)
         self.current = self.current[0:c_bra] + s + self.current[c_ket:]
         self.limit += adjustment
@@ -270,14 +457,23 @@
         return adjustment
 
     def slice_check(self):
+        """ """
         if self.bra < 0 or self.bra > self.ket or self.ket > self.limit or self.limit > len(self.current):
             return False
         return True
 
     def slice_from(self, s):
-        '''
-        @type s string
-        '''
+        """
+
+        Parameters
+        ----------
+        s :
+            
+
+        Returns
+        -------
+
+        """
         result = False
         if self.slice_check():
             self.replace_s(self.bra, self.ket, s)
@@ -285,14 +481,25 @@
         return result
 
     def slice_del(self):
+        """ """
         return self.slice_from("")
 
     def insert(self, c_bra, c_ket, s):
-        '''
-        @type c_bra int
-        @type c_ket int
-        @type s: string
-        '''
+        """
+
+        Parameters
+        ----------
+        c_bra :
+            
+        c_ket :
+            
+        s :
+            
+
+        Returns
+        -------
+
+        """
         adjustment = self.replace_s(c_bra, c_ket, s)
         if c_bra <= self.bra:
             self.bra += adjustment
@@ -300,24 +507,42 @@
             self.ket += adjustment
 
     def slice_to(self):
-        '''
-        Return the slice as a string.
-        '''
+        """ """
         result = ''
         if self.slice_check():
             result = self.current[self.bra:self.ket]
         return result
 
     def assign_to(self):
-        '''
-        Return the current string up to the limit.
-        '''
+        """ """
         return self.current[0:self.limit]
 
     def stemWord(self, word):
+        """
+
+        Parameters
+        ----------
+        word :
+            
+
+        Returns
+        -------
+
+        """
         self.set_current(word)
         self._stem()
         return self.get_current()
 
     def stemWords(self, words):
+        """
+
+        Parameters
+        ----------
+        words :
+            
+
+        Returns
+        -------
+
+        """
         return [self.stemWord(word) for word in words]
