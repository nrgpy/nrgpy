# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/util/test_assert_frame_equal.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/util/test_assert_frame_equal.py
@@ -7,45 +7,75 @@
 
 @pytest.fixture(params=[True, False])
 def by_blocks_fixture(request):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     return request.param
 
 
 @pytest.fixture(params=["DataFrame", "Series"])
 def obj_fixture(request):
+    """
+
+    Parameters
+    ----------
+    request :
+        
+
+    Returns
+    -------
+
+    """
     return request.param
 
 
 def _assert_frame_equal_both(a, b, **kwargs):
-    """
-    Check that two DataFrame equal.
-
+    """Check that two DataFrame equal.
+    
     This check is performed commutatively.
 
     Parameters
     ----------
-    a : DataFrame
-        The first DataFrame to compare.
-    b : DataFrame
-        The second DataFrame to compare.
-    kwargs : dict
-        The arguments passed to `tm.assert_frame_equal`.
+    a :
+        
+    b :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    
     """
     tm.assert_frame_equal(a, b, **kwargs)
     tm.assert_frame_equal(b, a, **kwargs)
 
 
 def _assert_not_frame_equal(a, b, **kwargs):
-    """
-    Check that two DataFrame are not equal.
-
-    Parameters
-    ----------
-    a : DataFrame
-        The first DataFrame to compare.
-    b : DataFrame
-        The second DataFrame to compare.
-    kwargs : dict
-        The arguments passed to `tm.assert_frame_equal`.
+    """Check that two DataFrame are not equal.
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    
     """
     msg = "The two DataFrames were equal when they shouldn't have been"
     with pytest.raises(AssertionError, match=msg):
@@ -53,19 +83,23 @@
 
 
 def _assert_not_frame_equal_both(a, b, **kwargs):
-    """
-    Check that two DataFrame are not equal.
-
+    """Check that two DataFrame are not equal.
+    
     This check is performed commutatively.
 
     Parameters
     ----------
-    a : DataFrame
-        The first DataFrame to compare.
-    b : DataFrame
-        The second DataFrame to compare.
-    kwargs : dict
-        The arguments passed to `tm.assert_frame_equal`.
+    a :
+        
+    b :
+        
+    **kwargs :
+        
+
+    Returns
+    -------
+
+    
     """
     _assert_not_frame_equal(a, b, **kwargs)
     _assert_not_frame_equal(b, a, **kwargs)
@@ -73,6 +107,19 @@
 
 @pytest.mark.parametrize("check_like", [True, False])
 def test_frame_equal_row_order_mismatch(check_like, obj_fixture):
+    """
+
+    Parameters
+    ----------
+    check_like :
+        
+    obj_fixture :
+        
+
+    Returns
+    -------
+
+    """
     df1 = DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]}, index=["a", "b", "c"])
     df2 = DataFrame({"A": [3, 2, 1], "B": [6, 5, 4]}, index=["c", "b", "a"])
 
@@ -92,6 +139,21 @@
     ],
 )
 def test_frame_equal_shape_mismatch(df1, df2, obj_fixture):
+    """
+
+    Parameters
+    ----------
+    df1 :
+        
+    df2 :
+        
+    obj_fixture :
+        
+
+    Returns
+    -------
+
+    """
     msg = f"{obj_fixture} are different"
 
     with pytest.raises(AssertionError, match=msg):
@@ -120,6 +182,23 @@
     ],
 )
 def test_frame_equal_index_dtype_mismatch(df1, df2, msg, check_index_type):
+    """
+
+    Parameters
+    ----------
+    df1 :
+        
+    df2 :
+        
+    msg :
+        
+    check_index_type :
+        
+
+    Returns
+    -------
+
+    """
     kwargs = dict(check_index_type=check_index_type)
 
     if check_index_type:
@@ -130,6 +209,17 @@
 
 
 def test_empty_dtypes(check_dtype):
+    """
+
+    Parameters
+    ----------
+    check_dtype :
+        
+
+    Returns
+    -------
+
+    """
     columns = ["col1", "col2"]
     df1 = DataFrame(columns=columns)
     df2 = DataFrame(columns=columns)
@@ -146,11 +236,19 @@
 
 
 def test_frame_equal_index_mismatch(obj_fixture):
-    msg = f"""{obj_fixture}\\.index are different
-
-{obj_fixture}\\.index values are different \\(33\\.33333 %\\)
-\\[left\\]:  Index\\(\\['a', 'b', 'c'\\], dtype='object'\\)
-\\[right\\]: Index\\(\\['a', 'b', 'd'\\], dtype='object'\\)"""
+    """msg = f"""{obj_fixture}\\.index are different
+    
+    {obj_fixture}\\.index values are different \\(33\\.33333 %\\)
+    \\[left\\]:  Index\\(\\['a', 'b', 'c'\\], dtype='object'\\)
+    \\[right\\]: Index\\(\\['a', 'b', 'd'\\], dtype='object'\\)
+
+    Parameters
+    ----------
+    obj_fixture :
+        
+
+    Returns
+    -------
 
     df1 = DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]}, index=["a", "b", "c"])
     df2 = DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]}, index=["a", "b", "d"])
@@ -160,11 +258,19 @@
 
 
 def test_frame_equal_columns_mismatch(obj_fixture):
-    msg = f"""{obj_fixture}\\.columns are different
-
-{obj_fixture}\\.columns values are different \\(50\\.0 %\\)
-\\[left\\]:  Index\\(\\['A', 'B'\\], dtype='object'\\)
-\\[right\\]: Index\\(\\['A', 'b'\\], dtype='object'\\)"""
+    """msg = f"""{obj_fixture}\\.columns are different
+    
+    {obj_fixture}\\.columns values are different \\(50\\.0 %\\)
+    \\[left\\]:  Index\\(\\['A', 'B'\\], dtype='object'\\)
+    \\[right\\]: Index\\(\\['A', 'b'\\], dtype='object'\\)
+
+    Parameters
+    ----------
+    obj_fixture :
+        
+
+    Returns
+    -------
 
     df1 = DataFrame({"A": [1, 2, 3], "B": [4, 5, 6]}, index=["a", "b", "c"])
     df2 = DataFrame({"A": [1, 2, 3], "b": [4, 5, 6]}, index=["a", "b", "c"])
@@ -174,6 +280,19 @@
 
 
 def test_frame_equal_block_mismatch(by_blocks_fixture, obj_fixture):
+    """
+
+    Parameters
+    ----------
+    by_blocks_fixture :
+        
+    obj_fixture :
+        
+
+    Returns
+    -------
+
+    """
     obj = obj_fixture
     msg = f"""{obj}\\.iloc\\[:, 1\\] \\(column name="B"\\) are different
 
@@ -215,6 +334,25 @@
     ],
 )
 def test_frame_equal_unicode(df1, df2, msg, by_blocks_fixture, obj_fixture):
+    """
+
+    Parameters
+    ----------
+    df1 :
+        
+    df2 :
+        
+    msg :
+        
+    by_blocks_fixture :
+        
+    obj_fixture :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-20503
     #
     # Test ensures that `tm.assert_frame_equals` raises the right exception
@@ -225,6 +363,7 @@
 
 
 def test_assert_frame_equal_extension_dtype_mismatch():
+    """ """
     # https://github.com/pandas-dev/pandas/issues/32747
     left = DataFrame({"a": [1, 2, 3]}, dtype="Int64")
     right = left.astype(int)
@@ -244,6 +383,7 @@
 
 
 def test_assert_frame_equal_interval_dtype_mismatch():
+    """ """
     # https://github.com/pandas-dev/pandas/issues/32747
     left = DataFrame({"a": [pd.Interval(0, 1)]}, dtype="interval")
     right = left.astype(object)
@@ -264,6 +404,17 @@
 
 @pytest.mark.parametrize("right_dtype", ["Int32", "int64"])
 def test_assert_frame_equal_ignore_extension_dtype_mismatch(right_dtype):
+    """
+
+    Parameters
+    ----------
+    right_dtype :
+        
+
+    Returns
+    -------
+
+    """
     # https://github.com/pandas-dev/pandas/issues/35715
     left = pd.DataFrame({"a": [1, 2, 3]}, dtype="Int64")
     right = pd.DataFrame({"a": [1, 2, 3]}, dtype=right_dtype)
