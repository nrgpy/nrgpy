# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/lib/demo.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/lib/demo.py
@@ -193,9 +193,11 @@
 class DemoError(Exception): pass
 
 def re_mark(mark):
+    """ """
     return re.compile(r'^\s*#\s+<demo>\s+%s\s*$' % mark,re.MULTILINE)
 
 class Demo(object):
+    """ """
 
     re_stop     = re_mark(r'-*\s?stop\s?-*')
     re_silent   = re_mark('silent')
@@ -340,13 +342,34 @@
         self.block_index = 0
 
     def _validate_index(self,index):
+        """
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         if index<0 or index>=self.nblocks:
             raise ValueError('invalid block index %s' % index)
 
     def _get_index(self,index):
         """Get the current block index, validating and checking status.
-
-        Returns None if the demo is finished"""
+        
+        Returns None if the demo is finished
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
 
         if index is None:
             if self.finished:
@@ -359,9 +382,19 @@
 
     def seek(self,index):
         """Move the current seek pointer to the given block.
-
+        
         You can use negative indices to seek from the end, with identical
-        semantics to those of Python lists."""
+        semantics to those of Python lists.
+
+        Parameters
+        ----------
+        index :
+            
+
+        Returns
+        -------
+
+        """
         if index<0:
             index = self.nblocks + index
         self._validate_index(index)
@@ -369,13 +402,33 @@
         self.finished = False
 
     def back(self,num=1):
-        """Move the seek pointer back num blocks (default is 1)."""
+        """Move the seek pointer back num blocks (default is 1).
+
+        Parameters
+        ----------
+        num :
+             (Default value = 1)
+
+        Returns
+        -------
+
+        """
         self.seek(self.block_index-num)
 
     def jump(self,num=1):
         """Jump a given number of blocks relative to the current one.
-
-        The offset can be positive or negative, defaults to 1."""
+        
+        The offset can be positive or negative, defaults to 1.
+
+        Parameters
+        ----------
+        num :
+             (Default value = 1)
+
+        Returns
+        -------
+
+        """
         self.seek(self.block_index+num)
 
     def again(self):
@@ -385,14 +438,24 @@
 
     def edit(self,index=None):
         """Edit a block.
-
+        
         If no number is given, use the last block executed.
-
+        
         This edits the in-memory copy of the demo, it does NOT modify the
         original source file.  If you want to do that, simply open the file in
         an editor and use reload() when you make changes to the file.  This
         method is meant to let you change a block during a demonstration for
-        explanatory purposes, without damaging your original script."""
+        explanatory purposes, without damaging your original script.
+
+        Parameters
+        ----------
+        index :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
 
         index = self._get_index(index)
         if index is None:
@@ -414,7 +477,17 @@
         self()
 
     def show(self,index=None):
-        """Show a single block on screen"""
+        """Show a single block on screen
+
+        Parameters
+        ----------
+        index :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
 
         index = self._get_index(index)
         if index is None:
@@ -444,7 +517,17 @@
         sys.stdout.flush()
 
     def run_cell(self,source):
-        """Execute a string with one or more lines of code"""
+        """Execute a string with one or more lines of code
+
+        Parameters
+        ----------
+        source :
+            
+
+        Returns
+        -------
+
+        """
 
         exec(source, self.user_ns)
 
@@ -505,7 +588,23 @@
     # These methods are meant to be overridden by subclasses who may wish to
     # customize the behavior of of their demos.
     def marquee(self,txt='',width=78,mark='*'):
-        """Return the input string centered in a 'marquee'."""
+        """
+
+        Parameters
+        ----------
+        txt :
+             (Default value = '')
+        width :
+             (Default value = 78)
+        mark :
+             (Default value = '*')
+
+        Returns
+        -------
+        type
+            
+
+        """
         return marquee(txt,width,mark)
 
     def pre_cmd(self):
@@ -517,7 +616,17 @@
         pass
 
     def highlight(self, block):
-        """Method called on each block to highlight it content"""
+        """Method called on each block to highlight it content
+
+        Parameters
+        ----------
+        block :
+            
+
+        Returns
+        -------
+
+        """
         tokens = pygments.lex(block, self.python_lexer)
         if self.format_rst:
             from pygments.token import Token
@@ -541,35 +650,60 @@
 
 class IPythonDemo(Demo):
     """Class for interactive demos with IPython's input processing applied.
-
+    
     This subclasses Demo, but instead of executing each block by the Python
     interpreter (via exec), it actually calls IPython on it, so that any input
     filters which may be in place are applied to the input block.
-
+    
     If you have an interactive environment which exposes special input
     processing, you can use this class instead to write demo scripts which
     operate exactly as if you had typed them interactively.  The default Demo
     class requires the input to be valid, pure Python code.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def run_cell(self,source):
-        """Execute a string with one or more lines of code"""
+        """Execute a string with one or more lines of code
+
+        Parameters
+        ----------
+        source :
+            
+
+        Returns
+        -------
+
+        """
 
         self.shell.run_cell(source)
 
 class LineDemo(Demo):
     """Demo where each line is executed as a separate block.
-
+    
     The input script should be valid Python code.
-
+    
     This class doesn't require any markup at all, and it's meant for simple
     scripts (with no nesting or any kind of indentation) which consist of
     multiple lines of input to be executed, one at a time, as if they had been
     typed in the interactive prompt.
-
+    
     Note: the input can not have *any* indentation, which means that only
     single-lines of input are accepted, not even function definitions are
-    valid."""
+    valid.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
+    """
 
     def reload(self):
         """Reload source from disk and initialize state."""
@@ -599,40 +733,94 @@
 
 class ClearMixin(object):
     """Use this mixin to make Demo classes with less visual clutter.
-
+    
     Demos using this mixin will clear the screen before every block and use
     blank marquees.
-
+    
     Note that in order for the methods defined here to actually override those
     of the classes it's mixed with, it must go /first/ in the inheritance
     tree.  For example:
-
+    
         class ClearIPDemo(ClearMixin,IPythonDemo): pass
-
+    
     will provide an IPythonDemo class with the mixin's features.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def marquee(self,txt='',width=78,mark='*'):
-        """Blank marquee that returns '' no matter what the input."""
+        """Blank marquee that returns '' no matter what the input.
+
+        Parameters
+        ----------
+        txt :
+             (Default value = '')
+        width :
+             (Default value = 78)
+        mark :
+             (Default value = '*')
+
+        Returns
+        -------
+
+        """
         return ''
 
     def pre_cmd(self):
         """Method called before executing each block.
-
-        This one simply clears the screen."""
+        
+        This one simply clears the screen.
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
+        """
         from IPython.utils.terminal import _term_clear
         _term_clear()
 
 class ClearDemo(ClearMixin,Demo):
+    """ """
     pass
 
 
 class ClearIPDemo(ClearMixin,IPythonDemo):
+    """ """
     pass
 
 
 def slide(file_path, noclear=False, format_rst=True, formatter="terminal",
           style="native", auto_all=False, delimiter='...'):
+    """
+
+    Parameters
+    ----------
+    file_path :
+        
+    noclear :
+         (Default value = False)
+    format_rst :
+         (Default value = True)
+    formatter :
+         (Default value = "terminal")
+    style :
+         (Default value = "native")
+    auto_all :
+         (Default value = False)
+    delimiter :
+         (Default value = '...')
+
+    Returns
+    -------
+
+    """
     if noclear:
         demo_class = Demo
     else:
