# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/datetimes/test_timezones.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexes/datetimes/test_timezones.py
@@ -33,12 +33,45 @@
         self.__name = name
 
     def utcoffset(self, dt):
+        """
+
+        Parameters
+        ----------
+        dt :
+            
+
+        Returns
+        -------
+
+        """
         return self.__offset
 
     def tzname(self, dt):
+        """
+
+        Parameters
+        ----------
+        dt :
+            
+
+        Returns
+        -------
+
+        """
         return self.__name
 
     def dst(self, dt):
+        """
+
+        Parameters
+        ----------
+        dt :
+            
+
+        Returns
+        -------
+
+        """
         return timedelta(0)
 
 
@@ -47,9 +80,11 @@
 
 
 class TestDatetimeIndexTimezones:
+    """ """
     # -------------------------------------------------------------
     # DatetimeIndex.tz_convert
     def test_tz_convert_nat(self):
+        """ """
         # GH#5546
         dates = [pd.NaT]
         idx = DatetimeIndex(dates)
@@ -85,6 +120,17 @@
 
     @pytest.mark.parametrize("prefix", ["", "dateutil/"])
     def test_dti_tz_convert_compat_timestamp(self, prefix):
+        """
+
+        Parameters
+        ----------
+        prefix :
+            
+
+        Returns
+        -------
+
+        """
         strdates = ["1/1/2012", "3/1/2012", "4/1/2012"]
         idx = DatetimeIndex(strdates, tz=prefix + "US/Eastern")
 
@@ -94,6 +140,7 @@
         assert conv == expected
 
     def test_dti_tz_convert_hour_overflow_dst(self):
+        """ """
         # Regression test for:
         # https://github.com/pandas-dev/pandas/issues/13306
 
@@ -127,6 +174,17 @@
 
     @pytest.mark.parametrize("tz", ["US/Eastern", "dateutil/US/Eastern"])
     def test_dti_tz_convert_hour_overflow_dst_timestamps(self, tz):
+        """
+
+        Parameters
+        ----------
+        tz :
+            
+
+        Returns
+        -------
+
+        """
         # Regression test for GH#13306
 
         # sorted case US/Eastern -> UTC
@@ -175,6 +233,19 @@
 
     @pytest.mark.parametrize("freq, n", [("H", 1), ("T", 60), ("S", 3600)])
     def test_dti_tz_convert_trans_pos_plus_1__bug(self, freq, n):
+        """
+
+        Parameters
+        ----------
+        freq :
+            
+        n :
+            
+
+        Returns
+        -------
+
+        """
         # Regression test for tslib.tz_convert(vals, tz1, tz2).
         # See https://github.com/pandas-dev/pandas/issues/4496 for details.
         idx = date_range(datetime(2011, 3, 26, 23), datetime(2011, 3, 27, 1), freq=freq)
@@ -185,6 +256,7 @@
         tm.assert_index_equal(idx.hour, Index(expected))
 
     def test_dti_tz_convert_dst(self):
+        """ """
         for freq, n in [("H", 1), ("T", 60), ("S", 3600)]:
             # Start DST
             idx = date_range(
@@ -252,6 +324,17 @@
         tm.assert_index_equal(idx.hour, Index([4, 4]))
 
     def test_tz_convert_roundtrip(self, tz_aware_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_aware_fixture :
+            
+
+        Returns
+        -------
+
+        """
         tz = tz_aware_fixture
         idx1 = date_range(start="2014-01-01", end="2014-12-31", freq="M", tz="UTC")
         exp1 = date_range(start="2014-01-01", end="2014-12-31", freq="M")
@@ -275,6 +358,7 @@
             tm.assert_index_equal(reset, expected)
 
     def test_dti_tz_convert_tzlocal(self):
+        """ """
         # GH#13583
         # tz_convert doesn't affect to internal
         dti = date_range(start="2001-01-01", end="2001-03-01", tz="UTC")
@@ -295,6 +379,17 @@
         ],
     )
     def test_dti_tz_convert_utc_to_local_no_modify(self, tz):
+        """
+
+        Parameters
+        ----------
+        tz :
+            
+
+        Returns
+        -------
+
+        """
         rng = date_range("3/11/2012", "3/12/2012", freq="H", tz="utc")
         rng_eastern = rng.tz_convert(tz)
 
@@ -305,6 +400,17 @@
 
     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
     def test_tz_convert_unsorted(self, tzstr):
+        """
+
+        Parameters
+        ----------
+        tzstr :
+            
+
+        Returns
+        -------
+
+        """
         dr = date_range("2012-03-09", freq="H", periods=100, tz="utc")
         dr = dr.tz_convert(tzstr)
 
@@ -316,6 +422,7 @@
     # DatetimeIndex.tz_localize
 
     def test_dti_tz_localize_nonexistent_raise_coerce(self):
+        """ """
         # GH#13057
         times = ["2015-03-08 01:00", "2015-03-08 02:00", "2015-03-08 03:00"]
         index = DatetimeIndex(times)
@@ -334,6 +441,17 @@
 
     @pytest.mark.parametrize("tz", [pytz.timezone("US/Eastern"), gettz("US/Eastern")])
     def test_dti_tz_localize_ambiguous_infer(self, tz):
+        """
+
+        Parameters
+        ----------
+        tz :
+            
+
+        Returns
+        -------
+
+        """
         # November 6, 2011, fall back, repeat 2 AM hour
         # With no repeated hours, we cannot infer the transition
         dr = date_range(datetime(2011, 11, 6, 0), periods=5, freq=pd.offsets.Hour())
@@ -365,6 +483,17 @@
 
     @pytest.mark.parametrize("tz", [pytz.timezone("US/Eastern"), gettz("US/Eastern")])
     def test_dti_tz_localize_ambiguous_times(self, tz):
+        """
+
+        Parameters
+        ----------
+        tz :
+            
+
+        Returns
+        -------
+
+        """
         # March 13, 2011, spring forward, skip from 2 AM to 3 AM
         dr = date_range(datetime(2011, 3, 13, 1, 30), periods=3, freq=pd.offsets.Hour())
         with pytest.raises(pytz.NonExistentTimeError, match="2011-03-13 02:30:00"):
@@ -387,6 +516,17 @@
 
     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
     def test_dti_tz_localize_pass_dates_to_utc(self, tzstr):
+        """
+
+        Parameters
+        ----------
+        tzstr :
+            
+
+        Returns
+        -------
+
+        """
         strdates = ["1/1/2012", "3/1/2012", "4/1/2012"]
 
         idx = DatetimeIndex(strdates)
@@ -399,6 +539,17 @@
 
     @pytest.mark.parametrize("prefix", ["", "dateutil/"])
     def test_dti_tz_localize(self, prefix):
+        """
+
+        Parameters
+        ----------
+        prefix :
+            
+
+        Returns
+        -------
+
+        """
         tzstr = prefix + "US/Eastern"
         dti = pd.date_range(start="1/1/2005", end="1/1/2005 0:00:30.256", freq="L")
         dti2 = dti.tz_localize(tzstr)
@@ -430,6 +581,17 @@
         ],
     )
     def test_dti_tz_localize_utc_conversion(self, tz):
+        """
+
+        Parameters
+        ----------
+        tz :
+            
+
+        Returns
+        -------
+
+        """
         # Localizing to time zone should:
         #  1) check for DST ambiguities
         #  2) convert to UTC
@@ -447,6 +609,17 @@
             rng.tz_localize(tz)
 
     def test_dti_tz_localize_roundtrip(self, tz_aware_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_aware_fixture :
+            
+
+        Returns
+        -------
+
+        """
         # note: this tz tests that a tz-naive index can be localized
         # and de-localized successfully, when there are no DST transitions
         # in the range.
@@ -464,6 +637,7 @@
         tm.assert_index_equal(reset, expected)
 
     def test_dti_tz_localize_naive(self):
+        """ """
         rng = date_range("1/1/2011", periods=100, freq="H")
 
         conv = rng.tz_localize("US/Pacific")
@@ -472,6 +646,7 @@
         tm.assert_index_equal(conv, exp._with_freq(None))
 
     def test_dti_tz_localize_tzlocal(self):
+        """ """
         # GH#13583
         offset = dateutil.tz.tzlocal().utcoffset(datetime(2011, 1, 1))
         offset = int(offset.total_seconds() * 1000000000)
@@ -486,6 +661,17 @@
 
     @pytest.mark.parametrize("tz", [pytz.timezone("US/Eastern"), gettz("US/Eastern")])
     def test_dti_tz_localize_ambiguous_nat(self, tz):
+        """
+
+        Parameters
+        ----------
+        tz :
+            
+
+        Returns
+        -------
+
+        """
         times = [
             "11/06/2011 00:00",
             "11/06/2011 01:00",
@@ -511,6 +697,17 @@
 
     @pytest.mark.parametrize("tz", [pytz.timezone("US/Eastern"), gettz("US/Eastern")])
     def test_dti_tz_localize_ambiguous_flags(self, tz):
+        """
+
+        Parameters
+        ----------
+        tz :
+            
+
+        Returns
+        -------
+
+        """
         # November 6, 2011, fall back, repeat 2 AM hour
 
         # Pass in flags to determine right dst transition
@@ -568,6 +765,17 @@
     # TODO: belongs outside tz_localize tests?
     @pytest.mark.parametrize("tz", ["Europe/London", "dateutil/Europe/London"])
     def test_dti_construction_ambiguous_endpoint(self, tz):
+        """
+
+        Parameters
+        ----------
+        tz :
+            
+
+        Returns
+        -------
+
+        """
         # construction with an ambiguous end-point
         # GH#11626
 
@@ -593,6 +801,21 @@
         ],
     )
     def test_dti_construction_nonexistent_endpoint(self, tz, option, expected):
+        """
+
+        Parameters
+        ----------
+        tz :
+            
+        option :
+            
+        expected :
+            
+
+        Returns
+        -------
+
+        """
         # construction with an nonexistent end-point
 
         with pytest.raises(pytz.NonExistentTimeError, match="2019-03-10 02:00:00"):
@@ -606,6 +829,7 @@
         assert times[-1] == Timestamp(expected, tz=tz, freq="H")
 
     def test_dti_tz_localize_bdate_range(self):
+        """ """
         dr = pd.bdate_range("1/1/2009", "1/1/2010")
         dr_utc = pd.bdate_range("1/1/2009", "1/1/2010", tz=pytz.utc)
         localized = dr.tz_localize(pytz.utc)
@@ -616,6 +840,21 @@
         "method, exp", [["NaT", pd.NaT], ["raise", None], ["foo", "invalid"]]
     )
     def test_dti_tz_localize_nonexistent(self, tz, method, exp):
+        """
+
+        Parameters
+        ----------
+        tz :
+            
+        method :
+            
+        exp :
+            
+
+        Returns
+        -------
+
+        """
         # GH 8917
         n = 60
         dti = date_range(start="2015-03-29 02:00:00", periods=n, freq="min")
@@ -682,6 +921,25 @@
     def test_dti_tz_localize_nonexistent_shift(
         self, start_ts, tz, end_ts, shift, tz_type
     ):
+        """
+
+        Parameters
+        ----------
+        start_ts :
+            
+        tz :
+            
+        end_ts :
+            
+        shift :
+            
+        tz_type :
+            
+
+        Returns
+        -------
+
+        """
         # GH 8917
         tz = tz_type + tz
         if isinstance(shift, str):
@@ -694,6 +952,19 @@
     @pytest.mark.parametrize("offset", [-1, 1])
     @pytest.mark.parametrize("tz_type", ["", "dateutil/"])
     def test_dti_tz_localize_nonexistent_shift_invalid(self, offset, tz_type):
+        """
+
+        Parameters
+        ----------
+        offset :
+            
+        tz_type :
+            
+
+        Returns
+        -------
+
+        """
         # GH 8917
         tz = tz_type + "Europe/Warsaw"
         dti = DatetimeIndex([Timestamp("2015-03-29 02:20:00")])
@@ -705,6 +976,7 @@
     # DatetimeIndex.normalize
 
     def test_normalize_tz(self):
+        """ """
         rng = date_range("1/1/2000 9:30", periods=10, freq="D", tz="US/Eastern")
 
         result = rng.normalize()  # does not preserve freq
@@ -744,6 +1016,17 @@
         ],
     )
     def test_normalize_tz_local(self, timezone):
+        """
+
+        Parameters
+        ----------
+        timezone :
+            
+
+        Returns
+        -------
+
+        """
         # GH#13459
         with tm.set_timezone(timezone):
             rng = date_range("1/1/2000 9:30", periods=10, freq="D", tz=tzlocal())
@@ -761,12 +1044,24 @@
 
     @pytest.mark.parametrize("prefix", ["", "dateutil/"])
     def test_dti_constructor_static_tzinfo(self, prefix):
+        """
+
+        Parameters
+        ----------
+        prefix :
+            
+
+        Returns
+        -------
+
+        """
         # it works!
         index = DatetimeIndex([datetime(2012, 1, 1)], tz=prefix + "EST")
         index.hour
         index[0]
 
     def test_dti_constructor_with_fixed_tz(self):
+        """ """
         off = FixedOffset(420, "+07:00")
         start = datetime(2012, 3, 11, 5, 0, 0, tzinfo=off)
         end = datetime(2012, 6, 11, 5, 0, 0, tzinfo=off)
@@ -781,17 +1076,40 @@
 
     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
     def test_dti_convert_datetime_list(self, tzstr):
+        """
+
+        Parameters
+        ----------
+        tzstr :
+            
+
+        Returns
+        -------
+
+        """
         dr = date_range("2012-06-02", periods=10, tz=tzstr, name="foo")
         dr2 = DatetimeIndex(list(dr), name="foo", freq="D")
         tm.assert_index_equal(dr, dr2)
 
     def test_dti_construction_univalent(self):
+        """ """
         rng = date_range("03/12/2012 00:00", periods=10, freq="W-FRI", tz="US/Eastern")
         rng2 = DatetimeIndex(data=rng, tz="US/Eastern")
         tm.assert_index_equal(rng, rng2)
 
     @pytest.mark.parametrize("tz", [pytz.timezone("US/Eastern"), gettz("US/Eastern")])
     def test_dti_from_tzaware_datetime(self, tz):
+        """
+
+        Parameters
+        ----------
+        tz :
+            
+
+        Returns
+        -------
+
+        """
         d = [datetime(2012, 8, 19, tzinfo=tz)]
 
         index = DatetimeIndex(d)
@@ -799,8 +1117,17 @@
 
     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
     def test_dti_tz_constructors(self, tzstr):
-        """ Test different DatetimeIndex constructions with timezone
+        """Test different DatetimeIndex constructions with timezone
         Follow-up of GH#4229
+
+        Parameters
+        ----------
+        tzstr :
+            
+
+        Returns
+        -------
+
         """
         arr = ["11/10/2005 08:00:00", "11/10/2005 09:00:00"]
 
@@ -821,6 +1148,17 @@
         [None, "datetime64[ns, CET]", "datetime64[ns, EST]", "datetime64[ns, UTC]"],
     )
     def test_date_accessor(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         # Regression test for GH#21230
         expected = np.array([date(2018, 6, 4), pd.NaT])
 
@@ -834,6 +1172,17 @@
         [None, "datetime64[ns, CET]", "datetime64[ns, EST]", "datetime64[ns, UTC]"],
     )
     def test_time_accessor(self, dtype):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+
+        Returns
+        -------
+
+        """
         # Regression test for GH#21267
         expected = np.array([time(10, 20, 30), pd.NaT])
 
@@ -843,6 +1192,17 @@
         tm.assert_numpy_array_equal(result, expected)
 
     def test_timetz_accessor(self, tz_naive_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+
+        Returns
+        -------
+
+        """
         # GH21358
         tz = timezones.maybe_get_tz(tz_naive_fixture)
 
@@ -854,6 +1214,7 @@
         tm.assert_numpy_array_equal(result, expected)
 
     def test_dti_drop_dont_lose_tz(self):
+        """ """
         # GH#2621
         ind = date_range("2012-12-01", periods=10, tz="utc")
         ind = ind.drop(ind[-1])
@@ -861,6 +1222,17 @@
         assert ind.tz is not None
 
     def test_dti_tz_conversion_freq(self, tz_naive_fixture):
+        """
+
+        Parameters
+        ----------
+        tz_naive_fixture :
+            
+
+        Returns
+        -------
+
+        """
         # GH25241
         t3 = DatetimeIndex(["2019-01-01 10:00"], freq="H")
         assert t3.tz_localize(tz=tz_naive_fixture).freq == t3.freq
@@ -868,6 +1240,7 @@
         assert t4.tz_convert(tz="UTC").freq == t4.freq
 
     def test_drop_dst_boundary(self):
+        """ """
         # see gh-18031
         tz = "Europe/Brussels"
         freq = "15min"
@@ -912,6 +1285,7 @@
         tm.assert_index_equal(result, expected)
 
     def test_date_range_localize(self):
+        """ """
         rng = date_range("3/11/2012 03:00", periods=15, freq="H", tz="US/Eastern")
         rng2 = DatetimeIndex(["3/11/2012 03:00", "3/11/2012 04:00"], tz="US/Eastern")
         rng3 = date_range("3/11/2012 03:00", periods=15, freq="H")
@@ -945,6 +1319,7 @@
         assert rng[2].hour == 3
 
     def test_timestamp_equality_different_timezones(self):
+        """ """
         utc_range = date_range("1/1/2000", periods=20, tz="UTC")
         eastern_range = utc_range.tz_convert("US/Eastern")
         berlin_range = utc_range.tz_convert("Europe/Berlin")
@@ -959,6 +1334,7 @@
         assert (berlin_range == eastern_range).all()
 
     def test_dti_intersection(self):
+        """ """
         rng = date_range("1/1/2011", periods=100, freq="H", tz="utc")
 
         left = rng[10:90][::-1]
@@ -969,6 +1345,7 @@
         assert result.tz == left.tz
 
     def test_dti_equals_with_tz(self):
+        """ """
         left = date_range("1/1/2011", periods=100, freq="H", tz="utc")
         right = date_range("1/1/2011", periods=100, freq="H", tz="US/Eastern")
 
@@ -976,6 +1353,17 @@
 
     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
     def test_dti_tz_nat(self, tzstr):
+        """
+
+        Parameters
+        ----------
+        tzstr :
+            
+
+        Returns
+        -------
+
+        """
         idx = DatetimeIndex([Timestamp("2013-1-1", tz=tzstr), pd.NaT])
 
         assert isna(idx[1])
@@ -983,6 +1371,17 @@
 
     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
     def test_dti_astype_asobject_tzinfos(self, tzstr):
+        """
+
+        Parameters
+        ----------
+        tzstr :
+            
+
+        Returns
+        -------
+
+        """
         # GH#1345
 
         # dates around a dst transition
@@ -1002,6 +1401,17 @@
 
     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
     def test_dti_with_timezone_repr(self, tzstr):
+        """
+
+        Parameters
+        ----------
+        tzstr :
+            
+
+        Returns
+        -------
+
+        """
         rng = date_range("4/13/2010", "5/6/2010")
 
         rng_eastern = rng.tz_localize(tzstr)
@@ -1011,6 +1421,17 @@
 
     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
     def test_dti_take_dont_lose_meta(self, tzstr):
+        """
+
+        Parameters
+        ----------
+        tzstr :
+            
+
+        Returns
+        -------
+
+        """
         rng = date_range("1/1/2000", periods=20, tz=tzstr)
 
         result = rng.take(range(5))
@@ -1019,6 +1440,17 @@
 
     @pytest.mark.parametrize("tzstr", ["US/Eastern", "dateutil/US/Eastern"])
     def test_utc_box_timestamp_and_localize(self, tzstr):
+        """
+
+        Parameters
+        ----------
+        tzstr :
+            
+
+        Returns
+        -------
+
+        """
         tz = timezones.maybe_get_tz(tzstr)
 
         rng = date_range("3/11/2012", "3/12/2012", freq="H", tz="utc")
@@ -1040,6 +1472,7 @@
         )
 
     def test_dti_to_pydatetime(self):
+        """ """
         dt = dateutil.parser.parse("2012-06-13T01:39:00Z")
         dt = dt.replace(tzinfo=tzlocal())
 
@@ -1054,6 +1487,7 @@
         assert result.tz is pytz.utc
 
     def test_dti_to_pydatetime_fizedtz(self):
+        """ """
         dates = np.array(
             [
                 datetime(2000, 1, 1, tzinfo=fixed_off),
@@ -1071,6 +1505,17 @@
 
     @pytest.mark.parametrize("tz", [pytz.timezone("US/Central"), gettz("US/Central")])
     def test_with_tz(self, tz):
+        """
+
+        Parameters
+        ----------
+        tz :
+            
+
+        Returns
+        -------
+
+        """
         # just want it to work
         start = datetime(2011, 3, 12, tzinfo=pytz.utc)
         dr = bdate_range(start, periods=50, freq=pd.offsets.Hour())
@@ -1102,6 +1547,17 @@
 
     @pytest.mark.parametrize("prefix", ["", "dateutil/"])
     def test_field_access_localize(self, prefix):
+        """
+
+        Parameters
+        ----------
+        prefix :
+            
+
+        Returns
+        -------
+
+        """
         strdates = ["1/1/2012", "3/1/2012", "4/1/2012"]
         rng = DatetimeIndex(strdates, tz=prefix + "US/Eastern")
         assert (rng.hour == 0).all()
@@ -1116,6 +1572,17 @@
 
     @pytest.mark.parametrize("tz", [pytz.timezone("US/Eastern"), gettz("US/Eastern")])
     def test_dti_convert_tz_aware_datetime_datetime(self, tz):
+        """
+
+        Parameters
+        ----------
+        tz :
+            
+
+        Returns
+        -------
+
+        """
         # GH#1581
         dates = [datetime(2000, 1, 1), datetime(2000, 1, 2), datetime(2000, 1, 3)]
 
@@ -1129,6 +1596,7 @@
         assert converted.tz is pytz.utc
 
     def test_dti_union_aware(self):
+        """ """
         # non-overlapping
         rng = date_range("2012-11-15 00:00:00", periods=6, freq="H", tz="US/Central")
 
@@ -1141,6 +1609,7 @@
         assert result[-1].tz.zone == "US/Eastern"
 
     def test_dti_union_mixed(self):
+        """ """
         # GH 21671
         rng = DatetimeIndex([pd.Timestamp("2011-01-01"), pd.NaT])
         rng2 = pd.DatetimeIndex(["2012-01-01", "2012-01-02"], tz="Asia/Tokyo")
@@ -1161,6 +1630,17 @@
     )
     @pytest.mark.usefixtures("datetime_tz_utc")
     def test_iteration_preserves_nanoseconds(self, tz):
+        """
+
+        Parameters
+        ----------
+        tz :
+            
+
+        Returns
+        -------
+
+        """
         # GH 19603
         index = DatetimeIndex(
             ["2018-02-08 15:00:00.168456358", "2018-02-08 15:00:00.168456359"], tz=tz
@@ -1170,6 +1650,7 @@
 
 
 def test_tz_localize_invalidates_freq():
+    """ """
     # we only preserve freq in unambiguous cases
 
     # if localized to US/Eastern, this crosses a DST transition
