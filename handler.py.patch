# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/requests_toolbelt/auth/handler.py
+++ b/..//venv/lib/python3.8/site-packages/requests_toolbelt/auth/handler.py
@@ -14,40 +14,44 @@
 
 class AuthHandler(AuthBase):
 
-    """
-
-    The ``AuthHandler`` object takes a dictionary of domains paired with
+    """The ``AuthHandler`` object takes a dictionary of domains paired with
     authentication strategies and will use this to determine which credentials
     to use when making a request. For example, you could do the following:
-
+    
     .. code-block:: python
-
+    
         from requests import HTTPDigestAuth
         from requests_toolbelt.auth.handler import AuthHandler
-
+    
         import requests
-
+    
         auth = AuthHandler({
             'https://api.github.com': ('sigmavirus24', 'fakepassword'),
             'https://example.com': HTTPDigestAuth('username', 'password')
         })
-
+    
         r = requests.get('https://api.github.com/user', auth=auth)
         # => <Response [200]>
         r = requests.get('https://example.com/some/path', auth=auth)
         # => <Response [200]>
-
+    
         s = requests.Session()
         s.auth = auth
         r = s.get('https://api.github.com/user')
         # => <Response [200]>
-
+    
     .. warning::
-
+    
         :class:`requests.auth.HTTPDigestAuth` is not yet thread-safe. If you
         use :class:`AuthHandler` across multiple threads you should
         instantiate a new AuthHandler for each thread with a new
         HTTPDigestAuth instance for each thread.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
 
     """
 
@@ -63,6 +67,7 @@
         return '<AuthHandler({0!r})>'.format(self.strategies)
 
     def _make_uniform(self):
+        """ """
         existing_strategies = list(self.strategies.items())
         self.strategies = {}
 
@@ -71,6 +76,17 @@
 
     @staticmethod
     def _key_from_url(url):
+        """
+
+        Parameters
+        ----------
+        url :
+            
+
+        Returns
+        -------
+
+        """
         parsed = urlparse(url)
         return urlunparse((parsed.scheme.lower(),
                            parsed.netloc.lower(),
@@ -79,16 +95,27 @@
     def add_strategy(self, domain, strategy):
         """Add a new domain and authentication strategy.
 
-        :param str domain: The domain you wish to match against. For example:
+        Parameters
+        ----------
+        str :
+            domain: The domain you wish to match against. For example:
             ``'https://api.github.com'``
-        :param str strategy: The authentication strategy you wish to use for
+        str :
+            strategy: The authentication strategy you wish to use for
             that domain. For example: ``('username', 'password')`` or
             ``requests.HTTPDigestAuth('username', 'password')``
-
-        .. code-block:: python
-
+            
+            .. code-block:: python
+            
             a = AuthHandler({})
             a.add_strategy('https://api.github.com', ('username', 'password'))
+        domain :
+            
+        strategy :
+            
+
+        Returns
+        -------
 
         """
         # Turn tuples into Basic Authentication objects
@@ -101,12 +128,21 @@
     def get_strategy_for(self, url):
         """Retrieve the authentication strategy for a specified URL.
 
-        :param str url: The full URL you will be making a request against. For
+        Parameters
+        ----------
+        str :
+            url: The full URL you will be making a request against. For
             example, ``'https://api.github.com/user'``
-        :returns: Callable that adds authentication to a request.
+        url :
+            
 
-        .. code-block:: python
-
+        Returns
+        -------
+        type
+            Callable that adds authentication to a request.
+            
+            .. code-block:: python
+            
             import requests
             a = AuthHandler({'example.com', ('foo', 'bar')})
             strategy = a.get_strategy_for('http://example.com/example')
@@ -119,14 +155,22 @@
     def remove_strategy(self, domain):
         """Remove the domain and strategy from the collection of strategies.
 
-        :param str domain: The domain you wish remove. For example,
+        Parameters
+        ----------
+        str :
+            domain: The domain you wish remove. For example,
             ``'https://api.github.com'``.
-
-        .. code-block:: python
-
+            
+            .. code-block:: python
+            
             a = AuthHandler({'example.com', ('foo', 'bar')})
             a.remove_strategy('example.com')
             assert a.strategies == {}
+        domain :
+            
+
+        Returns
+        -------
 
         """
         key = self._key_from_url(domain)
@@ -135,6 +179,7 @@
 
 
 class NullAuthStrategy(AuthBase):
+    """ """
     def __repr__(self):
         return '<NullAuthStrategy>'
 
