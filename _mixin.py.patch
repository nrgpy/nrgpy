# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/rfc3986/_mixin.py
+++ b/..//venv/lib/python3.8/site-packages/rfc3986/_mixin.py
@@ -14,16 +14,24 @@
 
     def authority_info(self):
         """Return a dictionary with the ``userinfo``, ``host``, and ``port``.
-
+        
         If the authority is not valid, it will raise a
         :class:`~rfc3986.exceptions.InvalidAuthority` Exception.
 
-        :returns:
-            ``{'userinfo': 'username:password', 'host': 'www.example.com',
+        Parameters
+        ----------
+
+        Returns
+        -------
+        dict
+            userinfo': 'username:password', 'host': 'www.example.com',
             'port': '80'}``
-        :rtype: dict
-        :raises rfc3986.exceptions.InvalidAuthority:
+
+        Raises
+        ------
+        rfc3986.exceptions.InvalidAuthority
             If the authority is not ``None`` and can not be parsed.
+
         """
         if not self.authority:
             return {'userinfo': None, 'host': None, 'port': None}
@@ -51,6 +59,7 @@
         return matches
 
     def _match_subauthority(self):
+        """ """
         return misc.SUBAUTHORITY_MATCHER.match(self.authority)
 
     @property
@@ -82,33 +91,52 @@
 
     def is_absolute(self):
         """Determine if this URI Reference is an absolute URI.
-
+        
         See http://tools.ietf.org/html/rfc3986#section-4.3 for explanation.
 
-        :returns: ``True`` if it is an absolute URI, ``False`` otherwise.
-        :rtype: bool
+        Parameters
+        ----------
+
+        Returns
+        -------
+        bool
+            True`` if it is an absolute URI, ``False`` otherwise.
+
         """
         return bool(misc.ABSOLUTE_URI_MATCHER.match(self.unsplit()))
 
     def is_valid(self, **kwargs):
         """Determine if the URI is valid.
-
-        .. deprecated:: 1.1.0
-
+        
+        .. deprecated:: 1.1.0
+        
             Use the :class:`~rfc3986.validators.Validator` object instead.
 
-        :param bool require_scheme: Set to ``True`` if you wish to require the
+        Parameters
+        ----------
+        bool :
+            require_scheme: Set to ``True`` if you wish to require the
             presence of the scheme component.
-        :param bool require_authority: Set to ``True`` if you wish to require
+        bool :
+            require_authority: Set to ``True`` if you wish to require
             the presence of the authority component.
-        :param bool require_path: Set to ``True`` if you wish to require the
+        bool :
+            require_path: Set to ``True`` if you wish to require the
             presence of the path component.
-        :param bool require_query: Set to ``True`` if you wish to require the
+        bool :
+            require_query: Set to ``True`` if you wish to require the
             presence of the query component.
-        :param bool require_fragment: Set to ``True`` if you wish to require
+        bool :
+            require_fragment: Set to ``True`` if you wish to require
             the presence of the fragment component.
-        :returns: ``True`` if the URI is valid. ``False`` otherwise.
-        :rtype: bool
+        **kwargs :
+            
+
+        Returns
+        -------
+        bool
+            True`` if the URI is valid. ``False`` otherwise.
+
         """
         warnings.warn("Please use rfc3986.validators.Validator instead. "
                       "This method will be eventually removed.",
@@ -124,17 +152,24 @@
 
     def authority_is_valid(self, require=False):
         """Determine if the authority component is valid.
-
-        .. deprecated:: 1.1.0
-
+        
+        .. deprecated:: 1.1.0
+        
             Use the :class:`~rfc3986.validators.Validator` object instead.
 
-        :param bool require:
+        Parameters
+        ----------
+        bool :
+            require:
             Set to ``True`` to require the presence of this component.
-        :returns:
-            ``True`` if the authority is valid. ``False`` otherwise.
-        :rtype:
-            bool
+        require :
+             (Default value = False)
+
+        Returns
+        -------
+        bool
+            True`` if the authority is valid. ``False`` otherwise.
+
         """
         warnings.warn("Please use rfc3986.validators.Validator instead. "
                       "This method will be eventually removed.",
@@ -152,15 +187,24 @@
 
     def scheme_is_valid(self, require=False):
         """Determine if the scheme component is valid.
-
-        .. deprecated:: 1.1.0
-
+        
+        .. deprecated:: 1.1.0
+        
             Use the :class:`~rfc3986.validators.Validator` object instead.
 
-        :param str require: Set to ``True`` to require the presence of this
+        Parameters
+        ----------
+        str :
+            require: Set to ``True`` to require the presence of this
             component.
-        :returns: ``True`` if the scheme is valid. ``False`` otherwise.
-        :rtype: bool
+        require :
+             (Default value = False)
+
+        Returns
+        -------
+        bool
+            True`` if the scheme is valid. ``False`` otherwise.
+
         """
         warnings.warn("Please use rfc3986.validators.Validator instead. "
                       "This method will be eventually removed.",
@@ -169,15 +213,24 @@
 
     def path_is_valid(self, require=False):
         """Determine if the path component is valid.
-
-        .. deprecated:: 1.1.0
-
+        
+        .. deprecated:: 1.1.0
+        
             Use the :class:`~rfc3986.validators.Validator` object instead.
 
-        :param str require: Set to ``True`` to require the presence of this
+        Parameters
+        ----------
+        str :
+            require: Set to ``True`` to require the presence of this
             component.
-        :returns: ``True`` if the path is valid. ``False`` otherwise.
-        :rtype: bool
+        require :
+             (Default value = False)
+
+        Returns
+        -------
+        bool
+            True`` if the path is valid. ``False`` otherwise.
+
         """
         warnings.warn("Please use rfc3986.validators.Validator instead. "
                       "This method will be eventually removed.",
@@ -186,15 +239,24 @@
 
     def query_is_valid(self, require=False):
         """Determine if the query component is valid.
-
-        .. deprecated:: 1.1.0
-
+        
+        .. deprecated:: 1.1.0
+        
             Use the :class:`~rfc3986.validators.Validator` object instead.
 
-        :param str require: Set to ``True`` to require the presence of this
+        Parameters
+        ----------
+        str :
+            require: Set to ``True`` to require the presence of this
             component.
-        :returns: ``True`` if the query is valid. ``False`` otherwise.
-        :rtype: bool
+        require :
+             (Default value = False)
+
+        Returns
+        -------
+        bool
+            True`` if the query is valid. ``False`` otherwise.
+
         """
         warnings.warn("Please use rfc3986.validators.Validator instead. "
                       "This method will be eventually removed.",
@@ -203,15 +265,24 @@
 
     def fragment_is_valid(self, require=False):
         """Determine if the fragment component is valid.
-
-        .. deprecated:: 1.1.0
-
+        
+        .. deprecated:: 1.1.0
+        
             Use the Validator object instead.
 
-        :param str require: Set to ``True`` to require the presence of this
+        Parameters
+        ----------
+        str :
+            require: Set to ``True`` to require the presence of this
             component.
-        :returns: ``True`` if the fragment is valid. ``False`` otherwise.
-        :rtype: bool
+        require :
+             (Default value = False)
+
+        Returns
+        -------
+        bool
+            True`` if the fragment is valid. ``False`` otherwise.
+
         """
         warnings.warn("Please use rfc3986.validators.Validator instead. "
                       "This method will be eventually removed.",
@@ -221,28 +292,49 @@
     def normalized_equality(self, other_ref):
         """Compare this URIReference to another URIReference.
 
-        :param URIReference other_ref: (required), The reference with which
+        Parameters
+        ----------
+        URIReference :
+            other_ref: (required), The reference with which
             we're comparing.
-        :returns: ``True`` if the references are equal, ``False`` otherwise.
-        :rtype: bool
+        other_ref :
+            
+
+        Returns
+        -------
+        bool
+            True`` if the references are equal, ``False`` otherwise.
+
         """
         return tuple(self.normalize()) == tuple(other_ref.normalize())
 
     def resolve_with(self, base_uri, strict=False):
         """Use an absolute URI Reference to resolve this relative reference.
-
+        
         Assuming this is a relative reference that you would like to resolve,
         use the provided base URI to resolve it.
-
+        
         See http://tools.ietf.org/html/rfc3986#section-5 for more information.
 
-        :param base_uri: Either a string or URIReference. It must be an
+        Parameters
+        ----------
+        base_uri :
+            Either a string or URIReference. It must be an
             absolute URI or it will raise an exception.
-        :returns: A new URIReference which is the result of resolving this
+        strict :
+             (Default value = False)
+
+        Returns
+        -------
+        class:`URIReference`
+            A new URIReference which is the result of resolving this
             reference using ``base_uri``.
-        :rtype: :class:`URIReference`
-        :raises rfc3986.exceptions.ResolutionError:
+
+        Raises
+        ------
+        rfc3986.exceptions.ResolutionError
             If the ``base_uri`` is not an absolute URI.
+
         """
         if not isinstance(base_uri, URIMixin):
             base_uri = type(self).from_string(base_uri)
@@ -301,8 +393,14 @@
     def unsplit(self):
         """Create a URI string from the components.
 
-        :returns: The URI Reference reconstituted as a string.
-        :rtype: str
+        Parameters
+        ----------
+
+        Returns
+        -------
+        str
+            The URI Reference reconstituted as a string.
+
         """
         # See http://tools.ietf.org/html/rfc3986#section-5.3
         result_list = []
@@ -323,20 +421,39 @@
                   fragment=misc.UseExisting):
         """Create a copy of this reference with the new components.
 
-        :param str scheme:
+        Parameters
+        ----------
+        str :
+            scheme:
             (optional) The scheme to use for the new reference.
-        :param str authority:
+        str :
+            authority:
             (optional) The authority to use for the new reference.
-        :param str path:
+        str :
+            path:
             (optional) The path to use for the new reference.
-        :param str query:
+        str :
+            query:
             (optional) The query to use for the new reference.
-        :param str fragment:
+        str :
+            fragment:
             (optional) The fragment to use for the new reference.
-        :returns:
+        scheme :
+             (Default value = misc.UseExisting)
+        authority :
+             (Default value = misc.UseExisting)
+        path :
+             (Default value = misc.UseExisting)
+        query :
+             (Default value = misc.UseExisting)
+        fragment :
+             (Default value = misc.UseExisting)
+
+        Returns
+        -------
+        URIReference
             New URIReference with provided components.
-        :rtype:
-            URIReference
+
         """
         attributes = {
             'scheme': scheme,
