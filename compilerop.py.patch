# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/core/compilerop.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/core/compilerop.py
@@ -52,9 +52,20 @@
 #-----------------------------------------------------------------------------
 
 def code_name(code, number=0):
-    """ Compute a (probably) unique name for code for caching.
-
+    """Compute a (probably) unique name for code for caching.
+    
     This now expects code to be unicode.
+
+    Parameters
+    ----------
+    code :
+        
+    number :
+         (Default value = 0)
+
+    Returns
+    -------
+
     """
     hash_digest = hashlib.sha1(code.encode("utf-8")).hexdigest()
     # Include the number and 12 characters of the hash in the name.  It's
@@ -67,8 +78,7 @@
 #-----------------------------------------------------------------------------
 
 class CachingCompiler(codeop.Compile):
-    """A compiler that caches code compiled from interactive statements.
-    """
+    """A compiler that caches code compiled from interactive statements."""
 
     def __init__(self):
         codeop.Compile.__init__(self)
@@ -96,8 +106,21 @@
     def ast_parse(self, source, filename='<unknown>', symbol='exec'):
         """Parse code to an AST with the current compiler flags active.
 
-        Arguments are exactly the same as ast.parse (in the standard library),
-        and are passed to the built-in compile function."""
+        Parameters
+        ----------
+        and :
+            are passed to the built
+        source :
+            
+        filename :
+             (Default value = '<unknown>')
+        symbol :
+             (Default value = 'exec')
+
+        Returns
+        -------
+
+        """
         return compile(source, filename, symbol, self.flags | PyCF_ONLY_AST, 1)
     
     def reset_compiler_flags(self):
@@ -108,8 +131,7 @@
 
     @property
     def compiler_flags(self):
-        """Flags currently active in the compilation process.
-        """
+        """Flags currently active in the compilation process."""
         return self.flags
 
     def cache(self, code, number=0):
@@ -118,15 +140,15 @@
         Parameters
         ----------
         code : str
-          The Python source code to cache.
+            The Python source code to cache.
         number : int
-          A number which forms part of the code's name. Used for the execution
-          counter.
+            A number which forms part of the code's name. Used for the execution
+            counter. (Default value = 0)
 
         Returns
         -------
-        The name of the cached code (as a string). Pass this as the filename
-        argument to compilation, so that tracebacks are correctly hooked up.
+
+        
         """
         name = code_name(code, number)
         entry = (len(code), time.time(),
@@ -137,6 +159,17 @@
 
     @contextmanager
     def extra_flags(self, flags):
+        """
+
+        Parameters
+        ----------
+        flags :
+            
+
+        Returns
+        -------
+
+        """
         ## bits that we'll set to 1
         turn_on_bits = ~self.flags & flags
 
@@ -152,6 +185,15 @@
 
 def check_linecache_ipython(*args):
     """Call linecache.checkcache() safely protecting our cached values.
+
+    Parameters
+    ----------
+    *args :
+        
+
+    Returns
+    -------
+
     """
     # First call the original checkcache as intended
     linecache._checkcache_ori(*args)
