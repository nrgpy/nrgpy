# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pygments/lexers/markup.py
+++ b/..//venv/lib/python3.8/site-packages/pygments/lexers/markup.py
@@ -28,10 +28,16 @@
 
 
 class BBCodeLexer(RegexLexer):
-    """
-    A lexer that highlights BBCode(-like) syntax.
-
+    """A lexer that highlights BBCode(-like) syntax.
+    
     .. versionadded:: 0.6
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'BBCode'
@@ -61,10 +67,16 @@
 
 
 class MoinWikiLexer(RegexLexer):
-    """
-    For MoinMoin (and Trac) Wiki markup.
-
+    """For MoinMoin (and Trac) Wiki markup.
+    
     .. versionadded:: 0.7
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'MoinMoin/Trac Wiki markup'
@@ -106,20 +118,26 @@
 
 
 class RstLexer(RegexLexer):
-    """
-    For `reStructuredText <http://docutils.sf.net/rst.html>`_ markup.
-
+    """For `reStructuredText <http://docutils.sf.net/rst.html>`_ markup.
+    
     .. versionadded:: 0.7
-
+    
     Additional options accepted:
-
+    
     `handlecodeblocks`
         Highlight the contents of ``.. sourcecode:: language``,
         ``.. code:: language`` and ``.. code-block:: language``
         directives with a lexer for the given language (default:
         ``True``).
-
+    
         .. versionadded:: 0.8
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'reStructuredText'
     aliases = ['rst', 'rest', 'restructuredtext']
@@ -128,6 +146,17 @@
     flags = re.MULTILINE
 
     def _handle_sourcecode(self, match):
+        """
+
+        Parameters
+        ----------
+        match :
+            
+
+        Returns
+        -------
+
+        """
         from pygments.lexers import get_lexer_by_name
 
         # section header
@@ -261,6 +290,17 @@
         RegexLexer.__init__(self, **options)
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         if text[:2] == '..' and text[2:3] != '.':
             return 0.3
         p1 = text.find("\n")
@@ -273,9 +313,7 @@
 
 
 class TexLexer(RegexLexer):
-    """
-    Lexer for the TeX and LaTeX typesetting languages.
-    """
+    """Lexer for the TeX and LaTeX typesetting languages."""
 
     name = 'TeX'
     aliases = ['tex', 'latex']
@@ -324,6 +362,17 @@
     }
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         for start in ("\\documentclass", "\\input", "\\documentstyle",
                       "\\relax"):
             if text[:len(start)] == start:
@@ -331,11 +380,17 @@
 
 
 class GroffLexer(RegexLexer):
-    """
-    Lexer for the (g)roff typesetting language, supporting groff
+    """Lexer for the (g)roff typesetting language, supporting groff
     extensions. Mainly useful for highlighting manpage sources.
-
+    
     .. versionadded:: 0.6
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     name = 'Groff'
@@ -376,6 +431,17 @@
     }
 
     def analyse_text(text):
+        """
+
+        Parameters
+        ----------
+        text :
+            
+
+        Returns
+        -------
+
+        """
         if text[:1] != '.':
             return False
         if text[:3] == '.\\"':
@@ -387,12 +453,18 @@
 
 
 class MozPreprocHashLexer(RegexLexer):
-    """
-    Lexer for Mozilla Preprocessor files (with '#' as the marker).
-
+    """Lexer for Mozilla Preprocessor files (with '#' as the marker).
+    
     Other data is left untouched.
-
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'mozhashpreproc'
     aliases = [name]
@@ -428,12 +500,18 @@
 
 
 class MozPreprocPercentLexer(MozPreprocHashLexer):
-    """
-    Lexer for Mozilla Preprocessor files (with '%' as the marker).
-
+    """Lexer for Mozilla Preprocessor files (with '%' as the marker).
+    
     Other data is left untouched.
-
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'mozpercentpreproc'
     aliases = [name]
@@ -449,11 +527,17 @@
 
 
 class MozPreprocXulLexer(DelegatingLexer):
-    """
-    Subclass of the `MozPreprocHashLexer` that highlights unlexed data with the
+    """Subclass of the `MozPreprocHashLexer` that highlights unlexed data with the
     `XmlLexer`.
-
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = "XUL+mozpreproc"
     aliases = ['xul+mozpreproc']
@@ -465,11 +549,17 @@
 
 
 class MozPreprocJavascriptLexer(DelegatingLexer):
-    """
-    Subclass of the `MozPreprocHashLexer` that highlights unlexed data with the
+    """Subclass of the `MozPreprocHashLexer` that highlights unlexed data with the
     `JavascriptLexer`.
-
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = "Javascript+mozpreproc"
     aliases = ['javascript+mozpreproc']
@@ -481,11 +571,17 @@
 
 
 class MozPreprocCssLexer(DelegatingLexer):
-    """
-    Subclass of the `MozPreprocHashLexer` that highlights unlexed data with the
+    """Subclass of the `MozPreprocHashLexer` that highlights unlexed data with the
     `CssLexer`.
-
+    
     .. versionadded:: 2.0
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = "CSS+mozpreproc"
     aliases = ['css+mozpreproc']
@@ -497,10 +593,16 @@
 
 
 class MarkdownLexer(RegexLexer):
-    """
-    For `Markdown <https://help.github.com/categories/writing-on-github/>`_ markup.
-
+    """For `Markdown <https://help.github.com/categories/writing-on-github/>`_ markup.
+    
     .. versionadded:: 2.2
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'markdown'
     aliases = ['md']
@@ -509,8 +611,16 @@
     flags = re.MULTILINE
 
     def _handle_codeblock(self, match):
-        """
-        match args: 1:backticks, 2:lang_name, 3:newline, 4:code, 5:backticks
+        """match args: 1:backticks, 2:lang_name, 3:newline, 4:code, 5:backticks
+
+        Parameters
+        ----------
+        match :
+            
+
+        Returns
+        -------
+
         """
         from pygments.lexers import get_lexer_by_name
 
@@ -608,10 +718,16 @@
 
 
 class TiddlyWiki5Lexer(RegexLexer):
-    """
-    For `TiddlyWiki5 <https://tiddlywiki.com/#TiddlerFiles>`_ markup.
-
+    """For `TiddlyWiki5 <https://tiddlywiki.com/#TiddlerFiles>`_ markup.
+    
     .. versionadded:: 2.7
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
     name = 'tiddler'
     aliases = ['tid']
@@ -620,8 +736,16 @@
     flags = re.MULTILINE
 
     def _handle_codeblock(self, match):
-        """
-        match args: 1:backticks, 2:lang_name, 3:newline, 4:code, 5:backticks
+        """match args: 1:backticks, 2:lang_name, 3:newline, 4:code, 5:backticks
+
+        Parameters
+        ----------
+        match :
+            
+
+        Returns
+        -------
+
         """
         from pygments.lexers import get_lexer_by_name
 
@@ -649,8 +773,16 @@
         yield match.start(5), String, match.group(5)
 
     def _handle_cssblock(self, match):
-        """
-        match args: 1:style tag 2:newline, 3:code, 4:closing style tag
+        """match args: 1:style tag 2:newline, 3:code, 4:closing style tag
+
+        Parameters
+        ----------
+        match :
+            
+
+        Returns
+        -------
+
         """
         from pygments.lexers import get_lexer_by_name
 
