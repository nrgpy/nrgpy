# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/tornado/test/concurrent_test.py
+++ b/..//venv/lib/python3.8/site-packages/tornado/test/concurrent_test.py
@@ -32,7 +32,9 @@
 
 
 class MiscFutureTest(AsyncTestCase):
+    """ """
     def test_future_set_result_unless_cancelled(self):
+        """ """
         fut = Future()  # type: Future[int]
         future_set_result_unless_cancelled(fut, 42)
         self.assertEqual(fut.result(), 42)
@@ -52,8 +54,22 @@
 
 
 class CapServer(TCPServer):
+    """ """
     @gen.coroutine
     def handle_stream(self, stream, address):
+        """
+
+        Parameters
+        ----------
+        stream :
+            
+        address :
+            
+
+        Returns
+        -------
+
+        """
         data = yield stream.read_until(b"\n")
         data = to_unicode(data)
         if data == data.upper():
@@ -65,14 +81,27 @@
 
 
 class CapError(Exception):
+    """ """
     pass
 
 
 class BaseCapClient(object):
+    """ """
     def __init__(self, port):
         self.port = port
 
     def process_response(self, data):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+
+        Returns
+        -------
+
+        """
         m = re.match("(.*)\t(.*)\n", to_unicode(data))
         if m is None:
             raise Exception("did not match")
@@ -84,8 +113,20 @@
 
 
 class GeneratorCapClient(BaseCapClient):
+    """ """
     @gen.coroutine
     def capitalize(self, request_data):
+        """
+
+        Parameters
+        ----------
+        request_data :
+            
+
+        Returns
+        -------
+
+        """
         logging.debug("capitalize")
         stream = IOStream(socket.socket())
         logging.debug("connecting")
@@ -99,9 +140,11 @@
 
 
 class ClientTestMixin(object):
+    """ """
     client_class = None  # type: typing.Callable
 
     def setUp(self):
+        """ """
         super().setUp()  # type: ignore
         self.server = CapServer()
         sock, port = bind_unused_port()
@@ -109,32 +152,79 @@
         self.client = self.client_class(port=port)
 
     def tearDown(self):
+        """ """
         self.server.stop()
         super().tearDown()  # type: ignore
 
     def test_future(self: typing.Any):
+        """
+
+        Parameters
+        ----------
+        self: typing.Any :
+            
+
+        Returns
+        -------
+
+        """
         future = self.client.capitalize("hello")
         self.io_loop.add_future(future, self.stop)
         self.wait()
         self.assertEqual(future.result(), "HELLO")
 
     def test_future_error(self: typing.Any):
+        """
+
+        Parameters
+        ----------
+        self: typing.Any :
+            
+
+        Returns
+        -------
+
+        """
         future = self.client.capitalize("HELLO")
         self.io_loop.add_future(future, self.stop)
         self.wait()
         self.assertRaisesRegexp(CapError, "already capitalized", future.result)  # type: ignore
 
     def test_generator(self: typing.Any):
+        """
+
+        Parameters
+        ----------
+        self: typing.Any :
+            
+
+        Returns
+        -------
+
+        """
         @gen.coroutine
         def f():
+            """ """
             result = yield self.client.capitalize("hello")
             self.assertEqual(result, "HELLO")
 
         self.io_loop.run_sync(f)
 
     def test_generator_error(self: typing.Any):
+        """
+
+        Parameters
+        ----------
+        self: typing.Any :
+            
+
+        Returns
+        -------
+
+        """
         @gen.coroutine
         def f():
+            """ """
             with self.assertRaisesRegexp(CapError, "already capitalized"):
                 yield self.client.capitalize("HELLO")
 
@@ -142,18 +232,23 @@
 
 
 class GeneratorClientTest(ClientTestMixin, AsyncTestCase):
+    """ """
     client_class = GeneratorCapClient
 
 
 class RunOnExecutorTest(AsyncTestCase):
+    """ """
     @gen_test
     def test_no_calling(self):
+        """ """
         class Object(object):
+            """ """
             def __init__(self):
                 self.executor = futures.thread.ThreadPoolExecutor(1)
 
             @run_on_executor
             def f(self):
+                """ """
                 return 42
 
         o = Object()
@@ -162,12 +257,15 @@
 
     @gen_test
     def test_call_with_no_args(self):
+        """ """
         class Object(object):
+            """ """
             def __init__(self):
                 self.executor = futures.thread.ThreadPoolExecutor(1)
 
             @run_on_executor()
             def f(self):
+                """ """
                 return 42
 
         o = Object()
@@ -176,12 +274,15 @@
 
     @gen_test
     def test_call_with_executor(self):
+        """ """
         class Object(object):
+            """ """
             def __init__(self):
                 self.__executor = futures.thread.ThreadPoolExecutor(1)
 
             @run_on_executor(executor="_Object__executor")
             def f(self):
+                """ """
                 return 42
 
         o = Object()
@@ -190,12 +291,15 @@
 
     @gen_test
     def test_async_await(self):
+        """ """
         class Object(object):
+            """ """
             def __init__(self):
                 self.executor = futures.thread.ThreadPoolExecutor(1)
 
             @run_on_executor()
             def f(self):
+                """ """
                 return 42
 
         o = Object()
