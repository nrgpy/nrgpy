# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pexpect/replwrap.py
+++ b/..//venv/lib/python3.8/site-packages/pexpect/replwrap.py
@@ -17,18 +17,29 @@
 class REPLWrapper(object):
     """Wrapper for a REPL.
 
-    :param cmd_or_spawn: This can either be an instance of :class:`pexpect.spawn`
-      in which a REPL has already been started, or a str command to start a new
-      REPL process.
-    :param str orig_prompt: The prompt to expect at first.
-    :param str prompt_change: A command to change the prompt to something more
-      unique. If this is ``None``, the prompt will not be changed. This will
-      be formatted with the new and continuation prompts as positional
-      parameters, so you can use ``{}`` style formatting to insert them into
-      the command.
-    :param str new_prompt: The more unique prompt to expect after the change.
-    :param str extra_init_cmd: Commands to do extra initialisation, such as
-      disabling pagers.
+    Parameters
+    ----------
+    cmd_or_spawn :
+        This can either be an instance of :class:`pexpect.spawn`
+        in which a REPL has already been started, or a str command to start a new
+        REPL process.
+    str :
+        orig_prompt: The prompt to expect at first.
+    str :
+        prompt_change: A command to change the prompt to something more
+        unique. If this is ``None``, the prompt will not be changed. This will
+        be formatted with the new and continuation prompts as positional
+        parameters, so you can use ``{}`` style formatting to insert them into
+        the command.
+    str :
+        new_prompt: The more unique prompt to expect after the change.
+    str :
+        extra_init_cmd: Commands to do extra initialisation, such as
+        disabling pagers.
+
+    Returns
+    -------
+
     """
     def __init__(self, cmd_or_spawn, orig_prompt, prompt_change,
                  new_prompt=PEXPECT_PROMPT,
@@ -58,27 +69,68 @@
             self.run_command(extra_init_cmd)
 
     def set_prompt(self, orig_prompt, prompt_change):
+        """
+
+        Parameters
+        ----------
+        orig_prompt :
+            
+        prompt_change :
+            
+
+        Returns
+        -------
+
+        """
         self.child.expect(orig_prompt)
         self.child.sendline(prompt_change)
 
     def _expect_prompt(self, timeout=-1, async_=False):
+        """
+
+        Parameters
+        ----------
+        timeout :
+             (Default value = -1)
+        async_ :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         return self.child.expect_exact([self.prompt, self.continuation_prompt],
                                        timeout=timeout, async_=async_)
 
     def run_command(self, command, timeout=-1, async_=False):
         """Send a command to the REPL, wait for and return output.
 
-        :param str command: The command to send. Trailing newlines are not needed.
-          This should be a complete block of input that will trigger execution;
-          if a continuation prompt is found after sending input, :exc:`ValueError`
-          will be raised.
-        :param int timeout: How long to wait for the next prompt. -1 means the
-          default from the :class:`pexpect.spawn` object (default 30 seconds).
-          None means to wait indefinitely.
-        :param bool async_: On Python 3.4, or Python 3.3 with asyncio
-          installed, passing ``async_=True`` will make this return an
-          :mod:`asyncio` Future, which you can yield from to get the same
-          result that this method would normally give directly.
+        Parameters
+        ----------
+        str :
+            command: The command to send. Trailing newlines are not needed.
+            This should be a complete block of input that will trigger execution;
+            if a continuation prompt is found after sending input, :exc:`ValueError`
+            will be raised.
+        int :
+            timeout: How long to wait for the next prompt. -1 means the
+            default from the :class:`pexpect.spawn` object (default 30 seconds).
+            None means to wait indefinitely.
+        bool :
+            async_: On Python 3.4, or Python 3.3 with asyncio
+            installed, passing ``async_=True`` will make this return an
+            :mod:`asyncio` Future, which you can yield from to get the same
+            result that this method would normally give directly.
+        command :
+            
+        timeout :
+             (Default value = -1)
+        async_ :
+             (Default value = False)
+
+        Returns
+        -------
+
         """
         # Split up multiline commands and feed them in bit-by-bit
         cmdlines = command.splitlines()
@@ -109,11 +161,31 @@
         return u''.join(res + [self.child.before])
 
 def python(command="python"):
-    """Start a Python shell and return a :class:`REPLWrapper` object."""
+    """Start a Python shell and return a :class:`REPLWrapper` object.
+
+    Parameters
+    ----------
+    command :
+         (Default value = "python")
+
+    Returns
+    -------
+
+    """
     return REPLWrapper(command, u">>> ", u"import sys; sys.ps1={0!r}; sys.ps2={1!r}")
 
 def bash(command="bash"):
-    """Start a bash shell and return a :class:`REPLWrapper` object."""
+    """Start a bash shell and return a :class:`REPLWrapper` object.
+
+    Parameters
+    ----------
+    command :
+         (Default value = "bash")
+
+    Returns
+    -------
+
+    """
     bashrc = os.path.join(os.path.dirname(__file__), 'bashrc.sh')
     child = pexpect.spawn(command, ['--rcfile', bashrc], echo=False,
                           encoding='utf-8')
