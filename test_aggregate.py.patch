# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/groupby/aggregate/test_aggregate.py
@@ -19,11 +19,23 @@
 
 
 def test_groupby_agg_no_extra_calls():
+    """ """
     # GH#31760
     df = pd.DataFrame({"key": ["a", "b", "c", "c"], "value": [1, 2, 3, 4]})
     gb = df.groupby("key")["value"]
 
     def dummy_func(x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         assert len(x) != 0
         return x.sum()
 
@@ -31,6 +43,17 @@
 
 
 def test_agg_regression1(tsframe):
+    """
+
+    Parameters
+    ----------
+    tsframe :
+        
+
+    Returns
+    -------
+
+    """
     grouped = tsframe.groupby([lambda x: x.year, lambda x: x.month])
     result = grouped.agg(np.mean)
     expected = grouped.mean()
@@ -38,6 +61,17 @@
 
 
 def test_agg_must_agg(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
     grouped = df.groupby("A")["C"]
 
     msg = "Must produce aggregated value"
@@ -48,6 +82,17 @@
 
 
 def test_agg_ser_multi_key(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
     # TODO(wesm): unused
     ser = df.C  # noqa
 
@@ -58,6 +103,7 @@
 
 
 def test_groupby_aggregation_mixed_dtype():
+    """ """
 
     # GH 6212
     expected = DataFrame(
@@ -108,6 +154,7 @@
 
 
 def test_groupby_aggregation_multi_level_column():
+    """ """
     # GH 29772
     lst = [
         [True, True, True, False],
@@ -127,6 +174,19 @@
 
 
 def test_agg_apply_corner(ts, tsframe):
+    """
+
+    Parameters
+    ----------
+    ts :
+        
+    tsframe :
+        
+
+    Returns
+    -------
+
+    """
     # nothing to group, all NA
     grouped = ts.groupby(ts * np.nan)
     assert ts.dtype == np.float64
@@ -148,6 +208,17 @@
 
 
 def test_agg_grouping_is_list_tuple(ts):
+    """
+
+    Parameters
+    ----------
+    ts :
+        
+
+    Returns
+    -------
+
+    """
     df = tm.makeTimeDataFrame()
 
     grouped = df.groupby(lambda x: x.year)
@@ -166,6 +237,17 @@
 
 
 def test_agg_python_multiindex(mframe):
+    """
+
+    Parameters
+    ----------
+    mframe :
+        
+
+    Returns
+    -------
+
+    """
     grouped = mframe.groupby(["A", "B"])
 
     result = grouped.agg(np.mean)
@@ -177,6 +259,19 @@
     "groupbyfunc", [lambda x: x.weekday(), [lambda x: x.month, lambda x: x.weekday()]]
 )
 def test_aggregate_str_func(tsframe, groupbyfunc):
+    """
+
+    Parameters
+    ----------
+    tsframe :
+        
+    groupbyfunc :
+        
+
+    Returns
+    -------
+
+    """
     grouped = tsframe.groupby(groupbyfunc)
 
     # single series
@@ -203,6 +298,17 @@
 
 
 def test_aggregate_item_by_item(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
     grouped = df.groupby("A")
 
     aggfun = lambda ser: ser.size
@@ -224,6 +330,17 @@
     tm.assert_almost_equal(result.xs("bar"), exp)
 
     def aggfun(ser):
+        """
+
+        Parameters
+        ----------
+        ser :
+            
+
+        Returns
+        -------
+
+        """
         return ser.size
 
     result = DataFrame().groupby(df.A).agg(aggfun)
@@ -232,9 +349,31 @@
 
 
 def test_wrap_agg_out(three_group):
+    """
+
+    Parameters
+    ----------
+    three_group :
+        
+
+    Returns
+    -------
+
+    """
     grouped = three_group.groupby(["A", "B"])
 
     def func(ser):
+        """
+
+        Parameters
+        ----------
+        ser :
+            
+
+        Returns
+        -------
+
+        """
         if ser.dtype == object:
             raise TypeError
         else:
@@ -247,6 +386,17 @@
 
 
 def test_agg_multiple_functions_maintain_order(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
     # GH #610
     funcs = [("mean", np.mean), ("max", np.max), ("min", np.min)]
     result = df.groupby("A")["C"].agg(funcs)
@@ -256,6 +406,7 @@
 
 
 def test_agg_multiple_functions_same_name():
+    """ """
     # GH 30880
     df = pd.DataFrame(
         np.random.randn(1000, 3),
@@ -277,6 +428,7 @@
 
 
 def test_agg_multiple_functions_same_name_with_ohlc_present():
+    """ """
     # GH 30880
     # ohlc expands dimensions, so different test to the above is required.
     df = pd.DataFrame(
@@ -311,6 +463,17 @@
 
 
 def test_multiple_functions_tuples_and_non_tuples(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
     # #1359
     funcs = [("foo", "mean"), "std"]
     ex_funcs = [("foo", "mean"), ("std", "std")]
@@ -325,6 +488,17 @@
 
 
 def test_more_flexible_frame_multi_function(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
     grouped = df.groupby("A")
 
     exmean = grouped.agg({"C": np.mean, "D": np.mean})
@@ -344,9 +518,31 @@
     tm.assert_frame_equal(result, expected)
 
     def foo(x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         return np.mean(x)
 
     def bar(x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         return np.std(x, ddof=1)
 
     # this uses column selection & renaming
@@ -361,6 +557,17 @@
 
 
 def test_multi_function_flexible_mix(df):
+    """
+
+    Parameters
+    ----------
+    df :
+        
+
+    Returns
+    -------
+
+    """
     # GH #1268
     grouped = df.groupby("A")
 
@@ -385,6 +592,7 @@
 
 
 def test_groupby_agg_coercing_bools():
+    """ """
     # issue 14873
     dat = pd.DataFrame({"a": [1, 1, 2, 2], "b": [0, 1, 2, 3], "c": [None, None, 1, 1]})
     gp = dat.groupby("a")
@@ -412,6 +620,17 @@
     ],
 )
 def test_bool_agg_dtype(op):
+    """
+
+    Parameters
+    ----------
+    op :
+        
+
+    Returns
+    -------
+
+    """
     # GH 7001
     # Bool sum aggregations result in int
     df = pd.DataFrame({"a": [1, 1], "b": [False, True]})
@@ -425,6 +644,7 @@
 
 
 def test_order_aggregate_multiple_funcs():
+    """ """
     # GH 25692
     df = pd.DataFrame({"A": [1, 1, 2, 2], "B": [1, 2, 3, 4]})
 
@@ -439,6 +659,19 @@
 @pytest.mark.parametrize("dtype", [np.int64, np.uint64])
 @pytest.mark.parametrize("how", ["first", "last", "min", "max", "mean", "median"])
 def test_uint64_type_handling(dtype, how):
+    """
+
+    Parameters
+    ----------
+    dtype :
+        
+    how :
+        
+
+    Returns
+    -------
+
+    """
     # GH 26310
     df = pd.DataFrame({"x": 6903052872240755750, "y": [1, 2]})
     expected = df.groupby("y").agg({"x": how})
@@ -449,6 +682,7 @@
 
 
 def test_func_duplicates_raises():
+    """ """
     # GH28426
     msg = "Function names"
     df = pd.DataFrame({"A": [0, 0, 1, 1], "B": [1, 2, 3, 4]})
@@ -466,6 +700,17 @@
     ],
 )
 def test_agg_index_has_complex_internals(index):
+    """
+
+    Parameters
+    ----------
+    index :
+        
+
+    Returns
+    -------
+
+    """
     # GH 31223
     df = DataFrame({"group": [1, 1, 2], "value": [0, 1, 0]}, index=index)
     result = df.groupby("group").agg({"value": Series.nunique})
@@ -474,6 +719,7 @@
 
 
 def test_agg_split_block():
+    """ """
     # https://github.com/pandas-dev/pandas/issues/31522
     df = pd.DataFrame(
         {
@@ -491,6 +737,7 @@
 
 
 def test_agg_split_object_part_datetime():
+    """ """
     # https://github.com/pandas-dev/pandas/pull/31616
     df = pd.DataFrame(
         {
@@ -517,7 +764,9 @@
 
 
 class TestNamedAggregationSeries:
+    """ """
     def test_series_named_agg(self):
+        """ """
         df = pd.Series([1, 2, 3, 4])
         gr = df.groupby([0, 0, 1, 1])
         result = gr.agg(a="sum", b="min")
@@ -531,6 +780,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_no_args_raises(self):
+        """ """
         gr = pd.Series([1, 2]).groupby([0, 1])
         with pytest.raises(TypeError, match="Must provide"):
             gr.agg()
@@ -541,6 +791,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_series_named_agg_duplicates_no_raises(self):
+        """ """
         # GH28426
         gr = pd.Series([1, 2, 3]).groupby([0, 0, 1])
         grouped = gr.agg(a="sum", b="sum")
@@ -548,6 +799,7 @@
         tm.assert_frame_equal(expected, grouped)
 
     def test_mangled(self):
+        """ """
         gr = pd.Series([1, 2, 3]).groupby([0, 0, 1])
         result = gr.agg(a=lambda x: 0, b=lambda x: 1)
         expected = pd.DataFrame({"a": [0, 0], "b": [1, 1]})
@@ -562,6 +814,17 @@
         ],
     )
     def test_named_agg_nametuple(self, inp):
+        """
+
+        Parameters
+        ----------
+        inp :
+            
+
+        Returns
+        -------
+
+        """
         # GH34422
         s = pd.Series([1, 1, 2, 2, 3, 3, 4, 5])
         msg = f"func is expected but recieved {type(inp).__name__}"
@@ -570,7 +833,9 @@
 
 
 class TestNamedAggregationDataFrame:
+    """ """
     def test_agg_relabel(self):
+        """ """
         df = pd.DataFrame(
             {"group": ["a", "a", "b", "b"], "A": [0, 1, 2, 3], "B": [5, 6, 7, 8]}
         )
@@ -607,6 +872,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_agg_relabel_non_identifier(self):
+        """ """
         df = pd.DataFrame(
             {"group": ["a", "a", "b", "b"], "A": [0, 1, 2, 3], "B": [5, 6, 7, 8]}
         )
@@ -618,6 +884,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_duplicate_no_raises(self):
+        """ """
         # GH 28426, if use same input function on same column,
         # no error should raise
         df = pd.DataFrame({"A": [0, 0, 1, 1], "B": [1, 2, 3, 4]})
@@ -647,6 +914,7 @@
         tm.assert_frame_equal(grouped, expected)
 
     def test_agg_relabel_with_level(self):
+        """ """
         df = pd.DataFrame(
             {"A": [0, 0, 1, 1], "B": [1, 2, 3, 4]},
             index=pd.MultiIndex.from_product([["A", "B"], ["a", "b"]]),
@@ -660,6 +928,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_agg_relabel_other_raises(self):
+        """ """
         df = pd.DataFrame({"A": [0, 0, 1], "B": [1, 2, 3]})
         grouped = df.groupby("A")
         match = "Must provide"
@@ -673,11 +942,13 @@
             grouped.agg(a=("B", "max"), b=(1, 2, 3))
 
     def test_missing_raises(self):
+        """ """
         df = pd.DataFrame({"A": [0, 1], "B": [1, 2]})
         with pytest.raises(KeyError, match="Column 'C' does not exist"):
             df.groupby("A").agg(c=("C", "sum"))
 
     def test_agg_namedtuple(self):
+        """ """
         df = pd.DataFrame({"A": [0, 1], "B": [1, 2]})
         result = df.groupby("A").agg(
             b=pd.NamedAgg("B", "sum"), c=pd.NamedAgg(column="B", aggfunc="count")
@@ -686,6 +957,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_mangled(self):
+        """ """
         df = pd.DataFrame({"A": [0, 1], "B": [1, 2], "C": [3, 4]})
         result = df.groupby("A").agg(b=("B", lambda x: 0), c=("C", lambda x: 1))
         expected = pd.DataFrame(
@@ -726,6 +998,27 @@
 def test_agg_relabel_multiindex_column(
     agg_col1, agg_col2, agg_col3, agg_result1, agg_result2, agg_result3
 ):
+    """
+
+    Parameters
+    ----------
+    agg_col1 :
+        
+    agg_col2 :
+        
+    agg_col3 :
+        
+    agg_result1 :
+        
+    agg_result2 :
+        
+    agg_result3 :
+        
+
+    Returns
+    -------
+
+    """
     # GH 29422, add tests for multiindex column cases
     df = DataFrame(
         {"group": ["a", "a", "b", "b"], "A": [0, 1, 2, 3], "B": [5, 6, 7, 8]}
@@ -747,6 +1040,7 @@
 
 
 def test_agg_relabel_multiindex_raises_not_exist():
+    """ """
     # GH 29422, add test for raises senario when aggregate column does not exist
     df = DataFrame(
         {"group": ["a", "a", "b", "b"], "A": [0, 1, 2, 3], "B": [5, 6, 7, 8]}
@@ -758,6 +1052,7 @@
 
 
 def test_agg_relabel_multiindex_duplicates():
+    """ """
     # GH29422, add test for raises senario when getting duplicates
     # GH28426, after this change, duplicates should also work if the relabelling is
     # different
@@ -776,6 +1071,17 @@
 
 @pytest.mark.parametrize("kwargs", [{"c": ["min"]}, {"b": [], "c": ["min"]}])
 def test_groupby_aggregate_empty_key(kwargs):
+    """
+
+    Parameters
+    ----------
+    kwargs :
+        
+
+    Returns
+    -------
+
+    """
     # GH: 32580
     df = pd.DataFrame({"a": [1, 1, 2], "b": [1, 2, 3], "c": [1, 2, 4]})
     result = df.groupby("a").agg(kwargs)
@@ -788,6 +1094,7 @@
 
 
 def test_groupby_aggregate_empty_key_empty_return():
+    """ """
     # GH: 32580 Check if everything works, when return is empty
     df = pd.DataFrame({"a": [1, 1, 2], "b": [1, 2, 3], "c": [1, 2, 4]})
     result = df.groupby("a").agg({"b": []})
@@ -796,6 +1103,7 @@
 
 
 def test_grouby_agg_loses_results_with_as_index_false_relabel():
+    """ """
     # GH 32240: When the aggregate function relabels column names and
     # as_index=False is specified, the results are dropped.
 
@@ -810,6 +1118,7 @@
 
 
 def test_grouby_agg_loses_results_with_as_index_false_relabel_multiindex():
+    """ """
     # GH 32240: When the aggregate function relabels column names and
     # as_index=False is specified, the results are dropped. Check if
     # multiindex is returned in the right order
@@ -834,6 +1143,17 @@
     "func", [lambda s: s.mean(), lambda s: np.mean(s), lambda s: np.nanmean(s)]
 )
 def test_multiindex_custom_func(func):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
+    """
     # GH 31777
     data = [[1, 4, 2], [5, 7, 1]]
     df = pd.DataFrame(data, columns=pd.MultiIndex.from_arrays([[1, 1, 2], [3, 4, 3]]))
@@ -844,11 +1164,33 @@
 
 
 def myfunc(s):
+    """
+
+    Parameters
+    ----------
+    s :
+        
+
+    Returns
+    -------
+
+    """
     return np.percentile(s, q=0.90)
 
 
 @pytest.mark.parametrize("func", [lambda s: np.percentile(s, q=0.90), myfunc])
 def test_lambda_named_agg(func):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-28467
     animals = DataFrame(
         {
@@ -871,6 +1213,7 @@
 
 
 def test_aggregate_mixed_types():
+    """ """
     # GH 16916
     df = pd.DataFrame(
         data=np.array([0] * 9).reshape(3, 3), columns=list("XYZ"), index=list("abc")
@@ -888,6 +1231,7 @@
 
 @pytest.mark.xfail(reason="Not implemented;see GH 31256")
 def test_aggregate_udf_na_extension_type():
+    """ """
     # https://github.com/pandas-dev/pandas/pull/31359
     # This is currently failing to cast back to Int64Dtype.
     # The presence of the NA causes two problems
@@ -896,6 +1240,17 @@
     #    a Python int rather than a NumPy int64. Python ints aren't
     #    instances of numpy.int64.
     def aggfunc(x):
+        """
+
+        Parameters
+        ----------
+        x :
+            
+
+        Returns
+        -------
+
+        """
         if all(x > 2):
             return 1
         else:
@@ -909,6 +1264,17 @@
 
 @pytest.mark.parametrize("func", ["min", "max"])
 def test_groupby_aggregate_period_column(func):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
+    """
     # GH 31471
     groups = [1, 2]
     periods = pd.period_range("2020", periods=2, freq="Y")
@@ -923,6 +1289,17 @@
 
 @pytest.mark.parametrize("func", ["min", "max"])
 def test_groupby_aggregate_period_frame(func):
+    """
+
+    Parameters
+    ----------
+    func :
+        
+
+    Returns
+    -------
+
+    """
     # GH 31471
     groups = [1, 2]
     periods = pd.period_range("2020", periods=2, freq="Y")
@@ -936,7 +1313,9 @@
 
 
 class TestLambdaMangling:
+    """ """
     def test_basic(self):
+        """ """
         df = pd.DataFrame({"A": [0, 0, 1, 1], "B": [1, 2, 3, 4]})
         result = df.groupby("A").agg({"B": [lambda x: 0, lambda x: 1]})
 
@@ -947,6 +1326,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_mangle_series_groupby(self):
+        """ """
         gr = pd.Series([1, 2, 3, 4]).groupby([0, 0, 1, 1])
         result = gr.agg([lambda x: 0, lambda x: 1])
         expected = pd.DataFrame({"<lambda_0>": [0, 0], "<lambda_1>": [1, 1]})
@@ -954,6 +1334,7 @@
 
     @pytest.mark.xfail(reason="GH-26611. kwargs for multi-agg.")
     def test_with_kwargs(self):
+        """ """
         f1 = lambda x, y, b=1: x.sum() + y + b
         f2 = lambda x, y, b=2: x.sum() + y * b
         result = pd.Series([1, 2]).groupby([0, 0]).agg([f1, f2], 0)
@@ -965,6 +1346,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_agg_with_one_lambda(self):
+        """ """
         # GH 25719, write tests for DataFrameGroupby.agg with only one lambda
         df = pd.DataFrame(
             {
@@ -1004,6 +1386,7 @@
         tm.assert_frame_equal(result2, expected)
 
     def test_agg_multiple_lambda(self):
+        """ """
         # GH25719, test for DataFrameGroupby.agg with multiple lambdas
         # with mixed aggfunc
         df = pd.DataFrame(
@@ -1056,6 +1439,7 @@
 
 
 def test_groupby_get_by_index():
+    """ """
     # GH 33439
     df = pd.DataFrame({"A": ["S", "W", "W"], "B": [1.0, 1.0, 2.0]})
     res = df.groupby("A").agg({"B": lambda x: x.get(x.index[-1])})
@@ -1064,6 +1448,7 @@
 
 
 def test_nonagg_agg():
+    """ """
     # GH 35490 - Single/Multiple agg of non-agg function give same results
     # TODO: agg should raise for functions that don't aggregate
     df = pd.DataFrame({"a": [1, 1, 2, 2], "b": [1, 2, 2, 1]})
@@ -1077,6 +1462,7 @@
 
 
 def test_agg_no_suffix_index():
+    """ """
     # GH36189
     df = pd.DataFrame([[4, 9]] * 3, columns=["A", "B"])
     result = df.agg(["sum", lambda x: x.sum(), lambda x: x.sum()])
