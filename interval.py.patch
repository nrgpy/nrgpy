# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/indexes/interval.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/indexes/interval.py
@@ -75,6 +75,17 @@
 
 
 def _get_next_label(label):
+    """
+
+    Parameters
+    ----------
+    label :
+        
+
+    Returns
+    -------
+
+    """
     dtype = getattr(label, "dtype", type(label))
     if isinstance(label, (Timestamp, Timedelta)):
         dtype = "datetime64"
@@ -89,6 +100,17 @@
 
 
 def _get_prev_label(label):
+    """
+
+    Parameters
+    ----------
+    label :
+        
+
+    Returns
+    -------
+
+    """
     dtype = getattr(label, "dtype", type(label))
     if isinstance(label, (Timestamp, Timedelta)):
         dtype = "datetime64"
@@ -103,17 +125,30 @@
 
 
 def _new_IntervalIndex(cls, d):
-    """
-    This is called upon unpickling, rather than the default which doesn't have
-    arguments and breaks __new__.
+    """This is called upon unpickling, rather than the default which doesn't have
+
+    Parameters
+    ----------
+    d :
+        
+
+    Returns
+    -------
+
     """
     return cls.from_arrays(**d)
 
 
 class SetopCheck:
-    """
-    This is called to decorate the set operations of IntervalIndex
+    """This is called to decorate the set operations of IntervalIndex
     to perform the type check in advance.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, op_name):
@@ -121,6 +156,21 @@
 
     def __call__(self, setop):
         def func(intvidx_self, other, sort=False):
+            """
+
+            Parameters
+            ----------
+            intvidx_self :
+                
+            other :
+                
+            sort :
+                 (Default value = False)
+
+            Returns
+            -------
+
+            """
             intvidx_self._assert_can_do_setop(other)
             other = ensure_index(other)
 
@@ -188,6 +238,7 @@
     ["is_non_overlapping_monotonic", "mid", "closed"], IntervalArray, cache=True,
 )
 class IntervalIndex(IntervalMixin, ExtensionIndex):
+    """ """
     _typ = "intervalindex"
     _comparables = ["name"]
     _attributes = ["name", "closed"]
@@ -227,14 +278,19 @@
 
     @classmethod
     def _simple_new(cls, array: IntervalArray, name: Label = None):
-        """
-        Construct from an IntervalArray
-
-        Parameters
-        ----------
-        array : IntervalArray
-        name : Label, default None
-            Attached as result.name
+        """Construct from an IntervalArray
+
+        Parameters
+        ----------
+        array: IntervalArray :
+            
+        name: Label :
+             (Default value = None)
+
+        Returns
+        -------
+
+        
         """
         assert isinstance(array, IntervalArray), type(array)
 
@@ -266,6 +322,25 @@
     def from_breaks(
         cls, breaks, closed: str = "right", name=None, copy: bool = False, dtype=None
     ):
+        """
+
+        Parameters
+        ----------
+        breaks :
+            
+        closed: str :
+             (Default value = "right")
+        name :
+             (Default value = None)
+        copy: bool :
+             (Default value = False)
+        dtype :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         with rewrite_exception("IntervalArray", cls.__name__):
             array = IntervalArray.from_breaks(
                 breaks, closed=closed, copy=copy, dtype=dtype
@@ -298,6 +373,27 @@
         copy: bool = False,
         dtype=None,
     ):
+        """
+
+        Parameters
+        ----------
+        left :
+            
+        right :
+            
+        closed: str :
+             (Default value = "right")
+        name :
+             (Default value = None)
+        copy: bool :
+             (Default value = False)
+        dtype :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         with rewrite_exception("IntervalArray", cls.__name__):
             array = IntervalArray.from_arrays(
                 left, right, closed, copy=copy, dtype=dtype
@@ -324,6 +420,25 @@
     def from_tuples(
         cls, data, closed: str = "right", name=None, copy: bool = False, dtype=None
     ):
+        """
+
+        Parameters
+        ----------
+        data :
+            
+        closed: str :
+             (Default value = "right")
+        name :
+             (Default value = None)
+        copy: bool :
+             (Default value = False)
+        dtype :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         with rewrite_exception("IntervalArray", cls.__name__):
             arr = IntervalArray.from_tuples(data, closed=closed, copy=copy, dtype=dtype)
         return cls._simple_new(arr, name=name)
@@ -332,6 +447,19 @@
 
     @Appender(Index._shallow_copy.__doc__)
     def _shallow_copy(self, values=None, name: Label = lib.no_default):
+        """
+
+        Parameters
+        ----------
+        values :
+             (Default value = None)
+        name: Label :
+             (Default value = lib.no_default)
+
+        Returns
+        -------
+
+        """
         name = self.name if name is lib.no_default else name
         cache = self._cache.copy() if values is None else {}
         if values is None:
@@ -343,15 +471,14 @@
 
     @cache_readonly
     def _isnan(self):
-        """
-        Return a mask indicating if each value is NA.
-        """
+        """ """
         if self._mask is None:
             self._mask = isna(self.left)
         return self._mask
 
     @cache_readonly
     def _engine(self):
+        """ """
         left = self._maybe_convert_i8(self.left)
         right = self._maybe_convert_i8(self.right)
         return IntervalTree(left, right, closed=self.closed)
@@ -381,17 +508,17 @@
 
     @cache_readonly
     def _multiindex(self) -> MultiIndex:
+        """ """
         return MultiIndex.from_arrays([self.left, self.right], names=["left", "right"])
 
     @cache_readonly
     def values(self) -> IntervalArray:
-        """
-        Return the IntervalIndex's data as an IntervalArray.
-        """
+        """ """
         return self._data
 
     @property
     def _has_complex_internals(self) -> bool:
+        """ """
         # used to avoid libreduction code paths, which raise or require conversion
         return True
 
@@ -406,6 +533,19 @@
 
     @Appender(Index.astype.__doc__)
     def astype(self, dtype, copy=True):
+        """
+
+        Parameters
+        ----------
+        dtype :
+            
+        copy :
+             (Default value = True)
+
+        Returns
+        -------
+
+        """
         with rewrite_exception("IntervalArray", type(self).__name__):
             new_values = self._values.astype(dtype, copy=copy)
         if is_interval_dtype(new_values.dtype):
@@ -414,11 +554,22 @@
 
     @property
     def inferred_type(self) -> str:
-        """Return a string of the type inferred from the values"""
+        """ """
         return "interval"
 
     @Appender(Index.memory_usage.__doc__)
     def memory_usage(self, deep: bool = False) -> int:
+        """
+
+        Parameters
+        ----------
+        deep: bool :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         # we don't use an explicit engine
         # so return the bytes here
         return self.left.memory_usage(deep=deep) + self.right.memory_usage(deep=deep)
@@ -428,16 +579,21 @@
     @cache_readonly
     def is_monotonic_decreasing(self) -> bool:
         """
-        Return True if the IntervalIndex is monotonic decreasing (only equal or
-        decreasing values), else False
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+        type
+            decreasing values), else False
+
         """
         return self[::-1].is_monotonic_increasing
 
     @cache_readonly
     def is_unique(self):
-        """
-        Return True if the IntervalIndex contains unique elements, else False.
-        """
+        """ """
         left = self.left
         right = self.right
 
@@ -459,14 +615,16 @@
 
     @property
     def is_overlapping(self) -> bool:
-        """
-        Return True if the IntervalIndex has overlapping intervals, else False.
-
+        """Return True if the IntervalIndex has overlapping intervals, else False.
+        
         Two intervals overlap if they share a common point, including closed
         endpoints. Intervals that only have an open endpoint in common do not
         overlap.
-
+        
         .. versionadded:: 0.24.0
+
+        Parameters
+        ----------
 
         Returns
         -------
@@ -478,9 +636,13 @@
         Interval.overlaps : Check whether two Interval objects overlap.
         IntervalIndex.overlaps : Check an IntervalIndex elementwise for
             overlaps.
-
         Examples
         --------
+        
+        Intervals that share closed endpoints overlap:
+        
+        
+        Intervals that only have an open endpoint in common do not overlap:
         >>> index = pd.IntervalIndex.from_tuples([(0, 2), (1, 3), (4, 5)])
         >>> index
         IntervalIndex([(0, 2], (1, 3], (4, 5]],
@@ -488,9 +650,7 @@
               dtype='interval[int64]')
         >>> index.is_overlapping
         True
-
-        Intervals that share closed endpoints overlap:
-
+        
         >>> index = pd.interval_range(0, 3, closed='both')
         >>> index
         IntervalIndex([[0, 1], [1, 2], [2, 3]],
@@ -498,9 +658,7 @@
               dtype='interval[int64]')
         >>> index.is_overlapping
         True
-
-        Intervals that only have an open endpoint in common do not overlap:
-
+        
         >>> index = pd.interval_range(0, 3, closed='left')
         >>> index
         IntervalIndex([[0, 1), [1, 2), [2, 3)],
@@ -513,18 +671,42 @@
         return self._engine.is_overlapping
 
     def _should_fallback_to_positional(self) -> bool:
+        """ """
         # integer lookups in Series.__getitem__ are unambiguously
         #  positional in this case
         return self.dtype.subtype.kind in ["m", "M"]
 
     def _maybe_cast_slice_bound(self, label, side, kind):
+        """
+
+        Parameters
+        ----------
+        label :
+            
+        side :
+            
+        kind :
+            
+
+        Returns
+        -------
+
+        """
         return getattr(self, side)._maybe_cast_slice_bound(label, side, kind)
 
     @Appender(Index._convert_list_indexer.__doc__)
     def _convert_list_indexer(self, keyarr):
-        """
-        we are passed a list-like indexer. Return the
+        """we are passed a list-like indexer. Return the
         indexer for matching intervals.
+
+        Parameters
+        ----------
+        keyarr :
+            
+
+        Returns
+        -------
+
         """
         locs = self.get_indexer_for(keyarr)
 
@@ -535,28 +717,30 @@
         return locs
 
     def _can_reindex(self, indexer: np.ndarray) -> None:
-        """
-        Check if we are allowing reindexing with this particular indexer.
+        """Check if we are allowing reindexing with this particular indexer.
 
         Parameters
         ----------
         indexer : an integer indexer
-
-        Raises
-        ------
-        ValueError if its a duplicate axis
+            
+        indexer: np.ndarray :
+            
+
+        Returns
+        -------
+
+        
         """
         # trying to reindex on an axis with duplicates
         if self.is_overlapping and len(indexer):
             raise ValueError("cannot reindex from an overlapping axis")
 
     def _needs_i8_conversion(self, key) -> bool:
-        """
-        Check if a given key needs i8 conversion. Conversion is necessary for
+        """Check if a given key needs i8 conversion. Conversion is necessary for
         Timestamp, Timedelta, DatetimeIndex, and TimedeltaIndex keys. An
         Interval-like requires conversion if it's endpoints are one of the
         aforementioned types.
-
+        
         Assumes that any list-like data has already been cast to an Index.
 
         Parameters
@@ -566,7 +750,8 @@
 
         Returns
         -------
-        bool
+
+        
         """
         if is_interval_dtype(key) or isinstance(key, Interval):
             return self._needs_i8_conversion(key.left)
@@ -575,8 +760,7 @@
         return isinstance(key, i8_types)
 
     def _maybe_convert_i8(self, key):
-        """
-        Maybe convert a given key to it's equivalent i8 value(s). Used as a
+        """Maybe convert a given key to it's equivalent i8 value(s). Used as a
         preprocessing step prior to IntervalTree queries (self._engine), which
         expects numeric data.
 
@@ -587,9 +771,8 @@
 
         Returns
         -------
-        scalar or list-like
-            The original key if no conversion occurred, int if converted scalar,
-            Int64Index if converted list-like.
+
+        
         """
         original = key
         if is_list_like(key):
@@ -629,6 +812,17 @@
         return key_i8
 
     def _check_method(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         if method is None:
             return
 
@@ -640,6 +834,21 @@
         raise ValueError("Invalid fill method")
 
     def _searchsorted_monotonic(self, label, side, exclude_label=False):
+        """
+
+        Parameters
+        ----------
+        label :
+            
+        side :
+            
+        exclude_label :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         if not self.is_non_overlapping_monotonic:
             raise KeyError(
                 "can only get slices from an IntervalIndex if bounds are "
@@ -668,41 +877,48 @@
     def get_loc(
         self, key, method: Optional[str] = None, tolerance=None
     ) -> Union[int, slice, np.ndarray]:
-        """
-        Get integer location, slice or boolean mask for requested label.
+        """Get integer location, slice or boolean mask for requested label.
 
         Parameters
         ----------
         key : label
+            
         method : {None}, optional
             * default: matches where the label is within an interval only.
+        method: Optional[str] :
+             (Default value = None)
+        tolerance :
+             (Default value = None)
 
         Returns
         -------
         int if unique index, slice if monotonic index, else mask
+            
 
         Examples
         --------
+        
+        You can also supply a point inside an interval.
+        
+        
+        If a label is in several intervals, you get the locations of all the
+        relevant intervals.
+        
+        
+        Only exact matches will be returned if an interval is provided.
         >>> i1, i2 = pd.Interval(0, 1), pd.Interval(1, 2)
         >>> index = pd.IntervalIndex([i1, i2])
         >>> index.get_loc(1)
         0
-
-        You can also supply a point inside an interval.
-
+        
         >>> index.get_loc(1.5)
         1
-
-        If a label is in several intervals, you get the locations of all the
-        relevant intervals.
-
+        
         >>> i3 = pd.Interval(0, 2)
         >>> overlapping_index = pd.IntervalIndex([i1, i2, i3])
         >>> overlapping_index.get_loc(0.5)
         array([ True, False,  True])
-
-        Only exact matches will be returned if an interval is provided.
-
+        
         >>> index.get_loc(pd.Interval(0, 1))
         0
         """
@@ -756,6 +972,23 @@
         limit: Optional[int] = None,
         tolerance: Optional[Any] = None,
     ) -> np.ndarray:
+        """
+
+        Parameters
+        ----------
+        target: AnyArrayLike :
+            
+        method: Optional[str] :
+             (Default value = None)
+        limit: Optional[int] :
+             (Default value = None)
+        tolerance: Optional[Any] :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
 
         self._check_method(method)
 
@@ -813,6 +1046,17 @@
     def get_indexer_non_unique(
         self, target: AnyArrayLike
     ) -> Tuple[np.ndarray, np.ndarray]:
+        """
+
+        Parameters
+        ----------
+        target: AnyArrayLike :
+            
+
+        Returns
+        -------
+
+        """
         target_as_index = ensure_index(target)
 
         # check that target_as_index IntervalIndex is compatible
@@ -852,22 +1096,41 @@
         return ensure_platform_int(indexer), ensure_platform_int(missing)
 
     def get_indexer_for(self, target: AnyArrayLike, **kwargs) -> np.ndarray:
-        """
-        Guaranteed return of an indexer even when overlapping.
-
+        """Guaranteed return of an indexer even when overlapping.
+        
         This dispatches to get_indexer or get_indexer_non_unique
         as appropriate.
 
-        Returns
-        -------
-        numpy.ndarray
-            List of indices.
+        Parameters
+        ----------
+        target: AnyArrayLike :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        
         """
         if self.is_overlapping:
             return self.get_indexer_non_unique(target)[0]
         return self.get_indexer(target, **kwargs)
 
     def _convert_slice_indexer(self, key: slice, kind: str):
+        """
+
+        Parameters
+        ----------
+        key: slice :
+            
+        kind: str :
+            
+
+        Returns
+        -------
+
+        """
         if not (key.step is None or key.step == 1):
             # GH#31658 if label-based, we require step == 1,
             #  if positional, we disallow float start/stop
@@ -883,6 +1146,19 @@
 
     @Appender(Index.where.__doc__)
     def where(self, cond, other=None):
+        """
+
+        Parameters
+        ----------
+        cond :
+            
+        other :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         if other is None:
             other = self._na_value
         values = np.where(cond, self._values, other)
@@ -890,12 +1166,17 @@
         return self._shallow_copy(result)
 
     def delete(self, loc):
-        """
-        Return a new IntervalIndex with passed location(-s) deleted
-
-        Returns
-        -------
-        IntervalIndex
+        """Return a new IntervalIndex with passed location(-s) deleted
+
+        Parameters
+        ----------
+        loc :
+            
+
+        Returns
+        -------
+
+        
         """
         new_left = self.left.delete(loc)
         new_right = self.right.delete(loc)
@@ -903,19 +1184,21 @@
         return self._shallow_copy(result)
 
     def insert(self, loc, item):
-        """
-        Return a new IntervalIndex inserting new item at location. Follows
+        """Return a new IntervalIndex inserting new item at location. Follows
         Python list.append semantics for negative values.  Only Interval
         objects and NA can be inserted into an IntervalIndex
 
         Parameters
         ----------
         loc : int
+            
         item : object
-
-        Returns
-        -------
-        IntervalIndex
+            
+
+        Returns
+        -------
+
+        
         """
         if isinstance(item, Interval):
             if item.closed != self.closed:
@@ -939,6 +1222,25 @@
 
     @Appender(_index_shared_docs["take"] % _index_doc_kwargs)
     def take(self, indices, axis=0, allow_fill=True, fill_value=None, **kwargs):
+        """
+
+        Parameters
+        ----------
+        indices :
+            
+        axis :
+             (Default value = 0)
+        allow_fill :
+             (Default value = True)
+        fill_value :
+             (Default value = None)
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         result = self._data.take(
             indices, axis=axis, allow_fill=allow_fill, fill_value=fill_value, **kwargs
         )
@@ -949,13 +1251,52 @@
     # __repr__ associated methods are based on MultiIndex
 
     def _format_with_header(self, header: List[str], na_rep: str = "NaN") -> List[str]:
+        """
+
+        Parameters
+        ----------
+        header: List[str] :
+            
+        na_rep: str :
+             (Default value = "NaN")
+
+        Returns
+        -------
+
+        """
         return header + list(self._format_native_types(na_rep=na_rep))
 
     def _format_native_types(self, na_rep="NaN", quoting=None, **kwargs):
+        """
+
+        Parameters
+        ----------
+        na_rep :
+             (Default value = "NaN")
+        quoting :
+             (Default value = None)
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         # GH 28210: use base method but with different default na_rep
         return super()._format_native_types(na_rep=na_rep, quoting=quoting, **kwargs)
 
     def _format_data(self, name=None):
+        """
+
+        Parameters
+        ----------
+        name :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
 
         # TODO: integrate with categorical and make generic
         # name argument is unused here; just for compat with base / categorical
@@ -990,6 +1331,7 @@
         return summary + "," + self._format_space()
 
     def _format_attrs(self):
+        """ """
         attrs = [("closed", repr(self.closed))]
         if self.name is not None:
             attrs.append(("name", default_pprint(self.name)))
@@ -997,17 +1339,39 @@
         return attrs
 
     def _format_space(self) -> str:
+        """ """
         space = " " * (len(type(self).__name__) + 1)
         return f"\n{space}"
 
     # --------------------------------------------------------------------
 
     def argsort(self, *args, **kwargs) -> np.ndarray:
+        """
+
+        Parameters
+        ----------
+        *args :
+            
+        **kwargs :
+            
+
+        Returns
+        -------
+
+        """
         return np.lexsort((self.right, self.left))
 
     def equals(self, other) -> bool:
-        """
-        Determines if two IntervalIndex objects contain the same elements.
+        """Determines if two IntervalIndex objects contain the same elements.
+
+        Parameters
+        ----------
+        other :
+            
+
+        Returns
+        -------
+
         """
         if self.is_(other):
             return True
@@ -1030,6 +1394,19 @@
     def intersection(
         self, other: "IntervalIndex", sort: bool = False
     ) -> "IntervalIndex":
+        """
+
+        Parameters
+        ----------
+        other: "IntervalIndex" :
+            
+        sort: bool :
+             (Default value = False)
+
+        Returns
+        -------
+
+        """
         if self.left.is_unique and self.right.is_unique:
             taken = self._intersection_unique(other)
         elif other.left.is_unique and other.right.is_unique and self.isna().sum() <= 1:
@@ -1046,18 +1423,21 @@
         return taken
 
     def _intersection_unique(self, other: "IntervalIndex") -> "IntervalIndex":
-        """
-        Used when the IntervalIndex does not have any common endpoint,
+        """Used when the IntervalIndex does not have any common endpoint,
         no mater left or right.
         Return the intersection with another IntervalIndex.
 
         Parameters
         ----------
         other : IntervalIndex
-
-        Returns
-        -------
-        IntervalIndex
+            
+        other: "IntervalIndex" :
+            
+
+        Returns
+        -------
+
+        
         """
         lindexer = self.left.get_indexer(other.left)
         rindexer = self.right.get_indexer(other.right)
@@ -1068,18 +1448,21 @@
         return self.take(indexer)
 
     def _intersection_non_unique(self, other: "IntervalIndex") -> "IntervalIndex":
-        """
-        Used when the IntervalIndex does have some common endpoints,
+        """Used when the IntervalIndex does have some common endpoints,
         on either sides.
         Return the intersection with another IntervalIndex.
 
         Parameters
         ----------
         other : IntervalIndex
-
-        Returns
-        -------
-        IntervalIndex
+            
+        other: "IntervalIndex" :
+            
+
+        Returns
+        -------
+
+        
         """
         mask = np.zeros(len(self), dtype=bool)
 
@@ -1095,8 +1478,34 @@
         return self[mask]
 
     def _setop(op_name: str, sort=None):
+        """
+
+        Parameters
+        ----------
+        op_name: str :
+            
+        sort :
+             (Default value = None)
+
+        Returns
+        -------
+
+        """
         @SetopCheck(op_name=op_name)
         def func(self, other, sort=sort):
+            """
+
+            Parameters
+            ----------
+            other :
+                
+            sort :
+                 (Default value = sort)
+
+            Returns
+            -------
+
+            """
             result = getattr(self._multiindex, op_name)(other._multiindex, sort=sort)
             result_name = get_op_result_name(self, other)
 
@@ -1112,9 +1521,15 @@
 
     @property
     def is_all_dates(self) -> bool:
-        """
-        This is False even when left/right contain datetime-like objects,
+        """This is False even when left/right contain datetime-like objects,
         as the check is done on the Interval itself
+
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         """
         return False
 
@@ -1142,8 +1557,16 @@
 
 
 def _is_valid_endpoint(endpoint) -> bool:
-    """
-    Helper for interval_range to check if start/end are valid types.
+    """Helper for interval_range to check if start/end are valid types.
+
+    Parameters
+    ----------
+    endpoint :
+        
+
+    Returns
+    -------
+
     """
     return any(
         [
@@ -1156,8 +1579,18 @@
 
 
 def _is_type_compatible(a, b) -> bool:
-    """
-    Helper for interval_range to check type compat of start/end/freq.
+    """Helper for interval_range to check type compat of start/end/freq.
+
+    Parameters
+    ----------
+    a :
+        
+    b :
+        
+
+    Returns
+    -------
+
     """
     is_ts_compat = lambda x: isinstance(x, (Timestamp, BaseOffset))
     is_td_compat = lambda x: isinstance(x, (Timedelta, BaseOffset))
@@ -1172,89 +1605,91 @@
 def interval_range(
     start=None, end=None, periods=None, freq=None, name=None, closed="right"
 ):
-    """
-    Return a fixed frequency IntervalIndex.
+    """Return a fixed frequency IntervalIndex.
 
     Parameters
     ----------
     start : numeric or datetime-like, default None
-        Left bound for generating intervals.
+        Left bound for generating intervals. (Default value = None)
     end : numeric or datetime-like, default None
-        Right bound for generating intervals.
+        Right bound for generating intervals. (Default value = None)
     periods : int, default None
-        Number of periods to generate.
+        Number of periods to generate. (Default value = None)
     freq : numeric, str, or DateOffset, default None
         The length of each interval. Must be consistent with the type of start
         and end, e.g. 2 for numeric, or '5H' for datetime-like.  Default is 1
         for numeric and 'D' for datetime-like.
     name : str, default None
-        Name of the resulting IntervalIndex.
+        Name of the resulting IntervalIndex. (Default value = None)
     closed : {'left', 'right', 'both', 'neither'}, default 'right'
         Whether the intervals are closed on the left-side, right-side, both
-        or neither.
+        or neither. (Default value = "right")
 
     Returns
     -------
     IntervalIndex
+        
 
     See Also
     --------
     IntervalIndex : An Index of intervals that are all closed on the same side.
-
     Notes
     -----
     Of the four parameters ``start``, ``end``, ``periods``, and ``freq``,
     exactly three must be specified. If ``freq`` is omitted, the resulting
     ``IntervalIndex`` will have ``periods`` linearly spaced elements between
     ``start`` and ``end``, inclusively.
-
+    
     To learn more about datetime-like frequency strings, please see `this link
     <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.
-
     Examples
     --------
     Numeric ``start`` and  ``end`` is supported.
-
+    
+    
+    Additionally, datetime-like input is also supported.
+    
+    
+    The ``freq`` parameter specifies the frequency between the left and right.
+    endpoints of the individual intervals within the ``IntervalIndex``.  For
+    numeric ``start`` and ``end``, the frequency must also be numeric.
+    
+    
+    Similarly, for datetime-like ``start`` and ``end``, the frequency must be
+    convertible to a DateOffset.
+    
+    
+    Specify ``start``, ``end``, and ``periods``; the frequency is generated
+    automatically (linearly spaced).
+    
+    
+    The ``closed`` parameter specifies which endpoints of the individual
+    intervals within the ``IntervalIndex`` are closed.
     >>> pd.interval_range(start=0, end=5)
     IntervalIndex([(0, 1], (1, 2], (2, 3], (3, 4], (4, 5]],
                   closed='right', dtype='interval[int64]')
-
-    Additionally, datetime-like input is also supported.
-
+    
     >>> pd.interval_range(start=pd.Timestamp('2017-01-01'),
     ...                   end=pd.Timestamp('2017-01-04'))
     IntervalIndex([(2017-01-01, 2017-01-02], (2017-01-02, 2017-01-03],
                    (2017-01-03, 2017-01-04]],
                   closed='right', dtype='interval[datetime64[ns]]')
-
-    The ``freq`` parameter specifies the frequency between the left and right.
-    endpoints of the individual intervals within the ``IntervalIndex``.  For
-    numeric ``start`` and ``end``, the frequency must also be numeric.
-
+    
     >>> pd.interval_range(start=0, periods=4, freq=1.5)
     IntervalIndex([(0.0, 1.5], (1.5, 3.0], (3.0, 4.5], (4.5, 6.0]],
                   closed='right', dtype='interval[float64]')
-
-    Similarly, for datetime-like ``start`` and ``end``, the frequency must be
-    convertible to a DateOffset.
-
+    
     >>> pd.interval_range(start=pd.Timestamp('2017-01-01'),
     ...                   periods=3, freq='MS')
     IntervalIndex([(2017-01-01, 2017-02-01], (2017-02-01, 2017-03-01],
                    (2017-03-01, 2017-04-01]],
                   closed='right', dtype='interval[datetime64[ns]]')
-
-    Specify ``start``, ``end``, and ``periods``; the frequency is generated
-    automatically (linearly spaced).
-
+    
     >>> pd.interval_range(start=0, end=6, periods=4)
     IntervalIndex([(0.0, 1.5], (1.5, 3.0], (3.0, 4.5], (4.5, 6.0]],
               closed='right',
               dtype='interval[float64]')
-
-    The ``closed`` parameter specifies which endpoints of the individual
-    intervals within the ``IntervalIndex`` are closed.
-
+    
     >>> pd.interval_range(end=5, periods=4, closed='both')
     IntervalIndex([[1, 2], [2, 3], [3, 4], [4, 5]],
                   closed='both', dtype='interval[int64]')
