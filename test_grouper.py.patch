# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/window/test_grouper.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/window/test_grouper.py
@@ -8,11 +8,24 @@
 
 
 class TestGrouperGrouping:
+    """ """
     def setup_method(self, method):
+        """
+
+        Parameters
+        ----------
+        method :
+            
+
+        Returns
+        -------
+
+        """
         self.series = Series(np.arange(10))
         self.frame = DataFrame({"A": [1] * 20 + [2] * 12 + [3] * 8, "B": np.arange(40)})
 
     def test_mutated(self):
+        """ """
 
         msg = r"groupby\(\) got an unexpected keyword argument 'foo'"
         with pytest.raises(TypeError, match=msg):
@@ -24,6 +37,7 @@
         assert g.mutated
 
     def test_getitem(self):
+        """ """
         g = self.frame.groupby("A")
         g_mutated = get_groupby(self.frame, by="A", mutated=True)
 
@@ -42,6 +56,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_getitem_multiple(self):
+        """ """
 
         # GH 13174
         g = self.frame.groupby("A")
@@ -56,6 +71,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_rolling(self):
+        """ """
         g = self.frame.groupby("A")
         r = g.rolling(window=4)
 
@@ -73,6 +89,17 @@
         "interpolation", ["linear", "lower", "higher", "midpoint", "nearest"]
     )
     def test_rolling_quantile(self, interpolation):
+        """
+
+        Parameters
+        ----------
+        interpolation :
+            
+
+        Returns
+        -------
+
+        """
         g = self.frame.groupby("A")
         r = g.rolling(window=4)
         result = r.quantile(0.4, interpolation=interpolation)
@@ -82,6 +109,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_rolling_corr_cov(self):
+        """ """
         g = self.frame.groupby("A")
         r = g.rolling(window=4)
 
@@ -89,6 +117,17 @@
             result = getattr(r, f)(self.frame)
 
             def func(x):
+                """
+
+                Parameters
+                ----------
+                x :
+                    
+
+                Returns
+                -------
+
+                """
                 return getattr(x.rolling(4), f)(self.frame)
 
             expected = g.apply(func)
@@ -97,12 +136,34 @@
             result = getattr(r.B, f)(pairwise=True)
 
             def func(x):
+                """
+
+                Parameters
+                ----------
+                x :
+                    
+
+                Returns
+                -------
+
+                """
                 return getattr(x.B.rolling(4), f)(pairwise=True)
 
             expected = g.apply(func)
             tm.assert_series_equal(result, expected)
 
     def test_rolling_apply(self, raw):
+        """
+
+        Parameters
+        ----------
+        raw :
+            
+
+        Returns
+        -------
+
+        """
         g = self.frame.groupby("A")
         r = g.rolling(window=4)
 
@@ -112,6 +173,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_rolling_apply_mutability(self):
+        """ """
         # GH 14013
         df = pd.DataFrame({"A": ["foo"] * 3 + ["bar"] * 3, "B": [1] * 6})
         g = df.groupby("A")
@@ -135,6 +197,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_expanding(self):
+        """ """
         g = self.frame.groupby("A")
         r = g.expanding()
 
@@ -153,6 +216,17 @@
         "interpolation", ["linear", "lower", "higher", "midpoint", "nearest"]
     )
     def test_expanding_quantile(self, interpolation):
+        """
+
+        Parameters
+        ----------
+        interpolation :
+            
+
+        Returns
+        -------
+
+        """
         g = self.frame.groupby("A")
         r = g.expanding()
         result = r.quantile(0.4, interpolation=interpolation)
@@ -162,6 +236,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_expanding_corr_cov(self):
+        """ """
         g = self.frame.groupby("A")
         r = g.expanding()
 
@@ -169,6 +244,17 @@
             result = getattr(r, f)(self.frame)
 
             def func(x):
+                """
+
+                Parameters
+                ----------
+                x :
+                    
+
+                Returns
+                -------
+
+                """
                 return getattr(x.expanding(), f)(self.frame)
 
             expected = g.apply(func)
@@ -177,12 +263,34 @@
             result = getattr(r.B, f)(pairwise=True)
 
             def func(x):
+                """
+
+                Parameters
+                ----------
+                x :
+                    
+
+                Returns
+                -------
+
+                """
                 return getattr(x.B.expanding(), f)(pairwise=True)
 
             expected = g.apply(func)
             tm.assert_series_equal(result, expected)
 
     def test_expanding_apply(self, raw):
+        """
+
+        Parameters
+        ----------
+        raw :
+            
+
+        Returns
+        -------
+
+        """
         g = self.frame.groupby("A")
         r = g.expanding()
 
@@ -193,9 +301,33 @@
 
     @pytest.mark.parametrize("expected_value,raw_value", [[1.0, True], [0.0, False]])
     def test_groupby_rolling(self, expected_value, raw_value):
+        """
+
+        Parameters
+        ----------
+        expected_value :
+            
+        raw_value :
+            
+
+        Returns
+        -------
+
+        """
         # GH 31754
 
         def foo(x):
+            """
+
+            Parameters
+            ----------
+            x :
+                
+
+            Returns
+            -------
+
+            """
             return int(isinstance(x, np.ndarray))
 
         df = pd.DataFrame({"id": [1, 1, 1], "value": [1, 2, 3]})
@@ -210,6 +342,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_groupby_rolling_center_center(self):
+        """ """
         # GH 35552
         series = Series(range(1, 6))
         result = series.groupby(series).rolling(center=True, window=3).mean()
@@ -275,6 +408,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_groupby_subselect_rolling(self):
+        """ """
         # GH 35486
         df = DataFrame(
             {"a": [1, 2, 3, 2], "b": [4.0, 2.0, 3.0, 1.0], "c": [10, 20, 30, 20]}
@@ -300,11 +434,30 @@
         tm.assert_series_equal(result, expected)
 
     def test_groupby_rolling_custom_indexer(self):
+        """ """
         # GH 35557
         class SimpleIndexer(pd.api.indexers.BaseIndexer):
+            """ """
             def get_window_bounds(
                 self, num_values=0, min_periods=None, center=None, closed=None
             ):
+                """
+
+                Parameters
+                ----------
+                num_values :
+                     (Default value = 0)
+                min_periods :
+                     (Default value = None)
+                center :
+                     (Default value = None)
+                closed :
+                     (Default value = None)
+
+                Returns
+                -------
+
+                """
                 min_periods = self.window_size if min_periods is None else 0
                 end = np.arange(num_values, dtype=np.int64) + 1
                 start = end.copy() - self.window_size
@@ -323,6 +476,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_groupby_rolling_subset_with_closed(self):
+        """ """
         # GH 35549
         df = pd.DataFrame(
             {
@@ -347,6 +501,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_groupby_subset_rolling_subset_with_closed(self):
+        """ """
         # GH 35549
         df = pd.DataFrame(
             {
@@ -375,6 +530,17 @@
 
     @pytest.mark.parametrize("func", ["max", "min"])
     def test_groupby_rolling_index_changed(self, func):
+        """
+
+        Parameters
+        ----------
+        func :
+            
+
+        Returns
+        -------
+
+        """
         # GH: #36018 nlevels of MultiIndex changed
         ds = Series(
             [1, 2, 2],
@@ -395,6 +561,7 @@
         tm.assert_series_equal(result, expected)
 
     def test_groupby_rolling_empty_frame(self):
+        """ """
         # GH 36197
         expected = pd.DataFrame({"s1": []})
         result = expected.groupby("s1").rolling(window=1).sum()
@@ -407,6 +574,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_groupby_rolling_string_index(self):
+        """ """
         # GH: 36727
         df = pd.DataFrame(
             [
@@ -436,6 +604,7 @@
         tm.assert_frame_equal(result, expected)
 
     def test_groupby_rolling_no_sort(self):
+        """ """
         # GH 36889
         result = (
             pd.DataFrame({"foo": [2, 1], "bar": [2, 1]})
