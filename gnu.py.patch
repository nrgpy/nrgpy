# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/numpy/distutils/fcompiler/gnu.py
+++ b/..//venv/lib/python3.8/site-packages/numpy/distutils/fcompiler/gnu.py
@@ -20,6 +20,7 @@
 
 
 def is_win64():
+    """ """
     return sys.platform == "win32" and platform.architecture()[0] == "64bit"
 
 
@@ -31,12 +32,23 @@
 
 
 class GnuFCompiler(FCompiler):
+    """ """
     compiler_type = 'gnu'
     compiler_aliases = ('g77', )
     description = 'GNU Fortran 77 compiler'
 
     def gnu_version_match(self, version_string):
-        """Handle the different versions of GNU fortran compilers"""
+        """Handle the different versions of GNU fortran compilers
+
+        Parameters
+        ----------
+        version_string :
+            
+
+        Returns
+        -------
+
+        """
         # Strip warning(s) that may be emitted by gfortran
         while version_string.startswith('gfortran: warning'):
             version_string = version_string[version_string.find('\n') + 1:]
@@ -80,6 +92,17 @@
         raise ValueError(err + version_string)
 
     def version_match(self, version_string):
+        """
+
+        Parameters
+        ----------
+        version_string :
+            
+
+        Returns
+        -------
+
+        """
         v = self.gnu_version_match(version_string)
         if not v or v[0] != 'g77':
             return None
@@ -113,6 +136,7 @@
     suggested_f90_compiler = 'gnu95'
 
     def get_flags_linker_so(self):
+        """ """
         opt = self.linker_so[1:]
         if sys.platform == 'darwin':
             target = os.environ.get('MACOSX_DEPLOYMENT_TARGET', None)
@@ -148,6 +172,7 @@
         return opt
 
     def get_libgcc_dir(self):
+        """ """
         try:
             output = subprocess.check_output(self.compiler_f77 +
                                             ['-print-libgcc-file-name'])
@@ -159,6 +184,7 @@
         return None
 
     def get_libgfortran_dir(self):
+        """ """
         if sys.platform[:5] == 'linux':
             libgfortran_name = 'libgfortran.so'
         elif sys.platform == 'darwin':
@@ -180,6 +206,7 @@
         return libgfortran_dir
 
     def get_library_dirs(self):
+        """ """
         opt = []
         if sys.platform[:5] != 'linux':
             d = self.get_libgcc_dir()
@@ -202,6 +229,7 @@
         return opt
 
     def get_libraries(self):
+        """ """
         opt = []
         d = self.get_libgcc_dir()
         if d is not None:
@@ -223,9 +251,11 @@
         return opt
 
     def get_flags_debug(self):
+        """ """
         return ['-g']
 
     def get_flags_opt(self):
+        """ """
         v = self.get_version()
         if v and v <= '3.3.3':
             # With this compiler version building Fortran BLAS/LAPACK
@@ -237,7 +267,7 @@
         return opt
 
     def _c_arch_flags(self):
-        """ Return detected arch flags from CFLAGS """
+        """ """
         from distutils import sysconfig
         try:
             cflags = sysconfig.get_config_vars()['CFLAGS']
@@ -250,9 +280,21 @@
         return arch_flags
 
     def get_flags_arch(self):
+        """ """
         return []
 
     def runtime_library_dir_option(self, dir):
+        """
+
+        Parameters
+        ----------
+        dir :
+            
+
+        Returns
+        -------
+
+        """
         if sys.platform == 'win32':
             # Linux/Solaris/Unix support RPATH, Windows does not
             raise NotImplementedError
@@ -270,11 +312,23 @@
 
 
 class Gnu95FCompiler(GnuFCompiler):
+    """ """
     compiler_type = 'gnu95'
     compiler_aliases = ('gfortran', )
     description = 'GNU Fortran 95 compiler'
 
     def version_match(self, version_string):
+        """
+
+        Parameters
+        ----------
+        version_string :
+            
+
+        Returns
+        -------
+
+        """
         v = self.gnu_version_match(version_string)
         if not v or v[0] != 'gfortran':
             return None
@@ -320,7 +374,19 @@
     g2c = 'gfortran'
 
     def _universal_flags(self, cmd):
-        """Return a list of -arch flags for every supported architecture."""
+        """
+
+        Parameters
+        ----------
+        cmd :
+            
+
+        Returns
+        -------
+        type
+            
+
+        """
         if not sys.platform == 'darwin':
             return []
         arch_flags = []
@@ -336,6 +402,7 @@
         return arch_flags
 
     def get_flags(self):
+        """ """
         flags = GnuFCompiler.get_flags(self)
         arch_flags = self._universal_flags(self.compiler_f90)
         if arch_flags:
@@ -343,6 +410,7 @@
         return flags
 
     def get_flags_linker_so(self):
+        """ """
         flags = GnuFCompiler.get_flags_linker_so(self)
         arch_flags = self._universal_flags(self.linker_so)
         if arch_flags:
@@ -350,6 +418,7 @@
         return flags
 
     def get_library_dirs(self):
+        """ """
         opt = GnuFCompiler.get_library_dirs(self)
         if sys.platform == 'win32':
             c_compiler = self.c_compiler
@@ -369,6 +438,7 @@
         return opt
 
     def get_libraries(self):
+        """ """
         opt = GnuFCompiler.get_libraries(self)
         if sys.platform == 'darwin':
             opt.remove('cc_dynamic')
@@ -387,6 +457,7 @@
         return opt
 
     def get_target(self):
+        """ """
         try:
             output = subprocess.check_output(self.compiler_f77 + ['-v'])
         except (OSError, subprocess.CalledProcessError):
@@ -399,6 +470,17 @@
         return ""
 
     def _hash_files(self, filenames):
+        """
+
+        Parameters
+        ----------
+        filenames :
+            
+
+        Returns
+        -------
+
+        """
         h = hashlib.sha1()
         for fn in filenames:
             with open(fn, 'rb') as f:
@@ -415,7 +497,24 @@
                           chained_dlls, is_archive):
         """Create a wrapper shared library for the given objects
 
-        Return an MSVC-compatible lib
+        Parameters
+        ----------
+        objects :
+            
+        output_dir :
+            
+        extra_dll_dir :
+            
+        chained_dlls :
+            
+        is_archive :
+            
+
+        Returns
+        -------
+        type
+            
+
         """
 
         c_compiler = self.c_compiler
@@ -474,13 +573,36 @@
         return lib_path, dll_path
 
     def can_ccompiler_link(self, compiler):
+        """
+
+        Parameters
+        ----------
+        compiler :
+            
+
+        Returns
+        -------
+
+        """
         # MSVC cannot link objects compiled by GNU fortran
         return compiler.compiler_type not in ("msvc", )
 
     def wrap_unlinkable_objects(self, objects, output_dir, extra_dll_dir):
-        """
-        Convert a set of object files that are not compatible with the default
+        """Convert a set of object files that are not compatible with the default
         linker, to a file that is compatible.
+
+        Parameters
+        ----------
+        objects :
+            
+        output_dir :
+            
+        extra_dll_dir :
+            
+
+        Returns
+        -------
+
         """
         if self.c_compiler.compiler_type == "msvc":
             # Compile a DLL and return the lib for the DLL as
@@ -524,7 +646,21 @@
 
 
 def _can_target(cmd, arch):
-    """Return true if the architecture supports the -arch flag"""
+    """
+
+    Parameters
+    ----------
+    cmd :
+        
+    arch :
+        
+
+    Returns
+    -------
+    type
+        
+
+    """
     newcmd = cmd[:]
     fid, filename = tempfile.mkstemp(suffix=".f")
     os.close(fid)
