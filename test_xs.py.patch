# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/tests/indexing/multiindex/test_xs.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/tests/indexing/multiindex/test_xs.py
@@ -8,6 +8,7 @@
 
 @pytest.fixture
 def four_level_index_dataframe():
+    """ """
     arr = np.array(
         [
             [-0.5109, -2.3358, -0.4645, 0.05076, 0.364],
@@ -31,6 +32,23 @@
     ],
 )
 def test_xs_named_levels_axis_eq_1(key, level, exp_arr, exp_index):
+    """
+
+    Parameters
+    ----------
+    key :
+        
+    level :
+        
+    exp_arr :
+        
+    exp_index :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-2903
     arr = np.random.randn(4, 4)
     index = MultiIndex(
@@ -45,6 +63,17 @@
 
 
 def test_xs_values(multiindex_dataframe_random_data):
+    """
+
+    Parameters
+    ----------
+    multiindex_dataframe_random_data :
+        
+
+    Returns
+    -------
+
+    """
     df = multiindex_dataframe_random_data
     result = df.xs(("bar", "two")).values
     expected = df.values[4]
@@ -52,6 +81,17 @@
 
 
 def test_xs_loc_equality(multiindex_dataframe_random_data):
+    """
+
+    Parameters
+    ----------
+    multiindex_dataframe_random_data :
+        
+
+    Returns
+    -------
+
+    """
     df = multiindex_dataframe_random_data
     result = df.xs(("bar", "two"))
     expected = df.loc[("bar", "two")]
@@ -59,6 +99,7 @@
 
 
 def test_xs_missing_values_in_index():
+    """ """
     # see gh-6574
     # missing values in returned index should be preserved
     acc = [
@@ -82,6 +123,21 @@
 
 @pytest.mark.parametrize("key, level", [("one", "second"), (["one"], ["second"])])
 def test_xs_with_duplicates(key, level, multiindex_dataframe_random_data):
+    """
+
+    Parameters
+    ----------
+    key :
+        
+    level :
+        
+    multiindex_dataframe_random_data :
+        
+
+    Returns
+    -------
+
+    """
     # see gh-13719
     frame = multiindex_dataframe_random_data
     df = concat([frame] * 2)
@@ -93,6 +149,17 @@
 
 
 def test_xs_level(multiindex_dataframe_random_data):
+    """
+
+    Parameters
+    ----------
+    multiindex_dataframe_random_data :
+        
+
+    Returns
+    -------
+
+    """
     df = multiindex_dataframe_random_data
     result = df.xs("two", level="second")
     expected = df[df.index.get_level_values(1) == "two"]
@@ -101,6 +168,7 @@
 
 
 def test_xs_level_eq_2():
+    """ """
     arr = np.random.randn(3, 5)
     index = MultiIndex(
         levels=[["a", "p", "x"], ["b", "q", "y"], ["c", "r", "z"]],
@@ -120,6 +188,19 @@
     ],
 )
 def test_xs_level_multiple(indexer, four_level_index_dataframe):
+    """
+
+    Parameters
+    ----------
+    indexer :
+        
+    four_level_index_dataframe :
+        
+
+    Returns
+    -------
+
+    """
     df = four_level_index_dataframe
     expected_values = [[0.4473, 1.4152, 0.2834, 1.00661, 0.1744]]
     expected_index = MultiIndex(
@@ -131,6 +212,17 @@
 
 
 def test_xs_setting_with_copy_error(multiindex_dataframe_random_data):
+    """
+
+    Parameters
+    ----------
+    multiindex_dataframe_random_data :
+        
+
+    Returns
+    -------
+
+    """
     # this is a copy in 0.14
     df = multiindex_dataframe_random_data
     result = df.xs("two", level="second")
@@ -143,6 +235,17 @@
 
 
 def test_xs_setting_with_copy_error_multiple(four_level_index_dataframe):
+    """
+
+    Parameters
+    ----------
+    four_level_index_dataframe :
+        
+
+    Returns
+    -------
+
+    """
     # this is a copy in 0.14
     df = four_level_index_dataframe
     result = df.xs(("a", 4), level=["one", "four"])
@@ -155,6 +258,7 @@
 
 
 def test_xs_integer_key():
+    """ """
     # see gh-2107
     dates = range(20111201, 20111205)
     ids = list("abcde")
@@ -170,6 +274,19 @@
     "indexer", [lambda df: df.xs("a", level=0), lambda df: df.xs("a")]
 )
 def test_xs_level0(indexer, four_level_index_dataframe):
+    """
+
+    Parameters
+    ----------
+    indexer :
+        
+    four_level_index_dataframe :
+        
+
+    Returns
+    -------
+
+    """
     df = four_level_index_dataframe
     expected_values = [
         [-0.5109, -2.3358, -0.4645, 0.05076, 0.364],
@@ -187,6 +304,17 @@
 
 
 def test_xs_level_series(multiindex_dataframe_random_data):
+    """
+
+    Parameters
+    ----------
+    multiindex_dataframe_random_data :
+        
+
+    Returns
+    -------
+
+    """
     # this test is not explicitly testing .xs functionality
     # TODO: move to another module or refactor
     df = multiindex_dataframe_random_data
@@ -197,6 +325,17 @@
 
 
 def test_xs_level_series_ymd(multiindex_year_month_day_dataframe_random_data):
+    """
+
+    Parameters
+    ----------
+    multiindex_year_month_day_dataframe_random_data :
+        
+
+    Returns
+    -------
+
+    """
     # this test is not explicitly testing .xs functionality
     # TODO: move to another module or refactor
     df = multiindex_year_month_day_dataframe_random_data
@@ -209,6 +348,17 @@
 def test_xs_level_series_slice_not_implemented(
     multiindex_year_month_day_dataframe_random_data,
 ):
+    """
+
+    Parameters
+    ----------
+    multiindex_year_month_day_dataframe_random_data :
+        
+
+    Returns
+    -------
+
+    """
     # this test is not explicitly testing .xs functionality
     # TODO: move to another module or refactor
     # not implementing this for now
@@ -221,6 +371,7 @@
 
 
 def test_series_getitem_multiindex_xs():
+    """ """
     # GH6258
     dt = list(date_range("20130903", periods=3))
     idx = MultiIndex.from_product([list("AB"), dt])
@@ -232,6 +383,7 @@
 
 
 def test_series_getitem_multiindex_xs_by_label():
+    """ """
     # GH5684
     idx = MultiIndex.from_tuples(
         [("a", "one"), ("a", "two"), ("b", "one"), ("b", "two")]
@@ -248,6 +400,7 @@
 
 
 def test_xs_levels_raises():
+    """ """
     df = DataFrame({"A": [1, 2, 3]})
 
     msg = "Index must be a MultiIndex"
