# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/pandas/core/computation/eval.py
+++ b/..//venv/lib/python3.8/site-packages/pandas/core/computation/eval.py
@@ -18,25 +18,26 @@
 
 
 def _check_engine(engine: Optional[str]) -> str:
-    """
-    Make sure a valid engine is passed.
+    """Make sure a valid engine is passed.
 
     Parameters
     ----------
     engine : str
         String to validate.
+    engine: Optional[str] :
+        
+
+    Returns
+    -------
 
     Raises
     ------
     KeyError
-      * If an invalid engine is passed.
+        * If an invalid engine is passed.
     ImportError
-      * If numexpr was requested but doesn't exist.
-
-    Returns
-    -------
-    str
-        Engine name.
+        * If numexpr was requested but doesn't exist.
+
+    
     """
     from pandas.core.computation.check import _NUMEXPR_INSTALLED
 
@@ -63,17 +64,19 @@
 
 
 def _check_parser(parser: str):
-    """
-    Make sure a valid parser is passed.
+    """Make sure a valid parser is passed.
 
     Parameters
     ----------
     parser : str
-
-    Raises
-    ------
-    KeyError
-      * If an invalid parser is passed
+        
+    parser: str :
+        
+
+    Returns
+    -------
+
+    
     """
     if parser not in _parsers:
         raise KeyError(
@@ -82,6 +85,17 @@
 
 
 def _check_resolvers(resolvers):
+    """
+
+    Parameters
+    ----------
+    resolvers :
+        
+
+    Returns
+    -------
+
+    """
     if resolvers is not None:
         for resolver in resolvers:
             if not hasattr(resolver, "__getitem__"):
@@ -93,27 +107,25 @@
 
 
 def _check_expression(expr):
-    """
-    Make sure an expression is not an empty string
+    """Make sure an expression is not an empty string
 
     Parameters
     ----------
     expr : object
         An object that can be converted to a string
 
-    Raises
-    ------
-    ValueError
-      * If expr is an empty string
+    Returns
+    -------
+
+    
     """
     if not expr:
         raise ValueError("expr cannot be an empty string")
 
 
 def _convert_expression(expr) -> str:
-    """
-    Convert an object to an expression.
-
+    """Convert an object to an expression.
+    
     This function converts an object to an expression (a unicode string) and
     checks to make sure it isn't empty after conversion. This is used to
     convert operators to their string representation for recursive calls to
@@ -129,10 +141,7 @@
     str
         The string representation of an object.
 
-    Raises
-    ------
-    ValueError
-      * If the expression is empty.
+    
     """
     s = pprint_thing(expr)
     _check_expression(s)
@@ -140,6 +149,21 @@
 
 
 def _check_for_locals(expr: str, stack_level: int, parser: str):
+    """
+
+    Parameters
+    ----------
+    expr: str :
+        
+    stack_level: int :
+        
+    parser: str :
+        
+
+    Returns
+    -------
+
+    """
 
     at_top_of_stack = stack_level == 0
     not_pandas_parser = parser != "pandas"
@@ -170,9 +194,8 @@
     target=None,
     inplace=False,
 ):
-    """
-    Evaluate a Python expression as a string using various backends.
-
+    """Evaluate a Python expression as a string using various backends.
+    
     The following arithmetic operations are supported: ``+``, ``-``, ``*``,
     ``/``, ``**``, ``%``, ``//`` (python engine only) along with the following
     boolean operations: ``|`` (or), ``&`` (and), and ``~`` (not).
@@ -198,22 +221,17 @@
         :ref:`enhancing performance <enhancingperf.eval>` documentation for
         more details.
     engine : {'python', 'numexpr'}, default 'numexpr'
-
         The engine used to evaluate the expression. Supported engines are
-
         - None         : tries to use ``numexpr``, falls back to ``python``
         - ``'numexpr'``: This default engine evaluates pandas objects using
-                         numexpr for large speed ups in complex expressions
-                         with large frames.
+        numexpr for large speed ups in complex expressions
+        with large frames.
         - ``'python'``: Performs operations as if you had ``eval``'d in top
-                        level python. This engine is generally not that useful.
-
+        level python. This engine is generally not that useful.
         More backends may be available in the future.
-
     truediv : bool, optional
         Whether to use true division, like in Python >= 3.
-        deprecated:: 1.0.0
-
+        deprecated:: 1.0.0 (Default value = no_default)
     local_dict : dict or None, optional
         A dictionary of local variables, taken from locals() by default.
     global_dict : dict or None, optional
@@ -225,43 +243,43 @@
         :meth:`~DataFrame.query` method to inject the
         ``DataFrame.index`` and ``DataFrame.columns``
         variables that refer to their respective :class:`~pandas.DataFrame`
-        instance attributes.
+        instance attributes. (Default value = ())
     level : int, optional
         The number of prior stack frames to traverse and add to the current
-        scope. Most users will **not** need to change this parameter.
+        scope. Most users will **not** need to change this parameter. (Default value = 0)
     target : object, optional, default None
         This is the target object for assignment. It is used when there is
         variable assignment in the expression. If so, then `target` must
         support item assignment with string keys, and if a copy is being
-        returned, it must also support `.copy()`.
+        returned, it must also support `.copy()`. (Default value = None)
     inplace : bool, default False
         If `target` is provided, and the expression mutates `target`, whether
         to modify `target` inplace. Otherwise, return a copy of `target` with
-        the mutation.
+        the mutation. (Default value = False)
+    engine: Optional[str] :
+         (Default value = None)
 
     Returns
     -------
     ndarray, numeric scalar, DataFrame, Series
+        
 
     Raises
     ------
     ValueError
         There are many instances where such an error can be raised:
-
         - `target=None`, but the expression is multiline.
         - The expression is multiline, but not all them have item assignment.
-          An example of such an arrangement is this:
-
-          a = b + 1
-          a + 2
-
-          Here, there are expressions on different lines, making it multiline,
-          but the last line has no variable assigned to the output of `a + 2`.
+        An example of such an arrangement is this:
+        a = b + 1
+        a + 2
+        Here, there are expressions on different lines, making it multiline,
+        but the last line has no variable assigned to the output of `a + 2`.
         - `inplace=True`, but the expression is missing item assignment.
         - Item assignment is provided, but the `target` does not support
-          string item assignment.
+        string item assignment.
         - Item assignment is provided and `inplace=False`, but the `target`
-          does not support the `.copy()` method
+        does not support the `.copy()` method
 
     See Also
     --------
@@ -269,25 +287,23 @@
             of a frame.
     DataFrame.eval : Evaluate a string describing operations on
             DataFrame columns.
-
     Notes
     -----
     The ``dtype`` of any objects involved in an arithmetic ``%`` operation are
     recursively cast to ``float64``.
-
+    
     See the :ref:`enhancing performance <enhancingperf.eval>` documentation for
     more details.
-
     Examples
     --------
+    
+    We can add a new column using ``pd.eval``:
     >>> df = pd.DataFrame({"animal": ["dog", "pig"], "age": [10, 20]})
     >>> df
       animal  age
     0    dog   10
     1    pig   20
-
-    We can add a new column using ``pd.eval``:
-
+    
     >>> pd.eval("double_age = df.age * 2", target=df)
       animal  age  double_age
     0    dog   10          20
