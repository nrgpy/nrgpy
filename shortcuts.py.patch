# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/IPython/terminal/shortcuts.py
+++ b/..//venv/lib/python3.8/site-packages/IPython/terminal/shortcuts.py
@@ -24,12 +24,23 @@
 @undoc
 @Condition
 def cursor_in_leading_ws():
+    """ """
     before = get_app().current_buffer.document.current_line_before_cursor
     return (not before) or before.isspace()
 
 
 def create_ipython_shortcuts(shell):
-    """Set up the prompt_toolkit keyboard shortcuts for IPython"""
+    """Set up the prompt_toolkit keyboard shortcuts for IPython
+
+    Parameters
+    ----------
+    shell :
+        
+
+    Returns
+    -------
+
+    """
 
     kb = KeyBindings()
     insert_mode = vi_insert_mode | emacs_insert_mode
@@ -45,6 +56,17 @@
                         ))(return_handler)
 
     def reformat_and_execute(event):
+        """
+
+        Parameters
+        ----------
+        event :
+            
+
+        Returns
+        -------
+
+        """
         reformat_text_before_cursor(event.current_buffer, event.current_buffer.document, shell)
         event.current_buffer.validate_and_handle()
 
@@ -96,6 +118,21 @@
 
 
 def reformat_text_before_cursor(buffer, document, shell):
+    """
+
+    Parameters
+    ----------
+    buffer :
+        
+    document :
+        
+    shell :
+        
+
+    Returns
+    -------
+
+    """
     text = buffer.delete_before_cursor(len(document.text[:document.cursor_position]))
     try:
         formatted_text = shell.reformat_handler(text)
@@ -105,9 +142,30 @@
 
 
 def newline_or_execute_outer(shell):
+    """
+
+    Parameters
+    ----------
+    shell :
+        
+
+    Returns
+    -------
+
+    """
 
     def newline_or_execute(event):
-        """When the user presses return, insert a newline or execute the code."""
+        """When the user presses return, insert a newline or execute the code.
+
+        Parameters
+        ----------
+        event :
+            
+
+        Returns
+        -------
+
+        """
         b = event.current_buffer
         d = b.document
 
@@ -156,30 +214,68 @@
 
 
 def previous_history_or_previous_completion(event):
-    """
-    Control-P in vi edit mode on readline is history next, unlike default prompt toolkit.
-
+    """Control-P in vi edit mode on readline is history next, unlike default prompt toolkit.
+    
     If completer is open this still select previous completion.
+
+    Parameters
+    ----------
+    event :
+        
+
+    Returns
+    -------
+
     """
     event.current_buffer.auto_up()
 
 
 def next_history_or_next_completion(event):
-    """
-    Control-N in vi edit mode on readline is history previous, unlike default prompt toolkit.
-
+    """Control-N in vi edit mode on readline is history previous, unlike default prompt toolkit.
+    
     If completer is open this still select next completion.
+
+    Parameters
+    ----------
+    event :
+        
+
+    Returns
+    -------
+
     """
     event.current_buffer.auto_down()
 
 
 def dismiss_completion(event):
+    """
+
+    Parameters
+    ----------
+    event :
+        
+
+    Returns
+    -------
+
+    """
     b = event.current_buffer
     if b.complete_state:
         b.cancel_completion()
 
 
 def reset_buffer(event):
+    """
+
+    Parameters
+    ----------
+    event :
+        
+
+    Returns
+    -------
+
+    """
     b = event.current_buffer
     if b.complete_state:
         b.cancel_completion()
@@ -188,32 +284,81 @@
 
 
 def reset_search_buffer(event):
+    """
+
+    Parameters
+    ----------
+    event :
+        
+
+    Returns
+    -------
+
+    """
     if event.current_buffer.document.text:
         event.current_buffer.reset()
     else:
         event.app.layout.focus(DEFAULT_BUFFER)
 
 def suspend_to_bg(event):
+    """
+
+    Parameters
+    ----------
+    event :
+        
+
+    Returns
+    -------
+
+    """
     event.app.suspend_to_background()
 
 def force_exit(event):
-    """
-    Force exit (with a non-zero return value)
+    """Force exit (with a non-zero return value)
+
+    Parameters
+    ----------
+    event :
+        
+
+    Returns
+    -------
+
     """
     sys.exit("Quit")
 
 def indent_buffer(event):
+    """
+
+    Parameters
+    ----------
+    event :
+        
+
+    Returns
+    -------
+
+    """
     event.current_buffer.insert_text(' ' * 4)
 
 @undoc
 def newline_with_copy_margin(event):
-    """
-    DEPRECATED since IPython 6.0
-
+    """DEPRECATED since IPython 6.0
+    
     See :any:`newline_autoindent_outer` for a replacement.
-
+    
     Preserve margin and cursor position when using
     Control-O to insert a newline in EMACS mode
+
+    Parameters
+    ----------
+    event :
+        
+
+    Returns
+    -------
+
     """
     warnings.warn("`newline_with_copy_margin(event)` is deprecated since IPython 6.0. "
       "see `newline_autoindent_outer(shell)(event)` for a replacement.",
@@ -230,16 +375,34 @@
 
 def newline_autoindent_outer(inputsplitter) -> Callable[..., None]:
     """
-    Return a function suitable for inserting a indented newline after the cursor.
-
-    Fancier version of deprecated ``newline_with_copy_margin`` which should
-    compute the correct indentation of the inserted line. That is to say, indent
-    by 4 extra space after a function definition, class definition, context
-    manager... And dedent by 4 space after ``pass``, ``return``, ``raise ...``.
+
+    Parameters
+    ----------
+    inputsplitter :
+        
+
+    Returns
+    -------
+    type
+        Fancier version of deprecated ``newline_with_copy_margin`` which should
+        compute the correct indentation of the inserted line. That is to say, indent
+        by 4 extra space after a function definition, class definition, context
+        manager... And dedent by 4 space after ``pass``, ``return``, ``raise ...``.
+
     """
 
     def newline_autoindent(event):
-        """insert a newline after the cursor indented appropriately."""
+        """insert a newline after the cursor indented appropriately.
+
+        Parameters
+        ----------
+        event :
+            
+
+        Returns
+        -------
+
+        """
         b = event.current_buffer
         d = b.document
 
@@ -253,6 +416,17 @@
 
 
 def open_input_in_editor(event):
+    """
+
+    Parameters
+    ----------
+    event :
+        
+
+    Returns
+    -------
+
+    """
     event.app.current_buffer.open_in_editor()
 
 
@@ -264,6 +438,17 @@
 
     @undoc
     def win_paste(event):
+        """
+
+        Parameters
+        ----------
+        event :
+            
+
+        Returns
+        -------
+
+        """
         try:
             text = win32_clipboard_get()
         except TryNext:
