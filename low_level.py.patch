# Patch generated by Pyment v0.3.3

--- a/..//venv/lib/python3.8/site-packages/argon2/low_level.py
+++ b/..//venv/lib/python3.8/site-packages/argon2/low_level.py
@@ -37,10 +37,16 @@
 
 
 class Type(Enum):
-    """
-    Enum of Argon2 variants.
-
+    """Enum of Argon2 variants.
+    
     Please see :doc:`parameters` on how to pick one.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     D = lib.Argon2_d
@@ -78,28 +84,54 @@
     type,
     version=ARGON2_VERSION,
 ):
-    """
-    Hash *secret* and return an **encoded** hash.
-
+    """Hash *secret* and return an **encoded** hash.
+    
     An encoded hash can be directly passed into :func:`verify_secret` as it
     contains all parameters and the salt.
 
-    :param bytes secret: Secret to hash.
-    :param bytes salt: A salt_.  Should be random and different for each
+    Parameters
+    ----------
+    bytes :
+        secret: Secret to hash.
+    bytes :
+        salt: A salt_.  Should be random and different for each
         secret.
-    :param Type type: Which Argon2 variant to use.
-    :param int version: Which Argon2 version to use.
-
-    For an explanation of the Argon2 parameters see :class:`PasswordHasher`.
-
-    :rtype: bytes
-
-    :raises argon2.exceptions.HashingError: If hashing fails.
-
-    .. versionadded:: 16.0.0
-
-    .. _salt: https://en.wikipedia.org/wiki/Salt_(cryptography)
-    .. _kibibytes: https://en.wikipedia.org/wiki/Binary_prefix#kibi
+    Type :
+        type: Which Argon2 variant to use.
+    int :
+        version: Which Argon2 version to use.
+        
+        For an explanation of the Argon2 parameters see :class:`PasswordHasher`.
+    secret :
+        
+    salt :
+        
+    time_cost :
+        
+    memory_cost :
+        
+    parallelism :
+        
+    hash_len :
+        
+    type :
+        
+    version :
+         (Default value = ARGON2_VERSION)
+
+    Returns
+    -------
+
+    Raises
+    ------
+    argon2.exceptions.HashingError
+        If hashing fails.
+        
+        .. versionadded:: 16.0.0
+        
+        .. _salt: https://en.wikipedia.org/wiki/Salt_(cryptography)
+        .. _kibibytes: https://en.wikipedia.org/wiki/Binary_prefix#kibi
+
     """
     size = (
         lib.argon2_encodedlen(
@@ -144,12 +176,34 @@
     type,
     version=ARGON2_VERSION,
 ):
-    """
-    Hash *password* and return a **raw** hash.
-
+    """Hash *password* and return a **raw** hash.
+    
     This function takes the same parameters as :func:`hash_secret`.
-
+    
     .. versionadded:: 16.0.0
+
+    Parameters
+    ----------
+    secret :
+        
+    salt :
+        
+    time_cost :
+        
+    memory_cost :
+        
+    parallelism :
+        
+    hash_len :
+        
+    type :
+        
+    version :
+         (Default value = ARGON2_VERSION)
+
+    Returns
+    -------
+
     """
     buf = ffi.new("uint8_t[]", hash_len)
 
@@ -175,28 +229,45 @@
 
 
 def verify_secret(hash, secret, type):
-    """
-    Verify whether *secret* is correct for *hash* of *type*.
-
-    :param bytes hash: An encoded Argon2 hash as returned by
+    """Verify whether *secret* is correct for *hash* of *type*.
+
+    Parameters
+    ----------
+    bytes :
+        hash: An encoded Argon2 hash as returned by
         :func:`hash_secret`.
-    :param bytes secret: The secret to verify whether it matches the one
+    bytes :
+        secret: The secret to verify whether it matches the one
         in *hash*.
-    :param Type type: Type for *hash*.
-
-    :raises argon2.exceptions.VerifyMismatchError: If verification fails
+    Type :
+        type: Type for *hash*.
+    hash :
+        
+    secret :
+        
+    type :
+        
+
+    Returns
+    -------
+    bool
+
+.. versionadded:: 16.0.0
+.. versionchanged:: 16.1.0
+    Raise :exc:`~argon2.exceptions.VerifyMismatchError` on mismatches
+    instead of its more generic superclass.
+        True`` on success, raise
+        :exc:`~argon2.exceptions.VerificationError` otherwise.
+
+    Raises
+    ------
+    argon2.exceptions.VerifyMismatchError
+        If verification fails
         because *hash* is not valid for *secret* of *type*.
-    :raises argon2.exceptions.VerificationError: If verification fails for
+    argon2.exceptions.VerificationError
+        If verification fails for
         other reasons.
 
-    :return: ``True`` on success, raise
-        :exc:`~argon2.exceptions.VerificationError` otherwise.
-    :rtype: bool
-
-    .. versionadded:: 16.0.0
-    .. versionchanged:: 16.1.0
-        Raise :exc:`~argon2.exceptions.VerifyMismatchError` on mismatches
-        instead of its more generic superclass.
     """
     rv = lib.argon2_verify(
         ffi.new("char[]", hash),
@@ -213,42 +284,54 @@
 
 
 def core(context, type):
-    """
-    Direct binding to the ``argon2_ctx`` function.
-
+    """Direct binding to the ``argon2_ctx`` function.
+    
     .. warning::
         This is a strictly advanced function working on raw C data structures.
         Both Argon2's and ``argon2-cffi``'s higher-level bindings do a lot of
         sanity checks and housekeeping work that *you* are now responsible for
         (e.g. clearing buffers). The structure of the *context* object can,
         has, and will change with *any* release!
-
+    
         Use at your own peril; ``argon2-cffi`` does *not* use this binding
         itself.
 
-    :param context: A CFFI Argon2 context object (i.e. an ``struct
+    Parameters
+    ----------
+    context :
+        A CFFI Argon2 context object (i.e. an ``struct
         Argon2_Context``/``argon2_context``).
-    :param int type: Which Argon2 variant to use.  You can use the ``value``
+    int :
+        type: Which Argon2 variant to use.  You can use the ``value``
         field of :class:`Type`'s fields.
-
-    :rtype: int
-    :return: An Argon2 error code.  Can be transformed into a string using
+    type :
+        
+
+    Returns
+    -------
+    type
+        An Argon2 error code.  Can be transformed into a string using
         :func:`error_to_str`.
-
-    .. versionadded:: 16.0.0
+        
+        .. versionadded:: 16.0.0
+
     """
     return lib.argon2_ctx(context, type)
 
 
 def error_to_str(error):
-    """
-    Convert an Argon2 error code into a native string.
-
-    :param int error: An Argon2 error code as returned by :func:`core`.
-
-    :rtype: str
-
-    .. versionadded:: 16.0.0
+    """Convert an Argon2 error code into a native string.
+
+    Parameters
+    ----------
+    int :
+        error: An Argon2 error code as returned by :func:`core`.
+    error :
+        
+
+    Returns
+    -------
+
     """
     msg = ffi.string(lib.argon2_error_message(error))
     if PY3:
